package sifxml

import (
  "fmt"
  "log"
  "reflect"

  "github.com/mohae/deepcopy"
  )

type Prop struct {
  Key string
  Value interface{}
}

func CodesetContains(codeset map[string]struct{}, value interface{}) bool {

 	vstr, ok := value.(string)
 	if !ok {
 		return ok
 	}
 	_, ok = codeset[vstr]
 	return ok
 }

  // XXXXX
func ActivitySlice() []*Activity {
  return make([]*Activity, 0)
  }
  // XXXXX
func AddressCollectionSlice() []*AddressCollection {
  return make([]*AddressCollection, 0)
  }
  // XXXXX
func AggregateCharacteristicInfoSlice() []*AggregateCharacteristicInfo {
  return make([]*AggregateCharacteristicInfo, 0)
  }
  // XXXXX
func AggregateStatisticFactSlice() []*AggregateStatisticFact {
  return make([]*AggregateStatisticFact, 0)
  }
  // XXXXX
func AggregateStatisticInfoSlice() []*AggregateStatisticInfo {
  return make([]*AggregateStatisticInfo, 0)
  }
  // XXXXX
func CalendarDateSlice() []*CalendarDate {
  return make([]*CalendarDate, 0)
  }
  // XXXXX
func CalendarSummarySlice() []*CalendarSummary {
  return make([]*CalendarSummary, 0)
  }
  // XXXXX
func CensusCollectionSlice() []*CensusCollection {
  return make([]*CensusCollection, 0)
  }
  // XXXXX
func ChargedLocationInfoSlice() []*ChargedLocationInfo {
  return make([]*ChargedLocationInfo, 0)
  }
  // XXXXX
func CollectionRoundSlice() []*CollectionRound {
  return make([]*CollectionRound, 0)
  }
  // XXXXX
func CollectionStatusSlice() []*CollectionStatus {
  return make([]*CollectionStatus, 0)
  }
  // XXXXX
func DebtorSlice() []*Debtor {
  return make([]*Debtor, 0)
  }
  // XXXXX
func EquipmentInfoSlice() []*EquipmentInfo {
  return make([]*EquipmentInfo, 0)
  }
  // XXXXX
func FinancialAccountSlice() []*FinancialAccount {
  return make([]*FinancialAccount, 0)
  }
  // XXXXX
func FinancialQuestionnaireCollectionSlice() []*FinancialQuestionnaireCollection {
  return make([]*FinancialQuestionnaireCollection, 0)
  }
  // XXXXX
func GradingAssignmentSlice() []*GradingAssignment {
  return make([]*GradingAssignment, 0)
  }
  // XXXXX
func GradingAssignmentScoreSlice() []*GradingAssignmentScore {
  return make([]*GradingAssignmentScore, 0)
  }
  // XXXXX
func IdentitySlice() []*Identity {
  return make([]*Identity, 0)
  }
  // XXXXX
func InvoiceSlice() []*Invoice {
  return make([]*Invoice, 0)
  }
  // XXXXX
func JournalSlice() []*Journal {
  return make([]*Journal, 0)
  }
  // XXXXX
func LEAInfoSlice() []*LEAInfo {
  return make([]*LEAInfo, 0)
  }
  // XXXXX
func LearningResourceSlice() []*LearningResource {
  return make([]*LearningResource, 0)
  }
  // XXXXX
func LearningResourcePackageSlice() []*LearningResourcePackage {
  return make([]*LearningResourcePackage, 0)
  }
  // XXXXX
func LearningStandardDocumentSlice() []*LearningStandardDocument {
  return make([]*LearningStandardDocument, 0)
  }
  // XXXXX
func LearningStandardItemSlice() []*LearningStandardItem {
  return make([]*LearningStandardItem, 0)
  }
  // XXXXX
func LibraryPatronStatusSlice() []*LibraryPatronStatus {
  return make([]*LibraryPatronStatus, 0)
  }
  // XXXXX
func MarkValueInfoSlice() []*MarkValueInfo {
  return make([]*MarkValueInfo, 0)
  }
  // XXXXX
func NAPCodeFrameSlice() []*NAPCodeFrame {
  return make([]*NAPCodeFrame, 0)
  }
  // XXXXX
func NAPEventStudentLinkSlice() []*NAPEventStudentLink {
  return make([]*NAPEventStudentLink, 0)
  }
  // XXXXX
func NAPStudentResponseSetSlice() []*NAPStudentResponseSet {
  return make([]*NAPStudentResponseSet, 0)
  }
  // XXXXX
func NAPTestSlice() []*NAPTest {
  return make([]*NAPTest, 0)
  }
  // XXXXX
func NAPTestItemSlice() []*NAPTestItem {
  return make([]*NAPTestItem, 0)
  }
  // XXXXX
func NAPTestScoreSummarySlice() []*NAPTestScoreSummary {
  return make([]*NAPTestScoreSummary, 0)
  }
  // XXXXX
func NAPTestletSlice() []*NAPTestlet {
  return make([]*NAPTestlet, 0)
  }
  // XXXXX
func PaymentReceiptSlice() []*PaymentReceipt {
  return make([]*PaymentReceipt, 0)
  }
  // XXXXX
func PersonPictureSlice() []*PersonPicture {
  return make([]*PersonPicture, 0)
  }
  // XXXXX
func PersonalisedPlanSlice() []*PersonalisedPlan {
  return make([]*PersonalisedPlan, 0)
  }
  // XXXXX
func PurchaseOrderSlice() []*PurchaseOrder {
  return make([]*PurchaseOrder, 0)
  }
  // XXXXX
func ResourceBookingSlice() []*ResourceBooking {
  return make([]*ResourceBooking, 0)
  }
  // XXXXX
func ResourceUsageSlice() []*ResourceUsage {
  return make([]*ResourceUsage, 0)
  }
  // XXXXX
func RoomInfoSlice() []*RoomInfo {
  return make([]*RoomInfo, 0)
  }
  // XXXXX
func ScheduledActivitySlice() []*ScheduledActivity {
  return make([]*ScheduledActivity, 0)
  }
  // XXXXX
func SchoolCourseInfoSlice() []*SchoolCourseInfo {
  return make([]*SchoolCourseInfo, 0)
  }
  // XXXXX
func SchoolInfoSlice() []*SchoolInfo {
  return make([]*SchoolInfo, 0)
  }
  // XXXXX
func SchoolProgramsSlice() []*SchoolPrograms {
  return make([]*SchoolPrograms, 0)
  }
  // XXXXX
func SectionInfoSlice() []*SectionInfo {
  return make([]*SectionInfo, 0)
  }
  // XXXXX
func SessionInfoSlice() []*SessionInfo {
  return make([]*SessionInfo, 0)
  }
  // XXXXX
func StaffAssignmentSlice() []*StaffAssignment {
  return make([]*StaffAssignment, 0)
  }
  // XXXXX
func StaffPersonalSlice() []*StaffPersonal {
  return make([]*StaffPersonal, 0)
  }
  // XXXXX
func StudentActivityInfoSlice() []*StudentActivityInfo {
  return make([]*StudentActivityInfo, 0)
  }
  // XXXXX
func StudentActivityParticipationSlice() []*StudentActivityParticipation {
  return make([]*StudentActivityParticipation, 0)
  }
  // XXXXX
func StudentAttendanceCollectionSlice() []*StudentAttendanceCollection {
  return make([]*StudentAttendanceCollection, 0)
  }
  // XXXXX
func StudentAttendanceSummarySlice() []*StudentAttendanceSummary {
  return make([]*StudentAttendanceSummary, 0)
  }
  // XXXXX
func StudentAttendanceTimeListSlice() []*StudentAttendanceTimeList {
  return make([]*StudentAttendanceTimeList, 0)
  }
  // XXXXX
func StudentContactPersonalSlice() []*StudentContactPersonal {
  return make([]*StudentContactPersonal, 0)
  }
  // XXXXX
func StudentContactRelationshipSlice() []*StudentContactRelationship {
  return make([]*StudentContactRelationship, 0)
  }
  // XXXXX
func StudentDailyAttendanceSlice() []*StudentDailyAttendance {
  return make([]*StudentDailyAttendance, 0)
  }
  // XXXXX
func StudentGradeSlice() []*StudentGrade {
  return make([]*StudentGrade, 0)
  }
  // XXXXX
func StudentParticipationSlice() []*StudentParticipation {
  return make([]*StudentParticipation, 0)
  }
  // XXXXX
func StudentPeriodAttendanceSlice() []*StudentPeriodAttendance {
  return make([]*StudentPeriodAttendance, 0)
  }
  // XXXXX
func StudentPersonalSlice() []*StudentPersonal {
  return make([]*StudentPersonal, 0)
  }
  // XXXXX
func StudentSchoolEnrollmentSlice() []*StudentSchoolEnrollment {
  return make([]*StudentSchoolEnrollment, 0)
  }
  // XXXXX
func StudentScoreJudgementAgainstStandardSlice() []*StudentScoreJudgementAgainstStandard {
  return make([]*StudentScoreJudgementAgainstStandard, 0)
  }
  // XXXXX
func StudentSectionEnrollmentSlice() []*StudentSectionEnrollment {
  return make([]*StudentSectionEnrollment, 0)
  }
  // XXXXX
func SystemRoleSlice() []*SystemRole {
  return make([]*SystemRole, 0)
  }
  // XXXXX
func TeachingGroupSlice() []*TeachingGroup {
  return make([]*TeachingGroup, 0)
  }
  // XXXXX
func TermInfoSlice() []*TermInfo {
  return make([]*TermInfo, 0)
  }
  // XXXXX
func TimeTableSlice() []*TimeTable {
  return make([]*TimeTable, 0)
  }
  // XXXXX
func TimeTableCellSlice() []*TimeTableCell {
  return make([]*TimeTableCell, 0)
  }
  // XXXXX
func TimeTableContainerSlice() []*TimeTableContainer {
  return make([]*TimeTableContainer, 0)
  }
  // XXXXX
func TimeTableSubjectSlice() []*TimeTableSubject {
  return make([]*TimeTableSubject, 0)
  }
  // XXXXX
func VendorInfoSlice() []*VendorInfo {
  return make([]*VendorInfo, 0)
  }
  // XXXXX
func WellbeingAlertSlice() []*WellbeingAlert {
  return make([]*WellbeingAlert, 0)
  }
  // XXXXX
func WellbeingAppealSlice() []*WellbeingAppeal {
  return make([]*WellbeingAppeal, 0)
  }
  // XXXXX
func WellbeingCharacteristicSlice() []*WellbeingCharacteristic {
  return make([]*WellbeingCharacteristic, 0)
  }
  // XXXXX
func WellbeingEventSlice() []*WellbeingEvent {
  return make([]*WellbeingEvent, 0)
  }
  // XXXXX
func WellbeingPersonLinkSlice() []*WellbeingPersonLink {
  return make([]*WellbeingPersonLink, 0)
  }
  // XXXXX
func WellbeingResponseSlice() []*WellbeingResponse {
  return make([]*WellbeingResponse, 0)
  }
  func PeriodAttendancesTypePointer(value interface{}) (*PeriodAttendancesType, bool) {
switch t := value.(type) {
        case *PeriodAttendancesType:
                return value.(*PeriodAttendancesType), true
        case PeriodAttendancesType:
                v, _ := value.(PeriodAttendancesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PeriodAttendancesType\n", t, value)
        }
        return nil, false
  }
  func AlertMessagesTypePointer(value interface{}) (*AlertMessagesType, bool) {
switch t := value.(type) {
        case *AlertMessagesType:
                return value.(*AlertMessagesType), true
        case AlertMessagesType:
                v, _ := value.(AlertMessagesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AlertMessagesType\n", t, value)
        }
        return nil, false
  }
  func FinancialQuestionnaireCollectionPointer(value interface{}) (*FinancialQuestionnaireCollection, bool) {
switch t := value.(type) {
        case *FinancialQuestionnaireCollection:
                return value.(*FinancialQuestionnaireCollection), true
        case FinancialQuestionnaireCollection:
                v, _ := value.(FinancialQuestionnaireCollection)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FinancialQuestionnaireCollection\n", t, value)
        }
        return nil, false
  }
  func AuthorsTypePointer(value interface{}) (*AuthorsType, bool) {
switch t := value.(type) {
        case *AuthorsType:
                return value.(*AuthorsType), true
        case AuthorsType:
                v, _ := value.(AuthorsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AuthorsType\n", t, value)
        }
        return nil, false
  }
  func NameOfRecordTypePointer(value interface{}) (*NameOfRecordType, bool) {
switch t := value.(type) {
        case *NameOfRecordType:
                return value.(*NameOfRecordType), true
        case NameOfRecordType:
                v, _ := value.(NameOfRecordType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NameOfRecordType\n", t, value)
        }
        return nil, false
  }
  func StatsCohortYearLevelListTypePointer(value interface{}) (*StatsCohortYearLevelListType, bool) {
switch t := value.(type) {
        case *StatsCohortYearLevelListType:
                return value.(*StatsCohortYearLevelListType), true
        case StatsCohortYearLevelListType:
                v, _ := value.(StatsCohortYearLevelListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatsCohortYearLevelListType\n", t, value)
        }
        return nil, false
  }
  func StudentParticipation_ManagingSchoolPointer(value interface{}) (*StudentParticipation_ManagingSchool, bool) {
switch t := value.(type) {
        case *StudentParticipation_ManagingSchool:
                return value.(*StudentParticipation_ManagingSchool), true
        case StudentParticipation_ManagingSchool:
                v, _ := value.(StudentParticipation_ManagingSchool)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentParticipation_ManagingSchool\n", t, value)
        }
        return nil, false
  }
  func PlausibleScaledValueListTypePointer(value interface{}) (*PlausibleScaledValueListType, bool) {
switch t := value.(type) {
        case *PlausibleScaledValueListType:
                return value.(*PlausibleScaledValueListType), true
        case PlausibleScaledValueListType:
                v, _ := value.(PlausibleScaledValueListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PlausibleScaledValueListType\n", t, value)
        }
        return nil, false
  }
  func EquipmentInfoPointer(value interface{}) (*EquipmentInfo, bool) {
switch t := value.(type) {
        case *EquipmentInfo:
                return value.(*EquipmentInfo), true
        case EquipmentInfo:
                v, _ := value.(EquipmentInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EquipmentInfo\n", t, value)
        }
        return nil, false
  }
  func StrategiesTypePointer(value interface{}) (*StrategiesType, bool) {
switch t := value.(type) {
        case *StrategiesType:
                return value.(*StrategiesType), true
        case StrategiesType:
                v, _ := value.(StrategiesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StrategiesType\n", t, value)
        }
        return nil, false
  }
  func PhoneNumberTypePointer(value interface{}) (*PhoneNumberType, bool) {
switch t := value.(type) {
        case *PhoneNumberType:
                return value.(*PhoneNumberType), true
        case PhoneNumberType:
                v, _ := value.(PhoneNumberType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PhoneNumberType\n", t, value)
        }
        return nil, false
  }
  func ACStrandSubjectAreaTypePointer(value interface{}) (*ACStrandSubjectAreaType, bool) {
switch t := value.(type) {
        case *ACStrandSubjectAreaType:
                return value.(*ACStrandSubjectAreaType), true
        case ACStrandSubjectAreaType:
                v, _ := value.(ACStrandSubjectAreaType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ACStrandSubjectAreaType\n", t, value)
        }
        return nil, false
  }
  func WellbeingEventCategoryTypePointer(value interface{}) (*WellbeingEventCategoryType, bool) {
switch t := value.(type) {
        case *WellbeingEventCategoryType:
                return value.(*WellbeingEventCategoryType), true
        case WellbeingEventCategoryType:
                v, _ := value.(WellbeingEventCategoryType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingEventCategoryType\n", t, value)
        }
        return nil, false
  }
  func StandardIdentifierTypePointer(value interface{}) (*StandardIdentifierType, bool) {
switch t := value.(type) {
        case *StandardIdentifierType:
                return value.(*StandardIdentifierType), true
        case StandardIdentifierType:
                v, _ := value.(StandardIdentifierType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StandardIdentifierType\n", t, value)
        }
        return nil, false
  }
  func StaffSubjectListTypePointer(value interface{}) (*StaffSubjectListType, bool) {
switch t := value.(type) {
        case *StaffSubjectListType:
                return value.(*StaffSubjectListType), true
        case StaffSubjectListType:
                v, _ := value.(StaffSubjectListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffSubjectListType\n", t, value)
        }
        return nil, false
  }
  func NAPSubscoreTypePointer(value interface{}) (*NAPSubscoreType, bool) {
switch t := value.(type) {
        case *NAPSubscoreType:
                return value.(*NAPSubscoreType), true
        case NAPSubscoreType:
                v, _ := value.(NAPSubscoreType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPSubscoreType\n", t, value)
        }
        return nil, false
  }
  func SoftwareRequirementListTypePointer(value interface{}) (*SoftwareRequirementListType, bool) {
switch t := value.(type) {
        case *SoftwareRequirementListType:
                return value.(*SoftwareRequirementListType), true
        case SoftwareRequirementListType:
                v, _ := value.(SoftwareRequirementListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SoftwareRequirementListType\n", t, value)
        }
        return nil, false
  }
  func SectionInfoPointer(value interface{}) (*SectionInfo, bool) {
switch t := value.(type) {
        case *SectionInfo:
                return value.(*SectionInfo), true
        case SectionInfo:
                v, _ := value.(SectionInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SectionInfo\n", t, value)
        }
        return nil, false
  }
  func SourceObjectsType_SourceObjectPointer(value interface{}) (*SourceObjectsType_SourceObject, bool) {
switch t := value.(type) {
        case *SourceObjectsType_SourceObject:
                return value.(*SourceObjectsType_SourceObject), true
        case SourceObjectsType_SourceObject:
                v, _ := value.(SourceObjectsType_SourceObject)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SourceObjectsType_SourceObject\n", t, value)
        }
        return nil, false
  }
  func Debtor_BilledEntityPointer(value interface{}) (*Debtor_BilledEntity, bool) {
switch t := value.(type) {
        case *Debtor_BilledEntity:
                return value.(*Debtor_BilledEntity), true
        case Debtor_BilledEntity:
                v, _ := value.(Debtor_BilledEntity)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Debtor_BilledEntity\n", t, value)
        }
        return nil, false
  }
  func StudentParticipationPointer(value interface{}) (*StudentParticipation, bool) {
switch t := value.(type) {
        case *StudentParticipation:
                return value.(*StudentParticipation), true
        case StudentParticipation:
                v, _ := value.(StudentParticipation)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentParticipation\n", t, value)
        }
        return nil, false
  }
  func StudentGroupListTypePointer(value interface{}) (*StudentGroupListType, bool) {
switch t := value.(type) {
        case *StudentGroupListType:
                return value.(*StudentGroupListType), true
        case StudentGroupListType:
                v, _ := value.(StudentGroupListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentGroupListType\n", t, value)
        }
        return nil, false
  }
  func PlanRequiredContainerTypePointer(value interface{}) (*PlanRequiredContainerType, bool) {
switch t := value.(type) {
        case *PlanRequiredContainerType:
                return value.(*PlanRequiredContainerType), true
        case PlanRequiredContainerType:
                v, _ := value.(PlanRequiredContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PlanRequiredContainerType\n", t, value)
        }
        return nil, false
  }
  func WithdrawalTypePointer(value interface{}) (*WithdrawalType, bool) {
switch t := value.(type) {
        case *WithdrawalType:
                return value.(*WithdrawalType), true
        case WithdrawalType:
                v, _ := value.(WithdrawalType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WithdrawalType\n", t, value)
        }
        return nil, false
  }
  func CopyRightContainerTypePointer(value interface{}) (*CopyRightContainerType, bool) {
switch t := value.(type) {
        case *CopyRightContainerType:
                return value.(*CopyRightContainerType), true
        case CopyRightContainerType:
                v, _ := value.(CopyRightContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CopyRightContainerType\n", t, value)
        }
        return nil, false
  }
  func AddressCollectionReportingTypePointer(value interface{}) (*AddressCollectionReportingType, bool) {
switch t := value.(type) {
        case *AddressCollectionReportingType:
                return value.(*AddressCollectionReportingType), true
        case AddressCollectionReportingType:
                v, _ := value.(AddressCollectionReportingType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressCollectionReportingType\n", t, value)
        }
        return nil, false
  }
  func LibraryMessageTypePointer(value interface{}) (*LibraryMessageType, bool) {
switch t := value.(type) {
        case *LibraryMessageType:
                return value.(*LibraryMessageType), true
        case LibraryMessageType:
                v, _ := value.(LibraryMessageType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LibraryMessageType\n", t, value)
        }
        return nil, false
  }
  func WellbeingAppealPointer(value interface{}) (*WellbeingAppeal, bool) {
switch t := value.(type) {
        case *WellbeingAppeal:
                return value.(*WellbeingAppeal), true
        case WellbeingAppeal:
                v, _ := value.(WellbeingAppeal)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingAppeal\n", t, value)
        }
        return nil, false
  }
  func PersonPicture_PictureSourcePointer(value interface{}) (*PersonPicture_PictureSource, bool) {
switch t := value.(type) {
        case *PersonPicture_PictureSource:
                return value.(*PersonPicture_PictureSource), true
        case PersonPicture_PictureSource:
                v, _ := value.(PersonPicture_PictureSource)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonPicture_PictureSource\n", t, value)
        }
        return nil, false
  }
  func PersonInvolvementType_PersonRefIdPointer(value interface{}) (*PersonInvolvementType_PersonRefId, bool) {
switch t := value.(type) {
        case *PersonInvolvementType_PersonRefId:
                return value.(*PersonInvolvementType_PersonRefId), true
        case PersonInvolvementType_PersonRefId:
                v, _ := value.(PersonInvolvementType_PersonRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonInvolvementType_PersonRefId\n", t, value)
        }
        return nil, false
  }
  func NAPTestletItemResponseListTypePointer(value interface{}) (*NAPTestletItemResponseListType, bool) {
switch t := value.(type) {
        case *NAPTestletItemResponseListType:
                return value.(*NAPTestletItemResponseListType), true
        case NAPTestletItemResponseListType:
                v, _ := value.(NAPTestletItemResponseListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestletItemResponseListType\n", t, value)
        }
        return nil, false
  }
  func StudentGradeMarkersListTypePointer(value interface{}) (*StudentGradeMarkersListType, bool) {
switch t := value.(type) {
        case *StudentGradeMarkersListType:
                return value.(*StudentGradeMarkersListType), true
        case StudentGradeMarkersListType:
                v, _ := value.(StudentGradeMarkersListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentGradeMarkersListType\n", t, value)
        }
        return nil, false
  }
  func ResourceUsage_ResourceReportLinePointer(value interface{}) (*ResourceUsage_ResourceReportLine, bool) {
switch t := value.(type) {
        case *ResourceUsage_ResourceReportLine:
                return value.(*ResourceUsage_ResourceReportLine), true
        case ResourceUsage_ResourceReportLine:
                v, _ := value.(ResourceUsage_ResourceReportLine)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage_ResourceReportLine\n", t, value)
        }
        return nil, false
  }
  func AggregateStatisticFactPointer(value interface{}) (*AggregateStatisticFact, bool) {
switch t := value.(type) {
        case *AggregateStatisticFact:
                return value.(*AggregateStatisticFact), true
        case AggregateStatisticFact:
                v, _ := value.(AggregateStatisticFact)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AggregateStatisticFact\n", t, value)
        }
        return nil, false
  }
  func AddressTypePointer(value interface{}) (*AddressType, bool) {
switch t := value.(type) {
        case *AddressType:
                return value.(*AddressType), true
        case AddressType:
                v, _ := value.(AddressType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressType\n", t, value)
        }
        return nil, false
  }
  func StaffMostRecentContainerTypePointer(value interface{}) (*StaffMostRecentContainerType, bool) {
switch t := value.(type) {
        case *StaffMostRecentContainerType:
                return value.(*StaffMostRecentContainerType), true
        case StaffMostRecentContainerType:
                v, _ := value.(StaffMostRecentContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffMostRecentContainerType\n", t, value)
        }
        return nil, false
  }
  func CensusReportingListTypePointer(value interface{}) (*CensusReportingListType, bool) {
switch t := value.(type) {
        case *CensusReportingListType:
                return value.(*CensusReportingListType), true
        case CensusReportingListType:
                v, _ := value.(CensusReportingListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusReportingListType\n", t, value)
        }
        return nil, false
  }
  func PasswordListTypePointer(value interface{}) (*PasswordListType, bool) {
switch t := value.(type) {
        case *PasswordListType:
                return value.(*PasswordListType), true
        case PasswordListType:
                v, _ := value.(PasswordListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PasswordListType\n", t, value)
        }
        return nil, false
  }
  func StudentActivityParticipationPointer(value interface{}) (*StudentActivityParticipation, bool) {
switch t := value.(type) {
        case *StudentActivityParticipation:
                return value.(*StudentActivityParticipation), true
        case StudentActivityParticipation:
                v, _ := value.(StudentActivityParticipation)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentActivityParticipation\n", t, value)
        }
        return nil, false
  }
  func NAPTestScoreSummaryPointer(value interface{}) (*NAPTestScoreSummary, bool) {
switch t := value.(type) {
        case *NAPTestScoreSummary:
                return value.(*NAPTestScoreSummary), true
        case NAPTestScoreSummary:
                v, _ := value.(NAPTestScoreSummary)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestScoreSummary\n", t, value)
        }
        return nil, false
  }
  func NAPTestItemPointer(value interface{}) (*NAPTestItem, bool) {
switch t := value.(type) {
        case *NAPTestItem:
                return value.(*NAPTestItem), true
        case NAPTestItem:
                v, _ := value.(NAPTestItem)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestItem\n", t, value)
        }
        return nil, false
  }
  func VisaSubClassListTypePointer(value interface{}) (*VisaSubClassListType, bool) {
switch t := value.(type) {
        case *VisaSubClassListType:
                return value.(*VisaSubClassListType), true
        case VisaSubClassListType:
                v, _ := value.(VisaSubClassListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to VisaSubClassListType\n", t, value)
        }
        return nil, false
  }
  func AGReportingObjectResponseListTypePointer(value interface{}) (*AGReportingObjectResponseListType, bool) {
switch t := value.(type) {
        case *AGReportingObjectResponseListType:
                return value.(*AGReportingObjectResponseListType), true
        case AGReportingObjectResponseListType:
                v, _ := value.(AGReportingObjectResponseListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGReportingObjectResponseListType\n", t, value)
        }
        return nil, false
  }
  func AttendanceTimeTypePointer(value interface{}) (*AttendanceTimeType, bool) {
switch t := value.(type) {
        case *AttendanceTimeType:
                return value.(*AttendanceTimeType), true
        case AttendanceTimeType:
                v, _ := value.(AttendanceTimeType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AttendanceTimeType\n", t, value)
        }
        return nil, false
  }
  func DebitOrCreditAmountTypePointer(value interface{}) (*DebitOrCreditAmountType, bool) {
switch t := value.(type) {
        case *DebitOrCreditAmountType:
                return value.(*DebitOrCreditAmountType), true
        case DebitOrCreditAmountType:
                v, _ := value.(DebitOrCreditAmountType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DebitOrCreditAmountType\n", t, value)
        }
        return nil, false
  }
  func ApprovalTypePointer(value interface{}) (*ApprovalType, bool) {
switch t := value.(type) {
        case *ApprovalType:
                return value.(*ApprovalType), true
        case ApprovalType:
                v, _ := value.(ApprovalType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ApprovalType\n", t, value)
        }
        return nil, false
  }
  func WellbeingAlertPointer(value interface{}) (*WellbeingAlert, bool) {
switch t := value.(type) {
        case *WellbeingAlert:
                return value.(*WellbeingAlert), true
        case WellbeingAlert:
                v, _ := value.(WellbeingAlert)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingAlert\n", t, value)
        }
        return nil, false
  }
  func LibraryItemInfoTypePointer(value interface{}) (*LibraryItemInfoType, bool) {
switch t := value.(type) {
        case *LibraryItemInfoType:
                return value.(*LibraryItemInfoType), true
        case LibraryItemInfoType:
                v, _ := value.(LibraryItemInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LibraryItemInfoType\n", t, value)
        }
        return nil, false
  }
  func CensusReportingTypePointer(value interface{}) (*CensusReportingType, bool) {
switch t := value.(type) {
        case *CensusReportingType:
                return value.(*CensusReportingType), true
        case CensusReportingType:
                v, _ := value.(CensusReportingType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusReportingType\n", t, value)
        }
        return nil, false
  }
  func CalendarDateInfoTypePointer(value interface{}) (*CalendarDateInfoType, bool) {
switch t := value.(type) {
        case *CalendarDateInfoType:
                return value.(*CalendarDateInfoType), true
        case CalendarDateInfoType:
                v, _ := value.(CalendarDateInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CalendarDateInfoType\n", t, value)
        }
        return nil, false
  }
  func SoftwareRequirementTypePointer(value interface{}) (*SoftwareRequirementType, bool) {
switch t := value.(type) {
        case *SoftwareRequirementType:
                return value.(*SoftwareRequirementType), true
        case SoftwareRequirementType:
                v, _ := value.(SoftwareRequirementType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SoftwareRequirementType\n", t, value)
        }
        return nil, false
  }
  func DetentionContainerTypePointer(value interface{}) (*DetentionContainerType, bool) {
switch t := value.(type) {
        case *DetentionContainerType:
                return value.(*DetentionContainerType), true
        case DetentionContainerType:
                v, _ := value.(DetentionContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DetentionContainerType\n", t, value)
        }
        return nil, false
  }
  func ResourceUsage_ResourceUsageContentTypePointer(value interface{}) (*ResourceUsage_ResourceUsageContentType, bool) {
switch t := value.(type) {
        case *ResourceUsage_ResourceUsageContentType:
                return value.(*ResourceUsage_ResourceUsageContentType), true
        case ResourceUsage_ResourceUsageContentType:
                v, _ := value.(ResourceUsage_ResourceUsageContentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage_ResourceUsageContentType\n", t, value)
        }
        return nil, false
  }
  func SubjectAreaListTypePointer(value interface{}) (*SubjectAreaListType, bool) {
switch t := value.(type) {
        case *SubjectAreaListType:
                return value.(*SubjectAreaListType), true
        case SubjectAreaListType:
                v, _ := value.(SubjectAreaListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SubjectAreaListType\n", t, value)
        }
        return nil, false
  }
  func SystemRole_SystemContextPointer(value interface{}) (*SystemRole_SystemContext, bool) {
switch t := value.(type) {
        case *SystemRole_SystemContext:
                return value.(*SystemRole_SystemContext), true
        case SystemRole_SystemContext:
                v, _ := value.(SystemRole_SystemContext)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_SystemContext\n", t, value)
        }
        return nil, false
  }
  func NAPTestletResponseTypePointer(value interface{}) (*NAPTestletResponseType, bool) {
switch t := value.(type) {
        case *NAPTestletResponseType:
                return value.(*NAPTestletResponseType), true
        case NAPTestletResponseType:
                v, _ := value.(NAPTestletResponseType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestletResponseType\n", t, value)
        }
        return nil, false
  }
  func ResourcesTypePointer(value interface{}) (*ResourcesType, bool) {
switch t := value.(type) {
        case *ResourcesType:
                return value.(*ResourcesType), true
        case ResourcesType:
                v, _ := value.(ResourcesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourcesType\n", t, value)
        }
        return nil, false
  }
  func AddressListTypePointer(value interface{}) (*AddressListType, bool) {
switch t := value.(type) {
        case *AddressListType:
                return value.(*AddressListType), true
        case AddressListType:
                v, _ := value.(AddressListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressListType\n", t, value)
        }
        return nil, false
  }
  func AbstractContentElementType_ReferencePointer(value interface{}) (*AbstractContentElementType_Reference, bool) {
switch t := value.(type) {
        case *AbstractContentElementType_Reference:
                return value.(*AbstractContentElementType_Reference), true
        case AbstractContentElementType_Reference:
                v, _ := value.(AbstractContentElementType_Reference)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentElementType_Reference\n", t, value)
        }
        return nil, false
  }
  func PeriodAttendanceTypePointer(value interface{}) (*PeriodAttendanceType, bool) {
switch t := value.(type) {
        case *PeriodAttendanceType:
                return value.(*PeriodAttendanceType), true
        case PeriodAttendanceType:
                v, _ := value.(PeriodAttendanceType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PeriodAttendanceType\n", t, value)
        }
        return nil, false
  }
  func PaymentReceiptPointer(value interface{}) (*PaymentReceipt, bool) {
switch t := value.(type) {
        case *PaymentReceipt:
                return value.(*PaymentReceipt), true
        case PaymentReceipt:
                v, _ := value.(PaymentReceipt)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PaymentReceipt\n", t, value)
        }
        return nil, false
  }
  func AddressStreetTypePointer(value interface{}) (*AddressStreetType, bool) {
switch t := value.(type) {
        case *AddressStreetType:
                return value.(*AddressStreetType), true
        case AddressStreetType:
                v, _ := value.(AddressStreetType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressStreetType\n", t, value)
        }
        return nil, false
  }
  func NAPTestletCodeFrameTypePointer(value interface{}) (*NAPTestletCodeFrameType, bool) {
switch t := value.(type) {
        case *NAPTestletCodeFrameType:
                return value.(*NAPTestletCodeFrameType), true
        case NAPTestletCodeFrameType:
                v, _ := value.(NAPTestletCodeFrameType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestletCodeFrameType\n", t, value)
        }
        return nil, false
  }
  func LifeCycleType_TimeElementsPointer(value interface{}) (*LifeCycleType_TimeElements, bool) {
switch t := value.(type) {
        case *LifeCycleType_TimeElements:
                return value.(*LifeCycleType_TimeElements), true
        case LifeCycleType_TimeElements:
                v, _ := value.(LifeCycleType_TimeElements)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType_TimeElements\n", t, value)
        }
        return nil, false
  }
  func TeachingGroupListTypePointer(value interface{}) (*TeachingGroupListType, bool) {
switch t := value.(type) {
        case *TeachingGroupListType:
                return value.(*TeachingGroupListType), true
        case TeachingGroupListType:
                v, _ := value.(TeachingGroupListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupListType\n", t, value)
        }
        return nil, false
  }
  func DomainScoreTypePointer(value interface{}) (*DomainScoreType, bool) {
switch t := value.(type) {
        case *DomainScoreType:
                return value.(*DomainScoreType), true
        case DomainScoreType:
                v, _ := value.(DomainScoreType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DomainScoreType\n", t, value)
        }
        return nil, false
  }
  func WellbeingDocumentListTypePointer(value interface{}) (*WellbeingDocumentListType, bool) {
switch t := value.(type) {
        case *WellbeingDocumentListType:
                return value.(*WellbeingDocumentListType), true
        case WellbeingDocumentListType:
                v, _ := value.(WellbeingDocumentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingDocumentListType\n", t, value)
        }
        return nil, false
  }
  func CampusContainerTypePointer(value interface{}) (*CampusContainerType, bool) {
switch t := value.(type) {
        case *CampusContainerType:
                return value.(*CampusContainerType), true
        case CampusContainerType:
                v, _ := value.(CampusContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CampusContainerType\n", t, value)
        }
        return nil, false
  }
  func MediumOfInstructionTypePointer(value interface{}) (*MediumOfInstructionType, bool) {
switch t := value.(type) {
        case *MediumOfInstructionType:
                return value.(*MediumOfInstructionType), true
        case MediumOfInstructionType:
                v, _ := value.(MediumOfInstructionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MediumOfInstructionType\n", t, value)
        }
        return nil, false
  }
  func FQItemListTypePointer(value interface{}) (*FQItemListType, bool) {
switch t := value.(type) {
        case *FQItemListType:
                return value.(*FQItemListType), true
        case FQItemListType:
                v, _ := value.(FQItemListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FQItemListType\n", t, value)
        }
        return nil, false
  }
  func CharacteristicsTypePointer(value interface{}) (*CharacteristicsType, bool) {
switch t := value.(type) {
        case *CharacteristicsType:
                return value.(*CharacteristicsType), true
        case CharacteristicsType:
                v, _ := value.(CharacteristicsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CharacteristicsType\n", t, value)
        }
        return nil, false
  }
  func EmailListTypePointer(value interface{}) (*EmailListType, bool) {
switch t := value.(type) {
        case *EmailListType:
                return value.(*EmailListType), true
        case EmailListType:
                v, _ := value.(EmailListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EmailListType\n", t, value)
        }
        return nil, false
  }
  func ElectronicIdListTypePointer(value interface{}) (*ElectronicIdListType, bool) {
switch t := value.(type) {
        case *ElectronicIdListType:
                return value.(*ElectronicIdListType), true
        case ElectronicIdListType:
                v, _ := value.(ElectronicIdListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ElectronicIdListType\n", t, value)
        }
        return nil, false
  }
  func ScheduledTeacherListTypePointer(value interface{}) (*ScheduledTeacherListType, bool) {
switch t := value.(type) {
        case *ScheduledTeacherListType:
                return value.(*ScheduledTeacherListType), true
        case ScheduledTeacherListType:
                v, _ := value.(ScheduledTeacherListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScheduledTeacherListType\n", t, value)
        }
        return nil, false
  }
  func StudentAttendanceCollectionReportingTypePointer(value interface{}) (*StudentAttendanceCollectionReportingType, bool) {
switch t := value.(type) {
        case *StudentAttendanceCollectionReportingType:
                return value.(*StudentAttendanceCollectionReportingType), true
        case StudentAttendanceCollectionReportingType:
                v, _ := value.(StudentAttendanceCollectionReportingType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentAttendanceCollectionReportingType\n", t, value)
        }
        return nil, false
  }
  func NAPWritingRubricListTypePointer(value interface{}) (*NAPWritingRubricListType, bool) {
switch t := value.(type) {
        case *NAPWritingRubricListType:
                return value.(*NAPWritingRubricListType), true
        case NAPWritingRubricListType:
                v, _ := value.(NAPWritingRubricListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPWritingRubricListType\n", t, value)
        }
        return nil, false
  }
  func ReligiousEventTypePointer(value interface{}) (*ReligiousEventType, bool) {
switch t := value.(type) {
        case *ReligiousEventType:
                return value.(*ReligiousEventType), true
        case ReligiousEventType:
                v, _ := value.(ReligiousEventType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ReligiousEventType\n", t, value)
        }
        return nil, false
  }
  func RelatedLearningStandardItemRefIdTypePointer(value interface{}) (*RelatedLearningStandardItemRefIdType, bool) {
switch t := value.(type) {
        case *RelatedLearningStandardItemRefIdType:
                return value.(*RelatedLearningStandardItemRefIdType), true
        case RelatedLearningStandardItemRefIdType:
                v, _ := value.(RelatedLearningStandardItemRefIdType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to RelatedLearningStandardItemRefIdType\n", t, value)
        }
        return nil, false
  }
  func AssignmentListTypePointer(value interface{}) (*AssignmentListType, bool) {
switch t := value.(type) {
        case *AssignmentListType:
                return value.(*AssignmentListType), true
        case AssignmentListType:
                v, _ := value.(AssignmentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AssignmentListType\n", t, value)
        }
        return nil, false
  }
  func StudentSchoolEnrollment_CounselorPointer(value interface{}) (*StudentSchoolEnrollment_Counselor, bool) {
switch t := value.(type) {
        case *StudentSchoolEnrollment_Counselor:
                return value.(*StudentSchoolEnrollment_Counselor), true
        case StudentSchoolEnrollment_Counselor:
                v, _ := value.(StudentSchoolEnrollment_Counselor)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSchoolEnrollment_Counselor\n", t, value)
        }
        return nil, false
  }
  func TimeTableSubjectPointer(value interface{}) (*TimeTableSubject, bool) {
switch t := value.(type) {
        case *TimeTableSubject:
                return value.(*TimeTableSubject), true
        case TimeTableSubject:
                v, _ := value.(TimeTableSubject)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableSubject\n", t, value)
        }
        return nil, false
  }
  func AGRuleTypePointer(value interface{}) (*AGRuleType, bool) {
switch t := value.(type) {
        case *AGRuleType:
                return value.(*AGRuleType), true
        case AGRuleType:
                v, _ := value.(AGRuleType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGRuleType\n", t, value)
        }
        return nil, false
  }
  func StudentAttendanceTimeListPointer(value interface{}) (*StudentAttendanceTimeList, bool) {
switch t := value.(type) {
        case *StudentAttendanceTimeList:
                return value.(*StudentAttendanceTimeList), true
        case StudentAttendanceTimeList:
                v, _ := value.(StudentAttendanceTimeList)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentAttendanceTimeList\n", t, value)
        }
        return nil, false
  }
  func EquipmentInfo_SIF_RefIdPointer(value interface{}) (*EquipmentInfo_SIF_RefId, bool) {
switch t := value.(type) {
        case *EquipmentInfo_SIF_RefId:
                return value.(*EquipmentInfo_SIF_RefId), true
        case EquipmentInfo_SIF_RefId:
                v, _ := value.(EquipmentInfo_SIF_RefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EquipmentInfo_SIF_RefId\n", t, value)
        }
        return nil, false
  }
  func CountryListTypePointer(value interface{}) (*CountryListType, bool) {
switch t := value.(type) {
        case *CountryListType:
                return value.(*CountryListType), true
        case CountryListType:
                v, _ := value.(CountryListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CountryListType\n", t, value)
        }
        return nil, false
  }
  func TestDisruptionTypePointer(value interface{}) (*TestDisruptionType, bool) {
switch t := value.(type) {
        case *TestDisruptionType:
                return value.(*TestDisruptionType), true
        case TestDisruptionType:
                v, _ := value.(TestDisruptionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TestDisruptionType\n", t, value)
        }
        return nil, false
  }
  func NAPTestletResponseItemTypePointer(value interface{}) (*NAPTestletResponseItemType, bool) {
switch t := value.(type) {
        case *NAPTestletResponseItemType:
                return value.(*NAPTestletResponseItemType), true
        case NAPTestletResponseItemType:
                v, _ := value.(NAPTestletResponseItemType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestletResponseItemType\n", t, value)
        }
        return nil, false
  }
  func LEAContactTypePointer(value interface{}) (*LEAContactType, bool) {
switch t := value.(type) {
        case *LEAContactType:
                return value.(*LEAContactType), true
        case LEAContactType:
                v, _ := value.(LEAContactType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LEAContactType\n", t, value)
        }
        return nil, false
  }
  func TeachingGroupTeacherTypePointer(value interface{}) (*TeachingGroupTeacherType, bool) {
switch t := value.(type) {
        case *TeachingGroupTeacherType:
                return value.(*TeachingGroupTeacherType), true
        case TeachingGroupTeacherType:
                v, _ := value.(TeachingGroupTeacherType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupTeacherType\n", t, value)
        }
        return nil, false
  }
  func AddressCollectionReportingListTypePointer(value interface{}) (*AddressCollectionReportingListType, bool) {
switch t := value.(type) {
        case *AddressCollectionReportingListType:
                return value.(*AddressCollectionReportingListType), true
        case AddressCollectionReportingListType:
                v, _ := value.(AddressCollectionReportingListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressCollectionReportingListType\n", t, value)
        }
        return nil, false
  }
  func AuditInfoTypePointer(value interface{}) (*AuditInfoType, bool) {
switch t := value.(type) {
        case *AuditInfoType:
                return value.(*AuditInfoType), true
        case AuditInfoType:
                v, _ := value.(AuditInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AuditInfoType\n", t, value)
        }
        return nil, false
  }
  func PaymentReceiptLineTypePointer(value interface{}) (*PaymentReceiptLineType, bool) {
switch t := value.(type) {
        case *PaymentReceiptLineType:
                return value.(*PaymentReceiptLineType), true
        case PaymentReceiptLineType:
                v, _ := value.(PaymentReceiptLineType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PaymentReceiptLineType\n", t, value)
        }
        return nil, false
  }
  func NAPTestletContentTypePointer(value interface{}) (*NAPTestletContentType, bool) {
switch t := value.(type) {
        case *NAPTestletContentType:
                return value.(*NAPTestletContentType), true
        case NAPTestletContentType:
                v, _ := value.(NAPTestletContentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestletContentType\n", t, value)
        }
        return nil, false
  }
  func PasswordListType_PasswordPointer(value interface{}) (*PasswordListType_Password, bool) {
switch t := value.(type) {
        case *PasswordListType_Password:
                return value.(*PasswordListType_Password), true
        case PasswordListType_Password:
                v, _ := value.(PasswordListType_Password)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PasswordListType_Password\n", t, value)
        }
        return nil, false
  }
  func NAPWritingRubricTypePointer(value interface{}) (*NAPWritingRubricType, bool) {
switch t := value.(type) {
        case *NAPWritingRubricType:
                return value.(*NAPWritingRubricType), true
        case NAPWritingRubricType:
                v, _ := value.(NAPWritingRubricType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPWritingRubricType\n", t, value)
        }
        return nil, false
  }
  func NAPStudentResponseTestletListTypePointer(value interface{}) (*NAPStudentResponseTestletListType, bool) {
switch t := value.(type) {
        case *NAPStudentResponseTestletListType:
                return value.(*NAPStudentResponseTestletListType), true
        case NAPStudentResponseTestletListType:
                v, _ := value.(NAPStudentResponseTestletListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPStudentResponseTestletListType\n", t, value)
        }
        return nil, false
  }
  func YearLevelEnrollmentListTypePointer(value interface{}) (*YearLevelEnrollmentListType, bool) {
switch t := value.(type) {
        case *YearLevelEnrollmentListType:
                return value.(*YearLevelEnrollmentListType), true
        case YearLevelEnrollmentListType:
                v, _ := value.(YearLevelEnrollmentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to YearLevelEnrollmentListType\n", t, value)
        }
        return nil, false
  }
  func WithdrawalTimeListTypePointer(value interface{}) (*WithdrawalTimeListType, bool) {
switch t := value.(type) {
        case *WithdrawalTimeListType:
                return value.(*WithdrawalTimeListType), true
        case WithdrawalTimeListType:
                v, _ := value.(WithdrawalTimeListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WithdrawalTimeListType\n", t, value)
        }
        return nil, false
  }
  func StatsCohortListTypePointer(value interface{}) (*StatsCohortListType, bool) {
switch t := value.(type) {
        case *StatsCohortListType:
                return value.(*StatsCohortListType), true
        case StatsCohortListType:
                v, _ := value.(StatsCohortListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatsCohortListType\n", t, value)
        }
        return nil, false
  }
  func TeacherListTypePointer(value interface{}) (*TeacherListType, bool) {
switch t := value.(type) {
        case *TeacherListType:
                return value.(*TeacherListType), true
        case TeacherListType:
                v, _ := value.(TeacherListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeacherListType\n", t, value)
        }
        return nil, false
  }
  func AdjustmentContainerTypePointer(value interface{}) (*AdjustmentContainerType, bool) {
switch t := value.(type) {
        case *AdjustmentContainerType:
                return value.(*AdjustmentContainerType), true
        case AdjustmentContainerType:
                v, _ := value.(AdjustmentContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AdjustmentContainerType\n", t, value)
        }
        return nil, false
  }
  func PromotionInfoTypePointer(value interface{}) (*PromotionInfoType, bool) {
switch t := value.(type) {
        case *PromotionInfoType:
                return value.(*PromotionInfoType), true
        case PromotionInfoType:
                v, _ := value.(PromotionInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PromotionInfoType\n", t, value)
        }
        return nil, false
  }
  func AgencyTypePointer(value interface{}) (*AgencyType, bool) {
switch t := value.(type) {
        case *AgencyType:
                return value.(*AgencyType), true
        case AgencyType:
                v, _ := value.(AgencyType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AgencyType\n", t, value)
        }
        return nil, false
  }
  func SystemRole_SIF_RefIdPointer(value interface{}) (*SystemRole_SIF_RefId, bool) {
switch t := value.(type) {
        case *SystemRole_SIF_RefId:
                return value.(*SystemRole_SIF_RefId), true
        case SystemRole_SIF_RefId:
                v, _ := value.(SystemRole_SIF_RefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_SIF_RefId\n", t, value)
        }
        return nil, false
  }
  func TimeElementType_SpanGapsPointer(value interface{}) (*TimeElementType_SpanGaps, bool) {
switch t := value.(type) {
        case *TimeElementType_SpanGaps:
                return value.(*TimeElementType_SpanGaps), true
        case TimeElementType_SpanGaps:
                v, _ := value.(TimeElementType_SpanGaps)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeElementType_SpanGaps\n", t, value)
        }
        return nil, false
  }
  func TimeTableCellPointer(value interface{}) (*TimeTableCell, bool) {
switch t := value.(type) {
        case *TimeTableCell:
                return value.(*TimeTableCell), true
        case TimeTableCell:
                v, _ := value.(TimeTableCell)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableCell\n", t, value)
        }
        return nil, false
  }
  func GradingAssignmentScorePointer(value interface{}) (*GradingAssignmentScore, bool) {
switch t := value.(type) {
        case *GradingAssignmentScore:
                return value.(*GradingAssignmentScore), true
        case GradingAssignmentScore:
                v, _ := value.(GradingAssignmentScore)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to GradingAssignmentScore\n", t, value)
        }
        return nil, false
  }
  func ReligiousEventListTypePointer(value interface{}) (*ReligiousEventListType, bool) {
switch t := value.(type) {
        case *ReligiousEventListType:
                return value.(*ReligiousEventListType), true
        case ReligiousEventListType:
                v, _ := value.(ReligiousEventListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ReligiousEventListType\n", t, value)
        }
        return nil, false
  }
  func ScoreDescriptionListTypePointer(value interface{}) (*ScoreDescriptionListType, bool) {
switch t := value.(type) {
        case *ScoreDescriptionListType:
                return value.(*ScoreDescriptionListType), true
        case ScoreDescriptionListType:
                v, _ := value.(ScoreDescriptionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScoreDescriptionListType\n", t, value)
        }
        return nil, false
  }
  func FinancialAccountRefIdListTypePointer(value interface{}) (*FinancialAccountRefIdListType, bool) {
switch t := value.(type) {
        case *FinancialAccountRefIdListType:
                return value.(*FinancialAccountRefIdListType), true
        case FinancialAccountRefIdListType:
                v, _ := value.(FinancialAccountRefIdListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FinancialAccountRefIdListType\n", t, value)
        }
        return nil, false
  }
  func FineInfoTypePointer(value interface{}) (*FineInfoType, bool) {
switch t := value.(type) {
        case *FineInfoType:
                return value.(*FineInfoType), true
        case FineInfoType:
                v, _ := value.(FineInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FineInfoType\n", t, value)
        }
        return nil, false
  }
  func LibraryTransactionTypePointer(value interface{}) (*LibraryTransactionType, bool) {
switch t := value.(type) {
        case *LibraryTransactionType:
                return value.(*LibraryTransactionType), true
        case LibraryTransactionType:
                v, _ := value.(LibraryTransactionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LibraryTransactionType\n", t, value)
        }
        return nil, false
  }
  func StudentPeriodAttendancePointer(value interface{}) (*StudentPeriodAttendance, bool) {
switch t := value.(type) {
        case *StudentPeriodAttendance:
                return value.(*StudentPeriodAttendance), true
        case StudentPeriodAttendance:
                v, _ := value.(StudentPeriodAttendance)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentPeriodAttendance\n", t, value)
        }
        return nil, false
  }
  func StimulusTypePointer(value interface{}) (*StimulusType, bool) {
switch t := value.(type) {
        case *StimulusType:
                return value.(*StimulusType), true
        case StimulusType:
                v, _ := value.(StimulusType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StimulusType\n", t, value)
        }
        return nil, false
  }
  func RoomInfoPointer(value interface{}) (*RoomInfo, bool) {
switch t := value.(type) {
        case *RoomInfo:
                return value.(*RoomInfo), true
        case RoomInfo:
                v, _ := value.(RoomInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to RoomInfo\n", t, value)
        }
        return nil, false
  }
  func TestDisruptionListTypePointer(value interface{}) (*TestDisruptionListType, bool) {
switch t := value.(type) {
        case *TestDisruptionListType:
                return value.(*TestDisruptionListType), true
        case TestDisruptionListType:
                v, _ := value.(TestDisruptionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TestDisruptionListType\n", t, value)
        }
        return nil, false
  }
  func TimeTableDayListTypePointer(value interface{}) (*TimeTableDayListType, bool) {
switch t := value.(type) {
        case *TimeTableDayListType:
                return value.(*TimeTableDayListType), true
        case TimeTableDayListType:
                v, _ := value.(TimeTableDayListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableDayListType\n", t, value)
        }
        return nil, false
  }
  func ScoreDescriptionTypePointer(value interface{}) (*ScoreDescriptionType, bool) {
switch t := value.(type) {
        case *ScoreDescriptionType:
                return value.(*ScoreDescriptionType), true
        case ScoreDescriptionType:
                v, _ := value.(ScoreDescriptionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScoreDescriptionType\n", t, value)
        }
        return nil, false
  }
  func TermInfoPointer(value interface{}) (*TermInfo, bool) {
switch t := value.(type) {
        case *TermInfo:
                return value.(*TermInfo), true
        case TermInfo:
                v, _ := value.(TermInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TermInfo\n", t, value)
        }
        return nil, false
  }
  func EvaluationsTypePointer(value interface{}) (*EvaluationsType, bool) {
switch t := value.(type) {
        case *EvaluationsType:
                return value.(*EvaluationsType), true
        case EvaluationsType:
                v, _ := value.(EvaluationsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EvaluationsType\n", t, value)
        }
        return nil, false
  }
  func StatisticalAreaTypePointer(value interface{}) (*StatisticalAreaType, bool) {
switch t := value.(type) {
        case *StatisticalAreaType:
                return value.(*StatisticalAreaType), true
        case StatisticalAreaType:
                v, _ := value.(StatisticalAreaType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatisticalAreaType\n", t, value)
        }
        return nil, false
  }
  func CensusStaffListTypePointer(value interface{}) (*CensusStaffListType, bool) {
switch t := value.(type) {
        case *CensusStaffListType:
                return value.(*CensusStaffListType), true
        case CensusStaffListType:
                v, _ := value.(CensusStaffListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusStaffListType\n", t, value)
        }
        return nil, false
  }
  func LResourcesTypePointer(value interface{}) (*LResourcesType, bool) {
switch t := value.(type) {
        case *LResourcesType:
                return value.(*LResourcesType), true
        case LResourcesType:
                v, _ := value.(LResourcesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LResourcesType\n", t, value)
        }
        return nil, false
  }
  func PersonPicture_ParentObjectRefIdPointer(value interface{}) (*PersonPicture_ParentObjectRefId, bool) {
switch t := value.(type) {
        case *PersonPicture_ParentObjectRefId:
                return value.(*PersonPicture_ParentObjectRefId), true
        case PersonPicture_ParentObjectRefId:
                v, _ := value.(PersonPicture_ParentObjectRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonPicture_ParentObjectRefId\n", t, value)
        }
        return nil, false
  }
  func FQReportingTypePointer(value interface{}) (*FQReportingType, bool) {
switch t := value.(type) {
        case *FQReportingType:
                return value.(*FQReportingType), true
        case FQReportingType:
                v, _ := value.(FQReportingType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FQReportingType\n", t, value)
        }
        return nil, false
  }
  func GenericRubricTypePointer(value interface{}) (*GenericRubricType, bool) {
switch t := value.(type) {
        case *GenericRubricType:
                return value.(*GenericRubricType), true
        case GenericRubricType:
                v, _ := value.(GenericRubricType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to GenericRubricType\n", t, value)
        }
        return nil, false
  }
  func BaseNameTypePointer(value interface{}) (*BaseNameType, bool) {
switch t := value.(type) {
        case *BaseNameType:
                return value.(*BaseNameType), true
        case BaseNameType:
                v, _ := value.(BaseNameType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to BaseNameType\n", t, value)
        }
        return nil, false
  }
  func SourceObjectsTypePointer(value interface{}) (*SourceObjectsType, bool) {
switch t := value.(type) {
        case *SourceObjectsType:
                return value.(*SourceObjectsType), true
        case SourceObjectsType:
                v, _ := value.(SourceObjectsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SourceObjectsType\n", t, value)
        }
        return nil, false
  }
  func ACStrandAreaListTypePointer(value interface{}) (*ACStrandAreaListType, bool) {
switch t := value.(type) {
        case *ACStrandAreaListType:
                return value.(*ACStrandAreaListType), true
        case ACStrandAreaListType:
                v, _ := value.(ACStrandAreaListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ACStrandAreaListType\n", t, value)
        }
        return nil, false
  }
  func AGParentTypePointer(value interface{}) (*AGParentType, bool) {
switch t := value.(type) {
        case *AGParentType:
                return value.(*AGParentType), true
        case AGParentType:
                v, _ := value.(AGParentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGParentType\n", t, value)
        }
        return nil, false
  }
  func AttendanceTimesTypePointer(value interface{}) (*AttendanceTimesType, bool) {
switch t := value.(type) {
        case *AttendanceTimesType:
                return value.(*AttendanceTimesType), true
        case AttendanceTimesType:
                v, _ := value.(AttendanceTimesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AttendanceTimesType\n", t, value)
        }
        return nil, false
  }
  func ValidLetterMarkTypePointer(value interface{}) (*ValidLetterMarkType, bool) {
switch t := value.(type) {
        case *ValidLetterMarkType:
                return value.(*ValidLetterMarkType), true
        case ValidLetterMarkType:
                v, _ := value.(ValidLetterMarkType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ValidLetterMarkType\n", t, value)
        }
        return nil, false
  }
  func MediaTypesTypePointer(value interface{}) (*MediaTypesType, bool) {
switch t := value.(type) {
        case *MediaTypesType:
                return value.(*MediaTypesType), true
        case MediaTypesType:
                v, _ := value.(MediaTypesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MediaTypesType\n", t, value)
        }
        return nil, false
  }
  func LearningObjectivesTypePointer(value interface{}) (*LearningObjectivesType, bool) {
switch t := value.(type) {
        case *LearningObjectivesType:
                return value.(*LearningObjectivesType), true
        case LearningObjectivesType:
                v, _ := value.(LearningObjectivesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningObjectivesType\n", t, value)
        }
        return nil, false
  }
  func CodeFrameTestItemTypePointer(value interface{}) (*CodeFrameTestItemType, bool) {
switch t := value.(type) {
        case *CodeFrameTestItemType:
                return value.(*CodeFrameTestItemType), true
        case CodeFrameTestItemType:
                v, _ := value.(CodeFrameTestItemType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CodeFrameTestItemType\n", t, value)
        }
        return nil, false
  }
  func TeachingGroupPeriodTypePointer(value interface{}) (*TeachingGroupPeriodType, bool) {
switch t := value.(type) {
        case *TeachingGroupPeriodType:
                return value.(*TeachingGroupPeriodType), true
        case TeachingGroupPeriodType:
                v, _ := value.(TeachingGroupPeriodType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupPeriodType\n", t, value)
        }
        return nil, false
  }
  func StaffAssignmentMostRecentContainerTypePointer(value interface{}) (*StaffAssignmentMostRecentContainerType, bool) {
switch t := value.(type) {
        case *StaffAssignmentMostRecentContainerType:
                return value.(*StaffAssignmentMostRecentContainerType), true
        case StaffAssignmentMostRecentContainerType:
                v, _ := value.(StaffAssignmentMostRecentContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffAssignmentMostRecentContainerType\n", t, value)
        }
        return nil, false
  }
  func AddressCollectionStudentListTypePointer(value interface{}) (*AddressCollectionStudentListType, bool) {
switch t := value.(type) {
        case *AddressCollectionStudentListType:
                return value.(*AddressCollectionStudentListType), true
        case AddressCollectionStudentListType:
                v, _ := value.(AddressCollectionStudentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressCollectionStudentListType\n", t, value)
        }
        return nil, false
  }
  func JournalPointer(value interface{}) (*Journal, bool) {
switch t := value.(type) {
        case *Journal:
                return value.(*Journal), true
        case Journal:
                v, _ := value.(Journal)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Journal\n", t, value)
        }
        return nil, false
  }
  func AGRoundListTypePointer(value interface{}) (*AGRoundListType, bool) {
switch t := value.(type) {
        case *AGRoundListType:
                return value.(*AGRoundListType), true
        case AGRoundListType:
                v, _ := value.(AGRoundListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGRoundListType\n", t, value)
        }
        return nil, false
  }
  func NAPCodeFrameTestletListTypePointer(value interface{}) (*NAPCodeFrameTestletListType, bool) {
switch t := value.(type) {
        case *NAPCodeFrameTestletListType:
                return value.(*NAPCodeFrameTestletListType), true
        case NAPCodeFrameTestletListType:
                v, _ := value.(NAPCodeFrameTestletListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPCodeFrameTestletListType\n", t, value)
        }
        return nil, false
  }
  func ActivityTimeType_DurationPointer(value interface{}) (*ActivityTimeType_Duration, bool) {
switch t := value.(type) {
        case *ActivityTimeType_Duration:
                return value.(*ActivityTimeType_Duration), true
        case ActivityTimeType_Duration:
                v, _ := value.(ActivityTimeType_Duration)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ActivityTimeType_Duration\n", t, value)
        }
        return nil, false
  }
  func LifeCycleType_CreatorPointer(value interface{}) (*LifeCycleType_Creator, bool) {
switch t := value.(type) {
        case *LifeCycleType_Creator:
                return value.(*LifeCycleType_Creator), true
        case LifeCycleType_Creator:
                v, _ := value.(LifeCycleType_Creator)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType_Creator\n", t, value)
        }
        return nil, false
  }
  func LearningStandardItemPointer(value interface{}) (*LearningStandardItem, bool) {
switch t := value.(type) {
        case *LearningStandardItem:
                return value.(*LearningStandardItem), true
        case LearningStandardItem:
                v, _ := value.(LearningStandardItem)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningStandardItem\n", t, value)
        }
        return nil, false
  }
  func PersonPicturePointer(value interface{}) (*PersonPicture, bool) {
switch t := value.(type) {
        case *PersonPicture:
                return value.(*PersonPicture), true
        case PersonPicture:
                v, _ := value.(PersonPicture)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonPicture\n", t, value)
        }
        return nil, false
  }
  func LocationTypePointer(value interface{}) (*LocationType, bool) {
switch t := value.(type) {
        case *LocationType:
                return value.(*LocationType), true
        case LocationType:
                v, _ := value.(LocationType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LocationType\n", t, value)
        }
        return nil, false
  }
  func LearningResource_LocationPointer(value interface{}) (*LearningResource_Location, bool) {
switch t := value.(type) {
        case *LearningResource_Location:
                return value.(*LearningResource_Location), true
        case LearningResource_Location:
                v, _ := value.(LearningResource_Location)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningResource_Location\n", t, value)
        }
        return nil, false
  }
  func StudentSchoolEnrollment_CalendarPointer(value interface{}) (*StudentSchoolEnrollment_Calendar, bool) {
switch t := value.(type) {
        case *StudentSchoolEnrollment_Calendar:
                return value.(*StudentSchoolEnrollment_Calendar), true
        case StudentSchoolEnrollment_Calendar:
                v, _ := value.(StudentSchoolEnrollment_Calendar)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSchoolEnrollment_Calendar\n", t, value)
        }
        return nil, false
  }
  func EmailTypePointer(value interface{}) (*EmailType, bool) {
switch t := value.(type) {
        case *EmailType:
                return value.(*EmailType), true
        case EmailType:
                v, _ := value.(EmailType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EmailType\n", t, value)
        }
        return nil, false
  }
  func JournalAdjustmentTypePointer(value interface{}) (*JournalAdjustmentType, bool) {
switch t := value.(type) {
        case *JournalAdjustmentType:
                return value.(*JournalAdjustmentType), true
        case JournalAdjustmentType:
                v, _ := value.(JournalAdjustmentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to JournalAdjustmentType\n", t, value)
        }
        return nil, false
  }
  func StudentScoreJudgementAgainstStandardPointer(value interface{}) (*StudentScoreJudgementAgainstStandard, bool) {
switch t := value.(type) {
        case *StudentScoreJudgementAgainstStandard:
                return value.(*StudentScoreJudgementAgainstStandard), true
        case StudentScoreJudgementAgainstStandard:
                v, _ := value.(StudentScoreJudgementAgainstStandard)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentScoreJudgementAgainstStandard\n", t, value)
        }
        return nil, false
  }
  func AGContextualQuestionTypePointer(value interface{}) (*AGContextualQuestionType, bool) {
switch t := value.(type) {
        case *AGContextualQuestionType:
                return value.(*AGContextualQuestionType), true
        case AGContextualQuestionType:
                v, _ := value.(AGContextualQuestionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGContextualQuestionType\n", t, value)
        }
        return nil, false
  }
  func NAPTestContentTypePointer(value interface{}) (*NAPTestContentType, bool) {
switch t := value.(type) {
        case *NAPTestContentType:
                return value.(*NAPTestContentType), true
        case NAPTestContentType:
                v, _ := value.(NAPTestContentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestContentType\n", t, value)
        }
        return nil, false
  }
  func AssociatedObjectsTypePointer(value interface{}) (*AssociatedObjectsType, bool) {
switch t := value.(type) {
        case *AssociatedObjectsType:
                return value.(*AssociatedObjectsType), true
        case AssociatedObjectsType:
                v, _ := value.(AssociatedObjectsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AssociatedObjectsType\n", t, value)
        }
        return nil, false
  }
  func DomainBandsContainerTypePointer(value interface{}) (*DomainBandsContainerType, bool) {
switch t := value.(type) {
        case *DomainBandsContainerType:
                return value.(*DomainBandsContainerType), true
        case DomainBandsContainerType:
                v, _ := value.(DomainBandsContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DomainBandsContainerType\n", t, value)
        }
        return nil, false
  }
  func EducationFilterTypePointer(value interface{}) (*EducationFilterType, bool) {
switch t := value.(type) {
        case *EducationFilterType:
                return value.(*EducationFilterType), true
        case EducationFilterType:
                v, _ := value.(EducationFilterType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EducationFilterType\n", t, value)
        }
        return nil, false
  }
  func YearLevelEnrollmentTypePointer(value interface{}) (*YearLevelEnrollmentType, bool) {
switch t := value.(type) {
        case *YearLevelEnrollmentType:
                return value.(*YearLevelEnrollmentType), true
        case YearLevelEnrollmentType:
                v, _ := value.(YearLevelEnrollmentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to YearLevelEnrollmentType\n", t, value)
        }
        return nil, false
  }
  func AbstractContentPackageType_BinaryDataPointer(value interface{}) (*AbstractContentPackageType_BinaryData, bool) {
switch t := value.(type) {
        case *AbstractContentPackageType_BinaryData:
                return value.(*AbstractContentPackageType_BinaryData), true
        case AbstractContentPackageType_BinaryData:
                v, _ := value.(AbstractContentPackageType_BinaryData)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentPackageType_BinaryData\n", t, value)
        }
        return nil, false
  }
  func AggregateStatisticInfo_CalculationRulePointer(value interface{}) (*AggregateStatisticInfo_CalculationRule, bool) {
switch t := value.(type) {
        case *AggregateStatisticInfo_CalculationRule:
                return value.(*AggregateStatisticInfo_CalculationRule), true
        case AggregateStatisticInfo_CalculationRule:
                v, _ := value.(AggregateStatisticInfo_CalculationRule)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AggregateStatisticInfo_CalculationRule\n", t, value)
        }
        return nil, false
  }
  func MedicationListTypePointer(value interface{}) (*MedicationListType, bool) {
switch t := value.(type) {
        case *MedicationListType:
                return value.(*MedicationListType), true
        case MedicationListType:
                v, _ := value.(MedicationListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MedicationListType\n", t, value)
        }
        return nil, false
  }
  func ValidLetterMarkListTypePointer(value interface{}) (*ValidLetterMarkListType, bool) {
switch t := value.(type) {
        case *ValidLetterMarkListType:
                return value.(*ValidLetterMarkListType), true
        case ValidLetterMarkListType:
                v, _ := value.(ValidLetterMarkListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ValidLetterMarkListType\n", t, value)
        }
        return nil, false
  }
  func ContactsTypePointer(value interface{}) (*ContactsType, bool) {
switch t := value.(type) {
        case *ContactsType:
                return value.(*ContactsType), true
        case ContactsType:
                v, _ := value.(ContactsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ContactsType\n", t, value)
        }
        return nil, false
  }
  func TeachingGroupScheduleListTypePointer(value interface{}) (*TeachingGroupScheduleListType, bool) {
switch t := value.(type) {
        case *TeachingGroupScheduleListType:
                return value.(*TeachingGroupScheduleListType), true
        case TeachingGroupScheduleListType:
                v, _ := value.(TeachingGroupScheduleListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupScheduleListType\n", t, value)
        }
        return nil, false
  }
  func Activity_EvaluationPointer(value interface{}) (*Activity_Evaluation, bool) {
switch t := value.(type) {
        case *Activity_Evaluation:
                return value.(*Activity_Evaluation), true
        case Activity_Evaluation:
                v, _ := value.(Activity_Evaluation)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Activity_Evaluation\n", t, value)
        }
        return nil, false
  }
  func DemographicsTypePointer(value interface{}) (*DemographicsType, bool) {
switch t := value.(type) {
        case *DemographicsType:
                return value.(*DemographicsType), true
        case DemographicsType:
                v, _ := value.(DemographicsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DemographicsType\n", t, value)
        }
        return nil, false
  }
  func CollectionStatusPointer(value interface{}) (*CollectionStatus, bool) {
switch t := value.(type) {
        case *CollectionStatus:
                return value.(*CollectionStatus), true
        case CollectionStatus:
                v, _ := value.(CollectionStatus)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CollectionStatus\n", t, value)
        }
        return nil, false
  }
  func NAPEventStudentLinkPointer(value interface{}) (*NAPEventStudentLink, bool) {
switch t := value.(type) {
        case *NAPEventStudentLink:
                return value.(*NAPEventStudentLink), true
        case NAPEventStudentLink:
                v, _ := value.(NAPEventStudentLink)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPEventStudentLink\n", t, value)
        }
        return nil, false
  }
  func VendorInfoPointer(value interface{}) (*VendorInfo, bool) {
switch t := value.(type) {
        case *VendorInfo:
                return value.(*VendorInfo), true
        case VendorInfo:
                v, _ := value.(VendorInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to VendorInfo\n", t, value)
        }
        return nil, false
  }
  func AccountCodeListTypePointer(value interface{}) (*AccountCodeListType, bool) {
switch t := value.(type) {
        case *AccountCodeListType:
                return value.(*AccountCodeListType), true
        case AccountCodeListType:
                v, _ := value.(AccountCodeListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AccountCodeListType\n", t, value)
        }
        return nil, false
  }
  func CensusStudentTypePointer(value interface{}) (*CensusStudentType, bool) {
switch t := value.(type) {
        case *CensusStudentType:
                return value.(*CensusStudentType), true
        case CensusStudentType:
                v, _ := value.(CensusStudentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusStudentType\n", t, value)
        }
        return nil, false
  }
  func TimeTablePointer(value interface{}) (*TimeTable, bool) {
switch t := value.(type) {
        case *TimeTable:
                return value.(*TimeTable), true
        case TimeTable:
                v, _ := value.(TimeTable)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTable\n", t, value)
        }
        return nil, false
  }
  func MarkerTypePointer(value interface{}) (*MarkerType, bool) {
switch t := value.(type) {
        case *MarkerType:
                return value.(*MarkerType), true
        case MarkerType:
                v, _ := value.(MarkerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MarkerType\n", t, value)
        }
        return nil, false
  }
  func SIF_ExtendedElementsType_SIF_ExtendedElementPointer(value interface{}) (*SIF_ExtendedElementsType_SIF_ExtendedElement, bool) {
switch t := value.(type) {
        case *SIF_ExtendedElementsType_SIF_ExtendedElement:
                return value.(*SIF_ExtendedElementsType_SIF_ExtendedElement), true
        case SIF_ExtendedElementsType_SIF_ExtendedElement:
                v, _ := value.(SIF_ExtendedElementsType_SIF_ExtendedElement)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SIF_ExtendedElementsType_SIF_ExtendedElement\n", t, value)
        }
        return nil, false
  }
  func PersonInfoTypePointer(value interface{}) (*PersonInfoType, bool) {
switch t := value.(type) {
        case *PersonInfoType:
                return value.(*PersonInfoType), true
        case PersonInfoType:
                v, _ := value.(PersonInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonInfoType\n", t, value)
        }
        return nil, false
  }
  func AbstractContentElementType_XMLDataPointer(value interface{}) (*AbstractContentElementType_XMLData, bool) {
switch t := value.(type) {
        case *AbstractContentElementType_XMLData:
                return value.(*AbstractContentElementType_XMLData), true
        case AbstractContentElementType_XMLData:
                v, _ := value.(AbstractContentElementType_XMLData)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentElementType_XMLData\n", t, value)
        }
        return nil, false
  }
  func HoldInfoListTypePointer(value interface{}) (*HoldInfoListType, bool) {
switch t := value.(type) {
        case *HoldInfoListType:
                return value.(*HoldInfoListType), true
        case HoldInfoListType:
                v, _ := value.(HoldInfoListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to HoldInfoListType\n", t, value)
        }
        return nil, false
  }
  func FQContextualQuestionListTypePointer(value interface{}) (*FQContextualQuestionListType, bool) {
switch t := value.(type) {
        case *FQContextualQuestionListType:
                return value.(*FQContextualQuestionListType), true
        case FQContextualQuestionListType:
                v, _ := value.(FQContextualQuestionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FQContextualQuestionListType\n", t, value)
        }
        return nil, false
  }
  func AGRoundTypePointer(value interface{}) (*AGRoundType, bool) {
switch t := value.(type) {
        case *AGRoundType:
                return value.(*AGRoundType), true
        case AGRoundType:
                v, _ := value.(AGRoundType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGRoundType\n", t, value)
        }
        return nil, false
  }
  func StaffListTypePointer(value interface{}) (*StaffListType, bool) {
switch t := value.(type) {
        case *StaffListType:
                return value.(*StaffListType), true
        case StaffListType:
                v, _ := value.(StaffListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffListType\n", t, value)
        }
        return nil, false
  }
  func SchoolContactTypePointer(value interface{}) (*SchoolContactType, bool) {
switch t := value.(type) {
        case *SchoolContactType:
                return value.(*SchoolContactType), true
        case SchoolContactType:
                v, _ := value.(SchoolContactType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolContactType\n", t, value)
        }
        return nil, false
  }
  func StudentsTypePointer(value interface{}) (*StudentsType, bool) {
switch t := value.(type) {
        case *StudentsType:
                return value.(*StudentsType), true
        case StudentsType:
                v, _ := value.(StudentsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentsType\n", t, value)
        }
        return nil, false
  }
  func NAPTestletPointer(value interface{}) (*NAPTestlet, bool) {
switch t := value.(type) {
        case *NAPTestlet:
                return value.(*NAPTestlet), true
        case NAPTestlet:
                v, _ := value.(NAPTestlet)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestlet\n", t, value)
        }
        return nil, false
  }
  func SchoolProgramsPointer(value interface{}) (*SchoolPrograms, bool) {
switch t := value.(type) {
        case *SchoolPrograms:
                return value.(*SchoolPrograms), true
        case SchoolPrograms:
                v, _ := value.(SchoolPrograms)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolPrograms\n", t, value)
        }
        return nil, false
  }
  func HouseholdContactInfoTypePointer(value interface{}) (*HouseholdContactInfoType, bool) {
switch t := value.(type) {
        case *HouseholdContactInfoType:
                return value.(*HouseholdContactInfoType), true
        case HouseholdContactInfoType:
                v, _ := value.(HouseholdContactInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to HouseholdContactInfoType\n", t, value)
        }
        return nil, false
  }
  func StudentActivityInfoPointer(value interface{}) (*StudentActivityInfo, bool) {
switch t := value.(type) {
        case *StudentActivityInfo:
                return value.(*StudentActivityInfo), true
        case StudentActivityInfo:
                v, _ := value.(StudentActivityInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentActivityInfo\n", t, value)
        }
        return nil, false
  }
  func CensusStudentListTypePointer(value interface{}) (*CensusStudentListType, bool) {
switch t := value.(type) {
        case *CensusStudentListType:
                return value.(*CensusStudentListType), true
        case CensusStudentListType:
                v, _ := value.(CensusStudentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusStudentListType\n", t, value)
        }
        return nil, false
  }
  func Journal_OriginatingTransactionRefIdPointer(value interface{}) (*Journal_OriginatingTransactionRefId, bool) {
switch t := value.(type) {
        case *Journal_OriginatingTransactionRefId:
                return value.(*Journal_OriginatingTransactionRefId), true
        case Journal_OriginatingTransactionRefId:
                v, _ := value.(Journal_OriginatingTransactionRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Journal_OriginatingTransactionRefId\n", t, value)
        }
        return nil, false
  }
  func AbstractContentElementTypePointer(value interface{}) (*AbstractContentElementType, bool) {
switch t := value.(type) {
        case *AbstractContentElementType:
                return value.(*AbstractContentElementType), true
        case AbstractContentElementType:
                v, _ := value.(AbstractContentElementType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentElementType\n", t, value)
        }
        return nil, false
  }
  func StimulusLocalIdListTypePointer(value interface{}) (*StimulusLocalIdListType, bool) {
switch t := value.(type) {
        case *StimulusLocalIdListType:
                return value.(*StimulusLocalIdListType), true
        case StimulusLocalIdListType:
                v, _ := value.(StimulusLocalIdListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StimulusLocalIdListType\n", t, value)
        }
        return nil, false
  }
  func StudentEntryContainerTypePointer(value interface{}) (*StudentEntryContainerType, bool) {
switch t := value.(type) {
        case *StudentEntryContainerType:
                return value.(*StudentEntryContainerType), true
        case StudentEntryContainerType:
                v, _ := value.(StudentEntryContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentEntryContainerType\n", t, value)
        }
        return nil, false
  }
  func CensusCollectionPointer(value interface{}) (*CensusCollection, bool) {
switch t := value.(type) {
        case *CensusCollection:
                return value.(*CensusCollection), true
        case CensusCollection:
                v, _ := value.(CensusCollection)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusCollection\n", t, value)
        }
        return nil, false
  }
  func LearningResourcesTypePointer(value interface{}) (*LearningResourcesType, bool) {
switch t := value.(type) {
        case *LearningResourcesType:
                return value.(*LearningResourcesType), true
        case LearningResourcesType:
                v, _ := value.(LearningResourcesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningResourcesType\n", t, value)
        }
        return nil, false
  }
  func AlertMessageTypePointer(value interface{}) (*AlertMessageType, bool) {
switch t := value.(type) {
        case *AlertMessageType:
                return value.(*AlertMessageType), true
        case AlertMessageType:
                v, _ := value.(AlertMessageType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AlertMessageType\n", t, value)
        }
        return nil, false
  }
  func GradingAssignmentPointer(value interface{}) (*GradingAssignment, bool) {
switch t := value.(type) {
        case *GradingAssignment:
                return value.(*GradingAssignment), true
        case GradingAssignment:
                v, _ := value.(GradingAssignment)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to GradingAssignment\n", t, value)
        }
        return nil, false
  }
  func NAPLANClassListTypePointer(value interface{}) (*NAPLANClassListType, bool) {
switch t := value.(type) {
        case *NAPLANClassListType:
                return value.(*NAPLANClassListType), true
        case NAPLANClassListType:
                v, _ := value.(NAPLANClassListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPLANClassListType\n", t, value)
        }
        return nil, false
  }
  func WellbeingEventPointer(value interface{}) (*WellbeingEvent, bool) {
switch t := value.(type) {
        case *WellbeingEvent:
                return value.(*WellbeingEvent), true
        case WellbeingEvent:
                v, _ := value.(WellbeingEvent)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingEvent\n", t, value)
        }
        return nil, false
  }
  func HouseholdListTypePointer(value interface{}) (*HouseholdListType, bool) {
switch t := value.(type) {
        case *HouseholdListType:
                return value.(*HouseholdListType), true
        case HouseholdListType:
                v, _ := value.(HouseholdListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to HouseholdListType\n", t, value)
        }
        return nil, false
  }
  func EntityContactInfoTypePointer(value interface{}) (*EntityContactInfoType, bool) {
switch t := value.(type) {
        case *EntityContactInfoType:
                return value.(*EntityContactInfoType), true
        case EntityContactInfoType:
                v, _ := value.(EntityContactInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EntityContactInfoType\n", t, value)
        }
        return nil, false
  }
  func StudentContactRelationshipPointer(value interface{}) (*StudentContactRelationship, bool) {
switch t := value.(type) {
        case *StudentContactRelationship:
                return value.(*StudentContactRelationship), true
        case StudentContactRelationship:
                v, _ := value.(StudentContactRelationship)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentContactRelationship\n", t, value)
        }
        return nil, false
  }
  func StudentPersonalPointer(value interface{}) (*StudentPersonal, bool) {
switch t := value.(type) {
        case *StudentPersonal:
                return value.(*StudentPersonal), true
        case StudentPersonal:
                v, _ := value.(StudentPersonal)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentPersonal\n", t, value)
        }
        return nil, false
  }
  func LibraryMessageListTypePointer(value interface{}) (*LibraryMessageListType, bool) {
switch t := value.(type) {
        case *LibraryMessageListType:
                return value.(*LibraryMessageListType), true
        case LibraryMessageListType:
                v, _ := value.(LibraryMessageListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LibraryMessageListType\n", t, value)
        }
        return nil, false
  }
  func StaffPersonalPointer(value interface{}) (*StaffPersonal, bool) {
switch t := value.(type) {
        case *StaffPersonal:
                return value.(*StaffPersonal), true
        case StaffPersonal:
                v, _ := value.(StaffPersonal)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffPersonal\n", t, value)
        }
        return nil, false
  }
  func SoftwareVendorInfoContainerTypePointer(value interface{}) (*SoftwareVendorInfoContainerType, bool) {
switch t := value.(type) {
        case *SoftwareVendorInfoContainerType:
                return value.(*SoftwareVendorInfoContainerType), true
        case SoftwareVendorInfoContainerType:
                v, _ := value.(SoftwareVendorInfoContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SoftwareVendorInfoContainerType\n", t, value)
        }
        return nil, false
  }
  func SchoolContactListTypePointer(value interface{}) (*SchoolContactListType, bool) {
switch t := value.(type) {
        case *SchoolContactListType:
                return value.(*SchoolContactListType), true
        case SchoolContactListType:
                v, _ := value.(SchoolContactListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolContactListType\n", t, value)
        }
        return nil, false
  }
  func AbstractContentPackageType_TextDataPointer(value interface{}) (*AbstractContentPackageType_TextData, bool) {
switch t := value.(type) {
        case *AbstractContentPackageType_TextData:
                return value.(*AbstractContentPackageType_TextData), true
        case AbstractContentPackageType_TextData:
                v, _ := value.(AbstractContentPackageType_TextData)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentPackageType_TextData\n", t, value)
        }
        return nil, false
  }
  func StudentExitContainerTypePointer(value interface{}) (*StudentExitContainerType, bool) {
switch t := value.(type) {
        case *StudentExitContainerType:
                return value.(*StudentExitContainerType), true
        case StudentExitContainerType:
                v, _ := value.(StudentExitContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentExitContainerType\n", t, value)
        }
        return nil, false
  }
  func PublishingPermissionListTypePointer(value interface{}) (*PublishingPermissionListType, bool) {
switch t := value.(type) {
        case *PublishingPermissionListType:
                return value.(*PublishingPermissionListType), true
        case PublishingPermissionListType:
                v, _ := value.(PublishingPermissionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PublishingPermissionListType\n", t, value)
        }
        return nil, false
  }
  func SystemRole_RoleScopeListPointer(value interface{}) (*SystemRole_RoleScopeList, bool) {
switch t := value.(type) {
        case *SystemRole_RoleScopeList:
                return value.(*SystemRole_RoleScopeList), true
        case SystemRole_RoleScopeList:
                v, _ := value.(SystemRole_RoleScopeList)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_RoleScopeList\n", t, value)
        }
        return nil, false
  }
  func YearRangeTypePointer(value interface{}) (*YearRangeType, bool) {
switch t := value.(type) {
        case *YearRangeType:
                return value.(*YearRangeType), true
        case YearRangeType:
                v, _ := value.(YearRangeType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to YearRangeType\n", t, value)
        }
        return nil, false
  }
  func JournalAdjustmentListTypePointer(value interface{}) (*JournalAdjustmentListType, bool) {
switch t := value.(type) {
        case *JournalAdjustmentListType:
                return value.(*JournalAdjustmentListType), true
        case JournalAdjustmentListType:
                v, _ := value.(JournalAdjustmentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to JournalAdjustmentListType\n", t, value)
        }
        return nil, false
  }
  func LearningStandardDocumentPointer(value interface{}) (*LearningStandardDocument, bool) {
switch t := value.(type) {
        case *LearningStandardDocument:
                return value.(*LearningStandardDocument), true
        case LearningStandardDocument:
                v, _ := value.(LearningStandardDocument)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningStandardDocument\n", t, value)
        }
        return nil, false
  }
  func ProgramAvailabilityTypePointer(value interface{}) (*ProgramAvailabilityType, bool) {
switch t := value.(type) {
        case *ProgramAvailabilityType:
                return value.(*ProgramAvailabilityType), true
        case ProgramAvailabilityType:
                v, _ := value.(ProgramAvailabilityType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ProgramAvailabilityType\n", t, value)
        }
        return nil, false
  }
  func WellbeingPersonLink_PersonRefIdPointer(value interface{}) (*WellbeingPersonLink_PersonRefId, bool) {
switch t := value.(type) {
        case *WellbeingPersonLink_PersonRefId:
                return value.(*WellbeingPersonLink_PersonRefId), true
        case WellbeingPersonLink_PersonRefId:
                v, _ := value.(WellbeingPersonLink_PersonRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingPersonLink_PersonRefId\n", t, value)
        }
        return nil, false
  }
  func LocalCodeTypePointer(value interface{}) (*LocalCodeType, bool) {
switch t := value.(type) {
        case *LocalCodeType:
                return value.(*LocalCodeType), true
        case LocalCodeType:
                v, _ := value.(LocalCodeType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LocalCodeType\n", t, value)
        }
        return nil, false
  }
  func CreationUserTypePointer(value interface{}) (*CreationUserType, bool) {
switch t := value.(type) {
        case *CreationUserType:
                return value.(*CreationUserType), true
        case CreationUserType:
                v, _ := value.(CreationUserType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CreationUserType\n", t, value)
        }
        return nil, false
  }
  func LearningStandardsDocumentTypePointer(value interface{}) (*LearningStandardsDocumentType, bool) {
switch t := value.(type) {
        case *LearningStandardsDocumentType:
                return value.(*LearningStandardsDocumentType), true
        case LearningStandardsDocumentType:
                v, _ := value.(LearningStandardsDocumentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningStandardsDocumentType\n", t, value)
        }
        return nil, false
  }
  func LifeCycleType_CreatedPointer(value interface{}) (*LifeCycleType_Created, bool) {
switch t := value.(type) {
        case *LifeCycleType_Created:
                return value.(*LifeCycleType_Created), true
        case LifeCycleType_Created:
                v, _ := value.(LifeCycleType_Created)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType_Created\n", t, value)
        }
        return nil, false
  }
  func LifeCycleType_CreatorsPointer(value interface{}) (*LifeCycleType_Creators, bool) {
switch t := value.(type) {
        case *LifeCycleType_Creators:
                return value.(*LifeCycleType_Creators), true
        case LifeCycleType_Creators:
                v, _ := value.(LifeCycleType_Creators)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType_Creators\n", t, value)
        }
        return nil, false
  }
  func MedicationTypePointer(value interface{}) (*MedicationType, bool) {
switch t := value.(type) {
        case *MedicationType:
                return value.(*MedicationType), true
        case MedicationType:
                v, _ := value.(MedicationType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MedicationType\n", t, value)
        }
        return nil, false
  }
  func PaymentReceiptLineListTypePointer(value interface{}) (*PaymentReceiptLineListType, bool) {
switch t := value.(type) {
        case *PaymentReceiptLineListType:
                return value.(*PaymentReceiptLineListType), true
        case PaymentReceiptLineListType:
                v, _ := value.(PaymentReceiptLineListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PaymentReceiptLineListType\n", t, value)
        }
        return nil, false
  }
  func HouseholdContactInfoListTypePointer(value interface{}) (*HouseholdContactInfoListType, bool) {
switch t := value.(type) {
        case *HouseholdContactInfoListType:
                return value.(*HouseholdContactInfoListType), true
        case HouseholdContactInfoListType:
                v, _ := value.(HouseholdContactInfoListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to HouseholdContactInfoListType\n", t, value)
        }
        return nil, false
  }
  func SubstituteItemListTypePointer(value interface{}) (*SubstituteItemListType, bool) {
switch t := value.(type) {
        case *SubstituteItemListType:
                return value.(*SubstituteItemListType), true
        case SubstituteItemListType:
                v, _ := value.(SubstituteItemListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SubstituteItemListType\n", t, value)
        }
        return nil, false
  }
  func ScheduledActivityOverrideTypePointer(value interface{}) (*ScheduledActivityOverrideType, bool) {
switch t := value.(type) {
        case *ScheduledActivityOverrideType:
                return value.(*ScheduledActivityOverrideType), true
        case ScheduledActivityOverrideType:
                v, _ := value.(ScheduledActivityOverrideType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScheduledActivityOverrideType\n", t, value)
        }
        return nil, false
  }
  func ResourceBookingPointer(value interface{}) (*ResourceBooking, bool) {
switch t := value.(type) {
        case *ResourceBooking:
                return value.(*ResourceBooking), true
        case ResourceBooking:
                v, _ := value.(ResourceBooking)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceBooking\n", t, value)
        }
        return nil, false
  }
  func FQContextualQuestionTypePointer(value interface{}) (*FQContextualQuestionType, bool) {
switch t := value.(type) {
        case *FQContextualQuestionType:
                return value.(*FQContextualQuestionType), true
        case FQContextualQuestionType:
                v, _ := value.(FQContextualQuestionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FQContextualQuestionType\n", t, value)
        }
        return nil, false
  }
  func ProgramStatusTypePointer(value interface{}) (*ProgramStatusType, bool) {
switch t := value.(type) {
        case *ProgramStatusType:
                return value.(*ProgramStatusType), true
        case ProgramStatusType:
                v, _ := value.(ProgramStatusType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ProgramStatusType\n", t, value)
        }
        return nil, false
  }
  func StudentAttendanceSummaryPointer(value interface{}) (*StudentAttendanceSummary, bool) {
switch t := value.(type) {
        case *StudentAttendanceSummary:
                return value.(*StudentAttendanceSummary), true
        case StudentAttendanceSummary:
                v, _ := value.(StudentAttendanceSummary)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentAttendanceSummary\n", t, value)
        }
        return nil, false
  }
  func WellbeingPersonLinkPointer(value interface{}) (*WellbeingPersonLink, bool) {
switch t := value.(type) {
        case *WellbeingPersonLink:
                return value.(*WellbeingPersonLink), true
        case WellbeingPersonLink:
                v, _ := value.(WellbeingPersonLink)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingPersonLink\n", t, value)
        }
        return nil, false
  }
  func CalendarDatePointer(value interface{}) (*CalendarDate, bool) {
switch t := value.(type) {
        case *CalendarDate:
                return value.(*CalendarDate), true
        case CalendarDate:
                v, _ := value.(CalendarDate)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CalendarDate\n", t, value)
        }
        return nil, false
  }
  func WellbeingEventCategoryListTypePointer(value interface{}) (*WellbeingEventCategoryListType, bool) {
switch t := value.(type) {
        case *WellbeingEventCategoryListType:
                return value.(*WellbeingEventCategoryListType), true
        case WellbeingEventCategoryListType:
                v, _ := value.(WellbeingEventCategoryListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingEventCategoryListType\n", t, value)
        }
        return nil, false
  }
  func GridLocationTypePointer(value interface{}) (*GridLocationType, bool) {
switch t := value.(type) {
        case *GridLocationType:
                return value.(*GridLocationType), true
        case GridLocationType:
                v, _ := value.(GridLocationType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to GridLocationType\n", t, value)
        }
        return nil, false
  }
  func ComponentTypePointer(value interface{}) (*ComponentType, bool) {
switch t := value.(type) {
        case *ComponentType:
                return value.(*ComponentType), true
        case ComponentType:
                v, _ := value.(ComponentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ComponentType\n", t, value)
        }
        return nil, false
  }
  func ExclusionRulesTypePointer(value interface{}) (*ExclusionRulesType, bool) {
switch t := value.(type) {
        case *ExclusionRulesType:
                return value.(*ExclusionRulesType), true
        case ExclusionRulesType:
                v, _ := value.(ExclusionRulesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ExclusionRulesType\n", t, value)
        }
        return nil, false
  }
  func PurchaseOrderPointer(value interface{}) (*PurchaseOrder, bool) {
switch t := value.(type) {
        case *PurchaseOrder:
                return value.(*PurchaseOrder), true
        case PurchaseOrder:
                v, _ := value.(PurchaseOrder)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PurchaseOrder\n", t, value)
        }
        return nil, false
  }
  func AbstractContentPackageType_ReferencePointer(value interface{}) (*AbstractContentPackageType_Reference, bool) {
switch t := value.(type) {
        case *AbstractContentPackageType_Reference:
                return value.(*AbstractContentPackageType_Reference), true
        case AbstractContentPackageType_Reference:
                v, _ := value.(AbstractContentPackageType_Reference)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentPackageType_Reference\n", t, value)
        }
        return nil, false
  }
  func InvoicePointer(value interface{}) (*Invoice, bool) {
switch t := value.(type) {
        case *Invoice:
                return value.(*Invoice), true
        case Invoice:
                v, _ := value.(Invoice)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Invoice\n", t, value)
        }
        return nil, false
  }
  func PurchasingItemTypePointer(value interface{}) (*PurchasingItemType, bool) {
switch t := value.(type) {
        case *PurchasingItemType:
                return value.(*PurchasingItemType), true
        case PurchasingItemType:
                v, _ := value.(PurchasingItemType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PurchasingItemType\n", t, value)
        }
        return nil, false
  }
  func CodeFrameTestItemListTypePointer(value interface{}) (*CodeFrameTestItemListType, bool) {
switch t := value.(type) {
        case *CodeFrameTestItemListType:
                return value.(*CodeFrameTestItemListType), true
        case CodeFrameTestItemListType:
                v, _ := value.(CodeFrameTestItemListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CodeFrameTestItemListType\n", t, value)
        }
        return nil, false
  }
  func ElectronicIdTypePointer(value interface{}) (*ElectronicIdType, bool) {
switch t := value.(type) {
        case *ElectronicIdType:
                return value.(*ElectronicIdType), true
        case ElectronicIdType:
                v, _ := value.(ElectronicIdType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ElectronicIdType\n", t, value)
        }
        return nil, false
  }
  func NAPCodeFramePointer(value interface{}) (*NAPCodeFrame, bool) {
switch t := value.(type) {
        case *NAPCodeFrame:
                return value.(*NAPCodeFrame), true
        case NAPCodeFrame:
                v, _ := value.(NAPCodeFrame)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPCodeFrame\n", t, value)
        }
        return nil, false
  }
  func TeachingGroupScheduleTypePointer(value interface{}) (*TeachingGroupScheduleType, bool) {
switch t := value.(type) {
        case *TeachingGroupScheduleType:
                return value.(*TeachingGroupScheduleType), true
        case TeachingGroupScheduleType:
                v, _ := value.(TeachingGroupScheduleType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupScheduleType\n", t, value)
        }
        return nil, false
  }
  func AttendanceCodeTypePointer(value interface{}) (*AttendanceCodeType, bool) {
switch t := value.(type) {
        case *AttendanceCodeType:
                return value.(*AttendanceCodeType), true
        case AttendanceCodeType:
                v, _ := value.(AttendanceCodeType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AttendanceCodeType\n", t, value)
        }
        return nil, false
  }
  func OtherWellbeingResponseContainerTypePointer(value interface{}) (*OtherWellbeingResponseContainerType, bool) {
switch t := value.(type) {
        case *OtherWellbeingResponseContainerType:
                return value.(*OtherWellbeingResponseContainerType), true
        case OtherWellbeingResponseContainerType:
                v, _ := value.(OtherWellbeingResponseContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherWellbeingResponseContainerType\n", t, value)
        }
        return nil, false
  }
  func MedicalAlertMessageTypePointer(value interface{}) (*MedicalAlertMessageType, bool) {
switch t := value.(type) {
        case *MedicalAlertMessageType:
                return value.(*MedicalAlertMessageType), true
        case MedicalAlertMessageType:
                v, _ := value.(MedicalAlertMessageType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MedicalAlertMessageType\n", t, value)
        }
        return nil, false
  }
  func StudentExitStatusContainerTypePointer(value interface{}) (*StudentExitStatusContainerType, bool) {
switch t := value.(type) {
        case *StudentExitStatusContainerType:
                return value.(*StudentExitStatusContainerType), true
        case StudentExitStatusContainerType:
                v, _ := value.(StudentExitStatusContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentExitStatusContainerType\n", t, value)
        }
        return nil, false
  }
  func PhoneNumberListTypePointer(value interface{}) (*PhoneNumberListType, bool) {
switch t := value.(type) {
        case *PhoneNumberListType:
                return value.(*PhoneNumberListType), true
        case PhoneNumberListType:
                v, _ := value.(PhoneNumberListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PhoneNumberListType\n", t, value)
        }
        return nil, false
  }
  func CheckoutInfoTypePointer(value interface{}) (*CheckoutInfoType, bool) {
switch t := value.(type) {
        case *CheckoutInfoType:
                return value.(*CheckoutInfoType), true
        case CheckoutInfoType:
                v, _ := value.(CheckoutInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CheckoutInfoType\n", t, value)
        }
        return nil, false
  }
  func StudentActivityTypePointer(value interface{}) (*StudentActivityType, bool) {
switch t := value.(type) {
        case *StudentActivityType:
                return value.(*StudentActivityType), true
        case StudentActivityType:
                v, _ := value.(StudentActivityType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentActivityType\n", t, value)
        }
        return nil, false
  }
  func StandardHierarchyLevelTypePointer(value interface{}) (*StandardHierarchyLevelType, bool) {
switch t := value.(type) {
        case *StandardHierarchyLevelType:
                return value.(*StandardHierarchyLevelType), true
        case StandardHierarchyLevelType:
                v, _ := value.(StandardHierarchyLevelType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StandardHierarchyLevelType\n", t, value)
        }
        return nil, false
  }
  func NAPSubscoreListTypePointer(value interface{}) (*NAPSubscoreListType, bool) {
switch t := value.(type) {
        case *NAPSubscoreListType:
                return value.(*NAPSubscoreListType), true
        case NAPSubscoreListType:
                v, _ := value.(NAPSubscoreListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPSubscoreListType\n", t, value)
        }
        return nil, false
  }
  func FollowUpActionListTypePointer(value interface{}) (*FollowUpActionListType, bool) {
switch t := value.(type) {
        case *FollowUpActionListType:
                return value.(*FollowUpActionListType), true
        case FollowUpActionListType:
                v, _ := value.(FollowUpActionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FollowUpActionListType\n", t, value)
        }
        return nil, false
  }
  func AddressCollectionPointer(value interface{}) (*AddressCollection, bool) {
switch t := value.(type) {
        case *AddressCollection:
                return value.(*AddressCollection), true
        case AddressCollection:
                v, _ := value.(AddressCollection)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressCollection\n", t, value)
        }
        return nil, false
  }
  func WellbeingEventSubCategoryListTypePointer(value interface{}) (*WellbeingEventSubCategoryListType, bool) {
switch t := value.(type) {
        case *WellbeingEventSubCategoryListType:
                return value.(*WellbeingEventSubCategoryListType), true
        case WellbeingEventSubCategoryListType:
                v, _ := value.(WellbeingEventSubCategoryListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingEventSubCategoryListType\n", t, value)
        }
        return nil, false
  }
  func LearningStandardsTypePointer(value interface{}) (*LearningStandardsType, bool) {
switch t := value.(type) {
        case *LearningStandardsType:
                return value.(*LearningStandardsType), true
        case LearningStandardsType:
                v, _ := value.(LearningStandardsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningStandardsType\n", t, value)
        }
        return nil, false
  }
  func CollectionRoundPointer(value interface{}) (*CollectionRound, bool) {
switch t := value.(type) {
        case *CollectionRound:
                return value.(*CollectionRound), true
        case CollectionRound:
                v, _ := value.(CollectionRound)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CollectionRound\n", t, value)
        }
        return nil, false
  }
  func AttendanceInfoTypePointer(value interface{}) (*AttendanceInfoType, bool) {
switch t := value.(type) {
        case *AttendanceInfoType:
                return value.(*AttendanceInfoType), true
        case AttendanceInfoType:
                v, _ := value.(AttendanceInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AttendanceInfoType\n", t, value)
        }
        return nil, false
  }
  func SuspensionContainerTypePointer(value interface{}) (*SuspensionContainerType, bool) {
switch t := value.(type) {
        case *SuspensionContainerType:
                return value.(*SuspensionContainerType), true
        case SuspensionContainerType:
                v, _ := value.(SuspensionContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SuspensionContainerType\n", t, value)
        }
        return nil, false
  }
  func LibraryPatronStatusPointer(value interface{}) (*LibraryPatronStatus, bool) {
switch t := value.(type) {
        case *LibraryPatronStatus:
                return value.(*LibraryPatronStatus), true
        case LibraryPatronStatus:
                v, _ := value.(LibraryPatronStatus)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LibraryPatronStatus\n", t, value)
        }
        return nil, false
  }
  func NAPTestItemContentTypePointer(value interface{}) (*NAPTestItemContentType, bool) {
switch t := value.(type) {
        case *NAPTestItemContentType:
                return value.(*NAPTestItemContentType), true
        case NAPTestItemContentType:
                v, _ := value.(NAPTestItemContentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestItemContentType\n", t, value)
        }
        return nil, false
  }
  func StudentContactPersonalPointer(value interface{}) (*StudentContactPersonal, bool) {
switch t := value.(type) {
        case *StudentContactPersonal:
                return value.(*StudentContactPersonal), true
        case StudentContactPersonal:
                v, _ := value.(StudentContactPersonal)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentContactPersonal\n", t, value)
        }
        return nil, false
  }
  func SystemRole_SystemContextListPointer(value interface{}) (*SystemRole_SystemContextList, bool) {
switch t := value.(type) {
        case *SystemRole_SystemContextList:
                return value.(*SystemRole_SystemContextList), true
        case SystemRole_SystemContextList:
                v, _ := value.(SystemRole_SystemContextList)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_SystemContextList\n", t, value)
        }
        return nil, false
  }
  func RelatedLearningStandardItemRefIdListTypePointer(value interface{}) (*RelatedLearningStandardItemRefIdListType, bool) {
switch t := value.(type) {
        case *RelatedLearningStandardItemRefIdListType:
                return value.(*RelatedLearningStandardItemRefIdListType), true
        case RelatedLearningStandardItemRefIdListType:
                v, _ := value.(RelatedLearningStandardItemRefIdListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to RelatedLearningStandardItemRefIdListType\n", t, value)
        }
        return nil, false
  }
  func DwellingArrangementTypePointer(value interface{}) (*DwellingArrangementType, bool) {
switch t := value.(type) {
        case *DwellingArrangementType:
                return value.(*DwellingArrangementType), true
        case DwellingArrangementType:
                v, _ := value.(DwellingArrangementType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DwellingArrangementType\n", t, value)
        }
        return nil, false
  }
  func WellbeingCharacteristicPointer(value interface{}) (*WellbeingCharacteristic, bool) {
switch t := value.(type) {
        case *WellbeingCharacteristic:
                return value.(*WellbeingCharacteristic), true
        case WellbeingCharacteristic:
                v, _ := value.(WellbeingCharacteristic)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingCharacteristic\n", t, value)
        }
        return nil, false
  }
  func LanguageBaseTypePointer(value interface{}) (*LanguageBaseType, bool) {
switch t := value.(type) {
        case *LanguageBaseType:
                return value.(*LanguageBaseType), true
        case LanguageBaseType:
                v, _ := value.(LanguageBaseType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LanguageBaseType\n", t, value)
        }
        return nil, false
  }
  func AGContextualQuestionListTypePointer(value interface{}) (*AGContextualQuestionListType, bool) {
switch t := value.(type) {
        case *AGContextualQuestionListType:
                return value.(*AGContextualQuestionListType), true
        case AGContextualQuestionListType:
                v, _ := value.(AGContextualQuestionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGContextualQuestionListType\n", t, value)
        }
        return nil, false
  }
  func CalendarSummaryPointer(value interface{}) (*CalendarSummary, bool) {
switch t := value.(type) {
        case *CalendarSummary:
                return value.(*CalendarSummary), true
        case CalendarSummary:
                v, _ := value.(CalendarSummary)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CalendarSummary\n", t, value)
        }
        return nil, false
  }
  func FinancialAccountPointer(value interface{}) (*FinancialAccount, bool) {
switch t := value.(type) {
        case *FinancialAccount:
                return value.(*FinancialAccount), true
        case FinancialAccount:
                v, _ := value.(FinancialAccount)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FinancialAccount\n", t, value)
        }
        return nil, false
  }
  func MonetaryAmountTypePointer(value interface{}) (*MonetaryAmountType, bool) {
switch t := value.(type) {
        case *MonetaryAmountType:
                return value.(*MonetaryAmountType), true
        case MonetaryAmountType:
                v, _ := value.(MonetaryAmountType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MonetaryAmountType\n", t, value)
        }
        return nil, false
  }
  func NAPTestItemListTypePointer(value interface{}) (*NAPTestItemListType, bool) {
switch t := value.(type) {
        case *NAPTestItemListType:
                return value.(*NAPTestItemListType), true
        case NAPTestItemListType:
                v, _ := value.(NAPTestItemListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestItemListType\n", t, value)
        }
        return nil, false
  }
  func RelationshipTypePointer(value interface{}) (*RelationshipType, bool) {
switch t := value.(type) {
        case *RelationshipType:
                return value.(*RelationshipType), true
        case RelationshipType:
                v, _ := value.(RelationshipType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to RelationshipType\n", t, value)
        }
        return nil, false
  }
  func VisaSubClassTypePointer(value interface{}) (*VisaSubClassType, bool) {
switch t := value.(type) {
        case *VisaSubClassType:
                return value.(*VisaSubClassType), true
        case VisaSubClassType:
                v, _ := value.(VisaSubClassType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to VisaSubClassType\n", t, value)
        }
        return nil, false
  }
  func LearningResourcePointer(value interface{}) (*LearningResource, bool) {
switch t := value.(type) {
        case *LearningResource:
                return value.(*LearningResource), true
        case LearningResource:
                v, _ := value.(LearningResource)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningResource\n", t, value)
        }
        return nil, false
  }
  func DomainProficiencyContainerTypePointer(value interface{}) (*DomainProficiencyContainerType, bool) {
switch t := value.(type) {
        case *DomainProficiencyContainerType:
                return value.(*DomainProficiencyContainerType), true
        case DomainProficiencyContainerType:
                v, _ := value.(DomainProficiencyContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DomainProficiencyContainerType\n", t, value)
        }
        return nil, false
  }
  func SchoolGroupListTypePointer(value interface{}) (*SchoolGroupListType, bool) {
switch t := value.(type) {
        case *SchoolGroupListType:
                return value.(*SchoolGroupListType), true
        case SchoolGroupListType:
                v, _ := value.(SchoolGroupListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolGroupListType\n", t, value)
        }
        return nil, false
  }
  func ResourceBooking_ResourceRefIdPointer(value interface{}) (*ResourceBooking_ResourceRefId, bool) {
switch t := value.(type) {
        case *ResourceBooking_ResourceRefId:
                return value.(*ResourceBooking_ResourceRefId), true
        case ResourceBooking_ResourceRefId:
                v, _ := value.(ResourceBooking_ResourceRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceBooking_ResourceRefId\n", t, value)
        }
        return nil, false
  }
  func StatementsTypePointer(value interface{}) (*StatementsType, bool) {
switch t := value.(type) {
        case *StatementsType:
                return value.(*StatementsType), true
        case StatementsType:
                v, _ := value.(StatementsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatementsType\n", t, value)
        }
        return nil, false
  }
  func StudentMostRecentContainerTypePointer(value interface{}) (*StudentMostRecentContainerType, bool) {
switch t := value.(type) {
        case *StudentMostRecentContainerType:
                return value.(*StudentMostRecentContainerType), true
        case StudentMostRecentContainerType:
                v, _ := value.(StudentMostRecentContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentMostRecentContainerType\n", t, value)
        }
        return nil, false
  }
  func NameTypePointer(value interface{}) (*NameType, bool) {
switch t := value.(type) {
        case *NameType:
                return value.(*NameType), true
        case NameType:
                v, _ := value.(NameType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NameType\n", t, value)
        }
        return nil, false
  }
  func AbstractContentPackageTypePointer(value interface{}) (*AbstractContentPackageType, bool) {
switch t := value.(type) {
        case *AbstractContentPackageType:
                return value.(*AbstractContentPackageType), true
        case AbstractContentPackageType:
                v, _ := value.(AbstractContentPackageType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentPackageType\n", t, value)
        }
        return nil, false
  }
  func TeachingGroupStudentTypePointer(value interface{}) (*TeachingGroupStudentType, bool) {
switch t := value.(type) {
        case *TeachingGroupStudentType:
                return value.(*TeachingGroupStudentType), true
        case TeachingGroupStudentType:
                v, _ := value.(TeachingGroupStudentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupStudentType\n", t, value)
        }
        return nil, false
  }
  func StudentSubjectChoiceTypePointer(value interface{}) (*StudentSubjectChoiceType, bool) {
switch t := value.(type) {
        case *StudentSubjectChoiceType:
                return value.(*StudentSubjectChoiceType), true
        case StudentSubjectChoiceType:
                v, _ := value.(StudentSubjectChoiceType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSubjectChoiceType\n", t, value)
        }
        return nil, false
  }
  func OtherCodeListTypePointer(value interface{}) (*OtherCodeListType, bool) {
switch t := value.(type) {
        case *OtherCodeListType:
                return value.(*OtherCodeListType), true
        case OtherCodeListType:
                v, _ := value.(OtherCodeListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherCodeListType\n", t, value)
        }
        return nil, false
  }
  func SchoolProgramListTypePointer(value interface{}) (*SchoolProgramListType, bool) {
switch t := value.(type) {
        case *SchoolProgramListType:
                return value.(*SchoolProgramListType), true
        case SchoolProgramListType:
                v, _ := value.(SchoolProgramListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolProgramListType\n", t, value)
        }
        return nil, false
  }
  func ScheduledActivityPointer(value interface{}) (*ScheduledActivity, bool) {
switch t := value.(type) {
        case *ScheduledActivity:
                return value.(*ScheduledActivity), true
        case ScheduledActivity:
                v, _ := value.(ScheduledActivity)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScheduledActivity\n", t, value)
        }
        return nil, false
  }
  func MedicalAlertMessagesTypePointer(value interface{}) (*MedicalAlertMessagesType, bool) {
switch t := value.(type) {
        case *MedicalAlertMessagesType:
                return value.(*MedicalAlertMessagesType), true
        case MedicalAlertMessagesType:
                v, _ := value.(MedicalAlertMessagesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MedicalAlertMessagesType\n", t, value)
        }
        return nil, false
  }
  func AGRuleListTypePointer(value interface{}) (*AGRuleListType, bool) {
switch t := value.(type) {
        case *AGRuleListType:
                return value.(*AGRuleListType), true
        case AGRuleListType:
                v, _ := value.(AGRuleListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGRuleListType\n", t, value)
        }
        return nil, false
  }
  func AbstractContentPackageType_XMLDataPointer(value interface{}) (*AbstractContentPackageType_XMLData, bool) {
switch t := value.(type) {
        case *AbstractContentPackageType_XMLData:
                return value.(*AbstractContentPackageType_XMLData), true
        case AbstractContentPackageType_XMLData:
                v, _ := value.(AbstractContentPackageType_XMLData)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentPackageType_XMLData\n", t, value)
        }
        return nil, false
  }
  func OtherNamesTypePointer(value interface{}) (*OtherNamesType, bool) {
switch t := value.(type) {
        case *OtherNamesType:
                return value.(*OtherNamesType), true
        case OtherNamesType:
                v, _ := value.(OtherNamesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherNamesType\n", t, value)
        }
        return nil, false
  }
  func StudentSchoolEnrollment_AdvisorPointer(value interface{}) (*StudentSchoolEnrollment_Advisor, bool) {
switch t := value.(type) {
        case *StudentSchoolEnrollment_Advisor:
                return value.(*StudentSchoolEnrollment_Advisor), true
        case StudentSchoolEnrollment_Advisor:
                v, _ := value.(StudentSchoolEnrollment_Advisor)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSchoolEnrollment_Advisor\n", t, value)
        }
        return nil, false
  }
  func IdentityAssertionsTypePointer(value interface{}) (*IdentityAssertionsType, bool) {
switch t := value.(type) {
        case *IdentityAssertionsType:
                return value.(*IdentityAssertionsType), true
        case IdentityAssertionsType:
                v, _ := value.(IdentityAssertionsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to IdentityAssertionsType\n", t, value)
        }
        return nil, false
  }
  func StudentGroupTypePointer(value interface{}) (*StudentGroupType, bool) {
switch t := value.(type) {
        case *StudentGroupType:
                return value.(*StudentGroupType), true
        case StudentGroupType:
                v, _ := value.(StudentGroupType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentGroupType\n", t, value)
        }
        return nil, false
  }
  func MapReferenceTypePointer(value interface{}) (*MapReferenceType, bool) {
switch t := value.(type) {
        case *MapReferenceType:
                return value.(*MapReferenceType), true
        case MapReferenceType:
                v, _ := value.(MapReferenceType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MapReferenceType\n", t, value)
        }
        return nil, false
  }
  func StudentDailyAttendancePointer(value interface{}) (*StudentDailyAttendance, bool) {
switch t := value.(type) {
        case *StudentDailyAttendance:
                return value.(*StudentDailyAttendance), true
        case StudentDailyAttendance:
                v, _ := value.(StudentDailyAttendance)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentDailyAttendance\n", t, value)
        }
        return nil, false
  }
  func SchoolCourseInfoPointer(value interface{}) (*SchoolCourseInfo, bool) {
switch t := value.(type) {
        case *SchoolCourseInfo:
                return value.(*SchoolCourseInfo), true
        case SchoolCourseInfo:
                v, _ := value.(SchoolCourseInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolCourseInfo\n", t, value)
        }
        return nil, false
  }
  func LearningStandardListTypePointer(value interface{}) (*LearningStandardListType, bool) {
switch t := value.(type) {
        case *LearningStandardListType:
                return value.(*LearningStandardListType), true
        case LearningStandardListType:
                v, _ := value.(LearningStandardListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningStandardListType\n", t, value)
        }
        return nil, false
  }
  func TimeElementTypePointer(value interface{}) (*TimeElementType, bool) {
switch t := value.(type) {
        case *TimeElementType:
                return value.(*TimeElementType), true
        case TimeElementType:
                v, _ := value.(TimeElementType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeElementType\n", t, value)
        }
        return nil, false
  }
  func WellbeingResponsePointer(value interface{}) (*WellbeingResponse, bool) {
switch t := value.(type) {
        case *WellbeingResponse:
                return value.(*WellbeingResponse), true
        case WellbeingResponse:
                v, _ := value.(WellbeingResponse)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingResponse\n", t, value)
        }
        return nil, false
  }
  func StaffAssignmentPointer(value interface{}) (*StaffAssignment, bool) {
switch t := value.(type) {
        case *StaffAssignment:
                return value.(*StaffAssignment), true
        case StaffAssignment:
                v, _ := value.(StaffAssignment)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffAssignment\n", t, value)
        }
        return nil, false
  }
  func YearLevelTypePointer(value interface{}) (*YearLevelType, bool) {
switch t := value.(type) {
        case *YearLevelType:
                return value.(*YearLevelType), true
        case YearLevelType:
                v, _ := value.(YearLevelType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to YearLevelType\n", t, value)
        }
        return nil, false
  }
  func PNPCodeListTypePointer(value interface{}) (*PNPCodeListType, bool) {
switch t := value.(type) {
        case *PNPCodeListType:
                return value.(*PNPCodeListType), true
        case PNPCodeListType:
                v, _ := value.(PNPCodeListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PNPCodeListType\n", t, value)
        }
        return nil, false
  }
  func StaffSubjectTypePointer(value interface{}) (*StaffSubjectType, bool) {
switch t := value.(type) {
        case *StaffSubjectType:
                return value.(*StaffSubjectType), true
        case StaffSubjectType:
                v, _ := value.(StaffSubjectType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffSubjectType\n", t, value)
        }
        return nil, false
  }
  func StandardsSettingBodyTypePointer(value interface{}) (*StandardsSettingBodyType, bool) {
switch t := value.(type) {
        case *StandardsSettingBodyType:
                return value.(*StandardsSettingBodyType), true
        case StandardsSettingBodyType:
                v, _ := value.(StandardsSettingBodyType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StandardsSettingBodyType\n", t, value)
        }
        return nil, false
  }
  func GradeTypePointer(value interface{}) (*GradeType, bool) {
switch t := value.(type) {
        case *GradeType:
                return value.(*GradeType), true
        case GradeType:
                v, _ := value.(GradeType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to GradeType\n", t, value)
        }
        return nil, false
  }
  func SubjectAreaTypePointer(value interface{}) (*SubjectAreaType, bool) {
switch t := value.(type) {
        case *SubjectAreaType:
                return value.(*SubjectAreaType), true
        case SubjectAreaType:
                v, _ := value.(SubjectAreaType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SubjectAreaType\n", t, value)
        }
        return nil, false
  }
  func ExpenseAccountsTypePointer(value interface{}) (*ExpenseAccountsType, bool) {
switch t := value.(type) {
        case *ExpenseAccountsType:
                return value.(*ExpenseAccountsType), true
        case ExpenseAccountsType:
                v, _ := value.(ExpenseAccountsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ExpenseAccountsType\n", t, value)
        }
        return nil, false
  }
  func ScoreListTypePointer(value interface{}) (*ScoreListType, bool) {
switch t := value.(type) {
        case *ScoreListType:
                return value.(*ScoreListType), true
        case ScoreListType:
                v, _ := value.(ScoreListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScoreListType\n", t, value)
        }
        return nil, false
  }
  func FQItemTypePointer(value interface{}) (*FQItemType, bool) {
switch t := value.(type) {
        case *FQItemType:
                return value.(*FQItemType), true
        case FQItemType:
                v, _ := value.(FQItemType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FQItemType\n", t, value)
        }
        return nil, false
  }
  func TeacherCoverTypePointer(value interface{}) (*TeacherCoverType, bool) {
switch t := value.(type) {
        case *TeacherCoverType:
                return value.(*TeacherCoverType), true
        case TeacherCoverType:
                v, _ := value.(TeacherCoverType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeacherCoverType\n", t, value)
        }
        return nil, false
  }
  func ActivityTimeTypePointer(value interface{}) (*ActivityTimeType, bool) {
switch t := value.(type) {
        case *ActivityTimeType:
                return value.(*ActivityTimeType), true
        case ActivityTimeType:
                v, _ := value.(ActivityTimeType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ActivityTimeType\n", t, value)
        }
        return nil, false
  }
  func CatchmentStatusContainerTypePointer(value interface{}) (*CatchmentStatusContainerType, bool) {
switch t := value.(type) {
        case *CatchmentStatusContainerType:
                return value.(*CatchmentStatusContainerType), true
        case CatchmentStatusContainerType:
                v, _ := value.(CatchmentStatusContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CatchmentStatusContainerType\n", t, value)
        }
        return nil, false
  }
  func EssentialMaterialsTypePointer(value interface{}) (*EssentialMaterialsType, bool) {
switch t := value.(type) {
        case *EssentialMaterialsType:
                return value.(*EssentialMaterialsType), true
        case EssentialMaterialsType:
                v, _ := value.(EssentialMaterialsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EssentialMaterialsType\n", t, value)
        }
        return nil, false
  }
  func NAPTestPointer(value interface{}) (*NAPTest, bool) {
switch t := value.(type) {
        case *NAPTest:
                return value.(*NAPTest), true
        case NAPTest:
                v, _ := value.(NAPTest)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTest\n", t, value)
        }
        return nil, false
  }
  func PublishingPermissionTypePointer(value interface{}) (*PublishingPermissionType, bool) {
switch t := value.(type) {
        case *PublishingPermissionType:
                return value.(*PublishingPermissionType), true
        case PublishingPermissionType:
                v, _ := value.(PublishingPermissionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PublishingPermissionType\n", t, value)
        }
        return nil, false
  }
  func SystemRole_RoleListPointer(value interface{}) (*SystemRole_RoleList, bool) {
switch t := value.(type) {
        case *SystemRole_RoleList:
                return value.(*SystemRole_RoleList), true
        case SystemRole_RoleList:
                v, _ := value.(SystemRole_RoleList)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_RoleList\n", t, value)
        }
        return nil, false
  }
  func MarkValueInfoPointer(value interface{}) (*MarkValueInfo, bool) {
switch t := value.(type) {
        case *MarkValueInfo:
                return value.(*MarkValueInfo), true
        case MarkValueInfo:
                v, _ := value.(MarkValueInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MarkValueInfo\n", t, value)
        }
        return nil, false
  }
  func SystemRole_RoleScopePointer(value interface{}) (*SystemRole_RoleScope, bool) {
switch t := value.(type) {
        case *SystemRole_RoleScope:
                return value.(*SystemRole_RoleScope), true
        case SystemRole_RoleScope:
                v, _ := value.(SystemRole_RoleScope)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_RoleScope\n", t, value)
        }
        return nil, false
  }
  func IdentityAssertionsType_IdentityAssertionPointer(value interface{}) (*IdentityAssertionsType_IdentityAssertion, bool) {
switch t := value.(type) {
        case *IdentityAssertionsType_IdentityAssertion:
                return value.(*IdentityAssertionsType_IdentityAssertion), true
        case IdentityAssertionsType_IdentityAssertion:
                v, _ := value.(IdentityAssertionsType_IdentityAssertion)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to IdentityAssertionsType_IdentityAssertion\n", t, value)
        }
        return nil, false
  }
  func EvaluationTypePointer(value interface{}) (*EvaluationType, bool) {
switch t := value.(type) {
        case *EvaluationType:
                return value.(*EvaluationType), true
        case EvaluationType:
                v, _ := value.(EvaluationType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EvaluationType\n", t, value)
        }
        return nil, false
  }
  func LearningStandardTypePointer(value interface{}) (*LearningStandardType, bool) {
switch t := value.(type) {
        case *LearningStandardType:
                return value.(*LearningStandardType), true
        case LearningStandardType:
                v, _ := value.(LearningStandardType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningStandardType\n", t, value)
        }
        return nil, false
  }
  func SchoolProgramTypePointer(value interface{}) (*SchoolProgramType, bool) {
switch t := value.(type) {
        case *SchoolProgramType:
                return value.(*SchoolProgramType), true
        case SchoolProgramType:
                v, _ := value.(SchoolProgramType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolProgramType\n", t, value)
        }
        return nil, false
  }
  func LocationOfInstructionTypePointer(value interface{}) (*LocationOfInstructionType, bool) {
switch t := value.(type) {
        case *LocationOfInstructionType:
                return value.(*LocationOfInstructionType), true
        case LocationOfInstructionType:
                v, _ := value.(LocationOfInstructionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LocationOfInstructionType\n", t, value)
        }
        return nil, false
  }
  func FQReportingListTypePointer(value interface{}) (*FQReportingListType, bool) {
switch t := value.(type) {
        case *FQReportingListType:
                return value.(*FQReportingListType), true
        case FQReportingListType:
                v, _ := value.(FQReportingListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FQReportingListType\n", t, value)
        }
        return nil, false
  }
  func WellbeingDocumentTypePointer(value interface{}) (*WellbeingDocumentType, bool) {
switch t := value.(type) {
        case *WellbeingDocumentType:
                return value.(*WellbeingDocumentType), true
        case WellbeingDocumentType:
                v, _ := value.(WellbeingDocumentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingDocumentType\n", t, value)
        }
        return nil, false
  }
  func ContentDescriptionListTypePointer(value interface{}) (*ContentDescriptionListType, bool) {
switch t := value.(type) {
        case *ContentDescriptionListType:
                return value.(*ContentDescriptionListType), true
        case ContentDescriptionListType:
                v, _ := value.(ContentDescriptionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ContentDescriptionListType\n", t, value)
        }
        return nil, false
  }
  func ChargedLocationInfoPointer(value interface{}) (*ChargedLocationInfo, bool) {
switch t := value.(type) {
        case *ChargedLocationInfo:
                return value.(*ChargedLocationInfo), true
        case ChargedLocationInfo:
                v, _ := value.(ChargedLocationInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ChargedLocationInfo\n", t, value)
        }
        return nil, false
  }
  func TotalEnrollmentsTypePointer(value interface{}) (*TotalEnrollmentsType, bool) {
switch t := value.(type) {
        case *TotalEnrollmentsType:
                return value.(*TotalEnrollmentsType), true
        case TotalEnrollmentsType:
                v, _ := value.(TotalEnrollmentsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TotalEnrollmentsType\n", t, value)
        }
        return nil, false
  }
  func ScoreTypePointer(value interface{}) (*ScoreType, bool) {
switch t := value.(type) {
        case *ScoreType:
                return value.(*ScoreType), true
        case ScoreType:
                v, _ := value.(ScoreType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScoreType\n", t, value)
        }
        return nil, false
  }
  func StudentAttendanceCollectionReportingListTypePointer(value interface{}) (*StudentAttendanceCollectionReportingListType, bool) {
switch t := value.(type) {
        case *StudentAttendanceCollectionReportingListType:
                return value.(*StudentAttendanceCollectionReportingListType), true
        case StudentAttendanceCollectionReportingListType:
                v, _ := value.(StudentAttendanceCollectionReportingListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentAttendanceCollectionReportingListType\n", t, value)
        }
        return nil, false
  }
  func ComponentsTypePointer(value interface{}) (*ComponentsType, bool) {
switch t := value.(type) {
        case *ComponentsType:
                return value.(*ComponentsType), true
        case ComponentsType:
                v, _ := value.(ComponentsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ComponentsType\n", t, value)
        }
        return nil, false
  }
  func AggregateStatisticInfoPointer(value interface{}) (*AggregateStatisticInfo, bool) {
switch t := value.(type) {
        case *AggregateStatisticInfo:
                return value.(*AggregateStatisticInfo), true
        case AggregateStatisticInfo:
                v, _ := value.(AggregateStatisticInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AggregateStatisticInfo\n", t, value)
        }
        return nil, false
  }
  func LanguageListTypePointer(value interface{}) (*LanguageListType, bool) {
switch t := value.(type) {
        case *LanguageListType:
                return value.(*LanguageListType), true
        case LanguageListType:
                v, _ := value.(LanguageListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LanguageListType\n", t, value)
        }
        return nil, false
  }
  func StudentAttendanceCollectionPointer(value interface{}) (*StudentAttendanceCollection, bool) {
switch t := value.(type) {
        case *StudentAttendanceCollection:
                return value.(*StudentAttendanceCollection), true
        case StudentAttendanceCollection:
                v, _ := value.(StudentAttendanceCollection)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentAttendanceCollection\n", t, value)
        }
        return nil, false
  }
  func AddressCollectionStudentTypePointer(value interface{}) (*AddressCollectionStudentType, bool) {
switch t := value.(type) {
        case *AddressCollectionStudentType:
                return value.(*AddressCollectionStudentType), true
        case AddressCollectionStudentType:
                v, _ := value.(AddressCollectionStudentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressCollectionStudentType\n", t, value)
        }
        return nil, false
  }
  func PersonInvolvementListTypePointer(value interface{}) (*PersonInvolvementListType, bool) {
switch t := value.(type) {
        case *PersonInvolvementListType:
                return value.(*PersonInvolvementListType), true
        case PersonInvolvementListType:
                v, _ := value.(PersonInvolvementListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonInvolvementListType\n", t, value)
        }
        return nil, false
  }
  func PlanRequiredListTypePointer(value interface{}) (*PlanRequiredListType, bool) {
switch t := value.(type) {
        case *PlanRequiredListType:
                return value.(*PlanRequiredListType), true
        case PlanRequiredListType:
                v, _ := value.(PlanRequiredListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PlanRequiredListType\n", t, value)
        }
        return nil, false
  }
  func HoldInfoTypePointer(value interface{}) (*HoldInfoType, bool) {
switch t := value.(type) {
        case *HoldInfoType:
                return value.(*HoldInfoType), true
        case HoldInfoType:
                v, _ := value.(HoldInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to HoldInfoType\n", t, value)
        }
        return nil, false
  }
  func SessionInfoPointer(value interface{}) (*SessionInfo, bool) {
switch t := value.(type) {
        case *SessionInfo:
                return value.(*SessionInfo), true
        case SessionInfo:
                v, _ := value.(SessionInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SessionInfo\n", t, value)
        }
        return nil, false
  }
  func ExclusionRuleTypePointer(value interface{}) (*ExclusionRuleType, bool) {
switch t := value.(type) {
        case *ExclusionRuleType:
                return value.(*ExclusionRuleType), true
        case ExclusionRuleType:
                v, _ := value.(ExclusionRuleType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ExclusionRuleType\n", t, value)
        }
        return nil, false
  }
  func SystemRole_RoleScopeRefIdPointer(value interface{}) (*SystemRole_RoleScopeRefId, bool) {
switch t := value.(type) {
        case *SystemRole_RoleScopeRefId:
                return value.(*SystemRole_RoleScopeRefId), true
        case SystemRole_RoleScopeRefId:
                v, _ := value.(SystemRole_RoleScopeRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_RoleScopeRefId\n", t, value)
        }
        return nil, false
  }
  func NAPStudentResponseSetPointer(value interface{}) (*NAPStudentResponseSet, bool) {
switch t := value.(type) {
        case *NAPStudentResponseSet:
                return value.(*NAPStudentResponseSet), true
        case NAPStudentResponseSet:
                v, _ := value.(NAPStudentResponseSet)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPStudentResponseSet\n", t, value)
        }
        return nil, false
  }
  func SchoolFocusListTypePointer(value interface{}) (*SchoolFocusListType, bool) {
switch t := value.(type) {
        case *SchoolFocusListType:
                return value.(*SchoolFocusListType), true
        case SchoolFocusListType:
                v, _ := value.(SchoolFocusListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolFocusListType\n", t, value)
        }
        return nil, false
  }
  func Identity_SIF_RefIdPointer(value interface{}) (*Identity_SIF_RefId, bool) {
switch t := value.(type) {
        case *Identity_SIF_RefId:
                return value.(*Identity_SIF_RefId), true
        case Identity_SIF_RefId:
                v, _ := value.(Identity_SIF_RefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Identity_SIF_RefId\n", t, value)
        }
        return nil, false
  }
  func TimeTableScheduleCellListTypePointer(value interface{}) (*TimeTableScheduleCellListType, bool) {
switch t := value.(type) {
        case *TimeTableScheduleCellListType:
                return value.(*TimeTableScheduleCellListType), true
        case TimeTableScheduleCellListType:
                v, _ := value.(TimeTableScheduleCellListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableScheduleCellListType\n", t, value)
        }
        return nil, false
  }
  func ProgramFundingSourcesTypePointer(value interface{}) (*ProgramFundingSourcesType, bool) {
switch t := value.(type) {
        case *ProgramFundingSourcesType:
                return value.(*ProgramFundingSourcesType), true
        case ProgramFundingSourcesType:
                v, _ := value.(ProgramFundingSourcesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ProgramFundingSourcesType\n", t, value)
        }
        return nil, false
  }
  func LifeCycleType_ModificationHistoryPointer(value interface{}) (*LifeCycleType_ModificationHistory, bool) {
switch t := value.(type) {
        case *LifeCycleType_ModificationHistory:
                return value.(*LifeCycleType_ModificationHistory), true
        case LifeCycleType_ModificationHistory:
                v, _ := value.(LifeCycleType_ModificationHistory)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType_ModificationHistory\n", t, value)
        }
        return nil, false
  }
  func SIF_ExtendedElementsTypePointer(value interface{}) (*SIF_ExtendedElementsType, bool) {
switch t := value.(type) {
        case *SIF_ExtendedElementsType:
                return value.(*SIF_ExtendedElementsType), true
        case SIF_ExtendedElementsType:
                v, _ := value.(SIF_ExtendedElementsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SIF_ExtendedElementsType\n", t, value)
        }
        return nil, false
  }
  func TimeTableScheduleCellTypePointer(value interface{}) (*TimeTableScheduleCellType, bool) {
switch t := value.(type) {
        case *TimeTableScheduleCellType:
                return value.(*TimeTableScheduleCellType), true
        case TimeTableScheduleCellType:
                v, _ := value.(TimeTableScheduleCellType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableScheduleCellType\n", t, value)
        }
        return nil, false
  }
  func LifeCycleType_ModifiedPointer(value interface{}) (*LifeCycleType_Modified, bool) {
switch t := value.(type) {
        case *LifeCycleType_Modified:
                return value.(*LifeCycleType_Modified), true
        case LifeCycleType_Modified:
                v, _ := value.(LifeCycleType_Modified)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType_Modified\n", t, value)
        }
        return nil, false
  }
  func AlternateIdentificationCodeListTypePointer(value interface{}) (*AlternateIdentificationCodeListType, bool) {
switch t := value.(type) {
        case *AlternateIdentificationCodeListType:
                return value.(*AlternateIdentificationCodeListType), true
        case AlternateIdentificationCodeListType:
                v, _ := value.(AlternateIdentificationCodeListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AlternateIdentificationCodeListType\n", t, value)
        }
        return nil, false
  }
  func TeachingGroupPointer(value interface{}) (*TeachingGroup, bool) {
switch t := value.(type) {
        case *TeachingGroup:
                return value.(*TeachingGroup), true
        case TeachingGroup:
                v, _ := value.(TeachingGroup)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroup\n", t, value)
        }
        return nil, false
  }
  func AssignmentScoreTypePointer(value interface{}) (*AssignmentScoreType, bool) {
switch t := value.(type) {
        case *AssignmentScoreType:
                return value.(*AssignmentScoreType), true
        case AssignmentScoreType:
                v, _ := value.(AssignmentScoreType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AssignmentScoreType\n", t, value)
        }
        return nil, false
  }
  func LEAContactListTypePointer(value interface{}) (*LEAContactListType, bool) {
switch t := value.(type) {
        case *LEAContactListType:
                return value.(*LEAContactListType), true
        case LEAContactListType:
                v, _ := value.(LEAContactListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LEAContactListType\n", t, value)
        }
        return nil, false
  }
  func StatsCohortTypePointer(value interface{}) (*StatsCohortType, bool) {
switch t := value.(type) {
        case *StatsCohortType:
                return value.(*StatsCohortType), true
        case StatsCohortType:
                v, _ := value.(StatsCohortType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatsCohortType\n", t, value)
        }
        return nil, false
  }
  func TechnicalRequirementsTypePointer(value interface{}) (*TechnicalRequirementsType, bool) {
switch t := value.(type) {
        case *TechnicalRequirementsType:
                return value.(*TechnicalRequirementsType), true
        case TechnicalRequirementsType:
                v, _ := value.(TechnicalRequirementsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TechnicalRequirementsType\n", t, value)
        }
        return nil, false
  }
  func OtherIdListTypePointer(value interface{}) (*OtherIdListType, bool) {
switch t := value.(type) {
        case *OtherIdListType:
                return value.(*OtherIdListType), true
        case OtherIdListType:
                v, _ := value.(OtherIdListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherIdListType\n", t, value)
        }
        return nil, false
  }
  func StudentListTypePointer(value interface{}) (*StudentListType, bool) {
switch t := value.(type) {
        case *StudentListType:
                return value.(*StudentListType), true
        case StudentListType:
                v, _ := value.(StudentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentListType\n", t, value)
        }
        return nil, false
  }
  func LEAInfoPointer(value interface{}) (*LEAInfo, bool) {
switch t := value.(type) {
        case *LEAInfo:
                return value.(*LEAInfo), true
        case LEAInfo:
                v, _ := value.(LEAInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LEAInfo\n", t, value)
        }
        return nil, false
  }
  func AGReportingObjectResponseTypePointer(value interface{}) (*AGReportingObjectResponseType, bool) {
switch t := value.(type) {
        case *AGReportingObjectResponseType:
                return value.(*AGReportingObjectResponseType), true
        case AGReportingObjectResponseType:
                v, _ := value.(AGReportingObjectResponseType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGReportingObjectResponseType\n", t, value)
        }
        return nil, false
  }
  func ReferralSourceTypePointer(value interface{}) (*ReferralSourceType, bool) {
switch t := value.(type) {
        case *ReferralSourceType:
                return value.(*ReferralSourceType), true
        case ReferralSourceType:
                v, _ := value.(ReferralSourceType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ReferralSourceType\n", t, value)
        }
        return nil, false
  }
  func SchoolInfoPointer(value interface{}) (*SchoolInfo, bool) {
switch t := value.(type) {
        case *SchoolInfo:
                return value.(*SchoolInfo), true
        case SchoolInfo:
                v, _ := value.(SchoolInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolInfo\n", t, value)
        }
        return nil, false
  }
  func RecognitionListTypePointer(value interface{}) (*RecognitionListType, bool) {
switch t := value.(type) {
        case *RecognitionListType:
                return value.(*RecognitionListType), true
        case RecognitionListType:
                v, _ := value.(RecognitionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to RecognitionListType\n", t, value)
        }
        return nil, false
  }
  func TeachingGroupPeriodListTypePointer(value interface{}) (*TeachingGroupPeriodListType, bool) {
switch t := value.(type) {
        case *TeachingGroupPeriodListType:
                return value.(*TeachingGroupPeriodListType), true
        case TeachingGroupPeriodListType:
                v, _ := value.(TeachingGroupPeriodListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupPeriodListType\n", t, value)
        }
        return nil, false
  }
  func ResourceUsage_SIF_RefIdPointer(value interface{}) (*ResourceUsage_SIF_RefId, bool) {
switch t := value.(type) {
        case *ResourceUsage_SIF_RefId:
                return value.(*ResourceUsage_SIF_RefId), true
        case ResourceUsage_SIF_RefId:
                v, _ := value.(ResourceUsage_SIF_RefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage_SIF_RefId\n", t, value)
        }
        return nil, false
  }
  func ApprovalsTypePointer(value interface{}) (*ApprovalsType, bool) {
switch t := value.(type) {
        case *ApprovalsType:
                return value.(*ApprovalsType), true
        case ApprovalsType:
                v, _ := value.(ApprovalsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ApprovalsType\n", t, value)
        }
        return nil, false
  }
  func AbstractContentElementType_TextDataPointer(value interface{}) (*AbstractContentElementType_TextData, bool) {
switch t := value.(type) {
        case *AbstractContentElementType_TextData:
                return value.(*AbstractContentElementType_TextData), true
        case AbstractContentElementType_TextData:
                v, _ := value.(AbstractContentElementType_TextData)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentElementType_TextData\n", t, value)
        }
        return nil, false
  }
  func OtherCodeListType_OtherCodePointer(value interface{}) (*OtherCodeListType_OtherCode, bool) {
switch t := value.(type) {
        case *OtherCodeListType_OtherCode:
                return value.(*OtherCodeListType_OtherCode), true
        case OtherCodeListType_OtherCode:
                v, _ := value.(OtherCodeListType_OtherCode)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherCodeListType_OtherCode\n", t, value)
        }
        return nil, false
  }
  func PurchasingItemsTypePointer(value interface{}) (*PurchasingItemsType, bool) {
switch t := value.(type) {
        case *PurchasingItemsType:
                return value.(*PurchasingItemsType), true
        case PurchasingItemsType:
                v, _ := value.(PurchasingItemsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PurchasingItemsType\n", t, value)
        }
        return nil, false
  }
  func LibraryTransactionListTypePointer(value interface{}) (*LibraryTransactionListType, bool) {
switch t := value.(type) {
        case *LibraryTransactionListType:
                return value.(*LibraryTransactionListType), true
        case LibraryTransactionListType:
                v, _ := value.(LibraryTransactionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LibraryTransactionListType\n", t, value)
        }
        return nil, false
  }
  func PersonalisedPlanPointer(value interface{}) (*PersonalisedPlan, bool) {
switch t := value.(type) {
        case *PersonalisedPlan:
                return value.(*PersonalisedPlan), true
        case PersonalisedPlan:
                v, _ := value.(PersonalisedPlan)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonalisedPlan\n", t, value)
        }
        return nil, false
  }
  func TimeTablePeriodTypePointer(value interface{}) (*TimeTablePeriodType, bool) {
switch t := value.(type) {
        case *TimeTablePeriodType:
                return value.(*TimeTablePeriodType), true
        case TimeTablePeriodType:
                v, _ := value.(TimeTablePeriodType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTablePeriodType\n", t, value)
        }
        return nil, false
  }
  func AwardContainerTypePointer(value interface{}) (*AwardContainerType, bool) {
switch t := value.(type) {
        case *AwardContainerType:
                return value.(*AwardContainerType), true
        case AwardContainerType:
                v, _ := value.(AwardContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AwardContainerType\n", t, value)
        }
        return nil, false
  }
  func StaffActivityExtensionTypePointer(value interface{}) (*StaffActivityExtensionType, bool) {
switch t := value.(type) {
        case *StaffActivityExtensionType:
                return value.(*StaffActivityExtensionType), true
        case StaffActivityExtensionType:
                v, _ := value.(StaffActivityExtensionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffActivityExtensionType\n", t, value)
        }
        return nil, false
  }
  func AbstractContentElementType_BinaryDataPointer(value interface{}) (*AbstractContentElementType_BinaryData, bool) {
switch t := value.(type) {
        case *AbstractContentElementType_BinaryData:
                return value.(*AbstractContentElementType_BinaryData), true
        case AbstractContentElementType_BinaryData:
                v, _ := value.(AbstractContentElementType_BinaryData)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentElementType_BinaryData\n", t, value)
        }
        return nil, false
  }
  func CensusStaffTypePointer(value interface{}) (*CensusStaffType, bool) {
switch t := value.(type) {
        case *CensusStaffType:
                return value.(*CensusStaffType), true
        case CensusStaffType:
                v, _ := value.(CensusStaffType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusStaffType\n", t, value)
        }
        return nil, false
  }
  func DebtorPointer(value interface{}) (*Debtor, bool) {
switch t := value.(type) {
        case *Debtor:
                return value.(*Debtor), true
        case Debtor:
                v, _ := value.(Debtor)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Debtor\n", t, value)
        }
        return nil, false
  }
  func ResourceUsage_ResourceReportColumnListPointer(value interface{}) (*ResourceUsage_ResourceReportColumnList, bool) {
switch t := value.(type) {
        case *ResourceUsage_ResourceReportColumnList:
                return value.(*ResourceUsage_ResourceReportColumnList), true
        case ResourceUsage_ResourceReportColumnList:
                v, _ := value.(ResourceUsage_ResourceReportColumnList)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage_ResourceReportColumnList\n", t, value)
        }
        return nil, false
  }
  func OrganizationsTypePointer(value interface{}) (*OrganizationsType, bool) {
switch t := value.(type) {
        case *OrganizationsType:
                return value.(*OrganizationsType), true
        case OrganizationsType:
                v, _ := value.(OrganizationsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OrganizationsType\n", t, value)
        }
        return nil, false
  }
  func StudentSubjectChoiceListTypePointer(value interface{}) (*StudentSubjectChoiceListType, bool) {
switch t := value.(type) {
        case *StudentSubjectChoiceListType:
                return value.(*StudentSubjectChoiceListType), true
        case StudentSubjectChoiceListType:
                v, _ := value.(StudentSubjectChoiceListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSubjectChoiceListType\n", t, value)
        }
        return nil, false
  }
  func ActivityPointer(value interface{}) (*Activity, bool) {
switch t := value.(type) {
        case *Activity:
                return value.(*Activity), true
        case Activity:
                v, _ := value.(Activity)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Activity\n", t, value)
        }
        return nil, false
  }
  func StatisticalAreasTypePointer(value interface{}) (*StatisticalAreasType, bool) {
switch t := value.(type) {
        case *StatisticalAreasType:
                return value.(*StatisticalAreasType), true
        case StatisticalAreasType:
                v, _ := value.(StatisticalAreasType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatisticalAreasType\n", t, value)
        }
        return nil, false
  }
  func StudentGradePointer(value interface{}) (*StudentGrade, bool) {
switch t := value.(type) {
        case *StudentGrade:
                return value.(*StudentGrade), true
        case StudentGrade:
                v, _ := value.(StudentGrade)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentGrade\n", t, value)
        }
        return nil, false
  }
  func SIF_MetadataTypePointer(value interface{}) (*SIF_MetadataType, bool) {
switch t := value.(type) {
        case *SIF_MetadataType:
                return value.(*SIF_MetadataType), true
        case SIF_MetadataType:
                v, _ := value.(SIF_MetadataType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SIF_MetadataType\n", t, value)
        }
        return nil, false
  }
  func StudentSectionEnrollmentPointer(value interface{}) (*StudentSectionEnrollment, bool) {
switch t := value.(type) {
        case *StudentSectionEnrollment:
                return value.(*StudentSectionEnrollment), true
        case StudentSectionEnrollment:
                v, _ := value.(StudentSectionEnrollment)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSectionEnrollment\n", t, value)
        }
        return nil, false
  }
  func ResourceUsage_ResourceReportColumnPointer(value interface{}) (*ResourceUsage_ResourceReportColumn, bool) {
switch t := value.(type) {
        case *ResourceUsage_ResourceReportColumn:
                return value.(*ResourceUsage_ResourceReportColumn), true
        case ResourceUsage_ResourceReportColumn:
                v, _ := value.(ResourceUsage_ResourceReportColumn)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage_ResourceReportColumn\n", t, value)
        }
        return nil, false
  }
  func OtherIdTypePointer(value interface{}) (*OtherIdType, bool) {
switch t := value.(type) {
        case *OtherIdType:
                return value.(*OtherIdType), true
        case OtherIdType:
                v, _ := value.(OtherIdType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherIdType\n", t, value)
        }
        return nil, false
  }
  func SystemRolePointer(value interface{}) (*SystemRole, bool) {
switch t := value.(type) {
        case *SystemRole:
                return value.(*SystemRole), true
        case SystemRole:
                v, _ := value.(SystemRole)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole\n", t, value)
        }
        return nil, false
  }
  func PrincipalInfoTypePointer(value interface{}) (*PrincipalInfoType, bool) {
switch t := value.(type) {
        case *PrincipalInfoType:
                return value.(*PrincipalInfoType), true
        case PrincipalInfoType:
                v, _ := value.(PrincipalInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PrincipalInfoType\n", t, value)
        }
        return nil, false
  }
  func StatsCohortYearLevelTypePointer(value interface{}) (*StatsCohortYearLevelType, bool) {
switch t := value.(type) {
        case *StatsCohortYearLevelType:
                return value.(*StatsCohortYearLevelType), true
        case StatsCohortYearLevelType:
                v, _ := value.(StatsCohortYearLevelType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatsCohortYearLevelType\n", t, value)
        }
        return nil, false
  }
  func LocalCodeListTypePointer(value interface{}) (*LocalCodeListType, bool) {
switch t := value.(type) {
        case *LocalCodeListType:
                return value.(*LocalCodeListType), true
        case LocalCodeListType:
                v, _ := value.(LocalCodeListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LocalCodeListType\n", t, value)
        }
        return nil, false
  }
  func OtherNameTypePointer(value interface{}) (*OtherNameType, bool) {
switch t := value.(type) {
        case *OtherNameType:
                return value.(*OtherNameType), true
        case OtherNameType:
                v, _ := value.(OtherNameType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherNameType\n", t, value)
        }
        return nil, false
  }
  func ReligionTypePointer(value interface{}) (*ReligionType, bool) {
switch t := value.(type) {
        case *ReligionType:
                return value.(*ReligionType), true
        case ReligionType:
                v, _ := value.(ReligionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ReligionType\n", t, value)
        }
        return nil, false
  }
  func Invoice_InvoicedEntityPointer(value interface{}) (*Invoice_InvoicedEntity, bool) {
switch t := value.(type) {
        case *Invoice_InvoicedEntity:
                return value.(*Invoice_InvoicedEntity), true
        case Invoice_InvoicedEntity:
                v, _ := value.(Invoice_InvoicedEntity)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Invoice_InvoicedEntity\n", t, value)
        }
        return nil, false
  }
  func PrerequisitesTypePointer(value interface{}) (*PrerequisitesType, bool) {
switch t := value.(type) {
        case *PrerequisitesType:
                return value.(*PrerequisitesType), true
        case PrerequisitesType:
                v, _ := value.(PrerequisitesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PrerequisitesType\n", t, value)
        }
        return nil, false
  }
  func StimulusListTypePointer(value interface{}) (*StimulusListType, bool) {
switch t := value.(type) {
        case *StimulusListType:
                return value.(*StimulusListType), true
        case StimulusListType:
                v, _ := value.(StimulusListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StimulusListType\n", t, value)
        }
        return nil, false
  }
  func TimeTableScheduleTypePointer(value interface{}) (*TimeTableScheduleType, bool) {
switch t := value.(type) {
        case *TimeTableScheduleType:
                return value.(*TimeTableScheduleType), true
        case TimeTableScheduleType:
                v, _ := value.(TimeTableScheduleType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableScheduleType\n", t, value)
        }
        return nil, false
  }
  func FineInfoListTypePointer(value interface{}) (*FineInfoListType, bool) {
switch t := value.(type) {
        case *FineInfoListType:
                return value.(*FineInfoListType), true
        case FineInfoListType:
                v, _ := value.(FineInfoListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FineInfoListType\n", t, value)
        }
        return nil, false
  }
  func ContactTypePointer(value interface{}) (*ContactType, bool) {
switch t := value.(type) {
        case *ContactType:
                return value.(*ContactType), true
        case ContactType:
                v, _ := value.(ContactType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ContactType\n", t, value)
        }
        return nil, false
  }
  func SchoolInfo_OtherLEAPointer(value interface{}) (*SchoolInfo_OtherLEA, bool) {
switch t := value.(type) {
        case *SchoolInfo_OtherLEA:
                return value.(*SchoolInfo_OtherLEA), true
        case SchoolInfo_OtherLEA:
                v, _ := value.(SchoolInfo_OtherLEA)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolInfo_OtherLEA\n", t, value)
        }
        return nil, false
  }
  func ResourceUsagePointer(value interface{}) (*ResourceUsage, bool) {
switch t := value.(type) {
        case *ResourceUsage:
                return value.(*ResourceUsage), true
        case ResourceUsage:
                v, _ := value.(ResourceUsage)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage\n", t, value)
        }
        return nil, false
  }
  func TimeTablePeriodListTypePointer(value interface{}) (*TimeTablePeriodListType, bool) {
switch t := value.(type) {
        case *TimeTablePeriodListType:
                return value.(*TimeTablePeriodListType), true
        case TimeTablePeriodListType:
                v, _ := value.(TimeTablePeriodListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTablePeriodListType\n", t, value)
        }
        return nil, false
  }
  func LifeCycleTypePointer(value interface{}) (*LifeCycleType, bool) {
switch t := value.(type) {
        case *LifeCycleType:
                return value.(*LifeCycleType), true
        case LifeCycleType:
                v, _ := value.(LifeCycleType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType\n", t, value)
        }
        return nil, false
  }
  func FollowUpActionTypePointer(value interface{}) (*FollowUpActionType, bool) {
switch t := value.(type) {
        case *FollowUpActionType:
                return value.(*FollowUpActionType), true
        case FollowUpActionType:
                v, _ := value.(FollowUpActionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FollowUpActionType\n", t, value)
        }
        return nil, false
  }
  func AggregateCharacteristicInfoPointer(value interface{}) (*AggregateCharacteristicInfo, bool) {
switch t := value.(type) {
        case *AggregateCharacteristicInfo:
                return value.(*AggregateCharacteristicInfo), true
        case AggregateCharacteristicInfo:
                v, _ := value.(AggregateCharacteristicInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AggregateCharacteristicInfo\n", t, value)
        }
        return nil, false
  }
  func TimeElementType_SpanGapPointer(value interface{}) (*TimeElementType_SpanGap, bool) {
switch t := value.(type) {
        case *TimeElementType_SpanGap:
                return value.(*TimeElementType_SpanGap), true
        case TimeElementType_SpanGap:
                v, _ := value.(TimeElementType_SpanGap)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeElementType_SpanGap\n", t, value)
        }
        return nil, false
  }
  func StudentSchoolEnrollmentPointer(value interface{}) (*StudentSchoolEnrollment, bool) {
switch t := value.(type) {
        case *StudentSchoolEnrollment:
                return value.(*StudentSchoolEnrollment), true
        case StudentSchoolEnrollment:
                v, _ := value.(StudentSchoolEnrollment)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSchoolEnrollment\n", t, value)
        }
        return nil, false
  }
  func SymptomListTypePointer(value interface{}) (*SymptomListType, bool) {
switch t := value.(type) {
        case *SymptomListType:
                return value.(*SymptomListType), true
        case SymptomListType:
                v, _ := value.(SymptomListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SymptomListType\n", t, value)
        }
        return nil, false
  }
  func ProgramFundingSourceTypePointer(value interface{}) (*ProgramFundingSourceType, bool) {
switch t := value.(type) {
        case *ProgramFundingSourceType:
                return value.(*ProgramFundingSourceType), true
        case ProgramFundingSourceType:
                v, _ := value.(ProgramFundingSourceType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ProgramFundingSourceType\n", t, value)
        }
        return nil, false
  }
  func NAPTestItem2TypePointer(value interface{}) (*NAPTestItem2Type, bool) {
switch t := value.(type) {
        case *NAPTestItem2Type:
                return value.(*NAPTestItem2Type), true
        case NAPTestItem2Type:
                v, _ := value.(NAPTestItem2Type)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestItem2Type\n", t, value)
        }
        return nil, false
  }
  func SchoolCourseInfoOverrideTypePointer(value interface{}) (*SchoolCourseInfoOverrideType, bool) {
switch t := value.(type) {
        case *SchoolCourseInfoOverrideType:
                return value.(*SchoolCourseInfoOverrideType), true
        case SchoolCourseInfoOverrideType:
                v, _ := value.(SchoolCourseInfoOverrideType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolCourseInfoOverrideType\n", t, value)
        }
        return nil, false
  }
  func GradingScoreListTypePointer(value interface{}) (*GradingScoreListType, bool) {
switch t := value.(type) {
        case *GradingScoreListType:
                return value.(*GradingScoreListType), true
        case GradingScoreListType:
                v, _ := value.(GradingScoreListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to GradingScoreListType\n", t, value)
        }
        return nil, false
  }
  func RoomListTypePointer(value interface{}) (*RoomListType, bool) {
switch t := value.(type) {
        case *RoomListType:
                return value.(*RoomListType), true
        case RoomListType:
                v, _ := value.(RoomListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to RoomListType\n", t, value)
        }
        return nil, false
  }
  func EnglishProficiencyTypePointer(value interface{}) (*EnglishProficiencyType, bool) {
switch t := value.(type) {
        case *EnglishProficiencyType:
                return value.(*EnglishProficiencyType), true
        case EnglishProficiencyType:
                v, _ := value.(EnglishProficiencyType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EnglishProficiencyType\n", t, value)
        }
        return nil, false
  }
  func LanguageOfInstructionTypePointer(value interface{}) (*LanguageOfInstructionType, bool) {
switch t := value.(type) {
        case *LanguageOfInstructionType:
                return value.(*LanguageOfInstructionType), true
        case LanguageOfInstructionType:
                v, _ := value.(LanguageOfInstructionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LanguageOfInstructionType\n", t, value)
        }
        return nil, false
  }
  func WellbeingPlanTypePointer(value interface{}) (*WellbeingPlanType, bool) {
switch t := value.(type) {
        case *WellbeingPlanType:
                return value.(*WellbeingPlanType), true
        case WellbeingPlanType:
                v, _ := value.(WellbeingPlanType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingPlanType\n", t, value)
        }
        return nil, false
  }
  func ContactInfoTypePointer(value interface{}) (*ContactInfoType, bool) {
switch t := value.(type) {
        case *ContactInfoType:
                return value.(*ContactInfoType), true
        case ContactInfoType:
                v, _ := value.(ContactInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ContactInfoType\n", t, value)
        }
        return nil, false
  }
  func TimeTableDayTypePointer(value interface{}) (*TimeTableDayType, bool) {
switch t := value.(type) {
        case *TimeTableDayType:
                return value.(*TimeTableDayType), true
        case TimeTableDayType:
                v, _ := value.(TimeTableDayType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableDayType\n", t, value)
        }
        return nil, false
  }
  func LocationType_LocationRefIdPointer(value interface{}) (*LocationType_LocationRefId, bool) {
switch t := value.(type) {
        case *LocationType_LocationRefId:
                return value.(*LocationType_LocationRefId), true
        case LocationType_LocationRefId:
                v, _ := value.(LocationType_LocationRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LocationType_LocationRefId\n", t, value)
        }
        return nil, false
  }
  func IdentityPointer(value interface{}) (*Identity, bool) {
switch t := value.(type) {
        case *Identity:
                return value.(*Identity), true
        case Identity:
                v, _ := value.(Identity)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Identity\n", t, value)
        }
        return nil, false
  }
  func StatementCodesTypePointer(value interface{}) (*StatementCodesType, bool) {
switch t := value.(type) {
        case *StatementCodesType:
                return value.(*StatementCodesType), true
        case StatementCodesType:
                v, _ := value.(StatementCodesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatementCodesType\n", t, value)
        }
        return nil, false
  }
  func SIF_MetadataType_TimeElementsPointer(value interface{}) (*SIF_MetadataType_TimeElements, bool) {
switch t := value.(type) {
        case *SIF_MetadataType_TimeElements:
                return value.(*SIF_MetadataType_TimeElements), true
        case SIF_MetadataType_TimeElements:
                v, _ := value.(SIF_MetadataType_TimeElements)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SIF_MetadataType_TimeElements\n", t, value)
        }
        return nil, false
  }
  func ContactFlagsTypePointer(value interface{}) (*ContactFlagsType, bool) {
switch t := value.(type) {
        case *ContactFlagsType:
                return value.(*ContactFlagsType), true
        case ContactFlagsType:
                v, _ := value.(ContactFlagsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ContactFlagsType\n", t, value)
        }
        return nil, false
  }
  func SubstituteItemTypePointer(value interface{}) (*SubstituteItemType, bool) {
switch t := value.(type) {
        case *SubstituteItemType:
                return value.(*SubstituteItemType), true
        case SubstituteItemType:
                v, _ := value.(SubstituteItemType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SubstituteItemType\n", t, value)
        }
        return nil, false
  }
  func YearLevelsTypePointer(value interface{}) (*YearLevelsType, bool) {
switch t := value.(type) {
        case *YearLevelsType:
                return value.(*YearLevelsType), true
        case YearLevelsType:
                v, _ := value.(YearLevelsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to YearLevelsType\n", t, value)
        }
        return nil, false
  }
  func SystemRole_RolePointer(value interface{}) (*SystemRole_Role, bool) {
switch t := value.(type) {
        case *SystemRole_Role:
                return value.(*SystemRole_Role), true
        case SystemRole_Role:
                v, _ := value.(SystemRole_Role)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_Role\n", t, value)
        }
        return nil, false
  }
  func PersonInvolvementTypePointer(value interface{}) (*PersonInvolvementType, bool) {
switch t := value.(type) {
        case *PersonInvolvementType:
                return value.(*PersonInvolvementType), true
        case PersonInvolvementType:
                v, _ := value.(PersonInvolvementType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonInvolvementType\n", t, value)
        }
        return nil, false
  }
  func ExpenseAccountTypePointer(value interface{}) (*ExpenseAccountType, bool) {
switch t := value.(type) {
        case *ExpenseAccountType:
                return value.(*ExpenseAccountType), true
        case ExpenseAccountType:
                v, _ := value.(ExpenseAccountType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ExpenseAccountType\n", t, value)
        }
        return nil, false
  }
  func CalendarSummaryListTypePointer(value interface{}) (*CalendarSummaryListType, bool) {
switch t := value.(type) {
        case *CalendarSummaryListType:
                return value.(*CalendarSummaryListType), true
        case CalendarSummaryListType:
                v, _ := value.(CalendarSummaryListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CalendarSummaryListType\n", t, value)
        }
        return nil, false
  }
  func ResourceUsage_ResourceReportLineListPointer(value interface{}) (*ResourceUsage_ResourceReportLineList, bool) {
switch t := value.(type) {
        case *ResourceUsage_ResourceReportLineList:
                return value.(*ResourceUsage_ResourceReportLineList), true
        case ResourceUsage_ResourceReportLineList:
                v, _ := value.(ResourceUsage_ResourceReportLineList)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage_ResourceReportLineList\n", t, value)
        }
        return nil, false
  }
  func WellbeingEventLocationDetailsTypePointer(value interface{}) (*WellbeingEventLocationDetailsType, bool) {
switch t := value.(type) {
        case *WellbeingEventLocationDetailsType:
                return value.(*WellbeingEventLocationDetailsType), true
        case WellbeingEventLocationDetailsType:
                v, _ := value.(WellbeingEventLocationDetailsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingEventLocationDetailsType\n", t, value)
        }
        return nil, false
  }
  func TimeTableContainerPointer(value interface{}) (*TimeTableContainer, bool) {
switch t := value.(type) {
        case *TimeTableContainer:
                return value.(*TimeTableContainer), true
        case TimeTableContainer:
                v, _ := value.(TimeTableContainer)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableContainer\n", t, value)
        }
        return nil, false
  }
  func CountryList2TypePointer(value interface{}) (*CountryList2Type, bool) {
switch t := value.(type) {
        case *CountryList2Type:
                return value.(*CountryList2Type), true
        case CountryList2Type:
                v, _ := value.(CountryList2Type)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CountryList2Type\n", t, value)
        }
        return nil, false
  }
  func StudentSchoolEnrollment_HomeroomPointer(value interface{}) (*StudentSchoolEnrollment_Homeroom, bool) {
switch t := value.(type) {
        case *StudentSchoolEnrollment_Homeroom:
                return value.(*StudentSchoolEnrollment_Homeroom), true
        case StudentSchoolEnrollment_Homeroom:
                v, _ := value.(StudentSchoolEnrollment_Homeroom)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSchoolEnrollment_Homeroom\n", t, value)
        }
        return nil, false
  }
  func AssociatedObjectsType_AssociatedObjectPointer(value interface{}) (*AssociatedObjectsType_AssociatedObject, bool) {
switch t := value.(type) {
        case *AssociatedObjectsType_AssociatedObject:
                return value.(*AssociatedObjectsType_AssociatedObject), true
        case AssociatedObjectsType_AssociatedObject:
                v, _ := value.(AssociatedObjectsType_AssociatedObject)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AssociatedObjectsType_AssociatedObject\n", t, value)
        }
        return nil, false
  }

  // Matt's Append is my AddNew
  func (t *LifeCycleType_ModificationHistory) Append(value LifeCycleType_Modified) *LifeCycleType_ModificationHistory {
    
        if t == nil {
                t, _ = LifeCycleType_ModificationHistoryPointer(LifeCycleType_ModificationHistory{})
        }
        if t.Modified == nil {
                t.Modified = make([]LifeCycleType_Modified, 0)
        }
        t.Modified = append(t.Modified, value)
        return t
}

func (t *LifeCycleType_ModificationHistory) AddNew() *LifeCycleType_ModificationHistory {
        if t == nil {
                t, _ = LifeCycleType_ModificationHistoryPointer(LifeCycleType_ModificationHistory{})
        }
        if t.Modified == nil {
                t.Modified = make([]LifeCycleType_Modified, 0)
        }
        t.Modified = append(t.Modified, LifeCycleType_Modified{})
        return t
}

// Disagree
func (t *LifeCycleType_ModificationHistory) Last() *LifeCycleType_Modified {
  if t.Modified == nil {
    t = t.AddNew()
    }
        return &(t.Modified[len(t.Modified)-1])
}


  // Matt's Append is my AddNew
  func (t *WellbeingEventCategoryListType) Append(value WellbeingEventCategoryType) *WellbeingEventCategoryListType {
    
        if t == nil {
                t, _ = WellbeingEventCategoryListTypePointer(WellbeingEventCategoryListType{})
        }
        if t.WellbeingEventCategory == nil {
                t.WellbeingEventCategory = make([]WellbeingEventCategoryType, 0)
        }
        t.WellbeingEventCategory = append(t.WellbeingEventCategory, value)
        return t
}

func (t *WellbeingEventCategoryListType) AddNew() *WellbeingEventCategoryListType {
        if t == nil {
                t, _ = WellbeingEventCategoryListTypePointer(WellbeingEventCategoryListType{})
        }
        if t.WellbeingEventCategory == nil {
                t.WellbeingEventCategory = make([]WellbeingEventCategoryType, 0)
        }
        t.WellbeingEventCategory = append(t.WellbeingEventCategory, WellbeingEventCategoryType{})
        return t
}

// Disagree
func (t *WellbeingEventCategoryListType) Last() *WellbeingEventCategoryType {
  if t.WellbeingEventCategory == nil {
    t = t.AddNew()
    }
        return &(t.WellbeingEventCategory[len(t.WellbeingEventCategory)-1])
}


  // Matt's Append is my AddNew
  func (t *ExclusionRulesType) Append(value ExclusionRuleType) *ExclusionRulesType {
    
        if t == nil {
                t, _ = ExclusionRulesTypePointer(ExclusionRulesType{})
        }
        if t.ExclusionRule == nil {
                t.ExclusionRule = make([]ExclusionRuleType, 0)
        }
        t.ExclusionRule = append(t.ExclusionRule, value)
        return t
}

func (t *ExclusionRulesType) AddNew() *ExclusionRulesType {
        if t == nil {
                t, _ = ExclusionRulesTypePointer(ExclusionRulesType{})
        }
        if t.ExclusionRule == nil {
                t.ExclusionRule = make([]ExclusionRuleType, 0)
        }
        t.ExclusionRule = append(t.ExclusionRule, ExclusionRuleType{})
        return t
}

// Disagree
func (t *ExclusionRulesType) Last() *ExclusionRuleType {
  if t.ExclusionRule == nil {
    t = t.AddNew()
    }
        return &(t.ExclusionRule[len(t.ExclusionRule)-1])
}


  // Matt's Append is my AddNew
  func (t *SIF_ExtendedElementsType) Append(value SIF_ExtendedElementsType_SIF_ExtendedElement) *SIF_ExtendedElementsType {
    
        if t == nil {
                t, _ = SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{})
        }
        if t.SIF_ExtendedElement == nil {
                t.SIF_ExtendedElement = make([]SIF_ExtendedElementsType_SIF_ExtendedElement, 0)
        }
        t.SIF_ExtendedElement = append(t.SIF_ExtendedElement, value)
        return t
}

func (t *SIF_ExtendedElementsType) AddNew() *SIF_ExtendedElementsType {
        if t == nil {
                t, _ = SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{})
        }
        if t.SIF_ExtendedElement == nil {
                t.SIF_ExtendedElement = make([]SIF_ExtendedElementsType_SIF_ExtendedElement, 0)
        }
        t.SIF_ExtendedElement = append(t.SIF_ExtendedElement, SIF_ExtendedElementsType_SIF_ExtendedElement{})
        return t
}

// Disagree
func (t *SIF_ExtendedElementsType) Last() *SIF_ExtendedElementsType_SIF_ExtendedElement {
  if t.SIF_ExtendedElement == nil {
    t = t.AddNew()
    }
        return &(t.SIF_ExtendedElement[len(t.SIF_ExtendedElement)-1])
}


  // Matt's Append is my AddNew
  func (t *EvaluationsType) Append(value EvaluationType) *EvaluationsType {
    
        if t == nil {
                t, _ = EvaluationsTypePointer(EvaluationsType{})
        }
        if t.Evaluation == nil {
                t.Evaluation = make([]EvaluationType, 0)
        }
        t.Evaluation = append(t.Evaluation, value)
        return t
}

func (t *EvaluationsType) AddNew() *EvaluationsType {
        if t == nil {
                t, _ = EvaluationsTypePointer(EvaluationsType{})
        }
        if t.Evaluation == nil {
                t.Evaluation = make([]EvaluationType, 0)
        }
        t.Evaluation = append(t.Evaluation, EvaluationType{})
        return t
}

// Disagree
func (t *EvaluationsType) Last() *EvaluationType {
  if t.Evaluation == nil {
    t = t.AddNew()
    }
        return &(t.Evaluation[len(t.Evaluation)-1])
}


  // Matt's Append is my AddNew
  func (t *CensusStaffListType) Append(value CensusStaffType) *CensusStaffListType {
    
        if t == nil {
                t, _ = CensusStaffListTypePointer(CensusStaffListType{})
        }
        if t.CensusStaff == nil {
                t.CensusStaff = make([]CensusStaffType, 0)
        }
        t.CensusStaff = append(t.CensusStaff, value)
        return t
}

func (t *CensusStaffListType) AddNew() *CensusStaffListType {
        if t == nil {
                t, _ = CensusStaffListTypePointer(CensusStaffListType{})
        }
        if t.CensusStaff == nil {
                t.CensusStaff = make([]CensusStaffType, 0)
        }
        t.CensusStaff = append(t.CensusStaff, CensusStaffType{})
        return t
}

// Disagree
func (t *CensusStaffListType) Last() *CensusStaffType {
  if t.CensusStaff == nil {
    t = t.AddNew()
    }
        return &(t.CensusStaff[len(t.CensusStaff)-1])
}


  // Matt's Append is my AddNew
  func (t *StudentGroupListType) Append(value StudentGroupType) *StudentGroupListType {
    
        if t == nil {
                t, _ = StudentGroupListTypePointer(StudentGroupListType{})
        }
        if t.StudentGroup == nil {
                t.StudentGroup = make([]StudentGroupType, 0)
        }
        t.StudentGroup = append(t.StudentGroup, value)
        return t
}

func (t *StudentGroupListType) AddNew() *StudentGroupListType {
        if t == nil {
                t, _ = StudentGroupListTypePointer(StudentGroupListType{})
        }
        if t.StudentGroup == nil {
                t.StudentGroup = make([]StudentGroupType, 0)
        }
        t.StudentGroup = append(t.StudentGroup, StudentGroupType{})
        return t
}

// Disagree
func (t *StudentGroupListType) Last() *StudentGroupType {
  if t.StudentGroup == nil {
    t = t.AddNew()
    }
        return &(t.StudentGroup[len(t.StudentGroup)-1])
}


  // Matt's Append is my AddNew
  func (t *LResourcesType) Append(value ResourcesType) *LResourcesType {
    
        if t == nil {
                t, _ = LResourcesTypePointer(LResourcesType{})
        }
        if t.LearningResourceRefId == nil {
                t.LearningResourceRefId = make([]ResourcesType, 0)
        }
        t.LearningResourceRefId = append(t.LearningResourceRefId, value)
        return t
}

func (t *LResourcesType) AddNew() *LResourcesType {
        if t == nil {
                t, _ = LResourcesTypePointer(LResourcesType{})
        }
        if t.LearningResourceRefId == nil {
                t.LearningResourceRefId = make([]ResourcesType, 0)
        }
        t.LearningResourceRefId = append(t.LearningResourceRefId, ResourcesType{})
        return t
}

// Disagree
func (t *LResourcesType) Last() *ResourcesType {
  if t.LearningResourceRefId == nil {
    t = t.AddNew()
    }
        return &(t.LearningResourceRefId[len(t.LearningResourceRefId)-1])
}


  // Matt's Append is my AddNew
  func (t *ProgramFundingSourcesType) Append(value ProgramFundingSourceType) *ProgramFundingSourcesType {
    
        if t == nil {
                t, _ = ProgramFundingSourcesTypePointer(ProgramFundingSourcesType{})
        }
        if t.ProgramFundingSource == nil {
                t.ProgramFundingSource = make([]ProgramFundingSourceType, 0)
        }
        t.ProgramFundingSource = append(t.ProgramFundingSource, value)
        return t
}

func (t *ProgramFundingSourcesType) AddNew() *ProgramFundingSourcesType {
        if t == nil {
                t, _ = ProgramFundingSourcesTypePointer(ProgramFundingSourcesType{})
        }
        if t.ProgramFundingSource == nil {
                t.ProgramFundingSource = make([]ProgramFundingSourceType, 0)
        }
        t.ProgramFundingSource = append(t.ProgramFundingSource, ProgramFundingSourceType{})
        return t
}

// Disagree
func (t *ProgramFundingSourcesType) Last() *ProgramFundingSourceType {
  if t.ProgramFundingSource == nil {
    t = t.AddNew()
    }
        return &(t.ProgramFundingSource[len(t.ProgramFundingSource)-1])
}


  // Matt's Append is my AddNew
  func (t *TimeTableScheduleCellListType) Append(value TimeTableScheduleCellType) *TimeTableScheduleCellListType {
    
        if t == nil {
                t, _ = TimeTableScheduleCellListTypePointer(TimeTableScheduleCellListType{})
        }
        if t.TimeTableScheduleCell == nil {
                t.TimeTableScheduleCell = make([]TimeTableScheduleCellType, 0)
        }
        t.TimeTableScheduleCell = append(t.TimeTableScheduleCell, value)
        return t
}

func (t *TimeTableScheduleCellListType) AddNew() *TimeTableScheduleCellListType {
        if t == nil {
                t, _ = TimeTableScheduleCellListTypePointer(TimeTableScheduleCellListType{})
        }
        if t.TimeTableScheduleCell == nil {
                t.TimeTableScheduleCell = make([]TimeTableScheduleCellType, 0)
        }
        t.TimeTableScheduleCell = append(t.TimeTableScheduleCell, TimeTableScheduleCellType{})
        return t
}

// Disagree
func (t *TimeTableScheduleCellListType) Last() *TimeTableScheduleCellType {
  if t.TimeTableScheduleCell == nil {
    t = t.AddNew()
    }
        return &(t.TimeTableScheduleCell[len(t.TimeTableScheduleCell)-1])
}


  // Matt's Append is my AddNew
  func (t *TestDisruptionListType) Append(value TestDisruptionType) *TestDisruptionListType {
    
        if t == nil {
                t, _ = TestDisruptionListTypePointer(TestDisruptionListType{})
        }
        if t.TestDisruption == nil {
                t.TestDisruption = make([]TestDisruptionType, 0)
        }
        t.TestDisruption = append(t.TestDisruption, value)
        return t
}

func (t *TestDisruptionListType) AddNew() *TestDisruptionListType {
        if t == nil {
                t, _ = TestDisruptionListTypePointer(TestDisruptionListType{})
        }
        if t.TestDisruption == nil {
                t.TestDisruption = make([]TestDisruptionType, 0)
        }
        t.TestDisruption = append(t.TestDisruption, TestDisruptionType{})
        return t
}

// Disagree
func (t *TestDisruptionListType) Last() *TestDisruptionType {
  if t.TestDisruption == nil {
    t = t.AddNew()
    }
        return &(t.TestDisruption[len(t.TestDisruption)-1])
}


  // Matt's Append is my AddNew
  func (t *TimeTableDayListType) Append(value TimeTableDayType) *TimeTableDayListType {
    
        if t == nil {
                t, _ = TimeTableDayListTypePointer(TimeTableDayListType{})
        }
        if t.TimeTableDay == nil {
                t.TimeTableDay = make([]TimeTableDayType, 0)
        }
        t.TimeTableDay = append(t.TimeTableDay, value)
        return t
}

func (t *TimeTableDayListType) AddNew() *TimeTableDayListType {
        if t == nil {
                t, _ = TimeTableDayListTypePointer(TimeTableDayListType{})
        }
        if t.TimeTableDay == nil {
                t.TimeTableDay = make([]TimeTableDayType, 0)
        }
        t.TimeTableDay = append(t.TimeTableDay, TimeTableDayType{})
        return t
}

// Disagree
func (t *TimeTableDayListType) Last() *TimeTableDayType {
  if t.TimeTableDay == nil {
    t = t.AddNew()
    }
        return &(t.TimeTableDay[len(t.TimeTableDay)-1])
}


  // Matt's Append is my AddNew
  func (t *SchoolFocusListType) Append(value AUCodeSetsSchoolFocusCodeType) *SchoolFocusListType {
    
        if t == nil {
                t, _ = SchoolFocusListTypePointer(SchoolFocusListType{})
        }
        if t.SchoolFocus == nil {
                t.SchoolFocus = make([]AUCodeSetsSchoolFocusCodeType, 0)
        }
        t.SchoolFocus = append(t.SchoolFocus, value)
        return t
}

func (t *SchoolFocusListType) AddNew() *SchoolFocusListType {
        if t == nil {
                t, _ = SchoolFocusListTypePointer(SchoolFocusListType{})
        }
        if t.SchoolFocus == nil {
                t.SchoolFocus = make([]AUCodeSetsSchoolFocusCodeType, 0)
        }
        t.SchoolFocus = append(t.SchoolFocus, "")
        return t
}

// Disagree
func (t *SchoolFocusListType) Last() *AUCodeSetsSchoolFocusCodeType {
  if t.SchoolFocus == nil {
    t = t.AddNew()
    }
        return &(t.SchoolFocus[len(t.SchoolFocus)-1])
}

      func (t *SchoolFocusListType) AppendString(value interface{}) *SchoolFocusListType {
        return t.Append((AUCodeSetsSchoolFocusCodeType)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *SoftwareRequirementListType) Append(value SoftwareRequirementType) *SoftwareRequirementListType {
    
        if t == nil {
                t, _ = SoftwareRequirementListTypePointer(SoftwareRequirementListType{})
        }
        if t.SoftwareRequirement == nil {
                t.SoftwareRequirement = make([]SoftwareRequirementType, 0)
        }
        t.SoftwareRequirement = append(t.SoftwareRequirement, value)
        return t
}

func (t *SoftwareRequirementListType) AddNew() *SoftwareRequirementListType {
        if t == nil {
                t, _ = SoftwareRequirementListTypePointer(SoftwareRequirementListType{})
        }
        if t.SoftwareRequirement == nil {
                t.SoftwareRequirement = make([]SoftwareRequirementType, 0)
        }
        t.SoftwareRequirement = append(t.SoftwareRequirement, SoftwareRequirementType{})
        return t
}

// Disagree
func (t *SoftwareRequirementListType) Last() *SoftwareRequirementType {
  if t.SoftwareRequirement == nil {
    t = t.AddNew()
    }
        return &(t.SoftwareRequirement[len(t.SoftwareRequirement)-1])
}


  // Matt's Append is my AddNew
  func (t *HouseholdContactInfoListType) Append(value HouseholdContactInfoType) *HouseholdContactInfoListType {
    
        if t == nil {
                t, _ = HouseholdContactInfoListTypePointer(HouseholdContactInfoListType{})
        }
        if t.HouseholdContactInfo == nil {
                t.HouseholdContactInfo = make([]HouseholdContactInfoType, 0)
        }
        t.HouseholdContactInfo = append(t.HouseholdContactInfo, value)
        return t
}

func (t *HouseholdContactInfoListType) AddNew() *HouseholdContactInfoListType {
        if t == nil {
                t, _ = HouseholdContactInfoListTypePointer(HouseholdContactInfoListType{})
        }
        if t.HouseholdContactInfo == nil {
                t.HouseholdContactInfo = make([]HouseholdContactInfoType, 0)
        }
        t.HouseholdContactInfo = append(t.HouseholdContactInfo, HouseholdContactInfoType{})
        return t
}

// Disagree
func (t *HouseholdContactInfoListType) Last() *HouseholdContactInfoType {
  if t.HouseholdContactInfo == nil {
    t = t.AddNew()
    }
        return &(t.HouseholdContactInfo[len(t.HouseholdContactInfo)-1])
}


  // Matt's Append is my AddNew
  func (t *PaymentReceiptLineListType) Append(value PaymentReceiptLineType) *PaymentReceiptLineListType {
    
        if t == nil {
                t, _ = PaymentReceiptLineListTypePointer(PaymentReceiptLineListType{})
        }
        if t.PaymentReceiptLine == nil {
                t.PaymentReceiptLine = make([]PaymentReceiptLineType, 0)
        }
        t.PaymentReceiptLine = append(t.PaymentReceiptLine, value)
        return t
}

func (t *PaymentReceiptLineListType) AddNew() *PaymentReceiptLineListType {
        if t == nil {
                t, _ = PaymentReceiptLineListTypePointer(PaymentReceiptLineListType{})
        }
        if t.PaymentReceiptLine == nil {
                t.PaymentReceiptLine = make([]PaymentReceiptLineType, 0)
        }
        t.PaymentReceiptLine = append(t.PaymentReceiptLine, PaymentReceiptLineType{})
        return t
}

// Disagree
func (t *PaymentReceiptLineListType) Last() *PaymentReceiptLineType {
  if t.PaymentReceiptLine == nil {
    t = t.AddNew()
    }
        return &(t.PaymentReceiptLine[len(t.PaymentReceiptLine)-1])
}


  // Matt's Append is my AddNew
  func (t *LifeCycleType_Creators) Append(value LifeCycleType_Creator) *LifeCycleType_Creators {
    
        if t == nil {
                t, _ = LifeCycleType_CreatorsPointer(LifeCycleType_Creators{})
        }
        if t.Creator == nil {
                t.Creator = make([]LifeCycleType_Creator, 0)
        }
        t.Creator = append(t.Creator, value)
        return t
}

func (t *LifeCycleType_Creators) AddNew() *LifeCycleType_Creators {
        if t == nil {
                t, _ = LifeCycleType_CreatorsPointer(LifeCycleType_Creators{})
        }
        if t.Creator == nil {
                t.Creator = make([]LifeCycleType_Creator, 0)
        }
        t.Creator = append(t.Creator, LifeCycleType_Creator{})
        return t
}

// Disagree
func (t *LifeCycleType_Creators) Last() *LifeCycleType_Creator {
  if t.Creator == nil {
    t = t.AddNew()
    }
        return &(t.Creator[len(t.Creator)-1])
}


  // Matt's Append is my AddNew
  func (t *StaffSubjectListType) Append(value StaffSubjectType) *StaffSubjectListType {
    
        if t == nil {
                t, _ = StaffSubjectListTypePointer(StaffSubjectListType{})
        }
        if t.StaffSubject == nil {
                t.StaffSubject = make([]StaffSubjectType, 0)
        }
        t.StaffSubject = append(t.StaffSubject, value)
        return t
}

func (t *StaffSubjectListType) AddNew() *StaffSubjectListType {
        if t == nil {
                t, _ = StaffSubjectListTypePointer(StaffSubjectListType{})
        }
        if t.StaffSubject == nil {
                t.StaffSubject = make([]StaffSubjectType, 0)
        }
        t.StaffSubject = append(t.StaffSubject, StaffSubjectType{})
        return t
}

// Disagree
func (t *StaffSubjectListType) Last() *StaffSubjectType {
  if t.StaffSubject == nil {
    t = t.AddNew()
    }
        return &(t.StaffSubject[len(t.StaffSubject)-1])
}


  // Matt's Append is my AddNew
  func (t *SubstituteItemListType) Append(value SubstituteItemType) *SubstituteItemListType {
    
        if t == nil {
                t, _ = SubstituteItemListTypePointer(SubstituteItemListType{})
        }
        if t.SubstituteItem == nil {
                t.SubstituteItem = make([]SubstituteItemType, 0)
        }
        t.SubstituteItem = append(t.SubstituteItem, value)
        return t
}

func (t *SubstituteItemListType) AddNew() *SubstituteItemListType {
        if t == nil {
                t, _ = SubstituteItemListTypePointer(SubstituteItemListType{})
        }
        if t.SubstituteItem == nil {
                t.SubstituteItem = make([]SubstituteItemType, 0)
        }
        t.SubstituteItem = append(t.SubstituteItem, SubstituteItemType{})
        return t
}

// Disagree
func (t *SubstituteItemListType) Last() *SubstituteItemType {
  if t.SubstituteItem == nil {
    t = t.AddNew()
    }
        return &(t.SubstituteItem[len(t.SubstituteItem)-1])
}


  // Matt's Append is my AddNew
  func (t *PlanRequiredListType) Append(value WellbeingPlanType) *PlanRequiredListType {
    
        if t == nil {
                t, _ = PlanRequiredListTypePointer(PlanRequiredListType{})
        }
        if t.Plan == nil {
                t.Plan = make([]WellbeingPlanType, 0)
        }
        t.Plan = append(t.Plan, value)
        return t
}

func (t *PlanRequiredListType) AddNew() *PlanRequiredListType {
        if t == nil {
                t, _ = PlanRequiredListTypePointer(PlanRequiredListType{})
        }
        if t.Plan == nil {
                t.Plan = make([]WellbeingPlanType, 0)
        }
        t.Plan = append(t.Plan, WellbeingPlanType{})
        return t
}

// Disagree
func (t *PlanRequiredListType) Last() *WellbeingPlanType {
  if t.Plan == nil {
    t = t.AddNew()
    }
        return &(t.Plan[len(t.Plan)-1])
}


  // Matt's Append is my AddNew
  func (t *PersonInvolvementListType) Append(value PersonInvolvementType) *PersonInvolvementListType {
    
        if t == nil {
                t, _ = PersonInvolvementListTypePointer(PersonInvolvementListType{})
        }
        if t.PersonInvolvement == nil {
                t.PersonInvolvement = make([]PersonInvolvementType, 0)
        }
        t.PersonInvolvement = append(t.PersonInvolvement, value)
        return t
}

func (t *PersonInvolvementListType) AddNew() *PersonInvolvementListType {
        if t == nil {
                t, _ = PersonInvolvementListTypePointer(PersonInvolvementListType{})
        }
        if t.PersonInvolvement == nil {
                t.PersonInvolvement = make([]PersonInvolvementType, 0)
        }
        t.PersonInvolvement = append(t.PersonInvolvement, PersonInvolvementType{})
        return t
}

// Disagree
func (t *PersonInvolvementListType) Last() *PersonInvolvementType {
  if t.PersonInvolvement == nil {
    t = t.AddNew()
    }
        return &(t.PersonInvolvement[len(t.PersonInvolvement)-1])
}


  // Matt's Append is my AddNew
  func (t *ScoreDescriptionListType) Append(value ScoreDescriptionType) *ScoreDescriptionListType {
    
        if t == nil {
                t, _ = ScoreDescriptionListTypePointer(ScoreDescriptionListType{})
        }
        if t.ScoreDescription == nil {
                t.ScoreDescription = make([]ScoreDescriptionType, 0)
        }
        t.ScoreDescription = append(t.ScoreDescription, value)
        return t
}

func (t *ScoreDescriptionListType) AddNew() *ScoreDescriptionListType {
        if t == nil {
                t, _ = ScoreDescriptionListTypePointer(ScoreDescriptionListType{})
        }
        if t.ScoreDescription == nil {
                t.ScoreDescription = make([]ScoreDescriptionType, 0)
        }
        t.ScoreDescription = append(t.ScoreDescription, ScoreDescriptionType{})
        return t
}

// Disagree
func (t *ScoreDescriptionListType) Last() *ScoreDescriptionType {
  if t.ScoreDescription == nil {
    t = t.AddNew()
    }
        return &(t.ScoreDescription[len(t.ScoreDescription)-1])
}


  // Matt's Append is my AddNew
  func (t *ReligiousEventListType) Append(value ReligiousEventType) *ReligiousEventListType {
    
        if t == nil {
                t, _ = ReligiousEventListTypePointer(ReligiousEventListType{})
        }
        if t.ReligiousEvent == nil {
                t.ReligiousEvent = make([]ReligiousEventType, 0)
        }
        t.ReligiousEvent = append(t.ReligiousEvent, value)
        return t
}

func (t *ReligiousEventListType) AddNew() *ReligiousEventListType {
        if t == nil {
                t, _ = ReligiousEventListTypePointer(ReligiousEventListType{})
        }
        if t.ReligiousEvent == nil {
                t.ReligiousEvent = make([]ReligiousEventType, 0)
        }
        t.ReligiousEvent = append(t.ReligiousEvent, ReligiousEventType{})
        return t
}

// Disagree
func (t *ReligiousEventListType) Last() *ReligiousEventType {
  if t.ReligiousEvent == nil {
    t = t.AddNew()
    }
        return &(t.ReligiousEvent[len(t.ReligiousEvent)-1])
}


  // Matt's Append is my AddNew
  func (t *ComponentsType) Append(value ComponentType) *ComponentsType {
    
        if t == nil {
                t, _ = ComponentsTypePointer(ComponentsType{})
        }
        if t.Component == nil {
                t.Component = make([]ComponentType, 0)
        }
        t.Component = append(t.Component, value)
        return t
}

func (t *ComponentsType) AddNew() *ComponentsType {
        if t == nil {
                t, _ = ComponentsTypePointer(ComponentsType{})
        }
        if t.Component == nil {
                t.Component = make([]ComponentType, 0)
        }
        t.Component = append(t.Component, ComponentType{})
        return t
}

// Disagree
func (t *ComponentsType) Last() *ComponentType {
  if t.Component == nil {
    t = t.AddNew()
    }
        return &(t.Component[len(t.Component)-1])
}


  // Matt's Append is my AddNew
  func (t *LanguageListType) Append(value LanguageBaseType) *LanguageListType {
    
        if t == nil {
                t, _ = LanguageListTypePointer(LanguageListType{})
        }
        if t.Language == nil {
                t.Language = make([]LanguageBaseType, 0)
        }
        t.Language = append(t.Language, value)
        return t
}

func (t *LanguageListType) AddNew() *LanguageListType {
        if t == nil {
                t, _ = LanguageListTypePointer(LanguageListType{})
        }
        if t.Language == nil {
                t.Language = make([]LanguageBaseType, 0)
        }
        t.Language = append(t.Language, LanguageBaseType{})
        return t
}

// Disagree
func (t *LanguageListType) Last() *LanguageBaseType {
  if t.Language == nil {
    t = t.AddNew()
    }
        return &(t.Language[len(t.Language)-1])
}


  // Matt's Append is my AddNew
  func (t *FinancialAccountRefIdListType) Append(value string) *FinancialAccountRefIdListType {
    
        if t == nil {
                t, _ = FinancialAccountRefIdListTypePointer(FinancialAccountRefIdListType{})
        }
        if t.FinancialAccountRefId == nil {
                t.FinancialAccountRefId = make([]string, 0)
        }
        t.FinancialAccountRefId = append(t.FinancialAccountRefId, value)
        return t
}

func (t *FinancialAccountRefIdListType) AddNew() *FinancialAccountRefIdListType {
        if t == nil {
                t, _ = FinancialAccountRefIdListTypePointer(FinancialAccountRefIdListType{})
        }
        if t.FinancialAccountRefId == nil {
                t.FinancialAccountRefId = make([]string, 0)
        }
        t.FinancialAccountRefId = append(t.FinancialAccountRefId, "")
        return t
}

// Disagree
func (t *FinancialAccountRefIdListType) Last() *string {
  if t.FinancialAccountRefId == nil {
    t = t.AddNew()
    }
        return &(t.FinancialAccountRefId[len(t.FinancialAccountRefId)-1])
}

      func (t *FinancialAccountRefIdListType) AppendString(value interface{}) *FinancialAccountRefIdListType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *StudentAttendanceCollectionReportingListType) Append(value StudentAttendanceCollectionReportingType) *StudentAttendanceCollectionReportingListType {
    
        if t == nil {
                t, _ = StudentAttendanceCollectionReportingListTypePointer(StudentAttendanceCollectionReportingListType{})
        }
        if t.StudentAttendanceCollectionReporting == nil {
                t.StudentAttendanceCollectionReporting = make([]StudentAttendanceCollectionReportingType, 0)
        }
        t.StudentAttendanceCollectionReporting = append(t.StudentAttendanceCollectionReporting, value)
        return t
}

func (t *StudentAttendanceCollectionReportingListType) AddNew() *StudentAttendanceCollectionReportingListType {
        if t == nil {
                t, _ = StudentAttendanceCollectionReportingListTypePointer(StudentAttendanceCollectionReportingListType{})
        }
        if t.StudentAttendanceCollectionReporting == nil {
                t.StudentAttendanceCollectionReporting = make([]StudentAttendanceCollectionReportingType, 0)
        }
        t.StudentAttendanceCollectionReporting = append(t.StudentAttendanceCollectionReporting, StudentAttendanceCollectionReportingType{})
        return t
}

// Disagree
func (t *StudentAttendanceCollectionReportingListType) Last() *StudentAttendanceCollectionReportingType {
  if t.StudentAttendanceCollectionReporting == nil {
    t = t.AddNew()
    }
        return &(t.StudentAttendanceCollectionReporting[len(t.StudentAttendanceCollectionReporting)-1])
}


  // Matt's Append is my AddNew
  func (t *TimeElementType_SpanGaps) Append(value TimeElementType_SpanGap) *TimeElementType_SpanGaps {
    
        if t == nil {
                t, _ = TimeElementType_SpanGapsPointer(TimeElementType_SpanGaps{})
        }
        if t.SpanGap == nil {
                t.SpanGap = make([]TimeElementType_SpanGap, 0)
        }
        t.SpanGap = append(t.SpanGap, value)
        return t
}

func (t *TimeElementType_SpanGaps) AddNew() *TimeElementType_SpanGaps {
        if t == nil {
                t, _ = TimeElementType_SpanGapsPointer(TimeElementType_SpanGaps{})
        }
        if t.SpanGap == nil {
                t.SpanGap = make([]TimeElementType_SpanGap, 0)
        }
        t.SpanGap = append(t.SpanGap, TimeElementType_SpanGap{})
        return t
}

// Disagree
func (t *TimeElementType_SpanGaps) Last() *TimeElementType_SpanGap {
  if t.SpanGap == nil {
    t = t.AddNew()
    }
        return &(t.SpanGap[len(t.SpanGap)-1])
}


  // Matt's Append is my AddNew
  func (t *PlausibleScaledValueListType) Append(value float64) *PlausibleScaledValueListType {
    
        if t == nil {
                t, _ = PlausibleScaledValueListTypePointer(PlausibleScaledValueListType{})
        }
        if t.PlausibleScaledValue == nil {
                t.PlausibleScaledValue = make([]float64, 0)
        }
        t.PlausibleScaledValue = append(t.PlausibleScaledValue, value)
        return t
}

func (t *PlausibleScaledValueListType) AddNew() *PlausibleScaledValueListType {
        if t == nil {
                t, _ = PlausibleScaledValueListTypePointer(PlausibleScaledValueListType{})
        }
        if t.PlausibleScaledValue == nil {
                t.PlausibleScaledValue = make([]float64, 0)
        }
        t.PlausibleScaledValue = append(t.PlausibleScaledValue, 0)
        return t
}

// Disagree
func (t *PlausibleScaledValueListType) Last() *float64 {
  if t.PlausibleScaledValue == nil {
    t = t.AddNew()
    }
        return &(t.PlausibleScaledValue[len(t.PlausibleScaledValue)-1])
}


  // Matt's Append is my AddNew
  func (t *StrategiesType) Append(value string) *StrategiesType {
    
        if t == nil {
                t, _ = StrategiesTypePointer(StrategiesType{})
        }
        if t.Strategy == nil {
                t.Strategy = make([]string, 0)
        }
        t.Strategy = append(t.Strategy, value)
        return t
}

func (t *StrategiesType) AddNew() *StrategiesType {
        if t == nil {
                t, _ = StrategiesTypePointer(StrategiesType{})
        }
        if t.Strategy == nil {
                t.Strategy = make([]string, 0)
        }
        t.Strategy = append(t.Strategy, "")
        return t
}

// Disagree
func (t *StrategiesType) Last() *string {
  if t.Strategy == nil {
    t = t.AddNew()
    }
        return &(t.Strategy[len(t.Strategy)-1])
}

      func (t *StrategiesType) AppendString(value interface{}) *StrategiesType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *LearningStandardsDocumentType) Append(value string) *LearningStandardsDocumentType {
    
        if t == nil {
                t, _ = LearningStandardsDocumentTypePointer(LearningStandardsDocumentType{})
        }
        if t.LearningStandardDocumentRefId == nil {
                t.LearningStandardDocumentRefId = make([]string, 0)
        }
        t.LearningStandardDocumentRefId = append(t.LearningStandardDocumentRefId, value)
        return t
}

func (t *LearningStandardsDocumentType) AddNew() *LearningStandardsDocumentType {
        if t == nil {
                t, _ = LearningStandardsDocumentTypePointer(LearningStandardsDocumentType{})
        }
        if t.LearningStandardDocumentRefId == nil {
                t.LearningStandardDocumentRefId = make([]string, 0)
        }
        t.LearningStandardDocumentRefId = append(t.LearningStandardDocumentRefId, "")
        return t
}

// Disagree
func (t *LearningStandardsDocumentType) Last() *string {
  if t.LearningStandardDocumentRefId == nil {
    t = t.AddNew()
    }
        return &(t.LearningStandardDocumentRefId[len(t.LearningStandardDocumentRefId)-1])
}

      func (t *LearningStandardsDocumentType) AppendString(value interface{}) *LearningStandardsDocumentType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *ContentDescriptionListType) Append(value string) *ContentDescriptionListType {
    
        if t == nil {
                t, _ = ContentDescriptionListTypePointer(ContentDescriptionListType{})
        }
        if t.ContentDescription == nil {
                t.ContentDescription = make([]string, 0)
        }
        t.ContentDescription = append(t.ContentDescription, value)
        return t
}

func (t *ContentDescriptionListType) AddNew() *ContentDescriptionListType {
        if t == nil {
                t, _ = ContentDescriptionListTypePointer(ContentDescriptionListType{})
        }
        if t.ContentDescription == nil {
                t.ContentDescription = make([]string, 0)
        }
        t.ContentDescription = append(t.ContentDescription, "")
        return t
}

// Disagree
func (t *ContentDescriptionListType) Last() *string {
  if t.ContentDescription == nil {
    t = t.AddNew()
    }
        return &(t.ContentDescription[len(t.ContentDescription)-1])
}

      func (t *ContentDescriptionListType) AppendString(value interface{}) *ContentDescriptionListType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *FQReportingListType) Append(value FQReportingType) *FQReportingListType {
    
        if t == nil {
                t, _ = FQReportingListTypePointer(FQReportingListType{})
        }
        if t.FQReporting == nil {
                t.FQReporting = make([]FQReportingType, 0)
        }
        t.FQReporting = append(t.FQReporting, value)
        return t
}

func (t *FQReportingListType) AddNew() *FQReportingListType {
        if t == nil {
                t, _ = FQReportingListTypePointer(FQReportingListType{})
        }
        if t.FQReporting == nil {
                t.FQReporting = make([]FQReportingType, 0)
        }
        t.FQReporting = append(t.FQReporting, FQReportingType{})
        return t
}

// Disagree
func (t *FQReportingListType) Last() *FQReportingType {
  if t.FQReporting == nil {
    t = t.AddNew()
    }
        return &(t.FQReporting[len(t.FQReporting)-1])
}


  // Matt's Append is my AddNew
  func (t *StatsCohortYearLevelListType) Append(value StatsCohortYearLevelType) *StatsCohortYearLevelListType {
    
        if t == nil {
                t, _ = StatsCohortYearLevelListTypePointer(StatsCohortYearLevelListType{})
        }
        if t.StatsCohortYearLevel == nil {
                t.StatsCohortYearLevel = make([]StatsCohortYearLevelType, 0)
        }
        t.StatsCohortYearLevel = append(t.StatsCohortYearLevel, value)
        return t
}

func (t *StatsCohortYearLevelListType) AddNew() *StatsCohortYearLevelListType {
        if t == nil {
                t, _ = StatsCohortYearLevelListTypePointer(StatsCohortYearLevelListType{})
        }
        if t.StatsCohortYearLevel == nil {
                t.StatsCohortYearLevel = make([]StatsCohortYearLevelType, 0)
        }
        t.StatsCohortYearLevel = append(t.StatsCohortYearLevel, StatsCohortYearLevelType{})
        return t
}

// Disagree
func (t *StatsCohortYearLevelListType) Last() *StatsCohortYearLevelType {
  if t.StatsCohortYearLevel == nil {
    t = t.AddNew()
    }
        return &(t.StatsCohortYearLevel[len(t.StatsCohortYearLevel)-1])
}


  // Matt's Append is my AddNew
  func (t *AuthorsType) Append(value string) *AuthorsType {
    
        if t == nil {
                t, _ = AuthorsTypePointer(AuthorsType{})
        }
        if t.Author == nil {
                t.Author = make([]string, 0)
        }
        t.Author = append(t.Author, value)
        return t
}

func (t *AuthorsType) AddNew() *AuthorsType {
        if t == nil {
                t, _ = AuthorsTypePointer(AuthorsType{})
        }
        if t.Author == nil {
                t.Author = make([]string, 0)
        }
        t.Author = append(t.Author, "")
        return t
}

// Disagree
func (t *AuthorsType) Last() *string {
  if t.Author == nil {
    t = t.AddNew()
    }
        return &(t.Author[len(t.Author)-1])
}

      func (t *AuthorsType) AppendString(value interface{}) *AuthorsType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *YearLevelEnrollmentListType) Append(value YearLevelEnrollmentType) *YearLevelEnrollmentListType {
    
        if t == nil {
                t, _ = YearLevelEnrollmentListTypePointer(YearLevelEnrollmentListType{})
        }
        if t.YearLevelEnrollment == nil {
                t.YearLevelEnrollment = make([]YearLevelEnrollmentType, 0)
        }
        t.YearLevelEnrollment = append(t.YearLevelEnrollment, value)
        return t
}

func (t *YearLevelEnrollmentListType) AddNew() *YearLevelEnrollmentListType {
        if t == nil {
                t, _ = YearLevelEnrollmentListTypePointer(YearLevelEnrollmentListType{})
        }
        if t.YearLevelEnrollment == nil {
                t.YearLevelEnrollment = make([]YearLevelEnrollmentType, 0)
        }
        t.YearLevelEnrollment = append(t.YearLevelEnrollment, YearLevelEnrollmentType{})
        return t
}

// Disagree
func (t *YearLevelEnrollmentListType) Last() *YearLevelEnrollmentType {
  if t.YearLevelEnrollment == nil {
    t = t.AddNew()
    }
        return &(t.YearLevelEnrollment[len(t.YearLevelEnrollment)-1])
}


  // Matt's Append is my AddNew
  func (t *PeriodAttendancesType) Append(value PeriodAttendanceType) *PeriodAttendancesType {
    
        if t == nil {
                t, _ = PeriodAttendancesTypePointer(PeriodAttendancesType{})
        }
        if t.PeriodAttendance == nil {
                t.PeriodAttendance = make([]PeriodAttendanceType, 0)
        }
        t.PeriodAttendance = append(t.PeriodAttendance, value)
        return t
}

func (t *PeriodAttendancesType) AddNew() *PeriodAttendancesType {
        if t == nil {
                t, _ = PeriodAttendancesTypePointer(PeriodAttendancesType{})
        }
        if t.PeriodAttendance == nil {
                t.PeriodAttendance = make([]PeriodAttendanceType, 0)
        }
        t.PeriodAttendance = append(t.PeriodAttendance, PeriodAttendanceType{})
        return t
}

// Disagree
func (t *PeriodAttendancesType) Last() *PeriodAttendanceType {
  if t.PeriodAttendance == nil {
    t = t.AddNew()
    }
        return &(t.PeriodAttendance[len(t.PeriodAttendance)-1])
}


  // Matt's Append is my AddNew
  func (t *JournalAdjustmentListType) Append(value JournalAdjustmentType) *JournalAdjustmentListType {
    
        if t == nil {
                t, _ = JournalAdjustmentListTypePointer(JournalAdjustmentListType{})
        }
        if t.JournalAdjustment == nil {
                t.JournalAdjustment = make([]JournalAdjustmentType, 0)
        }
        t.JournalAdjustment = append(t.JournalAdjustment, value)
        return t
}

func (t *JournalAdjustmentListType) AddNew() *JournalAdjustmentListType {
        if t == nil {
                t, _ = JournalAdjustmentListTypePointer(JournalAdjustmentListType{})
        }
        if t.JournalAdjustment == nil {
                t.JournalAdjustment = make([]JournalAdjustmentType, 0)
        }
        t.JournalAdjustment = append(t.JournalAdjustment, JournalAdjustmentType{})
        return t
}

// Disagree
func (t *JournalAdjustmentListType) Last() *JournalAdjustmentType {
  if t.JournalAdjustment == nil {
    t = t.AddNew()
    }
        return &(t.JournalAdjustment[len(t.JournalAdjustment)-1])
}


  // Matt's Append is my AddNew
  func (t *AlertMessagesType) Append(value AlertMessageType) *AlertMessagesType {
    
        if t == nil {
                t, _ = AlertMessagesTypePointer(AlertMessagesType{})
        }
        if t.AlertMessage == nil {
                t.AlertMessage = make([]AlertMessageType, 0)
        }
        t.AlertMessage = append(t.AlertMessage, value)
        return t
}

func (t *AlertMessagesType) AddNew() *AlertMessagesType {
        if t == nil {
                t, _ = AlertMessagesTypePointer(AlertMessagesType{})
        }
        if t.AlertMessage == nil {
                t.AlertMessage = make([]AlertMessageType, 0)
        }
        t.AlertMessage = append(t.AlertMessage, AlertMessageType{})
        return t
}

// Disagree
func (t *AlertMessagesType) Last() *AlertMessageType {
  if t.AlertMessage == nil {
    t = t.AddNew()
    }
        return &(t.AlertMessage[len(t.AlertMessage)-1])
}


  // Matt's Append is my AddNew
  func (t *TeacherListType) Append(value TeachingGroupTeacherType) *TeacherListType {
    
        if t == nil {
                t, _ = TeacherListTypePointer(TeacherListType{})
        }
        if t.TeachingGroupTeacher == nil {
                t.TeachingGroupTeacher = make([]TeachingGroupTeacherType, 0)
        }
        t.TeachingGroupTeacher = append(t.TeachingGroupTeacher, value)
        return t
}

func (t *TeacherListType) AddNew() *TeacherListType {
        if t == nil {
                t, _ = TeacherListTypePointer(TeacherListType{})
        }
        if t.TeachingGroupTeacher == nil {
                t.TeachingGroupTeacher = make([]TeachingGroupTeacherType, 0)
        }
        t.TeachingGroupTeacher = append(t.TeachingGroupTeacher, TeachingGroupTeacherType{})
        return t
}

// Disagree
func (t *TeacherListType) Last() *TeachingGroupTeacherType {
  if t.TeachingGroupTeacher == nil {
    t = t.AddNew()
    }
        return &(t.TeachingGroupTeacher[len(t.TeachingGroupTeacher)-1])
}


  // Matt's Append is my AddNew
  func (t *WithdrawalTimeListType) Append(value WithdrawalType) *WithdrawalTimeListType {
    
        if t == nil {
                t, _ = WithdrawalTimeListTypePointer(WithdrawalTimeListType{})
        }
        if t.Withdrawal == nil {
                t.Withdrawal = make([]WithdrawalType, 0)
        }
        t.Withdrawal = append(t.Withdrawal, value)
        return t
}

func (t *WithdrawalTimeListType) AddNew() *WithdrawalTimeListType {
        if t == nil {
                t, _ = WithdrawalTimeListTypePointer(WithdrawalTimeListType{})
        }
        if t.Withdrawal == nil {
                t.Withdrawal = make([]WithdrawalType, 0)
        }
        t.Withdrawal = append(t.Withdrawal, WithdrawalType{})
        return t
}

// Disagree
func (t *WithdrawalTimeListType) Last() *WithdrawalType {
  if t.Withdrawal == nil {
    t = t.AddNew()
    }
        return &(t.Withdrawal[len(t.Withdrawal)-1])
}


  // Matt's Append is my AddNew
  func (t *StatsCohortListType) Append(value StatsCohortType) *StatsCohortListType {
    
        if t == nil {
                t, _ = StatsCohortListTypePointer(StatsCohortListType{})
        }
        if t.StatsCohort == nil {
                t.StatsCohort = make([]StatsCohortType, 0)
        }
        t.StatsCohort = append(t.StatsCohort, value)
        return t
}

func (t *StatsCohortListType) AddNew() *StatsCohortListType {
        if t == nil {
                t, _ = StatsCohortListTypePointer(StatsCohortListType{})
        }
        if t.StatsCohort == nil {
                t.StatsCohort = make([]StatsCohortType, 0)
        }
        t.StatsCohort = append(t.StatsCohort, StatsCohortType{})
        return t
}

// Disagree
func (t *StatsCohortListType) Last() *StatsCohortType {
  if t.StatsCohort == nil {
    t = t.AddNew()
    }
        return &(t.StatsCohort[len(t.StatsCohort)-1])
}


  // Matt's Append is my AddNew
  func (t *AGReportingObjectResponseListType) Append(value AGReportingObjectResponseType) *AGReportingObjectResponseListType {
    
        if t == nil {
                t, _ = AGReportingObjectResponseListTypePointer(AGReportingObjectResponseListType{})
        }
        if t.AGReportingObjectResponse == nil {
                t.AGReportingObjectResponse = make([]AGReportingObjectResponseType, 0)
        }
        t.AGReportingObjectResponse = append(t.AGReportingObjectResponse, value)
        return t
}

func (t *AGReportingObjectResponseListType) AddNew() *AGReportingObjectResponseListType {
        if t == nil {
                t, _ = AGReportingObjectResponseListTypePointer(AGReportingObjectResponseListType{})
        }
        if t.AGReportingObjectResponse == nil {
                t.AGReportingObjectResponse = make([]AGReportingObjectResponseType, 0)
        }
        t.AGReportingObjectResponse = append(t.AGReportingObjectResponse, AGReportingObjectResponseType{})
        return t
}

// Disagree
func (t *AGReportingObjectResponseListType) Last() *AGReportingObjectResponseType {
  if t.AGReportingObjectResponse == nil {
    t = t.AddNew()
    }
        return &(t.AGReportingObjectResponse[len(t.AGReportingObjectResponse)-1])
}


  // Matt's Append is my AddNew
  func (t *AssociatedObjectsType) Append(value AssociatedObjectsType_AssociatedObject) *AssociatedObjectsType {
    
        if t == nil {
                t, _ = AssociatedObjectsTypePointer(AssociatedObjectsType{})
        }
        if t.AssociatedObject == nil {
                t.AssociatedObject = make([]AssociatedObjectsType_AssociatedObject, 0)
        }
        t.AssociatedObject = append(t.AssociatedObject, value)
        return t
}

func (t *AssociatedObjectsType) AddNew() *AssociatedObjectsType {
        if t == nil {
                t, _ = AssociatedObjectsTypePointer(AssociatedObjectsType{})
        }
        if t.AssociatedObject == nil {
                t.AssociatedObject = make([]AssociatedObjectsType_AssociatedObject, 0)
        }
        t.AssociatedObject = append(t.AssociatedObject, AssociatedObjectsType_AssociatedObject{})
        return t
}

// Disagree
func (t *AssociatedObjectsType) Last() *AssociatedObjectsType_AssociatedObject {
  if t.AssociatedObject == nil {
    t = t.AddNew()
    }
        return &(t.AssociatedObject[len(t.AssociatedObject)-1])
}


  // Matt's Append is my AddNew
  func (t *LibraryTransactionListType) Append(value LibraryTransactionType) *LibraryTransactionListType {
    
        if t == nil {
                t, _ = LibraryTransactionListTypePointer(LibraryTransactionListType{})
        }
        if t.Transaction == nil {
                t.Transaction = make([]LibraryTransactionType, 0)
        }
        t.Transaction = append(t.Transaction, value)
        return t
}

func (t *LibraryTransactionListType) AddNew() *LibraryTransactionListType {
        if t == nil {
                t, _ = LibraryTransactionListTypePointer(LibraryTransactionListType{})
        }
        if t.Transaction == nil {
                t.Transaction = make([]LibraryTransactionType, 0)
        }
        t.Transaction = append(t.Transaction, LibraryTransactionType{})
        return t
}

// Disagree
func (t *LibraryTransactionListType) Last() *LibraryTransactionType {
  if t.Transaction == nil {
    t = t.AddNew()
    }
        return &(t.Transaction[len(t.Transaction)-1])
}


  // Matt's Append is my AddNew
  func (t *NAPCodeFrameTestletListType) Append(value NAPTestletCodeFrameType) *NAPCodeFrameTestletListType {
    
        if t == nil {
                t, _ = NAPCodeFrameTestletListTypePointer(NAPCodeFrameTestletListType{})
        }
        if t.Testlet == nil {
                t.Testlet = make([]NAPTestletCodeFrameType, 0)
        }
        t.Testlet = append(t.Testlet, value)
        return t
}

func (t *NAPCodeFrameTestletListType) AddNew() *NAPCodeFrameTestletListType {
        if t == nil {
                t, _ = NAPCodeFrameTestletListTypePointer(NAPCodeFrameTestletListType{})
        }
        if t.Testlet == nil {
                t.Testlet = make([]NAPTestletCodeFrameType, 0)
        }
        t.Testlet = append(t.Testlet, NAPTestletCodeFrameType{})
        return t
}

// Disagree
func (t *NAPCodeFrameTestletListType) Last() *NAPTestletCodeFrameType {
  if t.Testlet == nil {
    t = t.AddNew()
    }
        return &(t.Testlet[len(t.Testlet)-1])
}


  // Matt's Append is my AddNew
  func (t *AGRoundListType) Append(value AGRoundType) *AGRoundListType {
    
        if t == nil {
                t, _ = AGRoundListTypePointer(AGRoundListType{})
        }
        if t.AGRound == nil {
                t.AGRound = make([]AGRoundType, 0)
        }
        t.AGRound = append(t.AGRound, value)
        return t
}

func (t *AGRoundListType) AddNew() *AGRoundListType {
        if t == nil {
                t, _ = AGRoundListTypePointer(AGRoundListType{})
        }
        if t.AGRound == nil {
                t.AGRound = make([]AGRoundType, 0)
        }
        t.AGRound = append(t.AGRound, AGRoundType{})
        return t
}

// Disagree
func (t *AGRoundListType) Last() *AGRoundType {
  if t.AGRound == nil {
    t = t.AddNew()
    }
        return &(t.AGRound[len(t.AGRound)-1])
}


  // Matt's Append is my AddNew
  func (t *PurchasingItemsType) Append(value PurchasingItemType) *PurchasingItemsType {
    
        if t == nil {
                t, _ = PurchasingItemsTypePointer(PurchasingItemsType{})
        }
        if t.PurchasingItem == nil {
                t.PurchasingItem = make([]PurchasingItemType, 0)
        }
        t.PurchasingItem = append(t.PurchasingItem, value)
        return t
}

func (t *PurchasingItemsType) AddNew() *PurchasingItemsType {
        if t == nil {
                t, _ = PurchasingItemsTypePointer(PurchasingItemsType{})
        }
        if t.PurchasingItem == nil {
                t.PurchasingItem = make([]PurchasingItemType, 0)
        }
        t.PurchasingItem = append(t.PurchasingItem, PurchasingItemType{})
        return t
}

// Disagree
func (t *PurchasingItemsType) Last() *PurchasingItemType {
  if t.PurchasingItem == nil {
    t = t.AddNew()
    }
        return &(t.PurchasingItem[len(t.PurchasingItem)-1])
}


  // Matt's Append is my AddNew
  func (t *ApprovalsType) Append(value ApprovalType) *ApprovalsType {
    
        if t == nil {
                t, _ = ApprovalsTypePointer(ApprovalsType{})
        }
        if t.Approval == nil {
                t.Approval = make([]ApprovalType, 0)
        }
        t.Approval = append(t.Approval, value)
        return t
}

func (t *ApprovalsType) AddNew() *ApprovalsType {
        if t == nil {
                t, _ = ApprovalsTypePointer(ApprovalsType{})
        }
        if t.Approval == nil {
                t.Approval = make([]ApprovalType, 0)
        }
        t.Approval = append(t.Approval, ApprovalType{})
        return t
}

// Disagree
func (t *ApprovalsType) Last() *ApprovalType {
  if t.Approval == nil {
    t = t.AddNew()
    }
        return &(t.Approval[len(t.Approval)-1])
}


  // Matt's Append is my AddNew
  func (t *AddressCollectionStudentListType) Append(value AddressCollectionStudentType) *AddressCollectionStudentListType {
    
        if t == nil {
                t, _ = AddressCollectionStudentListTypePointer(AddressCollectionStudentListType{})
        }
        if t.AddressCollectionStudent == nil {
                t.AddressCollectionStudent = make([]AddressCollectionStudentType, 0)
        }
        t.AddressCollectionStudent = append(t.AddressCollectionStudent, value)
        return t
}

func (t *AddressCollectionStudentListType) AddNew() *AddressCollectionStudentListType {
        if t == nil {
                t, _ = AddressCollectionStudentListTypePointer(AddressCollectionStudentListType{})
        }
        if t.AddressCollectionStudent == nil {
                t.AddressCollectionStudent = make([]AddressCollectionStudentType, 0)
        }
        t.AddressCollectionStudent = append(t.AddressCollectionStudent, AddressCollectionStudentType{})
        return t
}

// Disagree
func (t *AddressCollectionStudentListType) Last() *AddressCollectionStudentType {
  if t.AddressCollectionStudent == nil {
    t = t.AddNew()
    }
        return &(t.AddressCollectionStudent[len(t.AddressCollectionStudent)-1])
}


  // Matt's Append is my AddNew
  func (t *NAPSubscoreListType) Append(value NAPSubscoreType) *NAPSubscoreListType {
    
        if t == nil {
                t, _ = NAPSubscoreListTypePointer(NAPSubscoreListType{})
        }
        if t.Subscore == nil {
                t.Subscore = make([]NAPSubscoreType, 0)
        }
        t.Subscore = append(t.Subscore, value)
        return t
}

func (t *NAPSubscoreListType) AddNew() *NAPSubscoreListType {
        if t == nil {
                t, _ = NAPSubscoreListTypePointer(NAPSubscoreListType{})
        }
        if t.Subscore == nil {
                t.Subscore = make([]NAPSubscoreType, 0)
        }
        t.Subscore = append(t.Subscore, NAPSubscoreType{})
        return t
}

// Disagree
func (t *NAPSubscoreListType) Last() *NAPSubscoreType {
  if t.Subscore == nil {
    t = t.AddNew()
    }
        return &(t.Subscore[len(t.Subscore)-1])
}


  // Matt's Append is my AddNew
  func (t *TeachingGroupPeriodListType) Append(value TeachingGroupPeriodType) *TeachingGroupPeriodListType {
    
        if t == nil {
                t, _ = TeachingGroupPeriodListTypePointer(TeachingGroupPeriodListType{})
        }
        if t.TeachingGroupPeriod == nil {
                t.TeachingGroupPeriod = make([]TeachingGroupPeriodType, 0)
        }
        t.TeachingGroupPeriod = append(t.TeachingGroupPeriod, value)
        return t
}

func (t *TeachingGroupPeriodListType) AddNew() *TeachingGroupPeriodListType {
        if t == nil {
                t, _ = TeachingGroupPeriodListTypePointer(TeachingGroupPeriodListType{})
        }
        if t.TeachingGroupPeriod == nil {
                t.TeachingGroupPeriod = make([]TeachingGroupPeriodType, 0)
        }
        t.TeachingGroupPeriod = append(t.TeachingGroupPeriod, TeachingGroupPeriodType{})
        return t
}

// Disagree
func (t *TeachingGroupPeriodListType) Last() *TeachingGroupPeriodType {
  if t.TeachingGroupPeriod == nil {
    t = t.AddNew()
    }
        return &(t.TeachingGroupPeriod[len(t.TeachingGroupPeriod)-1])
}


  // Matt's Append is my AddNew
  func (t *LearningStandardsType) Append(value string) *LearningStandardsType {
    
        if t == nil {
                t, _ = LearningStandardsTypePointer(LearningStandardsType{})
        }
        if t.LearningStandardItemRefId == nil {
                t.LearningStandardItemRefId = make([]string, 0)
        }
        t.LearningStandardItemRefId = append(t.LearningStandardItemRefId, value)
        return t
}

func (t *LearningStandardsType) AddNew() *LearningStandardsType {
        if t == nil {
                t, _ = LearningStandardsTypePointer(LearningStandardsType{})
        }
        if t.LearningStandardItemRefId == nil {
                t.LearningStandardItemRefId = make([]string, 0)
        }
        t.LearningStandardItemRefId = append(t.LearningStandardItemRefId, "")
        return t
}

// Disagree
func (t *LearningStandardsType) Last() *string {
  if t.LearningStandardItemRefId == nil {
    t = t.AddNew()
    }
        return &(t.LearningStandardItemRefId[len(t.LearningStandardItemRefId)-1])
}

      func (t *LearningStandardsType) AppendString(value interface{}) *LearningStandardsType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *FollowUpActionListType) Append(value FollowUpActionType) *FollowUpActionListType {
    
        if t == nil {
                t, _ = FollowUpActionListTypePointer(FollowUpActionListType{})
        }
        if t.FollowUpAction == nil {
                t.FollowUpAction = make([]FollowUpActionType, 0)
        }
        t.FollowUpAction = append(t.FollowUpAction, value)
        return t
}

func (t *FollowUpActionListType) AddNew() *FollowUpActionListType {
        if t == nil {
                t, _ = FollowUpActionListTypePointer(FollowUpActionListType{})
        }
        if t.FollowUpAction == nil {
                t.FollowUpAction = make([]FollowUpActionType, 0)
        }
        t.FollowUpAction = append(t.FollowUpAction, FollowUpActionType{})
        return t
}

// Disagree
func (t *FollowUpActionListType) Last() *FollowUpActionType {
  if t.FollowUpAction == nil {
    t = t.AddNew()
    }
        return &(t.FollowUpAction[len(t.FollowUpAction)-1])
}


  // Matt's Append is my AddNew
  func (t *VisaSubClassListType) Append(value VisaSubClassType) *VisaSubClassListType {
    
        if t == nil {
                t, _ = VisaSubClassListTypePointer(VisaSubClassListType{})
        }
        if t.VisaSubClass == nil {
                t.VisaSubClass = make([]VisaSubClassType, 0)
        }
        t.VisaSubClass = append(t.VisaSubClass, value)
        return t
}

func (t *VisaSubClassListType) AddNew() *VisaSubClassListType {
        if t == nil {
                t, _ = VisaSubClassListTypePointer(VisaSubClassListType{})
        }
        if t.VisaSubClass == nil {
                t.VisaSubClass = make([]VisaSubClassType, 0)
        }
        t.VisaSubClass = append(t.VisaSubClass, VisaSubClassType{})
        return t
}

// Disagree
func (t *VisaSubClassListType) Last() *VisaSubClassType {
  if t.VisaSubClass == nil {
    t = t.AddNew()
    }
        return &(t.VisaSubClass[len(t.VisaSubClass)-1])
}


  // Matt's Append is my AddNew
  func (t *WellbeingEventSubCategoryListType) Append(value string) *WellbeingEventSubCategoryListType {
    
        if t == nil {
                t, _ = WellbeingEventSubCategoryListTypePointer(WellbeingEventSubCategoryListType{})
        }
        if t.WellbeingEventSubCategory == nil {
                t.WellbeingEventSubCategory = make([]string, 0)
        }
        t.WellbeingEventSubCategory = append(t.WellbeingEventSubCategory, value)
        return t
}

func (t *WellbeingEventSubCategoryListType) AddNew() *WellbeingEventSubCategoryListType {
        if t == nil {
                t, _ = WellbeingEventSubCategoryListTypePointer(WellbeingEventSubCategoryListType{})
        }
        if t.WellbeingEventSubCategory == nil {
                t.WellbeingEventSubCategory = make([]string, 0)
        }
        t.WellbeingEventSubCategory = append(t.WellbeingEventSubCategory, "")
        return t
}

// Disagree
func (t *WellbeingEventSubCategoryListType) Last() *string {
  if t.WellbeingEventSubCategory == nil {
    t = t.AddNew()
    }
        return &(t.WellbeingEventSubCategory[len(t.WellbeingEventSubCategory)-1])
}

      func (t *WellbeingEventSubCategoryListType) AppendString(value interface{}) *WellbeingEventSubCategoryListType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *LearningObjectivesType) Append(value string) *LearningObjectivesType {
    
        if t == nil {
                t, _ = LearningObjectivesTypePointer(LearningObjectivesType{})
        }
        if t.LearningObjective == nil {
                t.LearningObjective = make([]string, 0)
        }
        t.LearningObjective = append(t.LearningObjective, value)
        return t
}

func (t *LearningObjectivesType) AddNew() *LearningObjectivesType {
        if t == nil {
                t, _ = LearningObjectivesTypePointer(LearningObjectivesType{})
        }
        if t.LearningObjective == nil {
                t.LearningObjective = make([]string, 0)
        }
        t.LearningObjective = append(t.LearningObjective, "")
        return t
}

// Disagree
func (t *LearningObjectivesType) Last() *string {
  if t.LearningObjective == nil {
    t = t.AddNew()
    }
        return &(t.LearningObjective[len(t.LearningObjective)-1])
}

      func (t *LearningObjectivesType) AppendString(value interface{}) *LearningObjectivesType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *MediaTypesType) Append(value string) *MediaTypesType {
    
        if t == nil {
                t, _ = MediaTypesTypePointer(MediaTypesType{})
        }
        if t.MediaType == nil {
                t.MediaType = make([]string, 0)
        }
        t.MediaType = append(t.MediaType, value)
        return t
}

func (t *MediaTypesType) AddNew() *MediaTypesType {
        if t == nil {
                t, _ = MediaTypesTypePointer(MediaTypesType{})
        }
        if t.MediaType == nil {
                t.MediaType = make([]string, 0)
        }
        t.MediaType = append(t.MediaType, "")
        return t
}

// Disagree
func (t *MediaTypesType) Last() *string {
  if t.MediaType == nil {
    t = t.AddNew()
    }
        return &(t.MediaType[len(t.MediaType)-1])
}

      func (t *MediaTypesType) AppendString(value interface{}) *MediaTypesType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *RecognitionListType) Append(value string) *RecognitionListType {
    
        if t == nil {
                t, _ = RecognitionListTypePointer(RecognitionListType{})
        }
        if t.Recognition == nil {
                t.Recognition = make([]string, 0)
        }
        t.Recognition = append(t.Recognition, value)
        return t
}

func (t *RecognitionListType) AddNew() *RecognitionListType {
        if t == nil {
                t, _ = RecognitionListTypePointer(RecognitionListType{})
        }
        if t.Recognition == nil {
                t.Recognition = make([]string, 0)
        }
        t.Recognition = append(t.Recognition, "")
        return t
}

// Disagree
func (t *RecognitionListType) Last() *string {
  if t.Recognition == nil {
    t = t.AddNew()
    }
        return &(t.Recognition[len(t.Recognition)-1])
}

      func (t *RecognitionListType) AppendString(value interface{}) *RecognitionListType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *CensusReportingListType) Append(value CensusReportingType) *CensusReportingListType {
    
        if t == nil {
                t, _ = CensusReportingListTypePointer(CensusReportingListType{})
        }
        if t.CensusReporting == nil {
                t.CensusReporting = make([]CensusReportingType, 0)
        }
        t.CensusReporting = append(t.CensusReporting, value)
        return t
}

func (t *CensusReportingListType) AddNew() *CensusReportingListType {
        if t == nil {
                t, _ = CensusReportingListTypePointer(CensusReportingListType{})
        }
        if t.CensusReporting == nil {
                t.CensusReporting = make([]CensusReportingType, 0)
        }
        t.CensusReporting = append(t.CensusReporting, CensusReportingType{})
        return t
}

// Disagree
func (t *CensusReportingListType) Last() *CensusReportingType {
  if t.CensusReporting == nil {
    t = t.AddNew()
    }
        return &(t.CensusReporting[len(t.CensusReporting)-1])
}


  // Matt's Append is my AddNew
  func (t *PasswordListType) Append(value PasswordListType_Password) *PasswordListType {
    
        if t == nil {
                t, _ = PasswordListTypePointer(PasswordListType{})
        }
        if t.Password == nil {
                t.Password = make([]PasswordListType_Password, 0)
        }
        t.Password = append(t.Password, value)
        return t
}

func (t *PasswordListType) AddNew() *PasswordListType {
        if t == nil {
                t, _ = PasswordListTypePointer(PasswordListType{})
        }
        if t.Password == nil {
                t.Password = make([]PasswordListType_Password, 0)
        }
        t.Password = append(t.Password, PasswordListType_Password{})
        return t
}

// Disagree
func (t *PasswordListType) Last() *PasswordListType_Password {
  if t.Password == nil {
    t = t.AddNew()
    }
        return &(t.Password[len(t.Password)-1])
}


  // Matt's Append is my AddNew
  func (t *AttendanceTimesType) Append(value AttendanceTimeType) *AttendanceTimesType {
    
        if t == nil {
                t, _ = AttendanceTimesTypePointer(AttendanceTimesType{})
        }
        if t.AttendanceTime == nil {
                t.AttendanceTime = make([]AttendanceTimeType, 0)
        }
        t.AttendanceTime = append(t.AttendanceTime, value)
        return t
}

func (t *AttendanceTimesType) AddNew() *AttendanceTimesType {
        if t == nil {
                t, _ = AttendanceTimesTypePointer(AttendanceTimesType{})
        }
        if t.AttendanceTime == nil {
                t.AttendanceTime = make([]AttendanceTimeType, 0)
        }
        t.AttendanceTime = append(t.AttendanceTime, AttendanceTimeType{})
        return t
}

// Disagree
func (t *AttendanceTimesType) Last() *AttendanceTimeType {
  if t.AttendanceTime == nil {
    t = t.AddNew()
    }
        return &(t.AttendanceTime[len(t.AttendanceTime)-1])
}


  // Matt's Append is my AddNew
  func (t *PhoneNumberListType) Append(value PhoneNumberType) *PhoneNumberListType {
    
        if t == nil {
                t, _ = PhoneNumberListTypePointer(PhoneNumberListType{})
        }
        if t.PhoneNumber == nil {
                t.PhoneNumber = make([]PhoneNumberType, 0)
        }
        t.PhoneNumber = append(t.PhoneNumber, value)
        return t
}

func (t *PhoneNumberListType) AddNew() *PhoneNumberListType {
        if t == nil {
                t, _ = PhoneNumberListTypePointer(PhoneNumberListType{})
        }
        if t.PhoneNumber == nil {
                t.PhoneNumber = make([]PhoneNumberType, 0)
        }
        t.PhoneNumber = append(t.PhoneNumber, PhoneNumberType{})
        return t
}

// Disagree
func (t *PhoneNumberListType) Last() *PhoneNumberType {
  if t.PhoneNumber == nil {
    t = t.AddNew()
    }
        return &(t.PhoneNumber[len(t.PhoneNumber)-1])
}


  // Matt's Append is my AddNew
  func (t *StudentListType) Append(value TeachingGroupStudentType) *StudentListType {
    
        if t == nil {
                t, _ = StudentListTypePointer(StudentListType{})
        }
        if t.TeachingGroupStudent == nil {
                t.TeachingGroupStudent = make([]TeachingGroupStudentType, 0)
        }
        t.TeachingGroupStudent = append(t.TeachingGroupStudent, value)
        return t
}

func (t *StudentListType) AddNew() *StudentListType {
        if t == nil {
                t, _ = StudentListTypePointer(StudentListType{})
        }
        if t.TeachingGroupStudent == nil {
                t.TeachingGroupStudent = make([]TeachingGroupStudentType, 0)
        }
        t.TeachingGroupStudent = append(t.TeachingGroupStudent, TeachingGroupStudentType{})
        return t
}

// Disagree
func (t *StudentListType) Last() *TeachingGroupStudentType {
  if t.TeachingGroupStudent == nil {
    t = t.AddNew()
    }
        return &(t.TeachingGroupStudent[len(t.TeachingGroupStudent)-1])
}


  // Matt's Append is my AddNew
  func (t *OtherIdListType) Append(value OtherIdType) *OtherIdListType {
    
        if t == nil {
                t, _ = OtherIdListTypePointer(OtherIdListType{})
        }
        if t.OtherId == nil {
                t.OtherId = make([]OtherIdType, 0)
        }
        t.OtherId = append(t.OtherId, value)
        return t
}

func (t *OtherIdListType) AddNew() *OtherIdListType {
        if t == nil {
                t, _ = OtherIdListTypePointer(OtherIdListType{})
        }
        if t.OtherId == nil {
                t.OtherId = make([]OtherIdType, 0)
        }
        t.OtherId = append(t.OtherId, OtherIdType{})
        return t
}

// Disagree
func (t *OtherIdListType) Last() *OtherIdType {
  if t.OtherId == nil {
    t = t.AddNew()
    }
        return &(t.OtherId[len(t.OtherId)-1])
}


  // Matt's Append is my AddNew
  func (t *ACStrandAreaListType) Append(value ACStrandSubjectAreaType) *ACStrandAreaListType {
    
        if t == nil {
                t, _ = ACStrandAreaListTypePointer(ACStrandAreaListType{})
        }
        if t.ACStrandSubjectArea == nil {
                t.ACStrandSubjectArea = make([]ACStrandSubjectAreaType, 0)
        }
        t.ACStrandSubjectArea = append(t.ACStrandSubjectArea, value)
        return t
}

func (t *ACStrandAreaListType) AddNew() *ACStrandAreaListType {
        if t == nil {
                t, _ = ACStrandAreaListTypePointer(ACStrandAreaListType{})
        }
        if t.ACStrandSubjectArea == nil {
                t.ACStrandSubjectArea = make([]ACStrandSubjectAreaType, 0)
        }
        t.ACStrandSubjectArea = append(t.ACStrandSubjectArea, ACStrandSubjectAreaType{})
        return t
}

// Disagree
func (t *ACStrandAreaListType) Last() *ACStrandSubjectAreaType {
  if t.ACStrandSubjectArea == nil {
    t = t.AddNew()
    }
        return &(t.ACStrandSubjectArea[len(t.ACStrandSubjectArea)-1])
}


  // Matt's Append is my AddNew
  func (t *LEAContactListType) Append(value LEAContactType) *LEAContactListType {
    
        if t == nil {
                t, _ = LEAContactListTypePointer(LEAContactListType{})
        }
        if t.LEAContact == nil {
                t.LEAContact = make([]LEAContactType, 0)
        }
        t.LEAContact = append(t.LEAContact, value)
        return t
}

func (t *LEAContactListType) AddNew() *LEAContactListType {
        if t == nil {
                t, _ = LEAContactListTypePointer(LEAContactListType{})
        }
        if t.LEAContact == nil {
                t.LEAContact = make([]LEAContactType, 0)
        }
        t.LEAContact = append(t.LEAContact, LEAContactType{})
        return t
}

// Disagree
func (t *LEAContactListType) Last() *LEAContactType {
  if t.LEAContact == nil {
    t = t.AddNew()
    }
        return &(t.LEAContact[len(t.LEAContact)-1])
}


  // Matt's Append is my AddNew
  func (t *SourceObjectsType) Append(value SourceObjectsType_SourceObject) *SourceObjectsType {
    
        if t == nil {
                t, _ = SourceObjectsTypePointer(SourceObjectsType{})
        }
        if t.SourceObject == nil {
                t.SourceObject = make([]SourceObjectsType_SourceObject, 0)
        }
        t.SourceObject = append(t.SourceObject, value)
        return t
}

func (t *SourceObjectsType) AddNew() *SourceObjectsType {
        if t == nil {
                t, _ = SourceObjectsTypePointer(SourceObjectsType{})
        }
        if t.SourceObject == nil {
                t.SourceObject = make([]SourceObjectsType_SourceObject, 0)
        }
        t.SourceObject = append(t.SourceObject, SourceObjectsType_SourceObject{})
        return t
}

// Disagree
func (t *SourceObjectsType) Last() *SourceObjectsType_SourceObject {
  if t.SourceObject == nil {
    t = t.AddNew()
    }
        return &(t.SourceObject[len(t.SourceObject)-1])
}


  // Matt's Append is my AddNew
  func (t *CodeFrameTestItemListType) Append(value CodeFrameTestItemType) *CodeFrameTestItemListType {
    
        if t == nil {
                t, _ = CodeFrameTestItemListTypePointer(CodeFrameTestItemListType{})
        }
        if t.TestItem == nil {
                t.TestItem = make([]CodeFrameTestItemType, 0)
        }
        t.TestItem = append(t.TestItem, value)
        return t
}

func (t *CodeFrameTestItemListType) AddNew() *CodeFrameTestItemListType {
        if t == nil {
                t, _ = CodeFrameTestItemListTypePointer(CodeFrameTestItemListType{})
        }
        if t.TestItem == nil {
                t.TestItem = make([]CodeFrameTestItemType, 0)
        }
        t.TestItem = append(t.TestItem, CodeFrameTestItemType{})
        return t
}

// Disagree
func (t *CodeFrameTestItemListType) Last() *CodeFrameTestItemType {
  if t.TestItem == nil {
    t = t.AddNew()
    }
        return &(t.TestItem[len(t.TestItem)-1])
}


  // Matt's Append is my AddNew
  func (t *NAPTestletItemResponseListType) Append(value NAPTestletResponseItemType) *NAPTestletItemResponseListType {
    
        if t == nil {
                t, _ = NAPTestletItemResponseListTypePointer(NAPTestletItemResponseListType{})
        }
        if t.ItemResponse == nil {
                t.ItemResponse = make([]NAPTestletResponseItemType, 0)
        }
        t.ItemResponse = append(t.ItemResponse, value)
        return t
}

func (t *NAPTestletItemResponseListType) AddNew() *NAPTestletItemResponseListType {
        if t == nil {
                t, _ = NAPTestletItemResponseListTypePointer(NAPTestletItemResponseListType{})
        }
        if t.ItemResponse == nil {
                t.ItemResponse = make([]NAPTestletResponseItemType, 0)
        }
        t.ItemResponse = append(t.ItemResponse, NAPTestletResponseItemType{})
        return t
}

// Disagree
func (t *NAPTestletItemResponseListType) Last() *NAPTestletResponseItemType {
  if t.ItemResponse == nil {
    t = t.AddNew()
    }
        return &(t.ItemResponse[len(t.ItemResponse)-1])
}


  // Matt's Append is my AddNew
  func (t *StudentGradeMarkersListType) Append(value MarkerType) *StudentGradeMarkersListType {
    
        if t == nil {
                t, _ = StudentGradeMarkersListTypePointer(StudentGradeMarkersListType{})
        }
        if t.Marker == nil {
                t.Marker = make([]MarkerType, 0)
        }
        t.Marker = append(t.Marker, value)
        return t
}

func (t *StudentGradeMarkersListType) AddNew() *StudentGradeMarkersListType {
        if t == nil {
                t, _ = StudentGradeMarkersListTypePointer(StudentGradeMarkersListType{})
        }
        if t.Marker == nil {
                t.Marker = make([]MarkerType, 0)
        }
        t.Marker = append(t.Marker, MarkerType{})
        return t
}

// Disagree
func (t *StudentGradeMarkersListType) Last() *MarkerType {
  if t.Marker == nil {
    t = t.AddNew()
    }
        return &(t.Marker[len(t.Marker)-1])
}


  // Matt's Append is my AddNew
  func (t *AlternateIdentificationCodeListType) Append(value string) *AlternateIdentificationCodeListType {
    
        if t == nil {
                t, _ = AlternateIdentificationCodeListTypePointer(AlternateIdentificationCodeListType{})
        }
        if t.AlternateIdentificationCode == nil {
                t.AlternateIdentificationCode = make([]string, 0)
        }
        t.AlternateIdentificationCode = append(t.AlternateIdentificationCode, value)
        return t
}

func (t *AlternateIdentificationCodeListType) AddNew() *AlternateIdentificationCodeListType {
        if t == nil {
                t, _ = AlternateIdentificationCodeListTypePointer(AlternateIdentificationCodeListType{})
        }
        if t.AlternateIdentificationCode == nil {
                t.AlternateIdentificationCode = make([]string, 0)
        }
        t.AlternateIdentificationCode = append(t.AlternateIdentificationCode, "")
        return t
}

// Disagree
func (t *AlternateIdentificationCodeListType) Last() *string {
  if t.AlternateIdentificationCode == nil {
    t = t.AddNew()
    }
        return &(t.AlternateIdentificationCode[len(t.AlternateIdentificationCode)-1])
}

      func (t *AlternateIdentificationCodeListType) AppendString(value interface{}) *AlternateIdentificationCodeListType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *EmailListType) Append(value EmailType) *EmailListType {
    
        if t == nil {
                t, _ = EmailListTypePointer(EmailListType{})
        }
        if t.Email == nil {
                t.Email = make([]EmailType, 0)
        }
        t.Email = append(t.Email, value)
        return t
}

func (t *EmailListType) AddNew() *EmailListType {
        if t == nil {
                t, _ = EmailListTypePointer(EmailListType{})
        }
        if t.Email == nil {
                t.Email = make([]EmailType, 0)
        }
        t.Email = append(t.Email, EmailType{})
        return t
}

// Disagree
func (t *EmailListType) Last() *EmailType {
  if t.Email == nil {
    t = t.AddNew()
    }
        return &(t.Email[len(t.Email)-1])
}


  // Matt's Append is my AddNew
  func (t *IdentityAssertionsType) Append(value IdentityAssertionsType_IdentityAssertion) *IdentityAssertionsType {
    
        if t == nil {
                t, _ = IdentityAssertionsTypePointer(IdentityAssertionsType{})
        }
        if t.IdentityAssertion == nil {
                t.IdentityAssertion = make([]IdentityAssertionsType_IdentityAssertion, 0)
        }
        t.IdentityAssertion = append(t.IdentityAssertion, value)
        return t
}

func (t *IdentityAssertionsType) AddNew() *IdentityAssertionsType {
        if t == nil {
                t, _ = IdentityAssertionsTypePointer(IdentityAssertionsType{})
        }
        if t.IdentityAssertion == nil {
                t.IdentityAssertion = make([]IdentityAssertionsType_IdentityAssertion, 0)
        }
        t.IdentityAssertion = append(t.IdentityAssertion, IdentityAssertionsType_IdentityAssertion{})
        return t
}

// Disagree
func (t *IdentityAssertionsType) Last() *IdentityAssertionsType_IdentityAssertion {
  if t.IdentityAssertion == nil {
    t = t.AddNew()
    }
        return &(t.IdentityAssertion[len(t.IdentityAssertion)-1])
}


  // Matt's Append is my AddNew
  func (t *ElectronicIdListType) Append(value ElectronicIdType) *ElectronicIdListType {
    
        if t == nil {
                t, _ = ElectronicIdListTypePointer(ElectronicIdListType{})
        }
        if t.ElectronicId == nil {
                t.ElectronicId = make([]ElectronicIdType, 0)
        }
        t.ElectronicId = append(t.ElectronicId, value)
        return t
}

func (t *ElectronicIdListType) AddNew() *ElectronicIdListType {
        if t == nil {
                t, _ = ElectronicIdListTypePointer(ElectronicIdListType{})
        }
        if t.ElectronicId == nil {
                t.ElectronicId = make([]ElectronicIdType, 0)
        }
        t.ElectronicId = append(t.ElectronicId, ElectronicIdType{})
        return t
}

// Disagree
func (t *ElectronicIdListType) Last() *ElectronicIdType {
  if t.ElectronicId == nil {
    t = t.AddNew()
    }
        return &(t.ElectronicId[len(t.ElectronicId)-1])
}


  // Matt's Append is my AddNew
  func (t *MedicalAlertMessagesType) Append(value MedicalAlertMessageType) *MedicalAlertMessagesType {
    
        if t == nil {
                t, _ = MedicalAlertMessagesTypePointer(MedicalAlertMessagesType{})
        }
        if t.MedicalAlertMessage == nil {
                t.MedicalAlertMessage = make([]MedicalAlertMessageType, 0)
        }
        t.MedicalAlertMessage = append(t.MedicalAlertMessage, value)
        return t
}

func (t *MedicalAlertMessagesType) AddNew() *MedicalAlertMessagesType {
        if t == nil {
                t, _ = MedicalAlertMessagesTypePointer(MedicalAlertMessagesType{})
        }
        if t.MedicalAlertMessage == nil {
                t.MedicalAlertMessage = make([]MedicalAlertMessageType, 0)
        }
        t.MedicalAlertMessage = append(t.MedicalAlertMessage, MedicalAlertMessageType{})
        return t
}

// Disagree
func (t *MedicalAlertMessagesType) Last() *MedicalAlertMessageType {
  if t.MedicalAlertMessage == nil {
    t = t.AddNew()
    }
        return &(t.MedicalAlertMessage[len(t.MedicalAlertMessage)-1])
}


  // Matt's Append is my AddNew
  func (t *AGRuleListType) Append(value AGRuleType) *AGRuleListType {
    
        if t == nil {
                t, _ = AGRuleListTypePointer(AGRuleListType{})
        }
        if t.AGRule == nil {
                t.AGRule = make([]AGRuleType, 0)
        }
        t.AGRule = append(t.AGRule, value)
        return t
}

func (t *AGRuleListType) AddNew() *AGRuleListType {
        if t == nil {
                t, _ = AGRuleListTypePointer(AGRuleListType{})
        }
        if t.AGRule == nil {
                t.AGRule = make([]AGRuleType, 0)
        }
        t.AGRule = append(t.AGRule, AGRuleType{})
        return t
}

// Disagree
func (t *AGRuleListType) Last() *AGRuleType {
  if t.AGRule == nil {
    t = t.AddNew()
    }
        return &(t.AGRule[len(t.AGRule)-1])
}


  // Matt's Append is my AddNew
  func (t *CharacteristicsType) Append(value string) *CharacteristicsType {
    
        if t == nil {
                t, _ = CharacteristicsTypePointer(CharacteristicsType{})
        }
        if t.AggregateCharacteristicInfoRefId == nil {
                t.AggregateCharacteristicInfoRefId = make([]string, 0)
        }
        t.AggregateCharacteristicInfoRefId = append(t.AggregateCharacteristicInfoRefId, value)
        return t
}

func (t *CharacteristicsType) AddNew() *CharacteristicsType {
        if t == nil {
                t, _ = CharacteristicsTypePointer(CharacteristicsType{})
        }
        if t.AggregateCharacteristicInfoRefId == nil {
                t.AggregateCharacteristicInfoRefId = make([]string, 0)
        }
        t.AggregateCharacteristicInfoRefId = append(t.AggregateCharacteristicInfoRefId, "")
        return t
}

// Disagree
func (t *CharacteristicsType) Last() *string {
  if t.AggregateCharacteristicInfoRefId == nil {
    t = t.AddNew()
    }
        return &(t.AggregateCharacteristicInfoRefId[len(t.AggregateCharacteristicInfoRefId)-1])
}

      func (t *CharacteristicsType) AppendString(value interface{}) *CharacteristicsType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *FQItemListType) Append(value FQItemType) *FQItemListType {
    
        if t == nil {
                t, _ = FQItemListTypePointer(FQItemListType{})
        }
        if t.FQItem == nil {
                t.FQItem = make([]FQItemType, 0)
        }
        t.FQItem = append(t.FQItem, value)
        return t
}

func (t *FQItemListType) AddNew() *FQItemListType {
        if t == nil {
                t, _ = FQItemListTypePointer(FQItemListType{})
        }
        if t.FQItem == nil {
                t.FQItem = make([]FQItemType, 0)
        }
        t.FQItem = append(t.FQItem, FQItemType{})
        return t
}

// Disagree
func (t *FQItemListType) Last() *FQItemType {
  if t.FQItem == nil {
    t = t.AddNew()
    }
        return &(t.FQItem[len(t.FQItem)-1])
}


  // Matt's Append is my AddNew
  func (t *StudentsType) Append(value string) *StudentsType {
    
        if t == nil {
                t, _ = StudentsTypePointer(StudentsType{})
        }
        if t.StudentPersonalRefId == nil {
                t.StudentPersonalRefId = make([]string, 0)
        }
        t.StudentPersonalRefId = append(t.StudentPersonalRefId, value)
        return t
}

func (t *StudentsType) AddNew() *StudentsType {
        if t == nil {
                t, _ = StudentsTypePointer(StudentsType{})
        }
        if t.StudentPersonalRefId == nil {
                t.StudentPersonalRefId = make([]string, 0)
        }
        t.StudentPersonalRefId = append(t.StudentPersonalRefId, "")
        return t
}

// Disagree
func (t *StudentsType) Last() *string {
  if t.StudentPersonalRefId == nil {
    t = t.AddNew()
    }
        return &(t.StudentPersonalRefId[len(t.StudentPersonalRefId)-1])
}

      func (t *StudentsType) AppendString(value interface{}) *StudentsType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *OtherNamesType) Append(value OtherNameType) *OtherNamesType {
    
        if t == nil {
                t, _ = OtherNamesTypePointer(OtherNamesType{})
        }
        if t.Name == nil {
                t.Name = make([]OtherNameType, 0)
        }
        t.Name = append(t.Name, value)
        return t
}

func (t *OtherNamesType) AddNew() *OtherNamesType {
        if t == nil {
                t, _ = OtherNamesTypePointer(OtherNamesType{})
        }
        if t.Name == nil {
                t.Name = make([]OtherNameType, 0)
        }
        t.Name = append(t.Name, OtherNameType{})
        return t
}

// Disagree
func (t *OtherNamesType) Last() *OtherNameType {
  if t.Name == nil {
    t = t.AddNew()
    }
        return &(t.Name[len(t.Name)-1])
}


  // Matt's Append is my AddNew
  func (t *WellbeingDocumentListType) Append(value WellbeingDocumentType) *WellbeingDocumentListType {
    
        if t == nil {
                t, _ = WellbeingDocumentListTypePointer(WellbeingDocumentListType{})
        }
        if t.Document == nil {
                t.Document = make([]WellbeingDocumentType, 0)
        }
        t.Document = append(t.Document, value)
        return t
}

func (t *WellbeingDocumentListType) AddNew() *WellbeingDocumentListType {
        if t == nil {
                t, _ = WellbeingDocumentListTypePointer(WellbeingDocumentListType{})
        }
        if t.Document == nil {
                t.Document = make([]WellbeingDocumentType, 0)
        }
        t.Document = append(t.Document, WellbeingDocumentType{})
        return t
}

// Disagree
func (t *WellbeingDocumentListType) Last() *WellbeingDocumentType {
  if t.Document == nil {
    t = t.AddNew()
    }
        return &(t.Document[len(t.Document)-1])
}


  // Matt's Append is my AddNew
  func (t *HoldInfoListType) Append(value HoldInfoType) *HoldInfoListType {
    
        if t == nil {
                t, _ = HoldInfoListTypePointer(HoldInfoListType{})
        }
        if t.HoldInfo == nil {
                t.HoldInfo = make([]HoldInfoType, 0)
        }
        t.HoldInfo = append(t.HoldInfo, value)
        return t
}

func (t *HoldInfoListType) AddNew() *HoldInfoListType {
        if t == nil {
                t, _ = HoldInfoListTypePointer(HoldInfoListType{})
        }
        if t.HoldInfo == nil {
                t.HoldInfo = make([]HoldInfoType, 0)
        }
        t.HoldInfo = append(t.HoldInfo, HoldInfoType{})
        return t
}

// Disagree
func (t *HoldInfoListType) Last() *HoldInfoType {
  if t.HoldInfo == nil {
    t = t.AddNew()
    }
        return &(t.HoldInfo[len(t.HoldInfo)-1])
}


  // Matt's Append is my AddNew
  func (t *TimeTablePeriodListType) Append(value TimeTablePeriodType) *TimeTablePeriodListType {
    
        if t == nil {
                t, _ = TimeTablePeriodListTypePointer(TimeTablePeriodListType{})
        }
        if t.TimeTablePeriod == nil {
                t.TimeTablePeriod = make([]TimeTablePeriodType, 0)
        }
        t.TimeTablePeriod = append(t.TimeTablePeriod, value)
        return t
}

func (t *TimeTablePeriodListType) AddNew() *TimeTablePeriodListType {
        if t == nil {
                t, _ = TimeTablePeriodListTypePointer(TimeTablePeriodListType{})
        }
        if t.TimeTablePeriod == nil {
                t.TimeTablePeriod = make([]TimeTablePeriodType, 0)
        }
        t.TimeTablePeriod = append(t.TimeTablePeriod, TimeTablePeriodType{})
        return t
}

// Disagree
func (t *TimeTablePeriodListType) Last() *TimeTablePeriodType {
  if t.TimeTablePeriod == nil {
    t = t.AddNew()
    }
        return &(t.TimeTablePeriod[len(t.TimeTablePeriod)-1])
}


  // Matt's Append is my AddNew
  func (t *FQContextualQuestionListType) Append(value FQContextualQuestionType) *FQContextualQuestionListType {
    
        if t == nil {
                t, _ = FQContextualQuestionListTypePointer(FQContextualQuestionListType{})
        }
        if t.FQContextualQuestion == nil {
                t.FQContextualQuestion = make([]FQContextualQuestionType, 0)
        }
        t.FQContextualQuestion = append(t.FQContextualQuestion, value)
        return t
}

func (t *FQContextualQuestionListType) AddNew() *FQContextualQuestionListType {
        if t == nil {
                t, _ = FQContextualQuestionListTypePointer(FQContextualQuestionListType{})
        }
        if t.FQContextualQuestion == nil {
                t.FQContextualQuestion = make([]FQContextualQuestionType, 0)
        }
        t.FQContextualQuestion = append(t.FQContextualQuestion, FQContextualQuestionType{})
        return t
}

// Disagree
func (t *FQContextualQuestionListType) Last() *FQContextualQuestionType {
  if t.FQContextualQuestion == nil {
    t = t.AddNew()
    }
        return &(t.FQContextualQuestion[len(t.FQContextualQuestion)-1])
}


  // Matt's Append is my AddNew
  func (t *SchoolProgramListType) Append(value SchoolProgramType) *SchoolProgramListType {
    
        if t == nil {
                t, _ = SchoolProgramListTypePointer(SchoolProgramListType{})
        }
        if t.Program == nil {
                t.Program = make([]SchoolProgramType, 0)
        }
        t.Program = append(t.Program, value)
        return t
}

func (t *SchoolProgramListType) AddNew() *SchoolProgramListType {
        if t == nil {
                t, _ = SchoolProgramListTypePointer(SchoolProgramListType{})
        }
        if t.Program == nil {
                t.Program = make([]SchoolProgramType, 0)
        }
        t.Program = append(t.Program, SchoolProgramType{})
        return t
}

// Disagree
func (t *SchoolProgramListType) Last() *SchoolProgramType {
  if t.Program == nil {
    t = t.AddNew()
    }
        return &(t.Program[len(t.Program)-1])
}


  // Matt's Append is my AddNew
  func (t *OtherCodeListType) Append(value OtherCodeListType_OtherCode) *OtherCodeListType {
    
        if t == nil {
                t, _ = OtherCodeListTypePointer(OtherCodeListType{})
        }
        if t.OtherCode == nil {
                t.OtherCode = make([]OtherCodeListType_OtherCode, 0)
        }
        t.OtherCode = append(t.OtherCode, value)
        return t
}

func (t *OtherCodeListType) AddNew() *OtherCodeListType {
        if t == nil {
                t, _ = OtherCodeListTypePointer(OtherCodeListType{})
        }
        if t.OtherCode == nil {
                t.OtherCode = make([]OtherCodeListType_OtherCode, 0)
        }
        t.OtherCode = append(t.OtherCode, OtherCodeListType_OtherCode{})
        return t
}

// Disagree
func (t *OtherCodeListType) Last() *OtherCodeListType_OtherCode {
  if t.OtherCode == nil {
    t = t.AddNew()
    }
        return &(t.OtherCode[len(t.OtherCode)-1])
}


  // Matt's Append is my AddNew
  func (t *StaffListType) Append(value string) *StaffListType {
    
        if t == nil {
                t, _ = StaffListTypePointer(StaffListType{})
        }
        if t.StaffPersonalRefId == nil {
                t.StaffPersonalRefId = make([]string, 0)
        }
        t.StaffPersonalRefId = append(t.StaffPersonalRefId, value)
        return t
}

func (t *StaffListType) AddNew() *StaffListType {
        if t == nil {
                t, _ = StaffListTypePointer(StaffListType{})
        }
        if t.StaffPersonalRefId == nil {
                t.StaffPersonalRefId = make([]string, 0)
        }
        t.StaffPersonalRefId = append(t.StaffPersonalRefId, "")
        return t
}

// Disagree
func (t *StaffListType) Last() *string {
  if t.StaffPersonalRefId == nil {
    t = t.AddNew()
    }
        return &(t.StaffPersonalRefId[len(t.StaffPersonalRefId)-1])
}

      func (t *StaffListType) AppendString(value interface{}) *StaffListType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *FineInfoListType) Append(value FineInfoType) *FineInfoListType {
    
        if t == nil {
                t, _ = FineInfoListTypePointer(FineInfoListType{})
        }
        if t.FineInfo == nil {
                t.FineInfo = make([]FineInfoType, 0)
        }
        t.FineInfo = append(t.FineInfo, value)
        return t
}

func (t *FineInfoListType) AddNew() *FineInfoListType {
        if t == nil {
                t, _ = FineInfoListTypePointer(FineInfoListType{})
        }
        if t.FineInfo == nil {
                t.FineInfo = make([]FineInfoType, 0)
        }
        t.FineInfo = append(t.FineInfo, FineInfoType{})
        return t
}

// Disagree
func (t *FineInfoListType) Last() *FineInfoType {
  if t.FineInfo == nil {
    t = t.AddNew()
    }
        return &(t.FineInfo[len(t.FineInfo)-1])
}


  // Matt's Append is my AddNew
  func (t *StimulusListType) Append(value StimulusType) *StimulusListType {
    
        if t == nil {
                t, _ = StimulusListTypePointer(StimulusListType{})
        }
        if t.Stimulus == nil {
                t.Stimulus = make([]StimulusType, 0)
        }
        t.Stimulus = append(t.Stimulus, value)
        return t
}

func (t *StimulusListType) AddNew() *StimulusListType {
        if t == nil {
                t, _ = StimulusListTypePointer(StimulusListType{})
        }
        if t.Stimulus == nil {
                t.Stimulus = make([]StimulusType, 0)
        }
        t.Stimulus = append(t.Stimulus, StimulusType{})
        return t
}

// Disagree
func (t *StimulusListType) Last() *StimulusType {
  if t.Stimulus == nil {
    t = t.AddNew()
    }
        return &(t.Stimulus[len(t.Stimulus)-1])
}


  // Matt's Append is my AddNew
  func (t *LifeCycleType_TimeElements) Append(value TimeElementType) *LifeCycleType_TimeElements {
    
        if t == nil {
                t, _ = LifeCycleType_TimeElementsPointer(LifeCycleType_TimeElements{})
        }
        if t.TimeElement == nil {
                t.TimeElement = make([]TimeElementType, 0)
        }
        t.TimeElement = append(t.TimeElement, value)
        return t
}

func (t *LifeCycleType_TimeElements) AddNew() *LifeCycleType_TimeElements {
        if t == nil {
                t, _ = LifeCycleType_TimeElementsPointer(LifeCycleType_TimeElements{})
        }
        if t.TimeElement == nil {
                t.TimeElement = make([]TimeElementType, 0)
        }
        t.TimeElement = append(t.TimeElement, TimeElementType{})
        return t
}

// Disagree
func (t *LifeCycleType_TimeElements) Last() *TimeElementType {
  if t.TimeElement == nil {
    t = t.AddNew()
    }
        return &(t.TimeElement[len(t.TimeElement)-1])
}


  // Matt's Append is my AddNew
  func (t *TeachingGroupListType) Append(value string) *TeachingGroupListType {
    
        if t == nil {
                t, _ = TeachingGroupListTypePointer(TeachingGroupListType{})
        }
        if t.TeachingGroupRefId == nil {
                t.TeachingGroupRefId = make([]string, 0)
        }
        t.TeachingGroupRefId = append(t.TeachingGroupRefId, value)
        return t
}

func (t *TeachingGroupListType) AddNew() *TeachingGroupListType {
        if t == nil {
                t, _ = TeachingGroupListTypePointer(TeachingGroupListType{})
        }
        if t.TeachingGroupRefId == nil {
                t.TeachingGroupRefId = make([]string, 0)
        }
        t.TeachingGroupRefId = append(t.TeachingGroupRefId, "")
        return t
}

// Disagree
func (t *TeachingGroupListType) Last() *string {
  if t.TeachingGroupRefId == nil {
    t = t.AddNew()
    }
        return &(t.TeachingGroupRefId[len(t.TeachingGroupRefId)-1])
}

      func (t *TeachingGroupListType) AppendString(value interface{}) *TeachingGroupListType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *SchoolGroupListType) Append(value LocalIdType) *SchoolGroupListType {
    
        if t == nil {
                t, _ = SchoolGroupListTypePointer(SchoolGroupListType{})
        }
        if t.SchoolGroup == nil {
                t.SchoolGroup = make([]LocalIdType, 0)
        }
        t.SchoolGroup = append(t.SchoolGroup, value)
        return t
}

func (t *SchoolGroupListType) AddNew() *SchoolGroupListType {
        if t == nil {
                t, _ = SchoolGroupListTypePointer(SchoolGroupListType{})
        }
        if t.SchoolGroup == nil {
                t.SchoolGroup = make([]LocalIdType, 0)
        }
        t.SchoolGroup = append(t.SchoolGroup, "")
        return t
}

// Disagree
func (t *SchoolGroupListType) Last() *LocalIdType {
  if t.SchoolGroup == nil {
    t = t.AddNew()
    }
        return &(t.SchoolGroup[len(t.SchoolGroup)-1])
}

      func (t *SchoolGroupListType) AppendString(value interface{}) *SchoolGroupListType {
        return t.Append((LocalIdType)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *PrerequisitesType) Append(value string) *PrerequisitesType {
    
        if t == nil {
                t, _ = PrerequisitesTypePointer(PrerequisitesType{})
        }
        if t.Prerequisite == nil {
                t.Prerequisite = make([]string, 0)
        }
        t.Prerequisite = append(t.Prerequisite, value)
        return t
}

func (t *PrerequisitesType) AddNew() *PrerequisitesType {
        if t == nil {
                t, _ = PrerequisitesTypePointer(PrerequisitesType{})
        }
        if t.Prerequisite == nil {
                t.Prerequisite = make([]string, 0)
        }
        t.Prerequisite = append(t.Prerequisite, "")
        return t
}

// Disagree
func (t *PrerequisitesType) Last() *string {
  if t.Prerequisite == nil {
    t = t.AddNew()
    }
        return &(t.Prerequisite[len(t.Prerequisite)-1])
}

      func (t *PrerequisitesType) AppendString(value interface{}) *PrerequisitesType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *StatementsType) Append(value string) *StatementsType {
    
        if t == nil {
                t, _ = StatementsTypePointer(StatementsType{})
        }
        if t.Statement == nil {
                t.Statement = make([]string, 0)
        }
        t.Statement = append(t.Statement, value)
        return t
}

func (t *StatementsType) AddNew() *StatementsType {
        if t == nil {
                t, _ = StatementsTypePointer(StatementsType{})
        }
        if t.Statement == nil {
                t.Statement = make([]string, 0)
        }
        t.Statement = append(t.Statement, "")
        return t
}

// Disagree
func (t *StatementsType) Last() *string {
  if t.Statement == nil {
    t = t.AddNew()
    }
        return &(t.Statement[len(t.Statement)-1])
}

      func (t *StatementsType) AppendString(value interface{}) *StatementsType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *SubjectAreaListType) Append(value SubjectAreaType) *SubjectAreaListType {
    
        if t == nil {
                t, _ = SubjectAreaListTypePointer(SubjectAreaListType{})
        }
        if t.SubjectArea == nil {
                t.SubjectArea = make([]SubjectAreaType, 0)
        }
        t.SubjectArea = append(t.SubjectArea, value)
        return t
}

func (t *SubjectAreaListType) AddNew() *SubjectAreaListType {
        if t == nil {
                t, _ = SubjectAreaListTypePointer(SubjectAreaListType{})
        }
        if t.SubjectArea == nil {
                t.SubjectArea = make([]SubjectAreaType, 0)
        }
        t.SubjectArea = append(t.SubjectArea, SubjectAreaType{})
        return t
}

// Disagree
func (t *SubjectAreaListType) Last() *SubjectAreaType {
  if t.SubjectArea == nil {
    t = t.AddNew()
    }
        return &(t.SubjectArea[len(t.SubjectArea)-1])
}


  // Matt's Append is my AddNew
  func (t *NAPTestItemListType) Append(value NAPTestItem2Type) *NAPTestItemListType {
    
        if t == nil {
                t, _ = NAPTestItemListTypePointer(NAPTestItemListType{})
        }
        if t.TestItem == nil {
                t.TestItem = make([]NAPTestItem2Type, 0)
        }
        t.TestItem = append(t.TestItem, value)
        return t
}

func (t *NAPTestItemListType) AddNew() *NAPTestItemListType {
        if t == nil {
                t, _ = NAPTestItemListTypePointer(NAPTestItemListType{})
        }
        if t.TestItem == nil {
                t.TestItem = make([]NAPTestItem2Type, 0)
        }
        t.TestItem = append(t.TestItem, NAPTestItem2Type{})
        return t
}

// Disagree
func (t *NAPTestItemListType) Last() *NAPTestItem2Type {
  if t.TestItem == nil {
    t = t.AddNew()
    }
        return &(t.TestItem[len(t.TestItem)-1])
}


  // Matt's Append is my AddNew
  func (t *AddressListType) Append(value AddressType) *AddressListType {
    
        if t == nil {
                t, _ = AddressListTypePointer(AddressListType{})
        }
        if t.Address == nil {
                t.Address = make([]AddressType, 0)
        }
        t.Address = append(t.Address, value)
        return t
}

func (t *AddressListType) AddNew() *AddressListType {
        if t == nil {
                t, _ = AddressListTypePointer(AddressListType{})
        }
        if t.Address == nil {
                t.Address = make([]AddressType, 0)
        }
        t.Address = append(t.Address, AddressType{})
        return t
}

// Disagree
func (t *AddressListType) Last() *AddressType {
  if t.Address == nil {
    t = t.AddNew()
    }
        return &(t.Address[len(t.Address)-1])
}


  // Matt's Append is my AddNew
  func (t *AccountCodeListType) Append(value string) *AccountCodeListType {
    
        if t == nil {
                t, _ = AccountCodeListTypePointer(AccountCodeListType{})
        }
        if t.AccountCode == nil {
                t.AccountCode = make([]string, 0)
        }
        t.AccountCode = append(t.AccountCode, value)
        return t
}

func (t *AccountCodeListType) AddNew() *AccountCodeListType {
        if t == nil {
                t, _ = AccountCodeListTypePointer(AccountCodeListType{})
        }
        if t.AccountCode == nil {
                t.AccountCode = make([]string, 0)
        }
        t.AccountCode = append(t.AccountCode, "")
        return t
}

// Disagree
func (t *AccountCodeListType) Last() *string {
  if t.AccountCode == nil {
    t = t.AddNew()
    }
        return &(t.AccountCode[len(t.AccountCode)-1])
}

      func (t *AccountCodeListType) AppendString(value interface{}) *AccountCodeListType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *LocalCodeListType) Append(value LocalCodeType) *LocalCodeListType {
    
        if t == nil {
                t, _ = LocalCodeListTypePointer(LocalCodeListType{})
        }
        if t.LocalCode == nil {
                t.LocalCode = make([]LocalCodeType, 0)
        }
        t.LocalCode = append(t.LocalCode, value)
        return t
}

func (t *LocalCodeListType) AddNew() *LocalCodeListType {
        if t == nil {
                t, _ = LocalCodeListTypePointer(LocalCodeListType{})
        }
        if t.LocalCode == nil {
                t.LocalCode = make([]LocalCodeType, 0)
        }
        t.LocalCode = append(t.LocalCode, LocalCodeType{})
        return t
}

// Disagree
func (t *LocalCodeListType) Last() *LocalCodeType {
  if t.LocalCode == nil {
    t = t.AddNew()
    }
        return &(t.LocalCode[len(t.LocalCode)-1])
}


  // Matt's Append is my AddNew
  func (t *ContactsType) Append(value ContactType) *ContactsType {
    
        if t == nil {
                t, _ = ContactsTypePointer(ContactsType{})
        }
        if t.Contact == nil {
                t.Contact = make([]ContactType, 0)
        }
        t.Contact = append(t.Contact, value)
        return t
}

func (t *ContactsType) AddNew() *ContactsType {
        if t == nil {
                t, _ = ContactsTypePointer(ContactsType{})
        }
        if t.Contact == nil {
                t.Contact = make([]ContactType, 0)
        }
        t.Contact = append(t.Contact, ContactType{})
        return t
}

// Disagree
func (t *ContactsType) Last() *ContactType {
  if t.Contact == nil {
    t = t.AddNew()
    }
        return &(t.Contact[len(t.Contact)-1])
}


  // Matt's Append is my AddNew
  func (t *TeachingGroupScheduleListType) Append(value TeachingGroupScheduleType) *TeachingGroupScheduleListType {
    
        if t == nil {
                t, _ = TeachingGroupScheduleListTypePointer(TeachingGroupScheduleListType{})
        }
        if t.TeachingGroupSchedule == nil {
                t.TeachingGroupSchedule = make([]TeachingGroupScheduleType, 0)
        }
        t.TeachingGroupSchedule = append(t.TeachingGroupSchedule, value)
        return t
}

func (t *TeachingGroupScheduleListType) AddNew() *TeachingGroupScheduleListType {
        if t == nil {
                t, _ = TeachingGroupScheduleListTypePointer(TeachingGroupScheduleListType{})
        }
        if t.TeachingGroupSchedule == nil {
                t.TeachingGroupSchedule = make([]TeachingGroupScheduleType, 0)
        }
        t.TeachingGroupSchedule = append(t.TeachingGroupSchedule, TeachingGroupScheduleType{})
        return t
}

// Disagree
func (t *TeachingGroupScheduleListType) Last() *TeachingGroupScheduleType {
  if t.TeachingGroupSchedule == nil {
    t = t.AddNew()
    }
        return &(t.TeachingGroupSchedule[len(t.TeachingGroupSchedule)-1])
}


  // Matt's Append is my AddNew
  func (t *MedicationListType) Append(value MedicationType) *MedicationListType {
    
        if t == nil {
                t, _ = MedicationListTypePointer(MedicationListType{})
        }
        if t.Medication == nil {
                t.Medication = make([]MedicationType, 0)
        }
        t.Medication = append(t.Medication, value)
        return t
}

func (t *MedicationListType) AddNew() *MedicationListType {
        if t == nil {
                t, _ = MedicationListTypePointer(MedicationListType{})
        }
        if t.Medication == nil {
                t.Medication = make([]MedicationType, 0)
        }
        t.Medication = append(t.Medication, MedicationType{})
        return t
}

// Disagree
func (t *MedicationListType) Last() *MedicationType {
  if t.Medication == nil {
    t = t.AddNew()
    }
        return &(t.Medication[len(t.Medication)-1])
}


  // Matt's Append is my AddNew
  func (t *ValidLetterMarkListType) Append(value ValidLetterMarkType) *ValidLetterMarkListType {
    
        if t == nil {
                t, _ = ValidLetterMarkListTypePointer(ValidLetterMarkListType{})
        }
        if t.ValidLetterMark == nil {
                t.ValidLetterMark = make([]ValidLetterMarkType, 0)
        }
        t.ValidLetterMark = append(t.ValidLetterMark, value)
        return t
}

func (t *ValidLetterMarkListType) AddNew() *ValidLetterMarkListType {
        if t == nil {
                t, _ = ValidLetterMarkListTypePointer(ValidLetterMarkListType{})
        }
        if t.ValidLetterMark == nil {
                t.ValidLetterMark = make([]ValidLetterMarkType, 0)
        }
        t.ValidLetterMark = append(t.ValidLetterMark, ValidLetterMarkType{})
        return t
}

// Disagree
func (t *ValidLetterMarkListType) Last() *ValidLetterMarkType {
  if t.ValidLetterMark == nil {
    t = t.AddNew()
    }
        return &(t.ValidLetterMark[len(t.ValidLetterMark)-1])
}


  // Matt's Append is my AddNew
  func (t *SystemRole_SystemContextList) Append(value SystemRole_SystemContext) *SystemRole_SystemContextList {
    
        if t == nil {
                t, _ = SystemRole_SystemContextListPointer(SystemRole_SystemContextList{})
        }
        if t.SystemContext == nil {
                t.SystemContext = make([]SystemRole_SystemContext, 0)
        }
        t.SystemContext = append(t.SystemContext, value)
        return t
}

func (t *SystemRole_SystemContextList) AddNew() *SystemRole_SystemContextList {
        if t == nil {
                t, _ = SystemRole_SystemContextListPointer(SystemRole_SystemContextList{})
        }
        if t.SystemContext == nil {
                t.SystemContext = make([]SystemRole_SystemContext, 0)
        }
        t.SystemContext = append(t.SystemContext, SystemRole_SystemContext{})
        return t
}

// Disagree
func (t *SystemRole_SystemContextList) Last() *SystemRole_SystemContext {
  if t.SystemContext == nil {
    t = t.AddNew()
    }
        return &(t.SystemContext[len(t.SystemContext)-1])
}


  // Matt's Append is my AddNew
  func (t *ResourceUsage_ResourceReportColumnList) Append(value ResourceUsage_ResourceReportColumn) *ResourceUsage_ResourceReportColumnList {
    
        if t == nil {
                t, _ = ResourceUsage_ResourceReportColumnListPointer(ResourceUsage_ResourceReportColumnList{})
        }
        if t.ResourceReportColumn == nil {
                t.ResourceReportColumn = make([]ResourceUsage_ResourceReportColumn, 0)
        }
        t.ResourceReportColumn = append(t.ResourceReportColumn, value)
        return t
}

func (t *ResourceUsage_ResourceReportColumnList) AddNew() *ResourceUsage_ResourceReportColumnList {
        if t == nil {
                t, _ = ResourceUsage_ResourceReportColumnListPointer(ResourceUsage_ResourceReportColumnList{})
        }
        if t.ResourceReportColumn == nil {
                t.ResourceReportColumn = make([]ResourceUsage_ResourceReportColumn, 0)
        }
        t.ResourceReportColumn = append(t.ResourceReportColumn, ResourceUsage_ResourceReportColumn{})
        return t
}

// Disagree
func (t *ResourceUsage_ResourceReportColumnList) Last() *ResourceUsage_ResourceReportColumn {
  if t.ResourceReportColumn == nil {
    t = t.AddNew()
    }
        return &(t.ResourceReportColumn[len(t.ResourceReportColumn)-1])
}


  // Matt's Append is my AddNew
  func (t *OrganizationsType) Append(value string) *OrganizationsType {
    
        if t == nil {
                t, _ = OrganizationsTypePointer(OrganizationsType{})
        }
        if t.Organization == nil {
                t.Organization = make([]string, 0)
        }
        t.Organization = append(t.Organization, value)
        return t
}

func (t *OrganizationsType) AddNew() *OrganizationsType {
        if t == nil {
                t, _ = OrganizationsTypePointer(OrganizationsType{})
        }
        if t.Organization == nil {
                t.Organization = make([]string, 0)
        }
        t.Organization = append(t.Organization, "")
        return t
}

// Disagree
func (t *OrganizationsType) Last() *string {
  if t.Organization == nil {
    t = t.AddNew()
    }
        return &(t.Organization[len(t.Organization)-1])
}

      func (t *OrganizationsType) AppendString(value interface{}) *OrganizationsType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *StudentSubjectChoiceListType) Append(value StudentSubjectChoiceType) *StudentSubjectChoiceListType {
    
        if t == nil {
                t, _ = StudentSubjectChoiceListTypePointer(StudentSubjectChoiceListType{})
        }
        if t.StudentSubjectChoice == nil {
                t.StudentSubjectChoice = make([]StudentSubjectChoiceType, 0)
        }
        t.StudentSubjectChoice = append(t.StudentSubjectChoice, value)
        return t
}

func (t *StudentSubjectChoiceListType) AddNew() *StudentSubjectChoiceListType {
        if t == nil {
                t, _ = StudentSubjectChoiceListTypePointer(StudentSubjectChoiceListType{})
        }
        if t.StudentSubjectChoice == nil {
                t.StudentSubjectChoice = make([]StudentSubjectChoiceType, 0)
        }
        t.StudentSubjectChoice = append(t.StudentSubjectChoice, StudentSubjectChoiceType{})
        return t
}

// Disagree
func (t *StudentSubjectChoiceListType) Last() *StudentSubjectChoiceType {
  if t.StudentSubjectChoice == nil {
    t = t.AddNew()
    }
        return &(t.StudentSubjectChoice[len(t.StudentSubjectChoice)-1])
}


  // Matt's Append is my AddNew
  func (t *StatisticalAreasType) Append(value StatisticalAreaType) *StatisticalAreasType {
    
        if t == nil {
                t, _ = StatisticalAreasTypePointer(StatisticalAreasType{})
        }
        if t.StatisticalArea == nil {
                t.StatisticalArea = make([]StatisticalAreaType, 0)
        }
        t.StatisticalArea = append(t.StatisticalArea, value)
        return t
}

func (t *StatisticalAreasType) AddNew() *StatisticalAreasType {
        if t == nil {
                t, _ = StatisticalAreasTypePointer(StatisticalAreasType{})
        }
        if t.StatisticalArea == nil {
                t.StatisticalArea = make([]StatisticalAreaType, 0)
        }
        t.StatisticalArea = append(t.StatisticalArea, StatisticalAreaType{})
        return t
}

// Disagree
func (t *StatisticalAreasType) Last() *StatisticalAreaType {
  if t.StatisticalArea == nil {
    t = t.AddNew()
    }
        return &(t.StatisticalArea[len(t.StatisticalArea)-1])
}


  // Matt's Append is my AddNew
  func (t *RelatedLearningStandardItemRefIdListType) Append(value RelatedLearningStandardItemRefIdType) *RelatedLearningStandardItemRefIdListType {
    
        if t == nil {
                t, _ = RelatedLearningStandardItemRefIdListTypePointer(RelatedLearningStandardItemRefIdListType{})
        }
        if t.LearningStandardItemRefId == nil {
                t.LearningStandardItemRefId = make([]RelatedLearningStandardItemRefIdType, 0)
        }
        t.LearningStandardItemRefId = append(t.LearningStandardItemRefId, value)
        return t
}

func (t *RelatedLearningStandardItemRefIdListType) AddNew() *RelatedLearningStandardItemRefIdListType {
        if t == nil {
                t, _ = RelatedLearningStandardItemRefIdListTypePointer(RelatedLearningStandardItemRefIdListType{})
        }
        if t.LearningStandardItemRefId == nil {
                t.LearningStandardItemRefId = make([]RelatedLearningStandardItemRefIdType, 0)
        }
        t.LearningStandardItemRefId = append(t.LearningStandardItemRefId, RelatedLearningStandardItemRefIdType{})
        return t
}

// Disagree
func (t *RelatedLearningStandardItemRefIdListType) Last() *RelatedLearningStandardItemRefIdType {
  if t.LearningStandardItemRefId == nil {
    t = t.AddNew()
    }
        return &(t.LearningStandardItemRefId[len(t.LearningStandardItemRefId)-1])
}


  // Matt's Append is my AddNew
  func (t *AGContextualQuestionListType) Append(value AGContextualQuestionType) *AGContextualQuestionListType {
    
        if t == nil {
                t, _ = AGContextualQuestionListTypePointer(AGContextualQuestionListType{})
        }
        if t.AGContextualQuestion == nil {
                t.AGContextualQuestion = make([]AGContextualQuestionType, 0)
        }
        t.AGContextualQuestion = append(t.AGContextualQuestion, value)
        return t
}

func (t *AGContextualQuestionListType) AddNew() *AGContextualQuestionListType {
        if t == nil {
                t, _ = AGContextualQuestionListTypePointer(AGContextualQuestionListType{})
        }
        if t.AGContextualQuestion == nil {
                t.AGContextualQuestion = make([]AGContextualQuestionType, 0)
        }
        t.AGContextualQuestion = append(t.AGContextualQuestion, AGContextualQuestionType{})
        return t
}

// Disagree
func (t *AGContextualQuestionListType) Last() *AGContextualQuestionType {
  if t.AGContextualQuestion == nil {
    t = t.AddNew()
    }
        return &(t.AGContextualQuestion[len(t.AGContextualQuestion)-1])
}


  // Matt's Append is my AddNew
  func (t *SchoolContactListType) Append(value SchoolContactType) *SchoolContactListType {
    
        if t == nil {
                t, _ = SchoolContactListTypePointer(SchoolContactListType{})
        }
        if t.SchoolContact == nil {
                t.SchoolContact = make([]SchoolContactType, 0)
        }
        t.SchoolContact = append(t.SchoolContact, value)
        return t
}

func (t *SchoolContactListType) AddNew() *SchoolContactListType {
        if t == nil {
                t, _ = SchoolContactListTypePointer(SchoolContactListType{})
        }
        if t.SchoolContact == nil {
                t.SchoolContact = make([]SchoolContactType, 0)
        }
        t.SchoolContact = append(t.SchoolContact, SchoolContactType{})
        return t
}

// Disagree
func (t *SchoolContactListType) Last() *SchoolContactType {
  if t.SchoolContact == nil {
    t = t.AddNew()
    }
        return &(t.SchoolContact[len(t.SchoolContact)-1])
}


  // Matt's Append is my AddNew
  func (t *ResourceUsage_ResourceReportLineList) Append(value ResourceUsage_ResourceReportLine) *ResourceUsage_ResourceReportLineList {
    
        if t == nil {
                t, _ = ResourceUsage_ResourceReportLineListPointer(ResourceUsage_ResourceReportLineList{})
        }
        if t.ResourceReportLine == nil {
                t.ResourceReportLine = make([]ResourceUsage_ResourceReportLine, 0)
        }
        t.ResourceReportLine = append(t.ResourceReportLine, value)
        return t
}

func (t *ResourceUsage_ResourceReportLineList) AddNew() *ResourceUsage_ResourceReportLineList {
        if t == nil {
                t, _ = ResourceUsage_ResourceReportLineListPointer(ResourceUsage_ResourceReportLineList{})
        }
        if t.ResourceReportLine == nil {
                t.ResourceReportLine = make([]ResourceUsage_ResourceReportLine, 0)
        }
        t.ResourceReportLine = append(t.ResourceReportLine, ResourceUsage_ResourceReportLine{})
        return t
}

// Disagree
func (t *ResourceUsage_ResourceReportLineList) Last() *ResourceUsage_ResourceReportLine {
  if t.ResourceReportLine == nil {
    t = t.AddNew()
    }
        return &(t.ResourceReportLine[len(t.ResourceReportLine)-1])
}


  // Matt's Append is my AddNew
  func (t *CalendarSummaryListType) Append(value string) *CalendarSummaryListType {
    
        if t == nil {
                t, _ = CalendarSummaryListTypePointer(CalendarSummaryListType{})
        }
        if t.CalendarSummaryRefId == nil {
                t.CalendarSummaryRefId = make([]string, 0)
        }
        t.CalendarSummaryRefId = append(t.CalendarSummaryRefId, value)
        return t
}

func (t *CalendarSummaryListType) AddNew() *CalendarSummaryListType {
        if t == nil {
                t, _ = CalendarSummaryListTypePointer(CalendarSummaryListType{})
        }
        if t.CalendarSummaryRefId == nil {
                t.CalendarSummaryRefId = make([]string, 0)
        }
        t.CalendarSummaryRefId = append(t.CalendarSummaryRefId, "")
        return t
}

// Disagree
func (t *CalendarSummaryListType) Last() *string {
  if t.CalendarSummaryRefId == nil {
    t = t.AddNew()
    }
        return &(t.CalendarSummaryRefId[len(t.CalendarSummaryRefId)-1])
}

      func (t *CalendarSummaryListType) AppendString(value interface{}) *CalendarSummaryListType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *NAPStudentResponseTestletListType) Append(value NAPTestletResponseType) *NAPStudentResponseTestletListType {
    
        if t == nil {
                t, _ = NAPStudentResponseTestletListTypePointer(NAPStudentResponseTestletListType{})
        }
        if t.Testlet == nil {
                t.Testlet = make([]NAPTestletResponseType, 0)
        }
        t.Testlet = append(t.Testlet, value)
        return t
}

func (t *NAPStudentResponseTestletListType) AddNew() *NAPStudentResponseTestletListType {
        if t == nil {
                t, _ = NAPStudentResponseTestletListTypePointer(NAPStudentResponseTestletListType{})
        }
        if t.Testlet == nil {
                t.Testlet = make([]NAPTestletResponseType, 0)
        }
        t.Testlet = append(t.Testlet, NAPTestletResponseType{})
        return t
}

// Disagree
func (t *NAPStudentResponseTestletListType) Last() *NAPTestletResponseType {
  if t.Testlet == nil {
    t = t.AddNew()
    }
        return &(t.Testlet[len(t.Testlet)-1])
}


  // Matt's Append is my AddNew
  func (t *PublishingPermissionListType) Append(value PublishingPermissionType) *PublishingPermissionListType {
    
        if t == nil {
                t, _ = PublishingPermissionListTypePointer(PublishingPermissionListType{})
        }
        if t.PublishingPermission == nil {
                t.PublishingPermission = make([]PublishingPermissionType, 0)
        }
        t.PublishingPermission = append(t.PublishingPermission, value)
        return t
}

func (t *PublishingPermissionListType) AddNew() *PublishingPermissionListType {
        if t == nil {
                t, _ = PublishingPermissionListTypePointer(PublishingPermissionListType{})
        }
        if t.PublishingPermission == nil {
                t.PublishingPermission = make([]PublishingPermissionType, 0)
        }
        t.PublishingPermission = append(t.PublishingPermission, PublishingPermissionType{})
        return t
}

// Disagree
func (t *PublishingPermissionListType) Last() *PublishingPermissionType {
  if t.PublishingPermission == nil {
    t = t.AddNew()
    }
        return &(t.PublishingPermission[len(t.PublishingPermission)-1])
}


  // Matt's Append is my AddNew
  func (t *SystemRole_RoleScopeList) Append(value SystemRole_RoleScope) *SystemRole_RoleScopeList {
    
        if t == nil {
                t, _ = SystemRole_RoleScopeListPointer(SystemRole_RoleScopeList{})
        }
        if t.RoleScope == nil {
                t.RoleScope = make([]SystemRole_RoleScope, 0)
        }
        t.RoleScope = append(t.RoleScope, value)
        return t
}

func (t *SystemRole_RoleScopeList) AddNew() *SystemRole_RoleScopeList {
        if t == nil {
                t, _ = SystemRole_RoleScopeListPointer(SystemRole_RoleScopeList{})
        }
        if t.RoleScope == nil {
                t.RoleScope = make([]SystemRole_RoleScope, 0)
        }
        t.RoleScope = append(t.RoleScope, SystemRole_RoleScope{})
        return t
}

// Disagree
func (t *SystemRole_RoleScopeList) Last() *SystemRole_RoleScope {
  if t.RoleScope == nil {
    t = t.AddNew()
    }
        return &(t.RoleScope[len(t.RoleScope)-1])
}


  // Matt's Append is my AddNew
  func (t *CountryList2Type) Append(value CountryType) *CountryList2Type {
    
        if t == nil {
                t, _ = CountryList2TypePointer(CountryList2Type{})
        }
        if t.CountryOfResidency == nil {
                t.CountryOfResidency = make([]CountryType, 0)
        }
        t.CountryOfResidency = append(t.CountryOfResidency, value)
        return t
}

func (t *CountryList2Type) AddNew() *CountryList2Type {
        if t == nil {
                t, _ = CountryList2TypePointer(CountryList2Type{})
        }
        if t.CountryOfResidency == nil {
                t.CountryOfResidency = make([]CountryType, 0)
        }
        t.CountryOfResidency = append(t.CountryOfResidency, "")
        return t
}

// Disagree
func (t *CountryList2Type) Last() *CountryType {
  if t.CountryOfResidency == nil {
    t = t.AddNew()
    }
        return &(t.CountryOfResidency[len(t.CountryOfResidency)-1])
}

      func (t *CountryList2Type) AppendString(value interface{}) *CountryList2Type {
        return t.Append((CountryType)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *YearLevelsType) Append(value YearLevelType) *YearLevelsType {
    
        if t == nil {
                t, _ = YearLevelsTypePointer(YearLevelsType{})
        }
        if t.YearLevel == nil {
                t.YearLevel = make([]YearLevelType, 0)
        }
        t.YearLevel = append(t.YearLevel, value)
        return t
}

func (t *YearLevelsType) AddNew() *YearLevelsType {
        if t == nil {
                t, _ = YearLevelsTypePointer(YearLevelsType{})
        }
        if t.YearLevel == nil {
                t.YearLevel = make([]YearLevelType, 0)
        }
        t.YearLevel = append(t.YearLevel, YearLevelType{})
        return t
}

// Disagree
func (t *YearLevelsType) Last() *YearLevelType {
  if t.YearLevel == nil {
    t = t.AddNew()
    }
        return &(t.YearLevel[len(t.YearLevel)-1])
}


  // Matt's Append is my AddNew
  func (t *SystemRole_RoleList) Append(value SystemRole_Role) *SystemRole_RoleList {
    
        if t == nil {
                t, _ = SystemRole_RoleListPointer(SystemRole_RoleList{})
        }
        if t.Role == nil {
                t.Role = make([]SystemRole_Role, 0)
        }
        t.Role = append(t.Role, value)
        return t
}

func (t *SystemRole_RoleList) AddNew() *SystemRole_RoleList {
        if t == nil {
                t, _ = SystemRole_RoleListPointer(SystemRole_RoleList{})
        }
        if t.Role == nil {
                t.Role = make([]SystemRole_Role, 0)
        }
        t.Role = append(t.Role, SystemRole_Role{})
        return t
}

// Disagree
func (t *SystemRole_RoleList) Last() *SystemRole_Role {
  if t.Role == nil {
    t = t.AddNew()
    }
        return &(t.Role[len(t.Role)-1])
}


  // Matt's Append is my AddNew
  func (t *LibraryMessageListType) Append(value LibraryMessageType) *LibraryMessageListType {
    
        if t == nil {
                t, _ = LibraryMessageListTypePointer(LibraryMessageListType{})
        }
        if t.Message == nil {
                t.Message = make([]LibraryMessageType, 0)
        }
        t.Message = append(t.Message, value)
        return t
}

func (t *LibraryMessageListType) AddNew() *LibraryMessageListType {
        if t == nil {
                t, _ = LibraryMessageListTypePointer(LibraryMessageListType{})
        }
        if t.Message == nil {
                t.Message = make([]LibraryMessageType, 0)
        }
        t.Message = append(t.Message, LibraryMessageType{})
        return t
}

// Disagree
func (t *LibraryMessageListType) Last() *LibraryMessageType {
  if t.Message == nil {
    t = t.AddNew()
    }
        return &(t.Message[len(t.Message)-1])
}


  // Matt's Append is my AddNew
  func (t *SIF_MetadataType_TimeElements) Append(value TimeElementType) *SIF_MetadataType_TimeElements {
    
        if t == nil {
                t, _ = SIF_MetadataType_TimeElementsPointer(SIF_MetadataType_TimeElements{})
        }
        if t.TimeElement == nil {
                t.TimeElement = make([]TimeElementType, 0)
        }
        t.TimeElement = append(t.TimeElement, value)
        return t
}

func (t *SIF_MetadataType_TimeElements) AddNew() *SIF_MetadataType_TimeElements {
        if t == nil {
                t, _ = SIF_MetadataType_TimeElementsPointer(SIF_MetadataType_TimeElements{})
        }
        if t.TimeElement == nil {
                t.TimeElement = make([]TimeElementType, 0)
        }
        t.TimeElement = append(t.TimeElement, TimeElementType{})
        return t
}

// Disagree
func (t *SIF_MetadataType_TimeElements) Last() *TimeElementType {
  if t.TimeElement == nil {
    t = t.AddNew()
    }
        return &(t.TimeElement[len(t.TimeElement)-1])
}


  // Matt's Append is my AddNew
  func (t *AddressCollectionReportingListType) Append(value AddressCollectionReportingType) *AddressCollectionReportingListType {
    
        if t == nil {
                t, _ = AddressCollectionReportingListTypePointer(AddressCollectionReportingListType{})
        }
        if t.AddressCollectionReporting == nil {
                t.AddressCollectionReporting = make([]AddressCollectionReportingType, 0)
        }
        t.AddressCollectionReporting = append(t.AddressCollectionReporting, value)
        return t
}

func (t *AddressCollectionReportingListType) AddNew() *AddressCollectionReportingListType {
        if t == nil {
                t, _ = AddressCollectionReportingListTypePointer(AddressCollectionReportingListType{})
        }
        if t.AddressCollectionReporting == nil {
                t.AddressCollectionReporting = make([]AddressCollectionReportingType, 0)
        }
        t.AddressCollectionReporting = append(t.AddressCollectionReporting, AddressCollectionReportingType{})
        return t
}

// Disagree
func (t *AddressCollectionReportingListType) Last() *AddressCollectionReportingType {
  if t.AddressCollectionReporting == nil {
    t = t.AddNew()
    }
        return &(t.AddressCollectionReporting[len(t.AddressCollectionReporting)-1])
}


  // Matt's Append is my AddNew
  func (t *EssentialMaterialsType) Append(value string) *EssentialMaterialsType {
    
        if t == nil {
                t, _ = EssentialMaterialsTypePointer(EssentialMaterialsType{})
        }
        if t.EssentialMaterial == nil {
                t.EssentialMaterial = make([]string, 0)
        }
        t.EssentialMaterial = append(t.EssentialMaterial, value)
        return t
}

func (t *EssentialMaterialsType) AddNew() *EssentialMaterialsType {
        if t == nil {
                t, _ = EssentialMaterialsTypePointer(EssentialMaterialsType{})
        }
        if t.EssentialMaterial == nil {
                t.EssentialMaterial = make([]string, 0)
        }
        t.EssentialMaterial = append(t.EssentialMaterial, "")
        return t
}

// Disagree
func (t *EssentialMaterialsType) Last() *string {
  if t.EssentialMaterial == nil {
    t = t.AddNew()
    }
        return &(t.EssentialMaterial[len(t.EssentialMaterial)-1])
}

      func (t *EssentialMaterialsType) AppendString(value interface{}) *EssentialMaterialsType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *CountryListType) Append(value CountryType) *CountryListType {
    
        if t == nil {
                t, _ = CountryListTypePointer(CountryListType{})
        }
        if t.CountryOfCitizenship == nil {
                t.CountryOfCitizenship = make([]CountryType, 0)
        }
        t.CountryOfCitizenship = append(t.CountryOfCitizenship, value)
        return t
}

func (t *CountryListType) AddNew() *CountryListType {
        if t == nil {
                t, _ = CountryListTypePointer(CountryListType{})
        }
        if t.CountryOfCitizenship == nil {
                t.CountryOfCitizenship = make([]CountryType, 0)
        }
        t.CountryOfCitizenship = append(t.CountryOfCitizenship, "")
        return t
}

// Disagree
func (t *CountryListType) Last() *CountryType {
  if t.CountryOfCitizenship == nil {
    t = t.AddNew()
    }
        return &(t.CountryOfCitizenship[len(t.CountryOfCitizenship)-1])
}

      func (t *CountryListType) AppendString(value interface{}) *CountryListType {
        return t.Append((CountryType)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *StatementCodesType) Append(value string) *StatementCodesType {
    
        if t == nil {
                t, _ = StatementCodesTypePointer(StatementCodesType{})
        }
        if t.StatementCode == nil {
                t.StatementCode = make([]string, 0)
        }
        t.StatementCode = append(t.StatementCode, value)
        return t
}

func (t *StatementCodesType) AddNew() *StatementCodesType {
        if t == nil {
                t, _ = StatementCodesTypePointer(StatementCodesType{})
        }
        if t.StatementCode == nil {
                t.StatementCode = make([]string, 0)
        }
        t.StatementCode = append(t.StatementCode, "")
        return t
}

// Disagree
func (t *StatementCodesType) Last() *string {
  if t.StatementCode == nil {
    t = t.AddNew()
    }
        return &(t.StatementCode[len(t.StatementCode)-1])
}

      func (t *StatementCodesType) AppendString(value interface{}) *StatementCodesType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *AssignmentListType) Append(value string) *AssignmentListType {
    
        if t == nil {
                t, _ = AssignmentListTypePointer(AssignmentListType{})
        }
        if t.GradingAssignmentRefId == nil {
                t.GradingAssignmentRefId = make([]string, 0)
        }
        t.GradingAssignmentRefId = append(t.GradingAssignmentRefId, value)
        return t
}

func (t *AssignmentListType) AddNew() *AssignmentListType {
        if t == nil {
                t, _ = AssignmentListTypePointer(AssignmentListType{})
        }
        if t.GradingAssignmentRefId == nil {
                t.GradingAssignmentRefId = make([]string, 0)
        }
        t.GradingAssignmentRefId = append(t.GradingAssignmentRefId, "")
        return t
}

// Disagree
func (t *AssignmentListType) Last() *string {
  if t.GradingAssignmentRefId == nil {
    t = t.AddNew()
    }
        return &(t.GradingAssignmentRefId[len(t.GradingAssignmentRefId)-1])
}

      func (t *AssignmentListType) AppendString(value interface{}) *AssignmentListType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *HouseholdListType) Append(value LocalIdType) *HouseholdListType {
    
        if t == nil {
                t, _ = HouseholdListTypePointer(HouseholdListType{})
        }
        if t.Household == nil {
                t.Household = make([]LocalIdType, 0)
        }
        t.Household = append(t.Household, value)
        return t
}

func (t *HouseholdListType) AddNew() *HouseholdListType {
        if t == nil {
                t, _ = HouseholdListTypePointer(HouseholdListType{})
        }
        if t.Household == nil {
                t.Household = make([]LocalIdType, 0)
        }
        t.Household = append(t.Household, "")
        return t
}

// Disagree
func (t *HouseholdListType) Last() *LocalIdType {
  if t.Household == nil {
    t = t.AddNew()
    }
        return &(t.Household[len(t.Household)-1])
}

      func (t *HouseholdListType) AppendString(value interface{}) *HouseholdListType {
        return t.Append((LocalIdType)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *ScoreListType) Append(value ScoreType) *ScoreListType {
    
        if t == nil {
                t, _ = ScoreListTypePointer(ScoreListType{})
        }
        if t.Score == nil {
                t.Score = make([]ScoreType, 0)
        }
        t.Score = append(t.Score, value)
        return t
}

func (t *ScoreListType) AddNew() *ScoreListType {
        if t == nil {
                t, _ = ScoreListTypePointer(ScoreListType{})
        }
        if t.Score == nil {
                t.Score = make([]ScoreType, 0)
        }
        t.Score = append(t.Score, ScoreType{})
        return t
}

// Disagree
func (t *ScoreListType) Last() *ScoreType {
  if t.Score == nil {
    t = t.AddNew()
    }
        return &(t.Score[len(t.Score)-1])
}


  // Matt's Append is my AddNew
  func (t *NAPLANClassListType) Append(value string) *NAPLANClassListType {
    
        if t == nil {
                t, _ = NAPLANClassListTypePointer(NAPLANClassListType{})
        }
        if t.ClassCode == nil {
                t.ClassCode = make([]string, 0)
        }
        t.ClassCode = append(t.ClassCode, value)
        return t
}

func (t *NAPLANClassListType) AddNew() *NAPLANClassListType {
        if t == nil {
                t, _ = NAPLANClassListTypePointer(NAPLANClassListType{})
        }
        if t.ClassCode == nil {
                t.ClassCode = make([]string, 0)
        }
        t.ClassCode = append(t.ClassCode, "")
        return t
}

// Disagree
func (t *NAPLANClassListType) Last() *string {
  if t.ClassCode == nil {
    t = t.AddNew()
    }
        return &(t.ClassCode[len(t.ClassCode)-1])
}

      func (t *NAPLANClassListType) AppendString(value interface{}) *NAPLANClassListType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *ExpenseAccountsType) Append(value ExpenseAccountType) *ExpenseAccountsType {
    
        if t == nil {
                t, _ = ExpenseAccountsTypePointer(ExpenseAccountsType{})
        }
        if t.ExpenseAccount == nil {
                t.ExpenseAccount = make([]ExpenseAccountType, 0)
        }
        t.ExpenseAccount = append(t.ExpenseAccount, value)
        return t
}

func (t *ExpenseAccountsType) AddNew() *ExpenseAccountsType {
        if t == nil {
                t, _ = ExpenseAccountsTypePointer(ExpenseAccountsType{})
        }
        if t.ExpenseAccount == nil {
                t.ExpenseAccount = make([]ExpenseAccountType, 0)
        }
        t.ExpenseAccount = append(t.ExpenseAccount, ExpenseAccountType{})
        return t
}

// Disagree
func (t *ExpenseAccountsType) Last() *ExpenseAccountType {
  if t.ExpenseAccount == nil {
    t = t.AddNew()
    }
        return &(t.ExpenseAccount[len(t.ExpenseAccount)-1])
}


  // Matt's Append is my AddNew
  func (t *PNPCodeListType) Append(value AUCodeSetsPNPCodeType) *PNPCodeListType {
    
        if t == nil {
                t, _ = PNPCodeListTypePointer(PNPCodeListType{})
        }
        if t.PNPCode == nil {
                t.PNPCode = make([]AUCodeSetsPNPCodeType, 0)
        }
        t.PNPCode = append(t.PNPCode, value)
        return t
}

func (t *PNPCodeListType) AddNew() *PNPCodeListType {
        if t == nil {
                t, _ = PNPCodeListTypePointer(PNPCodeListType{})
        }
        if t.PNPCode == nil {
                t.PNPCode = make([]AUCodeSetsPNPCodeType, 0)
        }
        t.PNPCode = append(t.PNPCode, "")
        return t
}

// Disagree
func (t *PNPCodeListType) Last() *AUCodeSetsPNPCodeType {
  if t.PNPCode == nil {
    t = t.AddNew()
    }
        return &(t.PNPCode[len(t.PNPCode)-1])
}

      func (t *PNPCodeListType) AppendString(value interface{}) *PNPCodeListType {
        return t.Append((AUCodeSetsPNPCodeType)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *ScheduledTeacherListType) Append(value TeacherCoverType) *ScheduledTeacherListType {
    
        if t == nil {
                t, _ = ScheduledTeacherListTypePointer(ScheduledTeacherListType{})
        }
        if t.TeacherCover == nil {
                t.TeacherCover = make([]TeacherCoverType, 0)
        }
        t.TeacherCover = append(t.TeacherCover, value)
        return t
}

func (t *ScheduledTeacherListType) AddNew() *ScheduledTeacherListType {
        if t == nil {
                t, _ = ScheduledTeacherListTypePointer(ScheduledTeacherListType{})
        }
        if t.TeacherCover == nil {
                t.TeacherCover = make([]TeacherCoverType, 0)
        }
        t.TeacherCover = append(t.TeacherCover, TeacherCoverType{})
        return t
}

// Disagree
func (t *ScheduledTeacherListType) Last() *TeacherCoverType {
  if t.TeacherCover == nil {
    t = t.AddNew()
    }
        return &(t.TeacherCover[len(t.TeacherCover)-1])
}


  // Matt's Append is my AddNew
  func (t *LearningStandardListType) Append(value LearningStandardType) *LearningStandardListType {
    
        if t == nil {
                t, _ = LearningStandardListTypePointer(LearningStandardListType{})
        }
        if t.LearningStandard == nil {
                t.LearningStandard = make([]LearningStandardType, 0)
        }
        t.LearningStandard = append(t.LearningStandard, value)
        return t
}

func (t *LearningStandardListType) AddNew() *LearningStandardListType {
        if t == nil {
                t, _ = LearningStandardListTypePointer(LearningStandardListType{})
        }
        if t.LearningStandard == nil {
                t.LearningStandard = make([]LearningStandardType, 0)
        }
        t.LearningStandard = append(t.LearningStandard, LearningStandardType{})
        return t
}

// Disagree
func (t *LearningStandardListType) Last() *LearningStandardType {
  if t.LearningStandard == nil {
    t = t.AddNew()
    }
        return &(t.LearningStandard[len(t.LearningStandard)-1])
}


  // Matt's Append is my AddNew
  func (t *GradingScoreListType) Append(value AssignmentScoreType) *GradingScoreListType {
    
        if t == nil {
                t, _ = GradingScoreListTypePointer(GradingScoreListType{})
        }
        if t.GradingAssignmentScore == nil {
                t.GradingAssignmentScore = make([]AssignmentScoreType, 0)
        }
        t.GradingAssignmentScore = append(t.GradingAssignmentScore, value)
        return t
}

func (t *GradingScoreListType) AddNew() *GradingScoreListType {
        if t == nil {
                t, _ = GradingScoreListTypePointer(GradingScoreListType{})
        }
        if t.GradingAssignmentScore == nil {
                t.GradingAssignmentScore = make([]AssignmentScoreType, 0)
        }
        t.GradingAssignmentScore = append(t.GradingAssignmentScore, AssignmentScoreType{})
        return t
}

// Disagree
func (t *GradingScoreListType) Last() *AssignmentScoreType {
  if t.GradingAssignmentScore == nil {
    t = t.AddNew()
    }
        return &(t.GradingAssignmentScore[len(t.GradingAssignmentScore)-1])
}


  // Matt's Append is my AddNew
  func (t *LearningResourcesType) Append(value string) *LearningResourcesType {
    
        if t == nil {
                t, _ = LearningResourcesTypePointer(LearningResourcesType{})
        }
        if t.LearningResourceRefId == nil {
                t.LearningResourceRefId = make([]string, 0)
        }
        t.LearningResourceRefId = append(t.LearningResourceRefId, value)
        return t
}

func (t *LearningResourcesType) AddNew() *LearningResourcesType {
        if t == nil {
                t, _ = LearningResourcesTypePointer(LearningResourcesType{})
        }
        if t.LearningResourceRefId == nil {
                t.LearningResourceRefId = make([]string, 0)
        }
        t.LearningResourceRefId = append(t.LearningResourceRefId, "")
        return t
}

// Disagree
func (t *LearningResourcesType) Last() *string {
  if t.LearningResourceRefId == nil {
    t = t.AddNew()
    }
        return &(t.LearningResourceRefId[len(t.LearningResourceRefId)-1])
}

      func (t *LearningResourcesType) AppendString(value interface{}) *LearningResourcesType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *RoomListType) Append(value string) *RoomListType {
    
        if t == nil {
                t, _ = RoomListTypePointer(RoomListType{})
        }
        if t.RoomInfoRefId == nil {
                t.RoomInfoRefId = make([]string, 0)
        }
        t.RoomInfoRefId = append(t.RoomInfoRefId, value)
        return t
}

func (t *RoomListType) AddNew() *RoomListType {
        if t == nil {
                t, _ = RoomListTypePointer(RoomListType{})
        }
        if t.RoomInfoRefId == nil {
                t.RoomInfoRefId = make([]string, 0)
        }
        t.RoomInfoRefId = append(t.RoomInfoRefId, "")
        return t
}

// Disagree
func (t *RoomListType) Last() *string {
  if t.RoomInfoRefId == nil {
    t = t.AddNew()
    }
        return &(t.RoomInfoRefId[len(t.RoomInfoRefId)-1])
}

      func (t *RoomListType) AppendString(value interface{}) *RoomListType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *NAPWritingRubricListType) Append(value NAPWritingRubricType) *NAPWritingRubricListType {
    
        if t == nil {
                t, _ = NAPWritingRubricListTypePointer(NAPWritingRubricListType{})
        }
        if t.NAPWritingRubric == nil {
                t.NAPWritingRubric = make([]NAPWritingRubricType, 0)
        }
        t.NAPWritingRubric = append(t.NAPWritingRubric, value)
        return t
}

func (t *NAPWritingRubricListType) AddNew() *NAPWritingRubricListType {
        if t == nil {
                t, _ = NAPWritingRubricListTypePointer(NAPWritingRubricListType{})
        }
        if t.NAPWritingRubric == nil {
                t.NAPWritingRubric = make([]NAPWritingRubricType, 0)
        }
        t.NAPWritingRubric = append(t.NAPWritingRubric, NAPWritingRubricType{})
        return t
}

// Disagree
func (t *NAPWritingRubricListType) Last() *NAPWritingRubricType {
  if t.NAPWritingRubric == nil {
    t = t.AddNew()
    }
        return &(t.NAPWritingRubric[len(t.NAPWritingRubric)-1])
}


  // Matt's Append is my AddNew
  func (t *CensusStudentListType) Append(value CensusStudentType) *CensusStudentListType {
    
        if t == nil {
                t, _ = CensusStudentListTypePointer(CensusStudentListType{})
        }
        if t.CensusStudent == nil {
                t.CensusStudent = make([]CensusStudentType, 0)
        }
        t.CensusStudent = append(t.CensusStudent, value)
        return t
}

func (t *CensusStudentListType) AddNew() *CensusStudentListType {
        if t == nil {
                t, _ = CensusStudentListTypePointer(CensusStudentListType{})
        }
        if t.CensusStudent == nil {
                t.CensusStudent = make([]CensusStudentType, 0)
        }
        t.CensusStudent = append(t.CensusStudent, CensusStudentType{})
        return t
}

// Disagree
func (t *CensusStudentListType) Last() *CensusStudentType {
  if t.CensusStudent == nil {
    t = t.AddNew()
    }
        return &(t.CensusStudent[len(t.CensusStudent)-1])
}


  // Matt's Append is my AddNew
  func (t *SymptomListType) Append(value string) *SymptomListType {
    
        if t == nil {
                t, _ = SymptomListTypePointer(SymptomListType{})
        }
        if t.Symptom == nil {
                t.Symptom = make([]string, 0)
        }
        t.Symptom = append(t.Symptom, value)
        return t
}

func (t *SymptomListType) AddNew() *SymptomListType {
        if t == nil {
                t, _ = SymptomListTypePointer(SymptomListType{})
        }
        if t.Symptom == nil {
                t.Symptom = make([]string, 0)
        }
        t.Symptom = append(t.Symptom, "")
        return t
}

// Disagree
func (t *SymptomListType) Last() *string {
  if t.Symptom == nil {
    t = t.AddNew()
    }
        return &(t.Symptom[len(t.Symptom)-1])
}

      func (t *SymptomListType) AppendString(value interface{}) *SymptomListType {
        return t.Append((string)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }

  // Matt's Append is my AddNew
  func (t *StimulusLocalIdListType) Append(value LocalIdType) *StimulusLocalIdListType {
    
        if t == nil {
                t, _ = StimulusLocalIdListTypePointer(StimulusLocalIdListType{})
        }
        if t.StimulusLocalId == nil {
                t.StimulusLocalId = make([]LocalIdType, 0)
        }
        t.StimulusLocalId = append(t.StimulusLocalId, value)
        return t
}

func (t *StimulusLocalIdListType) AddNew() *StimulusLocalIdListType {
        if t == nil {
                t, _ = StimulusLocalIdListTypePointer(StimulusLocalIdListType{})
        }
        if t.StimulusLocalId == nil {
                t.StimulusLocalId = make([]LocalIdType, 0)
        }
        t.StimulusLocalId = append(t.StimulusLocalId, "")
        return t
}

// Disagree
func (t *StimulusLocalIdListType) Last() *LocalIdType {
  if t.StimulusLocalId == nil {
    t = t.AddNew()
    }
        return &(t.StimulusLocalId[len(t.StimulusLocalId)-1])
}

      func (t *StimulusLocalIdListType) AppendString(value interface{}) *StimulusLocalIdListType {
        return t.Append((LocalIdType)(fmt.Sprint(reflect.ValueOf(value).Elem().Interface())))
        }
  // XXXXX
func (t *AUCodeSetsAGSubmissionStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAGSubmissionStatusTypePointer(value interface{}) (*AUCodeSetsAGSubmissionStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAGSubmissionStatusType:
 		return value.(*AUCodeSetsAGSubmissionStatusType), true
        case AUCodeSetsAGSubmissionStatusType:
 		v, _ := value.(AUCodeSetsAGSubmissionStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAGSubmissionStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAGSubmissionStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAGSubmissionStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *CountryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func CountryTypePointer(value interface{}) (*CountryType, bool) {
switch t := value.(type) {
 	case *CountryType:
 		return value.(*CountryType), true
        case CountryType:
 		v, _ := value.(CountryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := CountryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := CountryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to CountryType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsScheduledActivityTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsScheduledActivityTypeTypePointer(value interface{}) (*AUCodeSetsScheduledActivityTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsScheduledActivityTypeType:
 		return value.(*AUCodeSetsScheduledActivityTypeType), true
        case AUCodeSetsScheduledActivityTypeType:
 		v, _ := value.(AUCodeSetsScheduledActivityTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsScheduledActivityTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsScheduledActivityTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsScheduledActivityTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsEntryTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEntryTypeTypePointer(value interface{}) (*AUCodeSetsEntryTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEntryTypeType:
 		return value.(*AUCodeSetsEntryTypeType), true
        case AUCodeSetsEntryTypeType:
 		v, _ := value.(AUCodeSetsEntryTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEntryTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEntryTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEntryTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsPictureSourceType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPictureSourceTypePointer(value interface{}) (*AUCodeSetsPictureSourceType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPictureSourceType:
 		return value.(*AUCodeSetsPictureSourceType), true
        case AUCodeSetsPictureSourceType:
 		v, _ := value.(AUCodeSetsPictureSourceType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPictureSourceType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPictureSourceType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPictureSourceType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsSchoolEnrollmentTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolEnrollmentTypeTypePointer(value interface{}) (*AUCodeSetsSchoolEnrollmentTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolEnrollmentTypeType:
 		return value.(*AUCodeSetsSchoolEnrollmentTypeType), true
        case AUCodeSetsSchoolEnrollmentTypeType:
 		v, _ := value.(AUCodeSetsSchoolEnrollmentTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolEnrollmentTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolEnrollmentTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolEnrollmentTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsNAPTestDomainType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPTestDomainTypePointer(value interface{}) (*AUCodeSetsNAPTestDomainType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPTestDomainType:
 		return value.(*AUCodeSetsNAPTestDomainType), true
        case AUCodeSetsNAPTestDomainType:
 		v, _ := value.(AUCodeSetsNAPTestDomainType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPTestDomainType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPTestDomainType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPTestDomainType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsPermissionCategoryCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPermissionCategoryCodeTypePointer(value interface{}) (*AUCodeSetsPermissionCategoryCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPermissionCategoryCodeType:
 		return value.(*AUCodeSetsPermissionCategoryCodeType), true
        case AUCodeSetsPermissionCategoryCodeType:
 		v, _ := value.(AUCodeSetsPermissionCategoryCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPermissionCategoryCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPermissionCategoryCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPermissionCategoryCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *RefIdType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func RefIdTypePointer(value interface{}) (*RefIdType, bool) {
switch t := value.(type) {
 	case *RefIdType:
 		return value.(*RefIdType), true
        case RefIdType:
 		v, _ := value.(RefIdType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := RefIdType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := RefIdType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to RefIdType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsBirthdateVerificationType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsBirthdateVerificationTypePointer(value interface{}) (*AUCodeSetsBirthdateVerificationType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsBirthdateVerificationType:
 		return value.(*AUCodeSetsBirthdateVerificationType), true
        case AUCodeSetsBirthdateVerificationType:
 		v, _ := value.(AUCodeSetsBirthdateVerificationType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsBirthdateVerificationType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsBirthdateVerificationType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsBirthdateVerificationType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsStudentFamilyProgramTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsStudentFamilyProgramTypeTypePointer(value interface{}) (*AUCodeSetsStudentFamilyProgramTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsStudentFamilyProgramTypeType:
 		return value.(*AUCodeSetsStudentFamilyProgramTypeType), true
        case AUCodeSetsStudentFamilyProgramTypeType:
 		v, _ := value.(AUCodeSetsStudentFamilyProgramTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsStudentFamilyProgramTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsStudentFamilyProgramTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsStudentFamilyProgramTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsGroupCategoryCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsGroupCategoryCodeTypePointer(value interface{}) (*AUCodeSetsGroupCategoryCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsGroupCategoryCodeType:
 		return value.(*AUCodeSetsGroupCategoryCodeType), true
        case AUCodeSetsGroupCategoryCodeType:
 		v, _ := value.(AUCodeSetsGroupCategoryCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsGroupCategoryCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsGroupCategoryCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsGroupCategoryCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsPrePrimaryHoursType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPrePrimaryHoursTypePointer(value interface{}) (*AUCodeSetsPrePrimaryHoursType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPrePrimaryHoursType:
 		return value.(*AUCodeSetsPrePrimaryHoursType), true
        case AUCodeSetsPrePrimaryHoursType:
 		v, _ := value.(AUCodeSetsPrePrimaryHoursType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPrePrimaryHoursType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPrePrimaryHoursType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPrePrimaryHoursType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsNAPWritingGenreType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPWritingGenreTypePointer(value interface{}) (*AUCodeSetsNAPWritingGenreType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPWritingGenreType:
 		return value.(*AUCodeSetsNAPWritingGenreType), true
        case AUCodeSetsNAPWritingGenreType:
 		v, _ := value.(AUCodeSetsNAPWritingGenreType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPWritingGenreType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPWritingGenreType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPWritingGenreType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *ReportDataObjectType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ReportDataObjectTypePointer(value interface{}) (*ReportDataObjectType, bool) {
switch t := value.(type) {
 	case *ReportDataObjectType:
 		return value.(*ReportDataObjectType), true
        case ReportDataObjectType:
 		v, _ := value.(ReportDataObjectType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ReportDataObjectType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ReportDataObjectType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ReportDataObjectType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *BirthDateType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func BirthDateTypePointer(value interface{}) (*BirthDateType, bool) {
switch t := value.(type) {
 	case *BirthDateType:
 		return value.(*BirthDateType), true
        case BirthDateType:
 		v, _ := value.(BirthDateType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := BirthDateType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := BirthDateType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to BirthDateType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *SchoolURLType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func SchoolURLTypePointer(value interface{}) (*SchoolURLType, bool) {
switch t := value.(type) {
 	case *SchoolURLType:
 		return value.(*SchoolURLType), true
        case SchoolURLType:
 		v, _ := value.(SchoolURLType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := SchoolURLType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := SchoolURLType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to SchoolURLType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *MsgIdType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func MsgIdTypePointer(value interface{}) (*MsgIdType, bool) {
switch t := value.(type) {
 	case *MsgIdType:
 		return value.(*MsgIdType), true
        case MsgIdType:
 		v, _ := value.(MsgIdType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := MsgIdType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := MsgIdType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to MsgIdType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsFederalElectorateType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsFederalElectorateTypePointer(value interface{}) (*AUCodeSetsFederalElectorateType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsFederalElectorateType:
 		return value.(*AUCodeSetsFederalElectorateType), true
        case AUCodeSetsFederalElectorateType:
 		v, _ := value.(AUCodeSetsFederalElectorateType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsFederalElectorateType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsFederalElectorateType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsFederalElectorateType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *VersionWithWildcardsType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func VersionWithWildcardsTypePointer(value interface{}) (*VersionWithWildcardsType, bool) {
switch t := value.(type) {
 	case *VersionWithWildcardsType:
 		return value.(*VersionWithWildcardsType), true
        case VersionWithWildcardsType:
 		v, _ := value.(VersionWithWildcardsType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := VersionWithWildcardsType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := VersionWithWildcardsType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to VersionWithWildcardsType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsStaffActivityType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsStaffActivityTypePointer(value interface{}) (*AUCodeSetsStaffActivityType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsStaffActivityType:
 		return value.(*AUCodeSetsStaffActivityType), true
        case AUCodeSetsStaffActivityType:
 		v, _ := value.(AUCodeSetsStaffActivityType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsStaffActivityType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsStaffActivityType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsStaffActivityType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *GraduationDateType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func GraduationDateTypePointer(value interface{}) (*GraduationDateType, bool) {
switch t := value.(type) {
 	case *GraduationDateType:
 		return value.(*GraduationDateType), true
        case GraduationDateType:
 		v, _ := value.(GraduationDateType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := GraduationDateType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := GraduationDateType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to GraduationDateType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsWellbeingEventTimePeriodType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingEventTimePeriodTypePointer(value interface{}) (*AUCodeSetsWellbeingEventTimePeriodType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingEventTimePeriodType:
 		return value.(*AUCodeSetsWellbeingEventTimePeriodType), true
        case AUCodeSetsWellbeingEventTimePeriodType:
 		v, _ := value.(AUCodeSetsWellbeingEventTimePeriodType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingEventTimePeriodType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingEventTimePeriodType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingEventTimePeriodType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *OnTimeGraduationYearType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func OnTimeGraduationYearTypePointer(value interface{}) (*OnTimeGraduationYearType, bool) {
switch t := value.(type) {
 	case *OnTimeGraduationYearType:
 		return value.(*OnTimeGraduationYearType), true
        case OnTimeGraduationYearType:
 		v, _ := value.(OnTimeGraduationYearType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := OnTimeGraduationYearType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := OnTimeGraduationYearType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to OnTimeGraduationYearType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsWellbeingEventCategoryClassType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingEventCategoryClassTypePointer(value interface{}) (*AUCodeSetsWellbeingEventCategoryClassType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingEventCategoryClassType:
 		return value.(*AUCodeSetsWellbeingEventCategoryClassType), true
        case AUCodeSetsWellbeingEventCategoryClassType:
 		v, _ := value.(AUCodeSetsWellbeingEventCategoryClassType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingEventCategoryClassType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingEventCategoryClassType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingEventCategoryClassType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsNameUsageTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNameUsageTypeTypePointer(value interface{}) (*AUCodeSetsNameUsageTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNameUsageTypeType:
 		return value.(*AUCodeSetsNameUsageTypeType), true
        case AUCodeSetsNameUsageTypeType:
 		v, _ := value.(AUCodeSetsNameUsageTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNameUsageTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNameUsageTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNameUsageTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *Bool) Bool() bool {
  return bool((reflect.ValueOf(*t).Interface()).(Bool))
  }

  func BoolPointer(value interface{}) (*Bool, bool) {
switch t := value.(type) {
        case *Bool:
                return value.(*Bool), true
        case Bool:
                v, _ := value.(Bool)
                return &v, true
        case *bool:
                vstr, _ := value.(*bool)
                v := Bool(*vstr)
                return &v, true
        case bool:
                vstr, _ := value.(bool)
                v := Bool(vstr)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Bool\n", t, value)
        }
        return nil, false
  }

  // XXXXX
func (t *AUCodeSetsFFPOSStatusCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsFFPOSStatusCodeTypePointer(value interface{}) (*AUCodeSetsFFPOSStatusCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsFFPOSStatusCodeType:
 		return value.(*AUCodeSetsFFPOSStatusCodeType), true
        case AUCodeSetsFFPOSStatusCodeType:
 		v, _ := value.(AUCodeSetsFFPOSStatusCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsFFPOSStatusCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsFFPOSStatusCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsFFPOSStatusCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsPNPCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPNPCodeTypePointer(value interface{}) (*AUCodeSetsPNPCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPNPCodeType:
 		return value.(*AUCodeSetsPNPCodeType), true
        case AUCodeSetsPNPCodeType:
 		v, _ := value.(AUCodeSetsPNPCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPNPCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPNPCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPNPCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsSchoolSystemType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolSystemTypePointer(value interface{}) (*AUCodeSetsSchoolSystemType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolSystemType:
 		return value.(*AUCodeSetsSchoolSystemType), true
        case AUCodeSetsSchoolSystemType:
 		v, _ := value.(AUCodeSetsSchoolSystemType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolSystemType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolSystemType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolSystemType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsNAPTestItemTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPTestItemTypeTypePointer(value interface{}) (*AUCodeSetsNAPTestItemTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPTestItemTypeType:
 		return value.(*AUCodeSetsNAPTestItemTypeType), true
        case AUCodeSetsNAPTestItemTypeType:
 		v, _ := value.(AUCodeSetsNAPTestItemTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPTestItemTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPTestItemTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPTestItemTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAustralianStandardGeographicalClassificationASGCType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAustralianStandardGeographicalClassificationASGCTypePointer(value interface{}) (*AUCodeSetsAustralianStandardGeographicalClassificationASGCType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAustralianStandardGeographicalClassificationASGCType:
 		return value.(*AUCodeSetsAustralianStandardGeographicalClassificationASGCType), true
        case AUCodeSetsAustralianStandardGeographicalClassificationASGCType:
 		v, _ := value.(AUCodeSetsAustralianStandardGeographicalClassificationASGCType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAustralianStandardGeographicalClassificationASGCType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAustralianStandardGeographicalClassificationASGCType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAustralianStandardGeographicalClassificationASGCType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsSexCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSexCodeTypePointer(value interface{}) (*AUCodeSetsSexCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSexCodeType:
 		return value.(*AUCodeSetsSexCodeType), true
        case AUCodeSetsSexCodeType:
 		v, _ := value.(AUCodeSetsSexCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSexCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSexCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSexCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *SchoolYearType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func SchoolYearTypePointer(value interface{}) (*SchoolYearType, bool) {
switch t := value.(type) {
 	case *SchoolYearType:
 		return value.(*SchoolYearType), true
        case SchoolYearType:
 		v, _ := value.(SchoolYearType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := SchoolYearType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := SchoolYearType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to SchoolYearType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsActivityTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsActivityTypeTypePointer(value interface{}) (*AUCodeSetsActivityTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsActivityTypeType:
 		return value.(*AUCodeSetsActivityTypeType), true
        case AUCodeSetsActivityTypeType:
 		v, _ := value.(AUCodeSetsActivityTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsActivityTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsActivityTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsActivityTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsNAPTestItemMarkingTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPTestItemMarkingTypeTypePointer(value interface{}) (*AUCodeSetsNAPTestItemMarkingTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPTestItemMarkingTypeType:
 		return value.(*AUCodeSetsNAPTestItemMarkingTypeType), true
        case AUCodeSetsNAPTestItemMarkingTypeType:
 		v, _ := value.(AUCodeSetsNAPTestItemMarkingTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPTestItemMarkingTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPTestItemMarkingTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPTestItemMarkingTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *StateProvinceIdType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func StateProvinceIdTypePointer(value interface{}) (*StateProvinceIdType, bool) {
switch t := value.(type) {
 	case *StateProvinceIdType:
 		return value.(*StateProvinceIdType), true
        case StateProvinceIdType:
 		v, _ := value.(StateProvinceIdType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := StateProvinceIdType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := StateProvinceIdType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to StateProvinceIdType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsYearLevelCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsYearLevelCodeTypePointer(value interface{}) (*AUCodeSetsYearLevelCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsYearLevelCodeType:
 		return value.(*AUCodeSetsYearLevelCodeType), true
        case AUCodeSetsYearLevelCodeType:
 		v, _ := value.(AUCodeSetsYearLevelCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsYearLevelCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsYearLevelCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsYearLevelCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *ObjectType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ObjectTypePointer(value interface{}) (*ObjectType, bool) {
switch t := value.(type) {
 	case *ObjectType:
 		return value.(*ObjectType), true
        case ObjectType:
 		v, _ := value.(ObjectType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ObjectType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ObjectType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ObjectType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsElectronicIdTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsElectronicIdTypeTypePointer(value interface{}) (*AUCodeSetsElectronicIdTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsElectronicIdTypeType:
 		return value.(*AUCodeSetsElectronicIdTypeType), true
        case AUCodeSetsElectronicIdTypeType:
 		v, _ := value.(AUCodeSetsElectronicIdTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsElectronicIdTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsElectronicIdTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsElectronicIdTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *GUIDType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func GUIDTypePointer(value interface{}) (*GUIDType, bool) {
switch t := value.(type) {
 	case *GUIDType:
 		return value.(*GUIDType), true
        case GUIDType:
 		v, _ := value.(GUIDType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := GUIDType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := GUIDType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to GUIDType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsDetentionCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsDetentionCategoryTypePointer(value interface{}) (*AUCodeSetsDetentionCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsDetentionCategoryType:
 		return value.(*AUCodeSetsDetentionCategoryType), true
        case AUCodeSetsDetentionCategoryType:
 		v, _ := value.(AUCodeSetsDetentionCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsDetentionCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsDetentionCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsDetentionCategoryType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *String) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func StringPointer(value interface{}) (*String, bool) {
switch t := value.(type) {
 	case *String:
 		return value.(*String), true
        case String:
 		v, _ := value.(String)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := String(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := String(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to String\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAttendanceCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAttendanceCodeTypePointer(value interface{}) (*AUCodeSetsAttendanceCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAttendanceCodeType:
 		return value.(*AUCodeSetsAttendanceCodeType), true
        case AUCodeSetsAttendanceCodeType:
 		v, _ := value.(AUCodeSetsAttendanceCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAttendanceCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAttendanceCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAttendanceCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *ISO4217CurrencyNamesAndCodeElementsType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ISO4217CurrencyNamesAndCodeElementsTypePointer(value interface{}) (*ISO4217CurrencyNamesAndCodeElementsType, bool) {
switch t := value.(type) {
 	case *ISO4217CurrencyNamesAndCodeElementsType:
 		return value.(*ISO4217CurrencyNamesAndCodeElementsType), true
        case ISO4217CurrencyNamesAndCodeElementsType:
 		v, _ := value.(ISO4217CurrencyNamesAndCodeElementsType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ISO4217CurrencyNamesAndCodeElementsType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ISO4217CurrencyNamesAndCodeElementsType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ISO4217CurrencyNamesAndCodeElementsType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsActivityInvolvementCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsActivityInvolvementCodeTypePointer(value interface{}) (*AUCodeSetsActivityInvolvementCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsActivityInvolvementCodeType:
 		return value.(*AUCodeSetsActivityInvolvementCodeType), true
        case AUCodeSetsActivityInvolvementCodeType:
 		v, _ := value.(AUCodeSetsActivityInvolvementCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsActivityInvolvementCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsActivityInvolvementCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsActivityInvolvementCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *EducationalLevelType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func EducationalLevelTypePointer(value interface{}) (*EducationalLevelType, bool) {
switch t := value.(type) {
 	case *EducationalLevelType:
 		return value.(*EducationalLevelType), true
        case EducationalLevelType:
 		v, _ := value.(EducationalLevelType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := EducationalLevelType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := EducationalLevelType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to EducationalLevelType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *HomeroomNumberType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func HomeroomNumberTypePointer(value interface{}) (*HomeroomNumberType, bool) {
switch t := value.(type) {
 	case *HomeroomNumberType:
 		return value.(*HomeroomNumberType), true
        case HomeroomNumberType:
 		v, _ := value.(HomeroomNumberType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := HomeroomNumberType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := HomeroomNumberType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to HomeroomNumberType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsEventCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEventCategoryTypePointer(value interface{}) (*AUCodeSetsEventCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEventCategoryType:
 		return value.(*AUCodeSetsEventCategoryType), true
        case AUCodeSetsEventCategoryType:
 		v, _ := value.(AUCodeSetsEventCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEventCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEventCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEventCategoryType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsSourceCodeTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSourceCodeTypeTypePointer(value interface{}) (*AUCodeSetsSourceCodeTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSourceCodeTypeType:
 		return value.(*AUCodeSetsSourceCodeTypeType), true
        case AUCodeSetsSourceCodeTypeType:
 		v, _ := value.(AUCodeSetsSourceCodeTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSourceCodeTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSourceCodeTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSourceCodeTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsPersonalisedPlanType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPersonalisedPlanTypePointer(value interface{}) (*AUCodeSetsPersonalisedPlanType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPersonalisedPlanType:
 		return value.(*AUCodeSetsPersonalisedPlanType), true
        case AUCodeSetsPersonalisedPlanType:
 		v, _ := value.(AUCodeSetsPersonalisedPlanType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPersonalisedPlanType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPersonalisedPlanType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPersonalisedPlanType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAddressTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAddressTypeTypePointer(value interface{}) (*AUCodeSetsAddressTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAddressTypeType:
 		return value.(*AUCodeSetsAddressTypeType), true
        case AUCodeSetsAddressTypeType:
 		v, _ := value.(AUCodeSetsAddressTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAddressTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAddressTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAddressTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsNonSchoolEducationType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNonSchoolEducationTypePointer(value interface{}) (*AUCodeSetsNonSchoolEducationType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNonSchoolEducationType:
 		return value.(*AUCodeSetsNonSchoolEducationType), true
        case AUCodeSetsNonSchoolEducationType:
 		v, _ := value.(AUCodeSetsNonSchoolEducationType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNonSchoolEducationType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNonSchoolEducationType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNonSchoolEducationType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsNAPParticipationCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPParticipationCodeTypePointer(value interface{}) (*AUCodeSetsNAPParticipationCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPParticipationCodeType:
 		return value.(*AUCodeSetsNAPParticipationCodeType), true
        case AUCodeSetsNAPParticipationCodeType:
 		v, _ := value.(AUCodeSetsNAPParticipationCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPParticipationCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPParticipationCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPParticipationCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsReceivingLocationOfInstructionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsReceivingLocationOfInstructionTypePointer(value interface{}) (*AUCodeSetsReceivingLocationOfInstructionType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsReceivingLocationOfInstructionType:
 		return value.(*AUCodeSetsReceivingLocationOfInstructionType), true
        case AUCodeSetsReceivingLocationOfInstructionType:
 		v, _ := value.(AUCodeSetsReceivingLocationOfInstructionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsReceivingLocationOfInstructionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsReceivingLocationOfInstructionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsReceivingLocationOfInstructionType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsVisaSubClassType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsVisaSubClassTypePointer(value interface{}) (*AUCodeSetsVisaSubClassType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsVisaSubClassType:
 		return value.(*AUCodeSetsVisaSubClassType), true
        case AUCodeSetsVisaSubClassType:
 		v, _ := value.(AUCodeSetsVisaSubClassType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsVisaSubClassType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsVisaSubClassType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsVisaSubClassType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsFTPTStatusCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsFTPTStatusCodeTypePointer(value interface{}) (*AUCodeSetsFTPTStatusCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsFTPTStatusCodeType:
 		return value.(*AUCodeSetsFTPTStatusCodeType), true
        case AUCodeSetsFTPTStatusCodeType:
 		v, _ := value.(AUCodeSetsFTPTStatusCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsFTPTStatusCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsFTPTStatusCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsFTPTStatusCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsPermanentResidentStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPermanentResidentStatusTypePointer(value interface{}) (*AUCodeSetsPermanentResidentStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPermanentResidentStatusType:
 		return value.(*AUCodeSetsPermanentResidentStatusType), true
        case AUCodeSetsPermanentResidentStatusType:
 		v, _ := value.(AUCodeSetsPermanentResidentStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPermanentResidentStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPermanentResidentStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPermanentResidentStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsStateTerritoryCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsStateTerritoryCodeTypePointer(value interface{}) (*AUCodeSetsStateTerritoryCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsStateTerritoryCodeType:
 		return value.(*AUCodeSetsStateTerritoryCodeType), true
        case AUCodeSetsStateTerritoryCodeType:
 		v, _ := value.(AUCodeSetsStateTerritoryCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsStateTerritoryCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsStateTerritoryCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsStateTerritoryCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsWellbeingAppealStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingAppealStatusTypePointer(value interface{}) (*AUCodeSetsWellbeingAppealStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingAppealStatusType:
 		return value.(*AUCodeSetsWellbeingAppealStatusType), true
        case AUCodeSetsWellbeingAppealStatusType:
 		v, _ := value.(AUCodeSetsWellbeingAppealStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingAppealStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingAppealStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingAppealStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsEquipmentTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEquipmentTypeTypePointer(value interface{}) (*AUCodeSetsEquipmentTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEquipmentTypeType:
 		return value.(*AUCodeSetsEquipmentTypeType), true
        case AUCodeSetsEquipmentTypeType:
 		v, _ := value.(AUCodeSetsEquipmentTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEquipmentTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEquipmentTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEquipmentTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsACStrandType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsACStrandTypePointer(value interface{}) (*AUCodeSetsACStrandType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsACStrandType:
 		return value.(*AUCodeSetsACStrandType), true
        case AUCodeSetsACStrandType:
 		v, _ := value.(AUCodeSetsACStrandType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsACStrandType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsACStrandType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsACStrandType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsSessionTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSessionTypeTypePointer(value interface{}) (*AUCodeSetsSessionTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSessionTypeType:
 		return value.(*AUCodeSetsSessionTypeType), true
        case AUCodeSetsSessionTypeType:
 		v, _ := value.(AUCodeSetsSessionTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSessionTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSessionTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSessionTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *ServiceNameType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ServiceNameTypePointer(value interface{}) (*ServiceNameType, bool) {
switch t := value.(type) {
 	case *ServiceNameType:
 		return value.(*ServiceNameType), true
        case ServiceNameType:
 		v, _ := value.(ServiceNameType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ServiceNameType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ServiceNameType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ServiceNameType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsIndigenousStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsIndigenousStatusTypePointer(value interface{}) (*AUCodeSetsIndigenousStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsIndigenousStatusType:
 		return value.(*AUCodeSetsIndigenousStatusType), true
        case AUCodeSetsIndigenousStatusType:
 		v, _ := value.(AUCodeSetsIndigenousStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsIndigenousStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsIndigenousStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsIndigenousStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *URIOrBinaryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func URIOrBinaryTypePointer(value interface{}) (*URIOrBinaryType, bool) {
switch t := value.(type) {
 	case *URIOrBinaryType:
 		return value.(*URIOrBinaryType), true
        case URIOrBinaryType:
 		v, _ := value.(URIOrBinaryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := URIOrBinaryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := URIOrBinaryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to URIOrBinaryType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAttendanceStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAttendanceStatusTypePointer(value interface{}) (*AUCodeSetsAttendanceStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAttendanceStatusType:
 		return value.(*AUCodeSetsAttendanceStatusType), true
        case AUCodeSetsAttendanceStatusType:
 		v, _ := value.(AUCodeSetsAttendanceStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAttendanceStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAttendanceStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAttendanceStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsEnrollmentTimeFrameType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEnrollmentTimeFrameTypePointer(value interface{}) (*AUCodeSetsEnrollmentTimeFrameType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEnrollmentTimeFrameType:
 		return value.(*AUCodeSetsEnrollmentTimeFrameType), true
        case AUCodeSetsEnrollmentTimeFrameType:
 		v, _ := value.(AUCodeSetsEnrollmentTimeFrameType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEnrollmentTimeFrameType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEnrollmentTimeFrameType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEnrollmentTimeFrameType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsEmploymentTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEmploymentTypeTypePointer(value interface{}) (*AUCodeSetsEmploymentTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEmploymentTypeType:
 		return value.(*AUCodeSetsEmploymentTypeType), true
        case AUCodeSetsEmploymentTypeType:
 		v, _ := value.(AUCodeSetsEmploymentTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEmploymentTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEmploymentTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEmploymentTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *VisaSubClassCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func VisaSubClassCodeTypePointer(value interface{}) (*VisaSubClassCodeType, bool) {
switch t := value.(type) {
 	case *VisaSubClassCodeType:
 		return value.(*VisaSubClassCodeType), true
        case VisaSubClassCodeType:
 		v, _ := value.(VisaSubClassCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := VisaSubClassCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := VisaSubClassCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to VisaSubClassCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsSchoolEducationLevelTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolEducationLevelTypeTypePointer(value interface{}) (*AUCodeSetsSchoolEducationLevelTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolEducationLevelTypeType:
 		return value.(*AUCodeSetsSchoolEducationLevelTypeType), true
        case AUCodeSetsSchoolEducationLevelTypeType:
 		v, _ := value.(AUCodeSetsSchoolEducationLevelTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolEducationLevelTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolEducationLevelTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolEducationLevelTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAustralianCitizenshipStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAustralianCitizenshipStatusTypePointer(value interface{}) (*AUCodeSetsAustralianCitizenshipStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAustralianCitizenshipStatusType:
 		return value.(*AUCodeSetsAustralianCitizenshipStatusType), true
        case AUCodeSetsAustralianCitizenshipStatusType:
 		v, _ := value.(AUCodeSetsAustralianCitizenshipStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAustralianCitizenshipStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAustralianCitizenshipStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAustralianCitizenshipStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSets0792IdentificationProcedureType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSets0792IdentificationProcedureTypePointer(value interface{}) (*AUCodeSets0792IdentificationProcedureType, bool) {
switch t := value.(type) {
 	case *AUCodeSets0792IdentificationProcedureType:
 		return value.(*AUCodeSets0792IdentificationProcedureType), true
        case AUCodeSets0792IdentificationProcedureType:
 		v, _ := value.(AUCodeSets0792IdentificationProcedureType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSets0792IdentificationProcedureType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSets0792IdentificationProcedureType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSets0792IdentificationProcedureType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsWellbeingCharacteristicSubCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingCharacteristicSubCategoryTypePointer(value interface{}) (*AUCodeSetsWellbeingCharacteristicSubCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingCharacteristicSubCategoryType:
 		return value.(*AUCodeSetsWellbeingCharacteristicSubCategoryType), true
        case AUCodeSetsWellbeingCharacteristicSubCategoryType:
 		v, _ := value.(AUCodeSetsWellbeingCharacteristicSubCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingCharacteristicSubCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingCharacteristicSubCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingCharacteristicSubCategoryType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *DefinedProtocolsType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func DefinedProtocolsTypePointer(value interface{}) (*DefinedProtocolsType, bool) {
switch t := value.(type) {
 	case *DefinedProtocolsType:
 		return value.(*DefinedProtocolsType), true
        case DefinedProtocolsType:
 		v, _ := value.(DefinedProtocolsType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := DefinedProtocolsType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := DefinedProtocolsType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to DefinedProtocolsType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsSchoolLevelType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolLevelTypePointer(value interface{}) (*AUCodeSetsSchoolLevelType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolLevelType:
 		return value.(*AUCodeSetsSchoolLevelType), true
        case AUCodeSetsSchoolLevelType:
 		v, _ := value.(AUCodeSetsSchoolLevelType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolLevelType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolLevelType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolLevelType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *VersionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func VersionTypePointer(value interface{}) (*VersionType, bool) {
switch t := value.(type) {
 	case *VersionType:
 		return value.(*VersionType), true
        case VersionType:
 		v, _ := value.(VersionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := VersionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := VersionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to VersionType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsBoardingType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsBoardingTypePointer(value interface{}) (*AUCodeSetsBoardingType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsBoardingType:
 		return value.(*AUCodeSetsBoardingType), true
        case AUCodeSetsBoardingType:
 		v, _ := value.(AUCodeSetsBoardingType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsBoardingType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsBoardingType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsBoardingType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *LocalIdType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func LocalIdTypePointer(value interface{}) (*LocalIdType, bool) {
switch t := value.(type) {
 	case *LocalIdType:
 		return value.(*LocalIdType), true
        case LocalIdType:
 		v, _ := value.(LocalIdType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := LocalIdType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := LocalIdType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to LocalIdType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsExitWithdrawalStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsExitWithdrawalStatusTypePointer(value interface{}) (*AUCodeSetsExitWithdrawalStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsExitWithdrawalStatusType:
 		return value.(*AUCodeSetsExitWithdrawalStatusType), true
        case AUCodeSetsExitWithdrawalStatusType:
 		v, _ := value.(AUCodeSetsExitWithdrawalStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsExitWithdrawalStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsExitWithdrawalStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsExitWithdrawalStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsProgressLevelType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsProgressLevelTypePointer(value interface{}) (*AUCodeSetsProgressLevelType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsProgressLevelType:
 		return value.(*AUCodeSetsProgressLevelType), true
        case AUCodeSetsProgressLevelType:
 		v, _ := value.(AUCodeSetsProgressLevelType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsProgressLevelType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsProgressLevelType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsProgressLevelType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsTelephoneNumberTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsTelephoneNumberTypeTypePointer(value interface{}) (*AUCodeSetsTelephoneNumberTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsTelephoneNumberTypeType:
 		return value.(*AUCodeSetsTelephoneNumberTypeType), true
        case AUCodeSetsTelephoneNumberTypeType:
 		v, _ := value.(AUCodeSetsTelephoneNumberTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsTelephoneNumberTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsTelephoneNumberTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsTelephoneNumberTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *ProjectedGraduationYearType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ProjectedGraduationYearTypePointer(value interface{}) (*ProjectedGraduationYearType, bool) {
switch t := value.(type) {
 	case *ProjectedGraduationYearType:
 		return value.(*ProjectedGraduationYearType), true
        case ProjectedGraduationYearType:
 		v, _ := value.(ProjectedGraduationYearType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ProjectedGraduationYearType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ProjectedGraduationYearType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ProjectedGraduationYearType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGTypePointer(value interface{}) (*AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType:
 		return value.(*AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType), true
        case AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType:
 		v, _ := value.(AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsNAPResponseCorrectnessType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPResponseCorrectnessTypePointer(value interface{}) (*AUCodeSetsNAPResponseCorrectnessType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPResponseCorrectnessType:
 		return value.(*AUCodeSetsNAPResponseCorrectnessType), true
        case AUCodeSetsNAPResponseCorrectnessType:
 		v, _ := value.(AUCodeSetsNAPResponseCorrectnessType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPResponseCorrectnessType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPResponseCorrectnessType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPResponseCorrectnessType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAGContextQuestionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAGContextQuestionTypePointer(value interface{}) (*AUCodeSetsAGContextQuestionType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAGContextQuestionType:
 		return value.(*AUCodeSetsAGContextQuestionType), true
        case AUCodeSetsAGContextQuestionType:
 		v, _ := value.(AUCodeSetsAGContextQuestionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAGContextQuestionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAGContextQuestionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAGContextQuestionType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsDayValueCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsDayValueCodeTypePointer(value interface{}) (*AUCodeSetsDayValueCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsDayValueCodeType:
 		return value.(*AUCodeSetsDayValueCodeType), true
        case AUCodeSetsDayValueCodeType:
 		v, _ := value.(AUCodeSetsDayValueCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsDayValueCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsDayValueCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsDayValueCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsYesOrNoCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsYesOrNoCategoryTypePointer(value interface{}) (*AUCodeSetsYesOrNoCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsYesOrNoCategoryType:
 		return value.(*AUCodeSetsYesOrNoCategoryType), true
        case AUCodeSetsYesOrNoCategoryType:
 		v, _ := value.(AUCodeSetsYesOrNoCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsYesOrNoCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsYesOrNoCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsYesOrNoCategoryType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsEducationAgencyTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEducationAgencyTypeTypePointer(value interface{}) (*AUCodeSetsEducationAgencyTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEducationAgencyTypeType:
 		return value.(*AUCodeSetsEducationAgencyTypeType), true
        case AUCodeSetsEducationAgencyTypeType:
 		v, _ := value.(AUCodeSetsEducationAgencyTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEducationAgencyTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEducationAgencyTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEducationAgencyTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsEducationLevelType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEducationLevelTypePointer(value interface{}) (*AUCodeSetsEducationLevelType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEducationLevelType:
 		return value.(*AUCodeSetsEducationLevelType), true
        case AUCodeSetsEducationLevelType:
 		v, _ := value.(AUCodeSetsEducationLevelType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEducationLevelType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEducationLevelType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEducationLevelType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *PartialDateType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func PartialDateTypePointer(value interface{}) (*PartialDateType, bool) {
switch t := value.(type) {
 	case *PartialDateType:
 		return value.(*PartialDateType), true
        case PartialDateType:
 		v, _ := value.(PartialDateType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := PartialDateType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := PartialDateType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to PartialDateType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsMaritalStatusAIHWType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsMaritalStatusAIHWTypePointer(value interface{}) (*AUCodeSetsMaritalStatusAIHWType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsMaritalStatusAIHWType:
 		return value.(*AUCodeSetsMaritalStatusAIHWType), true
        case AUCodeSetsMaritalStatusAIHWType:
 		v, _ := value.(AUCodeSetsMaritalStatusAIHWType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsMaritalStatusAIHWType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsMaritalStatusAIHWType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsMaritalStatusAIHWType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsRelationshipToStudentType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsRelationshipToStudentTypePointer(value interface{}) (*AUCodeSetsRelationshipToStudentType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsRelationshipToStudentType:
 		return value.(*AUCodeSetsRelationshipToStudentType), true
        case AUCodeSetsRelationshipToStudentType:
 		v, _ := value.(AUCodeSetsRelationshipToStudentType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsRelationshipToStudentType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsRelationshipToStudentType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsRelationshipToStudentType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsWellbeingEventLocationType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingEventLocationTypePointer(value interface{}) (*AUCodeSetsWellbeingEventLocationType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingEventLocationType:
 		return value.(*AUCodeSetsWellbeingEventLocationType), true
        case AUCodeSetsWellbeingEventLocationType:
 		v, _ := value.(AUCodeSetsWellbeingEventLocationType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingEventLocationType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingEventLocationType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingEventLocationType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsEnglishProficiencyType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEnglishProficiencyTypePointer(value interface{}) (*AUCodeSetsEnglishProficiencyType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEnglishProficiencyType:
 		return value.(*AUCodeSetsEnglishProficiencyType), true
        case AUCodeSetsEnglishProficiencyType:
 		v, _ := value.(AUCodeSetsEnglishProficiencyType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEnglishProficiencyType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEnglishProficiencyType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEnglishProficiencyType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAustralianStandardClassificationOfLanguagesASCLTypePointer(value interface{}) (*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType:
 		return value.(*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType), true
        case AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType:
 		v, _ := value.(AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsSystemicStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSystemicStatusTypePointer(value interface{}) (*AUCodeSetsSystemicStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSystemicStatusType:
 		return value.(*AUCodeSetsSystemicStatusType), true
        case AUCodeSetsSystemicStatusType:
 		v, _ := value.(AUCodeSetsSystemicStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSystemicStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSystemicStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSystemicStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsOperationalStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsOperationalStatusTypePointer(value interface{}) (*AUCodeSetsOperationalStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsOperationalStatusType:
 		return value.(*AUCodeSetsOperationalStatusType), true
        case AUCodeSetsOperationalStatusType:
 		v, _ := value.(AUCodeSetsOperationalStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsOperationalStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsOperationalStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsOperationalStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsImmunisationCertificateStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsImmunisationCertificateStatusTypePointer(value interface{}) (*AUCodeSetsImmunisationCertificateStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsImmunisationCertificateStatusType:
 		return value.(*AUCodeSetsImmunisationCertificateStatusType), true
        case AUCodeSetsImmunisationCertificateStatusType:
 		v, _ := value.(AUCodeSetsImmunisationCertificateStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsImmunisationCertificateStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsImmunisationCertificateStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsImmunisationCertificateStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsWellbeingCharacteristicCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingCharacteristicCategoryTypePointer(value interface{}) (*AUCodeSetsWellbeingCharacteristicCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingCharacteristicCategoryType:
 		return value.(*AUCodeSetsWellbeingCharacteristicCategoryType), true
        case AUCodeSetsWellbeingCharacteristicCategoryType:
 		v, _ := value.(AUCodeSetsWellbeingCharacteristicCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingCharacteristicCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingCharacteristicCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingCharacteristicCategoryType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsPublicSchoolCatchmentStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPublicSchoolCatchmentStatusTypePointer(value interface{}) (*AUCodeSetsPublicSchoolCatchmentStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPublicSchoolCatchmentStatusType:
 		return value.(*AUCodeSetsPublicSchoolCatchmentStatusType), true
        case AUCodeSetsPublicSchoolCatchmentStatusType:
 		v, _ := value.(AUCodeSetsPublicSchoolCatchmentStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPublicSchoolCatchmentStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPublicSchoolCatchmentStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPublicSchoolCatchmentStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsSchoolSectorCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolSectorCodeTypePointer(value interface{}) (*AUCodeSetsSchoolSectorCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolSectorCodeType:
 		return value.(*AUCodeSetsSchoolSectorCodeType), true
        case AUCodeSetsSchoolSectorCodeType:
 		v, _ := value.(AUCodeSetsSchoolSectorCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolSectorCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolSectorCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolSectorCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *IdRefType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func IdRefTypePointer(value interface{}) (*IdRefType, bool) {
switch t := value.(type) {
 	case *IdRefType:
 		return value.(*IdRefType), true
        case IdRefType:
 		v, _ := value.(IdRefType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := IdRefType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := IdRefType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to IdRefType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAGCollectionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAGCollectionTypePointer(value interface{}) (*AUCodeSetsAGCollectionType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAGCollectionType:
 		return value.(*AUCodeSetsAGCollectionType), true
        case AUCodeSetsAGCollectionType:
 		v, _ := value.(AUCodeSetsAGCollectionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAGCollectionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAGCollectionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAGCollectionType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsStaffStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsStaffStatusTypePointer(value interface{}) (*AUCodeSetsStaffStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsStaffStatusType:
 		return value.(*AUCodeSetsStaffStatusType), true
        case AUCodeSetsStaffStatusType:
 		v, _ := value.(AUCodeSetsStaffStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsStaffStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsStaffStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsStaffStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsEventSubCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEventSubCategoryTypePointer(value interface{}) (*AUCodeSetsEventSubCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEventSubCategoryType:
 		return value.(*AUCodeSetsEventSubCategoryType), true
        case AUCodeSetsEventSubCategoryType:
 		v, _ := value.(AUCodeSetsEventSubCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEventSubCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEventSubCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEventSubCategoryType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *ObjectNameType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ObjectNameTypePointer(value interface{}) (*ObjectNameType, bool) {
switch t := value.(type) {
 	case *ObjectNameType:
 		return value.(*ObjectNameType), true
        case ObjectNameType:
 		v, _ := value.(ObjectNameType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ObjectNameType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ObjectNameType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ObjectNameType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsWellbeingCharacteristicClassificationType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingCharacteristicClassificationTypePointer(value interface{}) (*AUCodeSetsWellbeingCharacteristicClassificationType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingCharacteristicClassificationType:
 		return value.(*AUCodeSetsWellbeingCharacteristicClassificationType), true
        case AUCodeSetsWellbeingCharacteristicClassificationType:
 		v, _ := value.(AUCodeSetsWellbeingCharacteristicClassificationType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingCharacteristicClassificationType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingCharacteristicClassificationType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingCharacteristicClassificationType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAssessmentReportingMethodType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAssessmentReportingMethodTypePointer(value interface{}) (*AUCodeSetsAssessmentReportingMethodType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAssessmentReportingMethodType:
 		return value.(*AUCodeSetsAssessmentReportingMethodType), true
        case AUCodeSetsAssessmentReportingMethodType:
 		v, _ := value.(AUCodeSetsAssessmentReportingMethodType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAssessmentReportingMethodType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAssessmentReportingMethodType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAssessmentReportingMethodType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsCalendarEventType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsCalendarEventTypePointer(value interface{}) (*AUCodeSetsCalendarEventType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsCalendarEventType:
 		return value.(*AUCodeSetsCalendarEventType), true
        case AUCodeSetsCalendarEventType:
 		v, _ := value.(AUCodeSetsCalendarEventType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsCalendarEventType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsCalendarEventType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsCalendarEventType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *Float) Float() float64 {
  return float64((reflect.ValueOf(*t).Interface()).(Float))
  }

   func FloatPointer(value interface{}) (*Float, bool) {
switch t := value.(type) {
        case *Float:
                return value.(*Float), true
        case Float:
                v, _ := value.(Float)
                return &v, true
        case *float64:
                vstr, _ := value.(*float64)
                v := Float(*vstr)
                return &v, true
        case float64:
                vstr, _ := value.(float64)
                v := Float(vstr)
                return &v, true
        case *float32:
                vstr, _ := value.(*float32)
                v := Float(float64(*vstr))
                return &v, true
        case float32:
                vstr, _ := value.(float32)
                v := Float(float64(vstr))
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Float\n", t, value)
        }
        return nil, false
  }
  // XXXXX
func (t *AUCodeSetsWellbeingAlertCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingAlertCategoryTypePointer(value interface{}) (*AUCodeSetsWellbeingAlertCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingAlertCategoryType:
 		return value.(*AUCodeSetsWellbeingAlertCategoryType), true
        case AUCodeSetsWellbeingAlertCategoryType:
 		v, _ := value.(AUCodeSetsWellbeingAlertCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingAlertCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingAlertCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingAlertCategoryType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsSchoolLocationType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolLocationTypePointer(value interface{}) (*AUCodeSetsSchoolLocationType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolLocationType:
 		return value.(*AUCodeSetsSchoolLocationType), true
        case AUCodeSetsSchoolLocationType:
 		v, _ := value.(AUCodeSetsSchoolLocationType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolLocationType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolLocationType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolLocationType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsSchoolFocusCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolFocusCodeTypePointer(value interface{}) (*AUCodeSetsSchoolFocusCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolFocusCodeType:
 		return value.(*AUCodeSetsSchoolFocusCodeType), true
        case AUCodeSetsSchoolFocusCodeType:
 		v, _ := value.(AUCodeSetsSchoolFocusCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolFocusCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolFocusCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolFocusCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsProgramFundingSourceCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsProgramFundingSourceCodeTypePointer(value interface{}) (*AUCodeSetsProgramFundingSourceCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsProgramFundingSourceCodeType:
 		return value.(*AUCodeSetsProgramFundingSourceCodeType), true
        case AUCodeSetsProgramFundingSourceCodeType:
 		v, _ := value.(AUCodeSetsProgramFundingSourceCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsProgramFundingSourceCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsProgramFundingSourceCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsProgramFundingSourceCodeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAssessmentTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAssessmentTypeTypePointer(value interface{}) (*AUCodeSetsAssessmentTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAssessmentTypeType:
 		return value.(*AUCodeSetsAssessmentTypeType), true
        case AUCodeSetsAssessmentTypeType:
 		v, _ := value.(AUCodeSetsAssessmentTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAssessmentTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAssessmentTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAssessmentTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsNAPJurisdictionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPJurisdictionTypePointer(value interface{}) (*AUCodeSetsNAPJurisdictionType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPJurisdictionType:
 		return value.(*AUCodeSetsNAPJurisdictionType), true
        case AUCodeSetsNAPJurisdictionType:
 		v, _ := value.(AUCodeSetsNAPJurisdictionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPJurisdictionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPJurisdictionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPJurisdictionType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsSchoolCoEdStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolCoEdStatusTypePointer(value interface{}) (*AUCodeSetsSchoolCoEdStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolCoEdStatusType:
 		return value.(*AUCodeSetsSchoolCoEdStatusType), true
        case AUCodeSetsSchoolCoEdStatusType:
 		v, _ := value.(AUCodeSetsSchoolCoEdStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolCoEdStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolCoEdStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolCoEdStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsTeacherCoverCreditType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsTeacherCoverCreditTypePointer(value interface{}) (*AUCodeSetsTeacherCoverCreditType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsTeacherCoverCreditType:
 		return value.(*AUCodeSetsTeacherCoverCreditType), true
        case AUCodeSetsTeacherCoverCreditType:
 		v, _ := value.(AUCodeSetsTeacherCoverCreditType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsTeacherCoverCreditType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsTeacherCoverCreditType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsTeacherCoverCreditType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *PublishInDirectoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func PublishInDirectoryTypePointer(value interface{}) (*PublishInDirectoryType, bool) {
switch t := value.(type) {
 	case *PublishInDirectoryType:
 		return value.(*PublishInDirectoryType), true
        case PublishInDirectoryType:
 		v, _ := value.(PublishInDirectoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := PublishInDirectoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := PublishInDirectoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to PublishInDirectoryType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsLanguageTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsLanguageTypeTypePointer(value interface{}) (*AUCodeSetsLanguageTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsLanguageTypeType:
 		return value.(*AUCodeSetsLanguageTypeType), true
        case AUCodeSetsLanguageTypeType:
 		v, _ := value.(AUCodeSetsLanguageTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsLanguageTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsLanguageTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsLanguageTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsNAPTestTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPTestTypeTypePointer(value interface{}) (*AUCodeSetsNAPTestTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPTestTypeType:
 		return value.(*AUCodeSetsNAPTestTypeType), true
        case AUCodeSetsNAPTestTypeType:
 		v, _ := value.(AUCodeSetsNAPTestTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPTestTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPTestTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPTestTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAustralianTimeZoneType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAustralianTimeZoneTypePointer(value interface{}) (*AUCodeSetsAustralianTimeZoneType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAustralianTimeZoneType:
 		return value.(*AUCodeSetsAustralianTimeZoneType), true
        case AUCodeSetsAustralianTimeZoneType:
 		v, _ := value.(AUCodeSetsAustralianTimeZoneType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAustralianTimeZoneType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAustralianTimeZoneType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAustralianTimeZoneType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsLearningStandardItemRelationshipTypesType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsLearningStandardItemRelationshipTypesTypePointer(value interface{}) (*AUCodeSetsLearningStandardItemRelationshipTypesType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsLearningStandardItemRelationshipTypesType:
 		return value.(*AUCodeSetsLearningStandardItemRelationshipTypesType), true
        case AUCodeSetsLearningStandardItemRelationshipTypesType:
 		v, _ := value.(AUCodeSetsLearningStandardItemRelationshipTypesType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsLearningStandardItemRelationshipTypesType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsLearningStandardItemRelationshipTypesType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsLearningStandardItemRelationshipTypesType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsDwellingArrangementType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsDwellingArrangementTypePointer(value interface{}) (*AUCodeSetsDwellingArrangementType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsDwellingArrangementType:
 		return value.(*AUCodeSetsDwellingArrangementType), true
        case AUCodeSetsDwellingArrangementType:
 		v, _ := value.(AUCodeSetsDwellingArrangementType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsDwellingArrangementType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsDwellingArrangementType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsDwellingArrangementType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsExitWithdrawalTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsExitWithdrawalTypeTypePointer(value interface{}) (*AUCodeSetsExitWithdrawalTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsExitWithdrawalTypeType:
 		return value.(*AUCodeSetsExitWithdrawalTypeType), true
        case AUCodeSetsExitWithdrawalTypeType:
 		v, _ := value.(AUCodeSetsExitWithdrawalTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsExitWithdrawalTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsExitWithdrawalTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsExitWithdrawalTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsStandardAustralianClassificationOfCountriesSACCType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsStandardAustralianClassificationOfCountriesSACCTypePointer(value interface{}) (*AUCodeSetsStandardAustralianClassificationOfCountriesSACCType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsStandardAustralianClassificationOfCountriesSACCType:
 		return value.(*AUCodeSetsStandardAustralianClassificationOfCountriesSACCType), true
        case AUCodeSetsStandardAustralianClassificationOfCountriesSACCType:
 		v, _ := value.(AUCodeSetsStandardAustralianClassificationOfCountriesSACCType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsStandardAustralianClassificationOfCountriesSACCType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsStandardAustralianClassificationOfCountriesSACCType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsStandardAustralianClassificationOfCountriesSACCType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsResourceUsageContentTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsResourceUsageContentTypeTypePointer(value interface{}) (*AUCodeSetsResourceUsageContentTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsResourceUsageContentTypeType:
 		return value.(*AUCodeSetsResourceUsageContentTypeType), true
        case AUCodeSetsResourceUsageContentTypeType:
 		v, _ := value.(AUCodeSetsResourceUsageContentTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsResourceUsageContentTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsResourceUsageContentTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsResourceUsageContentTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsMediumOfInstructionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsMediumOfInstructionTypePointer(value interface{}) (*AUCodeSetsMediumOfInstructionType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsMediumOfInstructionType:
 		return value.(*AUCodeSetsMediumOfInstructionType), true
        case AUCodeSetsMediumOfInstructionType:
 		v, _ := value.(AUCodeSetsMediumOfInstructionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsMediumOfInstructionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsMediumOfInstructionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsMediumOfInstructionType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsTeacherCoverSupervisionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsTeacherCoverSupervisionTypePointer(value interface{}) (*AUCodeSetsTeacherCoverSupervisionType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsTeacherCoverSupervisionType:
 		return value.(*AUCodeSetsTeacherCoverSupervisionType), true
        case AUCodeSetsTeacherCoverSupervisionType:
 		v, _ := value.(AUCodeSetsTeacherCoverSupervisionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsTeacherCoverSupervisionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsTeacherCoverSupervisionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsTeacherCoverSupervisionType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsEmailTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEmailTypeTypePointer(value interface{}) (*AUCodeSetsEmailTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEmailTypeType:
 		return value.(*AUCodeSetsEmailTypeType), true
        case AUCodeSetsEmailTypeType:
 		v, _ := value.(AUCodeSetsEmailTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEmailTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEmailTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEmailTypeType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *Int) Int() int {
  return int((reflect.ValueOf(*t).Interface()).(Int))
  }

func IntPointer(value interface{}) (*Int, bool) {
switch t := value.(type) {
        case *Int:
                return value.(*Int), true
        case Int:
                v, _ := value.(Int)
                return &v, true
        case *int:
 		vstr, _ := value.(*int)
 		v := Int(*vstr)
 		return &v, true
        case int:
                vstr, _ := value.(int)
                v := Int(vstr)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Int\n", t, value)
        }
        return nil, false
  }

  // XXXXX
func (t *StateProvinceType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func StateProvinceTypePointer(value interface{}) (*StateProvinceType, bool) {
switch t := value.(type) {
 	case *StateProvinceType:
 		return value.(*StateProvinceType), true
        case StateProvinceType:
 		v, _ := value.(StateProvinceType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := StateProvinceType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := StateProvinceType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to StateProvinceType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsSuspensionCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSuspensionCategoryTypePointer(value interface{}) (*AUCodeSetsSuspensionCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSuspensionCategoryType:
 		return value.(*AUCodeSetsSuspensionCategoryType), true
        case AUCodeSetsSuspensionCategoryType:
 		v, _ := value.(AUCodeSetsSuspensionCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSuspensionCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSuspensionCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSuspensionCategoryType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSets0211ProgramAvailabilityType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSets0211ProgramAvailabilityTypePointer(value interface{}) (*AUCodeSets0211ProgramAvailabilityType, bool) {
switch t := value.(type) {
 	case *AUCodeSets0211ProgramAvailabilityType:
 		return value.(*AUCodeSets0211ProgramAvailabilityType), true
        case AUCodeSets0211ProgramAvailabilityType:
 		v, _ := value.(AUCodeSets0211ProgramAvailabilityType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSets0211ProgramAvailabilityType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSets0211ProgramAvailabilityType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSets0211ProgramAvailabilityType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAddressRoleType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAddressRoleTypePointer(value interface{}) (*AUCodeSetsAddressRoleType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAddressRoleType:
 		return value.(*AUCodeSetsAddressRoleType), true
        case AUCodeSetsAddressRoleType:
 		v, _ := value.(AUCodeSetsAddressRoleType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAddressRoleType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAddressRoleType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAddressRoleType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsWellbeingStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingStatusTypePointer(value interface{}) (*AUCodeSetsWellbeingStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingStatusType:
 		return value.(*AUCodeSetsWellbeingStatusType), true
        case AUCodeSetsWellbeingStatusType:
 		v, _ := value.(AUCodeSetsWellbeingStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingStatusType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsWellbeingResponseCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingResponseCategoryTypePointer(value interface{}) (*AUCodeSetsWellbeingResponseCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingResponseCategoryType:
 		return value.(*AUCodeSetsWellbeingResponseCategoryType), true
        case AUCodeSetsWellbeingResponseCategoryType:
 		v, _ := value.(AUCodeSetsWellbeingResponseCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingResponseCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingResponseCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingResponseCategoryType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *ExtendedContentType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ExtendedContentTypePointer(value interface{}) (*ExtendedContentType, bool) {
switch t := value.(type) {
 	case *ExtendedContentType:
 		return value.(*ExtendedContentType), true
        case ExtendedContentType:
 		v, _ := value.(ExtendedContentType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ExtendedContentType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ExtendedContentType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ExtendedContentType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGTypePointer(value interface{}) (*AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType:
 		return value.(*AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType), true
        case AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType:
 		v, _ := value.(AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *SelectedContentType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func SelectedContentTypePointer(value interface{}) (*SelectedContentType, bool) {
switch t := value.(type) {
 	case *SelectedContentType:
 		return value.(*SelectedContentType), true
        case SelectedContentType:
 		v, _ := value.(SelectedContentType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := SelectedContentType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := SelectedContentType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to SelectedContentType\n", t, value)
 	}
 	return nil, false
  }


  // XXXXX
func (t *OperationalStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func OperationalStatusTypePointer(value interface{}) (*OperationalStatusType, bool) {
switch t := value.(type) {
 	case *OperationalStatusType:
 		return value.(*OperationalStatusType), true
        case OperationalStatusType:
 		v, _ := value.(OperationalStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := OperationalStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := OperationalStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to OperationalStatusType\n", t, value)
 	}
 	return nil, false
  }



  // XXXXX
func (t *FinancialQuestionnaireCollection) CopyString(key string, value interface{}) *FinancialQuestionnaireCollection {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *FinancialQuestionnaireCollection) CopyClone(key string, value interface{}) *FinancialQuestionnaireCollection {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *FinancialQuestionnaireCollection) Unset(key string) *FinancialQuestionnaireCollection {
        switch key {
  case "FQReportingList":
   n.FQReportingList = nil
  case "FQYear":
   n.FQYear = nil
  case "SoftwareVendorInfo":
   n.SoftwareVendorInfo = nil
  case "RoundCode":
   n.RoundCode = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "RefId":
   n.RefId = nil
  case "ReportingAuthorityCommonwealthId":
   n.ReportingAuthorityCommonwealthId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FinancialQuestionnaireCollection")
        }
        return n
}

func (n *FinancialQuestionnaireCollection) SetProperty(key string, value interface{}) *FinancialQuestionnaireCollection {
        if n == nil {
                n, _ = FinancialQuestionnaireCollectionPointer(FinancialQuestionnaireCollection{})
        }
        switch key {
    case "FQReportingList":
    if v, ok:= FQReportingListTypePointer(value); ok {
      n.FQReportingList = v
      }
    case "FQYear":
    
    if v, ok:= StringPointer(value); ok {
      n.FQYear = ((*SchoolYearType)(v))
      }
    case "SoftwareVendorInfo":
    if v, ok:= SoftwareVendorInfoContainerTypePointer(value); ok {
      n.SoftwareVendorInfo = v
      }
    case "RoundCode":
    
    if v, ok:= StringPointer(value); ok {
      n.RoundCode = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ReportingAuthorityCommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FinancialQuestionnaireCollection")
        }
        return n
}

  func (s *FinancialQuestionnaireCollection) FQReportingListRead() *FQReportingListType {
    if s.FQReportingList == nil {
     if v, ok:= FQReportingListTypePointer(FQReportingListType{}); ok {
      s.FQReportingList = v
      }
      }
      return s.FQReportingList
    }
  func (s *FinancialQuestionnaireCollection) FQYearRead() *SchoolYearType {
    if s.FQYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.FQYear = ((*SchoolYearType)(v))
      }
      }
      return s.FQYear
    }
  func (s *FinancialQuestionnaireCollection) SoftwareVendorInfoRead() *SoftwareVendorInfoContainerType {
    if s.SoftwareVendorInfo == nil {
     if v, ok:= SoftwareVendorInfoContainerTypePointer(SoftwareVendorInfoContainerType{}); ok {
      s.SoftwareVendorInfo = v
      }
      }
      return s.SoftwareVendorInfo
    }
  func (s *FinancialQuestionnaireCollection) RoundCodeRead() *String {
    if s.RoundCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoundCode = ((*String)(v))
      }
      }
      return s.RoundCode
    }
  func (s *FinancialQuestionnaireCollection) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *FinancialQuestionnaireCollection) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *FinancialQuestionnaireCollection) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *FinancialQuestionnaireCollection) ReportingAuthorityCommonwealthIdRead() *String {
    if s.ReportingAuthorityCommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
      }
      return s.ReportingAuthorityCommonwealthId
    }
  func (s *FinancialQuestionnaireCollection) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }

  // XXXXX
func (t *NameOfRecordType) CopyString(key string, value interface{}) *NameOfRecordType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NameOfRecordType) CopyClone(key string, value interface{}) *NameOfRecordType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NameOfRecordType) Unset(key string) *NameOfRecordType {
        switch key {
  case "Type":
   n.Type = nil
  case "Title":
   n.Title = nil
  case "FamilyName":
   n.FamilyName = nil
  case "GivenName":
   n.GivenName = nil
  case "PreferredFamilyNameFirst":
   n.PreferredFamilyNameFirst = nil
  case "Suffix":
   n.Suffix = nil
  case "PreferredGivenName":
   n.PreferredGivenName = nil
  case "FamilyNameFirst":
   n.FamilyNameFirst = nil
  case "MiddleName":
   n.MiddleName = nil
  case "FullName":
   n.FullName = nil
  case "PreferredFamilyName":
   n.PreferredFamilyName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NameOfRecordType")
        }
        return n
}

func (n *NameOfRecordType) SetProperty(key string, value interface{}) *NameOfRecordType {
        if n == nil {
                n, _ = NameOfRecordTypePointer(NameOfRecordType{})
        }
        switch key {
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.Title = ((*String)(v))
      }
    case "FamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.FamilyName = ((*String)(v))
      }
    case "GivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.GivenName = ((*String)(v))
      }
    case "PreferredFamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Suffix":
    
    if v, ok:= StringPointer(value); ok {
      n.Suffix = ((*String)(v))
      }
    case "PreferredGivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.PreferredGivenName = ((*String)(v))
      }
    case "FamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "MiddleName":
    
    if v, ok:= StringPointer(value); ok {
      n.MiddleName = ((*String)(v))
      }
    case "FullName":
    
    if v, ok:= StringPointer(value); ok {
      n.FullName = ((*String)(v))
      }
    case "PreferredFamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.PreferredFamilyName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NameOfRecordType")
        }
        return n
}

  func (s *NameOfRecordType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }
  func (s *NameOfRecordType) TitleRead() *String {
    if s.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.Title = ((*String)(v))
      }
      }
      return s.Title
    }
  func (s *NameOfRecordType) FamilyNameRead() *String {
    if s.FamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.FamilyName = ((*String)(v))
      }
      }
      return s.FamilyName
    }
  func (s *NameOfRecordType) GivenNameRead() *String {
    if s.GivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.GivenName = ((*String)(v))
      }
      }
      return s.GivenName
    }
  func (s *NameOfRecordType) PreferredFamilyNameFirstRead() *AUCodeSetsYesOrNoCategoryType {
    if s.PreferredFamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.PreferredFamilyNameFirst
    }
  func (s *NameOfRecordType) SuffixRead() *String {
    if s.Suffix == nil {
    if v, ok:= StringPointer(""); ok {
      s.Suffix = ((*String)(v))
      }
      }
      return s.Suffix
    }
  func (s *NameOfRecordType) PreferredGivenNameRead() *String {
    if s.PreferredGivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreferredGivenName = ((*String)(v))
      }
      }
      return s.PreferredGivenName
    }
  func (s *NameOfRecordType) FamilyNameFirstRead() *AUCodeSetsYesOrNoCategoryType {
    if s.FamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.FamilyNameFirst
    }
  func (s *NameOfRecordType) MiddleNameRead() *String {
    if s.MiddleName == nil {
    if v, ok:= StringPointer(""); ok {
      s.MiddleName = ((*String)(v))
      }
      }
      return s.MiddleName
    }
  func (s *NameOfRecordType) FullNameRead() *String {
    if s.FullName == nil {
    if v, ok:= StringPointer(""); ok {
      s.FullName = ((*String)(v))
      }
      }
      return s.FullName
    }
  func (s *NameOfRecordType) PreferredFamilyNameRead() *String {
    if s.PreferredFamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreferredFamilyName = ((*String)(v))
      }
      }
      return s.PreferredFamilyName
    }

  // XXXXX
func (t *StudentParticipation_ManagingSchool) CopyString(key string, value interface{}) *StudentParticipation_ManagingSchool {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentParticipation_ManagingSchool) CopyClone(key string, value interface{}) *StudentParticipation_ManagingSchool {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentParticipation_ManagingSchool) Unset(key string) *StudentParticipation_ManagingSchool {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentParticipation_ManagingSchool")
        }
        return n
}

func (n *StudentParticipation_ManagingSchool) SetProperty(key string, value interface{}) *StudentParticipation_ManagingSchool {
        if n == nil {
                n, _ = StudentParticipation_ManagingSchoolPointer(StudentParticipation_ManagingSchool{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentParticipation_ManagingSchool")
        }
        return n
}

  func (s *StudentParticipation_ManagingSchool) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *StudentParticipation_ManagingSchool) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *EquipmentInfo) CopyString(key string, value interface{}) *EquipmentInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *EquipmentInfo) CopyClone(key string, value interface{}) *EquipmentInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *EquipmentInfo) Unset(key string) *EquipmentInfo {
        switch key {
  case "InvoiceRefId":
   n.InvoiceRefId = nil
  case "AssetNumber":
   n.AssetNumber = nil
  case "EquipmentType":
   n.EquipmentType = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "SIF_RefId":
   n.SIF_RefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "PurchaseOrderRefId":
   n.PurchaseOrderRefId = nil
  case "LocalId":
   n.LocalId = nil
  case "Description":
   n.Description = nil
  case "Name":
   n.Name = nil
  case "RefId":
   n.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EquipmentInfo")
        }
        return n
}

func (n *EquipmentInfo) SetProperty(key string, value interface{}) *EquipmentInfo {
        if n == nil {
                n, _ = EquipmentInfoPointer(EquipmentInfo{})
        }
        switch key {
    case "InvoiceRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.InvoiceRefId = ((*String)(v))
      }
    case "AssetNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.AssetNumber = ((*LocalIdType)(v))
      }
    case "EquipmentType":
    
    if v, ok:= StringPointer(value); ok {
      n.EquipmentType = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "SIF_RefId":
    if v, ok:= EquipmentInfo_SIF_RefIdPointer(value); ok {
      n.SIF_RefId = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "PurchaseOrderRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.PurchaseOrderRefId = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.Name = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EquipmentInfo")
        }
        return n
}

  func (s *EquipmentInfo) InvoiceRefIdRead() *String {
    if s.InvoiceRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.InvoiceRefId = ((*String)(v))
      }
      }
      return s.InvoiceRefId
    }
  func (s *EquipmentInfo) AssetNumberRead() *LocalIdType {
    if s.AssetNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.AssetNumber = ((*LocalIdType)(v))
      }
      }
      return s.AssetNumber
    }
  func (s *EquipmentInfo) EquipmentTypeRead() *String {
    if s.EquipmentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.EquipmentType = ((*String)(v))
      }
      }
      return s.EquipmentType
    }
  func (s *EquipmentInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *EquipmentInfo) SIF_RefIdRead() *EquipmentInfo_SIF_RefId {
    if s.SIF_RefId == nil {
     if v, ok:= EquipmentInfo_SIF_RefIdPointer(EquipmentInfo_SIF_RefId{}); ok {
      s.SIF_RefId = v
      }
      }
      return s.SIF_RefId
    }
  func (s *EquipmentInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *EquipmentInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *EquipmentInfo) PurchaseOrderRefIdRead() *String {
    if s.PurchaseOrderRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.PurchaseOrderRefId = ((*String)(v))
      }
      }
      return s.PurchaseOrderRefId
    }
  func (s *EquipmentInfo) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *EquipmentInfo) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *EquipmentInfo) NameRead() *String {
    if s.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.Name = ((*String)(v))
      }
      }
      return s.Name
    }
  func (s *EquipmentInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }

  // XXXXX
func (t *PhoneNumberType) CopyString(key string, value interface{}) *PhoneNumberType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PhoneNumberType) CopyClone(key string, value interface{}) *PhoneNumberType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PhoneNumberType) Unset(key string) *PhoneNumberType {
        switch key {
  case "Type":
   n.Type = nil
  case "Number":
   n.Number = nil
  case "Preference":
   n.Preference = nil
  case "ListedStatus":
   n.ListedStatus = nil
  case "Extension":
   n.Extension = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PhoneNumberType")
        }
        return n
}

func (n *PhoneNumberType) SetProperty(key string, value interface{}) *PhoneNumberType {
        if n == nil {
                n, _ = PhoneNumberTypePointer(PhoneNumberType{})
        }
        switch key {
    case "Type":
        if !CodesetContains(AUCodeSetsTelephoneNumberTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsTelephoneNumberTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Type = ((*AUCodeSetsTelephoneNumberTypeType)(v))
      }
    case "Number":
    
    if v, ok:= StringPointer(value); ok {
      n.Number = ((*String)(v))
      }
    case "Preference":
    
    if v, ok:= IntPointer(value); ok {
      n.Preference = ((*Int)(v))
      }
    case "ListedStatus":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ListedStatus = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Extension":
    
    if v, ok:= StringPointer(value); ok {
      n.Extension = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PhoneNumberType")
        }
        return n
}

  func (s *PhoneNumberType) TypeRead() *AUCodeSetsTelephoneNumberTypeType {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*AUCodeSetsTelephoneNumberTypeType)(v))
      }
      }
      return s.Type
    }
  func (s *PhoneNumberType) NumberRead() *String {
    if s.Number == nil {
    if v, ok:= StringPointer(""); ok {
      s.Number = ((*String)(v))
      }
      }
      return s.Number
    }
  func (s *PhoneNumberType) PreferenceRead() *Int {
    if s.Preference == nil {
    if v, ok:= IntPointer(0); ok {
      s.Preference = ((*Int)(v))
      }
      }
      return s.Preference
    }
  func (s *PhoneNumberType) ListedStatusRead() *AUCodeSetsYesOrNoCategoryType {
    if s.ListedStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.ListedStatus = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.ListedStatus
    }
  func (s *PhoneNumberType) ExtensionRead() *String {
    if s.Extension == nil {
    if v, ok:= StringPointer(""); ok {
      s.Extension = ((*String)(v))
      }
      }
      return s.Extension
    }

  // XXXXX
func (t *ACStrandSubjectAreaType) CopyString(key string, value interface{}) *ACStrandSubjectAreaType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ACStrandSubjectAreaType) CopyClone(key string, value interface{}) *ACStrandSubjectAreaType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ACStrandSubjectAreaType) Unset(key string) *ACStrandSubjectAreaType {
        switch key {
  case "ACStrand":
   n.ACStrand = nil
  case "SubjectArea":
   n.SubjectArea = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ACStrandSubjectAreaType")
        }
        return n
}

func (n *ACStrandSubjectAreaType) SetProperty(key string, value interface{}) *ACStrandSubjectAreaType {
        if n == nil {
                n, _ = ACStrandSubjectAreaTypePointer(ACStrandSubjectAreaType{})
        }
        switch key {
    case "ACStrand":
        if !CodesetContains(AUCodeSetsACStrandType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsACStrandType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ACStrand = ((*AUCodeSetsACStrandType)(v))
      }
    case "SubjectArea":
    if v, ok:= SubjectAreaTypePointer(value); ok {
      n.SubjectArea = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ACStrandSubjectAreaType")
        }
        return n
}

  func (s *ACStrandSubjectAreaType) ACStrandRead() *AUCodeSetsACStrandType {
    if s.ACStrand == nil {
    if v, ok:= StringPointer(""); ok {
      s.ACStrand = ((*AUCodeSetsACStrandType)(v))
      }
      }
      return s.ACStrand
    }
  func (s *ACStrandSubjectAreaType) SubjectAreaRead() *SubjectAreaType {
    if s.SubjectArea == nil {
     if v, ok:= SubjectAreaTypePointer(SubjectAreaType{}); ok {
      s.SubjectArea = v
      }
      }
      return s.SubjectArea
    }

  // XXXXX
func (t *WellbeingEventCategoryType) CopyString(key string, value interface{}) *WellbeingEventCategoryType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *WellbeingEventCategoryType) CopyClone(key string, value interface{}) *WellbeingEventCategoryType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *WellbeingEventCategoryType) Unset(key string) *WellbeingEventCategoryType {
        switch key {
  case "WellbeingEventSubCategoryList":
   n.WellbeingEventSubCategoryList = nil
  case "EventCategory":
   n.EventCategory = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingEventCategoryType")
        }
        return n
}

func (n *WellbeingEventCategoryType) SetProperty(key string, value interface{}) *WellbeingEventCategoryType {
        if n == nil {
                n, _ = WellbeingEventCategoryTypePointer(WellbeingEventCategoryType{})
        }
        switch key {
    case "WellbeingEventSubCategoryList":
    if v, ok:= WellbeingEventSubCategoryListTypePointer(value); ok {
      n.WellbeingEventSubCategoryList = v
      }
    case "EventCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.EventCategory = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingEventCategoryType")
        }
        return n
}

  func (s *WellbeingEventCategoryType) WellbeingEventSubCategoryListRead() *WellbeingEventSubCategoryListType {
    if s.WellbeingEventSubCategoryList == nil {
     if v, ok:= WellbeingEventSubCategoryListTypePointer(WellbeingEventSubCategoryListType{}); ok {
      s.WellbeingEventSubCategoryList = v
      }
      }
      return s.WellbeingEventSubCategoryList
    }
  func (s *WellbeingEventCategoryType) EventCategoryRead() *String {
    if s.EventCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.EventCategory = ((*String)(v))
      }
      }
      return s.EventCategory
    }

  // XXXXX
func (t *StandardIdentifierType) CopyString(key string, value interface{}) *StandardIdentifierType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StandardIdentifierType) CopyClone(key string, value interface{}) *StandardIdentifierType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StandardIdentifierType) Unset(key string) *StandardIdentifierType {
        switch key {
  case "StandardNumber":
   n.StandardNumber = nil
  case "Organization":
   n.Organization = nil
  case "YearLevel":
   n.YearLevel = nil
  case "ACStrandSubjectArea":
   n.ACStrandSubjectArea = nil
  case "Benchmark":
   n.Benchmark = nil
  case "YearCreated":
   n.YearCreated = nil
  case "YearLevels":
   n.YearLevels = nil
  case "IndicatorNumber":
   n.IndicatorNumber = nil
  case "AlternateIdentificationCodes":
   n.AlternateIdentificationCodes = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StandardIdentifierType")
        }
        return n
}

func (n *StandardIdentifierType) SetProperty(key string, value interface{}) *StandardIdentifierType {
        if n == nil {
                n, _ = StandardIdentifierTypePointer(StandardIdentifierType{})
        }
        switch key {
    case "StandardNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.StandardNumber = ((*String)(v))
      }
    case "Organization":
    
    if v, ok:= StringPointer(value); ok {
      n.Organization = ((*String)(v))
      }
    case "YearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.YearLevel = v
      }
    case "ACStrandSubjectArea":
    if v, ok:= ACStrandSubjectAreaTypePointer(value); ok {
      n.ACStrandSubjectArea = v
      }
    case "Benchmark":
    
    if v, ok:= StringPointer(value); ok {
      n.Benchmark = ((*String)(v))
      }
    case "YearCreated":
    
    if v, ok:= StringPointer(value); ok {
      n.YearCreated = ((*String)(v))
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.YearLevels = v
      }
    case "IndicatorNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.IndicatorNumber = ((*String)(v))
      }
    case "AlternateIdentificationCodes":
    if v, ok:= AlternateIdentificationCodeListTypePointer(value); ok {
      n.AlternateIdentificationCodes = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StandardIdentifierType")
        }
        return n
}

  func (s *StandardIdentifierType) StandardNumberRead() *String {
    if s.StandardNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.StandardNumber = ((*String)(v))
      }
      }
      return s.StandardNumber
    }
  func (s *StandardIdentifierType) OrganizationRead() *String {
    if s.Organization == nil {
    if v, ok:= StringPointer(""); ok {
      s.Organization = ((*String)(v))
      }
      }
      return s.Organization
    }
  func (s *StandardIdentifierType) YearLevelRead() *YearLevelType {
    if s.YearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.YearLevel = v
      }
      }
      return s.YearLevel
    }
  func (s *StandardIdentifierType) ACStrandSubjectAreaRead() *ACStrandSubjectAreaType {
    if s.ACStrandSubjectArea == nil {
     if v, ok:= ACStrandSubjectAreaTypePointer(ACStrandSubjectAreaType{}); ok {
      s.ACStrandSubjectArea = v
      }
      }
      return s.ACStrandSubjectArea
    }
  func (s *StandardIdentifierType) BenchmarkRead() *String {
    if s.Benchmark == nil {
    if v, ok:= StringPointer(""); ok {
      s.Benchmark = ((*String)(v))
      }
      }
      return s.Benchmark
    }
  func (s *StandardIdentifierType) YearCreatedRead() *String {
    if s.YearCreated == nil {
    if v, ok:= StringPointer(""); ok {
      s.YearCreated = ((*String)(v))
      }
      }
      return s.YearCreated
    }
  func (s *StandardIdentifierType) YearLevelsRead() *YearLevelsType {
    if s.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.YearLevels = v
      }
      }
      return s.YearLevels
    }
  func (s *StandardIdentifierType) IndicatorNumberRead() *String {
    if s.IndicatorNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.IndicatorNumber = ((*String)(v))
      }
      }
      return s.IndicatorNumber
    }
  func (s *StandardIdentifierType) AlternateIdentificationCodesRead() *AlternateIdentificationCodeListType {
    if s.AlternateIdentificationCodes == nil {
     if v, ok:= AlternateIdentificationCodeListTypePointer(AlternateIdentificationCodeListType{}); ok {
      s.AlternateIdentificationCodes = v
      }
      }
      return s.AlternateIdentificationCodes
    }

  // XXXXX
func (t *NAPSubscoreType) CopyString(key string, value interface{}) *NAPSubscoreType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPSubscoreType) CopyClone(key string, value interface{}) *NAPSubscoreType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPSubscoreType) Unset(key string) *NAPSubscoreType {
        switch key {
  case "SubscoreValue":
   n.SubscoreValue = nil
  case "SubscoreType":
   n.SubscoreType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPSubscoreType")
        }
        return n
}

func (n *NAPSubscoreType) SetProperty(key string, value interface{}) *NAPSubscoreType {
        if n == nil {
                n, _ = NAPSubscoreTypePointer(NAPSubscoreType{})
        }
        switch key {
    case "SubscoreValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.SubscoreValue = ((*Float)(v))
      }
    case "SubscoreType":
    
    if v, ok:= StringPointer(value); ok {
      n.SubscoreType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPSubscoreType")
        }
        return n
}

  func (s *NAPSubscoreType) SubscoreValueRead() *Float {
    if s.SubscoreValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.SubscoreValue = ((*Float)(v))
      }
      }
      return s.SubscoreValue
    }
  func (s *NAPSubscoreType) SubscoreTypeRead() *String {
    if s.SubscoreType == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubscoreType = ((*String)(v))
      }
      }
      return s.SubscoreType
    }

  // XXXXX
func (t *SectionInfo) CopyString(key string, value interface{}) *SectionInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SectionInfo) CopyClone(key string, value interface{}) *SectionInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SectionInfo) Unset(key string) *SectionInfo {
        switch key {
  case "SchoolYear":
   n.SchoolYear = nil
  case "SchoolCourseInfoOverride":
   n.SchoolCourseInfoOverride = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolCourseInfoRefId":
   n.SchoolCourseInfoRefId = nil
  case "RefId":
   n.RefId = nil
  case "Description":
   n.Description = nil
  case "LocalId":
   n.LocalId = nil
  case "CourseSectionCode":
   n.CourseSectionCode = nil
  case "TermInfoRefId":
   n.TermInfoRefId = nil
  case "SectionCode":
   n.SectionCode = nil
  case "LanguageOfInstruction":
   n.LanguageOfInstruction = nil
  case "LocationOfInstruction":
   n.LocationOfInstruction = nil
  case "MediumOfInstruction":
   n.MediumOfInstruction = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "SummerSchool":
   n.SummerSchool = nil
  case "CountForAttendance":
   n.CountForAttendance = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SectionInfo")
        }
        return n
}

func (n *SectionInfo) SetProperty(key string, value interface{}) *SectionInfo {
        if n == nil {
                n, _ = SectionInfoPointer(SectionInfo{})
        }
        switch key {
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SchoolCourseInfoOverride":
    if v, ok:= SchoolCourseInfoOverrideTypePointer(value); ok {
      n.SchoolCourseInfoOverride = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolCourseInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolCourseInfoRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "CourseSectionCode":
    
    if v, ok:= StringPointer(value); ok {
      n.CourseSectionCode = ((*String)(v))
      }
    case "TermInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TermInfoRefId = ((*String)(v))
      }
    case "SectionCode":
    
    if v, ok:= StringPointer(value); ok {
      n.SectionCode = ((*String)(v))
      }
    case "LanguageOfInstruction":
    if v, ok:= LanguageOfInstructionTypePointer(value); ok {
      n.LanguageOfInstruction = v
      }
    case "LocationOfInstruction":
    if v, ok:= LocationOfInstructionTypePointer(value); ok {
      n.LocationOfInstruction = v
      }
    case "MediumOfInstruction":
    if v, ok:= MediumOfInstructionTypePointer(value); ok {
      n.MediumOfInstruction = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "SummerSchool":
    
    if v, ok:= StringPointer(value); ok {
      n.SummerSchool = ((*String)(v))
      }
    case "CountForAttendance":
    
    if v, ok:= StringPointer(value); ok {
      n.CountForAttendance = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SectionInfo")
        }
        return n
}

  func (s *SectionInfo) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *SectionInfo) SchoolCourseInfoOverrideRead() *SchoolCourseInfoOverrideType {
    if s.SchoolCourseInfoOverride == nil {
     if v, ok:= SchoolCourseInfoOverrideTypePointer(SchoolCourseInfoOverrideType{}); ok {
      s.SchoolCourseInfoOverride = v
      }
      }
      return s.SchoolCourseInfoOverride
    }
  func (s *SectionInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *SectionInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *SectionInfo) SchoolCourseInfoRefIdRead() *String {
    if s.SchoolCourseInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolCourseInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolCourseInfoRefId
    }
  func (s *SectionInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *SectionInfo) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *SectionInfo) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *SectionInfo) CourseSectionCodeRead() *String {
    if s.CourseSectionCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.CourseSectionCode = ((*String)(v))
      }
      }
      return s.CourseSectionCode
    }
  func (s *SectionInfo) TermInfoRefIdRead() *String {
    if s.TermInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TermInfoRefId = ((*String)(v))
      }
      }
      return s.TermInfoRefId
    }
  func (s *SectionInfo) SectionCodeRead() *String {
    if s.SectionCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.SectionCode = ((*String)(v))
      }
      }
      return s.SectionCode
    }
  func (s *SectionInfo) LanguageOfInstructionRead() *LanguageOfInstructionType {
    if s.LanguageOfInstruction == nil {
     if v, ok:= LanguageOfInstructionTypePointer(LanguageOfInstructionType{}); ok {
      s.LanguageOfInstruction = v
      }
      }
      return s.LanguageOfInstruction
    }
  func (s *SectionInfo) LocationOfInstructionRead() *LocationOfInstructionType {
    if s.LocationOfInstruction == nil {
     if v, ok:= LocationOfInstructionTypePointer(LocationOfInstructionType{}); ok {
      s.LocationOfInstruction = v
      }
      }
      return s.LocationOfInstruction
    }
  func (s *SectionInfo) MediumOfInstructionRead() *MediumOfInstructionType {
    if s.MediumOfInstruction == nil {
     if v, ok:= MediumOfInstructionTypePointer(MediumOfInstructionType{}); ok {
      s.MediumOfInstruction = v
      }
      }
      return s.MediumOfInstruction
    }
  func (s *SectionInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *SectionInfo) SummerSchoolRead() *String {
    if s.SummerSchool == nil {
    if v, ok:= StringPointer(""); ok {
      s.SummerSchool = ((*String)(v))
      }
      }
      return s.SummerSchool
    }
  func (s *SectionInfo) CountForAttendanceRead() *String {
    if s.CountForAttendance == nil {
    if v, ok:= StringPointer(""); ok {
      s.CountForAttendance = ((*String)(v))
      }
      }
      return s.CountForAttendance
    }

  // XXXXX
func (t *SourceObjectsType_SourceObject) CopyString(key string, value interface{}) *SourceObjectsType_SourceObject {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SourceObjectsType_SourceObject) CopyClone(key string, value interface{}) *SourceObjectsType_SourceObject {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SourceObjectsType_SourceObject) Unset(key string) *SourceObjectsType_SourceObject {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SourceObjectsType_SourceObject")
        }
        return n
}

func (n *SourceObjectsType_SourceObject) SetProperty(key string, value interface{}) *SourceObjectsType_SourceObject {
        if n == nil {
                n, _ = SourceObjectsType_SourceObjectPointer(SourceObjectsType_SourceObject{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SourceObjectsType_SourceObject")
        }
        return n
}

  func (s *SourceObjectsType_SourceObject) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *SourceObjectsType_SourceObject) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *Debtor_BilledEntity) CopyString(key string, value interface{}) *Debtor_BilledEntity {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *Debtor_BilledEntity) CopyClone(key string, value interface{}) *Debtor_BilledEntity {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *Debtor_BilledEntity) Unset(key string) *Debtor_BilledEntity {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Debtor_BilledEntity")
        }
        return n
}

func (n *Debtor_BilledEntity) SetProperty(key string, value interface{}) *Debtor_BilledEntity {
        if n == nil {
                n, _ = Debtor_BilledEntityPointer(Debtor_BilledEntity{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Debtor_BilledEntity")
        }
        return n
}

  func (s *Debtor_BilledEntity) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *Debtor_BilledEntity) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *StudentParticipation) CopyString(key string, value interface{}) *StudentParticipation {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentParticipation) CopyClone(key string, value interface{}) *StudentParticipation {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentParticipation) Unset(key string) *StudentParticipation {
        switch key {
  case "RefId":
   n.RefId = nil
  case "ReferralSource":
   n.ReferralSource = nil
  case "ProgramPlanDate":
   n.ProgramPlanDate = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "ExtendedSchoolYear":
   n.ExtendedSchoolYear = nil
  case "ExtensionComments":
   n.ExtensionComments = nil
  case "PlacementParentalConsentDate":
   n.PlacementParentalConsentDate = nil
  case "ReferralDate":
   n.ReferralDate = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "ProgramStatus":
   n.ProgramStatus = nil
  case "ProgramPlanEffectiveDate":
   n.ProgramPlanEffectiveDate = nil
  case "ProgramEligibilityDate":
   n.ProgramEligibilityDate = nil
  case "EvaluationExtensionDate":
   n.EvaluationExtensionDate = nil
  case "StudentSpecialEducationFTE":
   n.StudentSpecialEducationFTE = nil
  case "NOREPDate":
   n.NOREPDate = nil
  case "ExtendedDay":
   n.ExtendedDay = nil
  case "ReevaluationDate":
   n.ReevaluationDate = nil
  case "StudentParticipationAsOfDate":
   n.StudentParticipationAsOfDate = nil
  case "ProgramFundingSources":
   n.ProgramFundingSources = nil
  case "ProgramPlacementDate":
   n.ProgramPlacementDate = nil
  case "ParticipationContact":
   n.ParticipationContact = nil
  case "EntryPerson":
   n.EntryPerson = nil
  case "ProgramType":
   n.ProgramType = nil
  case "GiftedEligibilityCriteria":
   n.GiftedEligibilityCriteria = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "ManagingSchool":
   n.ManagingSchool = nil
  case "EvaluationParentalConsentDate":
   n.EvaluationParentalConsentDate = nil
  case "ProgramAvailability":
   n.ProgramAvailability = nil
  case "EvaluationDate":
   n.EvaluationDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentParticipation")
        }
        return n
}

func (n *StudentParticipation) SetProperty(key string, value interface{}) *StudentParticipation {
        if n == nil {
                n, _ = StudentParticipationPointer(StudentParticipation{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ReferralSource":
    if v, ok:= ReferralSourceTypePointer(value); ok {
      n.ReferralSource = v
      }
    case "ProgramPlanDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ProgramPlanDate = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "ExtendedSchoolYear":
    
    if v, ok:= BoolPointer(value); ok {
      n.ExtendedSchoolYear = ((*Bool)(v))
      }
    case "ExtensionComments":
    
    if v, ok:= StringPointer(value); ok {
      n.ExtensionComments = ((*String)(v))
      }
    case "PlacementParentalConsentDate":
    
    if v, ok:= StringPointer(value); ok {
      n.PlacementParentalConsentDate = ((*String)(v))
      }
    case "ReferralDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ReferralDate = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "ProgramStatus":
    if v, ok:= ProgramStatusTypePointer(value); ok {
      n.ProgramStatus = v
      }
    case "ProgramPlanEffectiveDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ProgramPlanEffectiveDate = ((*String)(v))
      }
    case "ProgramEligibilityDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ProgramEligibilityDate = ((*String)(v))
      }
    case "EvaluationExtensionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EvaluationExtensionDate = ((*String)(v))
      }
    case "StudentSpecialEducationFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.StudentSpecialEducationFTE = ((*Float)(v))
      }
    case "NOREPDate":
    
    if v, ok:= StringPointer(value); ok {
      n.NOREPDate = ((*String)(v))
      }
    case "ExtendedDay":
    
    if v, ok:= BoolPointer(value); ok {
      n.ExtendedDay = ((*Bool)(v))
      }
    case "ReevaluationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ReevaluationDate = ((*String)(v))
      }
    case "StudentParticipationAsOfDate":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentParticipationAsOfDate = ((*String)(v))
      }
    case "ProgramFundingSources":
    if v, ok:= ProgramFundingSourcesTypePointer(value); ok {
      n.ProgramFundingSources = v
      }
    case "ProgramPlacementDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ProgramPlacementDate = ((*String)(v))
      }
    case "ParticipationContact":
    
    if v, ok:= StringPointer(value); ok {
      n.ParticipationContact = ((*String)(v))
      }
    case "EntryPerson":
    
    if v, ok:= StringPointer(value); ok {
      n.EntryPerson = ((*String)(v))
      }
    case "ProgramType":
        if !CodesetContains(AUCodeSetsStudentFamilyProgramTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStudentFamilyProgramTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ProgramType = ((*AUCodeSetsStudentFamilyProgramTypeType)(v))
      }
    case "GiftedEligibilityCriteria":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.GiftedEligibilityCriteria = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "ManagingSchool":
    if v, ok:= StudentParticipation_ManagingSchoolPointer(value); ok {
      n.ManagingSchool = v
      }
    case "EvaluationParentalConsentDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EvaluationParentalConsentDate = ((*String)(v))
      }
    case "ProgramAvailability":
    if v, ok:= ProgramAvailabilityTypePointer(value); ok {
      n.ProgramAvailability = v
      }
    case "EvaluationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EvaluationDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentParticipation")
        }
        return n
}

  func (s *StudentParticipation) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StudentParticipation) ReferralSourceRead() *ReferralSourceType {
    if s.ReferralSource == nil {
     if v, ok:= ReferralSourceTypePointer(ReferralSourceType{}); ok {
      s.ReferralSource = v
      }
      }
      return s.ReferralSource
    }
  func (s *StudentParticipation) ProgramPlanDateRead() *String {
    if s.ProgramPlanDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ProgramPlanDate = ((*String)(v))
      }
      }
      return s.ProgramPlanDate
    }
  func (s *StudentParticipation) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *StudentParticipation) ExtendedSchoolYearRead() *Bool {
    if s.ExtendedSchoolYear == nil {
    if v, ok:= BoolPointer(false); ok {
      s.ExtendedSchoolYear = ((*Bool)(v))
      }
      }
      return s.ExtendedSchoolYear
    }
  func (s *StudentParticipation) ExtensionCommentsRead() *String {
    if s.ExtensionComments == nil {
    if v, ok:= StringPointer(""); ok {
      s.ExtensionComments = ((*String)(v))
      }
      }
      return s.ExtensionComments
    }
  func (s *StudentParticipation) PlacementParentalConsentDateRead() *String {
    if s.PlacementParentalConsentDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.PlacementParentalConsentDate = ((*String)(v))
      }
      }
      return s.PlacementParentalConsentDate
    }
  func (s *StudentParticipation) ReferralDateRead() *String {
    if s.ReferralDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReferralDate = ((*String)(v))
      }
      }
      return s.ReferralDate
    }
  func (s *StudentParticipation) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentParticipation) ProgramStatusRead() *ProgramStatusType {
    if s.ProgramStatus == nil {
     if v, ok:= ProgramStatusTypePointer(ProgramStatusType{}); ok {
      s.ProgramStatus = v
      }
      }
      return s.ProgramStatus
    }
  func (s *StudentParticipation) ProgramPlanEffectiveDateRead() *String {
    if s.ProgramPlanEffectiveDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ProgramPlanEffectiveDate = ((*String)(v))
      }
      }
      return s.ProgramPlanEffectiveDate
    }
  func (s *StudentParticipation) ProgramEligibilityDateRead() *String {
    if s.ProgramEligibilityDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ProgramEligibilityDate = ((*String)(v))
      }
      }
      return s.ProgramEligibilityDate
    }
  func (s *StudentParticipation) EvaluationExtensionDateRead() *String {
    if s.EvaluationExtensionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EvaluationExtensionDate = ((*String)(v))
      }
      }
      return s.EvaluationExtensionDate
    }
  func (s *StudentParticipation) StudentSpecialEducationFTERead() *Float {
    if s.StudentSpecialEducationFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.StudentSpecialEducationFTE = ((*Float)(v))
      }
      }
      return s.StudentSpecialEducationFTE
    }
  func (s *StudentParticipation) NOREPDateRead() *String {
    if s.NOREPDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.NOREPDate = ((*String)(v))
      }
      }
      return s.NOREPDate
    }
  func (s *StudentParticipation) ExtendedDayRead() *Bool {
    if s.ExtendedDay == nil {
    if v, ok:= BoolPointer(false); ok {
      s.ExtendedDay = ((*Bool)(v))
      }
      }
      return s.ExtendedDay
    }
  func (s *StudentParticipation) ReevaluationDateRead() *String {
    if s.ReevaluationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReevaluationDate = ((*String)(v))
      }
      }
      return s.ReevaluationDate
    }
  func (s *StudentParticipation) StudentParticipationAsOfDateRead() *String {
    if s.StudentParticipationAsOfDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentParticipationAsOfDate = ((*String)(v))
      }
      }
      return s.StudentParticipationAsOfDate
    }
  func (s *StudentParticipation) ProgramFundingSourcesRead() *ProgramFundingSourcesType {
    if s.ProgramFundingSources == nil {
     if v, ok:= ProgramFundingSourcesTypePointer(ProgramFundingSourcesType{}); ok {
      s.ProgramFundingSources = v
      }
      }
      return s.ProgramFundingSources
    }
  func (s *StudentParticipation) ProgramPlacementDateRead() *String {
    if s.ProgramPlacementDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ProgramPlacementDate = ((*String)(v))
      }
      }
      return s.ProgramPlacementDate
    }
  func (s *StudentParticipation) ParticipationContactRead() *String {
    if s.ParticipationContact == nil {
    if v, ok:= StringPointer(""); ok {
      s.ParticipationContact = ((*String)(v))
      }
      }
      return s.ParticipationContact
    }
  func (s *StudentParticipation) EntryPersonRead() *String {
    if s.EntryPerson == nil {
    if v, ok:= StringPointer(""); ok {
      s.EntryPerson = ((*String)(v))
      }
      }
      return s.EntryPerson
    }
  func (s *StudentParticipation) ProgramTypeRead() *AUCodeSetsStudentFamilyProgramTypeType {
    if s.ProgramType == nil {
    if v, ok:= StringPointer(""); ok {
      s.ProgramType = ((*AUCodeSetsStudentFamilyProgramTypeType)(v))
      }
      }
      return s.ProgramType
    }
  func (s *StudentParticipation) GiftedEligibilityCriteriaRead() *AUCodeSetsYesOrNoCategoryType {
    if s.GiftedEligibilityCriteria == nil {
    if v, ok:= StringPointer(""); ok {
      s.GiftedEligibilityCriteria = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.GiftedEligibilityCriteria
    }
  func (s *StudentParticipation) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentParticipation) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentParticipation) ManagingSchoolRead() *StudentParticipation_ManagingSchool {
    if s.ManagingSchool == nil {
     if v, ok:= StudentParticipation_ManagingSchoolPointer(StudentParticipation_ManagingSchool{}); ok {
      s.ManagingSchool = v
      }
      }
      return s.ManagingSchool
    }
  func (s *StudentParticipation) EvaluationParentalConsentDateRead() *String {
    if s.EvaluationParentalConsentDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EvaluationParentalConsentDate = ((*String)(v))
      }
      }
      return s.EvaluationParentalConsentDate
    }
  func (s *StudentParticipation) ProgramAvailabilityRead() *ProgramAvailabilityType {
    if s.ProgramAvailability == nil {
     if v, ok:= ProgramAvailabilityTypePointer(ProgramAvailabilityType{}); ok {
      s.ProgramAvailability = v
      }
      }
      return s.ProgramAvailability
    }
  func (s *StudentParticipation) EvaluationDateRead() *String {
    if s.EvaluationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EvaluationDate = ((*String)(v))
      }
      }
      return s.EvaluationDate
    }

  // XXXXX
func (t *PlanRequiredContainerType) CopyString(key string, value interface{}) *PlanRequiredContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PlanRequiredContainerType) CopyClone(key string, value interface{}) *PlanRequiredContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PlanRequiredContainerType) Unset(key string) *PlanRequiredContainerType {
        switch key {
  case "PlanRequiredList":
   n.PlanRequiredList = nil
  case "Status":
   n.Status = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PlanRequiredContainerType")
        }
        return n
}

func (n *PlanRequiredContainerType) SetProperty(key string, value interface{}) *PlanRequiredContainerType {
        if n == nil {
                n, _ = PlanRequiredContainerTypePointer(PlanRequiredContainerType{})
        }
        switch key {
    case "PlanRequiredList":
    if v, ok:= PlanRequiredListTypePointer(value); ok {
      n.PlanRequiredList = v
      }
    case "Status":
        if !CodesetContains(AUCodeSetsWellbeingStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PlanRequiredContainerType")
        }
        return n
}

  func (s *PlanRequiredContainerType) PlanRequiredListRead() *PlanRequiredListType {
    if s.PlanRequiredList == nil {
     if v, ok:= PlanRequiredListTypePointer(PlanRequiredListType{}); ok {
      s.PlanRequiredList = v
      }
      }
      return s.PlanRequiredList
    }
  func (s *PlanRequiredContainerType) StatusRead() *AUCodeSetsWellbeingStatusType {
    if s.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
      }
      return s.Status
    }

  // XXXXX
func (t *WithdrawalType) CopyString(key string, value interface{}) *WithdrawalType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *WithdrawalType) CopyClone(key string, value interface{}) *WithdrawalType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *WithdrawalType) Unset(key string) *WithdrawalType {
        switch key {
  case "WithdrawalStartTime":
   n.WithdrawalStartTime = nil
  case "TimeTableCellRefId":
   n.TimeTableCellRefId = nil
  case "ScheduledActivityRefId":
   n.ScheduledActivityRefId = nil
  case "WithdrawalEndTime":
   n.WithdrawalEndTime = nil
  case "TimeTableSubjectRefId":
   n.TimeTableSubjectRefId = nil
  case "WithdrawalDate":
   n.WithdrawalDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WithdrawalType")
        }
        return n
}

func (n *WithdrawalType) SetProperty(key string, value interface{}) *WithdrawalType {
        if n == nil {
                n, _ = WithdrawalTypePointer(WithdrawalType{})
        }
        switch key {
    case "WithdrawalStartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.WithdrawalStartTime = ((*String)(v))
      }
    case "TimeTableCellRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableCellRefId = ((*String)(v))
      }
    case "ScheduledActivityRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.ScheduledActivityRefId = ((*String)(v))
      }
    case "WithdrawalEndTime":
    
    if v, ok:= StringPointer(value); ok {
      n.WithdrawalEndTime = ((*String)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableSubjectRefId = ((*String)(v))
      }
    case "WithdrawalDate":
    
    if v, ok:= StringPointer(value); ok {
      n.WithdrawalDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WithdrawalType")
        }
        return n
}

  func (s *WithdrawalType) WithdrawalStartTimeRead() *String {
    if s.WithdrawalStartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.WithdrawalStartTime = ((*String)(v))
      }
      }
      return s.WithdrawalStartTime
    }
  func (s *WithdrawalType) TimeTableCellRefIdRead() *String {
    if s.TimeTableCellRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableCellRefId = ((*String)(v))
      }
      }
      return s.TimeTableCellRefId
    }
  func (s *WithdrawalType) ScheduledActivityRefIdRead() *String {
    if s.ScheduledActivityRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ScheduledActivityRefId = ((*String)(v))
      }
      }
      return s.ScheduledActivityRefId
    }
  func (s *WithdrawalType) WithdrawalEndTimeRead() *String {
    if s.WithdrawalEndTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.WithdrawalEndTime = ((*String)(v))
      }
      }
      return s.WithdrawalEndTime
    }
  func (s *WithdrawalType) TimeTableSubjectRefIdRead() *String {
    if s.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableSubjectRefId = ((*String)(v))
      }
      }
      return s.TimeTableSubjectRefId
    }
  func (s *WithdrawalType) WithdrawalDateRead() *String {
    if s.WithdrawalDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.WithdrawalDate = ((*String)(v))
      }
      }
      return s.WithdrawalDate
    }

  // XXXXX
func (t *CopyRightContainerType) CopyString(key string, value interface{}) *CopyRightContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CopyRightContainerType) CopyClone(key string, value interface{}) *CopyRightContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CopyRightContainerType) Unset(key string) *CopyRightContainerType {
        switch key {
  case "Holder":
   n.Holder = nil
  case "Date":
   n.Date = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CopyRightContainerType")
        }
        return n
}

func (n *CopyRightContainerType) SetProperty(key string, value interface{}) *CopyRightContainerType {
        if n == nil {
                n, _ = CopyRightContainerTypePointer(CopyRightContainerType{})
        }
        switch key {
    case "Holder":
    
    if v, ok:= StringPointer(value); ok {
      n.Holder = ((*String)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.Date = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CopyRightContainerType")
        }
        return n
}

  func (s *CopyRightContainerType) HolderRead() *String {
    if s.Holder == nil {
    if v, ok:= StringPointer(""); ok {
      s.Holder = ((*String)(v))
      }
      }
      return s.Holder
    }
  func (s *CopyRightContainerType) DateRead() *String {
    if s.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.Date = ((*String)(v))
      }
      }
      return s.Date
    }

  // XXXXX
func (t *AddressCollectionReportingType) CopyString(key string, value interface{}) *AddressCollectionReportingType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AddressCollectionReportingType) CopyClone(key string, value interface{}) *AddressCollectionReportingType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AddressCollectionReportingType) Unset(key string) *AddressCollectionReportingType {
        switch key {
  case "StateProvinceId":
   n.StateProvinceId = nil
  case "AddressCollectionStudentList":
   n.AddressCollectionStudentList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "AGContextualQuestionList":
   n.AGContextualQuestionList = nil
  case "EntityLevel":
   n.EntityLevel = nil
  case "EntityContact":
   n.EntityContact = nil
  case "LocalId":
   n.LocalId = nil
  case "EntityName":
   n.EntityName = nil
  case "ACARAId":
   n.ACARAId = nil
  case "CommonwealthId":
   n.CommonwealthId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressCollectionReportingType")
        }
        return n
}

func (n *AddressCollectionReportingType) SetProperty(key string, value interface{}) *AddressCollectionReportingType {
        if n == nil {
                n, _ = AddressCollectionReportingTypePointer(AddressCollectionReportingType{})
        }
        switch key {
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "AddressCollectionStudentList":
    if v, ok:= AddressCollectionStudentListTypePointer(value); ok {
      n.AddressCollectionStudentList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "AGContextualQuestionList":
    if v, ok:= AGContextualQuestionListTypePointer(value); ok {
      n.AGContextualQuestionList = v
      }
    case "EntityLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.EntityLevel = ((*String)(v))
      }
    case "EntityContact":
    if v, ok:= EntityContactInfoTypePointer(value); ok {
      n.EntityContact = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "EntityName":
    
    if v, ok:= StringPointer(value); ok {
      n.EntityName = ((*String)(v))
      }
    case "ACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.ACARAId = ((*String)(v))
      }
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.CommonwealthId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressCollectionReportingType")
        }
        return n
}

  func (s *AddressCollectionReportingType) StateProvinceIdRead() *StateProvinceIdType {
    if s.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.StateProvinceId
    }
  func (s *AddressCollectionReportingType) AddressCollectionStudentListRead() *AddressCollectionStudentListType {
    if s.AddressCollectionStudentList == nil {
     if v, ok:= AddressCollectionStudentListTypePointer(AddressCollectionStudentListType{}); ok {
      s.AddressCollectionStudentList = v
      }
      }
      return s.AddressCollectionStudentList
    }
  func (s *AddressCollectionReportingType) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *AddressCollectionReportingType) AGContextualQuestionListRead() *AGContextualQuestionListType {
    if s.AGContextualQuestionList == nil {
     if v, ok:= AGContextualQuestionListTypePointer(AGContextualQuestionListType{}); ok {
      s.AGContextualQuestionList = v
      }
      }
      return s.AGContextualQuestionList
    }
  func (s *AddressCollectionReportingType) EntityLevelRead() *String {
    if s.EntityLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.EntityLevel = ((*String)(v))
      }
      }
      return s.EntityLevel
    }
  func (s *AddressCollectionReportingType) EntityContactRead() *EntityContactInfoType {
    if s.EntityContact == nil {
     if v, ok:= EntityContactInfoTypePointer(EntityContactInfoType{}); ok {
      s.EntityContact = v
      }
      }
      return s.EntityContact
    }
  func (s *AddressCollectionReportingType) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *AddressCollectionReportingType) EntityNameRead() *String {
    if s.EntityName == nil {
    if v, ok:= StringPointer(""); ok {
      s.EntityName = ((*String)(v))
      }
      }
      return s.EntityName
    }
  func (s *AddressCollectionReportingType) ACARAIdRead() *String {
    if s.ACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ACARAId = ((*String)(v))
      }
      }
      return s.ACARAId
    }
  func (s *AddressCollectionReportingType) CommonwealthIdRead() *String {
    if s.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.CommonwealthId = ((*String)(v))
      }
      }
      return s.CommonwealthId
    }

  // XXXXX
func (t *LibraryMessageType) CopyString(key string, value interface{}) *LibraryMessageType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LibraryMessageType) CopyClone(key string, value interface{}) *LibraryMessageType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LibraryMessageType) Unset(key string) *LibraryMessageType {
        switch key {
  case "PriorityCodeset":
   n.PriorityCodeset = nil
  case "Sent":
   n.Sent = nil
  case "Priority":
   n.Priority = nil
  case "Text":
   n.Text = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryMessageType")
        }
        return n
}

func (n *LibraryMessageType) SetProperty(key string, value interface{}) *LibraryMessageType {
        if n == nil {
                n, _ = LibraryMessageTypePointer(LibraryMessageType{})
        }
        switch key {
    case "PriorityCodeset":
    
    if v, ok:= StringPointer(value); ok {
      n.PriorityCodeset = ((*String)(v))
      }
    case "Sent":
    
    if v, ok:= StringPointer(value); ok {
      n.Sent = ((*String)(v))
      }
    case "Priority":
    
    if v, ok:= StringPointer(value); ok {
      n.Priority = ((*String)(v))
      }
    case "Text":
    
    if v, ok:= StringPointer(value); ok {
      n.Text = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryMessageType")
        }
        return n
}

  func (s *LibraryMessageType) PriorityCodesetRead() *String {
    if s.PriorityCodeset == nil {
    if v, ok:= StringPointer(""); ok {
      s.PriorityCodeset = ((*String)(v))
      }
      }
      return s.PriorityCodeset
    }
  func (s *LibraryMessageType) SentRead() *String {
    if s.Sent == nil {
    if v, ok:= StringPointer(""); ok {
      s.Sent = ((*String)(v))
      }
      }
      return s.Sent
    }
  func (s *LibraryMessageType) PriorityRead() *String {
    if s.Priority == nil {
    if v, ok:= StringPointer(""); ok {
      s.Priority = ((*String)(v))
      }
      }
      return s.Priority
    }
  func (s *LibraryMessageType) TextRead() *String {
    if s.Text == nil {
    if v, ok:= StringPointer(""); ok {
      s.Text = ((*String)(v))
      }
      }
      return s.Text
    }

  // XXXXX
func (t *WellbeingAppeal) CopyString(key string, value interface{}) *WellbeingAppeal {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *WellbeingAppeal) CopyClone(key string, value interface{}) *WellbeingAppeal {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *WellbeingAppeal) Unset(key string) *WellbeingAppeal {
        switch key {
  case "AppealNotes":
   n.AppealNotes = nil
  case "AppealOutcome":
   n.AppealOutcome = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "Date":
   n.Date = nil
  case "RefId":
   n.RefId = nil
  case "LocalId":
   n.LocalId = nil
  case "DocumentList":
   n.DocumentList = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "WellbeingResponseRefId":
   n.WellbeingResponseRefId = nil
  case "LocalAppealId":
   n.LocalAppealId = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "AppealStatusCode":
   n.AppealStatusCode = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingAppeal")
        }
        return n
}

func (n *WellbeingAppeal) SetProperty(key string, value interface{}) *WellbeingAppeal {
        if n == nil {
                n, _ = WellbeingAppealPointer(WellbeingAppeal{})
        }
        switch key {
    case "AppealNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.AppealNotes = ((*String)(v))
      }
    case "AppealOutcome":
    
    if v, ok:= StringPointer(value); ok {
      n.AppealOutcome = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.Date = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "DocumentList":
    if v, ok:= WellbeingDocumentListTypePointer(value); ok {
      n.DocumentList = v
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "WellbeingResponseRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingResponseRefId = ((*String)(v))
      }
    case "LocalAppealId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalAppealId = ((*LocalIdType)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "AppealStatusCode":
        if !CodesetContains(AUCodeSetsWellbeingAppealStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingAppealStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AppealStatusCode = ((*AUCodeSetsWellbeingAppealStatusType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingAppeal")
        }
        return n
}

  func (s *WellbeingAppeal) AppealNotesRead() *String {
    if s.AppealNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.AppealNotes = ((*String)(v))
      }
      }
      return s.AppealNotes
    }
  func (s *WellbeingAppeal) AppealOutcomeRead() *String {
    if s.AppealOutcome == nil {
    if v, ok:= StringPointer(""); ok {
      s.AppealOutcome = ((*String)(v))
      }
      }
      return s.AppealOutcome
    }
  func (s *WellbeingAppeal) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *WellbeingAppeal) DateRead() *String {
    if s.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.Date = ((*String)(v))
      }
      }
      return s.Date
    }
  func (s *WellbeingAppeal) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *WellbeingAppeal) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *WellbeingAppeal) DocumentListRead() *WellbeingDocumentListType {
    if s.DocumentList == nil {
     if v, ok:= WellbeingDocumentListTypePointer(WellbeingDocumentListType{}); ok {
      s.DocumentList = v
      }
      }
      return s.DocumentList
    }
  func (s *WellbeingAppeal) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *WellbeingAppeal) WellbeingResponseRefIdRead() *String {
    if s.WellbeingResponseRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingResponseRefId = ((*String)(v))
      }
      }
      return s.WellbeingResponseRefId
    }
  func (s *WellbeingAppeal) LocalAppealIdRead() *LocalIdType {
    if s.LocalAppealId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalAppealId = ((*LocalIdType)(v))
      }
      }
      return s.LocalAppealId
    }
  func (s *WellbeingAppeal) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *WellbeingAppeal) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *WellbeingAppeal) AppealStatusCodeRead() *AUCodeSetsWellbeingAppealStatusType {
    if s.AppealStatusCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.AppealStatusCode = ((*AUCodeSetsWellbeingAppealStatusType)(v))
      }
      }
      return s.AppealStatusCode
    }
  func (s *WellbeingAppeal) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }

  // XXXXX
func (t *PersonPicture_PictureSource) CopyString(key string, value interface{}) *PersonPicture_PictureSource {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PersonPicture_PictureSource) CopyClone(key string, value interface{}) *PersonPicture_PictureSource {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PersonPicture_PictureSource) Unset(key string) *PersonPicture_PictureSource {
        switch key {
  case "Type":
   n.Type = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonPicture_PictureSource")
        }
        return n
}

func (n *PersonPicture_PictureSource) SetProperty(key string, value interface{}) *PersonPicture_PictureSource {
        if n == nil {
                n, _ = PersonPicture_PictureSourcePointer(PersonPicture_PictureSource{})
        }
        switch key {
    case "Type":
        if !CodesetContains(AUCodeSetsPictureSourceType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsPictureSourceType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Type = ((*AUCodeSetsPictureSourceType)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*URIOrBinaryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonPicture_PictureSource")
        }
        return n
}

  func (s *PersonPicture_PictureSource) TypeRead() *AUCodeSetsPictureSourceType {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*AUCodeSetsPictureSourceType)(v))
      }
      }
      return s.Type
    }
  func (s *PersonPicture_PictureSource) ValueRead() *URIOrBinaryType {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*URIOrBinaryType)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *PersonInvolvementType_PersonRefId) CopyString(key string, value interface{}) *PersonInvolvementType_PersonRefId {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PersonInvolvementType_PersonRefId) CopyClone(key string, value interface{}) *PersonInvolvementType_PersonRefId {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PersonInvolvementType_PersonRefId) Unset(key string) *PersonInvolvementType_PersonRefId {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonInvolvementType_PersonRefId")
        }
        return n
}

func (n *PersonInvolvementType_PersonRefId) SetProperty(key string, value interface{}) *PersonInvolvementType_PersonRefId {
        if n == nil {
                n, _ = PersonInvolvementType_PersonRefIdPointer(PersonInvolvementType_PersonRefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonInvolvementType_PersonRefId")
        }
        return n
}

  func (s *PersonInvolvementType_PersonRefId) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *PersonInvolvementType_PersonRefId) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *ResourceUsage_ResourceReportLine) CopyString(key string, value interface{}) *ResourceUsage_ResourceReportLine {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ResourceUsage_ResourceReportLine) CopyClone(key string, value interface{}) *ResourceUsage_ResourceReportLine {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ResourceUsage_ResourceReportLine) Unset(key string) *ResourceUsage_ResourceReportLine {
        switch key {
  case "CurrentCost":
   n.CurrentCost = nil
  case "SIF_RefId":
   n.SIF_RefId = nil
  case "StartDate":
   n.StartDate = nil
  case "ReportRow":
   n.ReportRow = nil
  case "EndDate":
   n.EndDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_ResourceReportLine")
        }
        return n
}

func (n *ResourceUsage_ResourceReportLine) SetProperty(key string, value interface{}) *ResourceUsage_ResourceReportLine {
        if n == nil {
                n, _ = ResourceUsage_ResourceReportLinePointer(ResourceUsage_ResourceReportLine{})
        }
        switch key {
    case "CurrentCost":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.CurrentCost = v
      }
    case "SIF_RefId":
    if v, ok:= ResourceUsage_SIF_RefIdPointer(value); ok {
      n.SIF_RefId = v
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.StartDate = ((*String)(v))
      }
    case "ReportRow":
    
    if v, ok:= StringPointer(value); ok {
      n.ReportRow = ((*String)(v))
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EndDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_ResourceReportLine")
        }
        return n
}

  func (s *ResourceUsage_ResourceReportLine) CurrentCostRead() *MonetaryAmountType {
    if s.CurrentCost == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.CurrentCost = v
      }
      }
      return s.CurrentCost
    }
  func (s *ResourceUsage_ResourceReportLine) SIF_RefIdRead() *ResourceUsage_SIF_RefId {
    if s.SIF_RefId == nil {
     if v, ok:= ResourceUsage_SIF_RefIdPointer(ResourceUsage_SIF_RefId{}); ok {
      s.SIF_RefId = v
      }
      }
      return s.SIF_RefId
    }
  func (s *ResourceUsage_ResourceReportLine) StartDateRead() *String {
    if s.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartDate = ((*String)(v))
      }
      }
      return s.StartDate
    }
  func (s *ResourceUsage_ResourceReportLine) ReportRowRead() *String {
    if s.ReportRow == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReportRow = ((*String)(v))
      }
      }
      return s.ReportRow
    }
  func (s *ResourceUsage_ResourceReportLine) EndDateRead() *String {
    if s.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndDate = ((*String)(v))
      }
      }
      return s.EndDate
    }

  // XXXXX
func (t *AggregateStatisticFact) CopyString(key string, value interface{}) *AggregateStatisticFact {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AggregateStatisticFact) CopyClone(key string, value interface{}) *AggregateStatisticFact {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AggregateStatisticFact) Unset(key string) *AggregateStatisticFact {
        switch key {
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "AggregateStatisticInfoRefId":
   n.AggregateStatisticInfoRefId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "Value":
   n.Value = nil
  case "Excluded":
   n.Excluded = nil
  case "RefId":
   n.RefId = nil
  case "Characteristics":
   n.Characteristics = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateStatisticFact")
        }
        return n
}

func (n *AggregateStatisticFact) SetProperty(key string, value interface{}) *AggregateStatisticFact {
        if n == nil {
                n, _ = AggregateStatisticFactPointer(AggregateStatisticFact{})
        }
        switch key {
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "AggregateStatisticInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.AggregateStatisticInfoRefId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "Value":
    
    if v, ok:= FloatPointer(value); ok {
      n.Value = ((*Float)(v))
      }
    case "Excluded":
    
    if v, ok:= StringPointer(value); ok {
      n.Excluded = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "Characteristics":
    if v, ok:= CharacteristicsTypePointer(value); ok {
      n.Characteristics = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateStatisticFact")
        }
        return n
}

  func (s *AggregateStatisticFact) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *AggregateStatisticFact) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *AggregateStatisticFact) AggregateStatisticInfoRefIdRead() *String {
    if s.AggregateStatisticInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.AggregateStatisticInfoRefId = ((*String)(v))
      }
      }
      return s.AggregateStatisticInfoRefId
    }
  func (s *AggregateStatisticFact) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *AggregateStatisticFact) ValueRead() *Float {
    if s.Value == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Value = ((*Float)(v))
      }
      }
      return s.Value
    }
  func (s *AggregateStatisticFact) ExcludedRead() *String {
    if s.Excluded == nil {
    if v, ok:= StringPointer(""); ok {
      s.Excluded = ((*String)(v))
      }
      }
      return s.Excluded
    }
  func (s *AggregateStatisticFact) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *AggregateStatisticFact) CharacteristicsRead() *CharacteristicsType {
    if s.Characteristics == nil {
     if v, ok:= CharacteristicsTypePointer(CharacteristicsType{}); ok {
      s.Characteristics = v
      }
      }
      return s.Characteristics
    }

  // XXXXX
func (t *AddressType) CopyString(key string, value interface{}) *AddressType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AddressType) CopyClone(key string, value interface{}) *AddressType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AddressType) Unset(key string) *AddressType {
        switch key {
  case "Community":
   n.Community = nil
  case "EffectiveFromDate":
   n.EffectiveFromDate = nil
  case "StateProvince":
   n.StateProvince = nil
  case "Type":
   n.Type = nil
  case "MapReference":
   n.MapReference = nil
  case "RadioContact":
   n.RadioContact = nil
  case "City":
   n.City = nil
  case "AddressGlobalUID":
   n.AddressGlobalUID = nil
  case "GridLocation":
   n.GridLocation = nil
  case "LocalId":
   n.LocalId = nil
  case "EffectiveToDate":
   n.EffectiveToDate = nil
  case "PostalCode":
   n.PostalCode = nil
  case "Role":
   n.Role = nil
  case "Street":
   n.Street = nil
  case "StatisticalAreas":
   n.StatisticalAreas = nil
  case "Country":
   n.Country = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressType")
        }
        return n
}

func (n *AddressType) SetProperty(key string, value interface{}) *AddressType {
        if n == nil {
                n, _ = AddressTypePointer(AddressType{})
        }
        switch key {
    case "Community":
    
    if v, ok:= StringPointer(value); ok {
      n.Community = ((*String)(v))
      }
    case "EffectiveFromDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EffectiveFromDate = ((*String)(v))
      }
    case "StateProvince":
    
    if v, ok:= StringPointer(value); ok {
      n.StateProvince = ((*StateProvinceType)(v))
      }
    case "Type":
        if !CodesetContains(AUCodeSetsAddressTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAddressTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Type = ((*AUCodeSetsAddressTypeType)(v))
      }
    case "MapReference":
    if v, ok:= MapReferenceTypePointer(value); ok {
      n.MapReference = v
      }
    case "RadioContact":
    
    if v, ok:= StringPointer(value); ok {
      n.RadioContact = ((*String)(v))
      }
    case "City":
    
    if v, ok:= StringPointer(value); ok {
      n.City = ((*String)(v))
      }
    case "AddressGlobalUID":
    
    if v, ok:= StringPointer(value); ok {
      n.AddressGlobalUID = ((*GUIDType)(v))
      }
    case "GridLocation":
    if v, ok:= GridLocationTypePointer(value); ok {
      n.GridLocation = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "EffectiveToDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EffectiveToDate = ((*String)(v))
      }
    case "PostalCode":
    
    if v, ok:= StringPointer(value); ok {
      n.PostalCode = ((*String)(v))
      }
    case "Role":
        if !CodesetContains(AUCodeSetsAddressRoleType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAddressRoleType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Role = ((*AUCodeSetsAddressRoleType)(v))
      }
    case "Street":
    if v, ok:= AddressStreetTypePointer(value); ok {
      n.Street = v
      }
    case "StatisticalAreas":
    if v, ok:= StatisticalAreasTypePointer(value); ok {
      n.StatisticalAreas = v
      }
    case "Country":
        if !CodesetContains(AUCodeSetsStandardAustralianClassificationOfCountriesSACCType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStandardAustralianClassificationOfCountriesSACCType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Country = ((*CountryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressType")
        }
        return n
}

  func (s *AddressType) CommunityRead() *String {
    if s.Community == nil {
    if v, ok:= StringPointer(""); ok {
      s.Community = ((*String)(v))
      }
      }
      return s.Community
    }
  func (s *AddressType) EffectiveFromDateRead() *String {
    if s.EffectiveFromDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EffectiveFromDate = ((*String)(v))
      }
      }
      return s.EffectiveFromDate
    }
  func (s *AddressType) StateProvinceRead() *StateProvinceType {
    if s.StateProvince == nil {
    if v, ok:= StringPointer(""); ok {
      s.StateProvince = ((*StateProvinceType)(v))
      }
      }
      return s.StateProvince
    }
  func (s *AddressType) TypeRead() *AUCodeSetsAddressTypeType {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*AUCodeSetsAddressTypeType)(v))
      }
      }
      return s.Type
    }
  func (s *AddressType) MapReferenceRead() *MapReferenceType {
    if s.MapReference == nil {
     if v, ok:= MapReferenceTypePointer(MapReferenceType{}); ok {
      s.MapReference = v
      }
      }
      return s.MapReference
    }
  func (s *AddressType) RadioContactRead() *String {
    if s.RadioContact == nil {
    if v, ok:= StringPointer(""); ok {
      s.RadioContact = ((*String)(v))
      }
      }
      return s.RadioContact
    }
  func (s *AddressType) CityRead() *String {
    if s.City == nil {
    if v, ok:= StringPointer(""); ok {
      s.City = ((*String)(v))
      }
      }
      return s.City
    }
  func (s *AddressType) AddressGlobalUIDRead() *GUIDType {
    if s.AddressGlobalUID == nil {
    if v, ok:= StringPointer(""); ok {
      s.AddressGlobalUID = ((*GUIDType)(v))
      }
      }
      return s.AddressGlobalUID
    }
  func (s *AddressType) GridLocationRead() *GridLocationType {
    if s.GridLocation == nil {
     if v, ok:= GridLocationTypePointer(GridLocationType{}); ok {
      s.GridLocation = v
      }
      }
      return s.GridLocation
    }
  func (s *AddressType) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *AddressType) EffectiveToDateRead() *String {
    if s.EffectiveToDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EffectiveToDate = ((*String)(v))
      }
      }
      return s.EffectiveToDate
    }
  func (s *AddressType) PostalCodeRead() *String {
    if s.PostalCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.PostalCode = ((*String)(v))
      }
      }
      return s.PostalCode
    }
  func (s *AddressType) RoleRead() *AUCodeSetsAddressRoleType {
    if s.Role == nil {
    if v, ok:= StringPointer(""); ok {
      s.Role = ((*AUCodeSetsAddressRoleType)(v))
      }
      }
      return s.Role
    }
  func (s *AddressType) StreetRead() *AddressStreetType {
    if s.Street == nil {
     if v, ok:= AddressStreetTypePointer(AddressStreetType{}); ok {
      s.Street = v
      }
      }
      return s.Street
    }
  func (s *AddressType) StatisticalAreasRead() *StatisticalAreasType {
    if s.StatisticalAreas == nil {
     if v, ok:= StatisticalAreasTypePointer(StatisticalAreasType{}); ok {
      s.StatisticalAreas = v
      }
      }
      return s.StatisticalAreas
    }
  func (s *AddressType) CountryRead() *CountryType {
    if s.Country == nil {
    if v, ok:= StringPointer(""); ok {
      s.Country = ((*CountryType)(v))
      }
      }
      return s.Country
    }

  // XXXXX
func (t *StaffMostRecentContainerType) CopyString(key string, value interface{}) *StaffMostRecentContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StaffMostRecentContainerType) CopyClone(key string, value interface{}) *StaffMostRecentContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StaffMostRecentContainerType) Unset(key string) *StaffMostRecentContainerType {
        switch key {
  case "SchoolLocalId":
   n.SchoolLocalId = nil
  case "LocalCampusId":
   n.LocalCampusId = nil
  case "NAPLANClassList":
   n.NAPLANClassList = nil
  case "HomeGroup":
   n.HomeGroup = nil
  case "SchoolACARAId":
   n.SchoolACARAId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffMostRecentContainerType")
        }
        return n
}

func (n *StaffMostRecentContainerType) SetProperty(key string, value interface{}) *StaffMostRecentContainerType {
        if n == nil {
                n, _ = StaffMostRecentContainerTypePointer(StaffMostRecentContainerType{})
        }
        switch key {
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "LocalCampusId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalCampusId = ((*LocalIdType)(v))
      }
    case "NAPLANClassList":
    if v, ok:= NAPLANClassListTypePointer(value); ok {
      n.NAPLANClassList = v
      }
    case "HomeGroup":
    
    if v, ok:= StringPointer(value); ok {
      n.HomeGroup = ((*String)(v))
      }
    case "SchoolACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolACARAId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffMostRecentContainerType")
        }
        return n
}

  func (s *StaffMostRecentContainerType) SchoolLocalIdRead() *LocalIdType {
    if s.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolLocalId
    }
  func (s *StaffMostRecentContainerType) LocalCampusIdRead() *LocalIdType {
    if s.LocalCampusId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalCampusId = ((*LocalIdType)(v))
      }
      }
      return s.LocalCampusId
    }
  func (s *StaffMostRecentContainerType) NAPLANClassListRead() *NAPLANClassListType {
    if s.NAPLANClassList == nil {
     if v, ok:= NAPLANClassListTypePointer(NAPLANClassListType{}); ok {
      s.NAPLANClassList = v
      }
      }
      return s.NAPLANClassList
    }
  func (s *StaffMostRecentContainerType) HomeGroupRead() *String {
    if s.HomeGroup == nil {
    if v, ok:= StringPointer(""); ok {
      s.HomeGroup = ((*String)(v))
      }
      }
      return s.HomeGroup
    }
  func (s *StaffMostRecentContainerType) SchoolACARAIdRead() *LocalIdType {
    if s.SchoolACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolACARAId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolACARAId
    }

  // XXXXX
func (t *StudentActivityParticipation) CopyString(key string, value interface{}) *StudentActivityParticipation {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentActivityParticipation) CopyClone(key string, value interface{}) *StudentActivityParticipation {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentActivityParticipation) Unset(key string) *StudentActivityParticipation {
        switch key {
  case "RecognitionList":
   n.RecognitionList = nil
  case "StudentActivityInfoRefId":
   n.StudentActivityInfoRefId = nil
  case "ParticipationComment":
   n.ParticipationComment = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "Role":
   n.Role = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "EndDate":
   n.EndDate = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "RefId":
   n.RefId = nil
  case "StartDate":
   n.StartDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentActivityParticipation")
        }
        return n
}

func (n *StudentActivityParticipation) SetProperty(key string, value interface{}) *StudentActivityParticipation {
        if n == nil {
                n, _ = StudentActivityParticipationPointer(StudentActivityParticipation{})
        }
        switch key {
    case "RecognitionList":
    if v, ok:= RecognitionListTypePointer(value); ok {
      n.RecognitionList = v
      }
    case "StudentActivityInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentActivityInfoRefId = ((*String)(v))
      }
    case "ParticipationComment":
    
    if v, ok:= StringPointer(value); ok {
      n.ParticipationComment = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "Role":
    
    if v, ok:= StringPointer(value); ok {
      n.Role = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EndDate = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.StartDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentActivityParticipation")
        }
        return n
}

  func (s *StudentActivityParticipation) RecognitionListRead() *RecognitionListType {
    if s.RecognitionList == nil {
     if v, ok:= RecognitionListTypePointer(RecognitionListType{}); ok {
      s.RecognitionList = v
      }
      }
      return s.RecognitionList
    }
  func (s *StudentActivityParticipation) StudentActivityInfoRefIdRead() *String {
    if s.StudentActivityInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentActivityInfoRefId = ((*String)(v))
      }
      }
      return s.StudentActivityInfoRefId
    }
  func (s *StudentActivityParticipation) ParticipationCommentRead() *String {
    if s.ParticipationComment == nil {
    if v, ok:= StringPointer(""); ok {
      s.ParticipationComment = ((*String)(v))
      }
      }
      return s.ParticipationComment
    }
  func (s *StudentActivityParticipation) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentActivityParticipation) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *StudentActivityParticipation) RoleRead() *String {
    if s.Role == nil {
    if v, ok:= StringPointer(""); ok {
      s.Role = ((*String)(v))
      }
      }
      return s.Role
    }
  func (s *StudentActivityParticipation) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *StudentActivityParticipation) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentActivityParticipation) EndDateRead() *String {
    if s.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndDate = ((*String)(v))
      }
      }
      return s.EndDate
    }
  func (s *StudentActivityParticipation) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentActivityParticipation) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StudentActivityParticipation) StartDateRead() *String {
    if s.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartDate = ((*String)(v))
      }
      }
      return s.StartDate
    }

  // XXXXX
func (t *NAPTestScoreSummary) CopyString(key string, value interface{}) *NAPTestScoreSummary {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPTestScoreSummary) CopyClone(key string, value interface{}) *NAPTestScoreSummary {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPTestScoreSummary) Unset(key string) *NAPTestScoreSummary {
        switch key {
  case "DomainNationalAverage":
   n.DomainNationalAverage = nil
  case "NAPTestLocalId":
   n.NAPTestLocalId = nil
  case "RefId":
   n.RefId = nil
  case "NAPTestRefId":
   n.NAPTestRefId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "DomainTopNational60Percent":
   n.DomainTopNational60Percent = nil
  case "DomainBottomNational60Percent":
   n.DomainBottomNational60Percent = nil
  case "DomainSchoolAverage":
   n.DomainSchoolAverage = nil
  case "SchoolACARAId":
   n.SchoolACARAId = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "DomainJurisdictionAverage":
   n.DomainJurisdictionAverage = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestScoreSummary")
        }
        return n
}

func (n *NAPTestScoreSummary) SetProperty(key string, value interface{}) *NAPTestScoreSummary {
        if n == nil {
                n, _ = NAPTestScoreSummaryPointer(NAPTestScoreSummary{})
        }
        switch key {
    case "DomainNationalAverage":
    
    if v, ok:= FloatPointer(value); ok {
      n.DomainNationalAverage = ((*Float)(v))
      }
    case "NAPTestLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestLocalId = ((*LocalIdType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "NAPTestRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestRefId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "DomainTopNational60Percent":
    
    if v, ok:= FloatPointer(value); ok {
      n.DomainTopNational60Percent = ((*Float)(v))
      }
    case "DomainBottomNational60Percent":
    
    if v, ok:= FloatPointer(value); ok {
      n.DomainBottomNational60Percent = ((*Float)(v))
      }
    case "DomainSchoolAverage":
    
    if v, ok:= FloatPointer(value); ok {
      n.DomainSchoolAverage = ((*Float)(v))
      }
    case "SchoolACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolACARAId = ((*LocalIdType)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "DomainJurisdictionAverage":
    
    if v, ok:= FloatPointer(value); ok {
      n.DomainJurisdictionAverage = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestScoreSummary")
        }
        return n
}

  func (s *NAPTestScoreSummary) DomainNationalAverageRead() *Float {
    if s.DomainNationalAverage == nil {
    if v, ok:= FloatPointer(0); ok {
      s.DomainNationalAverage = ((*Float)(v))
      }
      }
      return s.DomainNationalAverage
    }
  func (s *NAPTestScoreSummary) NAPTestLocalIdRead() *LocalIdType {
    if s.NAPTestLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestLocalId = ((*LocalIdType)(v))
      }
      }
      return s.NAPTestLocalId
    }
  func (s *NAPTestScoreSummary) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *NAPTestScoreSummary) NAPTestRefIdRead() *String {
    if s.NAPTestRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestRefId = ((*String)(v))
      }
      }
      return s.NAPTestRefId
    }
  func (s *NAPTestScoreSummary) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *NAPTestScoreSummary) DomainTopNational60PercentRead() *Float {
    if s.DomainTopNational60Percent == nil {
    if v, ok:= FloatPointer(0); ok {
      s.DomainTopNational60Percent = ((*Float)(v))
      }
      }
      return s.DomainTopNational60Percent
    }
  func (s *NAPTestScoreSummary) DomainBottomNational60PercentRead() *Float {
    if s.DomainBottomNational60Percent == nil {
    if v, ok:= FloatPointer(0); ok {
      s.DomainBottomNational60Percent = ((*Float)(v))
      }
      }
      return s.DomainBottomNational60Percent
    }
  func (s *NAPTestScoreSummary) DomainSchoolAverageRead() *Float {
    if s.DomainSchoolAverage == nil {
    if v, ok:= FloatPointer(0); ok {
      s.DomainSchoolAverage = ((*Float)(v))
      }
      }
      return s.DomainSchoolAverage
    }
  func (s *NAPTestScoreSummary) SchoolACARAIdRead() *LocalIdType {
    if s.SchoolACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolACARAId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolACARAId
    }
  func (s *NAPTestScoreSummary) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *NAPTestScoreSummary) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *NAPTestScoreSummary) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *NAPTestScoreSummary) DomainJurisdictionAverageRead() *Float {
    if s.DomainJurisdictionAverage == nil {
    if v, ok:= FloatPointer(0); ok {
      s.DomainJurisdictionAverage = ((*Float)(v))
      }
      }
      return s.DomainJurisdictionAverage
    }

  // XXXXX
func (t *NAPTestItem) CopyString(key string, value interface{}) *NAPTestItem {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPTestItem) CopyClone(key string, value interface{}) *NAPTestItem {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPTestItem) Unset(key string) *NAPTestItem {
        switch key {
  case "RefId":
   n.RefId = nil
  case "TestItemContent":
   n.TestItemContent = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestItem")
        }
        return n
}

func (n *NAPTestItem) SetProperty(key string, value interface{}) *NAPTestItem {
        if n == nil {
                n, _ = NAPTestItemPointer(NAPTestItem{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "TestItemContent":
    if v, ok:= NAPTestItemContentTypePointer(value); ok {
      n.TestItemContent = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestItem")
        }
        return n
}

  func (s *NAPTestItem) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *NAPTestItem) TestItemContentRead() *NAPTestItemContentType {
    if s.TestItemContent == nil {
     if v, ok:= NAPTestItemContentTypePointer(NAPTestItemContentType{}); ok {
      s.TestItemContent = v
      }
      }
      return s.TestItemContent
    }
  func (s *NAPTestItem) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *NAPTestItem) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *NAPTestItem) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }

  // XXXXX
func (t *AttendanceTimeType) CopyString(key string, value interface{}) *AttendanceTimeType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AttendanceTimeType) CopyClone(key string, value interface{}) *AttendanceTimeType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AttendanceTimeType) Unset(key string) *AttendanceTimeType {
        switch key {
  case "AttendanceCode":
   n.AttendanceCode = nil
  case "EndTime":
   n.EndTime = nil
  case "AttendanceStatus":
   n.AttendanceStatus = nil
  case "AttendanceType":
   n.AttendanceType = nil
  case "AttendanceNote":
   n.AttendanceNote = nil
  case "DurationValue":
   n.DurationValue = nil
  case "TimeTableSubjectRefId":
   n.TimeTableSubjectRefId = nil
  case "StartTime":
   n.StartTime = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AttendanceTimeType")
        }
        return n
}

func (n *AttendanceTimeType) SetProperty(key string, value interface{}) *AttendanceTimeType {
        if n == nil {
                n, _ = AttendanceTimeTypePointer(AttendanceTimeType{})
        }
        switch key {
    case "AttendanceCode":
    if v, ok:= AttendanceCodeTypePointer(value); ok {
      n.AttendanceCode = v
      }
    case "EndTime":
    
    if v, ok:= StringPointer(value); ok {
      n.EndTime = ((*String)(v))
      }
    case "AttendanceStatus":
        if !CodesetContains(AUCodeSetsAttendanceStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAttendanceStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
    case "AttendanceType":
    
    if v, ok:= StringPointer(value); ok {
      n.AttendanceType = ((*String)(v))
      }
    case "AttendanceNote":
    
    if v, ok:= StringPointer(value); ok {
      n.AttendanceNote = ((*String)(v))
      }
    case "DurationValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.DurationValue = ((*Float)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.StartTime = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AttendanceTimeType")
        }
        return n
}

  func (s *AttendanceTimeType) AttendanceCodeRead() *AttendanceCodeType {
    if s.AttendanceCode == nil {
     if v, ok:= AttendanceCodeTypePointer(AttendanceCodeType{}); ok {
      s.AttendanceCode = v
      }
      }
      return s.AttendanceCode
    }
  func (s *AttendanceTimeType) EndTimeRead() *String {
    if s.EndTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndTime = ((*String)(v))
      }
      }
      return s.EndTime
    }
  func (s *AttendanceTimeType) AttendanceStatusRead() *AUCodeSetsAttendanceStatusType {
    if s.AttendanceStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
      }
      return s.AttendanceStatus
    }
  func (s *AttendanceTimeType) AttendanceTypeRead() *String {
    if s.AttendanceType == nil {
    if v, ok:= StringPointer(""); ok {
      s.AttendanceType = ((*String)(v))
      }
      }
      return s.AttendanceType
    }
  func (s *AttendanceTimeType) AttendanceNoteRead() *String {
    if s.AttendanceNote == nil {
    if v, ok:= StringPointer(""); ok {
      s.AttendanceNote = ((*String)(v))
      }
      }
      return s.AttendanceNote
    }
  func (s *AttendanceTimeType) DurationValueRead() *Float {
    if s.DurationValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.DurationValue = ((*Float)(v))
      }
      }
      return s.DurationValue
    }
  func (s *AttendanceTimeType) TimeTableSubjectRefIdRead() *RefIdType {
    if s.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
      }
      return s.TimeTableSubjectRefId
    }
  func (s *AttendanceTimeType) StartTimeRead() *String {
    if s.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartTime = ((*String)(v))
      }
      }
      return s.StartTime
    }

  // XXXXX
func (t *DebitOrCreditAmountType) CopyString(key string, value interface{}) *DebitOrCreditAmountType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *DebitOrCreditAmountType) CopyClone(key string, value interface{}) *DebitOrCreditAmountType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *DebitOrCreditAmountType) Unset(key string) *DebitOrCreditAmountType {
        switch key {
  case "Type":
   n.Type = nil
  case "Currency":
   n.Currency = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DebitOrCreditAmountType")
        }
        return n
}

func (n *DebitOrCreditAmountType) SetProperty(key string, value interface{}) *DebitOrCreditAmountType {
        if n == nil {
                n, _ = DebitOrCreditAmountTypePointer(DebitOrCreditAmountType{})
        }
        switch key {
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
    case "Currency":
        if !CodesetContains(ISO4217CurrencyNamesAndCodeElementsType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "ISO4217CurrencyNamesAndCodeElementsType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Currency = ((*ISO4217CurrencyNamesAndCodeElementsType)(v))
      }
    case "Value":
    
    if v, ok:= FloatPointer(value); ok {
      n.Value = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DebitOrCreditAmountType")
        }
        return n
}

  func (s *DebitOrCreditAmountType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }
  func (s *DebitOrCreditAmountType) CurrencyRead() *ISO4217CurrencyNamesAndCodeElementsType {
    if s.Currency == nil {
    if v, ok:= StringPointer(""); ok {
      s.Currency = ((*ISO4217CurrencyNamesAndCodeElementsType)(v))
      }
      }
      return s.Currency
    }
  func (s *DebitOrCreditAmountType) ValueRead() *Float {
    if s.Value == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Value = ((*Float)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *ApprovalType) CopyString(key string, value interface{}) *ApprovalType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ApprovalType) CopyClone(key string, value interface{}) *ApprovalType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ApprovalType) Unset(key string) *ApprovalType {
        switch key {
  case "Organization":
   n.Organization = nil
  case "Date":
   n.Date = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ApprovalType")
        }
        return n
}

func (n *ApprovalType) SetProperty(key string, value interface{}) *ApprovalType {
        if n == nil {
                n, _ = ApprovalTypePointer(ApprovalType{})
        }
        switch key {
    case "Organization":
    
    if v, ok:= StringPointer(value); ok {
      n.Organization = ((*String)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.Date = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ApprovalType")
        }
        return n
}

  func (s *ApprovalType) OrganizationRead() *String {
    if s.Organization == nil {
    if v, ok:= StringPointer(""); ok {
      s.Organization = ((*String)(v))
      }
      }
      return s.Organization
    }
  func (s *ApprovalType) DateRead() *String {
    if s.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.Date = ((*String)(v))
      }
      }
      return s.Date
    }

  // XXXXX
func (t *WellbeingAlert) CopyString(key string, value interface{}) *WellbeingAlert {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *WellbeingAlert) CopyClone(key string, value interface{}) *WellbeingAlert {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *WellbeingAlert) Unset(key string) *WellbeingAlert {
        switch key {
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "AlertSeverity":
   n.AlertSeverity = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "EnrolmentRestricted":
   n.EnrolmentRestricted = nil
  case "LocalId":
   n.LocalId = nil
  case "WellbeingAlertEndDate":
   n.WellbeingAlertEndDate = nil
  case "WellbeingAlertDescription":
   n.WellbeingAlertDescription = nil
  case "RefId":
   n.RefId = nil
  case "WellbeingAlertStartDate":
   n.WellbeingAlertStartDate = nil
  case "Date":
   n.Date = nil
  case "AlertAudience":
   n.AlertAudience = nil
  case "WellbeingAlertCategory":
   n.WellbeingAlertCategory = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "AlertKeyContact":
   n.AlertKeyContact = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingAlert")
        }
        return n
}

func (n *WellbeingAlert) SetProperty(key string, value interface{}) *WellbeingAlert {
        if n == nil {
                n, _ = WellbeingAlertPointer(WellbeingAlert{})
        }
        switch key {
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "AlertSeverity":
    
    if v, ok:= StringPointer(value); ok {
      n.AlertSeverity = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "EnrolmentRestricted":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.EnrolmentRestricted = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "WellbeingAlertEndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingAlertEndDate = ((*String)(v))
      }
    case "WellbeingAlertDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingAlertDescription = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "WellbeingAlertStartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingAlertStartDate = ((*String)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.Date = ((*String)(v))
      }
    case "AlertAudience":
    
    if v, ok:= StringPointer(value); ok {
      n.AlertAudience = ((*String)(v))
      }
    case "WellbeingAlertCategory":
        if !CodesetContains(AUCodeSetsWellbeingAlertCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingAlertCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.WellbeingAlertCategory = ((*AUCodeSetsWellbeingAlertCategoryType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "AlertKeyContact":
    
    if v, ok:= StringPointer(value); ok {
      n.AlertKeyContact = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingAlert")
        }
        return n
}

  func (s *WellbeingAlert) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *WellbeingAlert) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *WellbeingAlert) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *WellbeingAlert) AlertSeverityRead() *String {
    if s.AlertSeverity == nil {
    if v, ok:= StringPointer(""); ok {
      s.AlertSeverity = ((*String)(v))
      }
      }
      return s.AlertSeverity
    }
  func (s *WellbeingAlert) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *WellbeingAlert) EnrolmentRestrictedRead() *AUCodeSetsYesOrNoCategoryType {
    if s.EnrolmentRestricted == nil {
    if v, ok:= StringPointer(""); ok {
      s.EnrolmentRestricted = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.EnrolmentRestricted
    }
  func (s *WellbeingAlert) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *WellbeingAlert) WellbeingAlertEndDateRead() *String {
    if s.WellbeingAlertEndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingAlertEndDate = ((*String)(v))
      }
      }
      return s.WellbeingAlertEndDate
    }
  func (s *WellbeingAlert) WellbeingAlertDescriptionRead() *String {
    if s.WellbeingAlertDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingAlertDescription = ((*String)(v))
      }
      }
      return s.WellbeingAlertDescription
    }
  func (s *WellbeingAlert) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *WellbeingAlert) WellbeingAlertStartDateRead() *String {
    if s.WellbeingAlertStartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingAlertStartDate = ((*String)(v))
      }
      }
      return s.WellbeingAlertStartDate
    }
  func (s *WellbeingAlert) DateRead() *String {
    if s.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.Date = ((*String)(v))
      }
      }
      return s.Date
    }
  func (s *WellbeingAlert) AlertAudienceRead() *String {
    if s.AlertAudience == nil {
    if v, ok:= StringPointer(""); ok {
      s.AlertAudience = ((*String)(v))
      }
      }
      return s.AlertAudience
    }
  func (s *WellbeingAlert) WellbeingAlertCategoryRead() *AUCodeSetsWellbeingAlertCategoryType {
    if s.WellbeingAlertCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingAlertCategory = ((*AUCodeSetsWellbeingAlertCategoryType)(v))
      }
      }
      return s.WellbeingAlertCategory
    }
  func (s *WellbeingAlert) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *WellbeingAlert) AlertKeyContactRead() *String {
    if s.AlertKeyContact == nil {
    if v, ok:= StringPointer(""); ok {
      s.AlertKeyContact = ((*String)(v))
      }
      }
      return s.AlertKeyContact
    }

  // XXXXX
func (t *LibraryItemInfoType) CopyString(key string, value interface{}) *LibraryItemInfoType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LibraryItemInfoType) CopyClone(key string, value interface{}) *LibraryItemInfoType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LibraryItemInfoType) Unset(key string) *LibraryItemInfoType {
        switch key {
  case "ISBN":
   n.ISBN = nil
  case "Type":
   n.Type = nil
  case "CallNumber":
   n.CallNumber = nil
  case "ElectronicId":
   n.ElectronicId = nil
  case "ReplacementCost":
   n.ReplacementCost = nil
  case "Author":
   n.Author = nil
  case "Cost":
   n.Cost = nil
  case "Title":
   n.Title = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryItemInfoType")
        }
        return n
}

func (n *LibraryItemInfoType) SetProperty(key string, value interface{}) *LibraryItemInfoType {
        if n == nil {
                n, _ = LibraryItemInfoTypePointer(LibraryItemInfoType{})
        }
        switch key {
    case "ISBN":
    
    if v, ok:= StringPointer(value); ok {
      n.ISBN = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
    case "CallNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.CallNumber = ((*String)(v))
      }
    case "ElectronicId":
    if v, ok:= ElectronicIdTypePointer(value); ok {
      n.ElectronicId = v
      }
    case "ReplacementCost":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.ReplacementCost = v
      }
    case "Author":
    
    if v, ok:= StringPointer(value); ok {
      n.Author = ((*String)(v))
      }
    case "Cost":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.Cost = v
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.Title = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryItemInfoType")
        }
        return n
}

  func (s *LibraryItemInfoType) ISBNRead() *String {
    if s.ISBN == nil {
    if v, ok:= StringPointer(""); ok {
      s.ISBN = ((*String)(v))
      }
      }
      return s.ISBN
    }
  func (s *LibraryItemInfoType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }
  func (s *LibraryItemInfoType) CallNumberRead() *String {
    if s.CallNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.CallNumber = ((*String)(v))
      }
      }
      return s.CallNumber
    }
  func (s *LibraryItemInfoType) ElectronicIdRead() *ElectronicIdType {
    if s.ElectronicId == nil {
     if v, ok:= ElectronicIdTypePointer(ElectronicIdType{}); ok {
      s.ElectronicId = v
      }
      }
      return s.ElectronicId
    }
  func (s *LibraryItemInfoType) ReplacementCostRead() *MonetaryAmountType {
    if s.ReplacementCost == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.ReplacementCost = v
      }
      }
      return s.ReplacementCost
    }
  func (s *LibraryItemInfoType) AuthorRead() *String {
    if s.Author == nil {
    if v, ok:= StringPointer(""); ok {
      s.Author = ((*String)(v))
      }
      }
      return s.Author
    }
  func (s *LibraryItemInfoType) CostRead() *MonetaryAmountType {
    if s.Cost == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.Cost = v
      }
      }
      return s.Cost
    }
  func (s *LibraryItemInfoType) TitleRead() *String {
    if s.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.Title = ((*String)(v))
      }
      }
      return s.Title
    }

  // XXXXX
func (t *CensusReportingType) CopyString(key string, value interface{}) *CensusReportingType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CensusReportingType) CopyClone(key string, value interface{}) *CensusReportingType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CensusReportingType) Unset(key string) *CensusReportingType {
        switch key {
  case "EntityName":
   n.EntityName = nil
  case "CensusStaffList":
   n.CensusStaffList = nil
  case "CommonwealthId":
   n.CommonwealthId = nil
  case "EntityContact":
   n.EntityContact = nil
  case "CensusStudentList":
   n.CensusStudentList = nil
  case "EntityLevel":
   n.EntityLevel = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusReportingType")
        }
        return n
}

func (n *CensusReportingType) SetProperty(key string, value interface{}) *CensusReportingType {
        if n == nil {
                n, _ = CensusReportingTypePointer(CensusReportingType{})
        }
        switch key {
    case "EntityName":
    
    if v, ok:= StringPointer(value); ok {
      n.EntityName = ((*String)(v))
      }
    case "CensusStaffList":
    if v, ok:= CensusStaffListTypePointer(value); ok {
      n.CensusStaffList = v
      }
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.CommonwealthId = ((*String)(v))
      }
    case "EntityContact":
    if v, ok:= EntityContactInfoTypePointer(value); ok {
      n.EntityContact = v
      }
    case "CensusStudentList":
    if v, ok:= CensusStudentListTypePointer(value); ok {
      n.CensusStudentList = v
      }
    case "EntityLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.EntityLevel = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusReportingType")
        }
        return n
}

  func (s *CensusReportingType) EntityNameRead() *String {
    if s.EntityName == nil {
    if v, ok:= StringPointer(""); ok {
      s.EntityName = ((*String)(v))
      }
      }
      return s.EntityName
    }
  func (s *CensusReportingType) CensusStaffListRead() *CensusStaffListType {
    if s.CensusStaffList == nil {
     if v, ok:= CensusStaffListTypePointer(CensusStaffListType{}); ok {
      s.CensusStaffList = v
      }
      }
      return s.CensusStaffList
    }
  func (s *CensusReportingType) CommonwealthIdRead() *String {
    if s.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.CommonwealthId = ((*String)(v))
      }
      }
      return s.CommonwealthId
    }
  func (s *CensusReportingType) EntityContactRead() *EntityContactInfoType {
    if s.EntityContact == nil {
     if v, ok:= EntityContactInfoTypePointer(EntityContactInfoType{}); ok {
      s.EntityContact = v
      }
      }
      return s.EntityContact
    }
  func (s *CensusReportingType) CensusStudentListRead() *CensusStudentListType {
    if s.CensusStudentList == nil {
     if v, ok:= CensusStudentListTypePointer(CensusStudentListType{}); ok {
      s.CensusStudentList = v
      }
      }
      return s.CensusStudentList
    }
  func (s *CensusReportingType) EntityLevelRead() *String {
    if s.EntityLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.EntityLevel = ((*String)(v))
      }
      }
      return s.EntityLevel
    }

  // XXXXX
func (t *CalendarDateInfoType) CopyString(key string, value interface{}) *CalendarDateInfoType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CalendarDateInfoType) CopyClone(key string, value interface{}) *CalendarDateInfoType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CalendarDateInfoType) Unset(key string) *CalendarDateInfoType {
        switch key {
  case "OtherCodeList":
   n.OtherCodeList = nil
  case "Code":
   n.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CalendarDateInfoType")
        }
        return n
}

func (n *CalendarDateInfoType) SetProperty(key string, value interface{}) *CalendarDateInfoType {
        if n == nil {
                n, _ = CalendarDateInfoTypePointer(CalendarDateInfoType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsCalendarEventType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsCalendarEventType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsCalendarEventType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CalendarDateInfoType")
        }
        return n
}

  func (s *CalendarDateInfoType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }
  func (s *CalendarDateInfoType) CodeRead() *AUCodeSetsCalendarEventType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsCalendarEventType)(v))
      }
      }
      return s.Code
    }

  // XXXXX
func (t *SoftwareRequirementType) CopyString(key string, value interface{}) *SoftwareRequirementType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SoftwareRequirementType) CopyClone(key string, value interface{}) *SoftwareRequirementType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SoftwareRequirementType) Unset(key string) *SoftwareRequirementType {
        switch key {
  case "OS":
   n.OS = nil
  case "Vendor":
   n.Vendor = nil
  case "SoftwareTitle":
   n.SoftwareTitle = nil
  case "Version":
   n.Version = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SoftwareRequirementType")
        }
        return n
}

func (n *SoftwareRequirementType) SetProperty(key string, value interface{}) *SoftwareRequirementType {
        if n == nil {
                n, _ = SoftwareRequirementTypePointer(SoftwareRequirementType{})
        }
        switch key {
    case "OS":
    
    if v, ok:= StringPointer(value); ok {
      n.OS = ((*String)(v))
      }
    case "Vendor":
    
    if v, ok:= StringPointer(value); ok {
      n.Vendor = ((*String)(v))
      }
    case "SoftwareTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.SoftwareTitle = ((*String)(v))
      }
    case "Version":
    
    if v, ok:= StringPointer(value); ok {
      n.Version = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SoftwareRequirementType")
        }
        return n
}

  func (s *SoftwareRequirementType) OSRead() *String {
    if s.OS == nil {
    if v, ok:= StringPointer(""); ok {
      s.OS = ((*String)(v))
      }
      }
      return s.OS
    }
  func (s *SoftwareRequirementType) VendorRead() *String {
    if s.Vendor == nil {
    if v, ok:= StringPointer(""); ok {
      s.Vendor = ((*String)(v))
      }
      }
      return s.Vendor
    }
  func (s *SoftwareRequirementType) SoftwareTitleRead() *String {
    if s.SoftwareTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.SoftwareTitle = ((*String)(v))
      }
      }
      return s.SoftwareTitle
    }
  func (s *SoftwareRequirementType) VersionRead() *String {
    if s.Version == nil {
    if v, ok:= StringPointer(""); ok {
      s.Version = ((*String)(v))
      }
      }
      return s.Version
    }

  // XXXXX
func (t *DetentionContainerType) CopyString(key string, value interface{}) *DetentionContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *DetentionContainerType) CopyClone(key string, value interface{}) *DetentionContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *DetentionContainerType) Unset(key string) *DetentionContainerType {
        switch key {
  case "DetentionNotes":
   n.DetentionNotes = nil
  case "DetentionDate":
   n.DetentionDate = nil
  case "DetentionLocation":
   n.DetentionLocation = nil
  case "Status":
   n.Status = nil
  case "DetentionCategory":
   n.DetentionCategory = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DetentionContainerType")
        }
        return n
}

func (n *DetentionContainerType) SetProperty(key string, value interface{}) *DetentionContainerType {
        if n == nil {
                n, _ = DetentionContainerTypePointer(DetentionContainerType{})
        }
        switch key {
    case "DetentionNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.DetentionNotes = ((*String)(v))
      }
    case "DetentionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.DetentionDate = ((*String)(v))
      }
    case "DetentionLocation":
    
    if v, ok:= StringPointer(value); ok {
      n.DetentionLocation = ((*String)(v))
      }
    case "Status":
        if !CodesetContains(AUCodeSetsWellbeingStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
    case "DetentionCategory":
        if !CodesetContains(AUCodeSetsDetentionCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsDetentionCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.DetentionCategory = ((*AUCodeSetsDetentionCategoryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DetentionContainerType")
        }
        return n
}

  func (s *DetentionContainerType) DetentionNotesRead() *String {
    if s.DetentionNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.DetentionNotes = ((*String)(v))
      }
      }
      return s.DetentionNotes
    }
  func (s *DetentionContainerType) DetentionDateRead() *String {
    if s.DetentionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.DetentionDate = ((*String)(v))
      }
      }
      return s.DetentionDate
    }
  func (s *DetentionContainerType) DetentionLocationRead() *String {
    if s.DetentionLocation == nil {
    if v, ok:= StringPointer(""); ok {
      s.DetentionLocation = ((*String)(v))
      }
      }
      return s.DetentionLocation
    }
  func (s *DetentionContainerType) StatusRead() *AUCodeSetsWellbeingStatusType {
    if s.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
      }
      return s.Status
    }
  func (s *DetentionContainerType) DetentionCategoryRead() *AUCodeSetsDetentionCategoryType {
    if s.DetentionCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.DetentionCategory = ((*AUCodeSetsDetentionCategoryType)(v))
      }
      }
      return s.DetentionCategory
    }

  // XXXXX
func (t *ResourceUsage_ResourceUsageContentType) CopyString(key string, value interface{}) *ResourceUsage_ResourceUsageContentType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ResourceUsage_ResourceUsageContentType) CopyClone(key string, value interface{}) *ResourceUsage_ResourceUsageContentType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ResourceUsage_ResourceUsageContentType) Unset(key string) *ResourceUsage_ResourceUsageContentType {
        switch key {
  case "LocalDescription":
   n.LocalDescription = nil
  case "Code":
   n.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_ResourceUsageContentType")
        }
        return n
}

func (n *ResourceUsage_ResourceUsageContentType) SetProperty(key string, value interface{}) *ResourceUsage_ResourceUsageContentType {
        if n == nil {
                n, _ = ResourceUsage_ResourceUsageContentTypePointer(ResourceUsage_ResourceUsageContentType{})
        }
        switch key {
    case "LocalDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalDescription = ((*String)(v))
      }
    case "Code":
        if !CodesetContains(AUCodeSetsResourceUsageContentTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsResourceUsageContentTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsResourceUsageContentTypeType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_ResourceUsageContentType")
        }
        return n
}

  func (s *ResourceUsage_ResourceUsageContentType) LocalDescriptionRead() *String {
    if s.LocalDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalDescription = ((*String)(v))
      }
      }
      return s.LocalDescription
    }
  func (s *ResourceUsage_ResourceUsageContentType) CodeRead() *AUCodeSetsResourceUsageContentTypeType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsResourceUsageContentTypeType)(v))
      }
      }
      return s.Code
    }

  // XXXXX
func (t *SystemRole_SystemContext) CopyString(key string, value interface{}) *SystemRole_SystemContext {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SystemRole_SystemContext) CopyClone(key string, value interface{}) *SystemRole_SystemContext {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SystemRole_SystemContext) Unset(key string) *SystemRole_SystemContext {
        switch key {
  case "RoleList":
   n.RoleList = nil
  case "SystemId":
   n.SystemId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_SystemContext")
        }
        return n
}

func (n *SystemRole_SystemContext) SetProperty(key string, value interface{}) *SystemRole_SystemContext {
        if n == nil {
                n, _ = SystemRole_SystemContextPointer(SystemRole_SystemContext{})
        }
        switch key {
    case "RoleList":
    if v, ok:= SystemRole_RoleListPointer(value); ok {
      n.RoleList = v
      }
    case "SystemId":
    
    if v, ok:= StringPointer(value); ok {
      n.SystemId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_SystemContext")
        }
        return n
}

  func (s *SystemRole_SystemContext) RoleListRead() *SystemRole_RoleList {
    if s.RoleList == nil {
     if v, ok:= SystemRole_RoleListPointer(SystemRole_RoleList{}); ok {
      s.RoleList = v
      }
      }
      return s.RoleList
    }
  func (s *SystemRole_SystemContext) SystemIdRead() *String {
    if s.SystemId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SystemId = ((*String)(v))
      }
      }
      return s.SystemId
    }

  // XXXXX
func (t *NAPTestletResponseType) CopyString(key string, value interface{}) *NAPTestletResponseType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPTestletResponseType) CopyClone(key string, value interface{}) *NAPTestletResponseType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPTestletResponseType) Unset(key string) *NAPTestletResponseType {
        switch key {
  case "ItemResponseList":
   n.ItemResponseList = nil
  case "NAPTestletRefId":
   n.NAPTestletRefId = nil
  case "NAPTestletLocalId":
   n.NAPTestletLocalId = nil
  case "TestletSubScore":
   n.TestletSubScore = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletResponseType")
        }
        return n
}

func (n *NAPTestletResponseType) SetProperty(key string, value interface{}) *NAPTestletResponseType {
        if n == nil {
                n, _ = NAPTestletResponseTypePointer(NAPTestletResponseType{})
        }
        switch key {
    case "ItemResponseList":
    if v, ok:= NAPTestletItemResponseListTypePointer(value); ok {
      n.ItemResponseList = v
      }
    case "NAPTestletRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestletRefId = ((*String)(v))
      }
    case "NAPTestletLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestletLocalId = ((*LocalIdType)(v))
      }
    case "TestletSubScore":
    
    if v, ok:= FloatPointer(value); ok {
      n.TestletSubScore = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletResponseType")
        }
        return n
}

  func (s *NAPTestletResponseType) ItemResponseListRead() *NAPTestletItemResponseListType {
    if s.ItemResponseList == nil {
     if v, ok:= NAPTestletItemResponseListTypePointer(NAPTestletItemResponseListType{}); ok {
      s.ItemResponseList = v
      }
      }
      return s.ItemResponseList
    }
  func (s *NAPTestletResponseType) NAPTestletRefIdRead() *String {
    if s.NAPTestletRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestletRefId = ((*String)(v))
      }
      }
      return s.NAPTestletRefId
    }
  func (s *NAPTestletResponseType) NAPTestletLocalIdRead() *LocalIdType {
    if s.NAPTestletLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestletLocalId = ((*LocalIdType)(v))
      }
      }
      return s.NAPTestletLocalId
    }
  func (s *NAPTestletResponseType) TestletSubScoreRead() *Float {
    if s.TestletSubScore == nil {
    if v, ok:= FloatPointer(0); ok {
      s.TestletSubScore = ((*Float)(v))
      }
      }
      return s.TestletSubScore
    }

  // XXXXX
func (t *ResourcesType) CopyString(key string, value interface{}) *ResourcesType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ResourcesType) CopyClone(key string, value interface{}) *ResourcesType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ResourcesType) Unset(key string) *ResourcesType {
        switch key {
  case "Value":
   n.Value = nil
  case "ResourceType":
   n.ResourceType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourcesType")
        }
        return n
}

func (n *ResourcesType) SetProperty(key string, value interface{}) *ResourcesType {
        if n == nil {
                n, _ = ResourcesTypePointer(ResourcesType{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "ResourceType":
    
    if v, ok:= StringPointer(value); ok {
      n.ResourceType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourcesType")
        }
        return n
}

  func (s *ResourcesType) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *ResourcesType) ResourceTypeRead() *String {
    if s.ResourceType == nil {
    if v, ok:= StringPointer(""); ok {
      s.ResourceType = ((*String)(v))
      }
      }
      return s.ResourceType
    }

  // XXXXX
func (t *AbstractContentElementType_Reference) CopyString(key string, value interface{}) *AbstractContentElementType_Reference {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AbstractContentElementType_Reference) CopyClone(key string, value interface{}) *AbstractContentElementType_Reference {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AbstractContentElementType_Reference) Unset(key string) *AbstractContentElementType_Reference {
        switch key {
  case "URL":
   n.URL = nil
  case "MIMEType":
   n.MIMEType = nil
  case "Description":
   n.Description = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_Reference")
        }
        return n
}

func (n *AbstractContentElementType_Reference) SetProperty(key string, value interface{}) *AbstractContentElementType_Reference {
        if n == nil {
                n, _ = AbstractContentElementType_ReferencePointer(AbstractContentElementType_Reference{})
        }
        switch key {
    case "URL":
    
    if v, ok:= StringPointer(value); ok {
      n.URL = ((*String)(v))
      }
    case "MIMEType":
    
    if v, ok:= StringPointer(value); ok {
      n.MIMEType = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_Reference")
        }
        return n
}

  func (s *AbstractContentElementType_Reference) URLRead() *String {
    if s.URL == nil {
    if v, ok:= StringPointer(""); ok {
      s.URL = ((*String)(v))
      }
      }
      return s.URL
    }
  func (s *AbstractContentElementType_Reference) MIMETypeRead() *String {
    if s.MIMEType == nil {
    if v, ok:= StringPointer(""); ok {
      s.MIMEType = ((*String)(v))
      }
      }
      return s.MIMEType
    }
  func (s *AbstractContentElementType_Reference) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }

  // XXXXX
func (t *PeriodAttendanceType) CopyString(key string, value interface{}) *PeriodAttendanceType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PeriodAttendanceType) CopyClone(key string, value interface{}) *PeriodAttendanceType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PeriodAttendanceType) Unset(key string) *PeriodAttendanceType {
        switch key {
  case "AttendanceStatus":
   n.AttendanceStatus = nil
  case "TimeTableCellRefId":
   n.TimeTableCellRefId = nil
  case "TeacherList":
   n.TeacherList = nil
  case "AttendanceCode":
   n.AttendanceCode = nil
  case "EndTime":
   n.EndTime = nil
  case "TimeTableSubjectRefId":
   n.TimeTableSubjectRefId = nil
  case "AttendanceNote":
   n.AttendanceNote = nil
  case "Date":
   n.Date = nil
  case "RoomList":
   n.RoomList = nil
  case "AttendanceType":
   n.AttendanceType = nil
  case "TimeIn":
   n.TimeIn = nil
  case "TimeOut":
   n.TimeOut = nil
  case "SessionInfoRefId":
   n.SessionInfoRefId = nil
  case "ScheduledActivityRefId":
   n.ScheduledActivityRefId = nil
  case "StartTime":
   n.StartTime = nil
  case "TimetablePeriod":
   n.TimetablePeriod = nil
  case "DayId":
   n.DayId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PeriodAttendanceType")
        }
        return n
}

func (n *PeriodAttendanceType) SetProperty(key string, value interface{}) *PeriodAttendanceType {
        if n == nil {
                n, _ = PeriodAttendanceTypePointer(PeriodAttendanceType{})
        }
        switch key {
    case "AttendanceStatus":
        if !CodesetContains(AUCodeSetsAttendanceStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAttendanceStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
    case "TimeTableCellRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableCellRefId = ((*String)(v))
      }
    case "TeacherList":
    if v, ok:= ScheduledTeacherListTypePointer(value); ok {
      n.TeacherList = v
      }
    case "AttendanceCode":
    if v, ok:= AttendanceCodeTypePointer(value); ok {
      n.AttendanceCode = v
      }
    case "EndTime":
    
    if v, ok:= StringPointer(value); ok {
      n.EndTime = ((*String)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
    case "AttendanceNote":
    
    if v, ok:= StringPointer(value); ok {
      n.AttendanceNote = ((*String)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.Date = ((*String)(v))
      }
    case "RoomList":
    if v, ok:= RoomListTypePointer(value); ok {
      n.RoomList = v
      }
    case "AttendanceType":
    
    if v, ok:= StringPointer(value); ok {
      n.AttendanceType = ((*String)(v))
      }
    case "TimeIn":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeIn = ((*String)(v))
      }
    case "TimeOut":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeOut = ((*String)(v))
      }
    case "SessionInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SessionInfoRefId = ((*String)(v))
      }
    case "ScheduledActivityRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.ScheduledActivityRefId = ((*String)(v))
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.StartTime = ((*String)(v))
      }
    case "TimetablePeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.TimetablePeriod = ((*String)(v))
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.DayId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PeriodAttendanceType")
        }
        return n
}

  func (s *PeriodAttendanceType) AttendanceStatusRead() *AUCodeSetsAttendanceStatusType {
    if s.AttendanceStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
      }
      return s.AttendanceStatus
    }
  func (s *PeriodAttendanceType) TimeTableCellRefIdRead() *String {
    if s.TimeTableCellRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableCellRefId = ((*String)(v))
      }
      }
      return s.TimeTableCellRefId
    }
  func (s *PeriodAttendanceType) TeacherListRead() *ScheduledTeacherListType {
    if s.TeacherList == nil {
     if v, ok:= ScheduledTeacherListTypePointer(ScheduledTeacherListType{}); ok {
      s.TeacherList = v
      }
      }
      return s.TeacherList
    }
  func (s *PeriodAttendanceType) AttendanceCodeRead() *AttendanceCodeType {
    if s.AttendanceCode == nil {
     if v, ok:= AttendanceCodeTypePointer(AttendanceCodeType{}); ok {
      s.AttendanceCode = v
      }
      }
      return s.AttendanceCode
    }
  func (s *PeriodAttendanceType) EndTimeRead() *String {
    if s.EndTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndTime = ((*String)(v))
      }
      }
      return s.EndTime
    }
  func (s *PeriodAttendanceType) TimeTableSubjectRefIdRead() *RefIdType {
    if s.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
      }
      return s.TimeTableSubjectRefId
    }
  func (s *PeriodAttendanceType) AttendanceNoteRead() *String {
    if s.AttendanceNote == nil {
    if v, ok:= StringPointer(""); ok {
      s.AttendanceNote = ((*String)(v))
      }
      }
      return s.AttendanceNote
    }
  func (s *PeriodAttendanceType) DateRead() *String {
    if s.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.Date = ((*String)(v))
      }
      }
      return s.Date
    }
  func (s *PeriodAttendanceType) RoomListRead() *RoomListType {
    if s.RoomList == nil {
     if v, ok:= RoomListTypePointer(RoomListType{}); ok {
      s.RoomList = v
      }
      }
      return s.RoomList
    }
  func (s *PeriodAttendanceType) AttendanceTypeRead() *String {
    if s.AttendanceType == nil {
    if v, ok:= StringPointer(""); ok {
      s.AttendanceType = ((*String)(v))
      }
      }
      return s.AttendanceType
    }
  func (s *PeriodAttendanceType) TimeInRead() *String {
    if s.TimeIn == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeIn = ((*String)(v))
      }
      }
      return s.TimeIn
    }
  func (s *PeriodAttendanceType) TimeOutRead() *String {
    if s.TimeOut == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeOut = ((*String)(v))
      }
      }
      return s.TimeOut
    }
  func (s *PeriodAttendanceType) SessionInfoRefIdRead() *String {
    if s.SessionInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SessionInfoRefId = ((*String)(v))
      }
      }
      return s.SessionInfoRefId
    }
  func (s *PeriodAttendanceType) ScheduledActivityRefIdRead() *String {
    if s.ScheduledActivityRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ScheduledActivityRefId = ((*String)(v))
      }
      }
      return s.ScheduledActivityRefId
    }
  func (s *PeriodAttendanceType) StartTimeRead() *String {
    if s.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartTime = ((*String)(v))
      }
      }
      return s.StartTime
    }
  func (s *PeriodAttendanceType) TimetablePeriodRead() *String {
    if s.TimetablePeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimetablePeriod = ((*String)(v))
      }
      }
      return s.TimetablePeriod
    }
  func (s *PeriodAttendanceType) DayIdRead() *LocalIdType {
    if s.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.DayId = ((*LocalIdType)(v))
      }
      }
      return s.DayId
    }

  // XXXXX
func (t *PaymentReceipt) CopyString(key string, value interface{}) *PaymentReceipt {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PaymentReceipt) CopyClone(key string, value interface{}) *PaymentReceipt {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PaymentReceipt) Unset(key string) *PaymentReceipt {
        switch key {
  case "PaymentReceiptLineList":
   n.PaymentReceiptLineList = nil
  case "TransactionAmount":
   n.TransactionAmount = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "TransactionNote":
   n.TransactionNote = nil
  case "FinancialAccountRefIdList":
   n.FinancialAccountRefIdList = nil
  case "VendorInfoRefId":
   n.VendorInfoRefId = nil
  case "ReceivedTransactionId":
   n.ReceivedTransactionId = nil
  case "InvoiceRefId":
   n.InvoiceRefId = nil
  case "AccountCodeList":
   n.AccountCodeList = nil
  case "TransactionDate":
   n.TransactionDate = nil
  case "AccountingPeriod":
   n.AccountingPeriod = nil
  case "TaxRate":
   n.TaxRate = nil
  case "ChequeNumber":
   n.ChequeNumber = nil
  case "ChargedLocationInfoRefId":
   n.ChargedLocationInfoRefId = nil
  case "RefId":
   n.RefId = nil
  case "LocalId":
   n.LocalId = nil
  case "TaxAmount":
   n.TaxAmount = nil
  case "TransactionType":
   n.TransactionType = nil
  case "DebtorRefId":
   n.DebtorRefId = nil
  case "TransactionMethod":
   n.TransactionMethod = nil
  case "TransactionDescription":
   n.TransactionDescription = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PaymentReceipt")
        }
        return n
}

func (n *PaymentReceipt) SetProperty(key string, value interface{}) *PaymentReceipt {
        if n == nil {
                n, _ = PaymentReceiptPointer(PaymentReceipt{})
        }
        switch key {
    case "PaymentReceiptLineList":
    if v, ok:= PaymentReceiptLineListTypePointer(value); ok {
      n.PaymentReceiptLineList = v
      }
    case "TransactionAmount":
    if v, ok:= DebitOrCreditAmountTypePointer(value); ok {
      n.TransactionAmount = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "TransactionNote":
    
    if v, ok:= StringPointer(value); ok {
      n.TransactionNote = ((*String)(v))
      }
    case "FinancialAccountRefIdList":
    if v, ok:= FinancialAccountRefIdListTypePointer(value); ok {
      n.FinancialAccountRefIdList = v
      }
    case "VendorInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.VendorInfoRefId = ((*String)(v))
      }
    case "ReceivedTransactionId":
    
    if v, ok:= StringPointer(value); ok {
      n.ReceivedTransactionId = ((*String)(v))
      }
    case "InvoiceRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.InvoiceRefId = ((*String)(v))
      }
    case "AccountCodeList":
    if v, ok:= AccountCodeListTypePointer(value); ok {
      n.AccountCodeList = v
      }
    case "TransactionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.TransactionDate = ((*String)(v))
      }
    case "AccountingPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.AccountingPeriod = ((*LocalIdType)(v))
      }
    case "TaxRate":
    
    if v, ok:= FloatPointer(value); ok {
      n.TaxRate = ((*Float)(v))
      }
    case "ChequeNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.ChequeNumber = ((*String)(v))
      }
    case "ChargedLocationInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.ChargedLocationInfoRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "TaxAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.TaxAmount = v
      }
    case "TransactionType":
    
    if v, ok:= StringPointer(value); ok {
      n.TransactionType = ((*String)(v))
      }
    case "DebtorRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.DebtorRefId = ((*String)(v))
      }
    case "TransactionMethod":
    
    if v, ok:= StringPointer(value); ok {
      n.TransactionMethod = ((*String)(v))
      }
    case "TransactionDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.TransactionDescription = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PaymentReceipt")
        }
        return n
}

  func (s *PaymentReceipt) PaymentReceiptLineListRead() *PaymentReceiptLineListType {
    if s.PaymentReceiptLineList == nil {
     if v, ok:= PaymentReceiptLineListTypePointer(PaymentReceiptLineListType{}); ok {
      s.PaymentReceiptLineList = v
      }
      }
      return s.PaymentReceiptLineList
    }
  func (s *PaymentReceipt) TransactionAmountRead() *DebitOrCreditAmountType {
    if s.TransactionAmount == nil {
     if v, ok:= DebitOrCreditAmountTypePointer(DebitOrCreditAmountType{}); ok {
      s.TransactionAmount = v
      }
      }
      return s.TransactionAmount
    }
  func (s *PaymentReceipt) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *PaymentReceipt) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *PaymentReceipt) TransactionNoteRead() *String {
    if s.TransactionNote == nil {
    if v, ok:= StringPointer(""); ok {
      s.TransactionNote = ((*String)(v))
      }
      }
      return s.TransactionNote
    }
  func (s *PaymentReceipt) FinancialAccountRefIdListRead() *FinancialAccountRefIdListType {
    if s.FinancialAccountRefIdList == nil {
     if v, ok:= FinancialAccountRefIdListTypePointer(FinancialAccountRefIdListType{}); ok {
      s.FinancialAccountRefIdList = v
      }
      }
      return s.FinancialAccountRefIdList
    }
  func (s *PaymentReceipt) VendorInfoRefIdRead() *String {
    if s.VendorInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.VendorInfoRefId = ((*String)(v))
      }
      }
      return s.VendorInfoRefId
    }
  func (s *PaymentReceipt) ReceivedTransactionIdRead() *String {
    if s.ReceivedTransactionId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReceivedTransactionId = ((*String)(v))
      }
      }
      return s.ReceivedTransactionId
    }
  func (s *PaymentReceipt) InvoiceRefIdRead() *String {
    if s.InvoiceRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.InvoiceRefId = ((*String)(v))
      }
      }
      return s.InvoiceRefId
    }
  func (s *PaymentReceipt) AccountCodeListRead() *AccountCodeListType {
    if s.AccountCodeList == nil {
     if v, ok:= AccountCodeListTypePointer(AccountCodeListType{}); ok {
      s.AccountCodeList = v
      }
      }
      return s.AccountCodeList
    }
  func (s *PaymentReceipt) TransactionDateRead() *String {
    if s.TransactionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.TransactionDate = ((*String)(v))
      }
      }
      return s.TransactionDate
    }
  func (s *PaymentReceipt) AccountingPeriodRead() *LocalIdType {
    if s.AccountingPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.AccountingPeriod = ((*LocalIdType)(v))
      }
      }
      return s.AccountingPeriod
    }
  func (s *PaymentReceipt) TaxRateRead() *Float {
    if s.TaxRate == nil {
    if v, ok:= FloatPointer(0); ok {
      s.TaxRate = ((*Float)(v))
      }
      }
      return s.TaxRate
    }
  func (s *PaymentReceipt) ChequeNumberRead() *String {
    if s.ChequeNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.ChequeNumber = ((*String)(v))
      }
      }
      return s.ChequeNumber
    }
  func (s *PaymentReceipt) ChargedLocationInfoRefIdRead() *String {
    if s.ChargedLocationInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ChargedLocationInfoRefId = ((*String)(v))
      }
      }
      return s.ChargedLocationInfoRefId
    }
  func (s *PaymentReceipt) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *PaymentReceipt) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *PaymentReceipt) TaxAmountRead() *MonetaryAmountType {
    if s.TaxAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.TaxAmount = v
      }
      }
      return s.TaxAmount
    }
  func (s *PaymentReceipt) TransactionTypeRead() *String {
    if s.TransactionType == nil {
    if v, ok:= StringPointer(""); ok {
      s.TransactionType = ((*String)(v))
      }
      }
      return s.TransactionType
    }
  func (s *PaymentReceipt) DebtorRefIdRead() *String {
    if s.DebtorRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.DebtorRefId = ((*String)(v))
      }
      }
      return s.DebtorRefId
    }
  func (s *PaymentReceipt) TransactionMethodRead() *String {
    if s.TransactionMethod == nil {
    if v, ok:= StringPointer(""); ok {
      s.TransactionMethod = ((*String)(v))
      }
      }
      return s.TransactionMethod
    }
  func (s *PaymentReceipt) TransactionDescriptionRead() *String {
    if s.TransactionDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.TransactionDescription = ((*String)(v))
      }
      }
      return s.TransactionDescription
    }
  func (s *PaymentReceipt) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }

  // XXXXX
func (t *AddressStreetType) CopyString(key string, value interface{}) *AddressStreetType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AddressStreetType) CopyClone(key string, value interface{}) *AddressStreetType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AddressStreetType) Unset(key string) *AddressStreetType {
        switch key {
  case "Line3":
   n.Line3 = nil
  case "StreetName":
   n.StreetName = nil
  case "ApartmentNumberPrefix":
   n.ApartmentNumberPrefix = nil
  case "StreetSuffix":
   n.StreetSuffix = nil
  case "Line1":
   n.Line1 = nil
  case "Complex":
   n.Complex = nil
  case "ApartmentType":
   n.ApartmentType = nil
  case "StreetType":
   n.StreetType = nil
  case "ApartmentNumberSuffix":
   n.ApartmentNumberSuffix = nil
  case "StreetNumber":
   n.StreetNumber = nil
  case "Line2":
   n.Line2 = nil
  case "ApartmentNumber":
   n.ApartmentNumber = nil
  case "StreetPrefix":
   n.StreetPrefix = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressStreetType")
        }
        return n
}

func (n *AddressStreetType) SetProperty(key string, value interface{}) *AddressStreetType {
        if n == nil {
                n, _ = AddressStreetTypePointer(AddressStreetType{})
        }
        switch key {
    case "Line3":
    
    if v, ok:= StringPointer(value); ok {
      n.Line3 = ((*String)(v))
      }
    case "StreetName":
    
    if v, ok:= StringPointer(value); ok {
      n.StreetName = ((*String)(v))
      }
    case "ApartmentNumberPrefix":
    
    if v, ok:= StringPointer(value); ok {
      n.ApartmentNumberPrefix = ((*String)(v))
      }
    case "StreetSuffix":
    
    if v, ok:= StringPointer(value); ok {
      n.StreetSuffix = ((*String)(v))
      }
    case "Line1":
    
    if v, ok:= StringPointer(value); ok {
      n.Line1 = ((*String)(v))
      }
    case "Complex":
    
    if v, ok:= StringPointer(value); ok {
      n.Complex = ((*String)(v))
      }
    case "ApartmentType":
    
    if v, ok:= StringPointer(value); ok {
      n.ApartmentType = ((*String)(v))
      }
    case "StreetType":
    
    if v, ok:= StringPointer(value); ok {
      n.StreetType = ((*String)(v))
      }
    case "ApartmentNumberSuffix":
    
    if v, ok:= StringPointer(value); ok {
      n.ApartmentNumberSuffix = ((*String)(v))
      }
    case "StreetNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.StreetNumber = ((*String)(v))
      }
    case "Line2":
    
    if v, ok:= StringPointer(value); ok {
      n.Line2 = ((*String)(v))
      }
    case "ApartmentNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.ApartmentNumber = ((*String)(v))
      }
    case "StreetPrefix":
    
    if v, ok:= StringPointer(value); ok {
      n.StreetPrefix = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressStreetType")
        }
        return n
}

  func (s *AddressStreetType) Line3Read() *String {
    if s.Line3 == nil {
    if v, ok:= StringPointer(""); ok {
      s.Line3 = ((*String)(v))
      }
      }
      return s.Line3
    }
  func (s *AddressStreetType) StreetNameRead() *String {
    if s.StreetName == nil {
    if v, ok:= StringPointer(""); ok {
      s.StreetName = ((*String)(v))
      }
      }
      return s.StreetName
    }
  func (s *AddressStreetType) ApartmentNumberPrefixRead() *String {
    if s.ApartmentNumberPrefix == nil {
    if v, ok:= StringPointer(""); ok {
      s.ApartmentNumberPrefix = ((*String)(v))
      }
      }
      return s.ApartmentNumberPrefix
    }
  func (s *AddressStreetType) StreetSuffixRead() *String {
    if s.StreetSuffix == nil {
    if v, ok:= StringPointer(""); ok {
      s.StreetSuffix = ((*String)(v))
      }
      }
      return s.StreetSuffix
    }
  func (s *AddressStreetType) Line1Read() *String {
    if s.Line1 == nil {
    if v, ok:= StringPointer(""); ok {
      s.Line1 = ((*String)(v))
      }
      }
      return s.Line1
    }
  func (s *AddressStreetType) ComplexRead() *String {
    if s.Complex == nil {
    if v, ok:= StringPointer(""); ok {
      s.Complex = ((*String)(v))
      }
      }
      return s.Complex
    }
  func (s *AddressStreetType) ApartmentTypeRead() *String {
    if s.ApartmentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.ApartmentType = ((*String)(v))
      }
      }
      return s.ApartmentType
    }
  func (s *AddressStreetType) StreetTypeRead() *String {
    if s.StreetType == nil {
    if v, ok:= StringPointer(""); ok {
      s.StreetType = ((*String)(v))
      }
      }
      return s.StreetType
    }
  func (s *AddressStreetType) ApartmentNumberSuffixRead() *String {
    if s.ApartmentNumberSuffix == nil {
    if v, ok:= StringPointer(""); ok {
      s.ApartmentNumberSuffix = ((*String)(v))
      }
      }
      return s.ApartmentNumberSuffix
    }
  func (s *AddressStreetType) StreetNumberRead() *String {
    if s.StreetNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.StreetNumber = ((*String)(v))
      }
      }
      return s.StreetNumber
    }
  func (s *AddressStreetType) Line2Read() *String {
    if s.Line2 == nil {
    if v, ok:= StringPointer(""); ok {
      s.Line2 = ((*String)(v))
      }
      }
      return s.Line2
    }
  func (s *AddressStreetType) ApartmentNumberRead() *String {
    if s.ApartmentNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.ApartmentNumber = ((*String)(v))
      }
      }
      return s.ApartmentNumber
    }
  func (s *AddressStreetType) StreetPrefixRead() *String {
    if s.StreetPrefix == nil {
    if v, ok:= StringPointer(""); ok {
      s.StreetPrefix = ((*String)(v))
      }
      }
      return s.StreetPrefix
    }

  // XXXXX
func (t *NAPTestletCodeFrameType) CopyString(key string, value interface{}) *NAPTestletCodeFrameType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPTestletCodeFrameType) CopyClone(key string, value interface{}) *NAPTestletCodeFrameType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPTestletCodeFrameType) Unset(key string) *NAPTestletCodeFrameType {
        switch key {
  case "TestItemList":
   n.TestItemList = nil
  case "TestletContent":
   n.TestletContent = nil
  case "NAPTestletRefId":
   n.NAPTestletRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletCodeFrameType")
        }
        return n
}

func (n *NAPTestletCodeFrameType) SetProperty(key string, value interface{}) *NAPTestletCodeFrameType {
        if n == nil {
                n, _ = NAPTestletCodeFrameTypePointer(NAPTestletCodeFrameType{})
        }
        switch key {
    case "TestItemList":
    if v, ok:= CodeFrameTestItemListTypePointer(value); ok {
      n.TestItemList = v
      }
    case "TestletContent":
    if v, ok:= NAPTestletContentTypePointer(value); ok {
      n.TestletContent = v
      }
    case "NAPTestletRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestletRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletCodeFrameType")
        }
        return n
}

  func (s *NAPTestletCodeFrameType) TestItemListRead() *CodeFrameTestItemListType {
    if s.TestItemList == nil {
     if v, ok:= CodeFrameTestItemListTypePointer(CodeFrameTestItemListType{}); ok {
      s.TestItemList = v
      }
      }
      return s.TestItemList
    }
  func (s *NAPTestletCodeFrameType) TestletContentRead() *NAPTestletContentType {
    if s.TestletContent == nil {
     if v, ok:= NAPTestletContentTypePointer(NAPTestletContentType{}); ok {
      s.TestletContent = v
      }
      }
      return s.TestletContent
    }
  func (s *NAPTestletCodeFrameType) NAPTestletRefIdRead() *String {
    if s.NAPTestletRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestletRefId = ((*String)(v))
      }
      }
      return s.NAPTestletRefId
    }

  // XXXXX
func (t *DomainScoreType) CopyString(key string, value interface{}) *DomainScoreType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *DomainScoreType) CopyClone(key string, value interface{}) *DomainScoreType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *DomainScoreType) Unset(key string) *DomainScoreType {
        switch key {
  case "StudentProficiency":
   n.StudentProficiency = nil
  case "PlausibleScaledValueList":
   n.PlausibleScaledValueList = nil
  case "StudentDomainBand":
   n.StudentDomainBand = nil
  case "ScaledScoreLogitValue":
   n.ScaledScoreLogitValue = nil
  case "RawScore":
   n.RawScore = nil
  case "ScaledScoreLogitStandardError":
   n.ScaledScoreLogitStandardError = nil
  case "ScaledScoreValue":
   n.ScaledScoreValue = nil
  case "ScaledScoreStandardError":
   n.ScaledScoreStandardError = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DomainScoreType")
        }
        return n
}

func (n *DomainScoreType) SetProperty(key string, value interface{}) *DomainScoreType {
        if n == nil {
                n, _ = DomainScoreTypePointer(DomainScoreType{})
        }
        switch key {
    case "StudentProficiency":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentProficiency = ((*String)(v))
      }
    case "PlausibleScaledValueList":
    if v, ok:= PlausibleScaledValueListTypePointer(value); ok {
      n.PlausibleScaledValueList = v
      }
    case "StudentDomainBand":
    
    if v, ok:= IntPointer(value); ok {
      n.StudentDomainBand = ((*Int)(v))
      }
    case "ScaledScoreLogitValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.ScaledScoreLogitValue = ((*Float)(v))
      }
    case "RawScore":
    
    if v, ok:= FloatPointer(value); ok {
      n.RawScore = ((*Float)(v))
      }
    case "ScaledScoreLogitStandardError":
    
    if v, ok:= FloatPointer(value); ok {
      n.ScaledScoreLogitStandardError = ((*Float)(v))
      }
    case "ScaledScoreValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.ScaledScoreValue = ((*Float)(v))
      }
    case "ScaledScoreStandardError":
    
    if v, ok:= FloatPointer(value); ok {
      n.ScaledScoreStandardError = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DomainScoreType")
        }
        return n
}

  func (s *DomainScoreType) StudentProficiencyRead() *String {
    if s.StudentProficiency == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentProficiency = ((*String)(v))
      }
      }
      return s.StudentProficiency
    }
  func (s *DomainScoreType) PlausibleScaledValueListRead() *PlausibleScaledValueListType {
    if s.PlausibleScaledValueList == nil {
     if v, ok:= PlausibleScaledValueListTypePointer(PlausibleScaledValueListType{}); ok {
      s.PlausibleScaledValueList = v
      }
      }
      return s.PlausibleScaledValueList
    }
  func (s *DomainScoreType) StudentDomainBandRead() *Int {
    if s.StudentDomainBand == nil {
    if v, ok:= IntPointer(0); ok {
      s.StudentDomainBand = ((*Int)(v))
      }
      }
      return s.StudentDomainBand
    }
  func (s *DomainScoreType) ScaledScoreLogitValueRead() *Float {
    if s.ScaledScoreLogitValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ScaledScoreLogitValue = ((*Float)(v))
      }
      }
      return s.ScaledScoreLogitValue
    }
  func (s *DomainScoreType) RawScoreRead() *Float {
    if s.RawScore == nil {
    if v, ok:= FloatPointer(0); ok {
      s.RawScore = ((*Float)(v))
      }
      }
      return s.RawScore
    }
  func (s *DomainScoreType) ScaledScoreLogitStandardErrorRead() *Float {
    if s.ScaledScoreLogitStandardError == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ScaledScoreLogitStandardError = ((*Float)(v))
      }
      }
      return s.ScaledScoreLogitStandardError
    }
  func (s *DomainScoreType) ScaledScoreValueRead() *Float {
    if s.ScaledScoreValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ScaledScoreValue = ((*Float)(v))
      }
      }
      return s.ScaledScoreValue
    }
  func (s *DomainScoreType) ScaledScoreStandardErrorRead() *Float {
    if s.ScaledScoreStandardError == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ScaledScoreStandardError = ((*Float)(v))
      }
      }
      return s.ScaledScoreStandardError
    }

  // XXXXX
func (t *CampusContainerType) CopyString(key string, value interface{}) *CampusContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CampusContainerType) CopyClone(key string, value interface{}) *CampusContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CampusContainerType) Unset(key string) *CampusContainerType {
        switch key {
  case "SchoolCampusId":
   n.SchoolCampusId = nil
  case "CampusType":
   n.CampusType = nil
  case "ParentSchoolId":
   n.ParentSchoolId = nil
  case "AdminStatus":
   n.AdminStatus = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CampusContainerType")
        }
        return n
}

func (n *CampusContainerType) SetProperty(key string, value interface{}) *CampusContainerType {
        if n == nil {
                n, _ = CampusContainerTypePointer(CampusContainerType{})
        }
        switch key {
    case "SchoolCampusId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolCampusId = ((*String)(v))
      }
    case "CampusType":
        if !CodesetContains(AUCodeSetsSchoolLevelType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolLevelType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.CampusType = ((*AUCodeSetsSchoolLevelType)(v))
      }
    case "ParentSchoolId":
    
    if v, ok:= StringPointer(value); ok {
      n.ParentSchoolId = ((*String)(v))
      }
    case "AdminStatus":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AdminStatus = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CampusContainerType")
        }
        return n
}

  func (s *CampusContainerType) SchoolCampusIdRead() *String {
    if s.SchoolCampusId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolCampusId = ((*String)(v))
      }
      }
      return s.SchoolCampusId
    }
  func (s *CampusContainerType) CampusTypeRead() *AUCodeSetsSchoolLevelType {
    if s.CampusType == nil {
    if v, ok:= StringPointer(""); ok {
      s.CampusType = ((*AUCodeSetsSchoolLevelType)(v))
      }
      }
      return s.CampusType
    }
  func (s *CampusContainerType) ParentSchoolIdRead() *String {
    if s.ParentSchoolId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ParentSchoolId = ((*String)(v))
      }
      }
      return s.ParentSchoolId
    }
  func (s *CampusContainerType) AdminStatusRead() *AUCodeSetsYesOrNoCategoryType {
    if s.AdminStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.AdminStatus = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.AdminStatus
    }

  // XXXXX
func (t *MediumOfInstructionType) CopyString(key string, value interface{}) *MediumOfInstructionType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *MediumOfInstructionType) CopyClone(key string, value interface{}) *MediumOfInstructionType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *MediumOfInstructionType) Unset(key string) *MediumOfInstructionType {
        switch key {
  case "Code":
   n.Code = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MediumOfInstructionType")
        }
        return n
}

func (n *MediumOfInstructionType) SetProperty(key string, value interface{}) *MediumOfInstructionType {
        if n == nil {
                n, _ = MediumOfInstructionTypePointer(MediumOfInstructionType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsMediumOfInstructionType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsMediumOfInstructionType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsMediumOfInstructionType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MediumOfInstructionType")
        }
        return n
}

  func (s *MediumOfInstructionType) CodeRead() *AUCodeSetsMediumOfInstructionType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsMediumOfInstructionType)(v))
      }
      }
      return s.Code
    }
  func (s *MediumOfInstructionType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }

  // XXXXX
func (t *StudentAttendanceCollectionReportingType) CopyString(key string, value interface{}) *StudentAttendanceCollectionReportingType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentAttendanceCollectionReportingType) CopyClone(key string, value interface{}) *StudentAttendanceCollectionReportingType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentAttendanceCollectionReportingType) Unset(key string) *StudentAttendanceCollectionReportingType {
        switch key {
  case "EntityContact":
   n.EntityContact = nil
  case "EntityLevel":
   n.EntityLevel = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "StateProvinceId":
   n.StateProvinceId = nil
  case "ACARAId":
   n.ACARAId = nil
  case "CommonwealthId":
   n.CommonwealthId = nil
  case "StatsCohortYearLevelList":
   n.StatsCohortYearLevelList = nil
  case "LocalId":
   n.LocalId = nil
  case "EntityName":
   n.EntityName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceCollectionReportingType")
        }
        return n
}

func (n *StudentAttendanceCollectionReportingType) SetProperty(key string, value interface{}) *StudentAttendanceCollectionReportingType {
        if n == nil {
                n, _ = StudentAttendanceCollectionReportingTypePointer(StudentAttendanceCollectionReportingType{})
        }
        switch key {
    case "EntityContact":
    if v, ok:= EntityContactInfoTypePointer(value); ok {
      n.EntityContact = v
      }
    case "EntityLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.EntityLevel = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "ACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.ACARAId = ((*String)(v))
      }
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.CommonwealthId = ((*String)(v))
      }
    case "StatsCohortYearLevelList":
    if v, ok:= StatsCohortYearLevelListTypePointer(value); ok {
      n.StatsCohortYearLevelList = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "EntityName":
    
    if v, ok:= StringPointer(value); ok {
      n.EntityName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceCollectionReportingType")
        }
        return n
}

  func (s *StudentAttendanceCollectionReportingType) EntityContactRead() *EntityContactInfoType {
    if s.EntityContact == nil {
     if v, ok:= EntityContactInfoTypePointer(EntityContactInfoType{}); ok {
      s.EntityContact = v
      }
      }
      return s.EntityContact
    }
  func (s *StudentAttendanceCollectionReportingType) EntityLevelRead() *String {
    if s.EntityLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.EntityLevel = ((*String)(v))
      }
      }
      return s.EntityLevel
    }
  func (s *StudentAttendanceCollectionReportingType) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *StudentAttendanceCollectionReportingType) StateProvinceIdRead() *StateProvinceIdType {
    if s.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.StateProvinceId
    }
  func (s *StudentAttendanceCollectionReportingType) ACARAIdRead() *String {
    if s.ACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ACARAId = ((*String)(v))
      }
      }
      return s.ACARAId
    }
  func (s *StudentAttendanceCollectionReportingType) CommonwealthIdRead() *String {
    if s.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.CommonwealthId = ((*String)(v))
      }
      }
      return s.CommonwealthId
    }
  func (s *StudentAttendanceCollectionReportingType) StatsCohortYearLevelListRead() *StatsCohortYearLevelListType {
    if s.StatsCohortYearLevelList == nil {
     if v, ok:= StatsCohortYearLevelListTypePointer(StatsCohortYearLevelListType{}); ok {
      s.StatsCohortYearLevelList = v
      }
      }
      return s.StatsCohortYearLevelList
    }
  func (s *StudentAttendanceCollectionReportingType) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *StudentAttendanceCollectionReportingType) EntityNameRead() *String {
    if s.EntityName == nil {
    if v, ok:= StringPointer(""); ok {
      s.EntityName = ((*String)(v))
      }
      }
      return s.EntityName
    }

  // XXXXX
func (t *ReligiousEventType) CopyString(key string, value interface{}) *ReligiousEventType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ReligiousEventType) CopyClone(key string, value interface{}) *ReligiousEventType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ReligiousEventType) Unset(key string) *ReligiousEventType {
        switch key {
  case "Type":
   n.Type = nil
  case "Date":
   n.Date = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ReligiousEventType")
        }
        return n
}

func (n *ReligiousEventType) SetProperty(key string, value interface{}) *ReligiousEventType {
        if n == nil {
                n, _ = ReligiousEventTypePointer(ReligiousEventType{})
        }
        switch key {
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.Date = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ReligiousEventType")
        }
        return n
}

  func (s *ReligiousEventType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }
  func (s *ReligiousEventType) DateRead() *String {
    if s.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.Date = ((*String)(v))
      }
      }
      return s.Date
    }

  // XXXXX
func (t *RelatedLearningStandardItemRefIdType) CopyString(key string, value interface{}) *RelatedLearningStandardItemRefIdType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *RelatedLearningStandardItemRefIdType) CopyClone(key string, value interface{}) *RelatedLearningStandardItemRefIdType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *RelatedLearningStandardItemRefIdType) Unset(key string) *RelatedLearningStandardItemRefIdType {
        switch key {
  case "RelationshipType":
   n.RelationshipType = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "RelatedLearningStandardItemRefIdType")
        }
        return n
}

func (n *RelatedLearningStandardItemRefIdType) SetProperty(key string, value interface{}) *RelatedLearningStandardItemRefIdType {
        if n == nil {
                n, _ = RelatedLearningStandardItemRefIdTypePointer(RelatedLearningStandardItemRefIdType{})
        }
        switch key {
    case "RelationshipType":
    
    if v, ok:= StringPointer(value); ok {
      n.RelationshipType = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "RelatedLearningStandardItemRefIdType")
        }
        return n
}

  func (s *RelatedLearningStandardItemRefIdType) RelationshipTypeRead() *String {
    if s.RelationshipType == nil {
    if v, ok:= StringPointer(""); ok {
      s.RelationshipType = ((*String)(v))
      }
      }
      return s.RelationshipType
    }
  func (s *RelatedLearningStandardItemRefIdType) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *StudentSchoolEnrollment_Counselor) CopyString(key string, value interface{}) *StudentSchoolEnrollment_Counselor {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentSchoolEnrollment_Counselor) CopyClone(key string, value interface{}) *StudentSchoolEnrollment_Counselor {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentSchoolEnrollment_Counselor) Unset(key string) *StudentSchoolEnrollment_Counselor {
        switch key {
  case "Value":
   n.Value = nil
  case "SIF_RefObject":
   n.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Counselor")
        }
        return n
}

func (n *StudentSchoolEnrollment_Counselor) SetProperty(key string, value interface{}) *StudentSchoolEnrollment_Counselor {
        if n == nil {
                n, _ = StudentSchoolEnrollment_CounselorPointer(StudentSchoolEnrollment_Counselor{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Counselor")
        }
        return n
}

  func (s *StudentSchoolEnrollment_Counselor) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *StudentSchoolEnrollment_Counselor) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }

  // XXXXX
func (t *TimeTableSubject) CopyString(key string, value interface{}) *TimeTableSubject {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TimeTableSubject) CopyClone(key string, value interface{}) *TimeTableSubject {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TimeTableSubject) Unset(key string) *TimeTableSubject {
        switch key {
  case "SubjectType":
   n.SubjectType = nil
  case "RefId":
   n.RefId = nil
  case "ProposedMinClassSize":
   n.ProposedMinClassSize = nil
  case "CourseLocalId":
   n.CourseLocalId = nil
  case "SubjectShortName":
   n.SubjectShortName = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "SchoolCourseInfoRefId":
   n.SchoolCourseInfoRefId = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "ProposedMaxClassSize":
   n.ProposedMaxClassSize = nil
  case "SubjectLocalId":
   n.SubjectLocalId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "SubjectLongName":
   n.SubjectLongName = nil
  case "AcademicYear":
   n.AcademicYear = nil
  case "Semester":
   n.Semester = nil
  case "AcademicYearRange":
   n.AcademicYearRange = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
  case "SchoolLocalId":
   n.SchoolLocalId = nil
  case "Faculty":
   n.Faculty = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableSubject")
        }
        return n
}

func (n *TimeTableSubject) SetProperty(key string, value interface{}) *TimeTableSubject {
        if n == nil {
                n, _ = TimeTableSubjectPointer(TimeTableSubject{})
        }
        switch key {
    case "SubjectType":
    
    if v, ok:= StringPointer(value); ok {
      n.SubjectType = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ProposedMinClassSize":
    
    if v, ok:= FloatPointer(value); ok {
      n.ProposedMinClassSize = ((*Float)(v))
      }
    case "CourseLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.CourseLocalId = ((*LocalIdType)(v))
      }
    case "SubjectShortName":
    
    if v, ok:= StringPointer(value); ok {
      n.SubjectShortName = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "SchoolCourseInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolCourseInfoRefId = ((*RefIdType)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "ProposedMaxClassSize":
    
    if v, ok:= FloatPointer(value); ok {
      n.ProposedMaxClassSize = ((*Float)(v))
      }
    case "SubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SubjectLocalId = ((*LocalIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "SubjectLongName":
    
    if v, ok:= StringPointer(value); ok {
      n.SubjectLongName = ((*String)(v))
      }
    case "AcademicYear":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.AcademicYear = v
      }
    case "Semester":
    
    if v, ok:= IntPointer(value); ok {
      n.Semester = ((*Int)(v))
      }
    case "AcademicYearRange":
    if v, ok:= YearRangeTypePointer(value); ok {
      n.AcademicYearRange = v
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "Faculty":
    
    if v, ok:= StringPointer(value); ok {
      n.Faculty = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableSubject")
        }
        return n
}

  func (s *TimeTableSubject) SubjectTypeRead() *String {
    if s.SubjectType == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubjectType = ((*String)(v))
      }
      }
      return s.SubjectType
    }
  func (s *TimeTableSubject) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *TimeTableSubject) ProposedMinClassSizeRead() *Float {
    if s.ProposedMinClassSize == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ProposedMinClassSize = ((*Float)(v))
      }
      }
      return s.ProposedMinClassSize
    }
  func (s *TimeTableSubject) CourseLocalIdRead() *LocalIdType {
    if s.CourseLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.CourseLocalId = ((*LocalIdType)(v))
      }
      }
      return s.CourseLocalId
    }
  func (s *TimeTableSubject) SubjectShortNameRead() *String {
    if s.SubjectShortName == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubjectShortName = ((*String)(v))
      }
      }
      return s.SubjectShortName
    }
  func (s *TimeTableSubject) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *TimeTableSubject) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *TimeTableSubject) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *TimeTableSubject) SchoolCourseInfoRefIdRead() *RefIdType {
    if s.SchoolCourseInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolCourseInfoRefId = ((*RefIdType)(v))
      }
      }
      return s.SchoolCourseInfoRefId
    }
  func (s *TimeTableSubject) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *TimeTableSubject) ProposedMaxClassSizeRead() *Float {
    if s.ProposedMaxClassSize == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ProposedMaxClassSize = ((*Float)(v))
      }
      }
      return s.ProposedMaxClassSize
    }
  func (s *TimeTableSubject) SubjectLocalIdRead() *LocalIdType {
    if s.SubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SubjectLocalId
    }
  func (s *TimeTableSubject) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *TimeTableSubject) SubjectLongNameRead() *String {
    if s.SubjectLongName == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubjectLongName = ((*String)(v))
      }
      }
      return s.SubjectLongName
    }
  func (s *TimeTableSubject) AcademicYearRead() *YearLevelType {
    if s.AcademicYear == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.AcademicYear = v
      }
      }
      return s.AcademicYear
    }
  func (s *TimeTableSubject) SemesterRead() *Int {
    if s.Semester == nil {
    if v, ok:= IntPointer(0); ok {
      s.Semester = ((*Int)(v))
      }
      }
      return s.Semester
    }
  func (s *TimeTableSubject) AcademicYearRangeRead() *YearRangeType {
    if s.AcademicYearRange == nil {
     if v, ok:= YearRangeTypePointer(YearRangeType{}); ok {
      s.AcademicYearRange = v
      }
      }
      return s.AcademicYearRange
    }
  func (s *TimeTableSubject) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }
  func (s *TimeTableSubject) SchoolLocalIdRead() *LocalIdType {
    if s.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolLocalId
    }
  func (s *TimeTableSubject) FacultyRead() *String {
    if s.Faculty == nil {
    if v, ok:= StringPointer(""); ok {
      s.Faculty = ((*String)(v))
      }
      }
      return s.Faculty
    }

  // XXXXX
func (t *AGRuleType) CopyString(key string, value interface{}) *AGRuleType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AGRuleType) CopyClone(key string, value interface{}) *AGRuleType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AGRuleType) Unset(key string) *AGRuleType {
        switch key {
  case "AGRuleResponse":
   n.AGRuleResponse = nil
  case "AGRuleStatus":
   n.AGRuleStatus = nil
  case "AGRuleCode":
   n.AGRuleCode = nil
  case "AGRuleComment":
   n.AGRuleComment = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGRuleType")
        }
        return n
}

func (n *AGRuleType) SetProperty(key string, value interface{}) *AGRuleType {
        if n == nil {
                n, _ = AGRuleTypePointer(AGRuleType{})
        }
        switch key {
    case "AGRuleResponse":
    
    if v, ok:= StringPointer(value); ok {
      n.AGRuleResponse = ((*String)(v))
      }
    case "AGRuleStatus":
    
    if v, ok:= StringPointer(value); ok {
      n.AGRuleStatus = ((*String)(v))
      }
    case "AGRuleCode":
    
    if v, ok:= StringPointer(value); ok {
      n.AGRuleCode = ((*String)(v))
      }
    case "AGRuleComment":
    
    if v, ok:= StringPointer(value); ok {
      n.AGRuleComment = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGRuleType")
        }
        return n
}

  func (s *AGRuleType) AGRuleResponseRead() *String {
    if s.AGRuleResponse == nil {
    if v, ok:= StringPointer(""); ok {
      s.AGRuleResponse = ((*String)(v))
      }
      }
      return s.AGRuleResponse
    }
  func (s *AGRuleType) AGRuleStatusRead() *String {
    if s.AGRuleStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.AGRuleStatus = ((*String)(v))
      }
      }
      return s.AGRuleStatus
    }
  func (s *AGRuleType) AGRuleCodeRead() *String {
    if s.AGRuleCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.AGRuleCode = ((*String)(v))
      }
      }
      return s.AGRuleCode
    }
  func (s *AGRuleType) AGRuleCommentRead() *String {
    if s.AGRuleComment == nil {
    if v, ok:= StringPointer(""); ok {
      s.AGRuleComment = ((*String)(v))
      }
      }
      return s.AGRuleComment
    }

  // XXXXX
func (t *StudentAttendanceTimeList) CopyString(key string, value interface{}) *StudentAttendanceTimeList {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentAttendanceTimeList) CopyClone(key string, value interface{}) *StudentAttendanceTimeList {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentAttendanceTimeList) Unset(key string) *StudentAttendanceTimeList {
        switch key {
  case "AttendanceTimes":
   n.AttendanceTimes = nil
  case "RefId":
   n.RefId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "PeriodAttendances":
   n.PeriodAttendances = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "Date":
   n.Date = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceTimeList")
        }
        return n
}

func (n *StudentAttendanceTimeList) SetProperty(key string, value interface{}) *StudentAttendanceTimeList {
        if n == nil {
                n, _ = StudentAttendanceTimeListPointer(StudentAttendanceTimeList{})
        }
        switch key {
    case "AttendanceTimes":
    if v, ok:= AttendanceTimesTypePointer(value); ok {
      n.AttendanceTimes = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "PeriodAttendances":
    if v, ok:= PeriodAttendancesTypePointer(value); ok {
      n.PeriodAttendances = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.Date = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceTimeList")
        }
        return n
}

  func (s *StudentAttendanceTimeList) AttendanceTimesRead() *AttendanceTimesType {
    if s.AttendanceTimes == nil {
     if v, ok:= AttendanceTimesTypePointer(AttendanceTimesType{}); ok {
      s.AttendanceTimes = v
      }
      }
      return s.AttendanceTimes
    }
  func (s *StudentAttendanceTimeList) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StudentAttendanceTimeList) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentAttendanceTimeList) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *StudentAttendanceTimeList) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *StudentAttendanceTimeList) PeriodAttendancesRead() *PeriodAttendancesType {
    if s.PeriodAttendances == nil {
     if v, ok:= PeriodAttendancesTypePointer(PeriodAttendancesType{}); ok {
      s.PeriodAttendances = v
      }
      }
      return s.PeriodAttendances
    }
  func (s *StudentAttendanceTimeList) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentAttendanceTimeList) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *StudentAttendanceTimeList) DateRead() *String {
    if s.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.Date = ((*String)(v))
      }
      }
      return s.Date
    }
  func (s *StudentAttendanceTimeList) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }

  // XXXXX
func (t *EquipmentInfo_SIF_RefId) CopyString(key string, value interface{}) *EquipmentInfo_SIF_RefId {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *EquipmentInfo_SIF_RefId) CopyClone(key string, value interface{}) *EquipmentInfo_SIF_RefId {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *EquipmentInfo_SIF_RefId) Unset(key string) *EquipmentInfo_SIF_RefId {
        switch key {
  case "Value":
   n.Value = nil
  case "SIF_RefObject":
   n.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EquipmentInfo_SIF_RefId")
        }
        return n
}

func (n *EquipmentInfo_SIF_RefId) SetProperty(key string, value interface{}) *EquipmentInfo_SIF_RefId {
        if n == nil {
                n, _ = EquipmentInfo_SIF_RefIdPointer(EquipmentInfo_SIF_RefId{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EquipmentInfo_SIF_RefId")
        }
        return n
}

  func (s *EquipmentInfo_SIF_RefId) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *EquipmentInfo_SIF_RefId) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }

  // XXXXX
func (t *TestDisruptionType) CopyString(key string, value interface{}) *TestDisruptionType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TestDisruptionType) CopyClone(key string, value interface{}) *TestDisruptionType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TestDisruptionType) Unset(key string) *TestDisruptionType {
        switch key {
  case "Event":
   n.Event = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TestDisruptionType")
        }
        return n
}

func (n *TestDisruptionType) SetProperty(key string, value interface{}) *TestDisruptionType {
        if n == nil {
                n, _ = TestDisruptionTypePointer(TestDisruptionType{})
        }
        switch key {
    case "Event":
    
    if v, ok:= StringPointer(value); ok {
      n.Event = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TestDisruptionType")
        }
        return n
}

  func (s *TestDisruptionType) EventRead() *String {
    if s.Event == nil {
    if v, ok:= StringPointer(""); ok {
      s.Event = ((*String)(v))
      }
      }
      return s.Event
    }

  // XXXXX
func (t *NAPTestletResponseItemType) CopyString(key string, value interface{}) *NAPTestletResponseItemType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPTestletResponseItemType) CopyClone(key string, value interface{}) *NAPTestletResponseItemType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPTestletResponseItemType) Unset(key string) *NAPTestletResponseItemType {
        switch key {
  case "LapsedTimeItem":
   n.LapsedTimeItem = nil
  case "ResponseCorrectness":
   n.ResponseCorrectness = nil
  case "ItemWeight":
   n.ItemWeight = nil
  case "NAPTestItemRefId":
   n.NAPTestItemRefId = nil
  case "Score":
   n.Score = nil
  case "NAPTestItemLocalId":
   n.NAPTestItemLocalId = nil
  case "Response":
   n.Response = nil
  case "SequenceNumber":
   n.SequenceNumber = nil
  case "SubscoreList":
   n.SubscoreList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletResponseItemType")
        }
        return n
}

func (n *NAPTestletResponseItemType) SetProperty(key string, value interface{}) *NAPTestletResponseItemType {
        if n == nil {
                n, _ = NAPTestletResponseItemTypePointer(NAPTestletResponseItemType{})
        }
        switch key {
    case "LapsedTimeItem":
    
    if v, ok:= StringPointer(value); ok {
      n.LapsedTimeItem = ((*String)(v))
      }
    case "ResponseCorrectness":
        if !CodesetContains(AUCodeSetsNAPResponseCorrectnessType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPResponseCorrectnessType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ResponseCorrectness = ((*AUCodeSetsNAPResponseCorrectnessType)(v))
      }
    case "ItemWeight":
    
    if v, ok:= FloatPointer(value); ok {
      n.ItemWeight = ((*Float)(v))
      }
    case "NAPTestItemRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestItemRefId = ((*String)(v))
      }
    case "Score":
    
    if v, ok:= FloatPointer(value); ok {
      n.Score = ((*Float)(v))
      }
    case "NAPTestItemLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestItemLocalId = ((*LocalIdType)(v))
      }
    case "Response":
    
    if v, ok:= StringPointer(value); ok {
      n.Response = ((*String)(v))
      }
    case "SequenceNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.SequenceNumber = ((*Int)(v))
      }
    case "SubscoreList":
    if v, ok:= NAPSubscoreListTypePointer(value); ok {
      n.SubscoreList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletResponseItemType")
        }
        return n
}

  func (s *NAPTestletResponseItemType) LapsedTimeItemRead() *String {
    if s.LapsedTimeItem == nil {
    if v, ok:= StringPointer(""); ok {
      s.LapsedTimeItem = ((*String)(v))
      }
      }
      return s.LapsedTimeItem
    }
  func (s *NAPTestletResponseItemType) ResponseCorrectnessRead() *AUCodeSetsNAPResponseCorrectnessType {
    if s.ResponseCorrectness == nil {
    if v, ok:= StringPointer(""); ok {
      s.ResponseCorrectness = ((*AUCodeSetsNAPResponseCorrectnessType)(v))
      }
      }
      return s.ResponseCorrectness
    }
  func (s *NAPTestletResponseItemType) ItemWeightRead() *Float {
    if s.ItemWeight == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ItemWeight = ((*Float)(v))
      }
      }
      return s.ItemWeight
    }
  func (s *NAPTestletResponseItemType) NAPTestItemRefIdRead() *String {
    if s.NAPTestItemRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestItemRefId = ((*String)(v))
      }
      }
      return s.NAPTestItemRefId
    }
  func (s *NAPTestletResponseItemType) ScoreRead() *Float {
    if s.Score == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Score = ((*Float)(v))
      }
      }
      return s.Score
    }
  func (s *NAPTestletResponseItemType) NAPTestItemLocalIdRead() *LocalIdType {
    if s.NAPTestItemLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestItemLocalId = ((*LocalIdType)(v))
      }
      }
      return s.NAPTestItemLocalId
    }
  func (s *NAPTestletResponseItemType) ResponseRead() *String {
    if s.Response == nil {
    if v, ok:= StringPointer(""); ok {
      s.Response = ((*String)(v))
      }
      }
      return s.Response
    }
  func (s *NAPTestletResponseItemType) SequenceNumberRead() *Int {
    if s.SequenceNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.SequenceNumber = ((*Int)(v))
      }
      }
      return s.SequenceNumber
    }
  func (s *NAPTestletResponseItemType) SubscoreListRead() *NAPSubscoreListType {
    if s.SubscoreList == nil {
     if v, ok:= NAPSubscoreListTypePointer(NAPSubscoreListType{}); ok {
      s.SubscoreList = v
      }
      }
      return s.SubscoreList
    }

  // XXXXX
func (t *LEAContactType) CopyString(key string, value interface{}) *LEAContactType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LEAContactType) CopyClone(key string, value interface{}) *LEAContactType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LEAContactType) Unset(key string) *LEAContactType {
        switch key {
  case "ContactInfo":
   n.ContactInfo = nil
  case "PublishInDirectory":
   n.PublishInDirectory = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LEAContactType")
        }
        return n
}

func (n *LEAContactType) SetProperty(key string, value interface{}) *LEAContactType {
        if n == nil {
                n, _ = LEAContactTypePointer(LEAContactType{})
        }
        switch key {
    case "ContactInfo":
    if v, ok:= ContactInfoTypePointer(value); ok {
      n.ContactInfo = v
      }
    case "PublishInDirectory":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PublishInDirectory = ((*PublishInDirectoryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LEAContactType")
        }
        return n
}

  func (s *LEAContactType) ContactInfoRead() *ContactInfoType {
    if s.ContactInfo == nil {
     if v, ok:= ContactInfoTypePointer(ContactInfoType{}); ok {
      s.ContactInfo = v
      }
      }
      return s.ContactInfo
    }
  func (s *LEAContactType) PublishInDirectoryRead() *PublishInDirectoryType {
    if s.PublishInDirectory == nil {
    if v, ok:= StringPointer(""); ok {
      s.PublishInDirectory = ((*PublishInDirectoryType)(v))
      }
      }
      return s.PublishInDirectory
    }

  // XXXXX
func (t *TeachingGroupTeacherType) CopyString(key string, value interface{}) *TeachingGroupTeacherType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TeachingGroupTeacherType) CopyClone(key string, value interface{}) *TeachingGroupTeacherType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TeachingGroupTeacherType) Unset(key string) *TeachingGroupTeacherType {
        switch key {
  case "StaffPersonalRefId":
   n.StaffPersonalRefId = nil
  case "Association":
   n.Association = nil
  case "Name":
   n.Name = nil
  case "StaffLocalId":
   n.StaffLocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupTeacherType")
        }
        return n
}

func (n *TeachingGroupTeacherType) SetProperty(key string, value interface{}) *TeachingGroupTeacherType {
        if n == nil {
                n, _ = TeachingGroupTeacherTypePointer(TeachingGroupTeacherType{})
        }
        switch key {
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffPersonalRefId = ((*String)(v))
      }
    case "Association":
    
    if v, ok:= StringPointer(value); ok {
      n.Association = ((*String)(v))
      }
    case "Name":
    if v, ok:= NameOfRecordTypePointer(value); ok {
      n.Name = v
      }
    case "StaffLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffLocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupTeacherType")
        }
        return n
}

  func (s *TeachingGroupTeacherType) StaffPersonalRefIdRead() *String {
    if s.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.StaffPersonalRefId
    }
  func (s *TeachingGroupTeacherType) AssociationRead() *String {
    if s.Association == nil {
    if v, ok:= StringPointer(""); ok {
      s.Association = ((*String)(v))
      }
      }
      return s.Association
    }
  func (s *TeachingGroupTeacherType) NameRead() *NameOfRecordType {
    if s.Name == nil {
     if v, ok:= NameOfRecordTypePointer(NameOfRecordType{}); ok {
      s.Name = v
      }
      }
      return s.Name
    }
  func (s *TeachingGroupTeacherType) StaffLocalIdRead() *LocalIdType {
    if s.StaffLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffLocalId = ((*LocalIdType)(v))
      }
      }
      return s.StaffLocalId
    }

  // XXXXX
func (t *AuditInfoType) CopyString(key string, value interface{}) *AuditInfoType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AuditInfoType) CopyClone(key string, value interface{}) *AuditInfoType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AuditInfoType) Unset(key string) *AuditInfoType {
        switch key {
  case "CreationUser":
   n.CreationUser = nil
  case "CreationDateTime":
   n.CreationDateTime = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AuditInfoType")
        }
        return n
}

func (n *AuditInfoType) SetProperty(key string, value interface{}) *AuditInfoType {
        if n == nil {
                n, _ = AuditInfoTypePointer(AuditInfoType{})
        }
        switch key {
    case "CreationUser":
    if v, ok:= CreationUserTypePointer(value); ok {
      n.CreationUser = v
      }
    case "CreationDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.CreationDateTime = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AuditInfoType")
        }
        return n
}

  func (s *AuditInfoType) CreationUserRead() *CreationUserType {
    if s.CreationUser == nil {
     if v, ok:= CreationUserTypePointer(CreationUserType{}); ok {
      s.CreationUser = v
      }
      }
      return s.CreationUser
    }
  func (s *AuditInfoType) CreationDateTimeRead() *String {
    if s.CreationDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.CreationDateTime = ((*String)(v))
      }
      }
      return s.CreationDateTime
    }

  // XXXXX
func (t *PaymentReceiptLineType) CopyString(key string, value interface{}) *PaymentReceiptLineType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PaymentReceiptLineType) CopyClone(key string, value interface{}) *PaymentReceiptLineType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PaymentReceiptLineType) Unset(key string) *PaymentReceiptLineType {
        switch key {
  case "InvoiceRefId":
   n.InvoiceRefId = nil
  case "TaxRate":
   n.TaxRate = nil
  case "AccountCode":
   n.AccountCode = nil
  case "TaxAmount":
   n.TaxAmount = nil
  case "FinancialAccountRefId":
   n.FinancialAccountRefId = nil
  case "TransactionAmount":
   n.TransactionAmount = nil
  case "LocalId":
   n.LocalId = nil
  case "TransactionDescription":
   n.TransactionDescription = nil
  case "LocalPaymentReceiptLineId":
   n.LocalPaymentReceiptLineId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PaymentReceiptLineType")
        }
        return n
}

func (n *PaymentReceiptLineType) SetProperty(key string, value interface{}) *PaymentReceiptLineType {
        if n == nil {
                n, _ = PaymentReceiptLineTypePointer(PaymentReceiptLineType{})
        }
        switch key {
    case "InvoiceRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.InvoiceRefId = ((*String)(v))
      }
    case "TaxRate":
    
    if v, ok:= FloatPointer(value); ok {
      n.TaxRate = ((*Float)(v))
      }
    case "AccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.AccountCode = ((*String)(v))
      }
    case "TaxAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.TaxAmount = v
      }
    case "FinancialAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.FinancialAccountRefId = ((*String)(v))
      }
    case "TransactionAmount":
    if v, ok:= DebitOrCreditAmountTypePointer(value); ok {
      n.TransactionAmount = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "TransactionDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.TransactionDescription = ((*String)(v))
      }
    case "LocalPaymentReceiptLineId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalPaymentReceiptLineId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PaymentReceiptLineType")
        }
        return n
}

  func (s *PaymentReceiptLineType) InvoiceRefIdRead() *String {
    if s.InvoiceRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.InvoiceRefId = ((*String)(v))
      }
      }
      return s.InvoiceRefId
    }
  func (s *PaymentReceiptLineType) TaxRateRead() *Float {
    if s.TaxRate == nil {
    if v, ok:= FloatPointer(0); ok {
      s.TaxRate = ((*Float)(v))
      }
      }
      return s.TaxRate
    }
  func (s *PaymentReceiptLineType) AccountCodeRead() *String {
    if s.AccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.AccountCode = ((*String)(v))
      }
      }
      return s.AccountCode
    }
  func (s *PaymentReceiptLineType) TaxAmountRead() *MonetaryAmountType {
    if s.TaxAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.TaxAmount = v
      }
      }
      return s.TaxAmount
    }
  func (s *PaymentReceiptLineType) FinancialAccountRefIdRead() *String {
    if s.FinancialAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.FinancialAccountRefId = ((*String)(v))
      }
      }
      return s.FinancialAccountRefId
    }
  func (s *PaymentReceiptLineType) TransactionAmountRead() *DebitOrCreditAmountType {
    if s.TransactionAmount == nil {
     if v, ok:= DebitOrCreditAmountTypePointer(DebitOrCreditAmountType{}); ok {
      s.TransactionAmount = v
      }
      }
      return s.TransactionAmount
    }
  func (s *PaymentReceiptLineType) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *PaymentReceiptLineType) TransactionDescriptionRead() *String {
    if s.TransactionDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.TransactionDescription = ((*String)(v))
      }
      }
      return s.TransactionDescription
    }
  func (s *PaymentReceiptLineType) LocalPaymentReceiptLineIdRead() *LocalIdType {
    if s.LocalPaymentReceiptLineId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalPaymentReceiptLineId = ((*LocalIdType)(v))
      }
      }
      return s.LocalPaymentReceiptLineId
    }

  // XXXXX
func (t *NAPTestletContentType) CopyString(key string, value interface{}) *NAPTestletContentType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPTestletContentType) CopyClone(key string, value interface{}) *NAPTestletContentType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPTestletContentType) Unset(key string) *NAPTestletContentType {
        switch key {
  case "TestletName":
   n.TestletName = nil
  case "TestletMaximumScore":
   n.TestletMaximumScore = nil
  case "NAPTestletLocalId":
   n.NAPTestletLocalId = nil
  case "Node":
   n.Node = nil
  case "LocationInStage":
   n.LocationInStage = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletContentType")
        }
        return n
}

func (n *NAPTestletContentType) SetProperty(key string, value interface{}) *NAPTestletContentType {
        if n == nil {
                n, _ = NAPTestletContentTypePointer(NAPTestletContentType{})
        }
        switch key {
    case "TestletName":
    
    if v, ok:= StringPointer(value); ok {
      n.TestletName = ((*String)(v))
      }
    case "TestletMaximumScore":
    
    if v, ok:= FloatPointer(value); ok {
      n.TestletMaximumScore = ((*Float)(v))
      }
    case "NAPTestletLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestletLocalId = ((*LocalIdType)(v))
      }
    case "Node":
    
    if v, ok:= StringPointer(value); ok {
      n.Node = ((*String)(v))
      }
    case "LocationInStage":
    
    if v, ok:= IntPointer(value); ok {
      n.LocationInStage = ((*Int)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletContentType")
        }
        return n
}

  func (s *NAPTestletContentType) TestletNameRead() *String {
    if s.TestletName == nil {
    if v, ok:= StringPointer(""); ok {
      s.TestletName = ((*String)(v))
      }
      }
      return s.TestletName
    }
  func (s *NAPTestletContentType) TestletMaximumScoreRead() *Float {
    if s.TestletMaximumScore == nil {
    if v, ok:= FloatPointer(0); ok {
      s.TestletMaximumScore = ((*Float)(v))
      }
      }
      return s.TestletMaximumScore
    }
  func (s *NAPTestletContentType) NAPTestletLocalIdRead() *LocalIdType {
    if s.NAPTestletLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestletLocalId = ((*LocalIdType)(v))
      }
      }
      return s.NAPTestletLocalId
    }
  func (s *NAPTestletContentType) NodeRead() *String {
    if s.Node == nil {
    if v, ok:= StringPointer(""); ok {
      s.Node = ((*String)(v))
      }
      }
      return s.Node
    }
  func (s *NAPTestletContentType) LocationInStageRead() *Int {
    if s.LocationInStage == nil {
    if v, ok:= IntPointer(0); ok {
      s.LocationInStage = ((*Int)(v))
      }
      }
      return s.LocationInStage
    }

  // XXXXX
func (t *PasswordListType_Password) CopyString(key string, value interface{}) *PasswordListType_Password {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PasswordListType_Password) CopyClone(key string, value interface{}) *PasswordListType_Password {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PasswordListType_Password) Unset(key string) *PasswordListType_Password {
        switch key {
  case "Value":
   n.Value = nil
  case "KeyName":
   n.KeyName = nil
  case "Algorithm":
   n.Algorithm = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PasswordListType_Password")
        }
        return n
}

func (n *PasswordListType_Password) SetProperty(key string, value interface{}) *PasswordListType_Password {
        if n == nil {
                n, _ = PasswordListType_PasswordPointer(PasswordListType_Password{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "KeyName":
    
    if v, ok:= StringPointer(value); ok {
      n.KeyName = ((*String)(v))
      }
    case "Algorithm":
    
    if v, ok:= StringPointer(value); ok {
      n.Algorithm = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PasswordListType_Password")
        }
        return n
}

  func (s *PasswordListType_Password) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *PasswordListType_Password) KeyNameRead() *String {
    if s.KeyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.KeyName = ((*String)(v))
      }
      }
      return s.KeyName
    }
  func (s *PasswordListType_Password) AlgorithmRead() *String {
    if s.Algorithm == nil {
    if v, ok:= StringPointer(""); ok {
      s.Algorithm = ((*String)(v))
      }
      }
      return s.Algorithm
    }

  // XXXXX
func (t *NAPWritingRubricType) CopyString(key string, value interface{}) *NAPWritingRubricType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPWritingRubricType) CopyClone(key string, value interface{}) *NAPWritingRubricType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPWritingRubricType) Unset(key string) *NAPWritingRubricType {
        switch key {
  case "ScoreList":
   n.ScoreList = nil
  case "Descriptor":
   n.Descriptor = nil
  case "RubricType":
   n.RubricType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPWritingRubricType")
        }
        return n
}

func (n *NAPWritingRubricType) SetProperty(key string, value interface{}) *NAPWritingRubricType {
        if n == nil {
                n, _ = NAPWritingRubricTypePointer(NAPWritingRubricType{})
        }
        switch key {
    case "ScoreList":
    if v, ok:= ScoreListTypePointer(value); ok {
      n.ScoreList = v
      }
    case "Descriptor":
    
    if v, ok:= StringPointer(value); ok {
      n.Descriptor = ((*String)(v))
      }
    case "RubricType":
    
    if v, ok:= StringPointer(value); ok {
      n.RubricType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPWritingRubricType")
        }
        return n
}

  func (s *NAPWritingRubricType) ScoreListRead() *ScoreListType {
    if s.ScoreList == nil {
     if v, ok:= ScoreListTypePointer(ScoreListType{}); ok {
      s.ScoreList = v
      }
      }
      return s.ScoreList
    }
  func (s *NAPWritingRubricType) DescriptorRead() *String {
    if s.Descriptor == nil {
    if v, ok:= StringPointer(""); ok {
      s.Descriptor = ((*String)(v))
      }
      }
      return s.Descriptor
    }
  func (s *NAPWritingRubricType) RubricTypeRead() *String {
    if s.RubricType == nil {
    if v, ok:= StringPointer(""); ok {
      s.RubricType = ((*String)(v))
      }
      }
      return s.RubricType
    }

  // XXXXX
func (t *AdjustmentContainerType) CopyString(key string, value interface{}) *AdjustmentContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AdjustmentContainerType) CopyClone(key string, value interface{}) *AdjustmentContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AdjustmentContainerType) Unset(key string) *AdjustmentContainerType {
        switch key {
  case "BookletType":
   n.BookletType = nil
  case "PNPCodeList":
   n.PNPCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AdjustmentContainerType")
        }
        return n
}

func (n *AdjustmentContainerType) SetProperty(key string, value interface{}) *AdjustmentContainerType {
        if n == nil {
                n, _ = AdjustmentContainerTypePointer(AdjustmentContainerType{})
        }
        switch key {
    case "BookletType":
    
    if v, ok:= StringPointer(value); ok {
      n.BookletType = ((*String)(v))
      }
    case "PNPCodeList":
    if v, ok:= PNPCodeListTypePointer(value); ok {
      n.PNPCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AdjustmentContainerType")
        }
        return n
}

  func (s *AdjustmentContainerType) BookletTypeRead() *String {
    if s.BookletType == nil {
    if v, ok:= StringPointer(""); ok {
      s.BookletType = ((*String)(v))
      }
      }
      return s.BookletType
    }
  func (s *AdjustmentContainerType) PNPCodeListRead() *PNPCodeListType {
    if s.PNPCodeList == nil {
     if v, ok:= PNPCodeListTypePointer(PNPCodeListType{}); ok {
      s.PNPCodeList = v
      }
      }
      return s.PNPCodeList
    }

  // XXXXX
func (t *PromotionInfoType) CopyString(key string, value interface{}) *PromotionInfoType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PromotionInfoType) CopyClone(key string, value interface{}) *PromotionInfoType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PromotionInfoType) Unset(key string) *PromotionInfoType {
        switch key {
  case "PromotionStatus":
   n.PromotionStatus = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PromotionInfoType")
        }
        return n
}

func (n *PromotionInfoType) SetProperty(key string, value interface{}) *PromotionInfoType {
        if n == nil {
                n, _ = PromotionInfoTypePointer(PromotionInfoType{})
        }
        switch key {
    case "PromotionStatus":
    
    if v, ok:= StringPointer(value); ok {
      n.PromotionStatus = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PromotionInfoType")
        }
        return n
}

  func (s *PromotionInfoType) PromotionStatusRead() *String {
    if s.PromotionStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.PromotionStatus = ((*String)(v))
      }
      }
      return s.PromotionStatus
    }

  // XXXXX
func (t *AgencyType) CopyString(key string, value interface{}) *AgencyType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AgencyType) CopyClone(key string, value interface{}) *AgencyType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AgencyType) Unset(key string) *AgencyType {
        switch key {
  case "Code":
   n.Code = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AgencyType")
        }
        return n
}

func (n *AgencyType) SetProperty(key string, value interface{}) *AgencyType {
        if n == nil {
                n, _ = AgencyTypePointer(AgencyType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsEducationAgencyTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEducationAgencyTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsEducationAgencyTypeType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AgencyType")
        }
        return n
}

  func (s *AgencyType) CodeRead() *AUCodeSetsEducationAgencyTypeType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsEducationAgencyTypeType)(v))
      }
      }
      return s.Code
    }
  func (s *AgencyType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }

  // XXXXX
func (t *SystemRole_SIF_RefId) CopyString(key string, value interface{}) *SystemRole_SIF_RefId {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SystemRole_SIF_RefId) CopyClone(key string, value interface{}) *SystemRole_SIF_RefId {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SystemRole_SIF_RefId) Unset(key string) *SystemRole_SIF_RefId {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_SIF_RefId")
        }
        return n
}

func (n *SystemRole_SIF_RefId) SetProperty(key string, value interface{}) *SystemRole_SIF_RefId {
        if n == nil {
                n, _ = SystemRole_SIF_RefIdPointer(SystemRole_SIF_RefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_SIF_RefId")
        }
        return n
}

  func (s *SystemRole_SIF_RefId) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *SystemRole_SIF_RefId) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *TimeTableCell) CopyString(key string, value interface{}) *TimeTableCell {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TimeTableCell) CopyClone(key string, value interface{}) *TimeTableCell {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TimeTableCell) Unset(key string) *TimeTableCell {
        switch key {
  case "TeachingGroupRefId":
   n.TeachingGroupRefId = nil
  case "RefId":
   n.RefId = nil
  case "RoomList":
   n.RoomList = nil
  case "DayId":
   n.DayId = nil
  case "StaffLocalId":
   n.StaffLocalId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "RoomInfoRefId":
   n.RoomInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "TeachingGroupLocalId":
   n.TeachingGroupLocalId = nil
  case "TimeTableLocalId":
   n.TimeTableLocalId = nil
  case "SubjectLocalId":
   n.SubjectLocalId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "CellType":
   n.CellType = nil
  case "TeacherList":
   n.TeacherList = nil
  case "SchoolLocalId":
   n.SchoolLocalId = nil
  case "TimeTableRefId":
   n.TimeTableRefId = nil
  case "PeriodId":
   n.PeriodId = nil
  case "RoomNumber":
   n.RoomNumber = nil
  case "TimeTableSubjectRefId":
   n.TimeTableSubjectRefId = nil
  case "StaffPersonalRefId":
   n.StaffPersonalRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableCell")
        }
        return n
}

func (n *TimeTableCell) SetProperty(key string, value interface{}) *TimeTableCell {
        if n == nil {
                n, _ = TimeTableCellPointer(TimeTableCell{})
        }
        switch key {
    case "TeachingGroupRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TeachingGroupRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "RoomList":
    if v, ok:= RoomListTypePointer(value); ok {
      n.RoomList = v
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.DayId = ((*LocalIdType)(v))
      }
    case "StaffLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffLocalId = ((*LocalIdType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "RoomInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RoomInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "TeachingGroupLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.TeachingGroupLocalId = ((*LocalIdType)(v))
      }
    case "TimeTableLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableLocalId = ((*LocalIdType)(v))
      }
    case "SubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SubjectLocalId = ((*LocalIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "CellType":
    
    if v, ok:= StringPointer(value); ok {
      n.CellType = ((*String)(v))
      }
    case "TeacherList":
    if v, ok:= ScheduledTeacherListTypePointer(value); ok {
      n.TeacherList = v
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "TimeTableRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableRefId = ((*String)(v))
      }
    case "PeriodId":
    
    if v, ok:= StringPointer(value); ok {
      n.PeriodId = ((*LocalIdType)(v))
      }
    case "RoomNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.RoomNumber = ((*HomeroomNumberType)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableSubjectRefId = ((*String)(v))
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffPersonalRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableCell")
        }
        return n
}

  func (s *TimeTableCell) TeachingGroupRefIdRead() *String {
    if s.TeachingGroupRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TeachingGroupRefId = ((*String)(v))
      }
      }
      return s.TeachingGroupRefId
    }
  func (s *TimeTableCell) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *TimeTableCell) RoomListRead() *RoomListType {
    if s.RoomList == nil {
     if v, ok:= RoomListTypePointer(RoomListType{}); ok {
      s.RoomList = v
      }
      }
      return s.RoomList
    }
  func (s *TimeTableCell) DayIdRead() *LocalIdType {
    if s.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.DayId = ((*LocalIdType)(v))
      }
      }
      return s.DayId
    }
  func (s *TimeTableCell) StaffLocalIdRead() *LocalIdType {
    if s.StaffLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffLocalId = ((*LocalIdType)(v))
      }
      }
      return s.StaffLocalId
    }
  func (s *TimeTableCell) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *TimeTableCell) RoomInfoRefIdRead() *String {
    if s.RoomInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoomInfoRefId = ((*String)(v))
      }
      }
      return s.RoomInfoRefId
    }
  func (s *TimeTableCell) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *TimeTableCell) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *TimeTableCell) TeachingGroupLocalIdRead() *LocalIdType {
    if s.TeachingGroupLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TeachingGroupLocalId = ((*LocalIdType)(v))
      }
      }
      return s.TeachingGroupLocalId
    }
  func (s *TimeTableCell) TimeTableLocalIdRead() *LocalIdType {
    if s.TimeTableLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableLocalId = ((*LocalIdType)(v))
      }
      }
      return s.TimeTableLocalId
    }
  func (s *TimeTableCell) SubjectLocalIdRead() *LocalIdType {
    if s.SubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SubjectLocalId
    }
  func (s *TimeTableCell) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *TimeTableCell) CellTypeRead() *String {
    if s.CellType == nil {
    if v, ok:= StringPointer(""); ok {
      s.CellType = ((*String)(v))
      }
      }
      return s.CellType
    }
  func (s *TimeTableCell) TeacherListRead() *ScheduledTeacherListType {
    if s.TeacherList == nil {
     if v, ok:= ScheduledTeacherListTypePointer(ScheduledTeacherListType{}); ok {
      s.TeacherList = v
      }
      }
      return s.TeacherList
    }
  func (s *TimeTableCell) SchoolLocalIdRead() *LocalIdType {
    if s.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolLocalId
    }
  func (s *TimeTableCell) TimeTableRefIdRead() *String {
    if s.TimeTableRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableRefId = ((*String)(v))
      }
      }
      return s.TimeTableRefId
    }
  func (s *TimeTableCell) PeriodIdRead() *LocalIdType {
    if s.PeriodId == nil {
    if v, ok:= StringPointer(""); ok {
      s.PeriodId = ((*LocalIdType)(v))
      }
      }
      return s.PeriodId
    }
  func (s *TimeTableCell) RoomNumberRead() *HomeroomNumberType {
    if s.RoomNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoomNumber = ((*HomeroomNumberType)(v))
      }
      }
      return s.RoomNumber
    }
  func (s *TimeTableCell) TimeTableSubjectRefIdRead() *String {
    if s.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableSubjectRefId = ((*String)(v))
      }
      }
      return s.TimeTableSubjectRefId
    }
  func (s *TimeTableCell) StaffPersonalRefIdRead() *String {
    if s.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.StaffPersonalRefId
    }

  // XXXXX
func (t *GradingAssignmentScore) CopyString(key string, value interface{}) *GradingAssignmentScore {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *GradingAssignmentScore) CopyClone(key string, value interface{}) *GradingAssignmentScore {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *GradingAssignmentScore) Unset(key string) *GradingAssignmentScore {
        switch key {
  case "DateGraded":
   n.DateGraded = nil
  case "TeachingGroupRefId":
   n.TeachingGroupRefId = nil
  case "ScoreDescription":
   n.ScoreDescription = nil
  case "RefId":
   n.RefId = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "SubscoreList":
   n.SubscoreList = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "GradingAssignmentRefId":
   n.GradingAssignmentRefId = nil
  case "TeacherJudgement":
   n.TeacherJudgement = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "StudentPersonalLocalId":
   n.StudentPersonalLocalId = nil
  case "ScoreLetter":
   n.ScoreLetter = nil
  case "ExpectedScore":
   n.ExpectedScore = nil
  case "ScorePoints":
   n.ScorePoints = nil
  case "StaffPersonalRefId":
   n.StaffPersonalRefId = nil
  case "MarkInfoRefId":
   n.MarkInfoRefId = nil
  case "AssignmentScoreIteration":
   n.AssignmentScoreIteration = nil
  case "ScorePercent":
   n.ScorePercent = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GradingAssignmentScore")
        }
        return n
}

func (n *GradingAssignmentScore) SetProperty(key string, value interface{}) *GradingAssignmentScore {
        if n == nil {
                n, _ = GradingAssignmentScorePointer(GradingAssignmentScore{})
        }
        switch key {
    case "DateGraded":
    
    if v, ok:= StringPointer(value); ok {
      n.DateGraded = ((*String)(v))
      }
    case "TeachingGroupRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TeachingGroupRefId = ((*String)(v))
      }
    case "ScoreDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.ScoreDescription = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "SubscoreList":
    if v, ok:= NAPSubscoreListTypePointer(value); ok {
      n.SubscoreList = v
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "GradingAssignmentRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.GradingAssignmentRefId = ((*String)(v))
      }
    case "TeacherJudgement":
    
    if v, ok:= StringPointer(value); ok {
      n.TeacherJudgement = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "StudentPersonalLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalLocalId = ((*LocalIdType)(v))
      }
    case "ScoreLetter":
    
    if v, ok:= StringPointer(value); ok {
      n.ScoreLetter = ((*String)(v))
      }
    case "ExpectedScore":
    
    if v, ok:= BoolPointer(value); ok {
      n.ExpectedScore = ((*Bool)(v))
      }
    case "ScorePoints":
    
    if v, ok:= IntPointer(value); ok {
      n.ScorePoints = ((*Int)(v))
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffPersonalRefId = ((*String)(v))
      }
    case "MarkInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.MarkInfoRefId = ((*String)(v))
      }
    case "AssignmentScoreIteration":
    
    if v, ok:= StringPointer(value); ok {
      n.AssignmentScoreIteration = ((*String)(v))
      }
    case "ScorePercent":
    
    if v, ok:= FloatPointer(value); ok {
      n.ScorePercent = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GradingAssignmentScore")
        }
        return n
}

  func (s *GradingAssignmentScore) DateGradedRead() *String {
    if s.DateGraded == nil {
    if v, ok:= StringPointer(""); ok {
      s.DateGraded = ((*String)(v))
      }
      }
      return s.DateGraded
    }
  func (s *GradingAssignmentScore) TeachingGroupRefIdRead() *String {
    if s.TeachingGroupRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TeachingGroupRefId = ((*String)(v))
      }
      }
      return s.TeachingGroupRefId
    }
  func (s *GradingAssignmentScore) ScoreDescriptionRead() *String {
    if s.ScoreDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.ScoreDescription = ((*String)(v))
      }
      }
      return s.ScoreDescription
    }
  func (s *GradingAssignmentScore) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *GradingAssignmentScore) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *GradingAssignmentScore) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *GradingAssignmentScore) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *GradingAssignmentScore) SubscoreListRead() *NAPSubscoreListType {
    if s.SubscoreList == nil {
     if v, ok:= NAPSubscoreListTypePointer(NAPSubscoreListType{}); ok {
      s.SubscoreList = v
      }
      }
      return s.SubscoreList
    }
  func (s *GradingAssignmentScore) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *GradingAssignmentScore) GradingAssignmentRefIdRead() *String {
    if s.GradingAssignmentRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.GradingAssignmentRefId = ((*String)(v))
      }
      }
      return s.GradingAssignmentRefId
    }
  func (s *GradingAssignmentScore) TeacherJudgementRead() *String {
    if s.TeacherJudgement == nil {
    if v, ok:= StringPointer(""); ok {
      s.TeacherJudgement = ((*String)(v))
      }
      }
      return s.TeacherJudgement
    }
  func (s *GradingAssignmentScore) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *GradingAssignmentScore) StudentPersonalLocalIdRead() *LocalIdType {
    if s.StudentPersonalLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalLocalId = ((*LocalIdType)(v))
      }
      }
      return s.StudentPersonalLocalId
    }
  func (s *GradingAssignmentScore) ScoreLetterRead() *String {
    if s.ScoreLetter == nil {
    if v, ok:= StringPointer(""); ok {
      s.ScoreLetter = ((*String)(v))
      }
      }
      return s.ScoreLetter
    }
  func (s *GradingAssignmentScore) ExpectedScoreRead() *Bool {
    if s.ExpectedScore == nil {
    if v, ok:= BoolPointer(false); ok {
      s.ExpectedScore = ((*Bool)(v))
      }
      }
      return s.ExpectedScore
    }
  func (s *GradingAssignmentScore) ScorePointsRead() *Int {
    if s.ScorePoints == nil {
    if v, ok:= IntPointer(0); ok {
      s.ScorePoints = ((*Int)(v))
      }
      }
      return s.ScorePoints
    }
  func (s *GradingAssignmentScore) StaffPersonalRefIdRead() *String {
    if s.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.StaffPersonalRefId
    }
  func (s *GradingAssignmentScore) MarkInfoRefIdRead() *String {
    if s.MarkInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.MarkInfoRefId = ((*String)(v))
      }
      }
      return s.MarkInfoRefId
    }
  func (s *GradingAssignmentScore) AssignmentScoreIterationRead() *String {
    if s.AssignmentScoreIteration == nil {
    if v, ok:= StringPointer(""); ok {
      s.AssignmentScoreIteration = ((*String)(v))
      }
      }
      return s.AssignmentScoreIteration
    }
  func (s *GradingAssignmentScore) ScorePercentRead() *Float {
    if s.ScorePercent == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ScorePercent = ((*Float)(v))
      }
      }
      return s.ScorePercent
    }

  // XXXXX
func (t *FineInfoType) CopyString(key string, value interface{}) *FineInfoType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *FineInfoType) CopyClone(key string, value interface{}) *FineInfoType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *FineInfoType) Unset(key string) *FineInfoType {
        switch key {
  case "Reference":
   n.Reference = nil
  case "Amount":
   n.Amount = nil
  case "Type":
   n.Type = nil
  case "Assessed":
   n.Assessed = nil
  case "Description":
   n.Description = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FineInfoType")
        }
        return n
}

func (n *FineInfoType) SetProperty(key string, value interface{}) *FineInfoType {
        if n == nil {
                n, _ = FineInfoTypePointer(FineInfoType{})
        }
        switch key {
    case "Reference":
    
    if v, ok:= StringPointer(value); ok {
      n.Reference = ((*String)(v))
      }
    case "Amount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.Amount = v
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
    case "Assessed":
    
    if v, ok:= StringPointer(value); ok {
      n.Assessed = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FineInfoType")
        }
        return n
}

  func (s *FineInfoType) ReferenceRead() *String {
    if s.Reference == nil {
    if v, ok:= StringPointer(""); ok {
      s.Reference = ((*String)(v))
      }
      }
      return s.Reference
    }
  func (s *FineInfoType) AmountRead() *MonetaryAmountType {
    if s.Amount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.Amount = v
      }
      }
      return s.Amount
    }
  func (s *FineInfoType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }
  func (s *FineInfoType) AssessedRead() *String {
    if s.Assessed == nil {
    if v, ok:= StringPointer(""); ok {
      s.Assessed = ((*String)(v))
      }
      }
      return s.Assessed
    }
  func (s *FineInfoType) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }

  // XXXXX
func (t *LibraryTransactionType) CopyString(key string, value interface{}) *LibraryTransactionType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LibraryTransactionType) CopyClone(key string, value interface{}) *LibraryTransactionType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LibraryTransactionType) Unset(key string) *LibraryTransactionType {
        switch key {
  case "FineInfoList":
   n.FineInfoList = nil
  case "HoldInfoList":
   n.HoldInfoList = nil
  case "ItemInfo":
   n.ItemInfo = nil
  case "CheckoutInfo":
   n.CheckoutInfo = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryTransactionType")
        }
        return n
}

func (n *LibraryTransactionType) SetProperty(key string, value interface{}) *LibraryTransactionType {
        if n == nil {
                n, _ = LibraryTransactionTypePointer(LibraryTransactionType{})
        }
        switch key {
    case "FineInfoList":
    if v, ok:= FineInfoListTypePointer(value); ok {
      n.FineInfoList = v
      }
    case "HoldInfoList":
    if v, ok:= HoldInfoListTypePointer(value); ok {
      n.HoldInfoList = v
      }
    case "ItemInfo":
    if v, ok:= LibraryItemInfoTypePointer(value); ok {
      n.ItemInfo = v
      }
    case "CheckoutInfo":
    if v, ok:= CheckoutInfoTypePointer(value); ok {
      n.CheckoutInfo = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryTransactionType")
        }
        return n
}

  func (s *LibraryTransactionType) FineInfoListRead() *FineInfoListType {
    if s.FineInfoList == nil {
     if v, ok:= FineInfoListTypePointer(FineInfoListType{}); ok {
      s.FineInfoList = v
      }
      }
      return s.FineInfoList
    }
  func (s *LibraryTransactionType) HoldInfoListRead() *HoldInfoListType {
    if s.HoldInfoList == nil {
     if v, ok:= HoldInfoListTypePointer(HoldInfoListType{}); ok {
      s.HoldInfoList = v
      }
      }
      return s.HoldInfoList
    }
  func (s *LibraryTransactionType) ItemInfoRead() *LibraryItemInfoType {
    if s.ItemInfo == nil {
     if v, ok:= LibraryItemInfoTypePointer(LibraryItemInfoType{}); ok {
      s.ItemInfo = v
      }
      }
      return s.ItemInfo
    }
  func (s *LibraryTransactionType) CheckoutInfoRead() *CheckoutInfoType {
    if s.CheckoutInfo == nil {
     if v, ok:= CheckoutInfoTypePointer(CheckoutInfoType{}); ok {
      s.CheckoutInfo = v
      }
      }
      return s.CheckoutInfo
    }

  // XXXXX
func (t *StudentPeriodAttendance) CopyString(key string, value interface{}) *StudentPeriodAttendance {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentPeriodAttendance) CopyClone(key string, value interface{}) *StudentPeriodAttendance {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentPeriodAttendance) Unset(key string) *StudentPeriodAttendance {
        switch key {
  case "Date":
   n.Date = nil
  case "AuditInfo":
   n.AuditInfo = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "AttendanceCode":
   n.AttendanceCode = nil
  case "AttendanceStatus":
   n.AttendanceStatus = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "AttendanceComment":
   n.AttendanceComment = nil
  case "TimetablePeriod":
   n.TimetablePeriod = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "ScheduledActivityRefId":
   n.ScheduledActivityRefId = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "SessionInfoRefId":
   n.SessionInfoRefId = nil
  case "TimeOut":
   n.TimeOut = nil
  case "TimeIn":
   n.TimeIn = nil
  case "RefId":
   n.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentPeriodAttendance")
        }
        return n
}

func (n *StudentPeriodAttendance) SetProperty(key string, value interface{}) *StudentPeriodAttendance {
        if n == nil {
                n, _ = StudentPeriodAttendancePointer(StudentPeriodAttendance{})
        }
        switch key {
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.Date = ((*String)(v))
      }
    case "AuditInfo":
    if v, ok:= AuditInfoTypePointer(value); ok {
      n.AuditInfo = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "AttendanceCode":
    if v, ok:= AttendanceCodeTypePointer(value); ok {
      n.AttendanceCode = v
      }
    case "AttendanceStatus":
        if !CodesetContains(AUCodeSetsAttendanceStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAttendanceStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "AttendanceComment":
    
    if v, ok:= StringPointer(value); ok {
      n.AttendanceComment = ((*String)(v))
      }
    case "TimetablePeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.TimetablePeriod = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "ScheduledActivityRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.ScheduledActivityRefId = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "SessionInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SessionInfoRefId = ((*String)(v))
      }
    case "TimeOut":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeOut = ((*String)(v))
      }
    case "TimeIn":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeIn = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentPeriodAttendance")
        }
        return n
}

  func (s *StudentPeriodAttendance) DateRead() *String {
    if s.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.Date = ((*String)(v))
      }
      }
      return s.Date
    }
  func (s *StudentPeriodAttendance) AuditInfoRead() *AuditInfoType {
    if s.AuditInfo == nil {
     if v, ok:= AuditInfoTypePointer(AuditInfoType{}); ok {
      s.AuditInfo = v
      }
      }
      return s.AuditInfo
    }
  func (s *StudentPeriodAttendance) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentPeriodAttendance) AttendanceCodeRead() *AttendanceCodeType {
    if s.AttendanceCode == nil {
     if v, ok:= AttendanceCodeTypePointer(AttendanceCodeType{}); ok {
      s.AttendanceCode = v
      }
      }
      return s.AttendanceCode
    }
  func (s *StudentPeriodAttendance) AttendanceStatusRead() *AUCodeSetsAttendanceStatusType {
    if s.AttendanceStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
      }
      return s.AttendanceStatus
    }
  func (s *StudentPeriodAttendance) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentPeriodAttendance) AttendanceCommentRead() *String {
    if s.AttendanceComment == nil {
    if v, ok:= StringPointer(""); ok {
      s.AttendanceComment = ((*String)(v))
      }
      }
      return s.AttendanceComment
    }
  func (s *StudentPeriodAttendance) TimetablePeriodRead() *String {
    if s.TimetablePeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimetablePeriod = ((*String)(v))
      }
      }
      return s.TimetablePeriod
    }
  func (s *StudentPeriodAttendance) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *StudentPeriodAttendance) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentPeriodAttendance) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *StudentPeriodAttendance) ScheduledActivityRefIdRead() *String {
    if s.ScheduledActivityRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ScheduledActivityRefId = ((*String)(v))
      }
      }
      return s.ScheduledActivityRefId
    }
  func (s *StudentPeriodAttendance) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *StudentPeriodAttendance) SessionInfoRefIdRead() *String {
    if s.SessionInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SessionInfoRefId = ((*String)(v))
      }
      }
      return s.SessionInfoRefId
    }
  func (s *StudentPeriodAttendance) TimeOutRead() *String {
    if s.TimeOut == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeOut = ((*String)(v))
      }
      }
      return s.TimeOut
    }
  func (s *StudentPeriodAttendance) TimeInRead() *String {
    if s.TimeIn == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeIn = ((*String)(v))
      }
      }
      return s.TimeIn
    }
  func (s *StudentPeriodAttendance) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }

  // XXXXX
func (t *StimulusType) CopyString(key string, value interface{}) *StimulusType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StimulusType) CopyClone(key string, value interface{}) *StimulusType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StimulusType) Unset(key string) *StimulusType {
        switch key {
  case "TextType":
   n.TextType = nil
  case "TextGenre":
   n.TextGenre = nil
  case "TextDescriptor":
   n.TextDescriptor = nil
  case "WordCount":
   n.WordCount = nil
  case "StimulusLocalId":
   n.StimulusLocalId = nil
  case "Content":
   n.Content = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StimulusType")
        }
        return n
}

func (n *StimulusType) SetProperty(key string, value interface{}) *StimulusType {
        if n == nil {
                n, _ = StimulusTypePointer(StimulusType{})
        }
        switch key {
    case "TextType":
    
    if v, ok:= StringPointer(value); ok {
      n.TextType = ((*String)(v))
      }
    case "TextGenre":
    
    if v, ok:= StringPointer(value); ok {
      n.TextGenre = ((*String)(v))
      }
    case "TextDescriptor":
    
    if v, ok:= StringPointer(value); ok {
      n.TextDescriptor = ((*String)(v))
      }
    case "WordCount":
    
    if v, ok:= IntPointer(value); ok {
      n.WordCount = ((*Int)(v))
      }
    case "StimulusLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.StimulusLocalId = ((*LocalIdType)(v))
      }
    case "Content":
    
    if v, ok:= StringPointer(value); ok {
      n.Content = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StimulusType")
        }
        return n
}

  func (s *StimulusType) TextTypeRead() *String {
    if s.TextType == nil {
    if v, ok:= StringPointer(""); ok {
      s.TextType = ((*String)(v))
      }
      }
      return s.TextType
    }
  func (s *StimulusType) TextGenreRead() *String {
    if s.TextGenre == nil {
    if v, ok:= StringPointer(""); ok {
      s.TextGenre = ((*String)(v))
      }
      }
      return s.TextGenre
    }
  func (s *StimulusType) TextDescriptorRead() *String {
    if s.TextDescriptor == nil {
    if v, ok:= StringPointer(""); ok {
      s.TextDescriptor = ((*String)(v))
      }
      }
      return s.TextDescriptor
    }
  func (s *StimulusType) WordCountRead() *Int {
    if s.WordCount == nil {
    if v, ok:= IntPointer(0); ok {
      s.WordCount = ((*Int)(v))
      }
      }
      return s.WordCount
    }
  func (s *StimulusType) StimulusLocalIdRead() *LocalIdType {
    if s.StimulusLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StimulusLocalId = ((*LocalIdType)(v))
      }
      }
      return s.StimulusLocalId
    }
  func (s *StimulusType) ContentRead() *String {
    if s.Content == nil {
    if v, ok:= StringPointer(""); ok {
      s.Content = ((*String)(v))
      }
      }
      return s.Content
    }

  // XXXXX
func (t *RoomInfo) CopyString(key string, value interface{}) *RoomInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *RoomInfo) CopyClone(key string, value interface{}) *RoomInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *RoomInfo) Unset(key string) *RoomInfo {
        switch key {
  case "StaffList":
   n.StaffList = nil
  case "Capacity":
   n.Capacity = nil
  case "RoomNumber":
   n.RoomNumber = nil
  case "Size":
   n.Size = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "HomeroomNumber":
   n.HomeroomNumber = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "PhoneNumber":
   n.PhoneNumber = nil
  case "AvailableForTimetable":
   n.AvailableForTimetable = nil
  case "LocalId":
   n.LocalId = nil
  case "Description":
   n.Description = nil
  case "Building":
   n.Building = nil
  case "RefId":
   n.RefId = nil
  case "RoomType":
   n.RoomType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "RoomInfo")
        }
        return n
}

func (n *RoomInfo) SetProperty(key string, value interface{}) *RoomInfo {
        if n == nil {
                n, _ = RoomInfoPointer(RoomInfo{})
        }
        switch key {
    case "StaffList":
    if v, ok:= StaffListTypePointer(value); ok {
      n.StaffList = v
      }
    case "Capacity":
    
    if v, ok:= IntPointer(value); ok {
      n.Capacity = ((*Int)(v))
      }
    case "RoomNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.RoomNumber = ((*String)(v))
      }
    case "Size":
    
    if v, ok:= FloatPointer(value); ok {
      n.Size = ((*Float)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "HomeroomNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.HomeroomNumber = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "PhoneNumber":
    if v, ok:= PhoneNumberTypePointer(value); ok {
      n.PhoneNumber = v
      }
    case "AvailableForTimetable":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AvailableForTimetable = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "Building":
    
    if v, ok:= StringPointer(value); ok {
      n.Building = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "RoomType":
    
    if v, ok:= StringPointer(value); ok {
      n.RoomType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "RoomInfo")
        }
        return n
}

  func (s *RoomInfo) StaffListRead() *StaffListType {
    if s.StaffList == nil {
     if v, ok:= StaffListTypePointer(StaffListType{}); ok {
      s.StaffList = v
      }
      }
      return s.StaffList
    }
  func (s *RoomInfo) CapacityRead() *Int {
    if s.Capacity == nil {
    if v, ok:= IntPointer(0); ok {
      s.Capacity = ((*Int)(v))
      }
      }
      return s.Capacity
    }
  func (s *RoomInfo) RoomNumberRead() *String {
    if s.RoomNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoomNumber = ((*String)(v))
      }
      }
      return s.RoomNumber
    }
  func (s *RoomInfo) SizeRead() *Float {
    if s.Size == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Size = ((*Float)(v))
      }
      }
      return s.Size
    }
  func (s *RoomInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *RoomInfo) HomeroomNumberRead() *String {
    if s.HomeroomNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.HomeroomNumber = ((*String)(v))
      }
      }
      return s.HomeroomNumber
    }
  func (s *RoomInfo) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *RoomInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *RoomInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *RoomInfo) PhoneNumberRead() *PhoneNumberType {
    if s.PhoneNumber == nil {
     if v, ok:= PhoneNumberTypePointer(PhoneNumberType{}); ok {
      s.PhoneNumber = v
      }
      }
      return s.PhoneNumber
    }
  func (s *RoomInfo) AvailableForTimetableRead() *AUCodeSetsYesOrNoCategoryType {
    if s.AvailableForTimetable == nil {
    if v, ok:= StringPointer(""); ok {
      s.AvailableForTimetable = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.AvailableForTimetable
    }
  func (s *RoomInfo) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *RoomInfo) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *RoomInfo) BuildingRead() *String {
    if s.Building == nil {
    if v, ok:= StringPointer(""); ok {
      s.Building = ((*String)(v))
      }
      }
      return s.Building
    }
  func (s *RoomInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *RoomInfo) RoomTypeRead() *String {
    if s.RoomType == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoomType = ((*String)(v))
      }
      }
      return s.RoomType
    }

  // XXXXX
func (t *ScoreDescriptionType) CopyString(key string, value interface{}) *ScoreDescriptionType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ScoreDescriptionType) CopyClone(key string, value interface{}) *ScoreDescriptionType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ScoreDescriptionType) Unset(key string) *ScoreDescriptionType {
        switch key {
  case "ScoreValue":
   n.ScoreValue = nil
  case "Descriptor":
   n.Descriptor = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScoreDescriptionType")
        }
        return n
}

func (n *ScoreDescriptionType) SetProperty(key string, value interface{}) *ScoreDescriptionType {
        if n == nil {
                n, _ = ScoreDescriptionTypePointer(ScoreDescriptionType{})
        }
        switch key {
    case "ScoreValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.ScoreValue = ((*Float)(v))
      }
    case "Descriptor":
    
    if v, ok:= StringPointer(value); ok {
      n.Descriptor = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScoreDescriptionType")
        }
        return n
}

  func (s *ScoreDescriptionType) ScoreValueRead() *Float {
    if s.ScoreValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ScoreValue = ((*Float)(v))
      }
      }
      return s.ScoreValue
    }
  func (s *ScoreDescriptionType) DescriptorRead() *String {
    if s.Descriptor == nil {
    if v, ok:= StringPointer(""); ok {
      s.Descriptor = ((*String)(v))
      }
      }
      return s.Descriptor
    }

  // XXXXX
func (t *TermInfo) CopyString(key string, value interface{}) *TermInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TermInfo) CopyClone(key string, value interface{}) *TermInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TermInfo) Unset(key string) *TermInfo {
        switch key {
  case "SchedulingTerm":
   n.SchedulingTerm = nil
  case "Description":
   n.Description = nil
  case "StartDate":
   n.StartDate = nil
  case "AttendanceTerm":
   n.AttendanceTerm = nil
  case "RefId":
   n.RefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "EndDate":
   n.EndDate = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "TermSpan":
   n.TermSpan = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "RelativeDuration":
   n.RelativeDuration = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "TermCode":
   n.TermCode = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "MarkingTerm":
   n.MarkingTerm = nil
  case "Track":
   n.Track = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TermInfo")
        }
        return n
}

func (n *TermInfo) SetProperty(key string, value interface{}) *TermInfo {
        if n == nil {
                n, _ = TermInfoPointer(TermInfo{})
        }
        switch key {
    case "SchedulingTerm":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.SchedulingTerm = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.StartDate = ((*String)(v))
      }
    case "AttendanceTerm":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AttendanceTerm = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EndDate = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "TermSpan":
        if !CodesetContains(AUCodeSetsSessionTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSessionTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.TermSpan = ((*AUCodeSetsSessionTypeType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "RelativeDuration":
    
    if v, ok:= FloatPointer(value); ok {
      n.RelativeDuration = ((*Float)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "TermCode":
    
    if v, ok:= StringPointer(value); ok {
      n.TermCode = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "MarkingTerm":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.MarkingTerm = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Track":
    
    if v, ok:= StringPointer(value); ok {
      n.Track = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TermInfo")
        }
        return n
}

  func (s *TermInfo) SchedulingTermRead() *AUCodeSetsYesOrNoCategoryType {
    if s.SchedulingTerm == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchedulingTerm = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.SchedulingTerm
    }
  func (s *TermInfo) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *TermInfo) StartDateRead() *String {
    if s.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartDate = ((*String)(v))
      }
      }
      return s.StartDate
    }
  func (s *TermInfo) AttendanceTermRead() *AUCodeSetsYesOrNoCategoryType {
    if s.AttendanceTerm == nil {
    if v, ok:= StringPointer(""); ok {
      s.AttendanceTerm = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.AttendanceTerm
    }
  func (s *TermInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *TermInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *TermInfo) EndDateRead() *String {
    if s.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndDate = ((*String)(v))
      }
      }
      return s.EndDate
    }
  func (s *TermInfo) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *TermInfo) TermSpanRead() *AUCodeSetsSessionTypeType {
    if s.TermSpan == nil {
    if v, ok:= StringPointer(""); ok {
      s.TermSpan = ((*AUCodeSetsSessionTypeType)(v))
      }
      }
      return s.TermSpan
    }
  func (s *TermInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *TermInfo) RelativeDurationRead() *Float {
    if s.RelativeDuration == nil {
    if v, ok:= FloatPointer(0); ok {
      s.RelativeDuration = ((*Float)(v))
      }
      }
      return s.RelativeDuration
    }
  func (s *TermInfo) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *TermInfo) TermCodeRead() *String {
    if s.TermCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.TermCode = ((*String)(v))
      }
      }
      return s.TermCode
    }
  func (s *TermInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *TermInfo) MarkingTermRead() *AUCodeSetsYesOrNoCategoryType {
    if s.MarkingTerm == nil {
    if v, ok:= StringPointer(""); ok {
      s.MarkingTerm = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.MarkingTerm
    }
  func (s *TermInfo) TrackRead() *String {
    if s.Track == nil {
    if v, ok:= StringPointer(""); ok {
      s.Track = ((*String)(v))
      }
      }
      return s.Track
    }

  // XXXXX
func (t *StatisticalAreaType) CopyString(key string, value interface{}) *StatisticalAreaType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StatisticalAreaType) CopyClone(key string, value interface{}) *StatisticalAreaType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StatisticalAreaType) Unset(key string) *StatisticalAreaType {
        switch key {
  case "Value":
   n.Value = nil
  case "SpatialUnitType":
   n.SpatialUnitType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StatisticalAreaType")
        }
        return n
}

func (n *StatisticalAreaType) SetProperty(key string, value interface{}) *StatisticalAreaType {
        if n == nil {
                n, _ = StatisticalAreaTypePointer(StatisticalAreaType{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "SpatialUnitType":
    
    if v, ok:= StringPointer(value); ok {
      n.SpatialUnitType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StatisticalAreaType")
        }
        return n
}

  func (s *StatisticalAreaType) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *StatisticalAreaType) SpatialUnitTypeRead() *String {
    if s.SpatialUnitType == nil {
    if v, ok:= StringPointer(""); ok {
      s.SpatialUnitType = ((*String)(v))
      }
      }
      return s.SpatialUnitType
    }

  // XXXXX
func (t *PersonPicture_ParentObjectRefId) CopyString(key string, value interface{}) *PersonPicture_ParentObjectRefId {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PersonPicture_ParentObjectRefId) CopyClone(key string, value interface{}) *PersonPicture_ParentObjectRefId {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PersonPicture_ParentObjectRefId) Unset(key string) *PersonPicture_ParentObjectRefId {
        switch key {
  case "Value":
   n.Value = nil
  case "SIF_RefObject":
   n.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonPicture_ParentObjectRefId")
        }
        return n
}

func (n *PersonPicture_ParentObjectRefId) SetProperty(key string, value interface{}) *PersonPicture_ParentObjectRefId {
        if n == nil {
                n, _ = PersonPicture_ParentObjectRefIdPointer(PersonPicture_ParentObjectRefId{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonPicture_ParentObjectRefId")
        }
        return n
}

  func (s *PersonPicture_ParentObjectRefId) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *PersonPicture_ParentObjectRefId) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }

  // XXXXX
func (t *FQReportingType) CopyString(key string, value interface{}) *FQReportingType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *FQReportingType) CopyClone(key string, value interface{}) *FQReportingType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *FQReportingType) Unset(key string) *FQReportingType {
        switch key {
  case "EntityLevel":
   n.EntityLevel = nil
  case "EntityContact":
   n.EntityContact = nil
  case "FQContextualQuestionList":
   n.FQContextualQuestionList = nil
  case "StateProvinceId":
   n.StateProvinceId = nil
  case "FQItemList":
   n.FQItemList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "AGRuleList":
   n.AGRuleList = nil
  case "CommonwealthId":
   n.CommonwealthId = nil
  case "ACARAId":
   n.ACARAId = nil
  case "LocalId":
   n.LocalId = nil
  case "EntityName":
   n.EntityName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FQReportingType")
        }
        return n
}

func (n *FQReportingType) SetProperty(key string, value interface{}) *FQReportingType {
        if n == nil {
                n, _ = FQReportingTypePointer(FQReportingType{})
        }
        switch key {
    case "EntityLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.EntityLevel = ((*String)(v))
      }
    case "EntityContact":
    if v, ok:= EntityContactInfoTypePointer(value); ok {
      n.EntityContact = v
      }
    case "FQContextualQuestionList":
    if v, ok:= FQContextualQuestionListTypePointer(value); ok {
      n.FQContextualQuestionList = v
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "FQItemList":
    if v, ok:= FQItemListTypePointer(value); ok {
      n.FQItemList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "AGRuleList":
    if v, ok:= AGRuleListTypePointer(value); ok {
      n.AGRuleList = v
      }
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.CommonwealthId = ((*String)(v))
      }
    case "ACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.ACARAId = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "EntityName":
    
    if v, ok:= StringPointer(value); ok {
      n.EntityName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FQReportingType")
        }
        return n
}

  func (s *FQReportingType) EntityLevelRead() *String {
    if s.EntityLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.EntityLevel = ((*String)(v))
      }
      }
      return s.EntityLevel
    }
  func (s *FQReportingType) EntityContactRead() *EntityContactInfoType {
    if s.EntityContact == nil {
     if v, ok:= EntityContactInfoTypePointer(EntityContactInfoType{}); ok {
      s.EntityContact = v
      }
      }
      return s.EntityContact
    }
  func (s *FQReportingType) FQContextualQuestionListRead() *FQContextualQuestionListType {
    if s.FQContextualQuestionList == nil {
     if v, ok:= FQContextualQuestionListTypePointer(FQContextualQuestionListType{}); ok {
      s.FQContextualQuestionList = v
      }
      }
      return s.FQContextualQuestionList
    }
  func (s *FQReportingType) StateProvinceIdRead() *StateProvinceIdType {
    if s.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.StateProvinceId
    }
  func (s *FQReportingType) FQItemListRead() *FQItemListType {
    if s.FQItemList == nil {
     if v, ok:= FQItemListTypePointer(FQItemListType{}); ok {
      s.FQItemList = v
      }
      }
      return s.FQItemList
    }
  func (s *FQReportingType) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *FQReportingType) AGRuleListRead() *AGRuleListType {
    if s.AGRuleList == nil {
     if v, ok:= AGRuleListTypePointer(AGRuleListType{}); ok {
      s.AGRuleList = v
      }
      }
      return s.AGRuleList
    }
  func (s *FQReportingType) CommonwealthIdRead() *String {
    if s.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.CommonwealthId = ((*String)(v))
      }
      }
      return s.CommonwealthId
    }
  func (s *FQReportingType) ACARAIdRead() *String {
    if s.ACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ACARAId = ((*String)(v))
      }
      }
      return s.ACARAId
    }
  func (s *FQReportingType) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *FQReportingType) EntityNameRead() *String {
    if s.EntityName == nil {
    if v, ok:= StringPointer(""); ok {
      s.EntityName = ((*String)(v))
      }
      }
      return s.EntityName
    }

  // XXXXX
func (t *GenericRubricType) CopyString(key string, value interface{}) *GenericRubricType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *GenericRubricType) CopyClone(key string, value interface{}) *GenericRubricType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *GenericRubricType) Unset(key string) *GenericRubricType {
        switch key {
  case "RubricType":
   n.RubricType = nil
  case "ScoreList":
   n.ScoreList = nil
  case "Descriptor":
   n.Descriptor = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GenericRubricType")
        }
        return n
}

func (n *GenericRubricType) SetProperty(key string, value interface{}) *GenericRubricType {
        if n == nil {
                n, _ = GenericRubricTypePointer(GenericRubricType{})
        }
        switch key {
    case "RubricType":
    
    if v, ok:= StringPointer(value); ok {
      n.RubricType = ((*String)(v))
      }
    case "ScoreList":
    if v, ok:= ScoreListTypePointer(value); ok {
      n.ScoreList = v
      }
    case "Descriptor":
    
    if v, ok:= StringPointer(value); ok {
      n.Descriptor = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GenericRubricType")
        }
        return n
}

  func (s *GenericRubricType) RubricTypeRead() *String {
    if s.RubricType == nil {
    if v, ok:= StringPointer(""); ok {
      s.RubricType = ((*String)(v))
      }
      }
      return s.RubricType
    }
  func (s *GenericRubricType) ScoreListRead() *ScoreListType {
    if s.ScoreList == nil {
     if v, ok:= ScoreListTypePointer(ScoreListType{}); ok {
      s.ScoreList = v
      }
      }
      return s.ScoreList
    }
  func (s *GenericRubricType) DescriptorRead() *String {
    if s.Descriptor == nil {
    if v, ok:= StringPointer(""); ok {
      s.Descriptor = ((*String)(v))
      }
      }
      return s.Descriptor
    }

  // XXXXX
func (t *BaseNameType) CopyString(key string, value interface{}) *BaseNameType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *BaseNameType) CopyClone(key string, value interface{}) *BaseNameType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *BaseNameType) Unset(key string) *BaseNameType {
        switch key {
  case "Title":
   n.Title = nil
  case "FamilyName":
   n.FamilyName = nil
  case "GivenName":
   n.GivenName = nil
  case "PreferredFamilyNameFirst":
   n.PreferredFamilyNameFirst = nil
  case "Suffix":
   n.Suffix = nil
  case "PreferredGivenName":
   n.PreferredGivenName = nil
  case "FamilyNameFirst":
   n.FamilyNameFirst = nil
  case "MiddleName":
   n.MiddleName = nil
  case "FullName":
   n.FullName = nil
  case "PreferredFamilyName":
   n.PreferredFamilyName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "BaseNameType")
        }
        return n
}

func (n *BaseNameType) SetProperty(key string, value interface{}) *BaseNameType {
        if n == nil {
                n, _ = BaseNameTypePointer(BaseNameType{})
        }
        switch key {
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.Title = ((*String)(v))
      }
    case "FamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.FamilyName = ((*String)(v))
      }
    case "GivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.GivenName = ((*String)(v))
      }
    case "PreferredFamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Suffix":
    
    if v, ok:= StringPointer(value); ok {
      n.Suffix = ((*String)(v))
      }
    case "PreferredGivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.PreferredGivenName = ((*String)(v))
      }
    case "FamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "MiddleName":
    
    if v, ok:= StringPointer(value); ok {
      n.MiddleName = ((*String)(v))
      }
    case "FullName":
    
    if v, ok:= StringPointer(value); ok {
      n.FullName = ((*String)(v))
      }
    case "PreferredFamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.PreferredFamilyName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "BaseNameType")
        }
        return n
}

  func (s *BaseNameType) TitleRead() *String {
    if s.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.Title = ((*String)(v))
      }
      }
      return s.Title
    }
  func (s *BaseNameType) FamilyNameRead() *String {
    if s.FamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.FamilyName = ((*String)(v))
      }
      }
      return s.FamilyName
    }
  func (s *BaseNameType) GivenNameRead() *String {
    if s.GivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.GivenName = ((*String)(v))
      }
      }
      return s.GivenName
    }
  func (s *BaseNameType) PreferredFamilyNameFirstRead() *AUCodeSetsYesOrNoCategoryType {
    if s.PreferredFamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.PreferredFamilyNameFirst
    }
  func (s *BaseNameType) SuffixRead() *String {
    if s.Suffix == nil {
    if v, ok:= StringPointer(""); ok {
      s.Suffix = ((*String)(v))
      }
      }
      return s.Suffix
    }
  func (s *BaseNameType) PreferredGivenNameRead() *String {
    if s.PreferredGivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreferredGivenName = ((*String)(v))
      }
      }
      return s.PreferredGivenName
    }
  func (s *BaseNameType) FamilyNameFirstRead() *AUCodeSetsYesOrNoCategoryType {
    if s.FamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.FamilyNameFirst
    }
  func (s *BaseNameType) MiddleNameRead() *String {
    if s.MiddleName == nil {
    if v, ok:= StringPointer(""); ok {
      s.MiddleName = ((*String)(v))
      }
      }
      return s.MiddleName
    }
  func (s *BaseNameType) FullNameRead() *String {
    if s.FullName == nil {
    if v, ok:= StringPointer(""); ok {
      s.FullName = ((*String)(v))
      }
      }
      return s.FullName
    }
  func (s *BaseNameType) PreferredFamilyNameRead() *String {
    if s.PreferredFamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreferredFamilyName = ((*String)(v))
      }
      }
      return s.PreferredFamilyName
    }

  // XXXXX
func (t *AGParentType) CopyString(key string, value interface{}) *AGParentType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AGParentType) CopyClone(key string, value interface{}) *AGParentType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AGParentType) Unset(key string) *AGParentType {
        switch key {
  case "ParentName":
   n.ParentName = nil
  case "AddressSameAsStudent":
   n.AddressSameAsStudent = nil
  case "ParentAddress":
   n.ParentAddress = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGParentType")
        }
        return n
}

func (n *AGParentType) SetProperty(key string, value interface{}) *AGParentType {
        if n == nil {
                n, _ = AGParentTypePointer(AGParentType{})
        }
        switch key {
    case "ParentName":
    if v, ok:= NameOfRecordTypePointer(value); ok {
      n.ParentName = v
      }
    case "AddressSameAsStudent":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AddressSameAsStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ParentAddress":
    if v, ok:= AddressTypePointer(value); ok {
      n.ParentAddress = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGParentType")
        }
        return n
}

  func (s *AGParentType) ParentNameRead() *NameOfRecordType {
    if s.ParentName == nil {
     if v, ok:= NameOfRecordTypePointer(NameOfRecordType{}); ok {
      s.ParentName = v
      }
      }
      return s.ParentName
    }
  func (s *AGParentType) AddressSameAsStudentRead() *AUCodeSetsYesOrNoCategoryType {
    if s.AddressSameAsStudent == nil {
    if v, ok:= StringPointer(""); ok {
      s.AddressSameAsStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.AddressSameAsStudent
    }
  func (s *AGParentType) ParentAddressRead() *AddressType {
    if s.ParentAddress == nil {
     if v, ok:= AddressTypePointer(AddressType{}); ok {
      s.ParentAddress = v
      }
      }
      return s.ParentAddress
    }

  // XXXXX
func (t *ValidLetterMarkType) CopyString(key string, value interface{}) *ValidLetterMarkType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ValidLetterMarkType) CopyClone(key string, value interface{}) *ValidLetterMarkType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ValidLetterMarkType) Unset(key string) *ValidLetterMarkType {
        switch key {
  case "Description":
   n.Description = nil
  case "NumericEquivalent":
   n.NumericEquivalent = nil
  case "Code":
   n.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ValidLetterMarkType")
        }
        return n
}

func (n *ValidLetterMarkType) SetProperty(key string, value interface{}) *ValidLetterMarkType {
        if n == nil {
                n, _ = ValidLetterMarkTypePointer(ValidLetterMarkType{})
        }
        switch key {
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "NumericEquivalent":
    
    if v, ok:= FloatPointer(value); ok {
      n.NumericEquivalent = ((*Float)(v))
      }
    case "Code":
    
    if v, ok:= StringPointer(value); ok {
      n.Code = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ValidLetterMarkType")
        }
        return n
}

  func (s *ValidLetterMarkType) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *ValidLetterMarkType) NumericEquivalentRead() *Float {
    if s.NumericEquivalent == nil {
    if v, ok:= FloatPointer(0); ok {
      s.NumericEquivalent = ((*Float)(v))
      }
      }
      return s.NumericEquivalent
    }
  func (s *ValidLetterMarkType) CodeRead() *String {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*String)(v))
      }
      }
      return s.Code
    }

  // XXXXX
func (t *CodeFrameTestItemType) CopyString(key string, value interface{}) *CodeFrameTestItemType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CodeFrameTestItemType) CopyClone(key string, value interface{}) *CodeFrameTestItemType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CodeFrameTestItemType) Unset(key string) *CodeFrameTestItemType {
        switch key {
  case "TestItemRefId":
   n.TestItemRefId = nil
  case "TestItemContent":
   n.TestItemContent = nil
  case "SequenceNumber":
   n.SequenceNumber = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CodeFrameTestItemType")
        }
        return n
}

func (n *CodeFrameTestItemType) SetProperty(key string, value interface{}) *CodeFrameTestItemType {
        if n == nil {
                n, _ = CodeFrameTestItemTypePointer(CodeFrameTestItemType{})
        }
        switch key {
    case "TestItemRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TestItemRefId = ((*String)(v))
      }
    case "TestItemContent":
    if v, ok:= NAPTestItemContentTypePointer(value); ok {
      n.TestItemContent = v
      }
    case "SequenceNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.SequenceNumber = ((*Int)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CodeFrameTestItemType")
        }
        return n
}

  func (s *CodeFrameTestItemType) TestItemRefIdRead() *String {
    if s.TestItemRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TestItemRefId = ((*String)(v))
      }
      }
      return s.TestItemRefId
    }
  func (s *CodeFrameTestItemType) TestItemContentRead() *NAPTestItemContentType {
    if s.TestItemContent == nil {
     if v, ok:= NAPTestItemContentTypePointer(NAPTestItemContentType{}); ok {
      s.TestItemContent = v
      }
      }
      return s.TestItemContent
    }
  func (s *CodeFrameTestItemType) SequenceNumberRead() *Int {
    if s.SequenceNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.SequenceNumber = ((*Int)(v))
      }
      }
      return s.SequenceNumber
    }

  // XXXXX
func (t *TeachingGroupPeriodType) CopyString(key string, value interface{}) *TeachingGroupPeriodType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TeachingGroupPeriodType) CopyClone(key string, value interface{}) *TeachingGroupPeriodType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TeachingGroupPeriodType) Unset(key string) *TeachingGroupPeriodType {
        switch key {
  case "RoomNumber":
   n.RoomNumber = nil
  case "StartTime":
   n.StartTime = nil
  case "DayId":
   n.DayId = nil
  case "PeriodId":
   n.PeriodId = nil
  case "StaffLocalId":
   n.StaffLocalId = nil
  case "CellType":
   n.CellType = nil
  case "TimeTableCellRefId":
   n.TimeTableCellRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupPeriodType")
        }
        return n
}

func (n *TeachingGroupPeriodType) SetProperty(key string, value interface{}) *TeachingGroupPeriodType {
        if n == nil {
                n, _ = TeachingGroupPeriodTypePointer(TeachingGroupPeriodType{})
        }
        switch key {
    case "RoomNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.RoomNumber = ((*HomeroomNumberType)(v))
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.StartTime = ((*String)(v))
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.DayId = ((*LocalIdType)(v))
      }
    case "PeriodId":
    
    if v, ok:= StringPointer(value); ok {
      n.PeriodId = ((*LocalIdType)(v))
      }
    case "StaffLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffLocalId = ((*LocalIdType)(v))
      }
    case "CellType":
    
    if v, ok:= StringPointer(value); ok {
      n.CellType = ((*String)(v))
      }
    case "TimeTableCellRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableCellRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupPeriodType")
        }
        return n
}

  func (s *TeachingGroupPeriodType) RoomNumberRead() *HomeroomNumberType {
    if s.RoomNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoomNumber = ((*HomeroomNumberType)(v))
      }
      }
      return s.RoomNumber
    }
  func (s *TeachingGroupPeriodType) StartTimeRead() *String {
    if s.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartTime = ((*String)(v))
      }
      }
      return s.StartTime
    }
  func (s *TeachingGroupPeriodType) DayIdRead() *LocalIdType {
    if s.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.DayId = ((*LocalIdType)(v))
      }
      }
      return s.DayId
    }
  func (s *TeachingGroupPeriodType) PeriodIdRead() *LocalIdType {
    if s.PeriodId == nil {
    if v, ok:= StringPointer(""); ok {
      s.PeriodId = ((*LocalIdType)(v))
      }
      }
      return s.PeriodId
    }
  func (s *TeachingGroupPeriodType) StaffLocalIdRead() *LocalIdType {
    if s.StaffLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffLocalId = ((*LocalIdType)(v))
      }
      }
      return s.StaffLocalId
    }
  func (s *TeachingGroupPeriodType) CellTypeRead() *String {
    if s.CellType == nil {
    if v, ok:= StringPointer(""); ok {
      s.CellType = ((*String)(v))
      }
      }
      return s.CellType
    }
  func (s *TeachingGroupPeriodType) TimeTableCellRefIdRead() *String {
    if s.TimeTableCellRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableCellRefId = ((*String)(v))
      }
      }
      return s.TimeTableCellRefId
    }

  // XXXXX
func (t *StaffAssignmentMostRecentContainerType) CopyString(key string, value interface{}) *StaffAssignmentMostRecentContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StaffAssignmentMostRecentContainerType) CopyClone(key string, value interface{}) *StaffAssignmentMostRecentContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StaffAssignmentMostRecentContainerType) Unset(key string) *StaffAssignmentMostRecentContainerType {
        switch key {
  case "PrimaryFTE":
   n.PrimaryFTE = nil
  case "SecondaryFTE":
   n.SecondaryFTE = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffAssignmentMostRecentContainerType")
        }
        return n
}

func (n *StaffAssignmentMostRecentContainerType) SetProperty(key string, value interface{}) *StaffAssignmentMostRecentContainerType {
        if n == nil {
                n, _ = StaffAssignmentMostRecentContainerTypePointer(StaffAssignmentMostRecentContainerType{})
        }
        switch key {
    case "PrimaryFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.PrimaryFTE = ((*Float)(v))
      }
    case "SecondaryFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.SecondaryFTE = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffAssignmentMostRecentContainerType")
        }
        return n
}

  func (s *StaffAssignmentMostRecentContainerType) PrimaryFTERead() *Float {
    if s.PrimaryFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.PrimaryFTE = ((*Float)(v))
      }
      }
      return s.PrimaryFTE
    }
  func (s *StaffAssignmentMostRecentContainerType) SecondaryFTERead() *Float {
    if s.SecondaryFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.SecondaryFTE = ((*Float)(v))
      }
      }
      return s.SecondaryFTE
    }

  // XXXXX
func (t *Journal) CopyString(key string, value interface{}) *Journal {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *Journal) CopyClone(key string, value interface{}) *Journal {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *Journal) Unset(key string) *Journal {
        switch key {
  case "ApprovedBy":
   n.ApprovedBy = nil
  case "LocalId":
   n.LocalId = nil
  case "CreditAccountCode":
   n.CreditAccountCode = nil
  case "OriginatingTransactionRefId":
   n.OriginatingTransactionRefId = nil
  case "CreatedDate":
   n.CreatedDate = nil
  case "RefId":
   n.RefId = nil
  case "GSTCodeReplacement":
   n.GSTCodeReplacement = nil
  case "GSTCodeOriginal":
   n.GSTCodeOriginal = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "DebitAccountCode":
   n.DebitAccountCode = nil
  case "DebitFinancialAccountRefId":
   n.DebitFinancialAccountRefId = nil
  case "ApprovedDate":
   n.ApprovedDate = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "CreditFinancialAccountRefId":
   n.CreditFinancialAccountRefId = nil
  case "JournalAdjustmentList":
   n.JournalAdjustmentList = nil
  case "Amount":
   n.Amount = nil
  case "CreatedBy":
   n.CreatedBy = nil
  case "Note":
   n.Note = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Journal")
        }
        return n
}

func (n *Journal) SetProperty(key string, value interface{}) *Journal {
        if n == nil {
                n, _ = JournalPointer(Journal{})
        }
        switch key {
    case "ApprovedBy":
    
    if v, ok:= StringPointer(value); ok {
      n.ApprovedBy = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "CreditAccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.CreditAccountCode = ((*String)(v))
      }
    case "OriginatingTransactionRefId":
    if v, ok:= Journal_OriginatingTransactionRefIdPointer(value); ok {
      n.OriginatingTransactionRefId = v
      }
    case "CreatedDate":
    
    if v, ok:= StringPointer(value); ok {
      n.CreatedDate = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "GSTCodeReplacement":
    
    if v, ok:= StringPointer(value); ok {
      n.GSTCodeReplacement = ((*String)(v))
      }
    case "GSTCodeOriginal":
    
    if v, ok:= StringPointer(value); ok {
      n.GSTCodeOriginal = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "DebitAccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.DebitAccountCode = ((*String)(v))
      }
    case "DebitFinancialAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.DebitFinancialAccountRefId = ((*String)(v))
      }
    case "ApprovedDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ApprovedDate = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "CreditFinancialAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.CreditFinancialAccountRefId = ((*String)(v))
      }
    case "JournalAdjustmentList":
    if v, ok:= JournalAdjustmentListTypePointer(value); ok {
      n.JournalAdjustmentList = v
      }
    case "Amount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.Amount = v
      }
    case "CreatedBy":
    
    if v, ok:= StringPointer(value); ok {
      n.CreatedBy = ((*String)(v))
      }
    case "Note":
    
    if v, ok:= StringPointer(value); ok {
      n.Note = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Journal")
        }
        return n
}

  func (s *Journal) ApprovedByRead() *String {
    if s.ApprovedBy == nil {
    if v, ok:= StringPointer(""); ok {
      s.ApprovedBy = ((*String)(v))
      }
      }
      return s.ApprovedBy
    }
  func (s *Journal) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *Journal) CreditAccountCodeRead() *String {
    if s.CreditAccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.CreditAccountCode = ((*String)(v))
      }
      }
      return s.CreditAccountCode
    }
  func (s *Journal) OriginatingTransactionRefIdRead() *Journal_OriginatingTransactionRefId {
    if s.OriginatingTransactionRefId == nil {
     if v, ok:= Journal_OriginatingTransactionRefIdPointer(Journal_OriginatingTransactionRefId{}); ok {
      s.OriginatingTransactionRefId = v
      }
      }
      return s.OriginatingTransactionRefId
    }
  func (s *Journal) CreatedDateRead() *String {
    if s.CreatedDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.CreatedDate = ((*String)(v))
      }
      }
      return s.CreatedDate
    }
  func (s *Journal) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *Journal) GSTCodeReplacementRead() *String {
    if s.GSTCodeReplacement == nil {
    if v, ok:= StringPointer(""); ok {
      s.GSTCodeReplacement = ((*String)(v))
      }
      }
      return s.GSTCodeReplacement
    }
  func (s *Journal) GSTCodeOriginalRead() *String {
    if s.GSTCodeOriginal == nil {
    if v, ok:= StringPointer(""); ok {
      s.GSTCodeOriginal = ((*String)(v))
      }
      }
      return s.GSTCodeOriginal
    }
  func (s *Journal) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *Journal) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *Journal) DebitAccountCodeRead() *String {
    if s.DebitAccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.DebitAccountCode = ((*String)(v))
      }
      }
      return s.DebitAccountCode
    }
  func (s *Journal) DebitFinancialAccountRefIdRead() *String {
    if s.DebitFinancialAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.DebitFinancialAccountRefId = ((*String)(v))
      }
      }
      return s.DebitFinancialAccountRefId
    }
  func (s *Journal) ApprovedDateRead() *String {
    if s.ApprovedDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ApprovedDate = ((*String)(v))
      }
      }
      return s.ApprovedDate
    }
  func (s *Journal) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *Journal) CreditFinancialAccountRefIdRead() *String {
    if s.CreditFinancialAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.CreditFinancialAccountRefId = ((*String)(v))
      }
      }
      return s.CreditFinancialAccountRefId
    }
  func (s *Journal) JournalAdjustmentListRead() *JournalAdjustmentListType {
    if s.JournalAdjustmentList == nil {
     if v, ok:= JournalAdjustmentListTypePointer(JournalAdjustmentListType{}); ok {
      s.JournalAdjustmentList = v
      }
      }
      return s.JournalAdjustmentList
    }
  func (s *Journal) AmountRead() *MonetaryAmountType {
    if s.Amount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.Amount = v
      }
      }
      return s.Amount
    }
  func (s *Journal) CreatedByRead() *String {
    if s.CreatedBy == nil {
    if v, ok:= StringPointer(""); ok {
      s.CreatedBy = ((*String)(v))
      }
      }
      return s.CreatedBy
    }
  func (s *Journal) NoteRead() *String {
    if s.Note == nil {
    if v, ok:= StringPointer(""); ok {
      s.Note = ((*String)(v))
      }
      }
      return s.Note
    }

  // XXXXX
func (t *ActivityTimeType_Duration) CopyString(key string, value interface{}) *ActivityTimeType_Duration {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ActivityTimeType_Duration) CopyClone(key string, value interface{}) *ActivityTimeType_Duration {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ActivityTimeType_Duration) Unset(key string) *ActivityTimeType_Duration {
        switch key {
  case "Value":
   n.Value = nil
  case "Units":
   n.Units = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ActivityTimeType_Duration")
        }
        return n
}

func (n *ActivityTimeType_Duration) SetProperty(key string, value interface{}) *ActivityTimeType_Duration {
        if n == nil {
                n, _ = ActivityTimeType_DurationPointer(ActivityTimeType_Duration{})
        }
        switch key {
    case "Value":
    
    if v, ok:= IntPointer(value); ok {
      n.Value = ((*Int)(v))
      }
    case "Units":
    
    if v, ok:= StringPointer(value); ok {
      n.Units = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ActivityTimeType_Duration")
        }
        return n
}

  func (s *ActivityTimeType_Duration) ValueRead() *Int {
    if s.Value == nil {
    if v, ok:= IntPointer(0); ok {
      s.Value = ((*Int)(v))
      }
      }
      return s.Value
    }
  func (s *ActivityTimeType_Duration) UnitsRead() *String {
    if s.Units == nil {
    if v, ok:= StringPointer(""); ok {
      s.Units = ((*String)(v))
      }
      }
      return s.Units
    }

  // XXXXX
func (t *LifeCycleType_Creator) CopyString(key string, value interface{}) *LifeCycleType_Creator {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LifeCycleType_Creator) CopyClone(key string, value interface{}) *LifeCycleType_Creator {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LifeCycleType_Creator) Unset(key string) *LifeCycleType_Creator {
        switch key {
  case "Name":
   n.Name = nil
  case "ID":
   n.ID = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType_Creator")
        }
        return n
}

func (n *LifeCycleType_Creator) SetProperty(key string, value interface{}) *LifeCycleType_Creator {
        if n == nil {
                n, _ = LifeCycleType_CreatorPointer(LifeCycleType_Creator{})
        }
        switch key {
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.Name = ((*String)(v))
      }
    case "ID":
    
    if v, ok:= StringPointer(value); ok {
      n.ID = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType_Creator")
        }
        return n
}

  func (s *LifeCycleType_Creator) NameRead() *String {
    if s.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.Name = ((*String)(v))
      }
      }
      return s.Name
    }
  func (s *LifeCycleType_Creator) IDRead() *String {
    if s.ID == nil {
    if v, ok:= StringPointer(""); ok {
      s.ID = ((*String)(v))
      }
      }
      return s.ID
    }

  // XXXXX
func (t *LearningStandardItem) CopyString(key string, value interface{}) *LearningStandardItem {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LearningStandardItem) CopyClone(key string, value interface{}) *LearningStandardItem {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LearningStandardItem) Unset(key string) *LearningStandardItem {
        switch key {
  case "StandardHierarchyLevel":
   n.StandardHierarchyLevel = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "LearningStandardDocumentRefId":
   n.LearningStandardDocumentRefId = nil
  case "Level4":
   n.Level4 = nil
  case "PredecessorItems":
   n.PredecessorItems = nil
  case "StatementCodes":
   n.StatementCodes = nil
  case "StandardIdentifier":
   n.StandardIdentifier = nil
  case "RelatedLearningStandardItems":
   n.RelatedLearningStandardItems = nil
  case "Statements":
   n.Statements = nil
  case "RefId":
   n.RefId = nil
  case "Resources":
   n.Resources = nil
  case "ACStrandSubjectArea":
   n.ACStrandSubjectArea = nil
  case "YearLevels":
   n.YearLevels = nil
  case "StandardSettingBody":
   n.StandardSettingBody = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "Level5":
   n.Level5 = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningStandardItem")
        }
        return n
}

func (n *LearningStandardItem) SetProperty(key string, value interface{}) *LearningStandardItem {
        if n == nil {
                n, _ = LearningStandardItemPointer(LearningStandardItem{})
        }
        switch key {
    case "StandardHierarchyLevel":
    if v, ok:= StandardHierarchyLevelTypePointer(value); ok {
      n.StandardHierarchyLevel = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "LearningStandardDocumentRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.LearningStandardDocumentRefId = ((*String)(v))
      }
    case "Level4":
    
    if v, ok:= StringPointer(value); ok {
      n.Level4 = ((*String)(v))
      }
    case "PredecessorItems":
    if v, ok:= LearningStandardsTypePointer(value); ok {
      n.PredecessorItems = v
      }
    case "StatementCodes":
    if v, ok:= StatementCodesTypePointer(value); ok {
      n.StatementCodes = v
      }
    case "StandardIdentifier":
    if v, ok:= StandardIdentifierTypePointer(value); ok {
      n.StandardIdentifier = v
      }
    case "RelatedLearningStandardItems":
    if v, ok:= RelatedLearningStandardItemRefIdListTypePointer(value); ok {
      n.RelatedLearningStandardItems = v
      }
    case "Statements":
    if v, ok:= StatementsTypePointer(value); ok {
      n.Statements = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "Resources":
    if v, ok:= LResourcesTypePointer(value); ok {
      n.Resources = v
      }
    case "ACStrandSubjectArea":
    if v, ok:= ACStrandSubjectAreaTypePointer(value); ok {
      n.ACStrandSubjectArea = v
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.YearLevels = v
      }
    case "StandardSettingBody":
    if v, ok:= StandardsSettingBodyTypePointer(value); ok {
      n.StandardSettingBody = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "Level5":
    
    if v, ok:= StringPointer(value); ok {
      n.Level5 = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningStandardItem")
        }
        return n
}

  func (s *LearningStandardItem) StandardHierarchyLevelRead() *StandardHierarchyLevelType {
    if s.StandardHierarchyLevel == nil {
     if v, ok:= StandardHierarchyLevelTypePointer(StandardHierarchyLevelType{}); ok {
      s.StandardHierarchyLevel = v
      }
      }
      return s.StandardHierarchyLevel
    }
  func (s *LearningStandardItem) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *LearningStandardItem) LearningStandardDocumentRefIdRead() *String {
    if s.LearningStandardDocumentRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LearningStandardDocumentRefId = ((*String)(v))
      }
      }
      return s.LearningStandardDocumentRefId
    }
  func (s *LearningStandardItem) Level4Read() *String {
    if s.Level4 == nil {
    if v, ok:= StringPointer(""); ok {
      s.Level4 = ((*String)(v))
      }
      }
      return s.Level4
    }
  func (s *LearningStandardItem) PredecessorItemsRead() *LearningStandardsType {
    if s.PredecessorItems == nil {
     if v, ok:= LearningStandardsTypePointer(LearningStandardsType{}); ok {
      s.PredecessorItems = v
      }
      }
      return s.PredecessorItems
    }
  func (s *LearningStandardItem) StatementCodesRead() *StatementCodesType {
    if s.StatementCodes == nil {
     if v, ok:= StatementCodesTypePointer(StatementCodesType{}); ok {
      s.StatementCodes = v
      }
      }
      return s.StatementCodes
    }
  func (s *LearningStandardItem) StandardIdentifierRead() *StandardIdentifierType {
    if s.StandardIdentifier == nil {
     if v, ok:= StandardIdentifierTypePointer(StandardIdentifierType{}); ok {
      s.StandardIdentifier = v
      }
      }
      return s.StandardIdentifier
    }
  func (s *LearningStandardItem) RelatedLearningStandardItemsRead() *RelatedLearningStandardItemRefIdListType {
    if s.RelatedLearningStandardItems == nil {
     if v, ok:= RelatedLearningStandardItemRefIdListTypePointer(RelatedLearningStandardItemRefIdListType{}); ok {
      s.RelatedLearningStandardItems = v
      }
      }
      return s.RelatedLearningStandardItems
    }
  func (s *LearningStandardItem) StatementsRead() *StatementsType {
    if s.Statements == nil {
     if v, ok:= StatementsTypePointer(StatementsType{}); ok {
      s.Statements = v
      }
      }
      return s.Statements
    }
  func (s *LearningStandardItem) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *LearningStandardItem) ResourcesRead() *LResourcesType {
    if s.Resources == nil {
     if v, ok:= LResourcesTypePointer(LResourcesType{}); ok {
      s.Resources = v
      }
      }
      return s.Resources
    }
  func (s *LearningStandardItem) ACStrandSubjectAreaRead() *ACStrandSubjectAreaType {
    if s.ACStrandSubjectArea == nil {
     if v, ok:= ACStrandSubjectAreaTypePointer(ACStrandSubjectAreaType{}); ok {
      s.ACStrandSubjectArea = v
      }
      }
      return s.ACStrandSubjectArea
    }
  func (s *LearningStandardItem) YearLevelsRead() *YearLevelsType {
    if s.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.YearLevels = v
      }
      }
      return s.YearLevels
    }
  func (s *LearningStandardItem) StandardSettingBodyRead() *StandardsSettingBodyType {
    if s.StandardSettingBody == nil {
     if v, ok:= StandardsSettingBodyTypePointer(StandardsSettingBodyType{}); ok {
      s.StandardSettingBody = v
      }
      }
      return s.StandardSettingBody
    }
  func (s *LearningStandardItem) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *LearningStandardItem) Level5Read() *String {
    if s.Level5 == nil {
    if v, ok:= StringPointer(""); ok {
      s.Level5 = ((*String)(v))
      }
      }
      return s.Level5
    }
  func (s *LearningStandardItem) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }

  // XXXXX
func (t *PersonPicture) CopyString(key string, value interface{}) *PersonPicture {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PersonPicture) CopyClone(key string, value interface{}) *PersonPicture {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PersonPicture) Unset(key string) *PersonPicture {
        switch key {
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "ParentObjectRefId":
   n.ParentObjectRefId = nil
  case "RefId":
   n.RefId = nil
  case "OKToPublish":
   n.OKToPublish = nil
  case "PictureSource":
   n.PictureSource = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "PublishingPermissionList":
   n.PublishingPermissionList = nil
  case "SchoolYear":
   n.SchoolYear = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonPicture")
        }
        return n
}

func (n *PersonPicture) SetProperty(key string, value interface{}) *PersonPicture {
        if n == nil {
                n, _ = PersonPicturePointer(PersonPicture{})
        }
        switch key {
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "ParentObjectRefId":
    if v, ok:= PersonPicture_ParentObjectRefIdPointer(value); ok {
      n.ParentObjectRefId = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "OKToPublish":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.OKToPublish = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "PictureSource":
    if v, ok:= PersonPicture_PictureSourcePointer(value); ok {
      n.PictureSource = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "PublishingPermissionList":
    if v, ok:= PublishingPermissionListTypePointer(value); ok {
      n.PublishingPermissionList = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonPicture")
        }
        return n
}

  func (s *PersonPicture) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *PersonPicture) ParentObjectRefIdRead() *PersonPicture_ParentObjectRefId {
    if s.ParentObjectRefId == nil {
     if v, ok:= PersonPicture_ParentObjectRefIdPointer(PersonPicture_ParentObjectRefId{}); ok {
      s.ParentObjectRefId = v
      }
      }
      return s.ParentObjectRefId
    }
  func (s *PersonPicture) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *PersonPicture) OKToPublishRead() *AUCodeSetsYesOrNoCategoryType {
    if s.OKToPublish == nil {
    if v, ok:= StringPointer(""); ok {
      s.OKToPublish = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.OKToPublish
    }
  func (s *PersonPicture) PictureSourceRead() *PersonPicture_PictureSource {
    if s.PictureSource == nil {
     if v, ok:= PersonPicture_PictureSourcePointer(PersonPicture_PictureSource{}); ok {
      s.PictureSource = v
      }
      }
      return s.PictureSource
    }
  func (s *PersonPicture) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *PersonPicture) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *PersonPicture) PublishingPermissionListRead() *PublishingPermissionListType {
    if s.PublishingPermissionList == nil {
     if v, ok:= PublishingPermissionListTypePointer(PublishingPermissionListType{}); ok {
      s.PublishingPermissionList = v
      }
      }
      return s.PublishingPermissionList
    }
  func (s *PersonPicture) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }

  // XXXXX
func (t *LocationType) CopyString(key string, value interface{}) *LocationType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LocationType) CopyClone(key string, value interface{}) *LocationType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LocationType) Unset(key string) *LocationType {
        switch key {
  case "LocationRefId":
   n.LocationRefId = nil
  case "Type":
   n.Type = nil
  case "LocationName":
   n.LocationName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocationType")
        }
        return n
}

func (n *LocationType) SetProperty(key string, value interface{}) *LocationType {
        if n == nil {
                n, _ = LocationTypePointer(LocationType{})
        }
        switch key {
    case "LocationRefId":
    if v, ok:= LocationType_LocationRefIdPointer(value); ok {
      n.LocationRefId = v
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
    case "LocationName":
    
    if v, ok:= StringPointer(value); ok {
      n.LocationName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocationType")
        }
        return n
}

  func (s *LocationType) LocationRefIdRead() *LocationType_LocationRefId {
    if s.LocationRefId == nil {
     if v, ok:= LocationType_LocationRefIdPointer(LocationType_LocationRefId{}); ok {
      s.LocationRefId = v
      }
      }
      return s.LocationRefId
    }
  func (s *LocationType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }
  func (s *LocationType) LocationNameRead() *String {
    if s.LocationName == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocationName = ((*String)(v))
      }
      }
      return s.LocationName
    }

  // XXXXX
func (t *LearningResource_Location) CopyString(key string, value interface{}) *LearningResource_Location {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LearningResource_Location) CopyClone(key string, value interface{}) *LearningResource_Location {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LearningResource_Location) Unset(key string) *LearningResource_Location {
        switch key {
  case "Value":
   n.Value = nil
  case "ReferenceType":
   n.ReferenceType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningResource_Location")
        }
        return n
}

func (n *LearningResource_Location) SetProperty(key string, value interface{}) *LearningResource_Location {
        if n == nil {
                n, _ = LearningResource_LocationPointer(LearningResource_Location{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "ReferenceType":
    
    if v, ok:= StringPointer(value); ok {
      n.ReferenceType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningResource_Location")
        }
        return n
}

  func (s *LearningResource_Location) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *LearningResource_Location) ReferenceTypeRead() *String {
    if s.ReferenceType == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReferenceType = ((*String)(v))
      }
      }
      return s.ReferenceType
    }

  // XXXXX
func (t *StudentSchoolEnrollment_Calendar) CopyString(key string, value interface{}) *StudentSchoolEnrollment_Calendar {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentSchoolEnrollment_Calendar) CopyClone(key string, value interface{}) *StudentSchoolEnrollment_Calendar {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentSchoolEnrollment_Calendar) Unset(key string) *StudentSchoolEnrollment_Calendar {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Calendar")
        }
        return n
}

func (n *StudentSchoolEnrollment_Calendar) SetProperty(key string, value interface{}) *StudentSchoolEnrollment_Calendar {
        if n == nil {
                n, _ = StudentSchoolEnrollment_CalendarPointer(StudentSchoolEnrollment_Calendar{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Calendar")
        }
        return n
}

  func (s *StudentSchoolEnrollment_Calendar) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *StudentSchoolEnrollment_Calendar) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *EmailType) CopyString(key string, value interface{}) *EmailType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *EmailType) CopyClone(key string, value interface{}) *EmailType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *EmailType) Unset(key string) *EmailType {
        switch key {
  case "Value":
   n.Value = nil
  case "Type":
   n.Type = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EmailType")
        }
        return n
}

func (n *EmailType) SetProperty(key string, value interface{}) *EmailType {
        if n == nil {
                n, _ = EmailTypePointer(EmailType{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "Type":
        if !CodesetContains(AUCodeSetsEmailTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEmailTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Type = ((*AUCodeSetsEmailTypeType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EmailType")
        }
        return n
}

  func (s *EmailType) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *EmailType) TypeRead() *AUCodeSetsEmailTypeType {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*AUCodeSetsEmailTypeType)(v))
      }
      }
      return s.Type
    }

  // XXXXX
func (t *JournalAdjustmentType) CopyString(key string, value interface{}) *JournalAdjustmentType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *JournalAdjustmentType) CopyClone(key string, value interface{}) *JournalAdjustmentType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *JournalAdjustmentType) Unset(key string) *JournalAdjustmentType {
        switch key {
  case "LineAdjustmentAmount":
   n.LineAdjustmentAmount = nil
  case "DebitAccountCode":
   n.DebitAccountCode = nil
  case "DebitFinancialAccountRefId":
   n.DebitFinancialAccountRefId = nil
  case "CreditFinancialAccountRefId":
   n.CreditFinancialAccountRefId = nil
  case "CreditAccountCode":
   n.CreditAccountCode = nil
  case "GSTCodeReplacement":
   n.GSTCodeReplacement = nil
  case "GSTCodeOriginal":
   n.GSTCodeOriginal = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "JournalAdjustmentType")
        }
        return n
}

func (n *JournalAdjustmentType) SetProperty(key string, value interface{}) *JournalAdjustmentType {
        if n == nil {
                n, _ = JournalAdjustmentTypePointer(JournalAdjustmentType{})
        }
        switch key {
    case "LineAdjustmentAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.LineAdjustmentAmount = v
      }
    case "DebitAccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.DebitAccountCode = ((*String)(v))
      }
    case "DebitFinancialAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.DebitFinancialAccountRefId = ((*String)(v))
      }
    case "CreditFinancialAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.CreditFinancialAccountRefId = ((*String)(v))
      }
    case "CreditAccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.CreditAccountCode = ((*String)(v))
      }
    case "GSTCodeReplacement":
    
    if v, ok:= StringPointer(value); ok {
      n.GSTCodeReplacement = ((*String)(v))
      }
    case "GSTCodeOriginal":
    
    if v, ok:= StringPointer(value); ok {
      n.GSTCodeOriginal = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "JournalAdjustmentType")
        }
        return n
}

  func (s *JournalAdjustmentType) LineAdjustmentAmountRead() *MonetaryAmountType {
    if s.LineAdjustmentAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.LineAdjustmentAmount = v
      }
      }
      return s.LineAdjustmentAmount
    }
  func (s *JournalAdjustmentType) DebitAccountCodeRead() *String {
    if s.DebitAccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.DebitAccountCode = ((*String)(v))
      }
      }
      return s.DebitAccountCode
    }
  func (s *JournalAdjustmentType) DebitFinancialAccountRefIdRead() *String {
    if s.DebitFinancialAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.DebitFinancialAccountRefId = ((*String)(v))
      }
      }
      return s.DebitFinancialAccountRefId
    }
  func (s *JournalAdjustmentType) CreditFinancialAccountRefIdRead() *String {
    if s.CreditFinancialAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.CreditFinancialAccountRefId = ((*String)(v))
      }
      }
      return s.CreditFinancialAccountRefId
    }
  func (s *JournalAdjustmentType) CreditAccountCodeRead() *String {
    if s.CreditAccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.CreditAccountCode = ((*String)(v))
      }
      }
      return s.CreditAccountCode
    }
  func (s *JournalAdjustmentType) GSTCodeReplacementRead() *String {
    if s.GSTCodeReplacement == nil {
    if v, ok:= StringPointer(""); ok {
      s.GSTCodeReplacement = ((*String)(v))
      }
      }
      return s.GSTCodeReplacement
    }
  func (s *JournalAdjustmentType) GSTCodeOriginalRead() *String {
    if s.GSTCodeOriginal == nil {
    if v, ok:= StringPointer(""); ok {
      s.GSTCodeOriginal = ((*String)(v))
      }
      }
      return s.GSTCodeOriginal
    }

  // XXXXX
func (t *StudentScoreJudgementAgainstStandard) CopyString(key string, value interface{}) *StudentScoreJudgementAgainstStandard {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentScoreJudgementAgainstStandard) CopyClone(key string, value interface{}) *StudentScoreJudgementAgainstStandard {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentScoreJudgementAgainstStandard) Unset(key string) *StudentScoreJudgementAgainstStandard {
        switch key {
  case "SchoolYear":
   n.SchoolYear = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "StaffLocalId":
   n.StaffLocalId = nil
  case "ClassLocalId":
   n.ClassLocalId = nil
  case "RefId":
   n.RefId = nil
  case "TeachingGroupRefId":
   n.TeachingGroupRefId = nil
  case "TermInfoRefId":
   n.TermInfoRefId = nil
  case "LearningStandardList":
   n.LearningStandardList = nil
  case "CurriculumCode":
   n.CurriculumCode = nil
  case "SchoolLocalId":
   n.SchoolLocalId = nil
  case "LocalTermCode":
   n.LocalTermCode = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "StudentStateProvinceId":
   n.StudentStateProvinceId = nil
  case "StudentLocalId":
   n.StudentLocalId = nil
  case "SchoolCommonwealthId":
   n.SchoolCommonwealthId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "CurriculumNodeCode":
   n.CurriculumNodeCode = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "YearLevel":
   n.YearLevel = nil
  case "StaffPersonalRefId":
   n.StaffPersonalRefId = nil
  case "Score":
   n.Score = nil
  case "ManagedPathwayLocalCode":
   n.ManagedPathwayLocalCode = nil
  case "SpecialCircumstanceLocalCode":
   n.SpecialCircumstanceLocalCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentScoreJudgementAgainstStandard")
        }
        return n
}

func (n *StudentScoreJudgementAgainstStandard) SetProperty(key string, value interface{}) *StudentScoreJudgementAgainstStandard {
        if n == nil {
                n, _ = StudentScoreJudgementAgainstStandardPointer(StudentScoreJudgementAgainstStandard{})
        }
        switch key {
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "StaffLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffLocalId = ((*LocalIdType)(v))
      }
    case "ClassLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.ClassLocalId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "TeachingGroupRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TeachingGroupRefId = ((*String)(v))
      }
    case "TermInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TermInfoRefId = ((*String)(v))
      }
    case "LearningStandardList":
    if v, ok:= LearningStandardListTypePointer(value); ok {
      n.LearningStandardList = v
      }
    case "CurriculumCode":
    
    if v, ok:= StringPointer(value); ok {
      n.CurriculumCode = ((*LocalIdType)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "LocalTermCode":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalTermCode = ((*LocalIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "StudentStateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentStateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "StudentLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentLocalId = ((*LocalIdType)(v))
      }
    case "SchoolCommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolCommonwealthId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "CurriculumNodeCode":
    
    if v, ok:= StringPointer(value); ok {
      n.CurriculumNodeCode = ((*LocalIdType)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "YearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.YearLevel = v
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffPersonalRefId = ((*String)(v))
      }
    case "Score":
    
    if v, ok:= StringPointer(value); ok {
      n.Score = ((*String)(v))
      }
    case "ManagedPathwayLocalCode":
    
    if v, ok:= StringPointer(value); ok {
      n.ManagedPathwayLocalCode = ((*LocalIdType)(v))
      }
    case "SpecialCircumstanceLocalCode":
    
    if v, ok:= StringPointer(value); ok {
      n.SpecialCircumstanceLocalCode = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentScoreJudgementAgainstStandard")
        }
        return n
}

  func (s *StudentScoreJudgementAgainstStandard) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *StudentScoreJudgementAgainstStandard) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *StudentScoreJudgementAgainstStandard) StaffLocalIdRead() *LocalIdType {
    if s.StaffLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffLocalId = ((*LocalIdType)(v))
      }
      }
      return s.StaffLocalId
    }
  func (s *StudentScoreJudgementAgainstStandard) ClassLocalIdRead() *String {
    if s.ClassLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ClassLocalId = ((*String)(v))
      }
      }
      return s.ClassLocalId
    }
  func (s *StudentScoreJudgementAgainstStandard) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StudentScoreJudgementAgainstStandard) TeachingGroupRefIdRead() *String {
    if s.TeachingGroupRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TeachingGroupRefId = ((*String)(v))
      }
      }
      return s.TeachingGroupRefId
    }
  func (s *StudentScoreJudgementAgainstStandard) TermInfoRefIdRead() *String {
    if s.TermInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TermInfoRefId = ((*String)(v))
      }
      }
      return s.TermInfoRefId
    }
  func (s *StudentScoreJudgementAgainstStandard) LearningStandardListRead() *LearningStandardListType {
    if s.LearningStandardList == nil {
     if v, ok:= LearningStandardListTypePointer(LearningStandardListType{}); ok {
      s.LearningStandardList = v
      }
      }
      return s.LearningStandardList
    }
  func (s *StudentScoreJudgementAgainstStandard) CurriculumCodeRead() *LocalIdType {
    if s.CurriculumCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.CurriculumCode = ((*LocalIdType)(v))
      }
      }
      return s.CurriculumCode
    }
  func (s *StudentScoreJudgementAgainstStandard) SchoolLocalIdRead() *LocalIdType {
    if s.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolLocalId
    }
  func (s *StudentScoreJudgementAgainstStandard) LocalTermCodeRead() *LocalIdType {
    if s.LocalTermCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalTermCode = ((*LocalIdType)(v))
      }
      }
      return s.LocalTermCode
    }
  func (s *StudentScoreJudgementAgainstStandard) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentScoreJudgementAgainstStandard) StudentStateProvinceIdRead() *StateProvinceIdType {
    if s.StudentStateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentStateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.StudentStateProvinceId
    }
  func (s *StudentScoreJudgementAgainstStandard) StudentLocalIdRead() *LocalIdType {
    if s.StudentLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentLocalId = ((*LocalIdType)(v))
      }
      }
      return s.StudentLocalId
    }
  func (s *StudentScoreJudgementAgainstStandard) SchoolCommonwealthIdRead() *String {
    if s.SchoolCommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolCommonwealthId = ((*String)(v))
      }
      }
      return s.SchoolCommonwealthId
    }
  func (s *StudentScoreJudgementAgainstStandard) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentScoreJudgementAgainstStandard) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentScoreJudgementAgainstStandard) CurriculumNodeCodeRead() *LocalIdType {
    if s.CurriculumNodeCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.CurriculumNodeCode = ((*LocalIdType)(v))
      }
      }
      return s.CurriculumNodeCode
    }
  func (s *StudentScoreJudgementAgainstStandard) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *StudentScoreJudgementAgainstStandard) YearLevelRead() *YearLevelType {
    if s.YearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.YearLevel = v
      }
      }
      return s.YearLevel
    }
  func (s *StudentScoreJudgementAgainstStandard) StaffPersonalRefIdRead() *String {
    if s.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.StaffPersonalRefId
    }
  func (s *StudentScoreJudgementAgainstStandard) ScoreRead() *String {
    if s.Score == nil {
    if v, ok:= StringPointer(""); ok {
      s.Score = ((*String)(v))
      }
      }
      return s.Score
    }
  func (s *StudentScoreJudgementAgainstStandard) ManagedPathwayLocalCodeRead() *LocalIdType {
    if s.ManagedPathwayLocalCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.ManagedPathwayLocalCode = ((*LocalIdType)(v))
      }
      }
      return s.ManagedPathwayLocalCode
    }
  func (s *StudentScoreJudgementAgainstStandard) SpecialCircumstanceLocalCodeRead() *LocalIdType {
    if s.SpecialCircumstanceLocalCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.SpecialCircumstanceLocalCode = ((*LocalIdType)(v))
      }
      }
      return s.SpecialCircumstanceLocalCode
    }

  // XXXXX
func (t *AGContextualQuestionType) CopyString(key string, value interface{}) *AGContextualQuestionType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AGContextualQuestionType) CopyClone(key string, value interface{}) *AGContextualQuestionType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AGContextualQuestionType) Unset(key string) *AGContextualQuestionType {
        switch key {
  case "AGAnswer":
   n.AGAnswer = nil
  case "AGContextCode":
   n.AGContextCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGContextualQuestionType")
        }
        return n
}

func (n *AGContextualQuestionType) SetProperty(key string, value interface{}) *AGContextualQuestionType {
        if n == nil {
                n, _ = AGContextualQuestionTypePointer(AGContextualQuestionType{})
        }
        switch key {
    case "AGAnswer":
    
    if v, ok:= StringPointer(value); ok {
      n.AGAnswer = ((*String)(v))
      }
    case "AGContextCode":
        if !CodesetContains(AUCodeSetsAGContextQuestionType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAGContextQuestionType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AGContextCode = ((*AUCodeSetsAGContextQuestionType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGContextualQuestionType")
        }
        return n
}

  func (s *AGContextualQuestionType) AGAnswerRead() *String {
    if s.AGAnswer == nil {
    if v, ok:= StringPointer(""); ok {
      s.AGAnswer = ((*String)(v))
      }
      }
      return s.AGAnswer
    }
  func (s *AGContextualQuestionType) AGContextCodeRead() *AUCodeSetsAGContextQuestionType {
    if s.AGContextCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.AGContextCode = ((*AUCodeSetsAGContextQuestionType)(v))
      }
      }
      return s.AGContextCode
    }

  // XXXXX
func (t *NAPTestContentType) CopyString(key string, value interface{}) *NAPTestContentType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPTestContentType) CopyClone(key string, value interface{}) *NAPTestContentType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPTestContentType) Unset(key string) *NAPTestContentType {
        switch key {
  case "TestType":
   n.TestType = nil
  case "TestName":
   n.TestName = nil
  case "TestLevel":
   n.TestLevel = nil
  case "DomainBands":
   n.DomainBands = nil
  case "DomainProficiency":
   n.DomainProficiency = nil
  case "NAPTestLocalId":
   n.NAPTestLocalId = nil
  case "Domain":
   n.Domain = nil
  case "StagesCount":
   n.StagesCount = nil
  case "TestYear":
   n.TestYear = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestContentType")
        }
        return n
}

func (n *NAPTestContentType) SetProperty(key string, value interface{}) *NAPTestContentType {
        if n == nil {
                n, _ = NAPTestContentTypePointer(NAPTestContentType{})
        }
        switch key {
    case "TestType":
        if !CodesetContains(AUCodeSetsNAPTestTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPTestTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.TestType = ((*AUCodeSetsNAPTestTypeType)(v))
      }
    case "TestName":
    
    if v, ok:= StringPointer(value); ok {
      n.TestName = ((*String)(v))
      }
    case "TestLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.TestLevel = v
      }
    case "DomainBands":
    if v, ok:= DomainBandsContainerTypePointer(value); ok {
      n.DomainBands = v
      }
    case "DomainProficiency":
    if v, ok:= DomainProficiencyContainerTypePointer(value); ok {
      n.DomainProficiency = v
      }
    case "NAPTestLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestLocalId = ((*LocalIdType)(v))
      }
    case "Domain":
        if !CodesetContains(AUCodeSetsNAPTestDomainType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPTestDomainType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Domain = ((*AUCodeSetsNAPTestDomainType)(v))
      }
    case "StagesCount":
    
    if v, ok:= IntPointer(value); ok {
      n.StagesCount = ((*Int)(v))
      }
    case "TestYear":
    
    if v, ok:= StringPointer(value); ok {
      n.TestYear = ((*SchoolYearType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestContentType")
        }
        return n
}

  func (s *NAPTestContentType) TestTypeRead() *AUCodeSetsNAPTestTypeType {
    if s.TestType == nil {
    if v, ok:= StringPointer(""); ok {
      s.TestType = ((*AUCodeSetsNAPTestTypeType)(v))
      }
      }
      return s.TestType
    }
  func (s *NAPTestContentType) TestNameRead() *String {
    if s.TestName == nil {
    if v, ok:= StringPointer(""); ok {
      s.TestName = ((*String)(v))
      }
      }
      return s.TestName
    }
  func (s *NAPTestContentType) TestLevelRead() *YearLevelType {
    if s.TestLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.TestLevel = v
      }
      }
      return s.TestLevel
    }
  func (s *NAPTestContentType) DomainBandsRead() *DomainBandsContainerType {
    if s.DomainBands == nil {
     if v, ok:= DomainBandsContainerTypePointer(DomainBandsContainerType{}); ok {
      s.DomainBands = v
      }
      }
      return s.DomainBands
    }
  func (s *NAPTestContentType) DomainProficiencyRead() *DomainProficiencyContainerType {
    if s.DomainProficiency == nil {
     if v, ok:= DomainProficiencyContainerTypePointer(DomainProficiencyContainerType{}); ok {
      s.DomainProficiency = v
      }
      }
      return s.DomainProficiency
    }
  func (s *NAPTestContentType) NAPTestLocalIdRead() *LocalIdType {
    if s.NAPTestLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestLocalId = ((*LocalIdType)(v))
      }
      }
      return s.NAPTestLocalId
    }
  func (s *NAPTestContentType) DomainRead() *AUCodeSetsNAPTestDomainType {
    if s.Domain == nil {
    if v, ok:= StringPointer(""); ok {
      s.Domain = ((*AUCodeSetsNAPTestDomainType)(v))
      }
      }
      return s.Domain
    }
  func (s *NAPTestContentType) StagesCountRead() *Int {
    if s.StagesCount == nil {
    if v, ok:= IntPointer(0); ok {
      s.StagesCount = ((*Int)(v))
      }
      }
      return s.StagesCount
    }
  func (s *NAPTestContentType) TestYearRead() *SchoolYearType {
    if s.TestYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.TestYear = ((*SchoolYearType)(v))
      }
      }
      return s.TestYear
    }

  // XXXXX
func (t *DomainBandsContainerType) CopyString(key string, value interface{}) *DomainBandsContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *DomainBandsContainerType) CopyClone(key string, value interface{}) *DomainBandsContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *DomainBandsContainerType) Unset(key string) *DomainBandsContainerType {
        switch key {
  case "Band10Lower":
   n.Band10Lower = nil
  case "Band9Upper":
   n.Band9Upper = nil
  case "Band9Lower":
   n.Band9Lower = nil
  case "Band7Lower":
   n.Band7Lower = nil
  case "Band7Upper":
   n.Band7Upper = nil
  case "Band8Lower":
   n.Band8Lower = nil
  case "Band8Upper":
   n.Band8Upper = nil
  case "Band5Upper":
   n.Band5Upper = nil
  case "Band5Lower":
   n.Band5Lower = nil
  case "Band2Upper":
   n.Band2Upper = nil
  case "Band2Lower":
   n.Band2Lower = nil
  case "Band10Upper":
   n.Band10Upper = nil
  case "Band3Upper":
   n.Band3Upper = nil
  case "Band3Lower":
   n.Band3Lower = nil
  case "Band1Lower":
   n.Band1Lower = nil
  case "Band1Upper":
   n.Band1Upper = nil
  case "Band4Lower":
   n.Band4Lower = nil
  case "Band4Upper":
   n.Band4Upper = nil
  case "Band6Upper":
   n.Band6Upper = nil
  case "Band6Lower":
   n.Band6Lower = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DomainBandsContainerType")
        }
        return n
}

func (n *DomainBandsContainerType) SetProperty(key string, value interface{}) *DomainBandsContainerType {
        if n == nil {
                n, _ = DomainBandsContainerTypePointer(DomainBandsContainerType{})
        }
        switch key {
    case "Band10Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band10Lower = ((*Float)(v))
      }
    case "Band9Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band9Upper = ((*Float)(v))
      }
    case "Band9Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band9Lower = ((*Float)(v))
      }
    case "Band7Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band7Lower = ((*Float)(v))
      }
    case "Band7Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band7Upper = ((*Float)(v))
      }
    case "Band8Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band8Lower = ((*Float)(v))
      }
    case "Band8Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band8Upper = ((*Float)(v))
      }
    case "Band5Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band5Upper = ((*Float)(v))
      }
    case "Band5Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band5Lower = ((*Float)(v))
      }
    case "Band2Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band2Upper = ((*Float)(v))
      }
    case "Band2Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band2Lower = ((*Float)(v))
      }
    case "Band10Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band10Upper = ((*Float)(v))
      }
    case "Band3Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band3Upper = ((*Float)(v))
      }
    case "Band3Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band3Lower = ((*Float)(v))
      }
    case "Band1Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band1Lower = ((*Float)(v))
      }
    case "Band1Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band1Upper = ((*Float)(v))
      }
    case "Band4Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band4Lower = ((*Float)(v))
      }
    case "Band4Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band4Upper = ((*Float)(v))
      }
    case "Band6Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band6Upper = ((*Float)(v))
      }
    case "Band6Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Band6Lower = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DomainBandsContainerType")
        }
        return n
}

  func (s *DomainBandsContainerType) Band10LowerRead() *Float {
    if s.Band10Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band10Lower = ((*Float)(v))
      }
      }
      return s.Band10Lower
    }
  func (s *DomainBandsContainerType) Band9UpperRead() *Float {
    if s.Band9Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band9Upper = ((*Float)(v))
      }
      }
      return s.Band9Upper
    }
  func (s *DomainBandsContainerType) Band9LowerRead() *Float {
    if s.Band9Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band9Lower = ((*Float)(v))
      }
      }
      return s.Band9Lower
    }
  func (s *DomainBandsContainerType) Band7LowerRead() *Float {
    if s.Band7Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band7Lower = ((*Float)(v))
      }
      }
      return s.Band7Lower
    }
  func (s *DomainBandsContainerType) Band7UpperRead() *Float {
    if s.Band7Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band7Upper = ((*Float)(v))
      }
      }
      return s.Band7Upper
    }
  func (s *DomainBandsContainerType) Band8LowerRead() *Float {
    if s.Band8Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band8Lower = ((*Float)(v))
      }
      }
      return s.Band8Lower
    }
  func (s *DomainBandsContainerType) Band8UpperRead() *Float {
    if s.Band8Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band8Upper = ((*Float)(v))
      }
      }
      return s.Band8Upper
    }
  func (s *DomainBandsContainerType) Band5UpperRead() *Float {
    if s.Band5Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band5Upper = ((*Float)(v))
      }
      }
      return s.Band5Upper
    }
  func (s *DomainBandsContainerType) Band5LowerRead() *Float {
    if s.Band5Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band5Lower = ((*Float)(v))
      }
      }
      return s.Band5Lower
    }
  func (s *DomainBandsContainerType) Band2UpperRead() *Float {
    if s.Band2Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band2Upper = ((*Float)(v))
      }
      }
      return s.Band2Upper
    }
  func (s *DomainBandsContainerType) Band2LowerRead() *Float {
    if s.Band2Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band2Lower = ((*Float)(v))
      }
      }
      return s.Band2Lower
    }
  func (s *DomainBandsContainerType) Band10UpperRead() *Float {
    if s.Band10Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band10Upper = ((*Float)(v))
      }
      }
      return s.Band10Upper
    }
  func (s *DomainBandsContainerType) Band3UpperRead() *Float {
    if s.Band3Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band3Upper = ((*Float)(v))
      }
      }
      return s.Band3Upper
    }
  func (s *DomainBandsContainerType) Band3LowerRead() *Float {
    if s.Band3Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band3Lower = ((*Float)(v))
      }
      }
      return s.Band3Lower
    }
  func (s *DomainBandsContainerType) Band1LowerRead() *Float {
    if s.Band1Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band1Lower = ((*Float)(v))
      }
      }
      return s.Band1Lower
    }
  func (s *DomainBandsContainerType) Band1UpperRead() *Float {
    if s.Band1Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band1Upper = ((*Float)(v))
      }
      }
      return s.Band1Upper
    }
  func (s *DomainBandsContainerType) Band4LowerRead() *Float {
    if s.Band4Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band4Lower = ((*Float)(v))
      }
      }
      return s.Band4Lower
    }
  func (s *DomainBandsContainerType) Band4UpperRead() *Float {
    if s.Band4Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band4Upper = ((*Float)(v))
      }
      }
      return s.Band4Upper
    }
  func (s *DomainBandsContainerType) Band6UpperRead() *Float {
    if s.Band6Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band6Upper = ((*Float)(v))
      }
      }
      return s.Band6Upper
    }
  func (s *DomainBandsContainerType) Band6LowerRead() *Float {
    if s.Band6Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Band6Lower = ((*Float)(v))
      }
      }
      return s.Band6Lower
    }

  // XXXXX
func (t *EducationFilterType) CopyString(key string, value interface{}) *EducationFilterType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *EducationFilterType) CopyClone(key string, value interface{}) *EducationFilterType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *EducationFilterType) Unset(key string) *EducationFilterType {
        switch key {
  case "LearningStandardItems":
   n.LearningStandardItems = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EducationFilterType")
        }
        return n
}

func (n *EducationFilterType) SetProperty(key string, value interface{}) *EducationFilterType {
        if n == nil {
                n, _ = EducationFilterTypePointer(EducationFilterType{})
        }
        switch key {
    case "LearningStandardItems":
    if v, ok:= LearningStandardsTypePointer(value); ok {
      n.LearningStandardItems = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EducationFilterType")
        }
        return n
}

  func (s *EducationFilterType) LearningStandardItemsRead() *LearningStandardsType {
    if s.LearningStandardItems == nil {
     if v, ok:= LearningStandardsTypePointer(LearningStandardsType{}); ok {
      s.LearningStandardItems = v
      }
      }
      return s.LearningStandardItems
    }

  // XXXXX
func (t *YearLevelEnrollmentType) CopyString(key string, value interface{}) *YearLevelEnrollmentType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *YearLevelEnrollmentType) CopyClone(key string, value interface{}) *YearLevelEnrollmentType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *YearLevelEnrollmentType) Unset(key string) *YearLevelEnrollmentType {
        switch key {
  case "Year":
   n.Year = nil
  case "Enrollment":
   n.Enrollment = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "YearLevelEnrollmentType")
        }
        return n
}

func (n *YearLevelEnrollmentType) SetProperty(key string, value interface{}) *YearLevelEnrollmentType {
        if n == nil {
                n, _ = YearLevelEnrollmentTypePointer(YearLevelEnrollmentType{})
        }
        switch key {
    case "Year":
        if !CodesetContains(AUCodeSetsYearLevelCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYearLevelCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Year = ((*AUCodeSetsYearLevelCodeType)(v))
      }
    case "Enrollment":
    
    if v, ok:= StringPointer(value); ok {
      n.Enrollment = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "YearLevelEnrollmentType")
        }
        return n
}

  func (s *YearLevelEnrollmentType) YearRead() *AUCodeSetsYearLevelCodeType {
    if s.Year == nil {
    if v, ok:= StringPointer(""); ok {
      s.Year = ((*AUCodeSetsYearLevelCodeType)(v))
      }
      }
      return s.Year
    }
  func (s *YearLevelEnrollmentType) EnrollmentRead() *String {
    if s.Enrollment == nil {
    if v, ok:= StringPointer(""); ok {
      s.Enrollment = ((*String)(v))
      }
      }
      return s.Enrollment
    }

  // XXXXX
func (t *AbstractContentPackageType_BinaryData) CopyString(key string, value interface{}) *AbstractContentPackageType_BinaryData {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AbstractContentPackageType_BinaryData) CopyClone(key string, value interface{}) *AbstractContentPackageType_BinaryData {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AbstractContentPackageType_BinaryData) Unset(key string) *AbstractContentPackageType_BinaryData {
        switch key {
  case "FileName":
   n.FileName = nil
  case "Value":
   n.Value = nil
  case "Description":
   n.Description = nil
  case "MIMEType":
   n.MIMEType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_BinaryData")
        }
        return n
}

func (n *AbstractContentPackageType_BinaryData) SetProperty(key string, value interface{}) *AbstractContentPackageType_BinaryData {
        if n == nil {
                n, _ = AbstractContentPackageType_BinaryDataPointer(AbstractContentPackageType_BinaryData{})
        }
        switch key {
    case "FileName":
    
    if v, ok:= StringPointer(value); ok {
      n.FileName = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "MIMEType":
    
    if v, ok:= StringPointer(value); ok {
      n.MIMEType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_BinaryData")
        }
        return n
}

  func (s *AbstractContentPackageType_BinaryData) FileNameRead() *String {
    if s.FileName == nil {
    if v, ok:= StringPointer(""); ok {
      s.FileName = ((*String)(v))
      }
      }
      return s.FileName
    }
  func (s *AbstractContentPackageType_BinaryData) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *AbstractContentPackageType_BinaryData) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *AbstractContentPackageType_BinaryData) MIMETypeRead() *String {
    if s.MIMEType == nil {
    if v, ok:= StringPointer(""); ok {
      s.MIMEType = ((*String)(v))
      }
      }
      return s.MIMEType
    }

  // XXXXX
func (t *AggregateStatisticInfo_CalculationRule) CopyString(key string, value interface{}) *AggregateStatisticInfo_CalculationRule {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AggregateStatisticInfo_CalculationRule) CopyClone(key string, value interface{}) *AggregateStatisticInfo_CalculationRule {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AggregateStatisticInfo_CalculationRule) Unset(key string) *AggregateStatisticInfo_CalculationRule {
        switch key {
  case "Value":
   n.Value = nil
  case "Type":
   n.Type = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateStatisticInfo_CalculationRule")
        }
        return n
}

func (n *AggregateStatisticInfo_CalculationRule) SetProperty(key string, value interface{}) *AggregateStatisticInfo_CalculationRule {
        if n == nil {
                n, _ = AggregateStatisticInfo_CalculationRulePointer(AggregateStatisticInfo_CalculationRule{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateStatisticInfo_CalculationRule")
        }
        return n
}

  func (s *AggregateStatisticInfo_CalculationRule) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *AggregateStatisticInfo_CalculationRule) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }

  // XXXXX
func (t *Activity_Evaluation) CopyString(key string, value interface{}) *Activity_Evaluation {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *Activity_Evaluation) CopyClone(key string, value interface{}) *Activity_Evaluation {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *Activity_Evaluation) Unset(key string) *Activity_Evaluation {
        switch key {
  case "Description":
   n.Description = nil
  case "EvaluationType":
   n.EvaluationType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Activity_Evaluation")
        }
        return n
}

func (n *Activity_Evaluation) SetProperty(key string, value interface{}) *Activity_Evaluation {
        if n == nil {
                n, _ = Activity_EvaluationPointer(Activity_Evaluation{})
        }
        switch key {
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "EvaluationType":
    
    if v, ok:= StringPointer(value); ok {
      n.EvaluationType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Activity_Evaluation")
        }
        return n
}

  func (s *Activity_Evaluation) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *Activity_Evaluation) EvaluationTypeRead() *String {
    if s.EvaluationType == nil {
    if v, ok:= StringPointer(""); ok {
      s.EvaluationType = ((*String)(v))
      }
      }
      return s.EvaluationType
    }

  // XXXXX
func (t *DemographicsType) CopyString(key string, value interface{}) *DemographicsType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *DemographicsType) CopyClone(key string, value interface{}) *DemographicsType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *DemographicsType) Unset(key string) *DemographicsType {
        switch key {
  case "BirthDateVerification":
   n.BirthDateVerification = nil
  case "Religion":
   n.Religion = nil
  case "LBOTE":
   n.LBOTE = nil
  case "MedicareNumber":
   n.MedicareNumber = nil
  case "CulturalBackground":
   n.CulturalBackground = nil
  case "CountryArrivalDate":
   n.CountryArrivalDate = nil
  case "CountriesOfResidency":
   n.CountriesOfResidency = nil
  case "CountriesOfCitizenship":
   n.CountriesOfCitizenship = nil
  case "VisaSubClass":
   n.VisaSubClass = nil
  case "DateOfDeath":
   n.DateOfDeath = nil
  case "LanguageList":
   n.LanguageList = nil
  case "InterpreterRequired":
   n.InterpreterRequired = nil
  case "PlaceOfBirth":
   n.PlaceOfBirth = nil
  case "BirthDate":
   n.BirthDate = nil
  case "Sex":
   n.Sex = nil
  case "DwellingArrangement":
   n.DwellingArrangement = nil
  case "ImmunisationCertificateStatus":
   n.ImmunisationCertificateStatus = nil
  case "VisaExpiryDate":
   n.VisaExpiryDate = nil
  case "ReligiousEventList":
   n.ReligiousEventList = nil
  case "CountryOfBirth":
   n.CountryOfBirth = nil
  case "AustralianCitizenshipStatus":
   n.AustralianCitizenshipStatus = nil
  case "VisaSubClassList":
   n.VisaSubClassList = nil
  case "VisaStatisticalCode":
   n.VisaStatisticalCode = nil
  case "PermanentResident":
   n.PermanentResident = nil
  case "ReligiousRegion":
   n.ReligiousRegion = nil
  case "IndigenousStatus":
   n.IndigenousStatus = nil
  case "EnglishProficiency":
   n.EnglishProficiency = nil
  case "MaritalStatus":
   n.MaritalStatus = nil
  case "StateOfBirth":
   n.StateOfBirth = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DemographicsType")
        }
        return n
}

func (n *DemographicsType) SetProperty(key string, value interface{}) *DemographicsType {
        if n == nil {
                n, _ = DemographicsTypePointer(DemographicsType{})
        }
        switch key {
    case "BirthDateVerification":
        if !CodesetContains(AUCodeSetsBirthdateVerificationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsBirthdateVerificationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.BirthDateVerification = ((*AUCodeSetsBirthdateVerificationType)(v))
      }
    case "Religion":
    if v, ok:= ReligionTypePointer(value); ok {
      n.Religion = v
      }
    case "LBOTE":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.LBOTE = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "MedicareNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.MedicareNumber = ((*String)(v))
      }
    case "CulturalBackground":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.CulturalBackground = ((*AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType)(v))
      }
    case "CountryArrivalDate":
    
    if v, ok:= StringPointer(value); ok {
      n.CountryArrivalDate = ((*String)(v))
      }
    case "CountriesOfResidency":
    if v, ok:= CountryList2TypePointer(value); ok {
      n.CountriesOfResidency = v
      }
    case "CountriesOfCitizenship":
    if v, ok:= CountryListTypePointer(value); ok {
      n.CountriesOfCitizenship = v
      }
    case "VisaSubClass":
    
    if v, ok:= StringPointer(value); ok {
      n.VisaSubClass = ((*VisaSubClassCodeType)(v))
      }
    case "DateOfDeath":
    
    if v, ok:= StringPointer(value); ok {
      n.DateOfDeath = ((*String)(v))
      }
    case "LanguageList":
    if v, ok:= LanguageListTypePointer(value); ok {
      n.LanguageList = v
      }
    case "InterpreterRequired":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.InterpreterRequired = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "PlaceOfBirth":
    
    if v, ok:= StringPointer(value); ok {
      n.PlaceOfBirth = ((*String)(v))
      }
    case "BirthDate":
    
    if v, ok:= StringPointer(value); ok {
      n.BirthDate = ((*BirthDateType)(v))
      }
    case "Sex":
        if !CodesetContains(AUCodeSetsSexCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSexCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Sex = ((*AUCodeSetsSexCodeType)(v))
      }
    case "DwellingArrangement":
    if v, ok:= DwellingArrangementTypePointer(value); ok {
      n.DwellingArrangement = v
      }
    case "ImmunisationCertificateStatus":
        if !CodesetContains(AUCodeSetsImmunisationCertificateStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsImmunisationCertificateStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ImmunisationCertificateStatus = ((*AUCodeSetsImmunisationCertificateStatusType)(v))
      }
    case "VisaExpiryDate":
    
    if v, ok:= StringPointer(value); ok {
      n.VisaExpiryDate = ((*String)(v))
      }
    case "ReligiousEventList":
    if v, ok:= ReligiousEventListTypePointer(value); ok {
      n.ReligiousEventList = v
      }
    case "CountryOfBirth":
        if !CodesetContains(AUCodeSetsStandardAustralianClassificationOfCountriesSACCType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStandardAustralianClassificationOfCountriesSACCType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.CountryOfBirth = ((*CountryType)(v))
      }
    case "AustralianCitizenshipStatus":
        if !CodesetContains(AUCodeSetsAustralianCitizenshipStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianCitizenshipStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AustralianCitizenshipStatus = ((*AUCodeSetsAustralianCitizenshipStatusType)(v))
      }
    case "VisaSubClassList":
    if v, ok:= VisaSubClassListTypePointer(value); ok {
      n.VisaSubClassList = v
      }
    case "VisaStatisticalCode":
    
    if v, ok:= StringPointer(value); ok {
      n.VisaStatisticalCode = ((*String)(v))
      }
    case "PermanentResident":
        if !CodesetContains(AUCodeSetsPermanentResidentStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsPermanentResidentStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PermanentResident = ((*AUCodeSetsPermanentResidentStatusType)(v))
      }
    case "ReligiousRegion":
    
    if v, ok:= StringPointer(value); ok {
      n.ReligiousRegion = ((*String)(v))
      }
    case "IndigenousStatus":
        if !CodesetContains(AUCodeSetsIndigenousStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsIndigenousStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.IndigenousStatus = ((*AUCodeSetsIndigenousStatusType)(v))
      }
    case "EnglishProficiency":
    if v, ok:= EnglishProficiencyTypePointer(value); ok {
      n.EnglishProficiency = v
      }
    case "MaritalStatus":
        if !CodesetContains(AUCodeSetsMaritalStatusAIHWType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsMaritalStatusAIHWType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.MaritalStatus = ((*AUCodeSetsMaritalStatusAIHWType)(v))
      }
    case "StateOfBirth":
    
    if v, ok:= StringPointer(value); ok {
      n.StateOfBirth = ((*StateProvinceType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DemographicsType")
        }
        return n
}

  func (s *DemographicsType) BirthDateVerificationRead() *AUCodeSetsBirthdateVerificationType {
    if s.BirthDateVerification == nil {
    if v, ok:= StringPointer(""); ok {
      s.BirthDateVerification = ((*AUCodeSetsBirthdateVerificationType)(v))
      }
      }
      return s.BirthDateVerification
    }
  func (s *DemographicsType) ReligionRead() *ReligionType {
    if s.Religion == nil {
     if v, ok:= ReligionTypePointer(ReligionType{}); ok {
      s.Religion = v
      }
      }
      return s.Religion
    }
  func (s *DemographicsType) LBOTERead() *AUCodeSetsYesOrNoCategoryType {
    if s.LBOTE == nil {
    if v, ok:= StringPointer(""); ok {
      s.LBOTE = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.LBOTE
    }
  func (s *DemographicsType) MedicareNumberRead() *String {
    if s.MedicareNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.MedicareNumber = ((*String)(v))
      }
      }
      return s.MedicareNumber
    }
  func (s *DemographicsType) CulturalBackgroundRead() *AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType {
    if s.CulturalBackground == nil {
    if v, ok:= StringPointer(""); ok {
      s.CulturalBackground = ((*AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType)(v))
      }
      }
      return s.CulturalBackground
    }
  func (s *DemographicsType) CountryArrivalDateRead() *String {
    if s.CountryArrivalDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.CountryArrivalDate = ((*String)(v))
      }
      }
      return s.CountryArrivalDate
    }
  func (s *DemographicsType) CountriesOfResidencyRead() *CountryList2Type {
    if s.CountriesOfResidency == nil {
     if v, ok:= CountryList2TypePointer(CountryList2Type{}); ok {
      s.CountriesOfResidency = v
      }
      }
      return s.CountriesOfResidency
    }
  func (s *DemographicsType) CountriesOfCitizenshipRead() *CountryListType {
    if s.CountriesOfCitizenship == nil {
     if v, ok:= CountryListTypePointer(CountryListType{}); ok {
      s.CountriesOfCitizenship = v
      }
      }
      return s.CountriesOfCitizenship
    }
  func (s *DemographicsType) VisaSubClassRead() *VisaSubClassCodeType {
    if s.VisaSubClass == nil {
    if v, ok:= StringPointer(""); ok {
      s.VisaSubClass = ((*VisaSubClassCodeType)(v))
      }
      }
      return s.VisaSubClass
    }
  func (s *DemographicsType) DateOfDeathRead() *String {
    if s.DateOfDeath == nil {
    if v, ok:= StringPointer(""); ok {
      s.DateOfDeath = ((*String)(v))
      }
      }
      return s.DateOfDeath
    }
  func (s *DemographicsType) LanguageListRead() *LanguageListType {
    if s.LanguageList == nil {
     if v, ok:= LanguageListTypePointer(LanguageListType{}); ok {
      s.LanguageList = v
      }
      }
      return s.LanguageList
    }
  func (s *DemographicsType) InterpreterRequiredRead() *AUCodeSetsYesOrNoCategoryType {
    if s.InterpreterRequired == nil {
    if v, ok:= StringPointer(""); ok {
      s.InterpreterRequired = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.InterpreterRequired
    }
  func (s *DemographicsType) PlaceOfBirthRead() *String {
    if s.PlaceOfBirth == nil {
    if v, ok:= StringPointer(""); ok {
      s.PlaceOfBirth = ((*String)(v))
      }
      }
      return s.PlaceOfBirth
    }
  func (s *DemographicsType) BirthDateRead() *BirthDateType {
    if s.BirthDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.BirthDate = ((*BirthDateType)(v))
      }
      }
      return s.BirthDate
    }
  func (s *DemographicsType) SexRead() *AUCodeSetsSexCodeType {
    if s.Sex == nil {
    if v, ok:= StringPointer(""); ok {
      s.Sex = ((*AUCodeSetsSexCodeType)(v))
      }
      }
      return s.Sex
    }
  func (s *DemographicsType) DwellingArrangementRead() *DwellingArrangementType {
    if s.DwellingArrangement == nil {
     if v, ok:= DwellingArrangementTypePointer(DwellingArrangementType{}); ok {
      s.DwellingArrangement = v
      }
      }
      return s.DwellingArrangement
    }
  func (s *DemographicsType) ImmunisationCertificateStatusRead() *AUCodeSetsImmunisationCertificateStatusType {
    if s.ImmunisationCertificateStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.ImmunisationCertificateStatus = ((*AUCodeSetsImmunisationCertificateStatusType)(v))
      }
      }
      return s.ImmunisationCertificateStatus
    }
  func (s *DemographicsType) VisaExpiryDateRead() *String {
    if s.VisaExpiryDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.VisaExpiryDate = ((*String)(v))
      }
      }
      return s.VisaExpiryDate
    }
  func (s *DemographicsType) ReligiousEventListRead() *ReligiousEventListType {
    if s.ReligiousEventList == nil {
     if v, ok:= ReligiousEventListTypePointer(ReligiousEventListType{}); ok {
      s.ReligiousEventList = v
      }
      }
      return s.ReligiousEventList
    }
  func (s *DemographicsType) CountryOfBirthRead() *CountryType {
    if s.CountryOfBirth == nil {
    if v, ok:= StringPointer(""); ok {
      s.CountryOfBirth = ((*CountryType)(v))
      }
      }
      return s.CountryOfBirth
    }
  func (s *DemographicsType) AustralianCitizenshipStatusRead() *AUCodeSetsAustralianCitizenshipStatusType {
    if s.AustralianCitizenshipStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.AustralianCitizenshipStatus = ((*AUCodeSetsAustralianCitizenshipStatusType)(v))
      }
      }
      return s.AustralianCitizenshipStatus
    }
  func (s *DemographicsType) VisaSubClassListRead() *VisaSubClassListType {
    if s.VisaSubClassList == nil {
     if v, ok:= VisaSubClassListTypePointer(VisaSubClassListType{}); ok {
      s.VisaSubClassList = v
      }
      }
      return s.VisaSubClassList
    }
  func (s *DemographicsType) VisaStatisticalCodeRead() *String {
    if s.VisaStatisticalCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.VisaStatisticalCode = ((*String)(v))
      }
      }
      return s.VisaStatisticalCode
    }
  func (s *DemographicsType) PermanentResidentRead() *AUCodeSetsPermanentResidentStatusType {
    if s.PermanentResident == nil {
    if v, ok:= StringPointer(""); ok {
      s.PermanentResident = ((*AUCodeSetsPermanentResidentStatusType)(v))
      }
      }
      return s.PermanentResident
    }
  func (s *DemographicsType) ReligiousRegionRead() *String {
    if s.ReligiousRegion == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReligiousRegion = ((*String)(v))
      }
      }
      return s.ReligiousRegion
    }
  func (s *DemographicsType) IndigenousStatusRead() *AUCodeSetsIndigenousStatusType {
    if s.IndigenousStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.IndigenousStatus = ((*AUCodeSetsIndigenousStatusType)(v))
      }
      }
      return s.IndigenousStatus
    }
  func (s *DemographicsType) EnglishProficiencyRead() *EnglishProficiencyType {
    if s.EnglishProficiency == nil {
     if v, ok:= EnglishProficiencyTypePointer(EnglishProficiencyType{}); ok {
      s.EnglishProficiency = v
      }
      }
      return s.EnglishProficiency
    }
  func (s *DemographicsType) MaritalStatusRead() *AUCodeSetsMaritalStatusAIHWType {
    if s.MaritalStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.MaritalStatus = ((*AUCodeSetsMaritalStatusAIHWType)(v))
      }
      }
      return s.MaritalStatus
    }
  func (s *DemographicsType) StateOfBirthRead() *StateProvinceType {
    if s.StateOfBirth == nil {
    if v, ok:= StringPointer(""); ok {
      s.StateOfBirth = ((*StateProvinceType)(v))
      }
      }
      return s.StateOfBirth
    }

  // XXXXX
func (t *CollectionStatus) CopyString(key string, value interface{}) *CollectionStatus {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CollectionStatus) CopyClone(key string, value interface{}) *CollectionStatus {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CollectionStatus) Unset(key string) *CollectionStatus {
        switch key {
  case "ReportingAuthorityCommonwealthId":
   n.ReportingAuthorityCommonwealthId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "AGReportingObjectResponseList":
   n.AGReportingObjectResponseList = nil
  case "SubmissionTimestamp":
   n.SubmissionTimestamp = nil
  case "SubmittedBy":
   n.SubmittedBy = nil
  case "RefId":
   n.RefId = nil
  case "CollectionYear":
   n.CollectionYear = nil
  case "AGCollection":
   n.AGCollection = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "ReportingAuthority":
   n.ReportingAuthority = nil
  case "ReportingAuthoritySystem":
   n.ReportingAuthoritySystem = nil
  case "RoundCode":
   n.RoundCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CollectionStatus")
        }
        return n
}

func (n *CollectionStatus) SetProperty(key string, value interface{}) *CollectionStatus {
        if n == nil {
                n, _ = CollectionStatusPointer(CollectionStatus{})
        }
        switch key {
    case "ReportingAuthorityCommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "AGReportingObjectResponseList":
    if v, ok:= AGReportingObjectResponseListTypePointer(value); ok {
      n.AGReportingObjectResponseList = v
      }
    case "SubmissionTimestamp":
    
    if v, ok:= StringPointer(value); ok {
      n.SubmissionTimestamp = ((*String)(v))
      }
    case "SubmittedBy":
    
    if v, ok:= StringPointer(value); ok {
      n.SubmittedBy = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "CollectionYear":
    
    if v, ok:= StringPointer(value); ok {
      n.CollectionYear = ((*SchoolYearType)(v))
      }
    case "AGCollection":
    
    if v, ok:= StringPointer(value); ok {
      n.AGCollection = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "ReportingAuthority":
    
    if v, ok:= StringPointer(value); ok {
      n.ReportingAuthority = ((*String)(v))
      }
    case "ReportingAuthoritySystem":
    
    if v, ok:= StringPointer(value); ok {
      n.ReportingAuthoritySystem = ((*String)(v))
      }
    case "RoundCode":
    
    if v, ok:= StringPointer(value); ok {
      n.RoundCode = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CollectionStatus")
        }
        return n
}

  func (s *CollectionStatus) ReportingAuthorityCommonwealthIdRead() *String {
    if s.ReportingAuthorityCommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
      }
      return s.ReportingAuthorityCommonwealthId
    }
  func (s *CollectionStatus) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *CollectionStatus) AGReportingObjectResponseListRead() *AGReportingObjectResponseListType {
    if s.AGReportingObjectResponseList == nil {
     if v, ok:= AGReportingObjectResponseListTypePointer(AGReportingObjectResponseListType{}); ok {
      s.AGReportingObjectResponseList = v
      }
      }
      return s.AGReportingObjectResponseList
    }
  func (s *CollectionStatus) SubmissionTimestampRead() *String {
    if s.SubmissionTimestamp == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubmissionTimestamp = ((*String)(v))
      }
      }
      return s.SubmissionTimestamp
    }
  func (s *CollectionStatus) SubmittedByRead() *String {
    if s.SubmittedBy == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubmittedBy = ((*String)(v))
      }
      }
      return s.SubmittedBy
    }
  func (s *CollectionStatus) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *CollectionStatus) CollectionYearRead() *SchoolYearType {
    if s.CollectionYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.CollectionYear = ((*SchoolYearType)(v))
      }
      }
      return s.CollectionYear
    }
  func (s *CollectionStatus) AGCollectionRead() *String {
    if s.AGCollection == nil {
    if v, ok:= StringPointer(""); ok {
      s.AGCollection = ((*String)(v))
      }
      }
      return s.AGCollection
    }
  func (s *CollectionStatus) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *CollectionStatus) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *CollectionStatus) ReportingAuthorityRead() *String {
    if s.ReportingAuthority == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReportingAuthority = ((*String)(v))
      }
      }
      return s.ReportingAuthority
    }
  func (s *CollectionStatus) ReportingAuthoritySystemRead() *String {
    if s.ReportingAuthoritySystem == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReportingAuthoritySystem = ((*String)(v))
      }
      }
      return s.ReportingAuthoritySystem
    }
  func (s *CollectionStatus) RoundCodeRead() *String {
    if s.RoundCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoundCode = ((*String)(v))
      }
      }
      return s.RoundCode
    }

  // XXXXX
func (t *NAPEventStudentLink) CopyString(key string, value interface{}) *NAPEventStudentLink {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPEventStudentLink) CopyClone(key string, value interface{}) *NAPEventStudentLink {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPEventStudentLink) Unset(key string) *NAPEventStudentLink {
        switch key {
  case "ParticipationCode":
   n.ParticipationCode = nil
  case "DOBRange":
   n.DOBRange = nil
  case "ExemptionReason":
   n.ExemptionReason = nil
  case "LapsedTimeTest":
   n.LapsedTimeTest = nil
  case "ParticipationText":
   n.ParticipationText = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "PSIOtherIdMatch":
   n.PSIOtherIdMatch = nil
  case "NAPJurisdiction":
   n.NAPJurisdiction = nil
  case "NAPTestLocalId":
   n.NAPTestLocalId = nil
  case "PossibleDuplicate":
   n.PossibleDuplicate = nil
  case "SchoolSector":
   n.SchoolSector = nil
  case "RefId":
   n.RefId = nil
  case "Adjustment":
   n.Adjustment = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "TestDisruptionList":
   n.TestDisruptionList = nil
  case "StartTime":
   n.StartTime = nil
  case "System":
   n.System = nil
  case "PlatformStudentIdentifier":
   n.PlatformStudentIdentifier = nil
  case "Device":
   n.Device = nil
  case "NAPTestRefId":
   n.NAPTestRefId = nil
  case "PersonalDetailsChanged":
   n.PersonalDetailsChanged = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "SchoolACARAId":
   n.SchoolACARAId = nil
  case "Date":
   n.Date = nil
  case "SchoolGeolocation":
   n.SchoolGeolocation = nil
  case "ReportingSchoolName":
   n.ReportingSchoolName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPEventStudentLink")
        }
        return n
}

func (n *NAPEventStudentLink) SetProperty(key string, value interface{}) *NAPEventStudentLink {
        if n == nil {
                n, _ = NAPEventStudentLinkPointer(NAPEventStudentLink{})
        }
        switch key {
    case "ParticipationCode":
        if !CodesetContains(AUCodeSetsNAPParticipationCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPParticipationCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ParticipationCode = ((*AUCodeSetsNAPParticipationCodeType)(v))
      }
    case "DOBRange":
    
    if v, ok:= BoolPointer(value); ok {
      n.DOBRange = ((*Bool)(v))
      }
    case "ExemptionReason":
    
    if v, ok:= StringPointer(value); ok {
      n.ExemptionReason = ((*String)(v))
      }
    case "LapsedTimeTest":
    
    if v, ok:= StringPointer(value); ok {
      n.LapsedTimeTest = ((*String)(v))
      }
    case "ParticipationText":
    
    if v, ok:= StringPointer(value); ok {
      n.ParticipationText = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "PSIOtherIdMatch":
    
    if v, ok:= BoolPointer(value); ok {
      n.PSIOtherIdMatch = ((*Bool)(v))
      }
    case "NAPJurisdiction":
        if !CodesetContains(AUCodeSetsNAPJurisdictionType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPJurisdictionType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.NAPJurisdiction = ((*AUCodeSetsNAPJurisdictionType)(v))
      }
    case "NAPTestLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestLocalId = ((*LocalIdType)(v))
      }
    case "PossibleDuplicate":
    
    if v, ok:= BoolPointer(value); ok {
      n.PossibleDuplicate = ((*Bool)(v))
      }
    case "SchoolSector":
        if !CodesetContains(AUCodeSetsSchoolSectorCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolSectorCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.SchoolSector = ((*AUCodeSetsSchoolSectorCodeType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "Adjustment":
    if v, ok:= AdjustmentContainerTypePointer(value); ok {
      n.Adjustment = v
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "TestDisruptionList":
    if v, ok:= TestDisruptionListTypePointer(value); ok {
      n.TestDisruptionList = v
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.StartTime = ((*String)(v))
      }
    case "System":
        if !CodesetContains(AUCodeSetsSchoolSystemType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolSystemType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.System = ((*AUCodeSetsSchoolSystemType)(v))
      }
    case "PlatformStudentIdentifier":
    
    if v, ok:= StringPointer(value); ok {
      n.PlatformStudentIdentifier = ((*LocalIdType)(v))
      }
    case "Device":
    
    if v, ok:= StringPointer(value); ok {
      n.Device = ((*String)(v))
      }
    case "NAPTestRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestRefId = ((*String)(v))
      }
    case "PersonalDetailsChanged":
    
    if v, ok:= BoolPointer(value); ok {
      n.PersonalDetailsChanged = ((*Bool)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "SchoolACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolACARAId = ((*LocalIdType)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.Date = ((*String)(v))
      }
    case "SchoolGeolocation":
        if !CodesetContains(AUCodeSetsSchoolLocationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolLocationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.SchoolGeolocation = ((*AUCodeSetsSchoolLocationType)(v))
      }
    case "ReportingSchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.ReportingSchoolName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPEventStudentLink")
        }
        return n
}

  func (s *NAPEventStudentLink) ParticipationCodeRead() *AUCodeSetsNAPParticipationCodeType {
    if s.ParticipationCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.ParticipationCode = ((*AUCodeSetsNAPParticipationCodeType)(v))
      }
      }
      return s.ParticipationCode
    }
  func (s *NAPEventStudentLink) DOBRangeRead() *Bool {
    if s.DOBRange == nil {
    if v, ok:= BoolPointer(false); ok {
      s.DOBRange = ((*Bool)(v))
      }
      }
      return s.DOBRange
    }
  func (s *NAPEventStudentLink) ExemptionReasonRead() *String {
    if s.ExemptionReason == nil {
    if v, ok:= StringPointer(""); ok {
      s.ExemptionReason = ((*String)(v))
      }
      }
      return s.ExemptionReason
    }
  func (s *NAPEventStudentLink) LapsedTimeTestRead() *String {
    if s.LapsedTimeTest == nil {
    if v, ok:= StringPointer(""); ok {
      s.LapsedTimeTest = ((*String)(v))
      }
      }
      return s.LapsedTimeTest
    }
  func (s *NAPEventStudentLink) ParticipationTextRead() *String {
    if s.ParticipationText == nil {
    if v, ok:= StringPointer(""); ok {
      s.ParticipationText = ((*String)(v))
      }
      }
      return s.ParticipationText
    }
  func (s *NAPEventStudentLink) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *NAPEventStudentLink) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *NAPEventStudentLink) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *NAPEventStudentLink) PSIOtherIdMatchRead() *Bool {
    if s.PSIOtherIdMatch == nil {
    if v, ok:= BoolPointer(false); ok {
      s.PSIOtherIdMatch = ((*Bool)(v))
      }
      }
      return s.PSIOtherIdMatch
    }
  func (s *NAPEventStudentLink) NAPJurisdictionRead() *AUCodeSetsNAPJurisdictionType {
    if s.NAPJurisdiction == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPJurisdiction = ((*AUCodeSetsNAPJurisdictionType)(v))
      }
      }
      return s.NAPJurisdiction
    }
  func (s *NAPEventStudentLink) NAPTestLocalIdRead() *LocalIdType {
    if s.NAPTestLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestLocalId = ((*LocalIdType)(v))
      }
      }
      return s.NAPTestLocalId
    }
  func (s *NAPEventStudentLink) PossibleDuplicateRead() *Bool {
    if s.PossibleDuplicate == nil {
    if v, ok:= BoolPointer(false); ok {
      s.PossibleDuplicate = ((*Bool)(v))
      }
      }
      return s.PossibleDuplicate
    }
  func (s *NAPEventStudentLink) SchoolSectorRead() *AUCodeSetsSchoolSectorCodeType {
    if s.SchoolSector == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolSector = ((*AUCodeSetsSchoolSectorCodeType)(v))
      }
      }
      return s.SchoolSector
    }
  func (s *NAPEventStudentLink) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *NAPEventStudentLink) AdjustmentRead() *AdjustmentContainerType {
    if s.Adjustment == nil {
     if v, ok:= AdjustmentContainerTypePointer(AdjustmentContainerType{}); ok {
      s.Adjustment = v
      }
      }
      return s.Adjustment
    }
  func (s *NAPEventStudentLink) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *NAPEventStudentLink) TestDisruptionListRead() *TestDisruptionListType {
    if s.TestDisruptionList == nil {
     if v, ok:= TestDisruptionListTypePointer(TestDisruptionListType{}); ok {
      s.TestDisruptionList = v
      }
      }
      return s.TestDisruptionList
    }
  func (s *NAPEventStudentLink) StartTimeRead() *String {
    if s.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartTime = ((*String)(v))
      }
      }
      return s.StartTime
    }
  func (s *NAPEventStudentLink) SystemRead() *AUCodeSetsSchoolSystemType {
    if s.System == nil {
    if v, ok:= StringPointer(""); ok {
      s.System = ((*AUCodeSetsSchoolSystemType)(v))
      }
      }
      return s.System
    }
  func (s *NAPEventStudentLink) PlatformStudentIdentifierRead() *LocalIdType {
    if s.PlatformStudentIdentifier == nil {
    if v, ok:= StringPointer(""); ok {
      s.PlatformStudentIdentifier = ((*LocalIdType)(v))
      }
      }
      return s.PlatformStudentIdentifier
    }
  func (s *NAPEventStudentLink) DeviceRead() *String {
    if s.Device == nil {
    if v, ok:= StringPointer(""); ok {
      s.Device = ((*String)(v))
      }
      }
      return s.Device
    }
  func (s *NAPEventStudentLink) NAPTestRefIdRead() *String {
    if s.NAPTestRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestRefId = ((*String)(v))
      }
      }
      return s.NAPTestRefId
    }
  func (s *NAPEventStudentLink) PersonalDetailsChangedRead() *Bool {
    if s.PersonalDetailsChanged == nil {
    if v, ok:= BoolPointer(false); ok {
      s.PersonalDetailsChanged = ((*Bool)(v))
      }
      }
      return s.PersonalDetailsChanged
    }
  func (s *NAPEventStudentLink) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *NAPEventStudentLink) SchoolACARAIdRead() *LocalIdType {
    if s.SchoolACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolACARAId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolACARAId
    }
  func (s *NAPEventStudentLink) DateRead() *String {
    if s.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.Date = ((*String)(v))
      }
      }
      return s.Date
    }
  func (s *NAPEventStudentLink) SchoolGeolocationRead() *AUCodeSetsSchoolLocationType {
    if s.SchoolGeolocation == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolGeolocation = ((*AUCodeSetsSchoolLocationType)(v))
      }
      }
      return s.SchoolGeolocation
    }
  func (s *NAPEventStudentLink) ReportingSchoolNameRead() *String {
    if s.ReportingSchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReportingSchoolName = ((*String)(v))
      }
      }
      return s.ReportingSchoolName
    }

  // XXXXX
func (t *VendorInfo) CopyString(key string, value interface{}) *VendorInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *VendorInfo) CopyClone(key string, value interface{}) *VendorInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *VendorInfo) Unset(key string) *VendorInfo {
        switch key {
  case "BSB":
   n.BSB = nil
  case "BPay":
   n.BPay = nil
  case "AccountName":
   n.AccountName = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "RegisteredForGST":
   n.RegisteredForGST = nil
  case "PaymentTerms":
   n.PaymentTerms = nil
  case "AccountNumber":
   n.AccountNumber = nil
  case "CustomerId":
   n.CustomerId = nil
  case "LocalId":
   n.LocalId = nil
  case "ABN":
   n.ABN = nil
  case "Name":
   n.Name = nil
  case "RefId":
   n.RefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "ContactInfo":
   n.ContactInfo = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "VendorInfo")
        }
        return n
}

func (n *VendorInfo) SetProperty(key string, value interface{}) *VendorInfo {
        if n == nil {
                n, _ = VendorInfoPointer(VendorInfo{})
        }
        switch key {
    case "BSB":
    
    if v, ok:= StringPointer(value); ok {
      n.BSB = ((*String)(v))
      }
    case "BPay":
    
    if v, ok:= StringPointer(value); ok {
      n.BPay = ((*String)(v))
      }
    case "AccountName":
    
    if v, ok:= StringPointer(value); ok {
      n.AccountName = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "RegisteredForGST":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.RegisteredForGST = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "PaymentTerms":
    
    if v, ok:= StringPointer(value); ok {
      n.PaymentTerms = ((*String)(v))
      }
    case "AccountNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.AccountNumber = ((*String)(v))
      }
    case "CustomerId":
    
    if v, ok:= StringPointer(value); ok {
      n.CustomerId = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "ABN":
    
    if v, ok:= StringPointer(value); ok {
      n.ABN = ((*String)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.Name = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "ContactInfo":
    if v, ok:= ContactInfoTypePointer(value); ok {
      n.ContactInfo = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "VendorInfo")
        }
        return n
}

  func (s *VendorInfo) BSBRead() *String {
    if s.BSB == nil {
    if v, ok:= StringPointer(""); ok {
      s.BSB = ((*String)(v))
      }
      }
      return s.BSB
    }
  func (s *VendorInfo) BPayRead() *String {
    if s.BPay == nil {
    if v, ok:= StringPointer(""); ok {
      s.BPay = ((*String)(v))
      }
      }
      return s.BPay
    }
  func (s *VendorInfo) AccountNameRead() *String {
    if s.AccountName == nil {
    if v, ok:= StringPointer(""); ok {
      s.AccountName = ((*String)(v))
      }
      }
      return s.AccountName
    }
  func (s *VendorInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *VendorInfo) RegisteredForGSTRead() *AUCodeSetsYesOrNoCategoryType {
    if s.RegisteredForGST == nil {
    if v, ok:= StringPointer(""); ok {
      s.RegisteredForGST = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.RegisteredForGST
    }
  func (s *VendorInfo) PaymentTermsRead() *String {
    if s.PaymentTerms == nil {
    if v, ok:= StringPointer(""); ok {
      s.PaymentTerms = ((*String)(v))
      }
      }
      return s.PaymentTerms
    }
  func (s *VendorInfo) AccountNumberRead() *String {
    if s.AccountNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.AccountNumber = ((*String)(v))
      }
      }
      return s.AccountNumber
    }
  func (s *VendorInfo) CustomerIdRead() *String {
    if s.CustomerId == nil {
    if v, ok:= StringPointer(""); ok {
      s.CustomerId = ((*String)(v))
      }
      }
      return s.CustomerId
    }
  func (s *VendorInfo) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *VendorInfo) ABNRead() *String {
    if s.ABN == nil {
    if v, ok:= StringPointer(""); ok {
      s.ABN = ((*String)(v))
      }
      }
      return s.ABN
    }
  func (s *VendorInfo) NameRead() *String {
    if s.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.Name = ((*String)(v))
      }
      }
      return s.Name
    }
  func (s *VendorInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *VendorInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *VendorInfo) ContactInfoRead() *ContactInfoType {
    if s.ContactInfo == nil {
     if v, ok:= ContactInfoTypePointer(ContactInfoType{}); ok {
      s.ContactInfo = v
      }
      }
      return s.ContactInfo
    }
  func (s *VendorInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }

  // XXXXX
func (t *CensusStudentType) CopyString(key string, value interface{}) *CensusStudentType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CensusStudentType) CopyClone(key string, value interface{}) *CensusStudentType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CensusStudentType) Unset(key string) *CensusStudentType {
        switch key {
  case "OverseasStudent":
   n.OverseasStudent = nil
  case "FTE":
   n.FTE = nil
  case "CensusAge":
   n.CensusAge = nil
  case "CohortGender":
   n.CohortGender = nil
  case "StudentCohortId":
   n.StudentCohortId = nil
  case "YearLevel":
   n.YearLevel = nil
  case "Headcount":
   n.Headcount = nil
  case "DisabilityLevelOfAdjustment":
   n.DisabilityLevelOfAdjustment = nil
  case "EducationMode":
   n.EducationMode = nil
  case "StudentOnVisa":
   n.StudentOnVisa = nil
  case "CohortIndigenousType":
   n.CohortIndigenousType = nil
  case "DisabilityCategory":
   n.DisabilityCategory = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusStudentType")
        }
        return n
}

func (n *CensusStudentType) SetProperty(key string, value interface{}) *CensusStudentType {
        if n == nil {
                n, _ = CensusStudentTypePointer(CensusStudentType{})
        }
        switch key {
    case "OverseasStudent":
    
    if v, ok:= StringPointer(value); ok {
      n.OverseasStudent = ((*String)(v))
      }
    case "FTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.FTE = ((*Float)(v))
      }
    case "CensusAge":
    
    if v, ok:= IntPointer(value); ok {
      n.CensusAge = ((*Int)(v))
      }
    case "CohortGender":
    
    if v, ok:= StringPointer(value); ok {
      n.CohortGender = ((*String)(v))
      }
    case "StudentCohortId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentCohortId = ((*LocalIdType)(v))
      }
    case "YearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.YearLevel = v
      }
    case "Headcount":
    
    if v, ok:= IntPointer(value); ok {
      n.Headcount = ((*Int)(v))
      }
    case "DisabilityLevelOfAdjustment":
    
    if v, ok:= StringPointer(value); ok {
      n.DisabilityLevelOfAdjustment = ((*String)(v))
      }
    case "EducationMode":
    
    if v, ok:= StringPointer(value); ok {
      n.EducationMode = ((*String)(v))
      }
    case "StudentOnVisa":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentOnVisa = ((*String)(v))
      }
    case "CohortIndigenousType":
    
    if v, ok:= StringPointer(value); ok {
      n.CohortIndigenousType = ((*String)(v))
      }
    case "DisabilityCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.DisabilityCategory = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusStudentType")
        }
        return n
}

  func (s *CensusStudentType) OverseasStudentRead() *String {
    if s.OverseasStudent == nil {
    if v, ok:= StringPointer(""); ok {
      s.OverseasStudent = ((*String)(v))
      }
      }
      return s.OverseasStudent
    }
  func (s *CensusStudentType) FTERead() *Float {
    if s.FTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.FTE = ((*Float)(v))
      }
      }
      return s.FTE
    }
  func (s *CensusStudentType) CensusAgeRead() *Int {
    if s.CensusAge == nil {
    if v, ok:= IntPointer(0); ok {
      s.CensusAge = ((*Int)(v))
      }
      }
      return s.CensusAge
    }
  func (s *CensusStudentType) CohortGenderRead() *String {
    if s.CohortGender == nil {
    if v, ok:= StringPointer(""); ok {
      s.CohortGender = ((*String)(v))
      }
      }
      return s.CohortGender
    }
  func (s *CensusStudentType) StudentCohortIdRead() *LocalIdType {
    if s.StudentCohortId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentCohortId = ((*LocalIdType)(v))
      }
      }
      return s.StudentCohortId
    }
  func (s *CensusStudentType) YearLevelRead() *YearLevelType {
    if s.YearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.YearLevel = v
      }
      }
      return s.YearLevel
    }
  func (s *CensusStudentType) HeadcountRead() *Int {
    if s.Headcount == nil {
    if v, ok:= IntPointer(0); ok {
      s.Headcount = ((*Int)(v))
      }
      }
      return s.Headcount
    }
  func (s *CensusStudentType) DisabilityLevelOfAdjustmentRead() *String {
    if s.DisabilityLevelOfAdjustment == nil {
    if v, ok:= StringPointer(""); ok {
      s.DisabilityLevelOfAdjustment = ((*String)(v))
      }
      }
      return s.DisabilityLevelOfAdjustment
    }
  func (s *CensusStudentType) EducationModeRead() *String {
    if s.EducationMode == nil {
    if v, ok:= StringPointer(""); ok {
      s.EducationMode = ((*String)(v))
      }
      }
      return s.EducationMode
    }
  func (s *CensusStudentType) StudentOnVisaRead() *String {
    if s.StudentOnVisa == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentOnVisa = ((*String)(v))
      }
      }
      return s.StudentOnVisa
    }
  func (s *CensusStudentType) CohortIndigenousTypeRead() *String {
    if s.CohortIndigenousType == nil {
    if v, ok:= StringPointer(""); ok {
      s.CohortIndigenousType = ((*String)(v))
      }
      }
      return s.CohortIndigenousType
    }
  func (s *CensusStudentType) DisabilityCategoryRead() *String {
    if s.DisabilityCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.DisabilityCategory = ((*String)(v))
      }
      }
      return s.DisabilityCategory
    }

  // XXXXX
func (t *TimeTable) CopyString(key string, value interface{}) *TimeTable {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TimeTable) CopyClone(key string, value interface{}) *TimeTable {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TimeTable) Unset(key string) *TimeTable {
        switch key {
  case "RefId":
   n.RefId = nil
  case "LocalId":
   n.LocalId = nil
  case "DaysPerCycle":
   n.DaysPerCycle = nil
  case "TimeTableCreationDate":
   n.TimeTableCreationDate = nil
  case "TimeTableDayList":
   n.TimeTableDayList = nil
  case "StartDate":
   n.StartDate = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "SchoolName":
   n.SchoolName = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "EndDate":
   n.EndDate = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "PeriodsPerDay":
   n.PeriodsPerDay = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "Title":
   n.Title = nil
  case "TeachingPeriodsPerDay":
   n.TeachingPeriodsPerDay = nil
  case "SchoolLocalId":
   n.SchoolLocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTable")
        }
        return n
}

func (n *TimeTable) SetProperty(key string, value interface{}) *TimeTable {
        if n == nil {
                n, _ = TimeTablePointer(TimeTable{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "DaysPerCycle":
    
    if v, ok:= IntPointer(value); ok {
      n.DaysPerCycle = ((*Int)(v))
      }
    case "TimeTableCreationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableCreationDate = ((*String)(v))
      }
    case "TimeTableDayList":
    if v, ok:= TimeTableDayListTypePointer(value); ok {
      n.TimeTableDayList = v
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.StartDate = ((*String)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolName = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EndDate = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "PeriodsPerDay":
    
    if v, ok:= IntPointer(value); ok {
      n.PeriodsPerDay = ((*Int)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.Title = ((*String)(v))
      }
    case "TeachingPeriodsPerDay":
    
    if v, ok:= IntPointer(value); ok {
      n.TeachingPeriodsPerDay = ((*Int)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolLocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTable")
        }
        return n
}

  func (s *TimeTable) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *TimeTable) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *TimeTable) DaysPerCycleRead() *Int {
    if s.DaysPerCycle == nil {
    if v, ok:= IntPointer(0); ok {
      s.DaysPerCycle = ((*Int)(v))
      }
      }
      return s.DaysPerCycle
    }
  func (s *TimeTable) TimeTableCreationDateRead() *String {
    if s.TimeTableCreationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableCreationDate = ((*String)(v))
      }
      }
      return s.TimeTableCreationDate
    }
  func (s *TimeTable) TimeTableDayListRead() *TimeTableDayListType {
    if s.TimeTableDayList == nil {
     if v, ok:= TimeTableDayListTypePointer(TimeTableDayListType{}); ok {
      s.TimeTableDayList = v
      }
      }
      return s.TimeTableDayList
    }
  func (s *TimeTable) StartDateRead() *String {
    if s.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartDate = ((*String)(v))
      }
      }
      return s.StartDate
    }
  func (s *TimeTable) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *TimeTable) SchoolNameRead() *String {
    if s.SchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolName = ((*String)(v))
      }
      }
      return s.SchoolName
    }
  func (s *TimeTable) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *TimeTable) EndDateRead() *String {
    if s.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndDate = ((*String)(v))
      }
      }
      return s.EndDate
    }
  func (s *TimeTable) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *TimeTable) PeriodsPerDayRead() *Int {
    if s.PeriodsPerDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.PeriodsPerDay = ((*Int)(v))
      }
      }
      return s.PeriodsPerDay
    }
  func (s *TimeTable) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *TimeTable) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *TimeTable) TitleRead() *String {
    if s.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.Title = ((*String)(v))
      }
      }
      return s.Title
    }
  func (s *TimeTable) TeachingPeriodsPerDayRead() *Int {
    if s.TeachingPeriodsPerDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.TeachingPeriodsPerDay = ((*Int)(v))
      }
      }
      return s.TeachingPeriodsPerDay
    }
  func (s *TimeTable) SchoolLocalIdRead() *LocalIdType {
    if s.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolLocalId
    }

  // XXXXX
func (t *MarkerType) CopyString(key string, value interface{}) *MarkerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *MarkerType) CopyClone(key string, value interface{}) *MarkerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *MarkerType) Unset(key string) *MarkerType {
        switch key {
  case "StaffPersonalRefId":
   n.StaffPersonalRefId = nil
  case "Role":
   n.Role = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MarkerType")
        }
        return n
}

func (n *MarkerType) SetProperty(key string, value interface{}) *MarkerType {
        if n == nil {
                n, _ = MarkerTypePointer(MarkerType{})
        }
        switch key {
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffPersonalRefId = ((*String)(v))
      }
    case "Role":
    
    if v, ok:= StringPointer(value); ok {
      n.Role = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MarkerType")
        }
        return n
}

  func (s *MarkerType) StaffPersonalRefIdRead() *String {
    if s.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.StaffPersonalRefId
    }
  func (s *MarkerType) RoleRead() *String {
    if s.Role == nil {
    if v, ok:= StringPointer(""); ok {
      s.Role = ((*String)(v))
      }
      }
      return s.Role
    }

  // XXXXX
func (t *SIF_ExtendedElementsType_SIF_ExtendedElement) CopyString(key string, value interface{}) *SIF_ExtendedElementsType_SIF_ExtendedElement {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SIF_ExtendedElementsType_SIF_ExtendedElement) CopyClone(key string, value interface{}) *SIF_ExtendedElementsType_SIF_ExtendedElement {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SIF_ExtendedElementsType_SIF_ExtendedElement) Unset(key string) *SIF_ExtendedElementsType_SIF_ExtendedElement {
        switch key {
  case "SIF_Action":
   n.SIF_Action = nil
  case "Name":
   n.Name = nil
  case "Type":
   n.Type = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SIF_ExtendedElementsType_SIF_ExtendedElement")
        }
        return n
}

func (n *SIF_ExtendedElementsType_SIF_ExtendedElement) SetProperty(key string, value interface{}) *SIF_ExtendedElementsType_SIF_ExtendedElement {
        if n == nil {
                n, _ = SIF_ExtendedElementsType_SIF_ExtendedElementPointer(SIF_ExtendedElementsType_SIF_ExtendedElement{})
        }
        switch key {
    case "SIF_Action":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_Action = ((*String)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.Name = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*ExtendedContentType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SIF_ExtendedElementsType_SIF_ExtendedElement")
        }
        return n
}

  func (s *SIF_ExtendedElementsType_SIF_ExtendedElement) SIF_ActionRead() *String {
    if s.SIF_Action == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_Action = ((*String)(v))
      }
      }
      return s.SIF_Action
    }
  func (s *SIF_ExtendedElementsType_SIF_ExtendedElement) NameRead() *String {
    if s.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.Name = ((*String)(v))
      }
      }
      return s.Name
    }
  func (s *SIF_ExtendedElementsType_SIF_ExtendedElement) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }
  func (s *SIF_ExtendedElementsType_SIF_ExtendedElement) ValueRead() *ExtendedContentType {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*ExtendedContentType)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *PersonInfoType) CopyString(key string, value interface{}) *PersonInfoType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PersonInfoType) CopyClone(key string, value interface{}) *PersonInfoType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PersonInfoType) Unset(key string) *PersonInfoType {
        switch key {
  case "EmailList":
   n.EmailList = nil
  case "HouseholdContactInfoList":
   n.HouseholdContactInfoList = nil
  case "OtherNames":
   n.OtherNames = nil
  case "Name":
   n.Name = nil
  case "Demographics":
   n.Demographics = nil
  case "PhoneNumberList":
   n.PhoneNumberList = nil
  case "AddressList":
   n.AddressList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonInfoType")
        }
        return n
}

func (n *PersonInfoType) SetProperty(key string, value interface{}) *PersonInfoType {
        if n == nil {
                n, _ = PersonInfoTypePointer(PersonInfoType{})
        }
        switch key {
    case "EmailList":
    if v, ok:= EmailListTypePointer(value); ok {
      n.EmailList = v
      }
    case "HouseholdContactInfoList":
    if v, ok:= HouseholdContactInfoListTypePointer(value); ok {
      n.HouseholdContactInfoList = v
      }
    case "OtherNames":
    if v, ok:= OtherNamesTypePointer(value); ok {
      n.OtherNames = v
      }
    case "Name":
    if v, ok:= NameOfRecordTypePointer(value); ok {
      n.Name = v
      }
    case "Demographics":
    if v, ok:= DemographicsTypePointer(value); ok {
      n.Demographics = v
      }
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.PhoneNumberList = v
      }
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.AddressList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonInfoType")
        }
        return n
}

  func (s *PersonInfoType) EmailListRead() *EmailListType {
    if s.EmailList == nil {
     if v, ok:= EmailListTypePointer(EmailListType{}); ok {
      s.EmailList = v
      }
      }
      return s.EmailList
    }
  func (s *PersonInfoType) HouseholdContactInfoListRead() *HouseholdContactInfoListType {
    if s.HouseholdContactInfoList == nil {
     if v, ok:= HouseholdContactInfoListTypePointer(HouseholdContactInfoListType{}); ok {
      s.HouseholdContactInfoList = v
      }
      }
      return s.HouseholdContactInfoList
    }
  func (s *PersonInfoType) OtherNamesRead() *OtherNamesType {
    if s.OtherNames == nil {
     if v, ok:= OtherNamesTypePointer(OtherNamesType{}); ok {
      s.OtherNames = v
      }
      }
      return s.OtherNames
    }
  func (s *PersonInfoType) NameRead() *NameOfRecordType {
    if s.Name == nil {
     if v, ok:= NameOfRecordTypePointer(NameOfRecordType{}); ok {
      s.Name = v
      }
      }
      return s.Name
    }
  func (s *PersonInfoType) DemographicsRead() *DemographicsType {
    if s.Demographics == nil {
     if v, ok:= DemographicsTypePointer(DemographicsType{}); ok {
      s.Demographics = v
      }
      }
      return s.Demographics
    }
  func (s *PersonInfoType) PhoneNumberListRead() *PhoneNumberListType {
    if s.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.PhoneNumberList = v
      }
      }
      return s.PhoneNumberList
    }
  func (s *PersonInfoType) AddressListRead() *AddressListType {
    if s.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.AddressList = v
      }
      }
      return s.AddressList
    }

  // XXXXX
func (t *AbstractContentElementType_XMLData) CopyString(key string, value interface{}) *AbstractContentElementType_XMLData {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AbstractContentElementType_XMLData) CopyClone(key string, value interface{}) *AbstractContentElementType_XMLData {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AbstractContentElementType_XMLData) Unset(key string) *AbstractContentElementType_XMLData {
        switch key {
  case "Description":
   n.Description = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_XMLData")
        }
        return n
}

func (n *AbstractContentElementType_XMLData) SetProperty(key string, value interface{}) *AbstractContentElementType_XMLData {
        if n == nil {
                n, _ = AbstractContentElementType_XMLDataPointer(AbstractContentElementType_XMLData{})
        }
        switch key {
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_XMLData")
        }
        return n
}

  func (s *AbstractContentElementType_XMLData) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *AbstractContentElementType_XMLData) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *AGRoundType) CopyString(key string, value interface{}) *AGRoundType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AGRoundType) CopyClone(key string, value interface{}) *AGRoundType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AGRoundType) Unset(key string) *AGRoundType {
        switch key {
  case "StartDate":
   n.StartDate = nil
  case "DueDate":
   n.DueDate = nil
  case "EndDate":
   n.EndDate = nil
  case "RoundName":
   n.RoundName = nil
  case "RoundCode":
   n.RoundCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGRoundType")
        }
        return n
}

func (n *AGRoundType) SetProperty(key string, value interface{}) *AGRoundType {
        if n == nil {
                n, _ = AGRoundTypePointer(AGRoundType{})
        }
        switch key {
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.StartDate = ((*String)(v))
      }
    case "DueDate":
    
    if v, ok:= StringPointer(value); ok {
      n.DueDate = ((*String)(v))
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EndDate = ((*String)(v))
      }
    case "RoundName":
    
    if v, ok:= StringPointer(value); ok {
      n.RoundName = ((*String)(v))
      }
    case "RoundCode":
    
    if v, ok:= StringPointer(value); ok {
      n.RoundCode = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGRoundType")
        }
        return n
}

  func (s *AGRoundType) StartDateRead() *String {
    if s.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartDate = ((*String)(v))
      }
      }
      return s.StartDate
    }
  func (s *AGRoundType) DueDateRead() *String {
    if s.DueDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.DueDate = ((*String)(v))
      }
      }
      return s.DueDate
    }
  func (s *AGRoundType) EndDateRead() *String {
    if s.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndDate = ((*String)(v))
      }
      }
      return s.EndDate
    }
  func (s *AGRoundType) RoundNameRead() *String {
    if s.RoundName == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoundName = ((*String)(v))
      }
      }
      return s.RoundName
    }
  func (s *AGRoundType) RoundCodeRead() *String {
    if s.RoundCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoundCode = ((*String)(v))
      }
      }
      return s.RoundCode
    }

  // XXXXX
func (t *SchoolContactType) CopyString(key string, value interface{}) *SchoolContactType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SchoolContactType) CopyClone(key string, value interface{}) *SchoolContactType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SchoolContactType) Unset(key string) *SchoolContactType {
        switch key {
  case "PublishInDirectory":
   n.PublishInDirectory = nil
  case "ContactInfo":
   n.ContactInfo = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolContactType")
        }
        return n
}

func (n *SchoolContactType) SetProperty(key string, value interface{}) *SchoolContactType {
        if n == nil {
                n, _ = SchoolContactTypePointer(SchoolContactType{})
        }
        switch key {
    case "PublishInDirectory":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PublishInDirectory = ((*PublishInDirectoryType)(v))
      }
    case "ContactInfo":
    if v, ok:= ContactInfoTypePointer(value); ok {
      n.ContactInfo = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolContactType")
        }
        return n
}

  func (s *SchoolContactType) PublishInDirectoryRead() *PublishInDirectoryType {
    if s.PublishInDirectory == nil {
    if v, ok:= StringPointer(""); ok {
      s.PublishInDirectory = ((*PublishInDirectoryType)(v))
      }
      }
      return s.PublishInDirectory
    }
  func (s *SchoolContactType) ContactInfoRead() *ContactInfoType {
    if s.ContactInfo == nil {
     if v, ok:= ContactInfoTypePointer(ContactInfoType{}); ok {
      s.ContactInfo = v
      }
      }
      return s.ContactInfo
    }

  // XXXXX
func (t *NAPTestlet) CopyString(key string, value interface{}) *NAPTestlet {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPTestlet) CopyClone(key string, value interface{}) *NAPTestlet {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPTestlet) Unset(key string) *NAPTestlet {
        switch key {
  case "TestletContent":
   n.TestletContent = nil
  case "NAPTestLocalId":
   n.NAPTestLocalId = nil
  case "RefId":
   n.RefId = nil
  case "NAPTestRefId":
   n.NAPTestRefId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "TestItemList":
   n.TestItemList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestlet")
        }
        return n
}

func (n *NAPTestlet) SetProperty(key string, value interface{}) *NAPTestlet {
        if n == nil {
                n, _ = NAPTestletPointer(NAPTestlet{})
        }
        switch key {
    case "TestletContent":
    if v, ok:= NAPTestletContentTypePointer(value); ok {
      n.TestletContent = v
      }
    case "NAPTestLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestLocalId = ((*LocalIdType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "NAPTestRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestRefId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "TestItemList":
    if v, ok:= NAPTestItemListTypePointer(value); ok {
      n.TestItemList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestlet")
        }
        return n
}

  func (s *NAPTestlet) TestletContentRead() *NAPTestletContentType {
    if s.TestletContent == nil {
     if v, ok:= NAPTestletContentTypePointer(NAPTestletContentType{}); ok {
      s.TestletContent = v
      }
      }
      return s.TestletContent
    }
  func (s *NAPTestlet) NAPTestLocalIdRead() *LocalIdType {
    if s.NAPTestLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestLocalId = ((*LocalIdType)(v))
      }
      }
      return s.NAPTestLocalId
    }
  func (s *NAPTestlet) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *NAPTestlet) NAPTestRefIdRead() *String {
    if s.NAPTestRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestRefId = ((*String)(v))
      }
      }
      return s.NAPTestRefId
    }
  func (s *NAPTestlet) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *NAPTestlet) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *NAPTestlet) TestItemListRead() *NAPTestItemListType {
    if s.TestItemList == nil {
     if v, ok:= NAPTestItemListTypePointer(NAPTestItemListType{}); ok {
      s.TestItemList = v
      }
      }
      return s.TestItemList
    }
  func (s *NAPTestlet) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }

  // XXXXX
func (t *SchoolPrograms) CopyString(key string, value interface{}) *SchoolPrograms {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SchoolPrograms) CopyClone(key string, value interface{}) *SchoolPrograms {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SchoolPrograms) Unset(key string) *SchoolPrograms {
        switch key {
  case "SchoolYear":
   n.SchoolYear = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "RefId":
   n.RefId = nil
  case "SchoolProgramList":
   n.SchoolProgramList = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolPrograms")
        }
        return n
}

func (n *SchoolPrograms) SetProperty(key string, value interface{}) *SchoolPrograms {
        if n == nil {
                n, _ = SchoolProgramsPointer(SchoolPrograms{})
        }
        switch key {
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "SchoolProgramList":
    if v, ok:= SchoolProgramListTypePointer(value); ok {
      n.SchoolProgramList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolPrograms")
        }
        return n
}

  func (s *SchoolPrograms) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *SchoolPrograms) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *SchoolPrograms) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *SchoolPrograms) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *SchoolPrograms) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *SchoolPrograms) SchoolProgramListRead() *SchoolProgramListType {
    if s.SchoolProgramList == nil {
     if v, ok:= SchoolProgramListTypePointer(SchoolProgramListType{}); ok {
      s.SchoolProgramList = v
      }
      }
      return s.SchoolProgramList
    }
  func (s *SchoolPrograms) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }

  // XXXXX
func (t *HouseholdContactInfoType) CopyString(key string, value interface{}) *HouseholdContactInfoType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *HouseholdContactInfoType) CopyClone(key string, value interface{}) *HouseholdContactInfoType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *HouseholdContactInfoType) Unset(key string) *HouseholdContactInfoType {
        switch key {
  case "HouseholdContactId":
   n.HouseholdContactId = nil
  case "EmailList":
   n.EmailList = nil
  case "HouseholdSalutation":
   n.HouseholdSalutation = nil
  case "PhoneNumberList":
   n.PhoneNumberList = nil
  case "AddressList":
   n.AddressList = nil
  case "PreferenceNumber":
   n.PreferenceNumber = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "HouseholdContactInfoType")
        }
        return n
}

func (n *HouseholdContactInfoType) SetProperty(key string, value interface{}) *HouseholdContactInfoType {
        if n == nil {
                n, _ = HouseholdContactInfoTypePointer(HouseholdContactInfoType{})
        }
        switch key {
    case "HouseholdContactId":
    
    if v, ok:= StringPointer(value); ok {
      n.HouseholdContactId = ((*LocalIdType)(v))
      }
    case "EmailList":
    if v, ok:= EmailListTypePointer(value); ok {
      n.EmailList = v
      }
    case "HouseholdSalutation":
    
    if v, ok:= StringPointer(value); ok {
      n.HouseholdSalutation = ((*String)(v))
      }
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.PhoneNumberList = v
      }
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.AddressList = v
      }
    case "PreferenceNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.PreferenceNumber = ((*Int)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "HouseholdContactInfoType")
        }
        return n
}

  func (s *HouseholdContactInfoType) HouseholdContactIdRead() *LocalIdType {
    if s.HouseholdContactId == nil {
    if v, ok:= StringPointer(""); ok {
      s.HouseholdContactId = ((*LocalIdType)(v))
      }
      }
      return s.HouseholdContactId
    }
  func (s *HouseholdContactInfoType) EmailListRead() *EmailListType {
    if s.EmailList == nil {
     if v, ok:= EmailListTypePointer(EmailListType{}); ok {
      s.EmailList = v
      }
      }
      return s.EmailList
    }
  func (s *HouseholdContactInfoType) HouseholdSalutationRead() *String {
    if s.HouseholdSalutation == nil {
    if v, ok:= StringPointer(""); ok {
      s.HouseholdSalutation = ((*String)(v))
      }
      }
      return s.HouseholdSalutation
    }
  func (s *HouseholdContactInfoType) PhoneNumberListRead() *PhoneNumberListType {
    if s.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.PhoneNumberList = v
      }
      }
      return s.PhoneNumberList
    }
  func (s *HouseholdContactInfoType) AddressListRead() *AddressListType {
    if s.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.AddressList = v
      }
      }
      return s.AddressList
    }
  func (s *HouseholdContactInfoType) PreferenceNumberRead() *Int {
    if s.PreferenceNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.PreferenceNumber = ((*Int)(v))
      }
      }
      return s.PreferenceNumber
    }

  // XXXXX
func (t *StudentActivityInfo) CopyString(key string, value interface{}) *StudentActivityInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentActivityInfo) CopyClone(key string, value interface{}) *StudentActivityInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentActivityInfo) Unset(key string) *StudentActivityInfo {
        switch key {
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "Location":
   n.Location = nil
  case "StudentActivityType":
   n.StudentActivityType = nil
  case "Title":
   n.Title = nil
  case "StudentActivityLevel":
   n.StudentActivityLevel = nil
  case "Description":
   n.Description = nil
  case "RefId":
   n.RefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "CurricularStatus":
   n.CurricularStatus = nil
  case "YearLevels":
   n.YearLevels = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentActivityInfo")
        }
        return n
}

func (n *StudentActivityInfo) SetProperty(key string, value interface{}) *StudentActivityInfo {
        if n == nil {
                n, _ = StudentActivityInfoPointer(StudentActivityInfo{})
        }
        switch key {
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "Location":
    if v, ok:= LocationTypePointer(value); ok {
      n.Location = v
      }
    case "StudentActivityType":
    if v, ok:= StudentActivityTypePointer(value); ok {
      n.StudentActivityType = v
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.Title = ((*String)(v))
      }
    case "StudentActivityLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentActivityLevel = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "CurricularStatus":
        if !CodesetContains(AUCodeSetsActivityTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsActivityTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.CurricularStatus = ((*AUCodeSetsActivityTypeType)(v))
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.YearLevels = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentActivityInfo")
        }
        return n
}

  func (s *StudentActivityInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentActivityInfo) LocationRead() *LocationType {
    if s.Location == nil {
     if v, ok:= LocationTypePointer(LocationType{}); ok {
      s.Location = v
      }
      }
      return s.Location
    }
  func (s *StudentActivityInfo) StudentActivityTypeRead() *StudentActivityType {
    if s.StudentActivityType == nil {
     if v, ok:= StudentActivityTypePointer(StudentActivityType{}); ok {
      s.StudentActivityType = v
      }
      }
      return s.StudentActivityType
    }
  func (s *StudentActivityInfo) TitleRead() *String {
    if s.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.Title = ((*String)(v))
      }
      }
      return s.Title
    }
  func (s *StudentActivityInfo) StudentActivityLevelRead() *String {
    if s.StudentActivityLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentActivityLevel = ((*String)(v))
      }
      }
      return s.StudentActivityLevel
    }
  func (s *StudentActivityInfo) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *StudentActivityInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StudentActivityInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentActivityInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentActivityInfo) CurricularStatusRead() *AUCodeSetsActivityTypeType {
    if s.CurricularStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.CurricularStatus = ((*AUCodeSetsActivityTypeType)(v))
      }
      }
      return s.CurricularStatus
    }
  func (s *StudentActivityInfo) YearLevelsRead() *YearLevelsType {
    if s.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.YearLevels = v
      }
      }
      return s.YearLevels
    }

  // XXXXX
func (t *Journal_OriginatingTransactionRefId) CopyString(key string, value interface{}) *Journal_OriginatingTransactionRefId {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *Journal_OriginatingTransactionRefId) CopyClone(key string, value interface{}) *Journal_OriginatingTransactionRefId {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *Journal_OriginatingTransactionRefId) Unset(key string) *Journal_OriginatingTransactionRefId {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Journal_OriginatingTransactionRefId")
        }
        return n
}

func (n *Journal_OriginatingTransactionRefId) SetProperty(key string, value interface{}) *Journal_OriginatingTransactionRefId {
        if n == nil {
                n, _ = Journal_OriginatingTransactionRefIdPointer(Journal_OriginatingTransactionRefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Journal_OriginatingTransactionRefId")
        }
        return n
}

  func (s *Journal_OriginatingTransactionRefId) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *Journal_OriginatingTransactionRefId) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *AbstractContentElementType) CopyString(key string, value interface{}) *AbstractContentElementType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AbstractContentElementType) CopyClone(key string, value interface{}) *AbstractContentElementType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AbstractContentElementType) Unset(key string) *AbstractContentElementType {
        switch key {
  case "Reference":
   n.Reference = nil
  case "BinaryData":
   n.BinaryData = nil
  case "TextData":
   n.TextData = nil
  case "XMLData":
   n.XMLData = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType")
        }
        return n
}

func (n *AbstractContentElementType) SetProperty(key string, value interface{}) *AbstractContentElementType {
        if n == nil {
                n, _ = AbstractContentElementTypePointer(AbstractContentElementType{})
        }
        switch key {
    case "Reference":
    if v, ok:= AbstractContentElementType_ReferencePointer(value); ok {
      n.Reference = v
      }
    case "BinaryData":
    if v, ok:= AbstractContentElementType_BinaryDataPointer(value); ok {
      n.BinaryData = v
      }
    case "TextData":
    if v, ok:= AbstractContentElementType_TextDataPointer(value); ok {
      n.TextData = v
      }
    case "XMLData":
    if v, ok:= AbstractContentElementType_XMLDataPointer(value); ok {
      n.XMLData = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType")
        }
        return n
}

  func (s *AbstractContentElementType) ReferenceRead() *AbstractContentElementType_Reference {
    if s.Reference == nil {
     if v, ok:= AbstractContentElementType_ReferencePointer(AbstractContentElementType_Reference{}); ok {
      s.Reference = v
      }
      }
      return s.Reference
    }
  func (s *AbstractContentElementType) BinaryDataRead() *AbstractContentElementType_BinaryData {
    if s.BinaryData == nil {
     if v, ok:= AbstractContentElementType_BinaryDataPointer(AbstractContentElementType_BinaryData{}); ok {
      s.BinaryData = v
      }
      }
      return s.BinaryData
    }
  func (s *AbstractContentElementType) TextDataRead() *AbstractContentElementType_TextData {
    if s.TextData == nil {
     if v, ok:= AbstractContentElementType_TextDataPointer(AbstractContentElementType_TextData{}); ok {
      s.TextData = v
      }
      }
      return s.TextData
    }
  func (s *AbstractContentElementType) XMLDataRead() *AbstractContentElementType_XMLData {
    if s.XMLData == nil {
     if v, ok:= AbstractContentElementType_XMLDataPointer(AbstractContentElementType_XMLData{}); ok {
      s.XMLData = v
      }
      }
      return s.XMLData
    }

  // XXXXX
func (t *StudentEntryContainerType) CopyString(key string, value interface{}) *StudentEntryContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentEntryContainerType) CopyClone(key string, value interface{}) *StudentEntryContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentEntryContainerType) Unset(key string) *StudentEntryContainerType {
        switch key {
  case "OtherCodeList":
   n.OtherCodeList = nil
  case "Code":
   n.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentEntryContainerType")
        }
        return n
}

func (n *StudentEntryContainerType) SetProperty(key string, value interface{}) *StudentEntryContainerType {
        if n == nil {
                n, _ = StudentEntryContainerTypePointer(StudentEntryContainerType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsEntryTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEntryTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsEntryTypeType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentEntryContainerType")
        }
        return n
}

  func (s *StudentEntryContainerType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }
  func (s *StudentEntryContainerType) CodeRead() *AUCodeSetsEntryTypeType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsEntryTypeType)(v))
      }
      }
      return s.Code
    }

  // XXXXX
func (t *CensusCollection) CopyString(key string, value interface{}) *CensusCollection {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CensusCollection) CopyClone(key string, value interface{}) *CensusCollection {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CensusCollection) Unset(key string) *CensusCollection {
        switch key {
  case "CensusYear":
   n.CensusYear = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "RoundCode":
   n.RoundCode = nil
  case "SoftwareVendorInfo":
   n.SoftwareVendorInfo = nil
  case "RefId":
   n.RefId = nil
  case "ReportingAuthorityCommonwealthId":
   n.ReportingAuthorityCommonwealthId = nil
  case "CensusReportingList":
   n.CensusReportingList = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusCollection")
        }
        return n
}

func (n *CensusCollection) SetProperty(key string, value interface{}) *CensusCollection {
        if n == nil {
                n, _ = CensusCollectionPointer(CensusCollection{})
        }
        switch key {
    case "CensusYear":
    
    if v, ok:= StringPointer(value); ok {
      n.CensusYear = ((*SchoolYearType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "RoundCode":
    
    if v, ok:= StringPointer(value); ok {
      n.RoundCode = ((*String)(v))
      }
    case "SoftwareVendorInfo":
    if v, ok:= SoftwareVendorInfoContainerTypePointer(value); ok {
      n.SoftwareVendorInfo = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ReportingAuthorityCommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
    case "CensusReportingList":
    if v, ok:= CensusReportingListTypePointer(value); ok {
      n.CensusReportingList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusCollection")
        }
        return n
}

  func (s *CensusCollection) CensusYearRead() *SchoolYearType {
    if s.CensusYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.CensusYear = ((*SchoolYearType)(v))
      }
      }
      return s.CensusYear
    }
  func (s *CensusCollection) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *CensusCollection) RoundCodeRead() *String {
    if s.RoundCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoundCode = ((*String)(v))
      }
      }
      return s.RoundCode
    }
  func (s *CensusCollection) SoftwareVendorInfoRead() *SoftwareVendorInfoContainerType {
    if s.SoftwareVendorInfo == nil {
     if v, ok:= SoftwareVendorInfoContainerTypePointer(SoftwareVendorInfoContainerType{}); ok {
      s.SoftwareVendorInfo = v
      }
      }
      return s.SoftwareVendorInfo
    }
  func (s *CensusCollection) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *CensusCollection) ReportingAuthorityCommonwealthIdRead() *String {
    if s.ReportingAuthorityCommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
      }
      return s.ReportingAuthorityCommonwealthId
    }
  func (s *CensusCollection) CensusReportingListRead() *CensusReportingListType {
    if s.CensusReportingList == nil {
     if v, ok:= CensusReportingListTypePointer(CensusReportingListType{}); ok {
      s.CensusReportingList = v
      }
      }
      return s.CensusReportingList
    }
  func (s *CensusCollection) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }

  // XXXXX
func (t *AlertMessageType) CopyString(key string, value interface{}) *AlertMessageType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AlertMessageType) CopyClone(key string, value interface{}) *AlertMessageType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AlertMessageType) Unset(key string) *AlertMessageType {
        switch key {
  case "Value":
   n.Value = nil
  case "Type":
   n.Type = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AlertMessageType")
        }
        return n
}

func (n *AlertMessageType) SetProperty(key string, value interface{}) *AlertMessageType {
        if n == nil {
                n, _ = AlertMessageTypePointer(AlertMessageType{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AlertMessageType")
        }
        return n
}

  func (s *AlertMessageType) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *AlertMessageType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }

  // XXXXX
func (t *GradingAssignment) CopyString(key string, value interface{}) *GradingAssignment {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *GradingAssignment) CopyClone(key string, value interface{}) *GradingAssignment {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *GradingAssignment) Unset(key string) *GradingAssignment {
        switch key {
  case "LearningStandardList":
   n.LearningStandardList = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "DueDate":
   n.DueDate = nil
  case "LevelAssessed":
   n.LevelAssessed = nil
  case "StudentPersonalRefIdList":
   n.StudentPersonalRefIdList = nil
  case "Weight":
   n.Weight = nil
  case "Description":
   n.Description = nil
  case "DetailedDescriptionBinary":
   n.DetailedDescriptionBinary = nil
  case "GradingCategory":
   n.GradingCategory = nil
  case "TeachingGroupRefId":
   n.TeachingGroupRefId = nil
  case "RefId":
   n.RefId = nil
  case "MaxAttemptsAllowed":
   n.MaxAttemptsAllowed = nil
  case "SubAssignmentList":
   n.SubAssignmentList = nil
  case "RubricScoringGuide":
   n.RubricScoringGuide = nil
  case "PointsPossible":
   n.PointsPossible = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "DetailedDescriptionURL":
   n.DetailedDescriptionURL = nil
  case "PrerequisiteList":
   n.PrerequisiteList = nil
  case "CreateDate":
   n.CreateDate = nil
  case "AssignmentPurpose":
   n.AssignmentPurpose = nil
  case "AssessmentType":
   n.AssessmentType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GradingAssignment")
        }
        return n
}

func (n *GradingAssignment) SetProperty(key string, value interface{}) *GradingAssignment {
        if n == nil {
                n, _ = GradingAssignmentPointer(GradingAssignment{})
        }
        switch key {
    case "LearningStandardList":
    if v, ok:= LearningStandardListTypePointer(value); ok {
      n.LearningStandardList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "DueDate":
    
    if v, ok:= StringPointer(value); ok {
      n.DueDate = ((*String)(v))
      }
    case "LevelAssessed":
    
    if v, ok:= StringPointer(value); ok {
      n.LevelAssessed = ((*String)(v))
      }
    case "StudentPersonalRefIdList":
    if v, ok:= StudentsTypePointer(value); ok {
      n.StudentPersonalRefIdList = v
      }
    case "Weight":
    
    if v, ok:= FloatPointer(value); ok {
      n.Weight = ((*Float)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "DetailedDescriptionBinary":
    
    if v, ok:= StringPointer(value); ok {
      n.DetailedDescriptionBinary = ((*String)(v))
      }
    case "GradingCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.GradingCategory = ((*String)(v))
      }
    case "TeachingGroupRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TeachingGroupRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "MaxAttemptsAllowed":
    
    if v, ok:= IntPointer(value); ok {
      n.MaxAttemptsAllowed = ((*Int)(v))
      }
    case "SubAssignmentList":
    if v, ok:= AssignmentListTypePointer(value); ok {
      n.SubAssignmentList = v
      }
    case "RubricScoringGuide":
    if v, ok:= GenericRubricTypePointer(value); ok {
      n.RubricScoringGuide = v
      }
    case "PointsPossible":
    
    if v, ok:= IntPointer(value); ok {
      n.PointsPossible = ((*Int)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "DetailedDescriptionURL":
    
    if v, ok:= StringPointer(value); ok {
      n.DetailedDescriptionURL = ((*String)(v))
      }
    case "PrerequisiteList":
    if v, ok:= PrerequisitesTypePointer(value); ok {
      n.PrerequisiteList = v
      }
    case "CreateDate":
    
    if v, ok:= StringPointer(value); ok {
      n.CreateDate = ((*String)(v))
      }
    case "AssignmentPurpose":
    
    if v, ok:= StringPointer(value); ok {
      n.AssignmentPurpose = ((*String)(v))
      }
    case "AssessmentType":
    
    if v, ok:= StringPointer(value); ok {
      n.AssessmentType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GradingAssignment")
        }
        return n
}

  func (s *GradingAssignment) LearningStandardListRead() *LearningStandardListType {
    if s.LearningStandardList == nil {
     if v, ok:= LearningStandardListTypePointer(LearningStandardListType{}); ok {
      s.LearningStandardList = v
      }
      }
      return s.LearningStandardList
    }
  func (s *GradingAssignment) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *GradingAssignment) DueDateRead() *String {
    if s.DueDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.DueDate = ((*String)(v))
      }
      }
      return s.DueDate
    }
  func (s *GradingAssignment) LevelAssessedRead() *String {
    if s.LevelAssessed == nil {
    if v, ok:= StringPointer(""); ok {
      s.LevelAssessed = ((*String)(v))
      }
      }
      return s.LevelAssessed
    }
  func (s *GradingAssignment) StudentPersonalRefIdListRead() *StudentsType {
    if s.StudentPersonalRefIdList == nil {
     if v, ok:= StudentsTypePointer(StudentsType{}); ok {
      s.StudentPersonalRefIdList = v
      }
      }
      return s.StudentPersonalRefIdList
    }
  func (s *GradingAssignment) WeightRead() *Float {
    if s.Weight == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Weight = ((*Float)(v))
      }
      }
      return s.Weight
    }
  func (s *GradingAssignment) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *GradingAssignment) DetailedDescriptionBinaryRead() *String {
    if s.DetailedDescriptionBinary == nil {
    if v, ok:= StringPointer(""); ok {
      s.DetailedDescriptionBinary = ((*String)(v))
      }
      }
      return s.DetailedDescriptionBinary
    }
  func (s *GradingAssignment) GradingCategoryRead() *String {
    if s.GradingCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.GradingCategory = ((*String)(v))
      }
      }
      return s.GradingCategory
    }
  func (s *GradingAssignment) TeachingGroupRefIdRead() *String {
    if s.TeachingGroupRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TeachingGroupRefId = ((*String)(v))
      }
      }
      return s.TeachingGroupRefId
    }
  func (s *GradingAssignment) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *GradingAssignment) MaxAttemptsAllowedRead() *Int {
    if s.MaxAttemptsAllowed == nil {
    if v, ok:= IntPointer(0); ok {
      s.MaxAttemptsAllowed = ((*Int)(v))
      }
      }
      return s.MaxAttemptsAllowed
    }
  func (s *GradingAssignment) SubAssignmentListRead() *AssignmentListType {
    if s.SubAssignmentList == nil {
     if v, ok:= AssignmentListTypePointer(AssignmentListType{}); ok {
      s.SubAssignmentList = v
      }
      }
      return s.SubAssignmentList
    }
  func (s *GradingAssignment) RubricScoringGuideRead() *GenericRubricType {
    if s.RubricScoringGuide == nil {
     if v, ok:= GenericRubricTypePointer(GenericRubricType{}); ok {
      s.RubricScoringGuide = v
      }
      }
      return s.RubricScoringGuide
    }
  func (s *GradingAssignment) PointsPossibleRead() *Int {
    if s.PointsPossible == nil {
    if v, ok:= IntPointer(0); ok {
      s.PointsPossible = ((*Int)(v))
      }
      }
      return s.PointsPossible
    }
  func (s *GradingAssignment) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *GradingAssignment) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *GradingAssignment) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *GradingAssignment) DetailedDescriptionURLRead() *String {
    if s.DetailedDescriptionURL == nil {
    if v, ok:= StringPointer(""); ok {
      s.DetailedDescriptionURL = ((*String)(v))
      }
      }
      return s.DetailedDescriptionURL
    }
  func (s *GradingAssignment) PrerequisiteListRead() *PrerequisitesType {
    if s.PrerequisiteList == nil {
     if v, ok:= PrerequisitesTypePointer(PrerequisitesType{}); ok {
      s.PrerequisiteList = v
      }
      }
      return s.PrerequisiteList
    }
  func (s *GradingAssignment) CreateDateRead() *String {
    if s.CreateDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.CreateDate = ((*String)(v))
      }
      }
      return s.CreateDate
    }
  func (s *GradingAssignment) AssignmentPurposeRead() *String {
    if s.AssignmentPurpose == nil {
    if v, ok:= StringPointer(""); ok {
      s.AssignmentPurpose = ((*String)(v))
      }
      }
      return s.AssignmentPurpose
    }
  func (s *GradingAssignment) AssessmentTypeRead() *String {
    if s.AssessmentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.AssessmentType = ((*String)(v))
      }
      }
      return s.AssessmentType
    }

  // XXXXX
func (t *WellbeingEvent) CopyString(key string, value interface{}) *WellbeingEvent {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *WellbeingEvent) CopyClone(key string, value interface{}) *WellbeingEvent {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *WellbeingEvent) Unset(key string) *WellbeingEvent {
        switch key {
  case "WellbeingEventLocationDetails":
   n.WellbeingEventLocationDetails = nil
  case "WellbeingEventCategoryList":
   n.WellbeingEventCategoryList = nil
  case "WellbeingEventTime":
   n.WellbeingEventTime = nil
  case "PersonInvolvementList":
   n.PersonInvolvementList = nil
  case "EventId":
   n.EventId = nil
  case "Status":
   n.Status = nil
  case "DocumentList":
   n.DocumentList = nil
  case "GroupIndicator":
   n.GroupIndicator = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "WellbeingEventCreationTimeStamp":
   n.WellbeingEventCreationTimeStamp = nil
  case "ReportingStaffRefId":
   n.ReportingStaffRefId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "WellbeingEventNotes":
   n.WellbeingEventNotes = nil
  case "WellbeingEventTimePeriod":
   n.WellbeingEventTimePeriod = nil
  case "WellbeingEventCategoryClass":
   n.WellbeingEventCategoryClass = nil
  case "FollowUpActionList":
   n.FollowUpActionList = nil
  case "RefId":
   n.RefId = nil
  case "WellbeingEventDate":
   n.WellbeingEventDate = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "ConfidentialFlag":
   n.ConfidentialFlag = nil
  case "WellbeingEventDescription":
   n.WellbeingEventDescription = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingEvent")
        }
        return n
}

func (n *WellbeingEvent) SetProperty(key string, value interface{}) *WellbeingEvent {
        if n == nil {
                n, _ = WellbeingEventPointer(WellbeingEvent{})
        }
        switch key {
    case "WellbeingEventLocationDetails":
    if v, ok:= WellbeingEventLocationDetailsTypePointer(value); ok {
      n.WellbeingEventLocationDetails = v
      }
    case "WellbeingEventCategoryList":
    if v, ok:= WellbeingEventCategoryListTypePointer(value); ok {
      n.WellbeingEventCategoryList = v
      }
    case "WellbeingEventTime":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingEventTime = ((*String)(v))
      }
    case "PersonInvolvementList":
    if v, ok:= PersonInvolvementListTypePointer(value); ok {
      n.PersonInvolvementList = v
      }
    case "EventId":
    
    if v, ok:= StringPointer(value); ok {
      n.EventId = ((*LocalIdType)(v))
      }
    case "Status":
        if !CodesetContains(AUCodeSetsWellbeingStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
    case "DocumentList":
    if v, ok:= WellbeingDocumentListTypePointer(value); ok {
      n.DocumentList = v
      }
    case "GroupIndicator":
    
    if v, ok:= BoolPointer(value); ok {
      n.GroupIndicator = ((*Bool)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "WellbeingEventCreationTimeStamp":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingEventCreationTimeStamp = ((*String)(v))
      }
    case "ReportingStaffRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.ReportingStaffRefId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "WellbeingEventNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingEventNotes = ((*String)(v))
      }
    case "WellbeingEventTimePeriod":
        if !CodesetContains(AUCodeSetsWellbeingEventTimePeriodType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingEventTimePeriodType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.WellbeingEventTimePeriod = ((*AUCodeSetsWellbeingEventTimePeriodType)(v))
      }
    case "WellbeingEventCategoryClass":
        if !CodesetContains(AUCodeSetsWellbeingEventCategoryClassType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingEventCategoryClassType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.WellbeingEventCategoryClass = ((*AUCodeSetsWellbeingEventCategoryClassType)(v))
      }
    case "FollowUpActionList":
    if v, ok:= FollowUpActionListTypePointer(value); ok {
      n.FollowUpActionList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "WellbeingEventDate":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingEventDate = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "ConfidentialFlag":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ConfidentialFlag = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "WellbeingEventDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingEventDescription = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingEvent")
        }
        return n
}

  func (s *WellbeingEvent) WellbeingEventLocationDetailsRead() *WellbeingEventLocationDetailsType {
    if s.WellbeingEventLocationDetails == nil {
     if v, ok:= WellbeingEventLocationDetailsTypePointer(WellbeingEventLocationDetailsType{}); ok {
      s.WellbeingEventLocationDetails = v
      }
      }
      return s.WellbeingEventLocationDetails
    }
  func (s *WellbeingEvent) WellbeingEventCategoryListRead() *WellbeingEventCategoryListType {
    if s.WellbeingEventCategoryList == nil {
     if v, ok:= WellbeingEventCategoryListTypePointer(WellbeingEventCategoryListType{}); ok {
      s.WellbeingEventCategoryList = v
      }
      }
      return s.WellbeingEventCategoryList
    }
  func (s *WellbeingEvent) WellbeingEventTimeRead() *String {
    if s.WellbeingEventTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingEventTime = ((*String)(v))
      }
      }
      return s.WellbeingEventTime
    }
  func (s *WellbeingEvent) PersonInvolvementListRead() *PersonInvolvementListType {
    if s.PersonInvolvementList == nil {
     if v, ok:= PersonInvolvementListTypePointer(PersonInvolvementListType{}); ok {
      s.PersonInvolvementList = v
      }
      }
      return s.PersonInvolvementList
    }
  func (s *WellbeingEvent) EventIdRead() *LocalIdType {
    if s.EventId == nil {
    if v, ok:= StringPointer(""); ok {
      s.EventId = ((*LocalIdType)(v))
      }
      }
      return s.EventId
    }
  func (s *WellbeingEvent) StatusRead() *AUCodeSetsWellbeingStatusType {
    if s.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
      }
      return s.Status
    }
  func (s *WellbeingEvent) DocumentListRead() *WellbeingDocumentListType {
    if s.DocumentList == nil {
     if v, ok:= WellbeingDocumentListTypePointer(WellbeingDocumentListType{}); ok {
      s.DocumentList = v
      }
      }
      return s.DocumentList
    }
  func (s *WellbeingEvent) GroupIndicatorRead() *Bool {
    if s.GroupIndicator == nil {
    if v, ok:= BoolPointer(false); ok {
      s.GroupIndicator = ((*Bool)(v))
      }
      }
      return s.GroupIndicator
    }
  func (s *WellbeingEvent) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *WellbeingEvent) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *WellbeingEvent) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *WellbeingEvent) WellbeingEventCreationTimeStampRead() *String {
    if s.WellbeingEventCreationTimeStamp == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingEventCreationTimeStamp = ((*String)(v))
      }
      }
      return s.WellbeingEventCreationTimeStamp
    }
  func (s *WellbeingEvent) ReportingStaffRefIdRead() *String {
    if s.ReportingStaffRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReportingStaffRefId = ((*String)(v))
      }
      }
      return s.ReportingStaffRefId
    }
  func (s *WellbeingEvent) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *WellbeingEvent) WellbeingEventNotesRead() *String {
    if s.WellbeingEventNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingEventNotes = ((*String)(v))
      }
      }
      return s.WellbeingEventNotes
    }
  func (s *WellbeingEvent) WellbeingEventTimePeriodRead() *AUCodeSetsWellbeingEventTimePeriodType {
    if s.WellbeingEventTimePeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingEventTimePeriod = ((*AUCodeSetsWellbeingEventTimePeriodType)(v))
      }
      }
      return s.WellbeingEventTimePeriod
    }
  func (s *WellbeingEvent) WellbeingEventCategoryClassRead() *AUCodeSetsWellbeingEventCategoryClassType {
    if s.WellbeingEventCategoryClass == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingEventCategoryClass = ((*AUCodeSetsWellbeingEventCategoryClassType)(v))
      }
      }
      return s.WellbeingEventCategoryClass
    }
  func (s *WellbeingEvent) FollowUpActionListRead() *FollowUpActionListType {
    if s.FollowUpActionList == nil {
     if v, ok:= FollowUpActionListTypePointer(FollowUpActionListType{}); ok {
      s.FollowUpActionList = v
      }
      }
      return s.FollowUpActionList
    }
  func (s *WellbeingEvent) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *WellbeingEvent) WellbeingEventDateRead() *String {
    if s.WellbeingEventDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingEventDate = ((*String)(v))
      }
      }
      return s.WellbeingEventDate
    }
  func (s *WellbeingEvent) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *WellbeingEvent) ConfidentialFlagRead() *AUCodeSetsYesOrNoCategoryType {
    if s.ConfidentialFlag == nil {
    if v, ok:= StringPointer(""); ok {
      s.ConfidentialFlag = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.ConfidentialFlag
    }
  func (s *WellbeingEvent) WellbeingEventDescriptionRead() *String {
    if s.WellbeingEventDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingEventDescription = ((*String)(v))
      }
      }
      return s.WellbeingEventDescription
    }

  // XXXXX
func (t *EntityContactInfoType) CopyString(key string, value interface{}) *EntityContactInfoType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *EntityContactInfoType) CopyClone(key string, value interface{}) *EntityContactInfoType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *EntityContactInfoType) Unset(key string) *EntityContactInfoType {
        switch key {
  case "Address":
   n.Address = nil
  case "RegistrationDetails":
   n.RegistrationDetails = nil
  case "Role":
   n.Role = nil
  case "Email":
   n.Email = nil
  case "PhoneNumber":
   n.PhoneNumber = nil
  case "Qualifications":
   n.Qualifications = nil
  case "Name":
   n.Name = nil
  case "PositionTitle":
   n.PositionTitle = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EntityContactInfoType")
        }
        return n
}

func (n *EntityContactInfoType) SetProperty(key string, value interface{}) *EntityContactInfoType {
        if n == nil {
                n, _ = EntityContactInfoTypePointer(EntityContactInfoType{})
        }
        switch key {
    case "Address":
    if v, ok:= AddressTypePointer(value); ok {
      n.Address = v
      }
    case "RegistrationDetails":
    
    if v, ok:= StringPointer(value); ok {
      n.RegistrationDetails = ((*String)(v))
      }
    case "Role":
    
    if v, ok:= StringPointer(value); ok {
      n.Role = ((*String)(v))
      }
    case "Email":
    if v, ok:= EmailTypePointer(value); ok {
      n.Email = v
      }
    case "PhoneNumber":
    if v, ok:= PhoneNumberTypePointer(value); ok {
      n.PhoneNumber = v
      }
    case "Qualifications":
    
    if v, ok:= StringPointer(value); ok {
      n.Qualifications = ((*String)(v))
      }
    case "Name":
    if v, ok:= NameTypePointer(value); ok {
      n.Name = v
      }
    case "PositionTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.PositionTitle = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EntityContactInfoType")
        }
        return n
}

  func (s *EntityContactInfoType) AddressRead() *AddressType {
    if s.Address == nil {
     if v, ok:= AddressTypePointer(AddressType{}); ok {
      s.Address = v
      }
      }
      return s.Address
    }
  func (s *EntityContactInfoType) RegistrationDetailsRead() *String {
    if s.RegistrationDetails == nil {
    if v, ok:= StringPointer(""); ok {
      s.RegistrationDetails = ((*String)(v))
      }
      }
      return s.RegistrationDetails
    }
  func (s *EntityContactInfoType) RoleRead() *String {
    if s.Role == nil {
    if v, ok:= StringPointer(""); ok {
      s.Role = ((*String)(v))
      }
      }
      return s.Role
    }
  func (s *EntityContactInfoType) EmailRead() *EmailType {
    if s.Email == nil {
     if v, ok:= EmailTypePointer(EmailType{}); ok {
      s.Email = v
      }
      }
      return s.Email
    }
  func (s *EntityContactInfoType) PhoneNumberRead() *PhoneNumberType {
    if s.PhoneNumber == nil {
     if v, ok:= PhoneNumberTypePointer(PhoneNumberType{}); ok {
      s.PhoneNumber = v
      }
      }
      return s.PhoneNumber
    }
  func (s *EntityContactInfoType) QualificationsRead() *String {
    if s.Qualifications == nil {
    if v, ok:= StringPointer(""); ok {
      s.Qualifications = ((*String)(v))
      }
      }
      return s.Qualifications
    }
  func (s *EntityContactInfoType) NameRead() *NameType {
    if s.Name == nil {
     if v, ok:= NameTypePointer(NameType{}); ok {
      s.Name = v
      }
      }
      return s.Name
    }
  func (s *EntityContactInfoType) PositionTitleRead() *String {
    if s.PositionTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.PositionTitle = ((*String)(v))
      }
      }
      return s.PositionTitle
    }

  // XXXXX
func (t *StudentContactRelationship) CopyString(key string, value interface{}) *StudentContactRelationship {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentContactRelationship) CopyClone(key string, value interface{}) *StudentContactRelationship {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentContactRelationship) Unset(key string) *StudentContactRelationship {
        switch key {
  case "HouseholdList":
   n.HouseholdList = nil
  case "ContactSequenceSource":
   n.ContactSequenceSource = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "StudentContactRelationshipRefId":
   n.StudentContactRelationshipRefId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "Relationship":
   n.Relationship = nil
  case "MainlySpeaksEnglishAtHome":
   n.MainlySpeaksEnglishAtHome = nil
  case "ContactSequence":
   n.ContactSequence = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "ContactFlags":
   n.ContactFlags = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "StudentContactPersonalRefId":
   n.StudentContactPersonalRefId = nil
  case "ParentRelationshipStatus":
   n.ParentRelationshipStatus = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentContactRelationship")
        }
        return n
}

func (n *StudentContactRelationship) SetProperty(key string, value interface{}) *StudentContactRelationship {
        if n == nil {
                n, _ = StudentContactRelationshipPointer(StudentContactRelationship{})
        }
        switch key {
    case "HouseholdList":
    if v, ok:= HouseholdListTypePointer(value); ok {
      n.HouseholdList = v
      }
    case "ContactSequenceSource":
        if !CodesetContains(AUCodeSetsSourceCodeTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSourceCodeTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ContactSequenceSource = ((*AUCodeSetsSourceCodeTypeType)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*RefIdType)(v))
      }
    case "StudentContactRelationshipRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentContactRelationshipRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "Relationship":
    if v, ok:= RelationshipTypePointer(value); ok {
      n.Relationship = v
      }
    case "MainlySpeaksEnglishAtHome":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.MainlySpeaksEnglishAtHome = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ContactSequence":
    
    if v, ok:= IntPointer(value); ok {
      n.ContactSequence = ((*Int)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "ContactFlags":
    if v, ok:= ContactFlagsTypePointer(value); ok {
      n.ContactFlags = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "StudentContactPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentContactPersonalRefId = ((*RefIdType)(v))
      }
    case "ParentRelationshipStatus":
    
    if v, ok:= StringPointer(value); ok {
      n.ParentRelationshipStatus = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentContactRelationship")
        }
        return n
}

  func (s *StudentContactRelationship) HouseholdListRead() *HouseholdListType {
    if s.HouseholdList == nil {
     if v, ok:= HouseholdListTypePointer(HouseholdListType{}); ok {
      s.HouseholdList = v
      }
      }
      return s.HouseholdList
    }
  func (s *StudentContactRelationship) ContactSequenceSourceRead() *AUCodeSetsSourceCodeTypeType {
    if s.ContactSequenceSource == nil {
    if v, ok:= StringPointer(""); ok {
      s.ContactSequenceSource = ((*AUCodeSetsSourceCodeTypeType)(v))
      }
      }
      return s.ContactSequenceSource
    }
  func (s *StudentContactRelationship) StudentPersonalRefIdRead() *RefIdType {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*RefIdType)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *StudentContactRelationship) StudentContactRelationshipRefIdRead() *String {
    if s.StudentContactRelationshipRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentContactRelationshipRefId = ((*String)(v))
      }
      }
      return s.StudentContactRelationshipRefId
    }
  func (s *StudentContactRelationship) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentContactRelationship) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentContactRelationship) RelationshipRead() *RelationshipType {
    if s.Relationship == nil {
     if v, ok:= RelationshipTypePointer(RelationshipType{}); ok {
      s.Relationship = v
      }
      }
      return s.Relationship
    }
  func (s *StudentContactRelationship) MainlySpeaksEnglishAtHomeRead() *AUCodeSetsYesOrNoCategoryType {
    if s.MainlySpeaksEnglishAtHome == nil {
    if v, ok:= StringPointer(""); ok {
      s.MainlySpeaksEnglishAtHome = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.MainlySpeaksEnglishAtHome
    }
  func (s *StudentContactRelationship) ContactSequenceRead() *Int {
    if s.ContactSequence == nil {
    if v, ok:= IntPointer(0); ok {
      s.ContactSequence = ((*Int)(v))
      }
      }
      return s.ContactSequence
    }
  func (s *StudentContactRelationship) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *StudentContactRelationship) ContactFlagsRead() *ContactFlagsType {
    if s.ContactFlags == nil {
     if v, ok:= ContactFlagsTypePointer(ContactFlagsType{}); ok {
      s.ContactFlags = v
      }
      }
      return s.ContactFlags
    }
  func (s *StudentContactRelationship) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentContactRelationship) StudentContactPersonalRefIdRead() *RefIdType {
    if s.StudentContactPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentContactPersonalRefId = ((*RefIdType)(v))
      }
      }
      return s.StudentContactPersonalRefId
    }
  func (s *StudentContactRelationship) ParentRelationshipStatusRead() *String {
    if s.ParentRelationshipStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.ParentRelationshipStatus = ((*String)(v))
      }
      }
      return s.ParentRelationshipStatus
    }

  // XXXXX
func (t *StudentPersonal) CopyString(key string, value interface{}) *StudentPersonal {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentPersonal) CopyClone(key string, value interface{}) *StudentPersonal {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentPersonal) Unset(key string) *StudentPersonal {
        switch key {
  case "OtherIdList":
   n.OtherIdList = nil
  case "MedicalAlertMessages":
   n.MedicalAlertMessages = nil
  case "PrePrimaryEducation":
   n.PrePrimaryEducation = nil
  case "GiftedTalented":
   n.GiftedTalented = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "YoungCarersRole":
   n.YoungCarersRole = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "ElectronicIdList":
   n.ElectronicIdList = nil
  case "HomeSchooledStudent":
   n.HomeSchooledStudent = nil
  case "ESL":
   n.ESL = nil
  case "MostRecent":
   n.MostRecent = nil
  case "Disability":
   n.Disability = nil
  case "AlertMessages":
   n.AlertMessages = nil
  case "Sensitive":
   n.Sensitive = nil
  case "IntegrationAide":
   n.IntegrationAide = nil
  case "PersonInfo":
   n.PersonInfo = nil
  case "PrePrimaryEducationHours":
   n.PrePrimaryEducationHours = nil
  case "StateProvinceId":
   n.StateProvinceId = nil
  case "EconomicDisadvantage":
   n.EconomicDisadvantage = nil
  case "ESLDateAssessed":
   n.ESLDateAssessed = nil
  case "RefId":
   n.RefId = nil
  case "LocalId":
   n.LocalId = nil
  case "AcceptableUsePolicy":
   n.AcceptableUsePolicy = nil
  case "ESLSupport":
   n.ESLSupport = nil
  case "OnTimeGraduationYear":
   n.OnTimeGraduationYear = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "EducationSupport":
   n.EducationSupport = nil
  case "OfflineDelivery":
   n.OfflineDelivery = nil
  case "GraduationDate":
   n.GraduationDate = nil
  case "ProjectedGraduationYear":
   n.ProjectedGraduationYear = nil
  case "FirstAUSchoolEnrollment":
   n.FirstAUSchoolEnrollment = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentPersonal")
        }
        return n
}

func (n *StudentPersonal) SetProperty(key string, value interface{}) *StudentPersonal {
        if n == nil {
                n, _ = StudentPersonalPointer(StudentPersonal{})
        }
        switch key {
    case "OtherIdList":
    if v, ok:= OtherIdListTypePointer(value); ok {
      n.OtherIdList = v
      }
    case "MedicalAlertMessages":
    if v, ok:= MedicalAlertMessagesTypePointer(value); ok {
      n.MedicalAlertMessages = v
      }
    case "PrePrimaryEducation":
    
    if v, ok:= StringPointer(value); ok {
      n.PrePrimaryEducation = ((*String)(v))
      }
    case "GiftedTalented":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.GiftedTalented = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "YoungCarersRole":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.YoungCarersRole = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "ElectronicIdList":
    if v, ok:= ElectronicIdListTypePointer(value); ok {
      n.ElectronicIdList = v
      }
    case "HomeSchooledStudent":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.HomeSchooledStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ESL":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ESL = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "MostRecent":
    if v, ok:= StudentMostRecentContainerTypePointer(value); ok {
      n.MostRecent = v
      }
    case "Disability":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Disability = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "AlertMessages":
    if v, ok:= AlertMessagesTypePointer(value); ok {
      n.AlertMessages = v
      }
    case "Sensitive":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Sensitive = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "IntegrationAide":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.IntegrationAide = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "PersonInfo":
    if v, ok:= PersonInfoTypePointer(value); ok {
      n.PersonInfo = v
      }
    case "PrePrimaryEducationHours":
        if !CodesetContains(AUCodeSetsPrePrimaryHoursType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsPrePrimaryHoursType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PrePrimaryEducationHours = ((*AUCodeSetsPrePrimaryHoursType)(v))
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "EconomicDisadvantage":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.EconomicDisadvantage = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ESLDateAssessed":
    
    if v, ok:= StringPointer(value); ok {
      n.ESLDateAssessed = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "AcceptableUsePolicy":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AcceptableUsePolicy = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ESLSupport":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ESLSupport = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "OnTimeGraduationYear":
    
    if v, ok:= StringPointer(value); ok {
      n.OnTimeGraduationYear = ((*OnTimeGraduationYearType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "EducationSupport":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.EducationSupport = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "OfflineDelivery":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.OfflineDelivery = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "GraduationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.GraduationDate = ((*GraduationDateType)(v))
      }
    case "ProjectedGraduationYear":
    
    if v, ok:= StringPointer(value); ok {
      n.ProjectedGraduationYear = ((*ProjectedGraduationYearType)(v))
      }
    case "FirstAUSchoolEnrollment":
    
    if v, ok:= StringPointer(value); ok {
      n.FirstAUSchoolEnrollment = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentPersonal")
        }
        return n
}

  func (s *StudentPersonal) OtherIdListRead() *OtherIdListType {
    if s.OtherIdList == nil {
     if v, ok:= OtherIdListTypePointer(OtherIdListType{}); ok {
      s.OtherIdList = v
      }
      }
      return s.OtherIdList
    }
  func (s *StudentPersonal) MedicalAlertMessagesRead() *MedicalAlertMessagesType {
    if s.MedicalAlertMessages == nil {
     if v, ok:= MedicalAlertMessagesTypePointer(MedicalAlertMessagesType{}); ok {
      s.MedicalAlertMessages = v
      }
      }
      return s.MedicalAlertMessages
    }
  func (s *StudentPersonal) PrePrimaryEducationRead() *String {
    if s.PrePrimaryEducation == nil {
    if v, ok:= StringPointer(""); ok {
      s.PrePrimaryEducation = ((*String)(v))
      }
      }
      return s.PrePrimaryEducation
    }
  func (s *StudentPersonal) GiftedTalentedRead() *AUCodeSetsYesOrNoCategoryType {
    if s.GiftedTalented == nil {
    if v, ok:= StringPointer(""); ok {
      s.GiftedTalented = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.GiftedTalented
    }
  func (s *StudentPersonal) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentPersonal) YoungCarersRoleRead() *AUCodeSetsYesOrNoCategoryType {
    if s.YoungCarersRole == nil {
    if v, ok:= StringPointer(""); ok {
      s.YoungCarersRole = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.YoungCarersRole
    }
  func (s *StudentPersonal) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentPersonal) ElectronicIdListRead() *ElectronicIdListType {
    if s.ElectronicIdList == nil {
     if v, ok:= ElectronicIdListTypePointer(ElectronicIdListType{}); ok {
      s.ElectronicIdList = v
      }
      }
      return s.ElectronicIdList
    }
  func (s *StudentPersonal) HomeSchooledStudentRead() *AUCodeSetsYesOrNoCategoryType {
    if s.HomeSchooledStudent == nil {
    if v, ok:= StringPointer(""); ok {
      s.HomeSchooledStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.HomeSchooledStudent
    }
  func (s *StudentPersonal) ESLRead() *AUCodeSetsYesOrNoCategoryType {
    if s.ESL == nil {
    if v, ok:= StringPointer(""); ok {
      s.ESL = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.ESL
    }
  func (s *StudentPersonal) MostRecentRead() *StudentMostRecentContainerType {
    if s.MostRecent == nil {
     if v, ok:= StudentMostRecentContainerTypePointer(StudentMostRecentContainerType{}); ok {
      s.MostRecent = v
      }
      }
      return s.MostRecent
    }
  func (s *StudentPersonal) DisabilityRead() *AUCodeSetsYesOrNoCategoryType {
    if s.Disability == nil {
    if v, ok:= StringPointer(""); ok {
      s.Disability = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.Disability
    }
  func (s *StudentPersonal) AlertMessagesRead() *AlertMessagesType {
    if s.AlertMessages == nil {
     if v, ok:= AlertMessagesTypePointer(AlertMessagesType{}); ok {
      s.AlertMessages = v
      }
      }
      return s.AlertMessages
    }
  func (s *StudentPersonal) SensitiveRead() *AUCodeSetsYesOrNoCategoryType {
    if s.Sensitive == nil {
    if v, ok:= StringPointer(""); ok {
      s.Sensitive = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.Sensitive
    }
  func (s *StudentPersonal) IntegrationAideRead() *AUCodeSetsYesOrNoCategoryType {
    if s.IntegrationAide == nil {
    if v, ok:= StringPointer(""); ok {
      s.IntegrationAide = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.IntegrationAide
    }
  func (s *StudentPersonal) PersonInfoRead() *PersonInfoType {
    if s.PersonInfo == nil {
     if v, ok:= PersonInfoTypePointer(PersonInfoType{}); ok {
      s.PersonInfo = v
      }
      }
      return s.PersonInfo
    }
  func (s *StudentPersonal) PrePrimaryEducationHoursRead() *AUCodeSetsPrePrimaryHoursType {
    if s.PrePrimaryEducationHours == nil {
    if v, ok:= StringPointer(""); ok {
      s.PrePrimaryEducationHours = ((*AUCodeSetsPrePrimaryHoursType)(v))
      }
      }
      return s.PrePrimaryEducationHours
    }
  func (s *StudentPersonal) StateProvinceIdRead() *StateProvinceIdType {
    if s.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.StateProvinceId
    }
  func (s *StudentPersonal) EconomicDisadvantageRead() *AUCodeSetsYesOrNoCategoryType {
    if s.EconomicDisadvantage == nil {
    if v, ok:= StringPointer(""); ok {
      s.EconomicDisadvantage = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.EconomicDisadvantage
    }
  func (s *StudentPersonal) ESLDateAssessedRead() *String {
    if s.ESLDateAssessed == nil {
    if v, ok:= StringPointer(""); ok {
      s.ESLDateAssessed = ((*String)(v))
      }
      }
      return s.ESLDateAssessed
    }
  func (s *StudentPersonal) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StudentPersonal) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *StudentPersonal) AcceptableUsePolicyRead() *AUCodeSetsYesOrNoCategoryType {
    if s.AcceptableUsePolicy == nil {
    if v, ok:= StringPointer(""); ok {
      s.AcceptableUsePolicy = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.AcceptableUsePolicy
    }
  func (s *StudentPersonal) ESLSupportRead() *AUCodeSetsYesOrNoCategoryType {
    if s.ESLSupport == nil {
    if v, ok:= StringPointer(""); ok {
      s.ESLSupport = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.ESLSupport
    }
  func (s *StudentPersonal) OnTimeGraduationYearRead() *OnTimeGraduationYearType {
    if s.OnTimeGraduationYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.OnTimeGraduationYear = ((*OnTimeGraduationYearType)(v))
      }
      }
      return s.OnTimeGraduationYear
    }
  func (s *StudentPersonal) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentPersonal) EducationSupportRead() *AUCodeSetsYesOrNoCategoryType {
    if s.EducationSupport == nil {
    if v, ok:= StringPointer(""); ok {
      s.EducationSupport = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.EducationSupport
    }
  func (s *StudentPersonal) OfflineDeliveryRead() *AUCodeSetsYesOrNoCategoryType {
    if s.OfflineDelivery == nil {
    if v, ok:= StringPointer(""); ok {
      s.OfflineDelivery = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.OfflineDelivery
    }
  func (s *StudentPersonal) GraduationDateRead() *GraduationDateType {
    if s.GraduationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.GraduationDate = ((*GraduationDateType)(v))
      }
      }
      return s.GraduationDate
    }
  func (s *StudentPersonal) ProjectedGraduationYearRead() *ProjectedGraduationYearType {
    if s.ProjectedGraduationYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.ProjectedGraduationYear = ((*ProjectedGraduationYearType)(v))
      }
      }
      return s.ProjectedGraduationYear
    }
  func (s *StudentPersonal) FirstAUSchoolEnrollmentRead() *String {
    if s.FirstAUSchoolEnrollment == nil {
    if v, ok:= StringPointer(""); ok {
      s.FirstAUSchoolEnrollment = ((*String)(v))
      }
      }
      return s.FirstAUSchoolEnrollment
    }

  // XXXXX
func (t *StaffPersonal) CopyString(key string, value interface{}) *StaffPersonal {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StaffPersonal) CopyClone(key string, value interface{}) *StaffPersonal {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StaffPersonal) Unset(key string) *StaffPersonal {
        switch key {
  case "StateProvinceId":
   n.StateProvinceId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "PersonInfo":
   n.PersonInfo = nil
  case "Title":
   n.Title = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "LocalId":
   n.LocalId = nil
  case "MostRecent":
   n.MostRecent = nil
  case "EmploymentStatus":
   n.EmploymentStatus = nil
  case "RefId":
   n.RefId = nil
  case "OtherIdList":
   n.OtherIdList = nil
  case "ElectronicIdList":
   n.ElectronicIdList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffPersonal")
        }
        return n
}

func (n *StaffPersonal) SetProperty(key string, value interface{}) *StaffPersonal {
        if n == nil {
                n, _ = StaffPersonalPointer(StaffPersonal{})
        }
        switch key {
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "PersonInfo":
    if v, ok:= PersonInfoTypePointer(value); ok {
      n.PersonInfo = v
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.Title = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "MostRecent":
    if v, ok:= StaffMostRecentContainerTypePointer(value); ok {
      n.MostRecent = v
      }
    case "EmploymentStatus":
        if !CodesetContains(AUCodeSetsStaffStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStaffStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.EmploymentStatus = ((*AUCodeSetsStaffStatusType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "OtherIdList":
    if v, ok:= OtherIdListTypePointer(value); ok {
      n.OtherIdList = v
      }
    case "ElectronicIdList":
    if v, ok:= ElectronicIdListTypePointer(value); ok {
      n.ElectronicIdList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffPersonal")
        }
        return n
}

  func (s *StaffPersonal) StateProvinceIdRead() *StateProvinceIdType {
    if s.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.StateProvinceId
    }
  func (s *StaffPersonal) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StaffPersonal) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StaffPersonal) PersonInfoRead() *PersonInfoType {
    if s.PersonInfo == nil {
     if v, ok:= PersonInfoTypePointer(PersonInfoType{}); ok {
      s.PersonInfo = v
      }
      }
      return s.PersonInfo
    }
  func (s *StaffPersonal) TitleRead() *String {
    if s.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.Title = ((*String)(v))
      }
      }
      return s.Title
    }
  func (s *StaffPersonal) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StaffPersonal) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *StaffPersonal) MostRecentRead() *StaffMostRecentContainerType {
    if s.MostRecent == nil {
     if v, ok:= StaffMostRecentContainerTypePointer(StaffMostRecentContainerType{}); ok {
      s.MostRecent = v
      }
      }
      return s.MostRecent
    }
  func (s *StaffPersonal) EmploymentStatusRead() *AUCodeSetsStaffStatusType {
    if s.EmploymentStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.EmploymentStatus = ((*AUCodeSetsStaffStatusType)(v))
      }
      }
      return s.EmploymentStatus
    }
  func (s *StaffPersonal) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StaffPersonal) OtherIdListRead() *OtherIdListType {
    if s.OtherIdList == nil {
     if v, ok:= OtherIdListTypePointer(OtherIdListType{}); ok {
      s.OtherIdList = v
      }
      }
      return s.OtherIdList
    }
  func (s *StaffPersonal) ElectronicIdListRead() *ElectronicIdListType {
    if s.ElectronicIdList == nil {
     if v, ok:= ElectronicIdListTypePointer(ElectronicIdListType{}); ok {
      s.ElectronicIdList = v
      }
      }
      return s.ElectronicIdList
    }

  // XXXXX
func (t *SoftwareVendorInfoContainerType) CopyString(key string, value interface{}) *SoftwareVendorInfoContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SoftwareVendorInfoContainerType) CopyClone(key string, value interface{}) *SoftwareVendorInfoContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SoftwareVendorInfoContainerType) Unset(key string) *SoftwareVendorInfoContainerType {
        switch key {
  case "SoftwareVersion":
   n.SoftwareVersion = nil
  case "SoftwareProduct":
   n.SoftwareProduct = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SoftwareVendorInfoContainerType")
        }
        return n
}

func (n *SoftwareVendorInfoContainerType) SetProperty(key string, value interface{}) *SoftwareVendorInfoContainerType {
        if n == nil {
                n, _ = SoftwareVendorInfoContainerTypePointer(SoftwareVendorInfoContainerType{})
        }
        switch key {
    case "SoftwareVersion":
    
    if v, ok:= StringPointer(value); ok {
      n.SoftwareVersion = ((*String)(v))
      }
    case "SoftwareProduct":
    
    if v, ok:= StringPointer(value); ok {
      n.SoftwareProduct = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SoftwareVendorInfoContainerType")
        }
        return n
}

  func (s *SoftwareVendorInfoContainerType) SoftwareVersionRead() *String {
    if s.SoftwareVersion == nil {
    if v, ok:= StringPointer(""); ok {
      s.SoftwareVersion = ((*String)(v))
      }
      }
      return s.SoftwareVersion
    }
  func (s *SoftwareVendorInfoContainerType) SoftwareProductRead() *String {
    if s.SoftwareProduct == nil {
    if v, ok:= StringPointer(""); ok {
      s.SoftwareProduct = ((*String)(v))
      }
      }
      return s.SoftwareProduct
    }

  // XXXXX
func (t *AbstractContentPackageType_TextData) CopyString(key string, value interface{}) *AbstractContentPackageType_TextData {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AbstractContentPackageType_TextData) CopyClone(key string, value interface{}) *AbstractContentPackageType_TextData {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AbstractContentPackageType_TextData) Unset(key string) *AbstractContentPackageType_TextData {
        switch key {
  case "FileName":
   n.FileName = nil
  case "Value":
   n.Value = nil
  case "Description":
   n.Description = nil
  case "MIMEType":
   n.MIMEType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_TextData")
        }
        return n
}

func (n *AbstractContentPackageType_TextData) SetProperty(key string, value interface{}) *AbstractContentPackageType_TextData {
        if n == nil {
                n, _ = AbstractContentPackageType_TextDataPointer(AbstractContentPackageType_TextData{})
        }
        switch key {
    case "FileName":
    
    if v, ok:= StringPointer(value); ok {
      n.FileName = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "MIMEType":
    
    if v, ok:= StringPointer(value); ok {
      n.MIMEType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_TextData")
        }
        return n
}

  func (s *AbstractContentPackageType_TextData) FileNameRead() *String {
    if s.FileName == nil {
    if v, ok:= StringPointer(""); ok {
      s.FileName = ((*String)(v))
      }
      }
      return s.FileName
    }
  func (s *AbstractContentPackageType_TextData) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *AbstractContentPackageType_TextData) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *AbstractContentPackageType_TextData) MIMETypeRead() *String {
    if s.MIMEType == nil {
    if v, ok:= StringPointer(""); ok {
      s.MIMEType = ((*String)(v))
      }
      }
      return s.MIMEType
    }

  // XXXXX
func (t *StudentExitContainerType) CopyString(key string, value interface{}) *StudentExitContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentExitContainerType) CopyClone(key string, value interface{}) *StudentExitContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentExitContainerType) Unset(key string) *StudentExitContainerType {
        switch key {
  case "Code":
   n.Code = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentExitContainerType")
        }
        return n
}

func (n *StudentExitContainerType) SetProperty(key string, value interface{}) *StudentExitContainerType {
        if n == nil {
                n, _ = StudentExitContainerTypePointer(StudentExitContainerType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsExitWithdrawalTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsExitWithdrawalTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsExitWithdrawalTypeType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentExitContainerType")
        }
        return n
}

  func (s *StudentExitContainerType) CodeRead() *AUCodeSetsExitWithdrawalTypeType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsExitWithdrawalTypeType)(v))
      }
      }
      return s.Code
    }
  func (s *StudentExitContainerType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }

  // XXXXX
func (t *YearRangeType) CopyString(key string, value interface{}) *YearRangeType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *YearRangeType) CopyClone(key string, value interface{}) *YearRangeType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *YearRangeType) Unset(key string) *YearRangeType {
        switch key {
  case "Start":
   n.Start = nil
  case "End":
   n.End = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "YearRangeType")
        }
        return n
}

func (n *YearRangeType) SetProperty(key string, value interface{}) *YearRangeType {
        if n == nil {
                n, _ = YearRangeTypePointer(YearRangeType{})
        }
        switch key {
    case "Start":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.Start = v
      }
    case "End":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.End = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "YearRangeType")
        }
        return n
}

  func (s *YearRangeType) StartRead() *YearLevelType {
    if s.Start == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.Start = v
      }
      }
      return s.Start
    }
  func (s *YearRangeType) EndRead() *YearLevelType {
    if s.End == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.End = v
      }
      }
      return s.End
    }

  // XXXXX
func (t *LearningStandardDocument) CopyString(key string, value interface{}) *LearningStandardDocument {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LearningStandardDocument) CopyClone(key string, value interface{}) *LearningStandardDocument {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LearningStandardDocument) Unset(key string) *LearningStandardDocument {
        switch key {
  case "Copyright":
   n.Copyright = nil
  case "RelatedLearningStandards":
   n.RelatedLearningStandards = nil
  case "Authors":
   n.Authors = nil
  case "Description":
   n.Description = nil
  case "DocumentDate":
   n.DocumentDate = nil
  case "RefId":
   n.RefId = nil
  case "RichDescription":
   n.RichDescription = nil
  case "EndOfLifeDate":
   n.EndOfLifeDate = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "YearLevels":
   n.YearLevels = nil
  case "Source":
   n.Source = nil
  case "RepositoryDate":
   n.RepositoryDate = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "LearningStandardItemRefId":
   n.LearningStandardItemRefId = nil
  case "OrganizationContactPoint":
   n.OrganizationContactPoint = nil
  case "LocalAdoptionDate":
   n.LocalAdoptionDate = nil
  case "LocalArchiveDate":
   n.LocalArchiveDate = nil
  case "Title":
   n.Title = nil
  case "SubjectAreas":
   n.SubjectAreas = nil
  case "DocumentStatus":
   n.DocumentStatus = nil
  case "Organizations":
   n.Organizations = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningStandardDocument")
        }
        return n
}

func (n *LearningStandardDocument) SetProperty(key string, value interface{}) *LearningStandardDocument {
        if n == nil {
                n, _ = LearningStandardDocumentPointer(LearningStandardDocument{})
        }
        switch key {
    case "Copyright":
    if v, ok:= CopyRightContainerTypePointer(value); ok {
      n.Copyright = v
      }
    case "RelatedLearningStandards":
    if v, ok:= LearningStandardsDocumentTypePointer(value); ok {
      n.RelatedLearningStandards = v
      }
    case "Authors":
    if v, ok:= AuthorsTypePointer(value); ok {
      n.Authors = v
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "DocumentDate":
    
    if v, ok:= StringPointer(value); ok {
      n.DocumentDate = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "RichDescription":
    if v, ok:= AbstractContentElementTypePointer(value); ok {
      n.RichDescription = v
      }
    case "EndOfLifeDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EndOfLifeDate = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.YearLevels = v
      }
    case "Source":
    
    if v, ok:= StringPointer(value); ok {
      n.Source = ((*String)(v))
      }
    case "RepositoryDate":
    
    if v, ok:= StringPointer(value); ok {
      n.RepositoryDate = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "LearningStandardItemRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.LearningStandardItemRefId = ((*String)(v))
      }
    case "OrganizationContactPoint":
    
    if v, ok:= StringPointer(value); ok {
      n.OrganizationContactPoint = ((*String)(v))
      }
    case "LocalAdoptionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalAdoptionDate = ((*String)(v))
      }
    case "LocalArchiveDate":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalArchiveDate = ((*String)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.Title = ((*String)(v))
      }
    case "SubjectAreas":
    if v, ok:= ACStrandAreaListTypePointer(value); ok {
      n.SubjectAreas = v
      }
    case "DocumentStatus":
    
    if v, ok:= StringPointer(value); ok {
      n.DocumentStatus = ((*String)(v))
      }
    case "Organizations":
    if v, ok:= OrganizationsTypePointer(value); ok {
      n.Organizations = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningStandardDocument")
        }
        return n
}

  func (s *LearningStandardDocument) CopyrightRead() *CopyRightContainerType {
    if s.Copyright == nil {
     if v, ok:= CopyRightContainerTypePointer(CopyRightContainerType{}); ok {
      s.Copyright = v
      }
      }
      return s.Copyright
    }
  func (s *LearningStandardDocument) RelatedLearningStandardsRead() *LearningStandardsDocumentType {
    if s.RelatedLearningStandards == nil {
     if v, ok:= LearningStandardsDocumentTypePointer(LearningStandardsDocumentType{}); ok {
      s.RelatedLearningStandards = v
      }
      }
      return s.RelatedLearningStandards
    }
  func (s *LearningStandardDocument) AuthorsRead() *AuthorsType {
    if s.Authors == nil {
     if v, ok:= AuthorsTypePointer(AuthorsType{}); ok {
      s.Authors = v
      }
      }
      return s.Authors
    }
  func (s *LearningStandardDocument) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *LearningStandardDocument) DocumentDateRead() *String {
    if s.DocumentDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.DocumentDate = ((*String)(v))
      }
      }
      return s.DocumentDate
    }
  func (s *LearningStandardDocument) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *LearningStandardDocument) RichDescriptionRead() *AbstractContentElementType {
    if s.RichDescription == nil {
     if v, ok:= AbstractContentElementTypePointer(AbstractContentElementType{}); ok {
      s.RichDescription = v
      }
      }
      return s.RichDescription
    }
  func (s *LearningStandardDocument) EndOfLifeDateRead() *String {
    if s.EndOfLifeDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndOfLifeDate = ((*String)(v))
      }
      }
      return s.EndOfLifeDate
    }
  func (s *LearningStandardDocument) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *LearningStandardDocument) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *LearningStandardDocument) YearLevelsRead() *YearLevelsType {
    if s.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.YearLevels = v
      }
      }
      return s.YearLevels
    }
  func (s *LearningStandardDocument) SourceRead() *String {
    if s.Source == nil {
    if v, ok:= StringPointer(""); ok {
      s.Source = ((*String)(v))
      }
      }
      return s.Source
    }
  func (s *LearningStandardDocument) RepositoryDateRead() *String {
    if s.RepositoryDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.RepositoryDate = ((*String)(v))
      }
      }
      return s.RepositoryDate
    }
  func (s *LearningStandardDocument) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *LearningStandardDocument) LearningStandardItemRefIdRead() *String {
    if s.LearningStandardItemRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LearningStandardItemRefId = ((*String)(v))
      }
      }
      return s.LearningStandardItemRefId
    }
  func (s *LearningStandardDocument) OrganizationContactPointRead() *String {
    if s.OrganizationContactPoint == nil {
    if v, ok:= StringPointer(""); ok {
      s.OrganizationContactPoint = ((*String)(v))
      }
      }
      return s.OrganizationContactPoint
    }
  func (s *LearningStandardDocument) LocalAdoptionDateRead() *String {
    if s.LocalAdoptionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalAdoptionDate = ((*String)(v))
      }
      }
      return s.LocalAdoptionDate
    }
  func (s *LearningStandardDocument) LocalArchiveDateRead() *String {
    if s.LocalArchiveDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalArchiveDate = ((*String)(v))
      }
      }
      return s.LocalArchiveDate
    }
  func (s *LearningStandardDocument) TitleRead() *String {
    if s.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.Title = ((*String)(v))
      }
      }
      return s.Title
    }
  func (s *LearningStandardDocument) SubjectAreasRead() *ACStrandAreaListType {
    if s.SubjectAreas == nil {
     if v, ok:= ACStrandAreaListTypePointer(ACStrandAreaListType{}); ok {
      s.SubjectAreas = v
      }
      }
      return s.SubjectAreas
    }
  func (s *LearningStandardDocument) DocumentStatusRead() *String {
    if s.DocumentStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.DocumentStatus = ((*String)(v))
      }
      }
      return s.DocumentStatus
    }
  func (s *LearningStandardDocument) OrganizationsRead() *OrganizationsType {
    if s.Organizations == nil {
     if v, ok:= OrganizationsTypePointer(OrganizationsType{}); ok {
      s.Organizations = v
      }
      }
      return s.Organizations
    }

  // XXXXX
func (t *ProgramAvailabilityType) CopyString(key string, value interface{}) *ProgramAvailabilityType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ProgramAvailabilityType) CopyClone(key string, value interface{}) *ProgramAvailabilityType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ProgramAvailabilityType) Unset(key string) *ProgramAvailabilityType {
        switch key {
  case "OtherCodeList":
   n.OtherCodeList = nil
  case "Code":
   n.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ProgramAvailabilityType")
        }
        return n
}

func (n *ProgramAvailabilityType) SetProperty(key string, value interface{}) *ProgramAvailabilityType {
        if n == nil {
                n, _ = ProgramAvailabilityTypePointer(ProgramAvailabilityType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSets0211ProgramAvailabilityType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSets0211ProgramAvailabilityType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSets0211ProgramAvailabilityType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ProgramAvailabilityType")
        }
        return n
}

  func (s *ProgramAvailabilityType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }
  func (s *ProgramAvailabilityType) CodeRead() *AUCodeSets0211ProgramAvailabilityType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSets0211ProgramAvailabilityType)(v))
      }
      }
      return s.Code
    }

  // XXXXX
func (t *WellbeingPersonLink_PersonRefId) CopyString(key string, value interface{}) *WellbeingPersonLink_PersonRefId {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *WellbeingPersonLink_PersonRefId) CopyClone(key string, value interface{}) *WellbeingPersonLink_PersonRefId {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *WellbeingPersonLink_PersonRefId) Unset(key string) *WellbeingPersonLink_PersonRefId {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingPersonLink_PersonRefId")
        }
        return n
}

func (n *WellbeingPersonLink_PersonRefId) SetProperty(key string, value interface{}) *WellbeingPersonLink_PersonRefId {
        if n == nil {
                n, _ = WellbeingPersonLink_PersonRefIdPointer(WellbeingPersonLink_PersonRefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingPersonLink_PersonRefId")
        }
        return n
}

  func (s *WellbeingPersonLink_PersonRefId) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *WellbeingPersonLink_PersonRefId) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *LocalCodeType) CopyString(key string, value interface{}) *LocalCodeType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LocalCodeType) CopyClone(key string, value interface{}) *LocalCodeType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LocalCodeType) Unset(key string) *LocalCodeType {
        switch key {
  case "Element":
   n.Element = nil
  case "LocalisedCode":
   n.LocalisedCode = nil
  case "ListIndex":
   n.ListIndex = nil
  case "Description":
   n.Description = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocalCodeType")
        }
        return n
}

func (n *LocalCodeType) SetProperty(key string, value interface{}) *LocalCodeType {
        if n == nil {
                n, _ = LocalCodeTypePointer(LocalCodeType{})
        }
        switch key {
    case "Element":
    
    if v, ok:= StringPointer(value); ok {
      n.Element = ((*String)(v))
      }
    case "LocalisedCode":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalisedCode = ((*String)(v))
      }
    case "ListIndex":
    
    if v, ok:= IntPointer(value); ok {
      n.ListIndex = ((*Int)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocalCodeType")
        }
        return n
}

  func (s *LocalCodeType) ElementRead() *String {
    if s.Element == nil {
    if v, ok:= StringPointer(""); ok {
      s.Element = ((*String)(v))
      }
      }
      return s.Element
    }
  func (s *LocalCodeType) LocalisedCodeRead() *String {
    if s.LocalisedCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalisedCode = ((*String)(v))
      }
      }
      return s.LocalisedCode
    }
  func (s *LocalCodeType) ListIndexRead() *Int {
    if s.ListIndex == nil {
    if v, ok:= IntPointer(0); ok {
      s.ListIndex = ((*Int)(v))
      }
      }
      return s.ListIndex
    }
  func (s *LocalCodeType) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }

  // XXXXX
func (t *CreationUserType) CopyString(key string, value interface{}) *CreationUserType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CreationUserType) CopyClone(key string, value interface{}) *CreationUserType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CreationUserType) Unset(key string) *CreationUserType {
        switch key {
  case "Type":
   n.Type = nil
  case "UserId":
   n.UserId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CreationUserType")
        }
        return n
}

func (n *CreationUserType) SetProperty(key string, value interface{}) *CreationUserType {
        if n == nil {
                n, _ = CreationUserTypePointer(CreationUserType{})
        }
        switch key {
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
    case "UserId":
    
    if v, ok:= StringPointer(value); ok {
      n.UserId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CreationUserType")
        }
        return n
}

  func (s *CreationUserType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }
  func (s *CreationUserType) UserIdRead() *String {
    if s.UserId == nil {
    if v, ok:= StringPointer(""); ok {
      s.UserId = ((*String)(v))
      }
      }
      return s.UserId
    }

  // XXXXX
func (t *LifeCycleType_Created) CopyString(key string, value interface{}) *LifeCycleType_Created {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LifeCycleType_Created) CopyClone(key string, value interface{}) *LifeCycleType_Created {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LifeCycleType_Created) Unset(key string) *LifeCycleType_Created {
        switch key {
  case "DateTime":
   n.DateTime = nil
  case "Creators":
   n.Creators = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType_Created")
        }
        return n
}

func (n *LifeCycleType_Created) SetProperty(key string, value interface{}) *LifeCycleType_Created {
        if n == nil {
                n, _ = LifeCycleType_CreatedPointer(LifeCycleType_Created{})
        }
        switch key {
    case "DateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.DateTime = ((*String)(v))
      }
    case "Creators":
    if v, ok:= LifeCycleType_CreatorsPointer(value); ok {
      n.Creators = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType_Created")
        }
        return n
}

  func (s *LifeCycleType_Created) DateTimeRead() *String {
    if s.DateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.DateTime = ((*String)(v))
      }
      }
      return s.DateTime
    }
  func (s *LifeCycleType_Created) CreatorsRead() *LifeCycleType_Creators {
    if s.Creators == nil {
     if v, ok:= LifeCycleType_CreatorsPointer(LifeCycleType_Creators{}); ok {
      s.Creators = v
      }
      }
      return s.Creators
    }

  // XXXXX
func (t *MedicationType) CopyString(key string, value interface{}) *MedicationType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *MedicationType) CopyClone(key string, value interface{}) *MedicationType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *MedicationType) Unset(key string) *MedicationType {
        switch key {
  case "MedicationName":
   n.MedicationName = nil
  case "Dosage":
   n.Dosage = nil
  case "Method":
   n.Method = nil
  case "AdministrationInformation":
   n.AdministrationInformation = nil
  case "Frequency":
   n.Frequency = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MedicationType")
        }
        return n
}

func (n *MedicationType) SetProperty(key string, value interface{}) *MedicationType {
        if n == nil {
                n, _ = MedicationTypePointer(MedicationType{})
        }
        switch key {
    case "MedicationName":
    
    if v, ok:= StringPointer(value); ok {
      n.MedicationName = ((*String)(v))
      }
    case "Dosage":
    
    if v, ok:= StringPointer(value); ok {
      n.Dosage = ((*String)(v))
      }
    case "Method":
    
    if v, ok:= StringPointer(value); ok {
      n.Method = ((*String)(v))
      }
    case "AdministrationInformation":
    
    if v, ok:= StringPointer(value); ok {
      n.AdministrationInformation = ((*String)(v))
      }
    case "Frequency":
    
    if v, ok:= StringPointer(value); ok {
      n.Frequency = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MedicationType")
        }
        return n
}

  func (s *MedicationType) MedicationNameRead() *String {
    if s.MedicationName == nil {
    if v, ok:= StringPointer(""); ok {
      s.MedicationName = ((*String)(v))
      }
      }
      return s.MedicationName
    }
  func (s *MedicationType) DosageRead() *String {
    if s.Dosage == nil {
    if v, ok:= StringPointer(""); ok {
      s.Dosage = ((*String)(v))
      }
      }
      return s.Dosage
    }
  func (s *MedicationType) MethodRead() *String {
    if s.Method == nil {
    if v, ok:= StringPointer(""); ok {
      s.Method = ((*String)(v))
      }
      }
      return s.Method
    }
  func (s *MedicationType) AdministrationInformationRead() *String {
    if s.AdministrationInformation == nil {
    if v, ok:= StringPointer(""); ok {
      s.AdministrationInformation = ((*String)(v))
      }
      }
      return s.AdministrationInformation
    }
  func (s *MedicationType) FrequencyRead() *String {
    if s.Frequency == nil {
    if v, ok:= StringPointer(""); ok {
      s.Frequency = ((*String)(v))
      }
      }
      return s.Frequency
    }

  // XXXXX
func (t *ScheduledActivityOverrideType) CopyString(key string, value interface{}) *ScheduledActivityOverrideType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ScheduledActivityOverrideType) CopyClone(key string, value interface{}) *ScheduledActivityOverrideType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ScheduledActivityOverrideType) Unset(key string) *ScheduledActivityOverrideType {
        switch key {
  case "DateOfOverride":
   n.DateOfOverride = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScheduledActivityOverrideType")
        }
        return n
}

func (n *ScheduledActivityOverrideType) SetProperty(key string, value interface{}) *ScheduledActivityOverrideType {
        if n == nil {
                n, _ = ScheduledActivityOverrideTypePointer(ScheduledActivityOverrideType{})
        }
        switch key {
    case "DateOfOverride":
    
    if v, ok:= StringPointer(value); ok {
      n.DateOfOverride = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScheduledActivityOverrideType")
        }
        return n
}

  func (s *ScheduledActivityOverrideType) DateOfOverrideRead() *String {
    if s.DateOfOverride == nil {
    if v, ok:= StringPointer(""); ok {
      s.DateOfOverride = ((*String)(v))
      }
      }
      return s.DateOfOverride
    }
  func (s *ScheduledActivityOverrideType) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *ResourceBooking) CopyString(key string, value interface{}) *ResourceBooking {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ResourceBooking) CopyClone(key string, value interface{}) *ResourceBooking {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ResourceBooking) Unset(key string) *ResourceBooking {
        switch key {
  case "KeepOld":
   n.KeepOld = nil
  case "ResourceRefId":
   n.ResourceRefId = nil
  case "RefId":
   n.RefId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "FromPeriod":
   n.FromPeriod = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "Booker":
   n.Booker = nil
  case "ScheduledActivityRefId":
   n.ScheduledActivityRefId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "ResourceLocalId":
   n.ResourceLocalId = nil
  case "StartDateTime":
   n.StartDateTime = nil
  case "ToPeriod":
   n.ToPeriod = nil
  case "Reason":
   n.Reason = nil
  case "FinishDateTime":
   n.FinishDateTime = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceBooking")
        }
        return n
}

func (n *ResourceBooking) SetProperty(key string, value interface{}) *ResourceBooking {
        if n == nil {
                n, _ = ResourceBookingPointer(ResourceBooking{})
        }
        switch key {
    case "KeepOld":
    
    if v, ok:= BoolPointer(value); ok {
      n.KeepOld = ((*Bool)(v))
      }
    case "ResourceRefId":
    if v, ok:= ResourceBooking_ResourceRefIdPointer(value); ok {
      n.ResourceRefId = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "FromPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.FromPeriod = ((*LocalIdType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "Booker":
    
    if v, ok:= StringPointer(value); ok {
      n.Booker = ((*String)(v))
      }
    case "ScheduledActivityRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.ScheduledActivityRefId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "ResourceLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.ResourceLocalId = ((*LocalIdType)(v))
      }
    case "StartDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.StartDateTime = ((*String)(v))
      }
    case "ToPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.ToPeriod = ((*LocalIdType)(v))
      }
    case "Reason":
    
    if v, ok:= StringPointer(value); ok {
      n.Reason = ((*String)(v))
      }
    case "FinishDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.FinishDateTime = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceBooking")
        }
        return n
}

  func (s *ResourceBooking) KeepOldRead() *Bool {
    if s.KeepOld == nil {
    if v, ok:= BoolPointer(false); ok {
      s.KeepOld = ((*Bool)(v))
      }
      }
      return s.KeepOld
    }
  func (s *ResourceBooking) ResourceRefIdRead() *ResourceBooking_ResourceRefId {
    if s.ResourceRefId == nil {
     if v, ok:= ResourceBooking_ResourceRefIdPointer(ResourceBooking_ResourceRefId{}); ok {
      s.ResourceRefId = v
      }
      }
      return s.ResourceRefId
    }
  func (s *ResourceBooking) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *ResourceBooking) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *ResourceBooking) FromPeriodRead() *LocalIdType {
    if s.FromPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.FromPeriod = ((*LocalIdType)(v))
      }
      }
      return s.FromPeriod
    }
  func (s *ResourceBooking) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *ResourceBooking) BookerRead() *String {
    if s.Booker == nil {
    if v, ok:= StringPointer(""); ok {
      s.Booker = ((*String)(v))
      }
      }
      return s.Booker
    }
  func (s *ResourceBooking) ScheduledActivityRefIdRead() *String {
    if s.ScheduledActivityRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ScheduledActivityRefId = ((*String)(v))
      }
      }
      return s.ScheduledActivityRefId
    }
  func (s *ResourceBooking) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *ResourceBooking) ResourceLocalIdRead() *LocalIdType {
    if s.ResourceLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ResourceLocalId = ((*LocalIdType)(v))
      }
      }
      return s.ResourceLocalId
    }
  func (s *ResourceBooking) StartDateTimeRead() *String {
    if s.StartDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartDateTime = ((*String)(v))
      }
      }
      return s.StartDateTime
    }
  func (s *ResourceBooking) ToPeriodRead() *LocalIdType {
    if s.ToPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.ToPeriod = ((*LocalIdType)(v))
      }
      }
      return s.ToPeriod
    }
  func (s *ResourceBooking) ReasonRead() *String {
    if s.Reason == nil {
    if v, ok:= StringPointer(""); ok {
      s.Reason = ((*String)(v))
      }
      }
      return s.Reason
    }
  func (s *ResourceBooking) FinishDateTimeRead() *String {
    if s.FinishDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.FinishDateTime = ((*String)(v))
      }
      }
      return s.FinishDateTime
    }

  // XXXXX
func (t *FQContextualQuestionType) CopyString(key string, value interface{}) *FQContextualQuestionType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *FQContextualQuestionType) CopyClone(key string, value interface{}) *FQContextualQuestionType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *FQContextualQuestionType) Unset(key string) *FQContextualQuestionType {
        switch key {
  case "FQAnswer":
   n.FQAnswer = nil
  case "FQContext":
   n.FQContext = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FQContextualQuestionType")
        }
        return n
}

func (n *FQContextualQuestionType) SetProperty(key string, value interface{}) *FQContextualQuestionType {
        if n == nil {
                n, _ = FQContextualQuestionTypePointer(FQContextualQuestionType{})
        }
        switch key {
    case "FQAnswer":
    
    if v, ok:= StringPointer(value); ok {
      n.FQAnswer = ((*String)(v))
      }
    case "FQContext":
    
    if v, ok:= StringPointer(value); ok {
      n.FQContext = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FQContextualQuestionType")
        }
        return n
}

  func (s *FQContextualQuestionType) FQAnswerRead() *String {
    if s.FQAnswer == nil {
    if v, ok:= StringPointer(""); ok {
      s.FQAnswer = ((*String)(v))
      }
      }
      return s.FQAnswer
    }
  func (s *FQContextualQuestionType) FQContextRead() *String {
    if s.FQContext == nil {
    if v, ok:= StringPointer(""); ok {
      s.FQContext = ((*String)(v))
      }
      }
      return s.FQContext
    }

  // XXXXX
func (t *ProgramStatusType) CopyString(key string, value interface{}) *ProgramStatusType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ProgramStatusType) CopyClone(key string, value interface{}) *ProgramStatusType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ProgramStatusType) Unset(key string) *ProgramStatusType {
        switch key {
  case "Code":
   n.Code = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ProgramStatusType")
        }
        return n
}

func (n *ProgramStatusType) SetProperty(key string, value interface{}) *ProgramStatusType {
        if n == nil {
                n, _ = ProgramStatusTypePointer(ProgramStatusType{})
        }
        switch key {
    case "Code":
    
    if v, ok:= StringPointer(value); ok {
      n.Code = ((*String)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ProgramStatusType")
        }
        return n
}

  func (s *ProgramStatusType) CodeRead() *String {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*String)(v))
      }
      }
      return s.Code
    }
  func (s *ProgramStatusType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }

  // XXXXX
func (t *StudentAttendanceSummary) CopyString(key string, value interface{}) *StudentAttendanceSummary {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentAttendanceSummary) CopyClone(key string, value interface{}) *StudentAttendanceSummary {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentAttendanceSummary) Unset(key string) *StudentAttendanceSummary {
        switch key {
  case "FTE":
   n.FTE = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "ExcusedAbsences":
   n.ExcusedAbsences = nil
  case "UnexcusedAbsences":
   n.UnexcusedAbsences = nil
  case "DaysAttended":
   n.DaysAttended = nil
  case "StartDay":
   n.StartDay = nil
  case "StartDate":
   n.StartDate = nil
  case "EndDay":
   n.EndDay = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "EndDate":
   n.EndDate = nil
  case "StudentAttendanceSummaryRefId":
   n.StudentAttendanceSummaryRefId = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "DaysInMembership":
   n.DaysInMembership = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "DaysTardy":
   n.DaysTardy = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceSummary")
        }
        return n
}

func (n *StudentAttendanceSummary) SetProperty(key string, value interface{}) *StudentAttendanceSummary {
        if n == nil {
                n, _ = StudentAttendanceSummaryPointer(StudentAttendanceSummary{})
        }
        switch key {
    case "FTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.FTE = ((*Float)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "ExcusedAbsences":
    
    if v, ok:= FloatPointer(value); ok {
      n.ExcusedAbsences = ((*Float)(v))
      }
    case "UnexcusedAbsences":
    
    if v, ok:= FloatPointer(value); ok {
      n.UnexcusedAbsences = ((*Float)(v))
      }
    case "DaysAttended":
    
    if v, ok:= FloatPointer(value); ok {
      n.DaysAttended = ((*Float)(v))
      }
    case "StartDay":
    
    if v, ok:= IntPointer(value); ok {
      n.StartDay = ((*Int)(v))
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.StartDate = ((*String)(v))
      }
    case "EndDay":
    
    if v, ok:= IntPointer(value); ok {
      n.EndDay = ((*Int)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EndDate = ((*String)(v))
      }
    case "StudentAttendanceSummaryRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentAttendanceSummaryRefId = ((*String)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "DaysInMembership":
    
    if v, ok:= FloatPointer(value); ok {
      n.DaysInMembership = ((*Float)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "DaysTardy":
    
    if v, ok:= FloatPointer(value); ok {
      n.DaysTardy = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceSummary")
        }
        return n
}

  func (s *StudentAttendanceSummary) FTERead() *Float {
    if s.FTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.FTE = ((*Float)(v))
      }
      }
      return s.FTE
    }
  func (s *StudentAttendanceSummary) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentAttendanceSummary) ExcusedAbsencesRead() *Float {
    if s.ExcusedAbsences == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ExcusedAbsences = ((*Float)(v))
      }
      }
      return s.ExcusedAbsences
    }
  func (s *StudentAttendanceSummary) UnexcusedAbsencesRead() *Float {
    if s.UnexcusedAbsences == nil {
    if v, ok:= FloatPointer(0); ok {
      s.UnexcusedAbsences = ((*Float)(v))
      }
      }
      return s.UnexcusedAbsences
    }
  func (s *StudentAttendanceSummary) DaysAttendedRead() *Float {
    if s.DaysAttended == nil {
    if v, ok:= FloatPointer(0); ok {
      s.DaysAttended = ((*Float)(v))
      }
      }
      return s.DaysAttended
    }
  func (s *StudentAttendanceSummary) StartDayRead() *Int {
    if s.StartDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.StartDay = ((*Int)(v))
      }
      }
      return s.StartDay
    }
  func (s *StudentAttendanceSummary) StartDateRead() *String {
    if s.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartDate = ((*String)(v))
      }
      }
      return s.StartDate
    }
  func (s *StudentAttendanceSummary) EndDayRead() *Int {
    if s.EndDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.EndDay = ((*Int)(v))
      }
      }
      return s.EndDay
    }
  func (s *StudentAttendanceSummary) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentAttendanceSummary) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentAttendanceSummary) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *StudentAttendanceSummary) EndDateRead() *String {
    if s.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndDate = ((*String)(v))
      }
      }
      return s.EndDate
    }
  func (s *StudentAttendanceSummary) StudentAttendanceSummaryRefIdRead() *String {
    if s.StudentAttendanceSummaryRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentAttendanceSummaryRefId = ((*String)(v))
      }
      }
      return s.StudentAttendanceSummaryRefId
    }
  func (s *StudentAttendanceSummary) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *StudentAttendanceSummary) DaysInMembershipRead() *Float {
    if s.DaysInMembership == nil {
    if v, ok:= FloatPointer(0); ok {
      s.DaysInMembership = ((*Float)(v))
      }
      }
      return s.DaysInMembership
    }
  func (s *StudentAttendanceSummary) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *StudentAttendanceSummary) DaysTardyRead() *Float {
    if s.DaysTardy == nil {
    if v, ok:= FloatPointer(0); ok {
      s.DaysTardy = ((*Float)(v))
      }
      }
      return s.DaysTardy
    }

  // XXXXX
func (t *WellbeingPersonLink) CopyString(key string, value interface{}) *WellbeingPersonLink {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *WellbeingPersonLink) CopyClone(key string, value interface{}) *WellbeingPersonLink {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *WellbeingPersonLink) Unset(key string) *WellbeingPersonLink {
        switch key {
  case "RefId":
   n.RefId = nil
  case "OtherPersonId":
   n.OtherPersonId = nil
  case "FollowUpActionList":
   n.FollowUpActionList = nil
  case "LocalId":
   n.LocalId = nil
  case "WellbeingResponseRefId":
   n.WellbeingResponseRefId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "PersonRefId":
   n.PersonRefId = nil
  case "HowInvolved":
   n.HowInvolved = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "GroupId":
   n.GroupId = nil
  case "PersonRole":
   n.PersonRole = nil
  case "ShortName":
   n.ShortName = nil
  case "OtherPersonContactDetails":
   n.OtherPersonContactDetails = nil
  case "WellbeingEventRefId":
   n.WellbeingEventRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingPersonLink")
        }
        return n
}

func (n *WellbeingPersonLink) SetProperty(key string, value interface{}) *WellbeingPersonLink {
        if n == nil {
                n, _ = WellbeingPersonLinkPointer(WellbeingPersonLink{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "OtherPersonId":
    
    if v, ok:= StringPointer(value); ok {
      n.OtherPersonId = ((*LocalIdType)(v))
      }
    case "FollowUpActionList":
    if v, ok:= FollowUpActionListTypePointer(value); ok {
      n.FollowUpActionList = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "WellbeingResponseRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingResponseRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "PersonRefId":
    if v, ok:= WellbeingPersonLink_PersonRefIdPointer(value); ok {
      n.PersonRefId = v
      }
    case "HowInvolved":
    
    if v, ok:= StringPointer(value); ok {
      n.HowInvolved = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "GroupId":
    
    if v, ok:= StringPointer(value); ok {
      n.GroupId = ((*LocalIdType)(v))
      }
    case "PersonRole":
    
    if v, ok:= StringPointer(value); ok {
      n.PersonRole = ((*String)(v))
      }
    case "ShortName":
    
    if v, ok:= StringPointer(value); ok {
      n.ShortName = ((*String)(v))
      }
    case "OtherPersonContactDetails":
    
    if v, ok:= StringPointer(value); ok {
      n.OtherPersonContactDetails = ((*String)(v))
      }
    case "WellbeingEventRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingEventRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingPersonLink")
        }
        return n
}

  func (s *WellbeingPersonLink) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *WellbeingPersonLink) OtherPersonIdRead() *LocalIdType {
    if s.OtherPersonId == nil {
    if v, ok:= StringPointer(""); ok {
      s.OtherPersonId = ((*LocalIdType)(v))
      }
      }
      return s.OtherPersonId
    }
  func (s *WellbeingPersonLink) FollowUpActionListRead() *FollowUpActionListType {
    if s.FollowUpActionList == nil {
     if v, ok:= FollowUpActionListTypePointer(FollowUpActionListType{}); ok {
      s.FollowUpActionList = v
      }
      }
      return s.FollowUpActionList
    }
  func (s *WellbeingPersonLink) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *WellbeingPersonLink) WellbeingResponseRefIdRead() *String {
    if s.WellbeingResponseRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingResponseRefId = ((*String)(v))
      }
      }
      return s.WellbeingResponseRefId
    }
  func (s *WellbeingPersonLink) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *WellbeingPersonLink) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *WellbeingPersonLink) PersonRefIdRead() *WellbeingPersonLink_PersonRefId {
    if s.PersonRefId == nil {
     if v, ok:= WellbeingPersonLink_PersonRefIdPointer(WellbeingPersonLink_PersonRefId{}); ok {
      s.PersonRefId = v
      }
      }
      return s.PersonRefId
    }
  func (s *WellbeingPersonLink) HowInvolvedRead() *String {
    if s.HowInvolved == nil {
    if v, ok:= StringPointer(""); ok {
      s.HowInvolved = ((*String)(v))
      }
      }
      return s.HowInvolved
    }
  func (s *WellbeingPersonLink) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *WellbeingPersonLink) GroupIdRead() *LocalIdType {
    if s.GroupId == nil {
    if v, ok:= StringPointer(""); ok {
      s.GroupId = ((*LocalIdType)(v))
      }
      }
      return s.GroupId
    }
  func (s *WellbeingPersonLink) PersonRoleRead() *String {
    if s.PersonRole == nil {
    if v, ok:= StringPointer(""); ok {
      s.PersonRole = ((*String)(v))
      }
      }
      return s.PersonRole
    }
  func (s *WellbeingPersonLink) ShortNameRead() *String {
    if s.ShortName == nil {
    if v, ok:= StringPointer(""); ok {
      s.ShortName = ((*String)(v))
      }
      }
      return s.ShortName
    }
  func (s *WellbeingPersonLink) OtherPersonContactDetailsRead() *String {
    if s.OtherPersonContactDetails == nil {
    if v, ok:= StringPointer(""); ok {
      s.OtherPersonContactDetails = ((*String)(v))
      }
      }
      return s.OtherPersonContactDetails
    }
  func (s *WellbeingPersonLink) WellbeingEventRefIdRead() *String {
    if s.WellbeingEventRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingEventRefId = ((*String)(v))
      }
      }
      return s.WellbeingEventRefId
    }

  // XXXXX
func (t *CalendarDate) CopyString(key string, value interface{}) *CalendarDate {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CalendarDate) CopyClone(key string, value interface{}) *CalendarDate {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CalendarDate) Unset(key string) *CalendarDate {
        switch key {
  case "SchoolYear":
   n.SchoolYear = nil
  case "CalendarDateType":
   n.CalendarDateType = nil
  case "StudentAttendance":
   n.StudentAttendance = nil
  case "CalendarDateRefId":
   n.CalendarDateRefId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "CalendarDateNumber":
   n.CalendarDateNumber = nil
  case "TeacherAttendance":
   n.TeacherAttendance = nil
  case "Date":
   n.Date = nil
  case "AdministratorAttendance":
   n.AdministratorAttendance = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "CalendarSummaryRefId":
   n.CalendarSummaryRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CalendarDate")
        }
        return n
}

func (n *CalendarDate) SetProperty(key string, value interface{}) *CalendarDate {
        if n == nil {
                n, _ = CalendarDatePointer(CalendarDate{})
        }
        switch key {
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "CalendarDateType":
    if v, ok:= CalendarDateInfoTypePointer(value); ok {
      n.CalendarDateType = v
      }
    case "StudentAttendance":
    if v, ok:= AttendanceInfoTypePointer(value); ok {
      n.StudentAttendance = v
      }
    case "CalendarDateRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.CalendarDateRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "CalendarDateNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.CalendarDateNumber = ((*Int)(v))
      }
    case "TeacherAttendance":
    if v, ok:= AttendanceInfoTypePointer(value); ok {
      n.TeacherAttendance = v
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.Date = ((*String)(v))
      }
    case "AdministratorAttendance":
    if v, ok:= AttendanceInfoTypePointer(value); ok {
      n.AdministratorAttendance = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "CalendarSummaryRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.CalendarSummaryRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CalendarDate")
        }
        return n
}

  func (s *CalendarDate) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *CalendarDate) CalendarDateTypeRead() *CalendarDateInfoType {
    if s.CalendarDateType == nil {
     if v, ok:= CalendarDateInfoTypePointer(CalendarDateInfoType{}); ok {
      s.CalendarDateType = v
      }
      }
      return s.CalendarDateType
    }
  func (s *CalendarDate) StudentAttendanceRead() *AttendanceInfoType {
    if s.StudentAttendance == nil {
     if v, ok:= AttendanceInfoTypePointer(AttendanceInfoType{}); ok {
      s.StudentAttendance = v
      }
      }
      return s.StudentAttendance
    }
  func (s *CalendarDate) CalendarDateRefIdRead() *String {
    if s.CalendarDateRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.CalendarDateRefId = ((*String)(v))
      }
      }
      return s.CalendarDateRefId
    }
  func (s *CalendarDate) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *CalendarDate) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *CalendarDate) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *CalendarDate) CalendarDateNumberRead() *Int {
    if s.CalendarDateNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.CalendarDateNumber = ((*Int)(v))
      }
      }
      return s.CalendarDateNumber
    }
  func (s *CalendarDate) TeacherAttendanceRead() *AttendanceInfoType {
    if s.TeacherAttendance == nil {
     if v, ok:= AttendanceInfoTypePointer(AttendanceInfoType{}); ok {
      s.TeacherAttendance = v
      }
      }
      return s.TeacherAttendance
    }
  func (s *CalendarDate) DateRead() *String {
    if s.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.Date = ((*String)(v))
      }
      }
      return s.Date
    }
  func (s *CalendarDate) AdministratorAttendanceRead() *AttendanceInfoType {
    if s.AdministratorAttendance == nil {
     if v, ok:= AttendanceInfoTypePointer(AttendanceInfoType{}); ok {
      s.AdministratorAttendance = v
      }
      }
      return s.AdministratorAttendance
    }
  func (s *CalendarDate) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *CalendarDate) CalendarSummaryRefIdRead() *String {
    if s.CalendarSummaryRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.CalendarSummaryRefId = ((*String)(v))
      }
      }
      return s.CalendarSummaryRefId
    }

  // XXXXX
func (t *GridLocationType) CopyString(key string, value interface{}) *GridLocationType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *GridLocationType) CopyClone(key string, value interface{}) *GridLocationType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *GridLocationType) Unset(key string) *GridLocationType {
        switch key {
  case "Latitude":
   n.Latitude = nil
  case "Longitude":
   n.Longitude = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GridLocationType")
        }
        return n
}

func (n *GridLocationType) SetProperty(key string, value interface{}) *GridLocationType {
        if n == nil {
                n, _ = GridLocationTypePointer(GridLocationType{})
        }
        switch key {
    case "Latitude":
    
    if v, ok:= FloatPointer(value); ok {
      n.Latitude = ((*Float)(v))
      }
    case "Longitude":
    
    if v, ok:= FloatPointer(value); ok {
      n.Longitude = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GridLocationType")
        }
        return n
}

  func (s *GridLocationType) LatitudeRead() *Float {
    if s.Latitude == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Latitude = ((*Float)(v))
      }
      }
      return s.Latitude
    }
  func (s *GridLocationType) LongitudeRead() *Float {
    if s.Longitude == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Longitude = ((*Float)(v))
      }
      }
      return s.Longitude
    }

  // XXXXX
func (t *ComponentType) CopyString(key string, value interface{}) *ComponentType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ComponentType) CopyClone(key string, value interface{}) *ComponentType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ComponentType) Unset(key string) *ComponentType {
        switch key {
  case "AssociatedObjects":
   n.AssociatedObjects = nil
  case "Description":
   n.Description = nil
  case "Name":
   n.Name = nil
  case "Reference":
   n.Reference = nil
  case "Strategies":
   n.Strategies = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ComponentType")
        }
        return n
}

func (n *ComponentType) SetProperty(key string, value interface{}) *ComponentType {
        if n == nil {
                n, _ = ComponentTypePointer(ComponentType{})
        }
        switch key {
    case "AssociatedObjects":
    if v, ok:= AssociatedObjectsTypePointer(value); ok {
      n.AssociatedObjects = v
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.Name = ((*String)(v))
      }
    case "Reference":
    
    if v, ok:= StringPointer(value); ok {
      n.Reference = ((*String)(v))
      }
    case "Strategies":
    if v, ok:= StrategiesTypePointer(value); ok {
      n.Strategies = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ComponentType")
        }
        return n
}

  func (s *ComponentType) AssociatedObjectsRead() *AssociatedObjectsType {
    if s.AssociatedObjects == nil {
     if v, ok:= AssociatedObjectsTypePointer(AssociatedObjectsType{}); ok {
      s.AssociatedObjects = v
      }
      }
      return s.AssociatedObjects
    }
  func (s *ComponentType) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *ComponentType) NameRead() *String {
    if s.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.Name = ((*String)(v))
      }
      }
      return s.Name
    }
  func (s *ComponentType) ReferenceRead() *String {
    if s.Reference == nil {
    if v, ok:= StringPointer(""); ok {
      s.Reference = ((*String)(v))
      }
      }
      return s.Reference
    }
  func (s *ComponentType) StrategiesRead() *StrategiesType {
    if s.Strategies == nil {
     if v, ok:= StrategiesTypePointer(StrategiesType{}); ok {
      s.Strategies = v
      }
      }
      return s.Strategies
    }

  // XXXXX
func (t *PurchaseOrder) CopyString(key string, value interface{}) *PurchaseOrder {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PurchaseOrder) CopyClone(key string, value interface{}) *PurchaseOrder {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PurchaseOrder) Unset(key string) *PurchaseOrder {
        switch key {
  case "EmployeePersonalRefId":
   n.EmployeePersonalRefId = nil
  case "LocalId":
   n.LocalId = nil
  case "VendorInfoRefId":
   n.VendorInfoRefId = nil
  case "RefId":
   n.RefId = nil
  case "ChargedLocationInfoRefId":
   n.ChargedLocationInfoRefId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "TaxRate":
   n.TaxRate = nil
  case "TotalAmount":
   n.TotalAmount = nil
  case "PurchasingItems":
   n.PurchasingItems = nil
  case "OriginalPurchaseOrderRefId":
   n.OriginalPurchaseOrderRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "FormNumber":
   n.FormNumber = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "CreationDate":
   n.CreationDate = nil
  case "FullyDelivered":
   n.FullyDelivered = nil
  case "TaxAmount":
   n.TaxAmount = nil
  case "UpdateDate":
   n.UpdateDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PurchaseOrder")
        }
        return n
}

func (n *PurchaseOrder) SetProperty(key string, value interface{}) *PurchaseOrder {
        if n == nil {
                n, _ = PurchaseOrderPointer(PurchaseOrder{})
        }
        switch key {
    case "EmployeePersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.EmployeePersonalRefId = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "VendorInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.VendorInfoRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ChargedLocationInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.ChargedLocationInfoRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "TaxRate":
    
    if v, ok:= FloatPointer(value); ok {
      n.TaxRate = ((*Float)(v))
      }
    case "TotalAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.TotalAmount = v
      }
    case "PurchasingItems":
    if v, ok:= PurchasingItemsTypePointer(value); ok {
      n.PurchasingItems = v
      }
    case "OriginalPurchaseOrderRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.OriginalPurchaseOrderRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "FormNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.FormNumber = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "CreationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.CreationDate = ((*String)(v))
      }
    case "FullyDelivered":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.FullyDelivered = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "TaxAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.TaxAmount = v
      }
    case "UpdateDate":
    
    if v, ok:= StringPointer(value); ok {
      n.UpdateDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PurchaseOrder")
        }
        return n
}

  func (s *PurchaseOrder) EmployeePersonalRefIdRead() *String {
    if s.EmployeePersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.EmployeePersonalRefId = ((*String)(v))
      }
      }
      return s.EmployeePersonalRefId
    }
  func (s *PurchaseOrder) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *PurchaseOrder) VendorInfoRefIdRead() *String {
    if s.VendorInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.VendorInfoRefId = ((*String)(v))
      }
      }
      return s.VendorInfoRefId
    }
  func (s *PurchaseOrder) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *PurchaseOrder) ChargedLocationInfoRefIdRead() *String {
    if s.ChargedLocationInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ChargedLocationInfoRefId = ((*String)(v))
      }
      }
      return s.ChargedLocationInfoRefId
    }
  func (s *PurchaseOrder) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *PurchaseOrder) TaxRateRead() *Float {
    if s.TaxRate == nil {
    if v, ok:= FloatPointer(0); ok {
      s.TaxRate = ((*Float)(v))
      }
      }
      return s.TaxRate
    }
  func (s *PurchaseOrder) TotalAmountRead() *MonetaryAmountType {
    if s.TotalAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.TotalAmount = v
      }
      }
      return s.TotalAmount
    }
  func (s *PurchaseOrder) PurchasingItemsRead() *PurchasingItemsType {
    if s.PurchasingItems == nil {
     if v, ok:= PurchasingItemsTypePointer(PurchasingItemsType{}); ok {
      s.PurchasingItems = v
      }
      }
      return s.PurchasingItems
    }
  func (s *PurchaseOrder) OriginalPurchaseOrderRefIdRead() *String {
    if s.OriginalPurchaseOrderRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.OriginalPurchaseOrderRefId = ((*String)(v))
      }
      }
      return s.OriginalPurchaseOrderRefId
    }
  func (s *PurchaseOrder) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *PurchaseOrder) FormNumberRead() *String {
    if s.FormNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.FormNumber = ((*String)(v))
      }
      }
      return s.FormNumber
    }
  func (s *PurchaseOrder) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *PurchaseOrder) CreationDateRead() *String {
    if s.CreationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.CreationDate = ((*String)(v))
      }
      }
      return s.CreationDate
    }
  func (s *PurchaseOrder) FullyDeliveredRead() *AUCodeSetsYesOrNoCategoryType {
    if s.FullyDelivered == nil {
    if v, ok:= StringPointer(""); ok {
      s.FullyDelivered = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.FullyDelivered
    }
  func (s *PurchaseOrder) TaxAmountRead() *MonetaryAmountType {
    if s.TaxAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.TaxAmount = v
      }
      }
      return s.TaxAmount
    }
  func (s *PurchaseOrder) UpdateDateRead() *String {
    if s.UpdateDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.UpdateDate = ((*String)(v))
      }
      }
      return s.UpdateDate
    }

  // XXXXX
func (t *AbstractContentPackageType_Reference) CopyString(key string, value interface{}) *AbstractContentPackageType_Reference {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AbstractContentPackageType_Reference) CopyClone(key string, value interface{}) *AbstractContentPackageType_Reference {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AbstractContentPackageType_Reference) Unset(key string) *AbstractContentPackageType_Reference {
        switch key {
  case "Description":
   n.Description = nil
  case "MIMEType":
   n.MIMEType = nil
  case "URL":
   n.URL = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_Reference")
        }
        return n
}

func (n *AbstractContentPackageType_Reference) SetProperty(key string, value interface{}) *AbstractContentPackageType_Reference {
        if n == nil {
                n, _ = AbstractContentPackageType_ReferencePointer(AbstractContentPackageType_Reference{})
        }
        switch key {
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "MIMEType":
    
    if v, ok:= StringPointer(value); ok {
      n.MIMEType = ((*String)(v))
      }
    case "URL":
    
    if v, ok:= StringPointer(value); ok {
      n.URL = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_Reference")
        }
        return n
}

  func (s *AbstractContentPackageType_Reference) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *AbstractContentPackageType_Reference) MIMETypeRead() *String {
    if s.MIMEType == nil {
    if v, ok:= StringPointer(""); ok {
      s.MIMEType = ((*String)(v))
      }
      }
      return s.MIMEType
    }
  func (s *AbstractContentPackageType_Reference) URLRead() *String {
    if s.URL == nil {
    if v, ok:= StringPointer(""); ok {
      s.URL = ((*String)(v))
      }
      }
      return s.URL
    }

  // XXXXX
func (t *Invoice) CopyString(key string, value interface{}) *Invoice {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *Invoice) CopyClone(key string, value interface{}) *Invoice {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *Invoice) Unset(key string) *Invoice {
        switch key {
  case "Ledger":
   n.Ledger = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "FormNumber":
   n.FormNumber = nil
  case "FinancialAccountRefIdList":
   n.FinancialAccountRefIdList = nil
  case "Voluntary":
   n.Voluntary = nil
  case "AccountCodeList":
   n.AccountCodeList = nil
  case "ItemDetail":
   n.ItemDetail = nil
  case "TaxType":
   n.TaxType = nil
  case "TaxRate":
   n.TaxRate = nil
  case "PurchasingItems":
   n.PurchasingItems = nil
  case "RelatedPurchaseOrderRefId":
   n.RelatedPurchaseOrderRefId = nil
  case "AccountingPeriod":
   n.AccountingPeriod = nil
  case "ApprovedBy":
   n.ApprovedBy = nil
  case "LocalId":
   n.LocalId = nil
  case "RefId":
   n.RefId = nil
  case "ChargedLocationInfoRefId":
   n.ChargedLocationInfoRefId = nil
  case "NetAmount":
   n.NetAmount = nil
  case "BillingDate":
   n.BillingDate = nil
  case "TaxAmount":
   n.TaxAmount = nil
  case "DueDate":
   n.DueDate = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "BilledAmount":
   n.BilledAmount = nil
  case "TransactionDescription":
   n.TransactionDescription = nil
  case "InvoicedEntity":
   n.InvoicedEntity = nil
  case "CreatedBy":
   n.CreatedBy = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Invoice")
        }
        return n
}

func (n *Invoice) SetProperty(key string, value interface{}) *Invoice {
        if n == nil {
                n, _ = InvoicePointer(Invoice{})
        }
        switch key {
    case "Ledger":
    
    if v, ok:= StringPointer(value); ok {
      n.Ledger = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "FormNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.FormNumber = ((*LocalIdType)(v))
      }
    case "FinancialAccountRefIdList":
    if v, ok:= FinancialAccountRefIdListTypePointer(value); ok {
      n.FinancialAccountRefIdList = v
      }
    case "Voluntary":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Voluntary = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "AccountCodeList":
    if v, ok:= AccountCodeListTypePointer(value); ok {
      n.AccountCodeList = v
      }
    case "ItemDetail":
    
    if v, ok:= StringPointer(value); ok {
      n.ItemDetail = ((*String)(v))
      }
    case "TaxType":
    
    if v, ok:= StringPointer(value); ok {
      n.TaxType = ((*String)(v))
      }
    case "TaxRate":
    
    if v, ok:= FloatPointer(value); ok {
      n.TaxRate = ((*Float)(v))
      }
    case "PurchasingItems":
    if v, ok:= PurchasingItemsTypePointer(value); ok {
      n.PurchasingItems = v
      }
    case "RelatedPurchaseOrderRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RelatedPurchaseOrderRefId = ((*String)(v))
      }
    case "AccountingPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.AccountingPeriod = ((*LocalIdType)(v))
      }
    case "ApprovedBy":
    
    if v, ok:= StringPointer(value); ok {
      n.ApprovedBy = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ChargedLocationInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.ChargedLocationInfoRefId = ((*String)(v))
      }
    case "NetAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.NetAmount = v
      }
    case "BillingDate":
    
    if v, ok:= StringPointer(value); ok {
      n.BillingDate = ((*String)(v))
      }
    case "TaxAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.TaxAmount = v
      }
    case "DueDate":
    
    if v, ok:= StringPointer(value); ok {
      n.DueDate = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "BilledAmount":
    if v, ok:= DebitOrCreditAmountTypePointer(value); ok {
      n.BilledAmount = v
      }
    case "TransactionDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.TransactionDescription = ((*String)(v))
      }
    case "InvoicedEntity":
    if v, ok:= Invoice_InvoicedEntityPointer(value); ok {
      n.InvoicedEntity = v
      }
    case "CreatedBy":
    
    if v, ok:= StringPointer(value); ok {
      n.CreatedBy = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Invoice")
        }
        return n
}

  func (s *Invoice) LedgerRead() *String {
    if s.Ledger == nil {
    if v, ok:= StringPointer(""); ok {
      s.Ledger = ((*String)(v))
      }
      }
      return s.Ledger
    }
  func (s *Invoice) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *Invoice) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *Invoice) FormNumberRead() *LocalIdType {
    if s.FormNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.FormNumber = ((*LocalIdType)(v))
      }
      }
      return s.FormNumber
    }
  func (s *Invoice) FinancialAccountRefIdListRead() *FinancialAccountRefIdListType {
    if s.FinancialAccountRefIdList == nil {
     if v, ok:= FinancialAccountRefIdListTypePointer(FinancialAccountRefIdListType{}); ok {
      s.FinancialAccountRefIdList = v
      }
      }
      return s.FinancialAccountRefIdList
    }
  func (s *Invoice) VoluntaryRead() *AUCodeSetsYesOrNoCategoryType {
    if s.Voluntary == nil {
    if v, ok:= StringPointer(""); ok {
      s.Voluntary = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.Voluntary
    }
  func (s *Invoice) AccountCodeListRead() *AccountCodeListType {
    if s.AccountCodeList == nil {
     if v, ok:= AccountCodeListTypePointer(AccountCodeListType{}); ok {
      s.AccountCodeList = v
      }
      }
      return s.AccountCodeList
    }
  func (s *Invoice) ItemDetailRead() *String {
    if s.ItemDetail == nil {
    if v, ok:= StringPointer(""); ok {
      s.ItemDetail = ((*String)(v))
      }
      }
      return s.ItemDetail
    }
  func (s *Invoice) TaxTypeRead() *String {
    if s.TaxType == nil {
    if v, ok:= StringPointer(""); ok {
      s.TaxType = ((*String)(v))
      }
      }
      return s.TaxType
    }
  func (s *Invoice) TaxRateRead() *Float {
    if s.TaxRate == nil {
    if v, ok:= FloatPointer(0); ok {
      s.TaxRate = ((*Float)(v))
      }
      }
      return s.TaxRate
    }
  func (s *Invoice) PurchasingItemsRead() *PurchasingItemsType {
    if s.PurchasingItems == nil {
     if v, ok:= PurchasingItemsTypePointer(PurchasingItemsType{}); ok {
      s.PurchasingItems = v
      }
      }
      return s.PurchasingItems
    }
  func (s *Invoice) RelatedPurchaseOrderRefIdRead() *String {
    if s.RelatedPurchaseOrderRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RelatedPurchaseOrderRefId = ((*String)(v))
      }
      }
      return s.RelatedPurchaseOrderRefId
    }
  func (s *Invoice) AccountingPeriodRead() *LocalIdType {
    if s.AccountingPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.AccountingPeriod = ((*LocalIdType)(v))
      }
      }
      return s.AccountingPeriod
    }
  func (s *Invoice) ApprovedByRead() *String {
    if s.ApprovedBy == nil {
    if v, ok:= StringPointer(""); ok {
      s.ApprovedBy = ((*String)(v))
      }
      }
      return s.ApprovedBy
    }
  func (s *Invoice) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *Invoice) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *Invoice) ChargedLocationInfoRefIdRead() *String {
    if s.ChargedLocationInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ChargedLocationInfoRefId = ((*String)(v))
      }
      }
      return s.ChargedLocationInfoRefId
    }
  func (s *Invoice) NetAmountRead() *MonetaryAmountType {
    if s.NetAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.NetAmount = v
      }
      }
      return s.NetAmount
    }
  func (s *Invoice) BillingDateRead() *String {
    if s.BillingDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.BillingDate = ((*String)(v))
      }
      }
      return s.BillingDate
    }
  func (s *Invoice) TaxAmountRead() *MonetaryAmountType {
    if s.TaxAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.TaxAmount = v
      }
      }
      return s.TaxAmount
    }
  func (s *Invoice) DueDateRead() *String {
    if s.DueDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.DueDate = ((*String)(v))
      }
      }
      return s.DueDate
    }
  func (s *Invoice) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *Invoice) BilledAmountRead() *DebitOrCreditAmountType {
    if s.BilledAmount == nil {
     if v, ok:= DebitOrCreditAmountTypePointer(DebitOrCreditAmountType{}); ok {
      s.BilledAmount = v
      }
      }
      return s.BilledAmount
    }
  func (s *Invoice) TransactionDescriptionRead() *String {
    if s.TransactionDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.TransactionDescription = ((*String)(v))
      }
      }
      return s.TransactionDescription
    }
  func (s *Invoice) InvoicedEntityRead() *Invoice_InvoicedEntity {
    if s.InvoicedEntity == nil {
     if v, ok:= Invoice_InvoicedEntityPointer(Invoice_InvoicedEntity{}); ok {
      s.InvoicedEntity = v
      }
      }
      return s.InvoicedEntity
    }
  func (s *Invoice) CreatedByRead() *String {
    if s.CreatedBy == nil {
    if v, ok:= StringPointer(""); ok {
      s.CreatedBy = ((*String)(v))
      }
      }
      return s.CreatedBy
    }

  // XXXXX
func (t *PurchasingItemType) CopyString(key string, value interface{}) *PurchasingItemType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PurchasingItemType) CopyClone(key string, value interface{}) *PurchasingItemType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PurchasingItemType) Unset(key string) *PurchasingItemType {
        switch key {
  case "ItemNumber":
   n.ItemNumber = nil
  case "ItemDescription":
   n.ItemDescription = nil
  case "LocalItemId":
   n.LocalItemId = nil
  case "CancelledOrder":
   n.CancelledOrder = nil
  case "Quantity":
   n.Quantity = nil
  case "QuantityDelivered":
   n.QuantityDelivered = nil
  case "TaxRate":
   n.TaxRate = nil
  case "ExpenseAccounts":
   n.ExpenseAccounts = nil
  case "TotalCost":
   n.TotalCost = nil
  case "UnitCost":
   n.UnitCost = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PurchasingItemType")
        }
        return n
}

func (n *PurchasingItemType) SetProperty(key string, value interface{}) *PurchasingItemType {
        if n == nil {
                n, _ = PurchasingItemTypePointer(PurchasingItemType{})
        }
        switch key {
    case "ItemNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.ItemNumber = ((*String)(v))
      }
    case "ItemDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.ItemDescription = ((*String)(v))
      }
    case "LocalItemId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalItemId = ((*LocalIdType)(v))
      }
    case "CancelledOrder":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.CancelledOrder = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Quantity":
    
    if v, ok:= StringPointer(value); ok {
      n.Quantity = ((*String)(v))
      }
    case "QuantityDelivered":
    
    if v, ok:= StringPointer(value); ok {
      n.QuantityDelivered = ((*String)(v))
      }
    case "TaxRate":
    
    if v, ok:= FloatPointer(value); ok {
      n.TaxRate = ((*Float)(v))
      }
    case "ExpenseAccounts":
    if v, ok:= ExpenseAccountsTypePointer(value); ok {
      n.ExpenseAccounts = v
      }
    case "TotalCost":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.TotalCost = v
      }
    case "UnitCost":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.UnitCost = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PurchasingItemType")
        }
        return n
}

  func (s *PurchasingItemType) ItemNumberRead() *String {
    if s.ItemNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.ItemNumber = ((*String)(v))
      }
      }
      return s.ItemNumber
    }
  func (s *PurchasingItemType) ItemDescriptionRead() *String {
    if s.ItemDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.ItemDescription = ((*String)(v))
      }
      }
      return s.ItemDescription
    }
  func (s *PurchasingItemType) LocalItemIdRead() *LocalIdType {
    if s.LocalItemId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalItemId = ((*LocalIdType)(v))
      }
      }
      return s.LocalItemId
    }
  func (s *PurchasingItemType) CancelledOrderRead() *AUCodeSetsYesOrNoCategoryType {
    if s.CancelledOrder == nil {
    if v, ok:= StringPointer(""); ok {
      s.CancelledOrder = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.CancelledOrder
    }
  func (s *PurchasingItemType) QuantityRead() *String {
    if s.Quantity == nil {
    if v, ok:= StringPointer(""); ok {
      s.Quantity = ((*String)(v))
      }
      }
      return s.Quantity
    }
  func (s *PurchasingItemType) QuantityDeliveredRead() *String {
    if s.QuantityDelivered == nil {
    if v, ok:= StringPointer(""); ok {
      s.QuantityDelivered = ((*String)(v))
      }
      }
      return s.QuantityDelivered
    }
  func (s *PurchasingItemType) TaxRateRead() *Float {
    if s.TaxRate == nil {
    if v, ok:= FloatPointer(0); ok {
      s.TaxRate = ((*Float)(v))
      }
      }
      return s.TaxRate
    }
  func (s *PurchasingItemType) ExpenseAccountsRead() *ExpenseAccountsType {
    if s.ExpenseAccounts == nil {
     if v, ok:= ExpenseAccountsTypePointer(ExpenseAccountsType{}); ok {
      s.ExpenseAccounts = v
      }
      }
      return s.ExpenseAccounts
    }
  func (s *PurchasingItemType) TotalCostRead() *MonetaryAmountType {
    if s.TotalCost == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.TotalCost = v
      }
      }
      return s.TotalCost
    }
  func (s *PurchasingItemType) UnitCostRead() *MonetaryAmountType {
    if s.UnitCost == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.UnitCost = v
      }
      }
      return s.UnitCost
    }

  // XXXXX
func (t *ElectronicIdType) CopyString(key string, value interface{}) *ElectronicIdType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ElectronicIdType) CopyClone(key string, value interface{}) *ElectronicIdType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ElectronicIdType) Unset(key string) *ElectronicIdType {
        switch key {
  case "Value":
   n.Value = nil
  case "Type":
   n.Type = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ElectronicIdType")
        }
        return n
}

func (n *ElectronicIdType) SetProperty(key string, value interface{}) *ElectronicIdType {
        if n == nil {
                n, _ = ElectronicIdTypePointer(ElectronicIdType{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "Type":
        if !CodesetContains(AUCodeSetsElectronicIdTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsElectronicIdTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Type = ((*AUCodeSetsElectronicIdTypeType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ElectronicIdType")
        }
        return n
}

  func (s *ElectronicIdType) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *ElectronicIdType) TypeRead() *AUCodeSetsElectronicIdTypeType {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*AUCodeSetsElectronicIdTypeType)(v))
      }
      }
      return s.Type
    }

  // XXXXX
func (t *NAPCodeFrame) CopyString(key string, value interface{}) *NAPCodeFrame {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPCodeFrame) CopyClone(key string, value interface{}) *NAPCodeFrame {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPCodeFrame) Unset(key string) *NAPCodeFrame {
        switch key {
  case "TestContent":
   n.TestContent = nil
  case "TestletList":
   n.TestletList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "RefId":
   n.RefId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "NAPTestRefId":
   n.NAPTestRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPCodeFrame")
        }
        return n
}

func (n *NAPCodeFrame) SetProperty(key string, value interface{}) *NAPCodeFrame {
        if n == nil {
                n, _ = NAPCodeFramePointer(NAPCodeFrame{})
        }
        switch key {
    case "TestContent":
    if v, ok:= NAPTestContentTypePointer(value); ok {
      n.TestContent = v
      }
    case "TestletList":
    if v, ok:= NAPCodeFrameTestletListTypePointer(value); ok {
      n.TestletList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "NAPTestRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPCodeFrame")
        }
        return n
}

  func (s *NAPCodeFrame) TestContentRead() *NAPTestContentType {
    if s.TestContent == nil {
     if v, ok:= NAPTestContentTypePointer(NAPTestContentType{}); ok {
      s.TestContent = v
      }
      }
      return s.TestContent
    }
  func (s *NAPCodeFrame) TestletListRead() *NAPCodeFrameTestletListType {
    if s.TestletList == nil {
     if v, ok:= NAPCodeFrameTestletListTypePointer(NAPCodeFrameTestletListType{}); ok {
      s.TestletList = v
      }
      }
      return s.TestletList
    }
  func (s *NAPCodeFrame) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *NAPCodeFrame) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *NAPCodeFrame) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *NAPCodeFrame) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *NAPCodeFrame) NAPTestRefIdRead() *String {
    if s.NAPTestRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestRefId = ((*String)(v))
      }
      }
      return s.NAPTestRefId
    }

  // XXXXX
func (t *TeachingGroupScheduleType) CopyString(key string, value interface{}) *TeachingGroupScheduleType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TeachingGroupScheduleType) CopyClone(key string, value interface{}) *TeachingGroupScheduleType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TeachingGroupScheduleType) Unset(key string) *TeachingGroupScheduleType {
        switch key {
  case "Semester":
   n.Semester = nil
  case "MaxClassSize":
   n.MaxClassSize = nil
  case "TeacherList":
   n.TeacherList = nil
  case "CurriculumLevel":
   n.CurriculumLevel = nil
  case "TimeTableSubjectLocalId":
   n.TimeTableSubjectLocalId = nil
  case "SchoolLocalId":
   n.SchoolLocalId = nil
  case "TeachingGroupPeriodList":
   n.TeachingGroupPeriodList = nil
  case "TimeTableSubjectRefId":
   n.TimeTableSubjectRefId = nil
  case "ShortName":
   n.ShortName = nil
  case "Block":
   n.Block = nil
  case "LocalId":
   n.LocalId = nil
  case "GroupType":
   n.GroupType = nil
  case "MinClassSize":
   n.MinClassSize = nil
  case "StudentList":
   n.StudentList = nil
  case "Set":
   n.Set = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "SchoolCourseInfoRefId":
   n.SchoolCourseInfoRefId = nil
  case "EditorGUID":
   n.EditorGUID = nil
  case "LongName":
   n.LongName = nil
  case "SchoolCourseLocalId":
   n.SchoolCourseLocalId = nil
  case "SchoolYear":
   n.SchoolYear = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupScheduleType")
        }
        return n
}

func (n *TeachingGroupScheduleType) SetProperty(key string, value interface{}) *TeachingGroupScheduleType {
        if n == nil {
                n, _ = TeachingGroupScheduleTypePointer(TeachingGroupScheduleType{})
        }
        switch key {
    case "Semester":
    
    if v, ok:= IntPointer(value); ok {
      n.Semester = ((*Int)(v))
      }
    case "MaxClassSize":
    
    if v, ok:= IntPointer(value); ok {
      n.MaxClassSize = ((*Int)(v))
      }
    case "TeacherList":
    if v, ok:= TeacherListTypePointer(value); ok {
      n.TeacherList = v
      }
    case "CurriculumLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.CurriculumLevel = ((*String)(v))
      }
    case "TimeTableSubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableSubjectLocalId = ((*LocalIdType)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "TeachingGroupPeriodList":
    if v, ok:= TeachingGroupPeriodListTypePointer(value); ok {
      n.TeachingGroupPeriodList = v
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
    case "ShortName":
    
    if v, ok:= StringPointer(value); ok {
      n.ShortName = ((*String)(v))
      }
    case "Block":
    
    if v, ok:= StringPointer(value); ok {
      n.Block = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "GroupType":
    
    if v, ok:= StringPointer(value); ok {
      n.GroupType = ((*String)(v))
      }
    case "MinClassSize":
    
    if v, ok:= IntPointer(value); ok {
      n.MinClassSize = ((*Int)(v))
      }
    case "StudentList":
    if v, ok:= StudentListTypePointer(value); ok {
      n.StudentList = v
      }
    case "Set":
    
    if v, ok:= StringPointer(value); ok {
      n.Set = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*RefIdType)(v))
      }
    case "SchoolCourseInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolCourseInfoRefId = ((*RefIdType)(v))
      }
    case "EditorGUID":
    
    if v, ok:= StringPointer(value); ok {
      n.EditorGUID = ((*RefIdType)(v))
      }
    case "LongName":
    
    if v, ok:= StringPointer(value); ok {
      n.LongName = ((*String)(v))
      }
    case "SchoolCourseLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolCourseLocalId = ((*LocalIdType)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupScheduleType")
        }
        return n
}

  func (s *TeachingGroupScheduleType) SemesterRead() *Int {
    if s.Semester == nil {
    if v, ok:= IntPointer(0); ok {
      s.Semester = ((*Int)(v))
      }
      }
      return s.Semester
    }
  func (s *TeachingGroupScheduleType) MaxClassSizeRead() *Int {
    if s.MaxClassSize == nil {
    if v, ok:= IntPointer(0); ok {
      s.MaxClassSize = ((*Int)(v))
      }
      }
      return s.MaxClassSize
    }
  func (s *TeachingGroupScheduleType) TeacherListRead() *TeacherListType {
    if s.TeacherList == nil {
     if v, ok:= TeacherListTypePointer(TeacherListType{}); ok {
      s.TeacherList = v
      }
      }
      return s.TeacherList
    }
  func (s *TeachingGroupScheduleType) CurriculumLevelRead() *String {
    if s.CurriculumLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.CurriculumLevel = ((*String)(v))
      }
      }
      return s.CurriculumLevel
    }
  func (s *TeachingGroupScheduleType) TimeTableSubjectLocalIdRead() *LocalIdType {
    if s.TimeTableSubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableSubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.TimeTableSubjectLocalId
    }
  func (s *TeachingGroupScheduleType) SchoolLocalIdRead() *LocalIdType {
    if s.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolLocalId
    }
  func (s *TeachingGroupScheduleType) TeachingGroupPeriodListRead() *TeachingGroupPeriodListType {
    if s.TeachingGroupPeriodList == nil {
     if v, ok:= TeachingGroupPeriodListTypePointer(TeachingGroupPeriodListType{}); ok {
      s.TeachingGroupPeriodList = v
      }
      }
      return s.TeachingGroupPeriodList
    }
  func (s *TeachingGroupScheduleType) TimeTableSubjectRefIdRead() *RefIdType {
    if s.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
      }
      return s.TimeTableSubjectRefId
    }
  func (s *TeachingGroupScheduleType) ShortNameRead() *String {
    if s.ShortName == nil {
    if v, ok:= StringPointer(""); ok {
      s.ShortName = ((*String)(v))
      }
      }
      return s.ShortName
    }
  func (s *TeachingGroupScheduleType) BlockRead() *String {
    if s.Block == nil {
    if v, ok:= StringPointer(""); ok {
      s.Block = ((*String)(v))
      }
      }
      return s.Block
    }
  func (s *TeachingGroupScheduleType) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *TeachingGroupScheduleType) GroupTypeRead() *String {
    if s.GroupType == nil {
    if v, ok:= StringPointer(""); ok {
      s.GroupType = ((*String)(v))
      }
      }
      return s.GroupType
    }
  func (s *TeachingGroupScheduleType) MinClassSizeRead() *Int {
    if s.MinClassSize == nil {
    if v, ok:= IntPointer(0); ok {
      s.MinClassSize = ((*Int)(v))
      }
      }
      return s.MinClassSize
    }
  func (s *TeachingGroupScheduleType) StudentListRead() *StudentListType {
    if s.StudentList == nil {
     if v, ok:= StudentListTypePointer(StudentListType{}); ok {
      s.StudentList = v
      }
      }
      return s.StudentList
    }
  func (s *TeachingGroupScheduleType) SetRead() *String {
    if s.Set == nil {
    if v, ok:= StringPointer(""); ok {
      s.Set = ((*String)(v))
      }
      }
      return s.Set
    }
  func (s *TeachingGroupScheduleType) SchoolInfoRefIdRead() *RefIdType {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*RefIdType)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *TeachingGroupScheduleType) SchoolCourseInfoRefIdRead() *RefIdType {
    if s.SchoolCourseInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolCourseInfoRefId = ((*RefIdType)(v))
      }
      }
      return s.SchoolCourseInfoRefId
    }
  func (s *TeachingGroupScheduleType) EditorGUIDRead() *RefIdType {
    if s.EditorGUID == nil {
    if v, ok:= StringPointer(""); ok {
      s.EditorGUID = ((*RefIdType)(v))
      }
      }
      return s.EditorGUID
    }
  func (s *TeachingGroupScheduleType) LongNameRead() *String {
    if s.LongName == nil {
    if v, ok:= StringPointer(""); ok {
      s.LongName = ((*String)(v))
      }
      }
      return s.LongName
    }
  func (s *TeachingGroupScheduleType) SchoolCourseLocalIdRead() *LocalIdType {
    if s.SchoolCourseLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolCourseLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolCourseLocalId
    }
  func (s *TeachingGroupScheduleType) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }

  // XXXXX
func (t *AttendanceCodeType) CopyString(key string, value interface{}) *AttendanceCodeType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AttendanceCodeType) CopyClone(key string, value interface{}) *AttendanceCodeType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AttendanceCodeType) Unset(key string) *AttendanceCodeType {
        switch key {
  case "Code":
   n.Code = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AttendanceCodeType")
        }
        return n
}

func (n *AttendanceCodeType) SetProperty(key string, value interface{}) *AttendanceCodeType {
        if n == nil {
                n, _ = AttendanceCodeTypePointer(AttendanceCodeType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsAttendanceCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAttendanceCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsAttendanceCodeType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AttendanceCodeType")
        }
        return n
}

  func (s *AttendanceCodeType) CodeRead() *AUCodeSetsAttendanceCodeType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsAttendanceCodeType)(v))
      }
      }
      return s.Code
    }
  func (s *AttendanceCodeType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }

  // XXXXX
func (t *OtherWellbeingResponseContainerType) CopyString(key string, value interface{}) *OtherWellbeingResponseContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *OtherWellbeingResponseContainerType) CopyClone(key string, value interface{}) *OtherWellbeingResponseContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *OtherWellbeingResponseContainerType) Unset(key string) *OtherWellbeingResponseContainerType {
        switch key {
  case "OtherResponseDate":
   n.OtherResponseDate = nil
  case "Status":
   n.Status = nil
  case "OtherResponseDescription":
   n.OtherResponseDescription = nil
  case "OtherResponseNotes":
   n.OtherResponseNotes = nil
  case "OtherResponseType":
   n.OtherResponseType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherWellbeingResponseContainerType")
        }
        return n
}

func (n *OtherWellbeingResponseContainerType) SetProperty(key string, value interface{}) *OtherWellbeingResponseContainerType {
        if n == nil {
                n, _ = OtherWellbeingResponseContainerTypePointer(OtherWellbeingResponseContainerType{})
        }
        switch key {
    case "OtherResponseDate":
    
    if v, ok:= StringPointer(value); ok {
      n.OtherResponseDate = ((*String)(v))
      }
    case "Status":
        if !CodesetContains(AUCodeSetsWellbeingStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
    case "OtherResponseDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.OtherResponseDescription = ((*String)(v))
      }
    case "OtherResponseNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.OtherResponseNotes = ((*String)(v))
      }
    case "OtherResponseType":
    
    if v, ok:= StringPointer(value); ok {
      n.OtherResponseType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherWellbeingResponseContainerType")
        }
        return n
}

  func (s *OtherWellbeingResponseContainerType) OtherResponseDateRead() *String {
    if s.OtherResponseDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.OtherResponseDate = ((*String)(v))
      }
      }
      return s.OtherResponseDate
    }
  func (s *OtherWellbeingResponseContainerType) StatusRead() *AUCodeSetsWellbeingStatusType {
    if s.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
      }
      return s.Status
    }
  func (s *OtherWellbeingResponseContainerType) OtherResponseDescriptionRead() *String {
    if s.OtherResponseDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.OtherResponseDescription = ((*String)(v))
      }
      }
      return s.OtherResponseDescription
    }
  func (s *OtherWellbeingResponseContainerType) OtherResponseNotesRead() *String {
    if s.OtherResponseNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.OtherResponseNotes = ((*String)(v))
      }
      }
      return s.OtherResponseNotes
    }
  func (s *OtherWellbeingResponseContainerType) OtherResponseTypeRead() *String {
    if s.OtherResponseType == nil {
    if v, ok:= StringPointer(""); ok {
      s.OtherResponseType = ((*String)(v))
      }
      }
      return s.OtherResponseType
    }

  // XXXXX
func (t *MedicalAlertMessageType) CopyString(key string, value interface{}) *MedicalAlertMessageType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *MedicalAlertMessageType) CopyClone(key string, value interface{}) *MedicalAlertMessageType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *MedicalAlertMessageType) Unset(key string) *MedicalAlertMessageType {
        switch key {
  case "Severity":
   n.Severity = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MedicalAlertMessageType")
        }
        return n
}

func (n *MedicalAlertMessageType) SetProperty(key string, value interface{}) *MedicalAlertMessageType {
        if n == nil {
                n, _ = MedicalAlertMessageTypePointer(MedicalAlertMessageType{})
        }
        switch key {
    case "Severity":
    
    if v, ok:= StringPointer(value); ok {
      n.Severity = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MedicalAlertMessageType")
        }
        return n
}

  func (s *MedicalAlertMessageType) SeverityRead() *String {
    if s.Severity == nil {
    if v, ok:= StringPointer(""); ok {
      s.Severity = ((*String)(v))
      }
      }
      return s.Severity
    }
  func (s *MedicalAlertMessageType) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *StudentExitStatusContainerType) CopyString(key string, value interface{}) *StudentExitStatusContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentExitStatusContainerType) CopyClone(key string, value interface{}) *StudentExitStatusContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentExitStatusContainerType) Unset(key string) *StudentExitStatusContainerType {
        switch key {
  case "OtherCodeList":
   n.OtherCodeList = nil
  case "Code":
   n.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentExitStatusContainerType")
        }
        return n
}

func (n *StudentExitStatusContainerType) SetProperty(key string, value interface{}) *StudentExitStatusContainerType {
        if n == nil {
                n, _ = StudentExitStatusContainerTypePointer(StudentExitStatusContainerType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsExitWithdrawalStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsExitWithdrawalStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsExitWithdrawalStatusType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentExitStatusContainerType")
        }
        return n
}

  func (s *StudentExitStatusContainerType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }
  func (s *StudentExitStatusContainerType) CodeRead() *AUCodeSetsExitWithdrawalStatusType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsExitWithdrawalStatusType)(v))
      }
      }
      return s.Code
    }

  // XXXXX
func (t *CheckoutInfoType) CopyString(key string, value interface{}) *CheckoutInfoType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CheckoutInfoType) CopyClone(key string, value interface{}) *CheckoutInfoType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CheckoutInfoType) Unset(key string) *CheckoutInfoType {
        switch key {
  case "ReturnBy":
   n.ReturnBy = nil
  case "RenewalCount":
   n.RenewalCount = nil
  case "CheckedOutOn":
   n.CheckedOutOn = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CheckoutInfoType")
        }
        return n
}

func (n *CheckoutInfoType) SetProperty(key string, value interface{}) *CheckoutInfoType {
        if n == nil {
                n, _ = CheckoutInfoTypePointer(CheckoutInfoType{})
        }
        switch key {
    case "ReturnBy":
    
    if v, ok:= StringPointer(value); ok {
      n.ReturnBy = ((*String)(v))
      }
    case "RenewalCount":
    
    if v, ok:= IntPointer(value); ok {
      n.RenewalCount = ((*Int)(v))
      }
    case "CheckedOutOn":
    
    if v, ok:= StringPointer(value); ok {
      n.CheckedOutOn = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CheckoutInfoType")
        }
        return n
}

  func (s *CheckoutInfoType) ReturnByRead() *String {
    if s.ReturnBy == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReturnBy = ((*String)(v))
      }
      }
      return s.ReturnBy
    }
  func (s *CheckoutInfoType) RenewalCountRead() *Int {
    if s.RenewalCount == nil {
    if v, ok:= IntPointer(0); ok {
      s.RenewalCount = ((*Int)(v))
      }
      }
      return s.RenewalCount
    }
  func (s *CheckoutInfoType) CheckedOutOnRead() *String {
    if s.CheckedOutOn == nil {
    if v, ok:= StringPointer(""); ok {
      s.CheckedOutOn = ((*String)(v))
      }
      }
      return s.CheckedOutOn
    }

  // XXXXX
func (t *StudentActivityType) CopyString(key string, value interface{}) *StudentActivityType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentActivityType) CopyClone(key string, value interface{}) *StudentActivityType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentActivityType) Unset(key string) *StudentActivityType {
        switch key {
  case "OtherCodeList":
   n.OtherCodeList = nil
  case "Code":
   n.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentActivityType")
        }
        return n
}

func (n *StudentActivityType) SetProperty(key string, value interface{}) *StudentActivityType {
        if n == nil {
                n, _ = StudentActivityTypePointer(StudentActivityType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsActivityInvolvementCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsActivityInvolvementCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsActivityInvolvementCodeType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentActivityType")
        }
        return n
}

  func (s *StudentActivityType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }
  func (s *StudentActivityType) CodeRead() *AUCodeSetsActivityInvolvementCodeType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsActivityInvolvementCodeType)(v))
      }
      }
      return s.Code
    }

  // XXXXX
func (t *StandardHierarchyLevelType) CopyString(key string, value interface{}) *StandardHierarchyLevelType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StandardHierarchyLevelType) CopyClone(key string, value interface{}) *StandardHierarchyLevelType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StandardHierarchyLevelType) Unset(key string) *StandardHierarchyLevelType {
        switch key {
  case "Description":
   n.Description = nil
  case "Number":
   n.Number = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StandardHierarchyLevelType")
        }
        return n
}

func (n *StandardHierarchyLevelType) SetProperty(key string, value interface{}) *StandardHierarchyLevelType {
        if n == nil {
                n, _ = StandardHierarchyLevelTypePointer(StandardHierarchyLevelType{})
        }
        switch key {
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "Number":
    
    if v, ok:= IntPointer(value); ok {
      n.Number = ((*Int)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StandardHierarchyLevelType")
        }
        return n
}

  func (s *StandardHierarchyLevelType) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *StandardHierarchyLevelType) NumberRead() *Int {
    if s.Number == nil {
    if v, ok:= IntPointer(0); ok {
      s.Number = ((*Int)(v))
      }
      }
      return s.Number
    }

  // XXXXX
func (t *AddressCollection) CopyString(key string, value interface{}) *AddressCollection {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AddressCollection) CopyClone(key string, value interface{}) *AddressCollection {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AddressCollection) Unset(key string) *AddressCollection {
        switch key {
  case "ReportingAuthorityCommonwealthId":
   n.ReportingAuthorityCommonwealthId = nil
  case "RefId":
   n.RefId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "AddressCollectionYear":
   n.AddressCollectionYear = nil
  case "AddressCollectionReportingList":
   n.AddressCollectionReportingList = nil
  case "RoundCode":
   n.RoundCode = nil
  case "SoftwareVendorInfo":
   n.SoftwareVendorInfo = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressCollection")
        }
        return n
}

func (n *AddressCollection) SetProperty(key string, value interface{}) *AddressCollection {
        if n == nil {
                n, _ = AddressCollectionPointer(AddressCollection{})
        }
        switch key {
    case "ReportingAuthorityCommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "AddressCollectionYear":
    
    if v, ok:= StringPointer(value); ok {
      n.AddressCollectionYear = ((*SchoolYearType)(v))
      }
    case "AddressCollectionReportingList":
    if v, ok:= AddressCollectionReportingListTypePointer(value); ok {
      n.AddressCollectionReportingList = v
      }
    case "RoundCode":
    
    if v, ok:= StringPointer(value); ok {
      n.RoundCode = ((*String)(v))
      }
    case "SoftwareVendorInfo":
    if v, ok:= SoftwareVendorInfoContainerTypePointer(value); ok {
      n.SoftwareVendorInfo = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressCollection")
        }
        return n
}

  func (s *AddressCollection) ReportingAuthorityCommonwealthIdRead() *String {
    if s.ReportingAuthorityCommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
      }
      return s.ReportingAuthorityCommonwealthId
    }
  func (s *AddressCollection) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *AddressCollection) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *AddressCollection) AddressCollectionYearRead() *SchoolYearType {
    if s.AddressCollectionYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.AddressCollectionYear = ((*SchoolYearType)(v))
      }
      }
      return s.AddressCollectionYear
    }
  func (s *AddressCollection) AddressCollectionReportingListRead() *AddressCollectionReportingListType {
    if s.AddressCollectionReportingList == nil {
     if v, ok:= AddressCollectionReportingListTypePointer(AddressCollectionReportingListType{}); ok {
      s.AddressCollectionReportingList = v
      }
      }
      return s.AddressCollectionReportingList
    }
  func (s *AddressCollection) RoundCodeRead() *String {
    if s.RoundCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoundCode = ((*String)(v))
      }
      }
      return s.RoundCode
    }
  func (s *AddressCollection) SoftwareVendorInfoRead() *SoftwareVendorInfoContainerType {
    if s.SoftwareVendorInfo == nil {
     if v, ok:= SoftwareVendorInfoContainerTypePointer(SoftwareVendorInfoContainerType{}); ok {
      s.SoftwareVendorInfo = v
      }
      }
      return s.SoftwareVendorInfo
    }
  func (s *AddressCollection) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *AddressCollection) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }

  // XXXXX
func (t *CollectionRound) CopyString(key string, value interface{}) *CollectionRound {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CollectionRound) CopyClone(key string, value interface{}) *CollectionRound {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CollectionRound) Unset(key string) *CollectionRound {
        switch key {
  case "RefId":
   n.RefId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "CollectionYear":
   n.CollectionYear = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "AGRoundList":
   n.AGRoundList = nil
  case "AGCollection":
   n.AGCollection = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CollectionRound")
        }
        return n
}

func (n *CollectionRound) SetProperty(key string, value interface{}) *CollectionRound {
        if n == nil {
                n, _ = CollectionRoundPointer(CollectionRound{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "CollectionYear":
    
    if v, ok:= StringPointer(value); ok {
      n.CollectionYear = ((*SchoolYearType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "AGRoundList":
    if v, ok:= AGRoundListTypePointer(value); ok {
      n.AGRoundList = v
      }
    case "AGCollection":
        if !CodesetContains(AUCodeSetsAGCollectionType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAGCollectionType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AGCollection = ((*AUCodeSetsAGCollectionType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CollectionRound")
        }
        return n
}

  func (s *CollectionRound) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *CollectionRound) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *CollectionRound) CollectionYearRead() *SchoolYearType {
    if s.CollectionYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.CollectionYear = ((*SchoolYearType)(v))
      }
      }
      return s.CollectionYear
    }
  func (s *CollectionRound) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *CollectionRound) AGRoundListRead() *AGRoundListType {
    if s.AGRoundList == nil {
     if v, ok:= AGRoundListTypePointer(AGRoundListType{}); ok {
      s.AGRoundList = v
      }
      }
      return s.AGRoundList
    }
  func (s *CollectionRound) AGCollectionRead() *AUCodeSetsAGCollectionType {
    if s.AGCollection == nil {
    if v, ok:= StringPointer(""); ok {
      s.AGCollection = ((*AUCodeSetsAGCollectionType)(v))
      }
      }
      return s.AGCollection
    }
  func (s *CollectionRound) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }

  // XXXXX
func (t *AttendanceInfoType) CopyString(key string, value interface{}) *AttendanceInfoType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AttendanceInfoType) CopyClone(key string, value interface{}) *AttendanceInfoType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AttendanceInfoType) Unset(key string) *AttendanceInfoType {
        switch key {
  case "CountsTowardAttendance":
   n.CountsTowardAttendance = nil
  case "AttendanceValue":
   n.AttendanceValue = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AttendanceInfoType")
        }
        return n
}

func (n *AttendanceInfoType) SetProperty(key string, value interface{}) *AttendanceInfoType {
        if n == nil {
                n, _ = AttendanceInfoTypePointer(AttendanceInfoType{})
        }
        switch key {
    case "CountsTowardAttendance":
    
    if v, ok:= StringPointer(value); ok {
      n.CountsTowardAttendance = ((*String)(v))
      }
    case "AttendanceValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.AttendanceValue = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AttendanceInfoType")
        }
        return n
}

  func (s *AttendanceInfoType) CountsTowardAttendanceRead() *String {
    if s.CountsTowardAttendance == nil {
    if v, ok:= StringPointer(""); ok {
      s.CountsTowardAttendance = ((*String)(v))
      }
      }
      return s.CountsTowardAttendance
    }
  func (s *AttendanceInfoType) AttendanceValueRead() *Float {
    if s.AttendanceValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.AttendanceValue = ((*Float)(v))
      }
      }
      return s.AttendanceValue
    }

  // XXXXX
func (t *SuspensionContainerType) CopyString(key string, value interface{}) *SuspensionContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SuspensionContainerType) CopyClone(key string, value interface{}) *SuspensionContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SuspensionContainerType) Unset(key string) *SuspensionContainerType {
        switch key {
  case "ResolutionMeetingTime":
   n.ResolutionMeetingTime = nil
  case "SuspensionNotes":
   n.SuspensionNotes = nil
  case "EarlyReturnDate":
   n.EarlyReturnDate = nil
  case "SuspensionCategory":
   n.SuspensionCategory = nil
  case "Duration":
   n.Duration = nil
  case "Status":
   n.Status = nil
  case "ResolutionNotes":
   n.ResolutionNotes = nil
  case "WithdrawalTimeList":
   n.WithdrawalTimeList = nil
  case "AdvisementDate":
   n.AdvisementDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SuspensionContainerType")
        }
        return n
}

func (n *SuspensionContainerType) SetProperty(key string, value interface{}) *SuspensionContainerType {
        if n == nil {
                n, _ = SuspensionContainerTypePointer(SuspensionContainerType{})
        }
        switch key {
    case "ResolutionMeetingTime":
    
    if v, ok:= StringPointer(value); ok {
      n.ResolutionMeetingTime = ((*String)(v))
      }
    case "SuspensionNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.SuspensionNotes = ((*String)(v))
      }
    case "EarlyReturnDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EarlyReturnDate = ((*String)(v))
      }
    case "SuspensionCategory":
        if !CodesetContains(AUCodeSetsSuspensionCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSuspensionCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.SuspensionCategory = ((*AUCodeSetsSuspensionCategoryType)(v))
      }
    case "Duration":
    
    if v, ok:= FloatPointer(value); ok {
      n.Duration = ((*Float)(v))
      }
    case "Status":
        if !CodesetContains(AUCodeSetsWellbeingStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
    case "ResolutionNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.ResolutionNotes = ((*String)(v))
      }
    case "WithdrawalTimeList":
    if v, ok:= WithdrawalTimeListTypePointer(value); ok {
      n.WithdrawalTimeList = v
      }
    case "AdvisementDate":
    
    if v, ok:= StringPointer(value); ok {
      n.AdvisementDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SuspensionContainerType")
        }
        return n
}

  func (s *SuspensionContainerType) ResolutionMeetingTimeRead() *String {
    if s.ResolutionMeetingTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.ResolutionMeetingTime = ((*String)(v))
      }
      }
      return s.ResolutionMeetingTime
    }
  func (s *SuspensionContainerType) SuspensionNotesRead() *String {
    if s.SuspensionNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.SuspensionNotes = ((*String)(v))
      }
      }
      return s.SuspensionNotes
    }
  func (s *SuspensionContainerType) EarlyReturnDateRead() *String {
    if s.EarlyReturnDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EarlyReturnDate = ((*String)(v))
      }
      }
      return s.EarlyReturnDate
    }
  func (s *SuspensionContainerType) SuspensionCategoryRead() *AUCodeSetsSuspensionCategoryType {
    if s.SuspensionCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.SuspensionCategory = ((*AUCodeSetsSuspensionCategoryType)(v))
      }
      }
      return s.SuspensionCategory
    }
  func (s *SuspensionContainerType) DurationRead() *Float {
    if s.Duration == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Duration = ((*Float)(v))
      }
      }
      return s.Duration
    }
  func (s *SuspensionContainerType) StatusRead() *AUCodeSetsWellbeingStatusType {
    if s.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
      }
      return s.Status
    }
  func (s *SuspensionContainerType) ResolutionNotesRead() *String {
    if s.ResolutionNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.ResolutionNotes = ((*String)(v))
      }
      }
      return s.ResolutionNotes
    }
  func (s *SuspensionContainerType) WithdrawalTimeListRead() *WithdrawalTimeListType {
    if s.WithdrawalTimeList == nil {
     if v, ok:= WithdrawalTimeListTypePointer(WithdrawalTimeListType{}); ok {
      s.WithdrawalTimeList = v
      }
      }
      return s.WithdrawalTimeList
    }
  func (s *SuspensionContainerType) AdvisementDateRead() *String {
    if s.AdvisementDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.AdvisementDate = ((*String)(v))
      }
      }
      return s.AdvisementDate
    }

  // XXXXX
func (t *LibraryPatronStatus) CopyString(key string, value interface{}) *LibraryPatronStatus {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LibraryPatronStatus) CopyClone(key string, value interface{}) *LibraryPatronStatus {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LibraryPatronStatus) Unset(key string) *LibraryPatronStatus {
        switch key {
  case "RefundAmount":
   n.RefundAmount = nil
  case "PatronName":
   n.PatronName = nil
  case "NumberOfRefunds":
   n.NumberOfRefunds = nil
  case "FineAmount":
   n.FineAmount = nil
  case "RefId":
   n.RefId = nil
  case "NumberOfOverdues":
   n.NumberOfOverdues = nil
  case "NumberOfHoldItems":
   n.NumberOfHoldItems = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "NumberOfFines":
   n.NumberOfFines = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LibraryType":
   n.LibraryType = nil
  case "PatronRefObject":
   n.PatronRefObject = nil
  case "NumberOfCheckouts":
   n.NumberOfCheckouts = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "ElectronicIdList":
   n.ElectronicIdList = nil
  case "PatronRefId":
   n.PatronRefId = nil
  case "MessageList":
   n.MessageList = nil
  case "PatronLocalId":
   n.PatronLocalId = nil
  case "TransactionList":
   n.TransactionList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryPatronStatus")
        }
        return n
}

func (n *LibraryPatronStatus) SetProperty(key string, value interface{}) *LibraryPatronStatus {
        if n == nil {
                n, _ = LibraryPatronStatusPointer(LibraryPatronStatus{})
        }
        switch key {
    case "RefundAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.RefundAmount = v
      }
    case "PatronName":
    if v, ok:= NameOfRecordTypePointer(value); ok {
      n.PatronName = v
      }
    case "NumberOfRefunds":
    
    if v, ok:= IntPointer(value); ok {
      n.NumberOfRefunds = ((*Int)(v))
      }
    case "FineAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.FineAmount = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "NumberOfOverdues":
    
    if v, ok:= IntPointer(value); ok {
      n.NumberOfOverdues = ((*Int)(v))
      }
    case "NumberOfHoldItems":
    
    if v, ok:= IntPointer(value); ok {
      n.NumberOfHoldItems = ((*Int)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "NumberOfFines":
    
    if v, ok:= IntPointer(value); ok {
      n.NumberOfFines = ((*Int)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LibraryType":
    
    if v, ok:= StringPointer(value); ok {
      n.LibraryType = ((*String)(v))
      }
    case "PatronRefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.PatronRefObject = ((*String)(v))
      }
    case "NumberOfCheckouts":
    
    if v, ok:= IntPointer(value); ok {
      n.NumberOfCheckouts = ((*Int)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "ElectronicIdList":
    if v, ok:= ElectronicIdListTypePointer(value); ok {
      n.ElectronicIdList = v
      }
    case "PatronRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.PatronRefId = ((*String)(v))
      }
    case "MessageList":
    if v, ok:= LibraryMessageListTypePointer(value); ok {
      n.MessageList = v
      }
    case "PatronLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.PatronLocalId = ((*LocalIdType)(v))
      }
    case "TransactionList":
    if v, ok:= LibraryTransactionListTypePointer(value); ok {
      n.TransactionList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryPatronStatus")
        }
        return n
}

  func (s *LibraryPatronStatus) RefundAmountRead() *MonetaryAmountType {
    if s.RefundAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.RefundAmount = v
      }
      }
      return s.RefundAmount
    }
  func (s *LibraryPatronStatus) PatronNameRead() *NameOfRecordType {
    if s.PatronName == nil {
     if v, ok:= NameOfRecordTypePointer(NameOfRecordType{}); ok {
      s.PatronName = v
      }
      }
      return s.PatronName
    }
  func (s *LibraryPatronStatus) NumberOfRefundsRead() *Int {
    if s.NumberOfRefunds == nil {
    if v, ok:= IntPointer(0); ok {
      s.NumberOfRefunds = ((*Int)(v))
      }
      }
      return s.NumberOfRefunds
    }
  func (s *LibraryPatronStatus) FineAmountRead() *MonetaryAmountType {
    if s.FineAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.FineAmount = v
      }
      }
      return s.FineAmount
    }
  func (s *LibraryPatronStatus) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *LibraryPatronStatus) NumberOfOverduesRead() *Int {
    if s.NumberOfOverdues == nil {
    if v, ok:= IntPointer(0); ok {
      s.NumberOfOverdues = ((*Int)(v))
      }
      }
      return s.NumberOfOverdues
    }
  func (s *LibraryPatronStatus) NumberOfHoldItemsRead() *Int {
    if s.NumberOfHoldItems == nil {
    if v, ok:= IntPointer(0); ok {
      s.NumberOfHoldItems = ((*Int)(v))
      }
      }
      return s.NumberOfHoldItems
    }
  func (s *LibraryPatronStatus) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *LibraryPatronStatus) NumberOfFinesRead() *Int {
    if s.NumberOfFines == nil {
    if v, ok:= IntPointer(0); ok {
      s.NumberOfFines = ((*Int)(v))
      }
      }
      return s.NumberOfFines
    }
  func (s *LibraryPatronStatus) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *LibraryPatronStatus) LibraryTypeRead() *String {
    if s.LibraryType == nil {
    if v, ok:= StringPointer(""); ok {
      s.LibraryType = ((*String)(v))
      }
      }
      return s.LibraryType
    }
  func (s *LibraryPatronStatus) PatronRefObjectRead() *String {
    if s.PatronRefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.PatronRefObject = ((*String)(v))
      }
      }
      return s.PatronRefObject
    }
  func (s *LibraryPatronStatus) NumberOfCheckoutsRead() *Int {
    if s.NumberOfCheckouts == nil {
    if v, ok:= IntPointer(0); ok {
      s.NumberOfCheckouts = ((*Int)(v))
      }
      }
      return s.NumberOfCheckouts
    }
  func (s *LibraryPatronStatus) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *LibraryPatronStatus) ElectronicIdListRead() *ElectronicIdListType {
    if s.ElectronicIdList == nil {
     if v, ok:= ElectronicIdListTypePointer(ElectronicIdListType{}); ok {
      s.ElectronicIdList = v
      }
      }
      return s.ElectronicIdList
    }
  func (s *LibraryPatronStatus) PatronRefIdRead() *String {
    if s.PatronRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.PatronRefId = ((*String)(v))
      }
      }
      return s.PatronRefId
    }
  func (s *LibraryPatronStatus) MessageListRead() *LibraryMessageListType {
    if s.MessageList == nil {
     if v, ok:= LibraryMessageListTypePointer(LibraryMessageListType{}); ok {
      s.MessageList = v
      }
      }
      return s.MessageList
    }
  func (s *LibraryPatronStatus) PatronLocalIdRead() *LocalIdType {
    if s.PatronLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.PatronLocalId = ((*LocalIdType)(v))
      }
      }
      return s.PatronLocalId
    }
  func (s *LibraryPatronStatus) TransactionListRead() *LibraryTransactionListType {
    if s.TransactionList == nil {
     if v, ok:= LibraryTransactionListTypePointer(LibraryTransactionListType{}); ok {
      s.TransactionList = v
      }
      }
      return s.TransactionList
    }

  // XXXXX
func (t *NAPTestItemContentType) CopyString(key string, value interface{}) *NAPTestItemContentType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPTestItemContentType) CopyClone(key string, value interface{}) *NAPTestItemContentType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPTestItemContentType) Unset(key string) *NAPTestItemContentType {
        switch key {
  case "MultipleChoiceOptionCount":
   n.MultipleChoiceOptionCount = nil
  case "NAPWritingRubricList":
   n.NAPWritingRubricList = nil
  case "ItemName":
   n.ItemName = nil
  case "ReleasedStatus":
   n.ReleasedStatus = nil
  case "ContentDescriptionList":
   n.ContentDescriptionList = nil
  case "Subdomain":
   n.Subdomain = nil
  case "ItemDescriptor":
   n.ItemDescriptor = nil
  case "CorrectAnswer":
   n.CorrectAnswer = nil
  case "ExemplarURL":
   n.ExemplarURL = nil
  case "NAPTestItemLocalId":
   n.NAPTestItemLocalId = nil
  case "ItemType":
   n.ItemType = nil
  case "ItemProficiencyBand":
   n.ItemProficiencyBand = nil
  case "MaximumScore":
   n.MaximumScore = nil
  case "ItemDifficultyLogit5":
   n.ItemDifficultyLogit5 = nil
  case "WritingGenre":
   n.WritingGenre = nil
  case "MarkingType":
   n.MarkingType = nil
  case "ItemDifficulty":
   n.ItemDifficulty = nil
  case "StimulusList":
   n.StimulusList = nil
  case "ItemProficiencyLevel":
   n.ItemProficiencyLevel = nil
  case "ItemDifficultyLogit62SE":
   n.ItemDifficultyLogit62SE = nil
  case "ItemDifficultyLogit62":
   n.ItemDifficultyLogit62 = nil
  case "ItemDifficultyLogit5SE":
   n.ItemDifficultyLogit5SE = nil
  case "ItemSubstitutedForList":
   n.ItemSubstitutedForList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestItemContentType")
        }
        return n
}

func (n *NAPTestItemContentType) SetProperty(key string, value interface{}) *NAPTestItemContentType {
        if n == nil {
                n, _ = NAPTestItemContentTypePointer(NAPTestItemContentType{})
        }
        switch key {
    case "MultipleChoiceOptionCount":
    
    if v, ok:= IntPointer(value); ok {
      n.MultipleChoiceOptionCount = ((*Int)(v))
      }
    case "NAPWritingRubricList":
    if v, ok:= NAPWritingRubricListTypePointer(value); ok {
      n.NAPWritingRubricList = v
      }
    case "ItemName":
    
    if v, ok:= StringPointer(value); ok {
      n.ItemName = ((*String)(v))
      }
    case "ReleasedStatus":
    
    if v, ok:= BoolPointer(value); ok {
      n.ReleasedStatus = ((*Bool)(v))
      }
    case "ContentDescriptionList":
    if v, ok:= ContentDescriptionListTypePointer(value); ok {
      n.ContentDescriptionList = v
      }
    case "Subdomain":
    
    if v, ok:= StringPointer(value); ok {
      n.Subdomain = ((*String)(v))
      }
    case "ItemDescriptor":
    
    if v, ok:= StringPointer(value); ok {
      n.ItemDescriptor = ((*String)(v))
      }
    case "CorrectAnswer":
    
    if v, ok:= StringPointer(value); ok {
      n.CorrectAnswer = ((*String)(v))
      }
    case "ExemplarURL":
    
    if v, ok:= StringPointer(value); ok {
      n.ExemplarURL = ((*String)(v))
      }
    case "NAPTestItemLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestItemLocalId = ((*LocalIdType)(v))
      }
    case "ItemType":
        if !CodesetContains(AUCodeSetsNAPTestItemTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPTestItemTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ItemType = ((*AUCodeSetsNAPTestItemTypeType)(v))
      }
    case "ItemProficiencyBand":
    
    if v, ok:= IntPointer(value); ok {
      n.ItemProficiencyBand = ((*Int)(v))
      }
    case "MaximumScore":
    
    if v, ok:= FloatPointer(value); ok {
      n.MaximumScore = ((*Float)(v))
      }
    case "ItemDifficultyLogit5":
    
    if v, ok:= FloatPointer(value); ok {
      n.ItemDifficultyLogit5 = ((*Float)(v))
      }
    case "WritingGenre":
        if !CodesetContains(AUCodeSetsNAPWritingGenreType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPWritingGenreType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.WritingGenre = ((*AUCodeSetsNAPWritingGenreType)(v))
      }
    case "MarkingType":
        if !CodesetContains(AUCodeSetsNAPTestItemMarkingTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPTestItemMarkingTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.MarkingType = ((*AUCodeSetsNAPTestItemMarkingTypeType)(v))
      }
    case "ItemDifficulty":
    
    if v, ok:= FloatPointer(value); ok {
      n.ItemDifficulty = ((*Float)(v))
      }
    case "StimulusList":
    if v, ok:= StimulusListTypePointer(value); ok {
      n.StimulusList = v
      }
    case "ItemProficiencyLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.ItemProficiencyLevel = ((*String)(v))
      }
    case "ItemDifficultyLogit62SE":
    
    if v, ok:= FloatPointer(value); ok {
      n.ItemDifficultyLogit62SE = ((*Float)(v))
      }
    case "ItemDifficultyLogit62":
    
    if v, ok:= FloatPointer(value); ok {
      n.ItemDifficultyLogit62 = ((*Float)(v))
      }
    case "ItemDifficultyLogit5SE":
    
    if v, ok:= FloatPointer(value); ok {
      n.ItemDifficultyLogit5SE = ((*Float)(v))
      }
    case "ItemSubstitutedForList":
    if v, ok:= SubstituteItemListTypePointer(value); ok {
      n.ItemSubstitutedForList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestItemContentType")
        }
        return n
}

  func (s *NAPTestItemContentType) MultipleChoiceOptionCountRead() *Int {
    if s.MultipleChoiceOptionCount == nil {
    if v, ok:= IntPointer(0); ok {
      s.MultipleChoiceOptionCount = ((*Int)(v))
      }
      }
      return s.MultipleChoiceOptionCount
    }
  func (s *NAPTestItemContentType) NAPWritingRubricListRead() *NAPWritingRubricListType {
    if s.NAPWritingRubricList == nil {
     if v, ok:= NAPWritingRubricListTypePointer(NAPWritingRubricListType{}); ok {
      s.NAPWritingRubricList = v
      }
      }
      return s.NAPWritingRubricList
    }
  func (s *NAPTestItemContentType) ItemNameRead() *String {
    if s.ItemName == nil {
    if v, ok:= StringPointer(""); ok {
      s.ItemName = ((*String)(v))
      }
      }
      return s.ItemName
    }
  func (s *NAPTestItemContentType) ReleasedStatusRead() *Bool {
    if s.ReleasedStatus == nil {
    if v, ok:= BoolPointer(false); ok {
      s.ReleasedStatus = ((*Bool)(v))
      }
      }
      return s.ReleasedStatus
    }
  func (s *NAPTestItemContentType) ContentDescriptionListRead() *ContentDescriptionListType {
    if s.ContentDescriptionList == nil {
     if v, ok:= ContentDescriptionListTypePointer(ContentDescriptionListType{}); ok {
      s.ContentDescriptionList = v
      }
      }
      return s.ContentDescriptionList
    }
  func (s *NAPTestItemContentType) SubdomainRead() *String {
    if s.Subdomain == nil {
    if v, ok:= StringPointer(""); ok {
      s.Subdomain = ((*String)(v))
      }
      }
      return s.Subdomain
    }
  func (s *NAPTestItemContentType) ItemDescriptorRead() *String {
    if s.ItemDescriptor == nil {
    if v, ok:= StringPointer(""); ok {
      s.ItemDescriptor = ((*String)(v))
      }
      }
      return s.ItemDescriptor
    }
  func (s *NAPTestItemContentType) CorrectAnswerRead() *String {
    if s.CorrectAnswer == nil {
    if v, ok:= StringPointer(""); ok {
      s.CorrectAnswer = ((*String)(v))
      }
      }
      return s.CorrectAnswer
    }
  func (s *NAPTestItemContentType) ExemplarURLRead() *String {
    if s.ExemplarURL == nil {
    if v, ok:= StringPointer(""); ok {
      s.ExemplarURL = ((*String)(v))
      }
      }
      return s.ExemplarURL
    }
  func (s *NAPTestItemContentType) NAPTestItemLocalIdRead() *LocalIdType {
    if s.NAPTestItemLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestItemLocalId = ((*LocalIdType)(v))
      }
      }
      return s.NAPTestItemLocalId
    }
  func (s *NAPTestItemContentType) ItemTypeRead() *AUCodeSetsNAPTestItemTypeType {
    if s.ItemType == nil {
    if v, ok:= StringPointer(""); ok {
      s.ItemType = ((*AUCodeSetsNAPTestItemTypeType)(v))
      }
      }
      return s.ItemType
    }
  func (s *NAPTestItemContentType) ItemProficiencyBandRead() *Int {
    if s.ItemProficiencyBand == nil {
    if v, ok:= IntPointer(0); ok {
      s.ItemProficiencyBand = ((*Int)(v))
      }
      }
      return s.ItemProficiencyBand
    }
  func (s *NAPTestItemContentType) MaximumScoreRead() *Float {
    if s.MaximumScore == nil {
    if v, ok:= FloatPointer(0); ok {
      s.MaximumScore = ((*Float)(v))
      }
      }
      return s.MaximumScore
    }
  func (s *NAPTestItemContentType) ItemDifficultyLogit5Read() *Float {
    if s.ItemDifficultyLogit5 == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ItemDifficultyLogit5 = ((*Float)(v))
      }
      }
      return s.ItemDifficultyLogit5
    }
  func (s *NAPTestItemContentType) WritingGenreRead() *AUCodeSetsNAPWritingGenreType {
    if s.WritingGenre == nil {
    if v, ok:= StringPointer(""); ok {
      s.WritingGenre = ((*AUCodeSetsNAPWritingGenreType)(v))
      }
      }
      return s.WritingGenre
    }
  func (s *NAPTestItemContentType) MarkingTypeRead() *AUCodeSetsNAPTestItemMarkingTypeType {
    if s.MarkingType == nil {
    if v, ok:= StringPointer(""); ok {
      s.MarkingType = ((*AUCodeSetsNAPTestItemMarkingTypeType)(v))
      }
      }
      return s.MarkingType
    }
  func (s *NAPTestItemContentType) ItemDifficultyRead() *Float {
    if s.ItemDifficulty == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ItemDifficulty = ((*Float)(v))
      }
      }
      return s.ItemDifficulty
    }
  func (s *NAPTestItemContentType) StimulusListRead() *StimulusListType {
    if s.StimulusList == nil {
     if v, ok:= StimulusListTypePointer(StimulusListType{}); ok {
      s.StimulusList = v
      }
      }
      return s.StimulusList
    }
  func (s *NAPTestItemContentType) ItemProficiencyLevelRead() *String {
    if s.ItemProficiencyLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.ItemProficiencyLevel = ((*String)(v))
      }
      }
      return s.ItemProficiencyLevel
    }
  func (s *NAPTestItemContentType) ItemDifficultyLogit62SERead() *Float {
    if s.ItemDifficultyLogit62SE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ItemDifficultyLogit62SE = ((*Float)(v))
      }
      }
      return s.ItemDifficultyLogit62SE
    }
  func (s *NAPTestItemContentType) ItemDifficultyLogit62Read() *Float {
    if s.ItemDifficultyLogit62 == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ItemDifficultyLogit62 = ((*Float)(v))
      }
      }
      return s.ItemDifficultyLogit62
    }
  func (s *NAPTestItemContentType) ItemDifficultyLogit5SERead() *Float {
    if s.ItemDifficultyLogit5SE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ItemDifficultyLogit5SE = ((*Float)(v))
      }
      }
      return s.ItemDifficultyLogit5SE
    }
  func (s *NAPTestItemContentType) ItemSubstitutedForListRead() *SubstituteItemListType {
    if s.ItemSubstitutedForList == nil {
     if v, ok:= SubstituteItemListTypePointer(SubstituteItemListType{}); ok {
      s.ItemSubstitutedForList = v
      }
      }
      return s.ItemSubstitutedForList
    }

  // XXXXX
func (t *StudentContactPersonal) CopyString(key string, value interface{}) *StudentContactPersonal {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentContactPersonal) CopyClone(key string, value interface{}) *StudentContactPersonal {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentContactPersonal) Unset(key string) *StudentContactPersonal {
        switch key {
  case "OtherIdList":
   n.OtherIdList = nil
  case "RefId":
   n.RefId = nil
  case "LocalId":
   n.LocalId = nil
  case "EmploymentType":
   n.EmploymentType = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "PersonInfo":
   n.PersonInfo = nil
  case "SchoolEducationalLevel":
   n.SchoolEducationalLevel = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "NonSchoolEducation":
   n.NonSchoolEducation = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentContactPersonal")
        }
        return n
}

func (n *StudentContactPersonal) SetProperty(key string, value interface{}) *StudentContactPersonal {
        if n == nil {
                n, _ = StudentContactPersonalPointer(StudentContactPersonal{})
        }
        switch key {
    case "OtherIdList":
    if v, ok:= OtherIdListTypePointer(value); ok {
      n.OtherIdList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "EmploymentType":
        if !CodesetContains(AUCodeSetsEmploymentTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEmploymentTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.EmploymentType = ((*AUCodeSetsEmploymentTypeType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "PersonInfo":
    if v, ok:= PersonInfoTypePointer(value); ok {
      n.PersonInfo = v
      }
    case "SchoolEducationalLevel":
        if !CodesetContains(AUCodeSetsSchoolEducationLevelTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolEducationLevelTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.SchoolEducationalLevel = ((*EducationalLevelType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "NonSchoolEducation":
        if !CodesetContains(AUCodeSetsNonSchoolEducationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNonSchoolEducationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.NonSchoolEducation = ((*AUCodeSetsNonSchoolEducationType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentContactPersonal")
        }
        return n
}

  func (s *StudentContactPersonal) OtherIdListRead() *OtherIdListType {
    if s.OtherIdList == nil {
     if v, ok:= OtherIdListTypePointer(OtherIdListType{}); ok {
      s.OtherIdList = v
      }
      }
      return s.OtherIdList
    }
  func (s *StudentContactPersonal) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StudentContactPersonal) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *StudentContactPersonal) EmploymentTypeRead() *AUCodeSetsEmploymentTypeType {
    if s.EmploymentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.EmploymentType = ((*AUCodeSetsEmploymentTypeType)(v))
      }
      }
      return s.EmploymentType
    }
  func (s *StudentContactPersonal) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentContactPersonal) PersonInfoRead() *PersonInfoType {
    if s.PersonInfo == nil {
     if v, ok:= PersonInfoTypePointer(PersonInfoType{}); ok {
      s.PersonInfo = v
      }
      }
      return s.PersonInfo
    }
  func (s *StudentContactPersonal) SchoolEducationalLevelRead() *EducationalLevelType {
    if s.SchoolEducationalLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolEducationalLevel = ((*EducationalLevelType)(v))
      }
      }
      return s.SchoolEducationalLevel
    }
  func (s *StudentContactPersonal) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentContactPersonal) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentContactPersonal) NonSchoolEducationRead() *AUCodeSetsNonSchoolEducationType {
    if s.NonSchoolEducation == nil {
    if v, ok:= StringPointer(""); ok {
      s.NonSchoolEducation = ((*AUCodeSetsNonSchoolEducationType)(v))
      }
      }
      return s.NonSchoolEducation
    }

  // XXXXX
func (t *DwellingArrangementType) CopyString(key string, value interface{}) *DwellingArrangementType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *DwellingArrangementType) CopyClone(key string, value interface{}) *DwellingArrangementType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *DwellingArrangementType) Unset(key string) *DwellingArrangementType {
        switch key {
  case "OtherCodeList":
   n.OtherCodeList = nil
  case "Code":
   n.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DwellingArrangementType")
        }
        return n
}

func (n *DwellingArrangementType) SetProperty(key string, value interface{}) *DwellingArrangementType {
        if n == nil {
                n, _ = DwellingArrangementTypePointer(DwellingArrangementType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsDwellingArrangementType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsDwellingArrangementType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsDwellingArrangementType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DwellingArrangementType")
        }
        return n
}

  func (s *DwellingArrangementType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }
  func (s *DwellingArrangementType) CodeRead() *AUCodeSetsDwellingArrangementType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsDwellingArrangementType)(v))
      }
      }
      return s.Code
    }

  // XXXXX
func (t *WellbeingCharacteristic) CopyString(key string, value interface{}) *WellbeingCharacteristic {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *WellbeingCharacteristic) CopyClone(key string, value interface{}) *WellbeingCharacteristic {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *WellbeingCharacteristic) Unset(key string) *WellbeingCharacteristic {
        switch key {
  case "DocumentList":
   n.DocumentList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "SymptomList":
   n.SymptomList = nil
  case "WellbeingCharacteristicClassification":
   n.WellbeingCharacteristicClassification = nil
  case "LocalCharacteristicCode":
   n.LocalCharacteristicCode = nil
  case "LocalId":
   n.LocalId = nil
  case "RefId":
   n.RefId = nil
  case "DailyManagement":
   n.DailyManagement = nil
  case "WellbeingCharacteristicNotes":
   n.WellbeingCharacteristicNotes = nil
  case "Trigger":
   n.Trigger = nil
  case "Alert":
   n.Alert = nil
  case "WellbeingCharacteristicEndDate":
   n.WellbeingCharacteristicEndDate = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "ConfidentialFlag":
   n.ConfidentialFlag = nil
  case "EmergencyManagement":
   n.EmergencyManagement = nil
  case "WellbeingCharacteristicSubCategory":
   n.WellbeingCharacteristicSubCategory = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "WellbeingCharacteristicReviewDate":
   n.WellbeingCharacteristicReviewDate = nil
  case "WellbeingCharacteristicCategory":
   n.WellbeingCharacteristicCategory = nil
  case "MedicationList":
   n.MedicationList = nil
  case "CharacteristicSeverity":
   n.CharacteristicSeverity = nil
  case "EmergencyResponsePlan":
   n.EmergencyResponsePlan = nil
  case "WellbeingCharacteristicStartDate":
   n.WellbeingCharacteristicStartDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingCharacteristic")
        }
        return n
}

func (n *WellbeingCharacteristic) SetProperty(key string, value interface{}) *WellbeingCharacteristic {
        if n == nil {
                n, _ = WellbeingCharacteristicPointer(WellbeingCharacteristic{})
        }
        switch key {
    case "DocumentList":
    if v, ok:= WellbeingDocumentListTypePointer(value); ok {
      n.DocumentList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "SymptomList":
    if v, ok:= SymptomListTypePointer(value); ok {
      n.SymptomList = v
      }
    case "WellbeingCharacteristicClassification":
        if !CodesetContains(AUCodeSetsWellbeingCharacteristicClassificationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingCharacteristicClassificationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.WellbeingCharacteristicClassification = ((*AUCodeSetsWellbeingCharacteristicClassificationType)(v))
      }
    case "LocalCharacteristicCode":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalCharacteristicCode = ((*LocalIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "DailyManagement":
    
    if v, ok:= StringPointer(value); ok {
      n.DailyManagement = ((*String)(v))
      }
    case "WellbeingCharacteristicNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingCharacteristicNotes = ((*String)(v))
      }
    case "Trigger":
    
    if v, ok:= StringPointer(value); ok {
      n.Trigger = ((*String)(v))
      }
    case "Alert":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Alert = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "WellbeingCharacteristicEndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingCharacteristicEndDate = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "ConfidentialFlag":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ConfidentialFlag = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "EmergencyManagement":
    
    if v, ok:= StringPointer(value); ok {
      n.EmergencyManagement = ((*String)(v))
      }
    case "WellbeingCharacteristicSubCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingCharacteristicSubCategory = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "WellbeingCharacteristicReviewDate":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingCharacteristicReviewDate = ((*String)(v))
      }
    case "WellbeingCharacteristicCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingCharacteristicCategory = ((*String)(v))
      }
    case "MedicationList":
    if v, ok:= MedicationListTypePointer(value); ok {
      n.MedicationList = v
      }
    case "CharacteristicSeverity":
    
    if v, ok:= StringPointer(value); ok {
      n.CharacteristicSeverity = ((*String)(v))
      }
    case "EmergencyResponsePlan":
    
    if v, ok:= StringPointer(value); ok {
      n.EmergencyResponsePlan = ((*String)(v))
      }
    case "WellbeingCharacteristicStartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingCharacteristicStartDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingCharacteristic")
        }
        return n
}

  func (s *WellbeingCharacteristic) DocumentListRead() *WellbeingDocumentListType {
    if s.DocumentList == nil {
     if v, ok:= WellbeingDocumentListTypePointer(WellbeingDocumentListType{}); ok {
      s.DocumentList = v
      }
      }
      return s.DocumentList
    }
  func (s *WellbeingCharacteristic) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *WellbeingCharacteristic) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *WellbeingCharacteristic) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *WellbeingCharacteristic) SymptomListRead() *SymptomListType {
    if s.SymptomList == nil {
     if v, ok:= SymptomListTypePointer(SymptomListType{}); ok {
      s.SymptomList = v
      }
      }
      return s.SymptomList
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicClassificationRead() *AUCodeSetsWellbeingCharacteristicClassificationType {
    if s.WellbeingCharacteristicClassification == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingCharacteristicClassification = ((*AUCodeSetsWellbeingCharacteristicClassificationType)(v))
      }
      }
      return s.WellbeingCharacteristicClassification
    }
  func (s *WellbeingCharacteristic) LocalCharacteristicCodeRead() *LocalIdType {
    if s.LocalCharacteristicCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalCharacteristicCode = ((*LocalIdType)(v))
      }
      }
      return s.LocalCharacteristicCode
    }
  func (s *WellbeingCharacteristic) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *WellbeingCharacteristic) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *WellbeingCharacteristic) DailyManagementRead() *String {
    if s.DailyManagement == nil {
    if v, ok:= StringPointer(""); ok {
      s.DailyManagement = ((*String)(v))
      }
      }
      return s.DailyManagement
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicNotesRead() *String {
    if s.WellbeingCharacteristicNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingCharacteristicNotes = ((*String)(v))
      }
      }
      return s.WellbeingCharacteristicNotes
    }
  func (s *WellbeingCharacteristic) TriggerRead() *String {
    if s.Trigger == nil {
    if v, ok:= StringPointer(""); ok {
      s.Trigger = ((*String)(v))
      }
      }
      return s.Trigger
    }
  func (s *WellbeingCharacteristic) AlertRead() *AUCodeSetsYesOrNoCategoryType {
    if s.Alert == nil {
    if v, ok:= StringPointer(""); ok {
      s.Alert = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.Alert
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicEndDateRead() *String {
    if s.WellbeingCharacteristicEndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingCharacteristicEndDate = ((*String)(v))
      }
      }
      return s.WellbeingCharacteristicEndDate
    }
  func (s *WellbeingCharacteristic) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *WellbeingCharacteristic) ConfidentialFlagRead() *AUCodeSetsYesOrNoCategoryType {
    if s.ConfidentialFlag == nil {
    if v, ok:= StringPointer(""); ok {
      s.ConfidentialFlag = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.ConfidentialFlag
    }
  func (s *WellbeingCharacteristic) EmergencyManagementRead() *String {
    if s.EmergencyManagement == nil {
    if v, ok:= StringPointer(""); ok {
      s.EmergencyManagement = ((*String)(v))
      }
      }
      return s.EmergencyManagement
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicSubCategoryRead() *String {
    if s.WellbeingCharacteristicSubCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingCharacteristicSubCategory = ((*String)(v))
      }
      }
      return s.WellbeingCharacteristicSubCategory
    }
  func (s *WellbeingCharacteristic) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicReviewDateRead() *String {
    if s.WellbeingCharacteristicReviewDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingCharacteristicReviewDate = ((*String)(v))
      }
      }
      return s.WellbeingCharacteristicReviewDate
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicCategoryRead() *String {
    if s.WellbeingCharacteristicCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingCharacteristicCategory = ((*String)(v))
      }
      }
      return s.WellbeingCharacteristicCategory
    }
  func (s *WellbeingCharacteristic) MedicationListRead() *MedicationListType {
    if s.MedicationList == nil {
     if v, ok:= MedicationListTypePointer(MedicationListType{}); ok {
      s.MedicationList = v
      }
      }
      return s.MedicationList
    }
  func (s *WellbeingCharacteristic) CharacteristicSeverityRead() *String {
    if s.CharacteristicSeverity == nil {
    if v, ok:= StringPointer(""); ok {
      s.CharacteristicSeverity = ((*String)(v))
      }
      }
      return s.CharacteristicSeverity
    }
  func (s *WellbeingCharacteristic) EmergencyResponsePlanRead() *String {
    if s.EmergencyResponsePlan == nil {
    if v, ok:= StringPointer(""); ok {
      s.EmergencyResponsePlan = ((*String)(v))
      }
      }
      return s.EmergencyResponsePlan
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicStartDateRead() *String {
    if s.WellbeingCharacteristicStartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingCharacteristicStartDate = ((*String)(v))
      }
      }
      return s.WellbeingCharacteristicStartDate
    }

  // XXXXX
func (t *LanguageBaseType) CopyString(key string, value interface{}) *LanguageBaseType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LanguageBaseType) CopyClone(key string, value interface{}) *LanguageBaseType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LanguageBaseType) Unset(key string) *LanguageBaseType {
        switch key {
  case "Code":
   n.Code = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
  case "Dialect":
   n.Dialect = nil
  case "LanguageType":
   n.LanguageType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LanguageBaseType")
        }
        return n
}

func (n *LanguageBaseType) SetProperty(key string, value interface{}) *LanguageBaseType {
        if n == nil {
                n, _ = LanguageBaseTypePointer(LanguageBaseType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
    case "Dialect":
    
    if v, ok:= StringPointer(value); ok {
      n.Dialect = ((*String)(v))
      }
    case "LanguageType":
        if !CodesetContains(AUCodeSetsLanguageTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsLanguageTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.LanguageType = ((*AUCodeSetsLanguageTypeType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LanguageBaseType")
        }
        return n
}

  func (s *LanguageBaseType) CodeRead() *AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
      }
      return s.Code
    }
  func (s *LanguageBaseType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }
  func (s *LanguageBaseType) DialectRead() *String {
    if s.Dialect == nil {
    if v, ok:= StringPointer(""); ok {
      s.Dialect = ((*String)(v))
      }
      }
      return s.Dialect
    }
  func (s *LanguageBaseType) LanguageTypeRead() *AUCodeSetsLanguageTypeType {
    if s.LanguageType == nil {
    if v, ok:= StringPointer(""); ok {
      s.LanguageType = ((*AUCodeSetsLanguageTypeType)(v))
      }
      }
      return s.LanguageType
    }

  // XXXXX
func (t *CalendarSummary) CopyString(key string, value interface{}) *CalendarSummary {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CalendarSummary) CopyClone(key string, value interface{}) *CalendarSummary {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CalendarSummary) Unset(key string) *CalendarSummary {
        switch key {
  case "LocalId":
   n.LocalId = nil
  case "Description":
   n.Description = nil
  case "StartDate":
   n.StartDate = nil
  case "RefId":
   n.RefId = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "EndDate":
   n.EndDate = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "YearLevels":
   n.YearLevels = nil
  case "FirstInstructionDate":
   n.FirstInstructionDate = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "DaysInSession":
   n.DaysInSession = nil
  case "GraduationDate":
   n.GraduationDate = nil
  case "InstructionalMinutes":
   n.InstructionalMinutes = nil
  case "LastInstructionDate":
   n.LastInstructionDate = nil
  case "MinutesPerDay":
   n.MinutesPerDay = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CalendarSummary")
        }
        return n
}

func (n *CalendarSummary) SetProperty(key string, value interface{}) *CalendarSummary {
        if n == nil {
                n, _ = CalendarSummaryPointer(CalendarSummary{})
        }
        switch key {
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.StartDate = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EndDate = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.YearLevels = v
      }
    case "FirstInstructionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.FirstInstructionDate = ((*String)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "DaysInSession":
    
    if v, ok:= IntPointer(value); ok {
      n.DaysInSession = ((*Int)(v))
      }
    case "GraduationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.GraduationDate = ((*GraduationDateType)(v))
      }
    case "InstructionalMinutes":
    
    if v, ok:= IntPointer(value); ok {
      n.InstructionalMinutes = ((*Int)(v))
      }
    case "LastInstructionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.LastInstructionDate = ((*String)(v))
      }
    case "MinutesPerDay":
    
    if v, ok:= IntPointer(value); ok {
      n.MinutesPerDay = ((*Int)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CalendarSummary")
        }
        return n
}

  func (s *CalendarSummary) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *CalendarSummary) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *CalendarSummary) StartDateRead() *String {
    if s.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartDate = ((*String)(v))
      }
      }
      return s.StartDate
    }
  func (s *CalendarSummary) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *CalendarSummary) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *CalendarSummary) EndDateRead() *String {
    if s.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndDate = ((*String)(v))
      }
      }
      return s.EndDate
    }
  func (s *CalendarSummary) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *CalendarSummary) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *CalendarSummary) YearLevelsRead() *YearLevelsType {
    if s.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.YearLevels = v
      }
      }
      return s.YearLevels
    }
  func (s *CalendarSummary) FirstInstructionDateRead() *String {
    if s.FirstInstructionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.FirstInstructionDate = ((*String)(v))
      }
      }
      return s.FirstInstructionDate
    }
  func (s *CalendarSummary) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *CalendarSummary) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *CalendarSummary) DaysInSessionRead() *Int {
    if s.DaysInSession == nil {
    if v, ok:= IntPointer(0); ok {
      s.DaysInSession = ((*Int)(v))
      }
      }
      return s.DaysInSession
    }
  func (s *CalendarSummary) GraduationDateRead() *GraduationDateType {
    if s.GraduationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.GraduationDate = ((*GraduationDateType)(v))
      }
      }
      return s.GraduationDate
    }
  func (s *CalendarSummary) InstructionalMinutesRead() *Int {
    if s.InstructionalMinutes == nil {
    if v, ok:= IntPointer(0); ok {
      s.InstructionalMinutes = ((*Int)(v))
      }
      }
      return s.InstructionalMinutes
    }
  func (s *CalendarSummary) LastInstructionDateRead() *String {
    if s.LastInstructionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.LastInstructionDate = ((*String)(v))
      }
      }
      return s.LastInstructionDate
    }
  func (s *CalendarSummary) MinutesPerDayRead() *Int {
    if s.MinutesPerDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.MinutesPerDay = ((*Int)(v))
      }
      }
      return s.MinutesPerDay
    }

  // XXXXX
func (t *FinancialAccount) CopyString(key string, value interface{}) *FinancialAccount {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *FinancialAccount) CopyClone(key string, value interface{}) *FinancialAccount {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *FinancialAccount) Unset(key string) *FinancialAccount {
        switch key {
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "CreationDate":
   n.CreationDate = nil
  case "ParentAccountRefId":
   n.ParentAccountRefId = nil
  case "CreationTime":
   n.CreationTime = nil
  case "AccountNumber":
   n.AccountNumber = nil
  case "Description":
   n.Description = nil
  case "Name":
   n.Name = nil
  case "LocalId":
   n.LocalId = nil
  case "RefId":
   n.RefId = nil
  case "ChargedLocationInfoRefId":
   n.ChargedLocationInfoRefId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "ClassType":
   n.ClassType = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "AccountCode":
   n.AccountCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FinancialAccount")
        }
        return n
}

func (n *FinancialAccount) SetProperty(key string, value interface{}) *FinancialAccount {
        if n == nil {
                n, _ = FinancialAccountPointer(FinancialAccount{})
        }
        switch key {
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "CreationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.CreationDate = ((*String)(v))
      }
    case "ParentAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.ParentAccountRefId = ((*String)(v))
      }
    case "CreationTime":
    
    if v, ok:= StringPointer(value); ok {
      n.CreationTime = ((*String)(v))
      }
    case "AccountNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.AccountNumber = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.Name = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ChargedLocationInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.ChargedLocationInfoRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "ClassType":
    
    if v, ok:= StringPointer(value); ok {
      n.ClassType = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "AccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.AccountCode = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FinancialAccount")
        }
        return n
}

  func (s *FinancialAccount) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *FinancialAccount) CreationDateRead() *String {
    if s.CreationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.CreationDate = ((*String)(v))
      }
      }
      return s.CreationDate
    }
  func (s *FinancialAccount) ParentAccountRefIdRead() *String {
    if s.ParentAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ParentAccountRefId = ((*String)(v))
      }
      }
      return s.ParentAccountRefId
    }
  func (s *FinancialAccount) CreationTimeRead() *String {
    if s.CreationTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.CreationTime = ((*String)(v))
      }
      }
      return s.CreationTime
    }
  func (s *FinancialAccount) AccountNumberRead() *String {
    if s.AccountNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.AccountNumber = ((*String)(v))
      }
      }
      return s.AccountNumber
    }
  func (s *FinancialAccount) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *FinancialAccount) NameRead() *String {
    if s.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.Name = ((*String)(v))
      }
      }
      return s.Name
    }
  func (s *FinancialAccount) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *FinancialAccount) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *FinancialAccount) ChargedLocationInfoRefIdRead() *String {
    if s.ChargedLocationInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ChargedLocationInfoRefId = ((*String)(v))
      }
      }
      return s.ChargedLocationInfoRefId
    }
  func (s *FinancialAccount) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *FinancialAccount) ClassTypeRead() *String {
    if s.ClassType == nil {
    if v, ok:= StringPointer(""); ok {
      s.ClassType = ((*String)(v))
      }
      }
      return s.ClassType
    }
  func (s *FinancialAccount) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *FinancialAccount) AccountCodeRead() *String {
    if s.AccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.AccountCode = ((*String)(v))
      }
      }
      return s.AccountCode
    }

  // XXXXX
func (t *MonetaryAmountType) CopyString(key string, value interface{}) *MonetaryAmountType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *MonetaryAmountType) CopyClone(key string, value interface{}) *MonetaryAmountType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *MonetaryAmountType) Unset(key string) *MonetaryAmountType {
        switch key {
  case "Currency":
   n.Currency = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MonetaryAmountType")
        }
        return n
}

func (n *MonetaryAmountType) SetProperty(key string, value interface{}) *MonetaryAmountType {
        if n == nil {
                n, _ = MonetaryAmountTypePointer(MonetaryAmountType{})
        }
        switch key {
    case "Currency":
        if !CodesetContains(ISO4217CurrencyNamesAndCodeElementsType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "ISO4217CurrencyNamesAndCodeElementsType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Currency = ((*ISO4217CurrencyNamesAndCodeElementsType)(v))
      }
    case "Value":
    
    if v, ok:= FloatPointer(value); ok {
      n.Value = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MonetaryAmountType")
        }
        return n
}

  func (s *MonetaryAmountType) CurrencyRead() *ISO4217CurrencyNamesAndCodeElementsType {
    if s.Currency == nil {
    if v, ok:= StringPointer(""); ok {
      s.Currency = ((*ISO4217CurrencyNamesAndCodeElementsType)(v))
      }
      }
      return s.Currency
    }
  func (s *MonetaryAmountType) ValueRead() *Float {
    if s.Value == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Value = ((*Float)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *RelationshipType) CopyString(key string, value interface{}) *RelationshipType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *RelationshipType) CopyClone(key string, value interface{}) *RelationshipType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *RelationshipType) Unset(key string) *RelationshipType {
        switch key {
  case "Code":
   n.Code = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "RelationshipType")
        }
        return n
}

func (n *RelationshipType) SetProperty(key string, value interface{}) *RelationshipType {
        if n == nil {
                n, _ = RelationshipTypePointer(RelationshipType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsRelationshipToStudentType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsRelationshipToStudentType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsRelationshipToStudentType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "RelationshipType")
        }
        return n
}

  func (s *RelationshipType) CodeRead() *AUCodeSetsRelationshipToStudentType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsRelationshipToStudentType)(v))
      }
      }
      return s.Code
    }
  func (s *RelationshipType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }

  // XXXXX
func (t *VisaSubClassType) CopyString(key string, value interface{}) *VisaSubClassType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *VisaSubClassType) CopyClone(key string, value interface{}) *VisaSubClassType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *VisaSubClassType) Unset(key string) *VisaSubClassType {
        switch key {
  case "Code":
   n.Code = nil
  case "VisaStatisticalCode":
   n.VisaStatisticalCode = nil
  case "ATEExpiryDate":
   n.ATEExpiryDate = nil
  case "VisaExpiryDate":
   n.VisaExpiryDate = nil
  case "ATEStartDate":
   n.ATEStartDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "VisaSubClassType")
        }
        return n
}

func (n *VisaSubClassType) SetProperty(key string, value interface{}) *VisaSubClassType {
        if n == nil {
                n, _ = VisaSubClassTypePointer(VisaSubClassType{})
        }
        switch key {
    case "Code":
    
    if v, ok:= StringPointer(value); ok {
      n.Code = ((*VisaSubClassCodeType)(v))
      }
    case "VisaStatisticalCode":
    
    if v, ok:= StringPointer(value); ok {
      n.VisaStatisticalCode = ((*String)(v))
      }
    case "ATEExpiryDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ATEExpiryDate = ((*String)(v))
      }
    case "VisaExpiryDate":
    
    if v, ok:= StringPointer(value); ok {
      n.VisaExpiryDate = ((*String)(v))
      }
    case "ATEStartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ATEStartDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "VisaSubClassType")
        }
        return n
}

  func (s *VisaSubClassType) CodeRead() *VisaSubClassCodeType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*VisaSubClassCodeType)(v))
      }
      }
      return s.Code
    }
  func (s *VisaSubClassType) VisaStatisticalCodeRead() *String {
    if s.VisaStatisticalCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.VisaStatisticalCode = ((*String)(v))
      }
      }
      return s.VisaStatisticalCode
    }
  func (s *VisaSubClassType) ATEExpiryDateRead() *String {
    if s.ATEExpiryDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ATEExpiryDate = ((*String)(v))
      }
      }
      return s.ATEExpiryDate
    }
  func (s *VisaSubClassType) VisaExpiryDateRead() *String {
    if s.VisaExpiryDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.VisaExpiryDate = ((*String)(v))
      }
      }
      return s.VisaExpiryDate
    }
  func (s *VisaSubClassType) ATEStartDateRead() *String {
    if s.ATEStartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ATEStartDate = ((*String)(v))
      }
      }
      return s.ATEStartDate
    }

  // XXXXX
func (t *LearningResource) CopyString(key string, value interface{}) *LearningResource {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LearningResource) CopyClone(key string, value interface{}) *LearningResource {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LearningResource) Unset(key string) *LearningResource {
        switch key {
  case "LearningResourcePackageRefId":
   n.LearningResourcePackageRefId = nil
  case "Location":
   n.Location = nil
  case "UseAgreement":
   n.UseAgreement = nil
  case "SubjectAreas":
   n.SubjectAreas = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "AgreementDate":
   n.AgreementDate = nil
  case "Approvals":
   n.Approvals = nil
  case "YearLevels":
   n.YearLevels = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "LearningStandards":
   n.LearningStandards = nil
  case "MediaTypes":
   n.MediaTypes = nil
  case "Status":
   n.Status = nil
  case "Contacts":
   n.Contacts = nil
  case "Name":
   n.Name = nil
  case "Description":
   n.Description = nil
  case "Evaluations":
   n.Evaluations = nil
  case "RefId":
   n.RefId = nil
  case "Components":
   n.Components = nil
  case "Author":
   n.Author = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningResource")
        }
        return n
}

func (n *LearningResource) SetProperty(key string, value interface{}) *LearningResource {
        if n == nil {
                n, _ = LearningResourcePointer(LearningResource{})
        }
        switch key {
    case "LearningResourcePackageRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.LearningResourcePackageRefId = ((*String)(v))
      }
    case "Location":
    if v, ok:= LearningResource_LocationPointer(value); ok {
      n.Location = v
      }
    case "UseAgreement":
    
    if v, ok:= StringPointer(value); ok {
      n.UseAgreement = ((*String)(v))
      }
    case "SubjectAreas":
    if v, ok:= ACStrandAreaListTypePointer(value); ok {
      n.SubjectAreas = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "AgreementDate":
    
    if v, ok:= StringPointer(value); ok {
      n.AgreementDate = ((*String)(v))
      }
    case "Approvals":
    if v, ok:= ApprovalsTypePointer(value); ok {
      n.Approvals = v
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.YearLevels = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "LearningStandards":
    if v, ok:= LearningStandardsTypePointer(value); ok {
      n.LearningStandards = v
      }
    case "MediaTypes":
    if v, ok:= MediaTypesTypePointer(value); ok {
      n.MediaTypes = v
      }
    case "Status":
    
    if v, ok:= StringPointer(value); ok {
      n.Status = ((*String)(v))
      }
    case "Contacts":
    if v, ok:= ContactsTypePointer(value); ok {
      n.Contacts = v
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.Name = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "Evaluations":
    if v, ok:= EvaluationsTypePointer(value); ok {
      n.Evaluations = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "Components":
    if v, ok:= ComponentsTypePointer(value); ok {
      n.Components = v
      }
    case "Author":
    
    if v, ok:= StringPointer(value); ok {
      n.Author = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningResource")
        }
        return n
}

  func (s *LearningResource) LearningResourcePackageRefIdRead() *String {
    if s.LearningResourcePackageRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LearningResourcePackageRefId = ((*String)(v))
      }
      }
      return s.LearningResourcePackageRefId
    }
  func (s *LearningResource) LocationRead() *LearningResource_Location {
    if s.Location == nil {
     if v, ok:= LearningResource_LocationPointer(LearningResource_Location{}); ok {
      s.Location = v
      }
      }
      return s.Location
    }
  func (s *LearningResource) UseAgreementRead() *String {
    if s.UseAgreement == nil {
    if v, ok:= StringPointer(""); ok {
      s.UseAgreement = ((*String)(v))
      }
      }
      return s.UseAgreement
    }
  func (s *LearningResource) SubjectAreasRead() *ACStrandAreaListType {
    if s.SubjectAreas == nil {
     if v, ok:= ACStrandAreaListTypePointer(ACStrandAreaListType{}); ok {
      s.SubjectAreas = v
      }
      }
      return s.SubjectAreas
    }
  func (s *LearningResource) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *LearningResource) AgreementDateRead() *String {
    if s.AgreementDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.AgreementDate = ((*String)(v))
      }
      }
      return s.AgreementDate
    }
  func (s *LearningResource) ApprovalsRead() *ApprovalsType {
    if s.Approvals == nil {
     if v, ok:= ApprovalsTypePointer(ApprovalsType{}); ok {
      s.Approvals = v
      }
      }
      return s.Approvals
    }
  func (s *LearningResource) YearLevelsRead() *YearLevelsType {
    if s.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.YearLevels = v
      }
      }
      return s.YearLevels
    }
  func (s *LearningResource) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *LearningResource) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *LearningResource) LearningStandardsRead() *LearningStandardsType {
    if s.LearningStandards == nil {
     if v, ok:= LearningStandardsTypePointer(LearningStandardsType{}); ok {
      s.LearningStandards = v
      }
      }
      return s.LearningStandards
    }
  func (s *LearningResource) MediaTypesRead() *MediaTypesType {
    if s.MediaTypes == nil {
     if v, ok:= MediaTypesTypePointer(MediaTypesType{}); ok {
      s.MediaTypes = v
      }
      }
      return s.MediaTypes
    }
  func (s *LearningResource) StatusRead() *String {
    if s.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.Status = ((*String)(v))
      }
      }
      return s.Status
    }
  func (s *LearningResource) ContactsRead() *ContactsType {
    if s.Contacts == nil {
     if v, ok:= ContactsTypePointer(ContactsType{}); ok {
      s.Contacts = v
      }
      }
      return s.Contacts
    }
  func (s *LearningResource) NameRead() *String {
    if s.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.Name = ((*String)(v))
      }
      }
      return s.Name
    }
  func (s *LearningResource) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *LearningResource) EvaluationsRead() *EvaluationsType {
    if s.Evaluations == nil {
     if v, ok:= EvaluationsTypePointer(EvaluationsType{}); ok {
      s.Evaluations = v
      }
      }
      return s.Evaluations
    }
  func (s *LearningResource) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *LearningResource) ComponentsRead() *ComponentsType {
    if s.Components == nil {
     if v, ok:= ComponentsTypePointer(ComponentsType{}); ok {
      s.Components = v
      }
      }
      return s.Components
    }
  func (s *LearningResource) AuthorRead() *String {
    if s.Author == nil {
    if v, ok:= StringPointer(""); ok {
      s.Author = ((*String)(v))
      }
      }
      return s.Author
    }

  // XXXXX
func (t *DomainProficiencyContainerType) CopyString(key string, value interface{}) *DomainProficiencyContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *DomainProficiencyContainerType) CopyClone(key string, value interface{}) *DomainProficiencyContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *DomainProficiencyContainerType) Unset(key string) *DomainProficiencyContainerType {
        switch key {
  case "Level1Upper":
   n.Level1Upper = nil
  case "Level4Upper":
   n.Level4Upper = nil
  case "Level2Upper":
   n.Level2Upper = nil
  case "Level3Upper":
   n.Level3Upper = nil
  case "Level2Lower":
   n.Level2Lower = nil
  case "Level3Lower":
   n.Level3Lower = nil
  case "Level4Lower":
   n.Level4Lower = nil
  case "Level1Lower":
   n.Level1Lower = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DomainProficiencyContainerType")
        }
        return n
}

func (n *DomainProficiencyContainerType) SetProperty(key string, value interface{}) *DomainProficiencyContainerType {
        if n == nil {
                n, _ = DomainProficiencyContainerTypePointer(DomainProficiencyContainerType{})
        }
        switch key {
    case "Level1Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Level1Upper = ((*Float)(v))
      }
    case "Level4Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Level4Upper = ((*Float)(v))
      }
    case "Level2Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Level2Upper = ((*Float)(v))
      }
    case "Level3Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.Level3Upper = ((*Float)(v))
      }
    case "Level2Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Level2Lower = ((*Float)(v))
      }
    case "Level3Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Level3Lower = ((*Float)(v))
      }
    case "Level4Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Level4Lower = ((*Float)(v))
      }
    case "Level1Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.Level1Lower = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DomainProficiencyContainerType")
        }
        return n
}

  func (s *DomainProficiencyContainerType) Level1UpperRead() *Float {
    if s.Level1Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Level1Upper = ((*Float)(v))
      }
      }
      return s.Level1Upper
    }
  func (s *DomainProficiencyContainerType) Level4UpperRead() *Float {
    if s.Level4Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Level4Upper = ((*Float)(v))
      }
      }
      return s.Level4Upper
    }
  func (s *DomainProficiencyContainerType) Level2UpperRead() *Float {
    if s.Level2Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Level2Upper = ((*Float)(v))
      }
      }
      return s.Level2Upper
    }
  func (s *DomainProficiencyContainerType) Level3UpperRead() *Float {
    if s.Level3Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Level3Upper = ((*Float)(v))
      }
      }
      return s.Level3Upper
    }
  func (s *DomainProficiencyContainerType) Level2LowerRead() *Float {
    if s.Level2Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Level2Lower = ((*Float)(v))
      }
      }
      return s.Level2Lower
    }
  func (s *DomainProficiencyContainerType) Level3LowerRead() *Float {
    if s.Level3Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Level3Lower = ((*Float)(v))
      }
      }
      return s.Level3Lower
    }
  func (s *DomainProficiencyContainerType) Level4LowerRead() *Float {
    if s.Level4Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Level4Lower = ((*Float)(v))
      }
      }
      return s.Level4Lower
    }
  func (s *DomainProficiencyContainerType) Level1LowerRead() *Float {
    if s.Level1Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Level1Lower = ((*Float)(v))
      }
      }
      return s.Level1Lower
    }

  // XXXXX
func (t *ResourceBooking_ResourceRefId) CopyString(key string, value interface{}) *ResourceBooking_ResourceRefId {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ResourceBooking_ResourceRefId) CopyClone(key string, value interface{}) *ResourceBooking_ResourceRefId {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ResourceBooking_ResourceRefId) Unset(key string) *ResourceBooking_ResourceRefId {
        switch key {
  case "Value":
   n.Value = nil
  case "SIF_RefObject":
   n.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceBooking_ResourceRefId")
        }
        return n
}

func (n *ResourceBooking_ResourceRefId) SetProperty(key string, value interface{}) *ResourceBooking_ResourceRefId {
        if n == nil {
                n, _ = ResourceBooking_ResourceRefIdPointer(ResourceBooking_ResourceRefId{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceBooking_ResourceRefId")
        }
        return n
}

  func (s *ResourceBooking_ResourceRefId) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *ResourceBooking_ResourceRefId) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }

  // XXXXX
func (t *StudentMostRecentContainerType) CopyString(key string, value interface{}) *StudentMostRecentContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentMostRecentContainerType) CopyClone(key string, value interface{}) *StudentMostRecentContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentMostRecentContainerType) Unset(key string) *StudentMostRecentContainerType {
        switch key {
  case "OtherSchoolName":
   n.OtherSchoolName = nil
  case "ClassCode":
   n.ClassCode = nil
  case "OtherEnrollmentSchoolACARAId":
   n.OtherEnrollmentSchoolACARAId = nil
  case "Parent1EmploymentType":
   n.Parent1EmploymentType = nil
  case "YearLevel":
   n.YearLevel = nil
  case "ReportingSchoolId":
   n.ReportingSchoolId = nil
  case "Homegroup":
   n.Homegroup = nil
  case "DisabilityCategory":
   n.DisabilityCategory = nil
  case "Parent1Language":
   n.Parent1Language = nil
  case "HomeroomLocalId":
   n.HomeroomLocalId = nil
  case "FFPOS":
   n.FFPOS = nil
  case "DisabilityLevelOfAdjustment":
   n.DisabilityLevelOfAdjustment = nil
  case "MembershipType":
   n.MembershipType = nil
  case "CensusAge":
   n.CensusAge = nil
  case "BoardingStatus":
   n.BoardingStatus = nil
  case "Parent1NonSchoolEducation":
   n.Parent1NonSchoolEducation = nil
  case "Parent2EmploymentType":
   n.Parent2EmploymentType = nil
  case "DistanceEducationStudent":
   n.DistanceEducationStudent = nil
  case "LocalCampusId":
   n.LocalCampusId = nil
  case "SchoolACARAId":
   n.SchoolACARAId = nil
  case "Parent2NonSchoolEducation":
   n.Parent2NonSchoolEducation = nil
  case "SchoolLocalId":
   n.SchoolLocalId = nil
  case "Parent1SchoolEducationLevel":
   n.Parent1SchoolEducationLevel = nil
  case "TestLevel":
   n.TestLevel = nil
  case "FTE":
   n.FTE = nil
  case "Parent2Language":
   n.Parent2Language = nil
  case "Parent2SchoolEducationLevel":
   n.Parent2SchoolEducationLevel = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentMostRecentContainerType")
        }
        return n
}

func (n *StudentMostRecentContainerType) SetProperty(key string, value interface{}) *StudentMostRecentContainerType {
        if n == nil {
                n, _ = StudentMostRecentContainerTypePointer(StudentMostRecentContainerType{})
        }
        switch key {
    case "OtherSchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.OtherSchoolName = ((*String)(v))
      }
    case "ClassCode":
    
    if v, ok:= StringPointer(value); ok {
      n.ClassCode = ((*String)(v))
      }
    case "OtherEnrollmentSchoolACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.OtherEnrollmentSchoolACARAId = ((*LocalIdType)(v))
      }
    case "Parent1EmploymentType":
        if !CodesetContains(AUCodeSetsEmploymentTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEmploymentTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Parent1EmploymentType = ((*AUCodeSetsEmploymentTypeType)(v))
      }
    case "YearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.YearLevel = v
      }
    case "ReportingSchoolId":
    
    if v, ok:= StringPointer(value); ok {
      n.ReportingSchoolId = ((*LocalIdType)(v))
      }
    case "Homegroup":
    
    if v, ok:= StringPointer(value); ok {
      n.Homegroup = ((*String)(v))
      }
    case "DisabilityCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.DisabilityCategory = ((*String)(v))
      }
    case "Parent1Language":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Parent1Language = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
    case "HomeroomLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.HomeroomLocalId = ((*LocalIdType)(v))
      }
    case "FFPOS":
        if !CodesetContains(AUCodeSetsFFPOSStatusCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsFFPOSStatusCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.FFPOS = ((*AUCodeSetsFFPOSStatusCodeType)(v))
      }
    case "DisabilityLevelOfAdjustment":
    
    if v, ok:= StringPointer(value); ok {
      n.DisabilityLevelOfAdjustment = ((*String)(v))
      }
    case "MembershipType":
        if !CodesetContains(AUCodeSetsSchoolEnrollmentTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolEnrollmentTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.MembershipType = ((*AUCodeSetsSchoolEnrollmentTypeType)(v))
      }
    case "CensusAge":
    
    if v, ok:= IntPointer(value); ok {
      n.CensusAge = ((*Int)(v))
      }
    case "BoardingStatus":
        if !CodesetContains(AUCodeSetsBoardingType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsBoardingType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.BoardingStatus = ((*AUCodeSetsBoardingType)(v))
      }
    case "Parent1NonSchoolEducation":
        if !CodesetContains(AUCodeSetsNonSchoolEducationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNonSchoolEducationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Parent1NonSchoolEducation = ((*AUCodeSetsNonSchoolEducationType)(v))
      }
    case "Parent2EmploymentType":
        if !CodesetContains(AUCodeSetsEmploymentTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEmploymentTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Parent2EmploymentType = ((*AUCodeSetsEmploymentTypeType)(v))
      }
    case "DistanceEducationStudent":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.DistanceEducationStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "LocalCampusId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalCampusId = ((*LocalIdType)(v))
      }
    case "SchoolACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolACARAId = ((*LocalIdType)(v))
      }
    case "Parent2NonSchoolEducation":
        if !CodesetContains(AUCodeSetsNonSchoolEducationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNonSchoolEducationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Parent2NonSchoolEducation = ((*AUCodeSetsNonSchoolEducationType)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "Parent1SchoolEducationLevel":
        if !CodesetContains(AUCodeSetsSchoolEducationLevelTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolEducationLevelTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Parent1SchoolEducationLevel = ((*AUCodeSetsSchoolEducationLevelTypeType)(v))
      }
    case "TestLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.TestLevel = v
      }
    case "FTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.FTE = ((*Float)(v))
      }
    case "Parent2Language":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Parent2Language = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
    case "Parent2SchoolEducationLevel":
        if !CodesetContains(AUCodeSetsSchoolEducationLevelTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolEducationLevelTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Parent2SchoolEducationLevel = ((*AUCodeSetsSchoolEducationLevelTypeType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentMostRecentContainerType")
        }
        return n
}

  func (s *StudentMostRecentContainerType) OtherSchoolNameRead() *String {
    if s.OtherSchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.OtherSchoolName = ((*String)(v))
      }
      }
      return s.OtherSchoolName
    }
  func (s *StudentMostRecentContainerType) ClassCodeRead() *String {
    if s.ClassCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.ClassCode = ((*String)(v))
      }
      }
      return s.ClassCode
    }
  func (s *StudentMostRecentContainerType) OtherEnrollmentSchoolACARAIdRead() *LocalIdType {
    if s.OtherEnrollmentSchoolACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.OtherEnrollmentSchoolACARAId = ((*LocalIdType)(v))
      }
      }
      return s.OtherEnrollmentSchoolACARAId
    }
  func (s *StudentMostRecentContainerType) Parent1EmploymentTypeRead() *AUCodeSetsEmploymentTypeType {
    if s.Parent1EmploymentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.Parent1EmploymentType = ((*AUCodeSetsEmploymentTypeType)(v))
      }
      }
      return s.Parent1EmploymentType
    }
  func (s *StudentMostRecentContainerType) YearLevelRead() *YearLevelType {
    if s.YearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.YearLevel = v
      }
      }
      return s.YearLevel
    }
  func (s *StudentMostRecentContainerType) ReportingSchoolIdRead() *LocalIdType {
    if s.ReportingSchoolId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReportingSchoolId = ((*LocalIdType)(v))
      }
      }
      return s.ReportingSchoolId
    }
  func (s *StudentMostRecentContainerType) HomegroupRead() *String {
    if s.Homegroup == nil {
    if v, ok:= StringPointer(""); ok {
      s.Homegroup = ((*String)(v))
      }
      }
      return s.Homegroup
    }
  func (s *StudentMostRecentContainerType) DisabilityCategoryRead() *String {
    if s.DisabilityCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.DisabilityCategory = ((*String)(v))
      }
      }
      return s.DisabilityCategory
    }
  func (s *StudentMostRecentContainerType) Parent1LanguageRead() *AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType {
    if s.Parent1Language == nil {
    if v, ok:= StringPointer(""); ok {
      s.Parent1Language = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
      }
      return s.Parent1Language
    }
  func (s *StudentMostRecentContainerType) HomeroomLocalIdRead() *LocalIdType {
    if s.HomeroomLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.HomeroomLocalId = ((*LocalIdType)(v))
      }
      }
      return s.HomeroomLocalId
    }
  func (s *StudentMostRecentContainerType) FFPOSRead() *AUCodeSetsFFPOSStatusCodeType {
    if s.FFPOS == nil {
    if v, ok:= StringPointer(""); ok {
      s.FFPOS = ((*AUCodeSetsFFPOSStatusCodeType)(v))
      }
      }
      return s.FFPOS
    }
  func (s *StudentMostRecentContainerType) DisabilityLevelOfAdjustmentRead() *String {
    if s.DisabilityLevelOfAdjustment == nil {
    if v, ok:= StringPointer(""); ok {
      s.DisabilityLevelOfAdjustment = ((*String)(v))
      }
      }
      return s.DisabilityLevelOfAdjustment
    }
  func (s *StudentMostRecentContainerType) MembershipTypeRead() *AUCodeSetsSchoolEnrollmentTypeType {
    if s.MembershipType == nil {
    if v, ok:= StringPointer(""); ok {
      s.MembershipType = ((*AUCodeSetsSchoolEnrollmentTypeType)(v))
      }
      }
      return s.MembershipType
    }
  func (s *StudentMostRecentContainerType) CensusAgeRead() *Int {
    if s.CensusAge == nil {
    if v, ok:= IntPointer(0); ok {
      s.CensusAge = ((*Int)(v))
      }
      }
      return s.CensusAge
    }
  func (s *StudentMostRecentContainerType) BoardingStatusRead() *AUCodeSetsBoardingType {
    if s.BoardingStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.BoardingStatus = ((*AUCodeSetsBoardingType)(v))
      }
      }
      return s.BoardingStatus
    }
  func (s *StudentMostRecentContainerType) Parent1NonSchoolEducationRead() *AUCodeSetsNonSchoolEducationType {
    if s.Parent1NonSchoolEducation == nil {
    if v, ok:= StringPointer(""); ok {
      s.Parent1NonSchoolEducation = ((*AUCodeSetsNonSchoolEducationType)(v))
      }
      }
      return s.Parent1NonSchoolEducation
    }
  func (s *StudentMostRecentContainerType) Parent2EmploymentTypeRead() *AUCodeSetsEmploymentTypeType {
    if s.Parent2EmploymentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.Parent2EmploymentType = ((*AUCodeSetsEmploymentTypeType)(v))
      }
      }
      return s.Parent2EmploymentType
    }
  func (s *StudentMostRecentContainerType) DistanceEducationStudentRead() *AUCodeSetsYesOrNoCategoryType {
    if s.DistanceEducationStudent == nil {
    if v, ok:= StringPointer(""); ok {
      s.DistanceEducationStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.DistanceEducationStudent
    }
  func (s *StudentMostRecentContainerType) LocalCampusIdRead() *LocalIdType {
    if s.LocalCampusId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalCampusId = ((*LocalIdType)(v))
      }
      }
      return s.LocalCampusId
    }
  func (s *StudentMostRecentContainerType) SchoolACARAIdRead() *LocalIdType {
    if s.SchoolACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolACARAId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolACARAId
    }
  func (s *StudentMostRecentContainerType) Parent2NonSchoolEducationRead() *AUCodeSetsNonSchoolEducationType {
    if s.Parent2NonSchoolEducation == nil {
    if v, ok:= StringPointer(""); ok {
      s.Parent2NonSchoolEducation = ((*AUCodeSetsNonSchoolEducationType)(v))
      }
      }
      return s.Parent2NonSchoolEducation
    }
  func (s *StudentMostRecentContainerType) SchoolLocalIdRead() *LocalIdType {
    if s.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolLocalId
    }
  func (s *StudentMostRecentContainerType) Parent1SchoolEducationLevelRead() *AUCodeSetsSchoolEducationLevelTypeType {
    if s.Parent1SchoolEducationLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.Parent1SchoolEducationLevel = ((*AUCodeSetsSchoolEducationLevelTypeType)(v))
      }
      }
      return s.Parent1SchoolEducationLevel
    }
  func (s *StudentMostRecentContainerType) TestLevelRead() *YearLevelType {
    if s.TestLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.TestLevel = v
      }
      }
      return s.TestLevel
    }
  func (s *StudentMostRecentContainerType) FTERead() *Float {
    if s.FTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.FTE = ((*Float)(v))
      }
      }
      return s.FTE
    }
  func (s *StudentMostRecentContainerType) Parent2LanguageRead() *AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType {
    if s.Parent2Language == nil {
    if v, ok:= StringPointer(""); ok {
      s.Parent2Language = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
      }
      return s.Parent2Language
    }
  func (s *StudentMostRecentContainerType) Parent2SchoolEducationLevelRead() *AUCodeSetsSchoolEducationLevelTypeType {
    if s.Parent2SchoolEducationLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.Parent2SchoolEducationLevel = ((*AUCodeSetsSchoolEducationLevelTypeType)(v))
      }
      }
      return s.Parent2SchoolEducationLevel
    }

  // XXXXX
func (t *NameType) CopyString(key string, value interface{}) *NameType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NameType) CopyClone(key string, value interface{}) *NameType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NameType) Unset(key string) *NameType {
        switch key {
  case "Type":
   n.Type = nil
  case "Title":
   n.Title = nil
  case "FamilyName":
   n.FamilyName = nil
  case "GivenName":
   n.GivenName = nil
  case "PreferredFamilyNameFirst":
   n.PreferredFamilyNameFirst = nil
  case "Suffix":
   n.Suffix = nil
  case "PreferredGivenName":
   n.PreferredGivenName = nil
  case "FamilyNameFirst":
   n.FamilyNameFirst = nil
  case "MiddleName":
   n.MiddleName = nil
  case "FullName":
   n.FullName = nil
  case "PreferredFamilyName":
   n.PreferredFamilyName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NameType")
        }
        return n
}

func (n *NameType) SetProperty(key string, value interface{}) *NameType {
        if n == nil {
                n, _ = NameTypePointer(NameType{})
        }
        switch key {
    case "Type":
        if !CodesetContains(AUCodeSetsNameUsageTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNameUsageTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Type = ((*AUCodeSetsNameUsageTypeType)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.Title = ((*String)(v))
      }
    case "FamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.FamilyName = ((*String)(v))
      }
    case "GivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.GivenName = ((*String)(v))
      }
    case "PreferredFamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Suffix":
    
    if v, ok:= StringPointer(value); ok {
      n.Suffix = ((*String)(v))
      }
    case "PreferredGivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.PreferredGivenName = ((*String)(v))
      }
    case "FamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "MiddleName":
    
    if v, ok:= StringPointer(value); ok {
      n.MiddleName = ((*String)(v))
      }
    case "FullName":
    
    if v, ok:= StringPointer(value); ok {
      n.FullName = ((*String)(v))
      }
    case "PreferredFamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.PreferredFamilyName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NameType")
        }
        return n
}

  func (s *NameType) TypeRead() *AUCodeSetsNameUsageTypeType {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*AUCodeSetsNameUsageTypeType)(v))
      }
      }
      return s.Type
    }
  func (s *NameType) TitleRead() *String {
    if s.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.Title = ((*String)(v))
      }
      }
      return s.Title
    }
  func (s *NameType) FamilyNameRead() *String {
    if s.FamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.FamilyName = ((*String)(v))
      }
      }
      return s.FamilyName
    }
  func (s *NameType) GivenNameRead() *String {
    if s.GivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.GivenName = ((*String)(v))
      }
      }
      return s.GivenName
    }
  func (s *NameType) PreferredFamilyNameFirstRead() *AUCodeSetsYesOrNoCategoryType {
    if s.PreferredFamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.PreferredFamilyNameFirst
    }
  func (s *NameType) SuffixRead() *String {
    if s.Suffix == nil {
    if v, ok:= StringPointer(""); ok {
      s.Suffix = ((*String)(v))
      }
      }
      return s.Suffix
    }
  func (s *NameType) PreferredGivenNameRead() *String {
    if s.PreferredGivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreferredGivenName = ((*String)(v))
      }
      }
      return s.PreferredGivenName
    }
  func (s *NameType) FamilyNameFirstRead() *AUCodeSetsYesOrNoCategoryType {
    if s.FamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.FamilyNameFirst
    }
  func (s *NameType) MiddleNameRead() *String {
    if s.MiddleName == nil {
    if v, ok:= StringPointer(""); ok {
      s.MiddleName = ((*String)(v))
      }
      }
      return s.MiddleName
    }
  func (s *NameType) FullNameRead() *String {
    if s.FullName == nil {
    if v, ok:= StringPointer(""); ok {
      s.FullName = ((*String)(v))
      }
      }
      return s.FullName
    }
  func (s *NameType) PreferredFamilyNameRead() *String {
    if s.PreferredFamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreferredFamilyName = ((*String)(v))
      }
      }
      return s.PreferredFamilyName
    }

  // XXXXX
func (t *AbstractContentPackageType) CopyString(key string, value interface{}) *AbstractContentPackageType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AbstractContentPackageType) CopyClone(key string, value interface{}) *AbstractContentPackageType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AbstractContentPackageType) Unset(key string) *AbstractContentPackageType {
        switch key {
  case "Reference":
   n.Reference = nil
  case "BinaryData":
   n.BinaryData = nil
  case "TextData":
   n.TextData = nil
  case "XMLData":
   n.XMLData = nil
  case "RefId":
   n.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType")
        }
        return n
}

func (n *AbstractContentPackageType) SetProperty(key string, value interface{}) *AbstractContentPackageType {
        if n == nil {
                n, _ = AbstractContentPackageTypePointer(AbstractContentPackageType{})
        }
        switch key {
    case "Reference":
    if v, ok:= AbstractContentPackageType_ReferencePointer(value); ok {
      n.Reference = v
      }
    case "BinaryData":
    if v, ok:= AbstractContentPackageType_BinaryDataPointer(value); ok {
      n.BinaryData = v
      }
    case "TextData":
    if v, ok:= AbstractContentPackageType_TextDataPointer(value); ok {
      n.TextData = v
      }
    case "XMLData":
    if v, ok:= AbstractContentPackageType_XMLDataPointer(value); ok {
      n.XMLData = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType")
        }
        return n
}

  func (s *AbstractContentPackageType) ReferenceRead() *AbstractContentPackageType_Reference {
    if s.Reference == nil {
     if v, ok:= AbstractContentPackageType_ReferencePointer(AbstractContentPackageType_Reference{}); ok {
      s.Reference = v
      }
      }
      return s.Reference
    }
  func (s *AbstractContentPackageType) BinaryDataRead() *AbstractContentPackageType_BinaryData {
    if s.BinaryData == nil {
     if v, ok:= AbstractContentPackageType_BinaryDataPointer(AbstractContentPackageType_BinaryData{}); ok {
      s.BinaryData = v
      }
      }
      return s.BinaryData
    }
  func (s *AbstractContentPackageType) TextDataRead() *AbstractContentPackageType_TextData {
    if s.TextData == nil {
     if v, ok:= AbstractContentPackageType_TextDataPointer(AbstractContentPackageType_TextData{}); ok {
      s.TextData = v
      }
      }
      return s.TextData
    }
  func (s *AbstractContentPackageType) XMLDataRead() *AbstractContentPackageType_XMLData {
    if s.XMLData == nil {
     if v, ok:= AbstractContentPackageType_XMLDataPointer(AbstractContentPackageType_XMLData{}); ok {
      s.XMLData = v
      }
      }
      return s.XMLData
    }
  func (s *AbstractContentPackageType) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }

  // XXXXX
func (t *TeachingGroupStudentType) CopyString(key string, value interface{}) *TeachingGroupStudentType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TeachingGroupStudentType) CopyClone(key string, value interface{}) *TeachingGroupStudentType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TeachingGroupStudentType) Unset(key string) *TeachingGroupStudentType {
        switch key {
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "StudentLocalId":
   n.StudentLocalId = nil
  case "Name":
   n.Name = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupStudentType")
        }
        return n
}

func (n *TeachingGroupStudentType) SetProperty(key string, value interface{}) *TeachingGroupStudentType {
        if n == nil {
                n, _ = TeachingGroupStudentTypePointer(TeachingGroupStudentType{})
        }
        switch key {
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "StudentLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentLocalId = ((*LocalIdType)(v))
      }
    case "Name":
    if v, ok:= NameOfRecordTypePointer(value); ok {
      n.Name = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupStudentType")
        }
        return n
}

  func (s *TeachingGroupStudentType) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *TeachingGroupStudentType) StudentLocalIdRead() *LocalIdType {
    if s.StudentLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentLocalId = ((*LocalIdType)(v))
      }
      }
      return s.StudentLocalId
    }
  func (s *TeachingGroupStudentType) NameRead() *NameOfRecordType {
    if s.Name == nil {
     if v, ok:= NameOfRecordTypePointer(NameOfRecordType{}); ok {
      s.Name = v
      }
      }
      return s.Name
    }

  // XXXXX
func (t *StudentSubjectChoiceType) CopyString(key string, value interface{}) *StudentSubjectChoiceType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentSubjectChoiceType) CopyClone(key string, value interface{}) *StudentSubjectChoiceType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentSubjectChoiceType) Unset(key string) *StudentSubjectChoiceType {
        switch key {
  case "PreferenceNumber":
   n.PreferenceNumber = nil
  case "OtherSchoolLocalId":
   n.OtherSchoolLocalId = nil
  case "SubjectLocalId":
   n.SubjectLocalId = nil
  case "StudyDescription":
   n.StudyDescription = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSubjectChoiceType")
        }
        return n
}

func (n *StudentSubjectChoiceType) SetProperty(key string, value interface{}) *StudentSubjectChoiceType {
        if n == nil {
                n, _ = StudentSubjectChoiceTypePointer(StudentSubjectChoiceType{})
        }
        switch key {
    case "PreferenceNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.PreferenceNumber = ((*Int)(v))
      }
    case "OtherSchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.OtherSchoolLocalId = ((*LocalIdType)(v))
      }
    case "SubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SubjectLocalId = ((*LocalIdType)(v))
      }
    case "StudyDescription":
    if v, ok:= SubjectAreaTypePointer(value); ok {
      n.StudyDescription = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSubjectChoiceType")
        }
        return n
}

  func (s *StudentSubjectChoiceType) PreferenceNumberRead() *Int {
    if s.PreferenceNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.PreferenceNumber = ((*Int)(v))
      }
      }
      return s.PreferenceNumber
    }
  func (s *StudentSubjectChoiceType) OtherSchoolLocalIdRead() *LocalIdType {
    if s.OtherSchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.OtherSchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.OtherSchoolLocalId
    }
  func (s *StudentSubjectChoiceType) SubjectLocalIdRead() *LocalIdType {
    if s.SubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SubjectLocalId
    }
  func (s *StudentSubjectChoiceType) StudyDescriptionRead() *SubjectAreaType {
    if s.StudyDescription == nil {
     if v, ok:= SubjectAreaTypePointer(SubjectAreaType{}); ok {
      s.StudyDescription = v
      }
      }
      return s.StudyDescription
    }

  // XXXXX
func (t *ScheduledActivity) CopyString(key string, value interface{}) *ScheduledActivity {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ScheduledActivity) CopyClone(key string, value interface{}) *ScheduledActivity {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ScheduledActivity) Unset(key string) *ScheduledActivity {
        switch key {
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "YearLevels":
   n.YearLevels = nil
  case "AddressList":
   n.AddressList = nil
  case "StudentList":
   n.StudentList = nil
  case "ActivityDate":
   n.ActivityDate = nil
  case "TimeTableRefId":
   n.TimeTableRefId = nil
  case "PeriodId":
   n.PeriodId = nil
  case "Location":
   n.Location = nil
  case "TimeTableSubjectRefId":
   n.TimeTableSubjectRefId = nil
  case "Override":
   n.Override = nil
  case "TeacherList":
   n.TeacherList = nil
  case "TeachingGroupList":
   n.TeachingGroupList = nil
  case "ActivityType":
   n.ActivityType = nil
  case "DayId":
   n.DayId = nil
  case "StartTime":
   n.StartTime = nil
  case "FinishTime":
   n.FinishTime = nil
  case "RoomList":
   n.RoomList = nil
  case "RefId":
   n.RefId = nil
  case "ActivityName":
   n.ActivityName = nil
  case "ActivityComment":
   n.ActivityComment = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "CellType":
   n.CellType = nil
  case "TimeTableCellRefId":
   n.TimeTableCellRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScheduledActivity")
        }
        return n
}

func (n *ScheduledActivity) SetProperty(key string, value interface{}) *ScheduledActivity {
        if n == nil {
                n, _ = ScheduledActivityPointer(ScheduledActivity{})
        }
        switch key {
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.YearLevels = v
      }
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.AddressList = v
      }
    case "StudentList":
    if v, ok:= StudentsTypePointer(value); ok {
      n.StudentList = v
      }
    case "ActivityDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ActivityDate = ((*String)(v))
      }
    case "TimeTableRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableRefId = ((*String)(v))
      }
    case "PeriodId":
    
    if v, ok:= StringPointer(value); ok {
      n.PeriodId = ((*LocalIdType)(v))
      }
    case "Location":
    
    if v, ok:= StringPointer(value); ok {
      n.Location = ((*String)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableSubjectRefId = ((*String)(v))
      }
    case "Override":
    if v, ok:= ScheduledActivityOverrideTypePointer(value); ok {
      n.Override = v
      }
    case "TeacherList":
    if v, ok:= ScheduledTeacherListTypePointer(value); ok {
      n.TeacherList = v
      }
    case "TeachingGroupList":
    if v, ok:= TeachingGroupListTypePointer(value); ok {
      n.TeachingGroupList = v
      }
    case "ActivityType":
        if !CodesetContains(AUCodeSetsScheduledActivityTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsScheduledActivityTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ActivityType = ((*AUCodeSetsScheduledActivityTypeType)(v))
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.DayId = ((*LocalIdType)(v))
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.StartTime = ((*String)(v))
      }
    case "FinishTime":
    
    if v, ok:= StringPointer(value); ok {
      n.FinishTime = ((*String)(v))
      }
    case "RoomList":
    if v, ok:= RoomListTypePointer(value); ok {
      n.RoomList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ActivityName":
    
    if v, ok:= StringPointer(value); ok {
      n.ActivityName = ((*String)(v))
      }
    case "ActivityComment":
    
    if v, ok:= StringPointer(value); ok {
      n.ActivityComment = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "CellType":
    
    if v, ok:= StringPointer(value); ok {
      n.CellType = ((*String)(v))
      }
    case "TimeTableCellRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableCellRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScheduledActivity")
        }
        return n
}

  func (s *ScheduledActivity) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *ScheduledActivity) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *ScheduledActivity) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *ScheduledActivity) YearLevelsRead() *YearLevelsType {
    if s.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.YearLevels = v
      }
      }
      return s.YearLevels
    }
  func (s *ScheduledActivity) AddressListRead() *AddressListType {
    if s.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.AddressList = v
      }
      }
      return s.AddressList
    }
  func (s *ScheduledActivity) StudentListRead() *StudentsType {
    if s.StudentList == nil {
     if v, ok:= StudentsTypePointer(StudentsType{}); ok {
      s.StudentList = v
      }
      }
      return s.StudentList
    }
  func (s *ScheduledActivity) ActivityDateRead() *String {
    if s.ActivityDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ActivityDate = ((*String)(v))
      }
      }
      return s.ActivityDate
    }
  func (s *ScheduledActivity) TimeTableRefIdRead() *String {
    if s.TimeTableRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableRefId = ((*String)(v))
      }
      }
      return s.TimeTableRefId
    }
  func (s *ScheduledActivity) PeriodIdRead() *LocalIdType {
    if s.PeriodId == nil {
    if v, ok:= StringPointer(""); ok {
      s.PeriodId = ((*LocalIdType)(v))
      }
      }
      return s.PeriodId
    }
  func (s *ScheduledActivity) LocationRead() *String {
    if s.Location == nil {
    if v, ok:= StringPointer(""); ok {
      s.Location = ((*String)(v))
      }
      }
      return s.Location
    }
  func (s *ScheduledActivity) TimeTableSubjectRefIdRead() *String {
    if s.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableSubjectRefId = ((*String)(v))
      }
      }
      return s.TimeTableSubjectRefId
    }
  func (s *ScheduledActivity) OverrideRead() *ScheduledActivityOverrideType {
    if s.Override == nil {
     if v, ok:= ScheduledActivityOverrideTypePointer(ScheduledActivityOverrideType{}); ok {
      s.Override = v
      }
      }
      return s.Override
    }
  func (s *ScheduledActivity) TeacherListRead() *ScheduledTeacherListType {
    if s.TeacherList == nil {
     if v, ok:= ScheduledTeacherListTypePointer(ScheduledTeacherListType{}); ok {
      s.TeacherList = v
      }
      }
      return s.TeacherList
    }
  func (s *ScheduledActivity) TeachingGroupListRead() *TeachingGroupListType {
    if s.TeachingGroupList == nil {
     if v, ok:= TeachingGroupListTypePointer(TeachingGroupListType{}); ok {
      s.TeachingGroupList = v
      }
      }
      return s.TeachingGroupList
    }
  func (s *ScheduledActivity) ActivityTypeRead() *AUCodeSetsScheduledActivityTypeType {
    if s.ActivityType == nil {
    if v, ok:= StringPointer(""); ok {
      s.ActivityType = ((*AUCodeSetsScheduledActivityTypeType)(v))
      }
      }
      return s.ActivityType
    }
  func (s *ScheduledActivity) DayIdRead() *LocalIdType {
    if s.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.DayId = ((*LocalIdType)(v))
      }
      }
      return s.DayId
    }
  func (s *ScheduledActivity) StartTimeRead() *String {
    if s.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartTime = ((*String)(v))
      }
      }
      return s.StartTime
    }
  func (s *ScheduledActivity) FinishTimeRead() *String {
    if s.FinishTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.FinishTime = ((*String)(v))
      }
      }
      return s.FinishTime
    }
  func (s *ScheduledActivity) RoomListRead() *RoomListType {
    if s.RoomList == nil {
     if v, ok:= RoomListTypePointer(RoomListType{}); ok {
      s.RoomList = v
      }
      }
      return s.RoomList
    }
  func (s *ScheduledActivity) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *ScheduledActivity) ActivityNameRead() *String {
    if s.ActivityName == nil {
    if v, ok:= StringPointer(""); ok {
      s.ActivityName = ((*String)(v))
      }
      }
      return s.ActivityName
    }
  func (s *ScheduledActivity) ActivityCommentRead() *String {
    if s.ActivityComment == nil {
    if v, ok:= StringPointer(""); ok {
      s.ActivityComment = ((*String)(v))
      }
      }
      return s.ActivityComment
    }
  func (s *ScheduledActivity) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *ScheduledActivity) CellTypeRead() *String {
    if s.CellType == nil {
    if v, ok:= StringPointer(""); ok {
      s.CellType = ((*String)(v))
      }
      }
      return s.CellType
    }
  func (s *ScheduledActivity) TimeTableCellRefIdRead() *String {
    if s.TimeTableCellRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableCellRefId = ((*String)(v))
      }
      }
      return s.TimeTableCellRefId
    }

  // XXXXX
func (t *AbstractContentPackageType_XMLData) CopyString(key string, value interface{}) *AbstractContentPackageType_XMLData {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AbstractContentPackageType_XMLData) CopyClone(key string, value interface{}) *AbstractContentPackageType_XMLData {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AbstractContentPackageType_XMLData) Unset(key string) *AbstractContentPackageType_XMLData {
        switch key {
  case "Description":
   n.Description = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_XMLData")
        }
        return n
}

func (n *AbstractContentPackageType_XMLData) SetProperty(key string, value interface{}) *AbstractContentPackageType_XMLData {
        if n == nil {
                n, _ = AbstractContentPackageType_XMLDataPointer(AbstractContentPackageType_XMLData{})
        }
        switch key {
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_XMLData")
        }
        return n
}

  func (s *AbstractContentPackageType_XMLData) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *AbstractContentPackageType_XMLData) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *StudentSchoolEnrollment_Advisor) CopyString(key string, value interface{}) *StudentSchoolEnrollment_Advisor {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentSchoolEnrollment_Advisor) CopyClone(key string, value interface{}) *StudentSchoolEnrollment_Advisor {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentSchoolEnrollment_Advisor) Unset(key string) *StudentSchoolEnrollment_Advisor {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Advisor")
        }
        return n
}

func (n *StudentSchoolEnrollment_Advisor) SetProperty(key string, value interface{}) *StudentSchoolEnrollment_Advisor {
        if n == nil {
                n, _ = StudentSchoolEnrollment_AdvisorPointer(StudentSchoolEnrollment_Advisor{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Advisor")
        }
        return n
}

  func (s *StudentSchoolEnrollment_Advisor) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *StudentSchoolEnrollment_Advisor) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *StudentGroupType) CopyString(key string, value interface{}) *StudentGroupType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentGroupType) CopyClone(key string, value interface{}) *StudentGroupType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentGroupType) Unset(key string) *StudentGroupType {
        switch key {
  case "GroupDescription":
   n.GroupDescription = nil
  case "GroupCategory":
   n.GroupCategory = nil
  case "GroupLocalId":
   n.GroupLocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentGroupType")
        }
        return n
}

func (n *StudentGroupType) SetProperty(key string, value interface{}) *StudentGroupType {
        if n == nil {
                n, _ = StudentGroupTypePointer(StudentGroupType{})
        }
        switch key {
    case "GroupDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.GroupDescription = ((*String)(v))
      }
    case "GroupCategory":
        if !CodesetContains(AUCodeSetsGroupCategoryCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsGroupCategoryCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.GroupCategory = ((*AUCodeSetsGroupCategoryCodeType)(v))
      }
    case "GroupLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.GroupLocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentGroupType")
        }
        return n
}

  func (s *StudentGroupType) GroupDescriptionRead() *String {
    if s.GroupDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.GroupDescription = ((*String)(v))
      }
      }
      return s.GroupDescription
    }
  func (s *StudentGroupType) GroupCategoryRead() *AUCodeSetsGroupCategoryCodeType {
    if s.GroupCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.GroupCategory = ((*AUCodeSetsGroupCategoryCodeType)(v))
      }
      }
      return s.GroupCategory
    }
  func (s *StudentGroupType) GroupLocalIdRead() *LocalIdType {
    if s.GroupLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.GroupLocalId = ((*LocalIdType)(v))
      }
      }
      return s.GroupLocalId
    }

  // XXXXX
func (t *MapReferenceType) CopyString(key string, value interface{}) *MapReferenceType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *MapReferenceType) CopyClone(key string, value interface{}) *MapReferenceType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *MapReferenceType) Unset(key string) *MapReferenceType {
        switch key {
  case "XCoordinate":
   n.XCoordinate = nil
  case "YCoordinate":
   n.YCoordinate = nil
  case "MapNumber":
   n.MapNumber = nil
  case "Type":
   n.Type = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MapReferenceType")
        }
        return n
}

func (n *MapReferenceType) SetProperty(key string, value interface{}) *MapReferenceType {
        if n == nil {
                n, _ = MapReferenceTypePointer(MapReferenceType{})
        }
        switch key {
    case "XCoordinate":
    
    if v, ok:= StringPointer(value); ok {
      n.XCoordinate = ((*String)(v))
      }
    case "YCoordinate":
    
    if v, ok:= StringPointer(value); ok {
      n.YCoordinate = ((*String)(v))
      }
    case "MapNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.MapNumber = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MapReferenceType")
        }
        return n
}

  func (s *MapReferenceType) XCoordinateRead() *String {
    if s.XCoordinate == nil {
    if v, ok:= StringPointer(""); ok {
      s.XCoordinate = ((*String)(v))
      }
      }
      return s.XCoordinate
    }
  func (s *MapReferenceType) YCoordinateRead() *String {
    if s.YCoordinate == nil {
    if v, ok:= StringPointer(""); ok {
      s.YCoordinate = ((*String)(v))
      }
      }
      return s.YCoordinate
    }
  func (s *MapReferenceType) MapNumberRead() *String {
    if s.MapNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.MapNumber = ((*String)(v))
      }
      }
      return s.MapNumber
    }
  func (s *MapReferenceType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }

  // XXXXX
func (t *StudentDailyAttendance) CopyString(key string, value interface{}) *StudentDailyAttendance {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentDailyAttendance) CopyClone(key string, value interface{}) *StudentDailyAttendance {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentDailyAttendance) Unset(key string) *StudentDailyAttendance {
        switch key {
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "TimeOut":
   n.TimeOut = nil
  case "RefId":
   n.RefId = nil
  case "TimeIn":
   n.TimeIn = nil
  case "AbsenceValue":
   n.AbsenceValue = nil
  case "Date":
   n.Date = nil
  case "AttendanceNote":
   n.AttendanceNote = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "DayValue":
   n.DayValue = nil
  case "AttendanceCode":
   n.AttendanceCode = nil
  case "AttendanceStatus":
   n.AttendanceStatus = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentDailyAttendance")
        }
        return n
}

func (n *StudentDailyAttendance) SetProperty(key string, value interface{}) *StudentDailyAttendance {
        if n == nil {
                n, _ = StudentDailyAttendancePointer(StudentDailyAttendance{})
        }
        switch key {
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "TimeOut":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeOut = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "TimeIn":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeIn = ((*String)(v))
      }
    case "AbsenceValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.AbsenceValue = ((*Float)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.Date = ((*String)(v))
      }
    case "AttendanceNote":
    
    if v, ok:= StringPointer(value); ok {
      n.AttendanceNote = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "DayValue":
        if !CodesetContains(AUCodeSetsDayValueCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsDayValueCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.DayValue = ((*AUCodeSetsDayValueCodeType)(v))
      }
    case "AttendanceCode":
    if v, ok:= AttendanceCodeTypePointer(value); ok {
      n.AttendanceCode = v
      }
    case "AttendanceStatus":
        if !CodesetContains(AUCodeSetsAttendanceStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAttendanceStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentDailyAttendance")
        }
        return n
}

  func (s *StudentDailyAttendance) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentDailyAttendance) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *StudentDailyAttendance) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentDailyAttendance) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *StudentDailyAttendance) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *StudentDailyAttendance) TimeOutRead() *String {
    if s.TimeOut == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeOut = ((*String)(v))
      }
      }
      return s.TimeOut
    }
  func (s *StudentDailyAttendance) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StudentDailyAttendance) TimeInRead() *String {
    if s.TimeIn == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeIn = ((*String)(v))
      }
      }
      return s.TimeIn
    }
  func (s *StudentDailyAttendance) AbsenceValueRead() *Float {
    if s.AbsenceValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.AbsenceValue = ((*Float)(v))
      }
      }
      return s.AbsenceValue
    }
  func (s *StudentDailyAttendance) DateRead() *String {
    if s.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.Date = ((*String)(v))
      }
      }
      return s.Date
    }
  func (s *StudentDailyAttendance) AttendanceNoteRead() *String {
    if s.AttendanceNote == nil {
    if v, ok:= StringPointer(""); ok {
      s.AttendanceNote = ((*String)(v))
      }
      }
      return s.AttendanceNote
    }
  func (s *StudentDailyAttendance) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentDailyAttendance) DayValueRead() *AUCodeSetsDayValueCodeType {
    if s.DayValue == nil {
    if v, ok:= StringPointer(""); ok {
      s.DayValue = ((*AUCodeSetsDayValueCodeType)(v))
      }
      }
      return s.DayValue
    }
  func (s *StudentDailyAttendance) AttendanceCodeRead() *AttendanceCodeType {
    if s.AttendanceCode == nil {
     if v, ok:= AttendanceCodeTypePointer(AttendanceCodeType{}); ok {
      s.AttendanceCode = v
      }
      }
      return s.AttendanceCode
    }
  func (s *StudentDailyAttendance) AttendanceStatusRead() *AUCodeSetsAttendanceStatusType {
    if s.AttendanceStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
      }
      return s.AttendanceStatus
    }

  // XXXXX
func (t *SchoolCourseInfo) CopyString(key string, value interface{}) *SchoolCourseInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SchoolCourseInfo) CopyClone(key string, value interface{}) *SchoolCourseInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SchoolCourseInfo) Unset(key string) *SchoolCourseInfo {
        switch key {
  case "CourseTitle":
   n.CourseTitle = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "SubjectAreaList":
   n.SubjectAreaList = nil
  case "StateCourseCode":
   n.StateCourseCode = nil
  case "CourseCredits":
   n.CourseCredits = nil
  case "SchoolLocalId":
   n.SchoolLocalId = nil
  case "GraduationRequirement":
   n.GraduationRequirement = nil
  case "TermInfoRefId":
   n.TermInfoRefId = nil
  case "Department":
   n.Department = nil
  case "Description":
   n.Description = nil
  case "InstructionalLevel":
   n.InstructionalLevel = nil
  case "CourseContent":
   n.CourseContent = nil
  case "CoreAcademicCourse":
   n.CoreAcademicCourse = nil
  case "RefId":
   n.RefId = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "CourseCode":
   n.CourseCode = nil
  case "DistrictCourseCode":
   n.DistrictCourseCode = nil
  case "SchoolYear":
   n.SchoolYear = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolCourseInfo")
        }
        return n
}

func (n *SchoolCourseInfo) SetProperty(key string, value interface{}) *SchoolCourseInfo {
        if n == nil {
                n, _ = SchoolCourseInfoPointer(SchoolCourseInfo{})
        }
        switch key {
    case "CourseTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.CourseTitle = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "SubjectAreaList":
    if v, ok:= SubjectAreaListTypePointer(value); ok {
      n.SubjectAreaList = v
      }
    case "StateCourseCode":
    
    if v, ok:= StringPointer(value); ok {
      n.StateCourseCode = ((*String)(v))
      }
    case "CourseCredits":
    
    if v, ok:= StringPointer(value); ok {
      n.CourseCredits = ((*String)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "GraduationRequirement":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.GraduationRequirement = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "TermInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TermInfoRefId = ((*String)(v))
      }
    case "Department":
    
    if v, ok:= StringPointer(value); ok {
      n.Department = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "InstructionalLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.InstructionalLevel = ((*String)(v))
      }
    case "CourseContent":
    
    if v, ok:= StringPointer(value); ok {
      n.CourseContent = ((*String)(v))
      }
    case "CoreAcademicCourse":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.CoreAcademicCourse = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "CourseCode":
    
    if v, ok:= StringPointer(value); ok {
      n.CourseCode = ((*String)(v))
      }
    case "DistrictCourseCode":
    
    if v, ok:= StringPointer(value); ok {
      n.DistrictCourseCode = ((*String)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolCourseInfo")
        }
        return n
}

  func (s *SchoolCourseInfo) CourseTitleRead() *String {
    if s.CourseTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.CourseTitle = ((*String)(v))
      }
      }
      return s.CourseTitle
    }
  func (s *SchoolCourseInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *SchoolCourseInfo) SubjectAreaListRead() *SubjectAreaListType {
    if s.SubjectAreaList == nil {
     if v, ok:= SubjectAreaListTypePointer(SubjectAreaListType{}); ok {
      s.SubjectAreaList = v
      }
      }
      return s.SubjectAreaList
    }
  func (s *SchoolCourseInfo) StateCourseCodeRead() *String {
    if s.StateCourseCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.StateCourseCode = ((*String)(v))
      }
      }
      return s.StateCourseCode
    }
  func (s *SchoolCourseInfo) CourseCreditsRead() *String {
    if s.CourseCredits == nil {
    if v, ok:= StringPointer(""); ok {
      s.CourseCredits = ((*String)(v))
      }
      }
      return s.CourseCredits
    }
  func (s *SchoolCourseInfo) SchoolLocalIdRead() *LocalIdType {
    if s.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolLocalId
    }
  func (s *SchoolCourseInfo) GraduationRequirementRead() *AUCodeSetsYesOrNoCategoryType {
    if s.GraduationRequirement == nil {
    if v, ok:= StringPointer(""); ok {
      s.GraduationRequirement = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.GraduationRequirement
    }
  func (s *SchoolCourseInfo) TermInfoRefIdRead() *String {
    if s.TermInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TermInfoRefId = ((*String)(v))
      }
      }
      return s.TermInfoRefId
    }
  func (s *SchoolCourseInfo) DepartmentRead() *String {
    if s.Department == nil {
    if v, ok:= StringPointer(""); ok {
      s.Department = ((*String)(v))
      }
      }
      return s.Department
    }
  func (s *SchoolCourseInfo) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *SchoolCourseInfo) InstructionalLevelRead() *String {
    if s.InstructionalLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.InstructionalLevel = ((*String)(v))
      }
      }
      return s.InstructionalLevel
    }
  func (s *SchoolCourseInfo) CourseContentRead() *String {
    if s.CourseContent == nil {
    if v, ok:= StringPointer(""); ok {
      s.CourseContent = ((*String)(v))
      }
      }
      return s.CourseContent
    }
  func (s *SchoolCourseInfo) CoreAcademicCourseRead() *AUCodeSetsYesOrNoCategoryType {
    if s.CoreAcademicCourse == nil {
    if v, ok:= StringPointer(""); ok {
      s.CoreAcademicCourse = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.CoreAcademicCourse
    }
  func (s *SchoolCourseInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *SchoolCourseInfo) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *SchoolCourseInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *SchoolCourseInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *SchoolCourseInfo) CourseCodeRead() *String {
    if s.CourseCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.CourseCode = ((*String)(v))
      }
      }
      return s.CourseCode
    }
  func (s *SchoolCourseInfo) DistrictCourseCodeRead() *String {
    if s.DistrictCourseCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.DistrictCourseCode = ((*String)(v))
      }
      }
      return s.DistrictCourseCode
    }
  func (s *SchoolCourseInfo) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }

  // XXXXX
func (t *TimeElementType) CopyString(key string, value interface{}) *TimeElementType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TimeElementType) CopyClone(key string, value interface{}) *TimeElementType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TimeElementType) Unset(key string) *TimeElementType {
        switch key {
  case "Value":
   n.Value = nil
  case "Name":
   n.Name = nil
  case "Type":
   n.Type = nil
  case "SpanGaps":
   n.SpanGaps = nil
  case "StartDateTime":
   n.StartDateTime = nil
  case "Code":
   n.Code = nil
  case "EndDateTime":
   n.EndDateTime = nil
  case "IsCurrent":
   n.IsCurrent = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeElementType")
        }
        return n
}

func (n *TimeElementType) SetProperty(key string, value interface{}) *TimeElementType {
        if n == nil {
                n, _ = TimeElementTypePointer(TimeElementType{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.Name = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
    case "SpanGaps":
    if v, ok:= TimeElementType_SpanGapsPointer(value); ok {
      n.SpanGaps = v
      }
    case "StartDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.StartDateTime = ((*String)(v))
      }
    case "Code":
    
    if v, ok:= StringPointer(value); ok {
      n.Code = ((*String)(v))
      }
    case "EndDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.EndDateTime = ((*String)(v))
      }
    case "IsCurrent":
    
    if v, ok:= BoolPointer(value); ok {
      n.IsCurrent = ((*Bool)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeElementType")
        }
        return n
}

  func (s *TimeElementType) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *TimeElementType) NameRead() *String {
    if s.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.Name = ((*String)(v))
      }
      }
      return s.Name
    }
  func (s *TimeElementType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }
  func (s *TimeElementType) SpanGapsRead() *TimeElementType_SpanGaps {
    if s.SpanGaps == nil {
     if v, ok:= TimeElementType_SpanGapsPointer(TimeElementType_SpanGaps{}); ok {
      s.SpanGaps = v
      }
      }
      return s.SpanGaps
    }
  func (s *TimeElementType) StartDateTimeRead() *String {
    if s.StartDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartDateTime = ((*String)(v))
      }
      }
      return s.StartDateTime
    }
  func (s *TimeElementType) CodeRead() *String {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*String)(v))
      }
      }
      return s.Code
    }
  func (s *TimeElementType) EndDateTimeRead() *String {
    if s.EndDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndDateTime = ((*String)(v))
      }
      }
      return s.EndDateTime
    }
  func (s *TimeElementType) IsCurrentRead() *Bool {
    if s.IsCurrent == nil {
    if v, ok:= BoolPointer(false); ok {
      s.IsCurrent = ((*Bool)(v))
      }
      }
      return s.IsCurrent
    }

  // XXXXX
func (t *WellbeingResponse) CopyString(key string, value interface{}) *WellbeingResponse {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *WellbeingResponse) CopyClone(key string, value interface{}) *WellbeingResponse {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *WellbeingResponse) Unset(key string) *WellbeingResponse {
        switch key {
  case "PersonInvolvementList":
   n.PersonInvolvementList = nil
  case "WellbeingResponseStartDate":
   n.WellbeingResponseStartDate = nil
  case "OtherResponse":
   n.OtherResponse = nil
  case "Date":
   n.Date = nil
  case "Suspension":
   n.Suspension = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "WellbeingResponseEndDate":
   n.WellbeingResponseEndDate = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "PlanRequired":
   n.PlanRequired = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "Detention":
   n.Detention = nil
  case "RefId":
   n.RefId = nil
  case "WellbeingResponseCategory":
   n.WellbeingResponseCategory = nil
  case "DocumentList":
   n.DocumentList = nil
  case "LocalId":
   n.LocalId = nil
  case "WellbeingResponseNotes":
   n.WellbeingResponseNotes = nil
  case "Award":
   n.Award = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingResponse")
        }
        return n
}

func (n *WellbeingResponse) SetProperty(key string, value interface{}) *WellbeingResponse {
        if n == nil {
                n, _ = WellbeingResponsePointer(WellbeingResponse{})
        }
        switch key {
    case "PersonInvolvementList":
    if v, ok:= PersonInvolvementListTypePointer(value); ok {
      n.PersonInvolvementList = v
      }
    case "WellbeingResponseStartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingResponseStartDate = ((*String)(v))
      }
    case "OtherResponse":
    if v, ok:= OtherWellbeingResponseContainerTypePointer(value); ok {
      n.OtherResponse = v
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.Date = ((*String)(v))
      }
    case "Suspension":
    if v, ok:= SuspensionContainerTypePointer(value); ok {
      n.Suspension = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "WellbeingResponseEndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingResponseEndDate = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "PlanRequired":
    if v, ok:= PlanRequiredContainerTypePointer(value); ok {
      n.PlanRequired = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "Detention":
    if v, ok:= DetentionContainerTypePointer(value); ok {
      n.Detention = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "WellbeingResponseCategory":
        if !CodesetContains(AUCodeSetsWellbeingResponseCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingResponseCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.WellbeingResponseCategory = ((*AUCodeSetsWellbeingResponseCategoryType)(v))
      }
    case "DocumentList":
    if v, ok:= WellbeingDocumentListTypePointer(value); ok {
      n.DocumentList = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "WellbeingResponseNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingResponseNotes = ((*String)(v))
      }
    case "Award":
    if v, ok:= AwardContainerTypePointer(value); ok {
      n.Award = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingResponse")
        }
        return n
}

  func (s *WellbeingResponse) PersonInvolvementListRead() *PersonInvolvementListType {
    if s.PersonInvolvementList == nil {
     if v, ok:= PersonInvolvementListTypePointer(PersonInvolvementListType{}); ok {
      s.PersonInvolvementList = v
      }
      }
      return s.PersonInvolvementList
    }
  func (s *WellbeingResponse) WellbeingResponseStartDateRead() *String {
    if s.WellbeingResponseStartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingResponseStartDate = ((*String)(v))
      }
      }
      return s.WellbeingResponseStartDate
    }
  func (s *WellbeingResponse) OtherResponseRead() *OtherWellbeingResponseContainerType {
    if s.OtherResponse == nil {
     if v, ok:= OtherWellbeingResponseContainerTypePointer(OtherWellbeingResponseContainerType{}); ok {
      s.OtherResponse = v
      }
      }
      return s.OtherResponse
    }
  func (s *WellbeingResponse) DateRead() *String {
    if s.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.Date = ((*String)(v))
      }
      }
      return s.Date
    }
  func (s *WellbeingResponse) SuspensionRead() *SuspensionContainerType {
    if s.Suspension == nil {
     if v, ok:= SuspensionContainerTypePointer(SuspensionContainerType{}); ok {
      s.Suspension = v
      }
      }
      return s.Suspension
    }
  func (s *WellbeingResponse) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *WellbeingResponse) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *WellbeingResponse) WellbeingResponseEndDateRead() *String {
    if s.WellbeingResponseEndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingResponseEndDate = ((*String)(v))
      }
      }
      return s.WellbeingResponseEndDate
    }
  func (s *WellbeingResponse) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *WellbeingResponse) PlanRequiredRead() *PlanRequiredContainerType {
    if s.PlanRequired == nil {
     if v, ok:= PlanRequiredContainerTypePointer(PlanRequiredContainerType{}); ok {
      s.PlanRequired = v
      }
      }
      return s.PlanRequired
    }
  func (s *WellbeingResponse) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *WellbeingResponse) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *WellbeingResponse) DetentionRead() *DetentionContainerType {
    if s.Detention == nil {
     if v, ok:= DetentionContainerTypePointer(DetentionContainerType{}); ok {
      s.Detention = v
      }
      }
      return s.Detention
    }
  func (s *WellbeingResponse) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *WellbeingResponse) WellbeingResponseCategoryRead() *AUCodeSetsWellbeingResponseCategoryType {
    if s.WellbeingResponseCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingResponseCategory = ((*AUCodeSetsWellbeingResponseCategoryType)(v))
      }
      }
      return s.WellbeingResponseCategory
    }
  func (s *WellbeingResponse) DocumentListRead() *WellbeingDocumentListType {
    if s.DocumentList == nil {
     if v, ok:= WellbeingDocumentListTypePointer(WellbeingDocumentListType{}); ok {
      s.DocumentList = v
      }
      }
      return s.DocumentList
    }
  func (s *WellbeingResponse) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *WellbeingResponse) WellbeingResponseNotesRead() *String {
    if s.WellbeingResponseNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingResponseNotes = ((*String)(v))
      }
      }
      return s.WellbeingResponseNotes
    }
  func (s *WellbeingResponse) AwardRead() *AwardContainerType {
    if s.Award == nil {
     if v, ok:= AwardContainerTypePointer(AwardContainerType{}); ok {
      s.Award = v
      }
      }
      return s.Award
    }

  // XXXXX
func (t *StaffAssignment) CopyString(key string, value interface{}) *StaffAssignment {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StaffAssignment) CopyClone(key string, value interface{}) *StaffAssignment {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StaffAssignment) Unset(key string) *StaffAssignment {
        switch key {
  case "EmploymentStatus":
   n.EmploymentStatus = nil
  case "StaffActivity":
   n.StaffActivity = nil
  case "StaffPersonalRefId":
   n.StaffPersonalRefId = nil
  case "Homegroup":
   n.Homegroup = nil
  case "JobEndDate":
   n.JobEndDate = nil
  case "House":
   n.House = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "StaffSubjectList":
   n.StaffSubjectList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "YearLevels":
   n.YearLevels = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "JobFunction":
   n.JobFunction = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "JobFTE":
   n.JobFTE = nil
  case "JobStartDate":
   n.JobStartDate = nil
  case "PrimaryAssignment":
   n.PrimaryAssignment = nil
  case "RefId":
   n.RefId = nil
  case "PreviousSchoolName":
   n.PreviousSchoolName = nil
  case "CalendarSummaryList":
   n.CalendarSummaryList = nil
  case "Description":
   n.Description = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "AvailableForTimetable":
   n.AvailableForTimetable = nil
  case "CasualReliefTeacher":
   n.CasualReliefTeacher = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffAssignment")
        }
        return n
}

func (n *StaffAssignment) SetProperty(key string, value interface{}) *StaffAssignment {
        if n == nil {
                n, _ = StaffAssignmentPointer(StaffAssignment{})
        }
        switch key {
    case "EmploymentStatus":
        if !CodesetContains(AUCodeSetsStaffStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStaffStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.EmploymentStatus = ((*AUCodeSetsStaffStatusType)(v))
      }
    case "StaffActivity":
    if v, ok:= StaffActivityExtensionTypePointer(value); ok {
      n.StaffActivity = v
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffPersonalRefId = ((*String)(v))
      }
    case "Homegroup":
    
    if v, ok:= StringPointer(value); ok {
      n.Homegroup = ((*String)(v))
      }
    case "JobEndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.JobEndDate = ((*String)(v))
      }
    case "House":
    
    if v, ok:= StringPointer(value); ok {
      n.House = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "StaffSubjectList":
    if v, ok:= StaffSubjectListTypePointer(value); ok {
      n.StaffSubjectList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.YearLevels = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "JobFunction":
    
    if v, ok:= StringPointer(value); ok {
      n.JobFunction = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "JobFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.JobFTE = ((*Float)(v))
      }
    case "JobStartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.JobStartDate = ((*String)(v))
      }
    case "PrimaryAssignment":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PrimaryAssignment = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "PreviousSchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.PreviousSchoolName = ((*String)(v))
      }
    case "CalendarSummaryList":
    if v, ok:= CalendarSummaryListTypePointer(value); ok {
      n.CalendarSummaryList = v
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "AvailableForTimetable":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AvailableForTimetable = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "CasualReliefTeacher":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.CasualReliefTeacher = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffAssignment")
        }
        return n
}

  func (s *StaffAssignment) EmploymentStatusRead() *AUCodeSetsStaffStatusType {
    if s.EmploymentStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.EmploymentStatus = ((*AUCodeSetsStaffStatusType)(v))
      }
      }
      return s.EmploymentStatus
    }
  func (s *StaffAssignment) StaffActivityRead() *StaffActivityExtensionType {
    if s.StaffActivity == nil {
     if v, ok:= StaffActivityExtensionTypePointer(StaffActivityExtensionType{}); ok {
      s.StaffActivity = v
      }
      }
      return s.StaffActivity
    }
  func (s *StaffAssignment) StaffPersonalRefIdRead() *String {
    if s.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.StaffPersonalRefId
    }
  func (s *StaffAssignment) HomegroupRead() *String {
    if s.Homegroup == nil {
    if v, ok:= StringPointer(""); ok {
      s.Homegroup = ((*String)(v))
      }
      }
      return s.Homegroup
    }
  func (s *StaffAssignment) JobEndDateRead() *String {
    if s.JobEndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.JobEndDate = ((*String)(v))
      }
      }
      return s.JobEndDate
    }
  func (s *StaffAssignment) HouseRead() *String {
    if s.House == nil {
    if v, ok:= StringPointer(""); ok {
      s.House = ((*String)(v))
      }
      }
      return s.House
    }
  func (s *StaffAssignment) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StaffAssignment) StaffSubjectListRead() *StaffSubjectListType {
    if s.StaffSubjectList == nil {
     if v, ok:= StaffSubjectListTypePointer(StaffSubjectListType{}); ok {
      s.StaffSubjectList = v
      }
      }
      return s.StaffSubjectList
    }
  func (s *StaffAssignment) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *StaffAssignment) YearLevelsRead() *YearLevelsType {
    if s.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.YearLevels = v
      }
      }
      return s.YearLevels
    }
  func (s *StaffAssignment) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StaffAssignment) JobFunctionRead() *String {
    if s.JobFunction == nil {
    if v, ok:= StringPointer(""); ok {
      s.JobFunction = ((*String)(v))
      }
      }
      return s.JobFunction
    }
  func (s *StaffAssignment) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StaffAssignment) JobFTERead() *Float {
    if s.JobFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.JobFTE = ((*Float)(v))
      }
      }
      return s.JobFTE
    }
  func (s *StaffAssignment) JobStartDateRead() *String {
    if s.JobStartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.JobStartDate = ((*String)(v))
      }
      }
      return s.JobStartDate
    }
  func (s *StaffAssignment) PrimaryAssignmentRead() *AUCodeSetsYesOrNoCategoryType {
    if s.PrimaryAssignment == nil {
    if v, ok:= StringPointer(""); ok {
      s.PrimaryAssignment = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.PrimaryAssignment
    }
  func (s *StaffAssignment) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StaffAssignment) PreviousSchoolNameRead() *String {
    if s.PreviousSchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreviousSchoolName = ((*String)(v))
      }
      }
      return s.PreviousSchoolName
    }
  func (s *StaffAssignment) CalendarSummaryListRead() *CalendarSummaryListType {
    if s.CalendarSummaryList == nil {
     if v, ok:= CalendarSummaryListTypePointer(CalendarSummaryListType{}); ok {
      s.CalendarSummaryList = v
      }
      }
      return s.CalendarSummaryList
    }
  func (s *StaffAssignment) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *StaffAssignment) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *StaffAssignment) AvailableForTimetableRead() *AUCodeSetsYesOrNoCategoryType {
    if s.AvailableForTimetable == nil {
    if v, ok:= StringPointer(""); ok {
      s.AvailableForTimetable = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.AvailableForTimetable
    }
  func (s *StaffAssignment) CasualReliefTeacherRead() *AUCodeSetsYesOrNoCategoryType {
    if s.CasualReliefTeacher == nil {
    if v, ok:= StringPointer(""); ok {
      s.CasualReliefTeacher = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.CasualReliefTeacher
    }

  // XXXXX
func (t *YearLevelType) CopyString(key string, value interface{}) *YearLevelType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *YearLevelType) CopyClone(key string, value interface{}) *YearLevelType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *YearLevelType) Unset(key string) *YearLevelType {
        switch key {
  case "Code":
   n.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "YearLevelType")
        }
        return n
}

func (n *YearLevelType) SetProperty(key string, value interface{}) *YearLevelType {
        if n == nil {
                n, _ = YearLevelTypePointer(YearLevelType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsYearLevelCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYearLevelCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsYearLevelCodeType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "YearLevelType")
        }
        return n
}

  func (s *YearLevelType) CodeRead() *AUCodeSetsYearLevelCodeType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsYearLevelCodeType)(v))
      }
      }
      return s.Code
    }

  // XXXXX
func (t *StaffSubjectType) CopyString(key string, value interface{}) *StaffSubjectType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StaffSubjectType) CopyClone(key string, value interface{}) *StaffSubjectType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StaffSubjectType) Unset(key string) *StaffSubjectType {
        switch key {
  case "SubjectLocalId":
   n.SubjectLocalId = nil
  case "PreferenceNumber":
   n.PreferenceNumber = nil
  case "TimeTableSubjectRefId":
   n.TimeTableSubjectRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffSubjectType")
        }
        return n
}

func (n *StaffSubjectType) SetProperty(key string, value interface{}) *StaffSubjectType {
        if n == nil {
                n, _ = StaffSubjectTypePointer(StaffSubjectType{})
        }
        switch key {
    case "SubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SubjectLocalId = ((*LocalIdType)(v))
      }
    case "PreferenceNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.PreferenceNumber = ((*Int)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffSubjectType")
        }
        return n
}

  func (s *StaffSubjectType) SubjectLocalIdRead() *LocalIdType {
    if s.SubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SubjectLocalId
    }
  func (s *StaffSubjectType) PreferenceNumberRead() *Int {
    if s.PreferenceNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.PreferenceNumber = ((*Int)(v))
      }
      }
      return s.PreferenceNumber
    }
  func (s *StaffSubjectType) TimeTableSubjectRefIdRead() *RefIdType {
    if s.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
      }
      return s.TimeTableSubjectRefId
    }

  // XXXXX
func (t *StandardsSettingBodyType) CopyString(key string, value interface{}) *StandardsSettingBodyType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StandardsSettingBodyType) CopyClone(key string, value interface{}) *StandardsSettingBodyType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StandardsSettingBodyType) Unset(key string) *StandardsSettingBodyType {
        switch key {
  case "StateProvince":
   n.StateProvince = nil
  case "SettingBodyName":
   n.SettingBodyName = nil
  case "Country":
   n.Country = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StandardsSettingBodyType")
        }
        return n
}

func (n *StandardsSettingBodyType) SetProperty(key string, value interface{}) *StandardsSettingBodyType {
        if n == nil {
                n, _ = StandardsSettingBodyTypePointer(StandardsSettingBodyType{})
        }
        switch key {
    case "StateProvince":
    
    if v, ok:= StringPointer(value); ok {
      n.StateProvince = ((*StateProvinceType)(v))
      }
    case "SettingBodyName":
    
    if v, ok:= StringPointer(value); ok {
      n.SettingBodyName = ((*String)(v))
      }
    case "Country":
        if !CodesetContains(AUCodeSetsStandardAustralianClassificationOfCountriesSACCType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStandardAustralianClassificationOfCountriesSACCType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Country = ((*CountryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StandardsSettingBodyType")
        }
        return n
}

  func (s *StandardsSettingBodyType) StateProvinceRead() *StateProvinceType {
    if s.StateProvince == nil {
    if v, ok:= StringPointer(""); ok {
      s.StateProvince = ((*StateProvinceType)(v))
      }
      }
      return s.StateProvince
    }
  func (s *StandardsSettingBodyType) SettingBodyNameRead() *String {
    if s.SettingBodyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.SettingBodyName = ((*String)(v))
      }
      }
      return s.SettingBodyName
    }
  func (s *StandardsSettingBodyType) CountryRead() *CountryType {
    if s.Country == nil {
    if v, ok:= StringPointer(""); ok {
      s.Country = ((*CountryType)(v))
      }
      }
      return s.Country
    }

  // XXXXX
func (t *GradeType) CopyString(key string, value interface{}) *GradeType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *GradeType) CopyClone(key string, value interface{}) *GradeType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *GradeType) Unset(key string) *GradeType {
        switch key {
  case "Numeric":
   n.Numeric = nil
  case "Percentage":
   n.Percentage = nil
  case "MarkInfoRefId":
   n.MarkInfoRefId = nil
  case "Narrative":
   n.Narrative = nil
  case "Letter":
   n.Letter = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GradeType")
        }
        return n
}

func (n *GradeType) SetProperty(key string, value interface{}) *GradeType {
        if n == nil {
                n, _ = GradeTypePointer(GradeType{})
        }
        switch key {
    case "Numeric":
    
    if v, ok:= FloatPointer(value); ok {
      n.Numeric = ((*Float)(v))
      }
    case "Percentage":
    
    if v, ok:= FloatPointer(value); ok {
      n.Percentage = ((*Float)(v))
      }
    case "MarkInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.MarkInfoRefId = ((*String)(v))
      }
    case "Narrative":
    
    if v, ok:= StringPointer(value); ok {
      n.Narrative = ((*String)(v))
      }
    case "Letter":
    
    if v, ok:= StringPointer(value); ok {
      n.Letter = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GradeType")
        }
        return n
}

  func (s *GradeType) NumericRead() *Float {
    if s.Numeric == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Numeric = ((*Float)(v))
      }
      }
      return s.Numeric
    }
  func (s *GradeType) PercentageRead() *Float {
    if s.Percentage == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Percentage = ((*Float)(v))
      }
      }
      return s.Percentage
    }
  func (s *GradeType) MarkInfoRefIdRead() *String {
    if s.MarkInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.MarkInfoRefId = ((*String)(v))
      }
      }
      return s.MarkInfoRefId
    }
  func (s *GradeType) NarrativeRead() *String {
    if s.Narrative == nil {
    if v, ok:= StringPointer(""); ok {
      s.Narrative = ((*String)(v))
      }
      }
      return s.Narrative
    }
  func (s *GradeType) LetterRead() *String {
    if s.Letter == nil {
    if v, ok:= StringPointer(""); ok {
      s.Letter = ((*String)(v))
      }
      }
      return s.Letter
    }

  // XXXXX
func (t *SubjectAreaType) CopyString(key string, value interface{}) *SubjectAreaType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SubjectAreaType) CopyClone(key string, value interface{}) *SubjectAreaType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SubjectAreaType) Unset(key string) *SubjectAreaType {
        switch key {
  case "Code":
   n.Code = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SubjectAreaType")
        }
        return n
}

func (n *SubjectAreaType) SetProperty(key string, value interface{}) *SubjectAreaType {
        if n == nil {
                n, _ = SubjectAreaTypePointer(SubjectAreaType{})
        }
        switch key {
    case "Code":
    
    if v, ok:= StringPointer(value); ok {
      n.Code = ((*String)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SubjectAreaType")
        }
        return n
}

  func (s *SubjectAreaType) CodeRead() *String {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*String)(v))
      }
      }
      return s.Code
    }
  func (s *SubjectAreaType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }

  // XXXXX
func (t *FQItemType) CopyString(key string, value interface{}) *FQItemType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *FQItemType) CopyClone(key string, value interface{}) *FQItemType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *FQItemType) Unset(key string) *FQItemType {
        switch key {
  case "FQComments":
   n.FQComments = nil
  case "BoardingAmount":
   n.BoardingAmount = nil
  case "DioceseAmount":
   n.DioceseAmount = nil
  case "TuitionAmount":
   n.TuitionAmount = nil
  case "SystemAmount":
   n.SystemAmount = nil
  case "FQItemCode":
   n.FQItemCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FQItemType")
        }
        return n
}

func (n *FQItemType) SetProperty(key string, value interface{}) *FQItemType {
        if n == nil {
                n, _ = FQItemTypePointer(FQItemType{})
        }
        switch key {
    case "FQComments":
    
    if v, ok:= StringPointer(value); ok {
      n.FQComments = ((*String)(v))
      }
    case "BoardingAmount":
    
    if v, ok:= FloatPointer(value); ok {
      n.BoardingAmount = ((*Float)(v))
      }
    case "DioceseAmount":
    
    if v, ok:= FloatPointer(value); ok {
      n.DioceseAmount = ((*Float)(v))
      }
    case "TuitionAmount":
    
    if v, ok:= FloatPointer(value); ok {
      n.TuitionAmount = ((*Float)(v))
      }
    case "SystemAmount":
    
    if v, ok:= FloatPointer(value); ok {
      n.SystemAmount = ((*Float)(v))
      }
    case "FQItemCode":
    
    if v, ok:= StringPointer(value); ok {
      n.FQItemCode = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FQItemType")
        }
        return n
}

  func (s *FQItemType) FQCommentsRead() *String {
    if s.FQComments == nil {
    if v, ok:= StringPointer(""); ok {
      s.FQComments = ((*String)(v))
      }
      }
      return s.FQComments
    }
  func (s *FQItemType) BoardingAmountRead() *Float {
    if s.BoardingAmount == nil {
    if v, ok:= FloatPointer(0); ok {
      s.BoardingAmount = ((*Float)(v))
      }
      }
      return s.BoardingAmount
    }
  func (s *FQItemType) DioceseAmountRead() *Float {
    if s.DioceseAmount == nil {
    if v, ok:= FloatPointer(0); ok {
      s.DioceseAmount = ((*Float)(v))
      }
      }
      return s.DioceseAmount
    }
  func (s *FQItemType) TuitionAmountRead() *Float {
    if s.TuitionAmount == nil {
    if v, ok:= FloatPointer(0); ok {
      s.TuitionAmount = ((*Float)(v))
      }
      }
      return s.TuitionAmount
    }
  func (s *FQItemType) SystemAmountRead() *Float {
    if s.SystemAmount == nil {
    if v, ok:= FloatPointer(0); ok {
      s.SystemAmount = ((*Float)(v))
      }
      }
      return s.SystemAmount
    }
  func (s *FQItemType) FQItemCodeRead() *String {
    if s.FQItemCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.FQItemCode = ((*String)(v))
      }
      }
      return s.FQItemCode
    }

  // XXXXX
func (t *TeacherCoverType) CopyString(key string, value interface{}) *TeacherCoverType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TeacherCoverType) CopyClone(key string, value interface{}) *TeacherCoverType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TeacherCoverType) Unset(key string) *TeacherCoverType {
        switch key {
  case "Supervision":
   n.Supervision = nil
  case "FinishTime":
   n.FinishTime = nil
  case "StaffLocalId":
   n.StaffLocalId = nil
  case "StartTime":
   n.StartTime = nil
  case "Credit":
   n.Credit = nil
  case "Weighting":
   n.Weighting = nil
  case "StaffPersonalRefId":
   n.StaffPersonalRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeacherCoverType")
        }
        return n
}

func (n *TeacherCoverType) SetProperty(key string, value interface{}) *TeacherCoverType {
        if n == nil {
                n, _ = TeacherCoverTypePointer(TeacherCoverType{})
        }
        switch key {
    case "Supervision":
        if !CodesetContains(AUCodeSetsTeacherCoverSupervisionType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsTeacherCoverSupervisionType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Supervision = ((*AUCodeSetsTeacherCoverSupervisionType)(v))
      }
    case "FinishTime":
    
    if v, ok:= StringPointer(value); ok {
      n.FinishTime = ((*String)(v))
      }
    case "StaffLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffLocalId = ((*LocalIdType)(v))
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.StartTime = ((*String)(v))
      }
    case "Credit":
        if !CodesetContains(AUCodeSetsTeacherCoverCreditType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsTeacherCoverCreditType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Credit = ((*AUCodeSetsTeacherCoverCreditType)(v))
      }
    case "Weighting":
    
    if v, ok:= FloatPointer(value); ok {
      n.Weighting = ((*Float)(v))
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffPersonalRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeacherCoverType")
        }
        return n
}

  func (s *TeacherCoverType) SupervisionRead() *AUCodeSetsTeacherCoverSupervisionType {
    if s.Supervision == nil {
    if v, ok:= StringPointer(""); ok {
      s.Supervision = ((*AUCodeSetsTeacherCoverSupervisionType)(v))
      }
      }
      return s.Supervision
    }
  func (s *TeacherCoverType) FinishTimeRead() *String {
    if s.FinishTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.FinishTime = ((*String)(v))
      }
      }
      return s.FinishTime
    }
  func (s *TeacherCoverType) StaffLocalIdRead() *LocalIdType {
    if s.StaffLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffLocalId = ((*LocalIdType)(v))
      }
      }
      return s.StaffLocalId
    }
  func (s *TeacherCoverType) StartTimeRead() *String {
    if s.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartTime = ((*String)(v))
      }
      }
      return s.StartTime
    }
  func (s *TeacherCoverType) CreditRead() *AUCodeSetsTeacherCoverCreditType {
    if s.Credit == nil {
    if v, ok:= StringPointer(""); ok {
      s.Credit = ((*AUCodeSetsTeacherCoverCreditType)(v))
      }
      }
      return s.Credit
    }
  func (s *TeacherCoverType) WeightingRead() *Float {
    if s.Weighting == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Weighting = ((*Float)(v))
      }
      }
      return s.Weighting
    }
  func (s *TeacherCoverType) StaffPersonalRefIdRead() *String {
    if s.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.StaffPersonalRefId
    }

  // XXXXX
func (t *ActivityTimeType) CopyString(key string, value interface{}) *ActivityTimeType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ActivityTimeType) CopyClone(key string, value interface{}) *ActivityTimeType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ActivityTimeType) Unset(key string) *ActivityTimeType {
        switch key {
  case "Duration":
   n.Duration = nil
  case "FinishDate":
   n.FinishDate = nil
  case "CreationDate":
   n.CreationDate = nil
  case "DueDate":
   n.DueDate = nil
  case "StartDate":
   n.StartDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ActivityTimeType")
        }
        return n
}

func (n *ActivityTimeType) SetProperty(key string, value interface{}) *ActivityTimeType {
        if n == nil {
                n, _ = ActivityTimeTypePointer(ActivityTimeType{})
        }
        switch key {
    case "Duration":
    if v, ok:= ActivityTimeType_DurationPointer(value); ok {
      n.Duration = v
      }
    case "FinishDate":
    
    if v, ok:= StringPointer(value); ok {
      n.FinishDate = ((*String)(v))
      }
    case "CreationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.CreationDate = ((*String)(v))
      }
    case "DueDate":
    
    if v, ok:= StringPointer(value); ok {
      n.DueDate = ((*String)(v))
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.StartDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ActivityTimeType")
        }
        return n
}

  func (s *ActivityTimeType) DurationRead() *ActivityTimeType_Duration {
    if s.Duration == nil {
     if v, ok:= ActivityTimeType_DurationPointer(ActivityTimeType_Duration{}); ok {
      s.Duration = v
      }
      }
      return s.Duration
    }
  func (s *ActivityTimeType) FinishDateRead() *String {
    if s.FinishDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.FinishDate = ((*String)(v))
      }
      }
      return s.FinishDate
    }
  func (s *ActivityTimeType) CreationDateRead() *String {
    if s.CreationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.CreationDate = ((*String)(v))
      }
      }
      return s.CreationDate
    }
  func (s *ActivityTimeType) DueDateRead() *String {
    if s.DueDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.DueDate = ((*String)(v))
      }
      }
      return s.DueDate
    }
  func (s *ActivityTimeType) StartDateRead() *String {
    if s.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartDate = ((*String)(v))
      }
      }
      return s.StartDate
    }

  // XXXXX
func (t *CatchmentStatusContainerType) CopyString(key string, value interface{}) *CatchmentStatusContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CatchmentStatusContainerType) CopyClone(key string, value interface{}) *CatchmentStatusContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CatchmentStatusContainerType) Unset(key string) *CatchmentStatusContainerType {
        switch key {
  case "OtherCodeList":
   n.OtherCodeList = nil
  case "Code":
   n.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CatchmentStatusContainerType")
        }
        return n
}

func (n *CatchmentStatusContainerType) SetProperty(key string, value interface{}) *CatchmentStatusContainerType {
        if n == nil {
                n, _ = CatchmentStatusContainerTypePointer(CatchmentStatusContainerType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsPublicSchoolCatchmentStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsPublicSchoolCatchmentStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsPublicSchoolCatchmentStatusType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CatchmentStatusContainerType")
        }
        return n
}

  func (s *CatchmentStatusContainerType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }
  func (s *CatchmentStatusContainerType) CodeRead() *AUCodeSetsPublicSchoolCatchmentStatusType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsPublicSchoolCatchmentStatusType)(v))
      }
      }
      return s.Code
    }

  // XXXXX
func (t *NAPTest) CopyString(key string, value interface{}) *NAPTest {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPTest) CopyClone(key string, value interface{}) *NAPTest {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPTest) Unset(key string) *NAPTest {
        switch key {
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "TestContent":
   n.TestContent = nil
  case "RefId":
   n.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTest")
        }
        return n
}

func (n *NAPTest) SetProperty(key string, value interface{}) *NAPTest {
        if n == nil {
                n, _ = NAPTestPointer(NAPTest{})
        }
        switch key {
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "TestContent":
    if v, ok:= NAPTestContentTypePointer(value); ok {
      n.TestContent = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTest")
        }
        return n
}

  func (s *NAPTest) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *NAPTest) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *NAPTest) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *NAPTest) TestContentRead() *NAPTestContentType {
    if s.TestContent == nil {
     if v, ok:= NAPTestContentTypePointer(NAPTestContentType{}); ok {
      s.TestContent = v
      }
      }
      return s.TestContent
    }
  func (s *NAPTest) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }

  // XXXXX
func (t *PublishingPermissionType) CopyString(key string, value interface{}) *PublishingPermissionType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PublishingPermissionType) CopyClone(key string, value interface{}) *PublishingPermissionType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PublishingPermissionType) Unset(key string) *PublishingPermissionType {
        switch key {
  case "PermissionValue":
   n.PermissionValue = nil
  case "PermissionCategory":
   n.PermissionCategory = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PublishingPermissionType")
        }
        return n
}

func (n *PublishingPermissionType) SetProperty(key string, value interface{}) *PublishingPermissionType {
        if n == nil {
                n, _ = PublishingPermissionTypePointer(PublishingPermissionType{})
        }
        switch key {
    case "PermissionValue":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PermissionValue = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "PermissionCategory":
        if !CodesetContains(AUCodeSetsPermissionCategoryCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsPermissionCategoryCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PermissionCategory = ((*AUCodeSetsPermissionCategoryCodeType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PublishingPermissionType")
        }
        return n
}

  func (s *PublishingPermissionType) PermissionValueRead() *AUCodeSetsYesOrNoCategoryType {
    if s.PermissionValue == nil {
    if v, ok:= StringPointer(""); ok {
      s.PermissionValue = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.PermissionValue
    }
  func (s *PublishingPermissionType) PermissionCategoryRead() *AUCodeSetsPermissionCategoryCodeType {
    if s.PermissionCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.PermissionCategory = ((*AUCodeSetsPermissionCategoryCodeType)(v))
      }
      }
      return s.PermissionCategory
    }

  // XXXXX
func (t *MarkValueInfo) CopyString(key string, value interface{}) *MarkValueInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *MarkValueInfo) CopyClone(key string, value interface{}) *MarkValueInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *MarkValueInfo) Unset(key string) *MarkValueInfo {
        switch key {
  case "PercentagePassingGrade":
   n.PercentagePassingGrade = nil
  case "NumericScale":
   n.NumericScale = nil
  case "PercentageMinimum":
   n.PercentageMinimum = nil
  case "Narrative":
   n.Narrative = nil
  case "PercentageMaximum":
   n.PercentageMaximum = nil
  case "ValidLetterMarkList":
   n.ValidLetterMarkList = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "NumericLow":
   n.NumericLow = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "NarrativeMaximumSize":
   n.NarrativeMaximumSize = nil
  case "YearLevels":
   n.YearLevels = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "NumericPassingGrade":
   n.NumericPassingGrade = nil
  case "Name":
   n.Name = nil
  case "NumericPrecision":
   n.NumericPrecision = nil
  case "NumericHigh":
   n.NumericHigh = nil
  case "RefId":
   n.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MarkValueInfo")
        }
        return n
}

func (n *MarkValueInfo) SetProperty(key string, value interface{}) *MarkValueInfo {
        if n == nil {
                n, _ = MarkValueInfoPointer(MarkValueInfo{})
        }
        switch key {
    case "PercentagePassingGrade":
    
    if v, ok:= FloatPointer(value); ok {
      n.PercentagePassingGrade = ((*Float)(v))
      }
    case "NumericScale":
    
    if v, ok:= IntPointer(value); ok {
      n.NumericScale = ((*Int)(v))
      }
    case "PercentageMinimum":
    
    if v, ok:= FloatPointer(value); ok {
      n.PercentageMinimum = ((*Float)(v))
      }
    case "Narrative":
    
    if v, ok:= StringPointer(value); ok {
      n.Narrative = ((*String)(v))
      }
    case "PercentageMaximum":
    
    if v, ok:= FloatPointer(value); ok {
      n.PercentageMaximum = ((*Float)(v))
      }
    case "ValidLetterMarkList":
    if v, ok:= ValidLetterMarkListTypePointer(value); ok {
      n.ValidLetterMarkList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "NumericLow":
    
    if v, ok:= FloatPointer(value); ok {
      n.NumericLow = ((*Float)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "NarrativeMaximumSize":
    
    if v, ok:= IntPointer(value); ok {
      n.NarrativeMaximumSize = ((*Int)(v))
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.YearLevels = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "NumericPassingGrade":
    
    if v, ok:= FloatPointer(value); ok {
      n.NumericPassingGrade = ((*Float)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.Name = ((*String)(v))
      }
    case "NumericPrecision":
    
    if v, ok:= IntPointer(value); ok {
      n.NumericPrecision = ((*Int)(v))
      }
    case "NumericHigh":
    
    if v, ok:= FloatPointer(value); ok {
      n.NumericHigh = ((*Float)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MarkValueInfo")
        }
        return n
}

  func (s *MarkValueInfo) PercentagePassingGradeRead() *Float {
    if s.PercentagePassingGrade == nil {
    if v, ok:= FloatPointer(0); ok {
      s.PercentagePassingGrade = ((*Float)(v))
      }
      }
      return s.PercentagePassingGrade
    }
  func (s *MarkValueInfo) NumericScaleRead() *Int {
    if s.NumericScale == nil {
    if v, ok:= IntPointer(0); ok {
      s.NumericScale = ((*Int)(v))
      }
      }
      return s.NumericScale
    }
  func (s *MarkValueInfo) PercentageMinimumRead() *Float {
    if s.PercentageMinimum == nil {
    if v, ok:= FloatPointer(0); ok {
      s.PercentageMinimum = ((*Float)(v))
      }
      }
      return s.PercentageMinimum
    }
  func (s *MarkValueInfo) NarrativeRead() *String {
    if s.Narrative == nil {
    if v, ok:= StringPointer(""); ok {
      s.Narrative = ((*String)(v))
      }
      }
      return s.Narrative
    }
  func (s *MarkValueInfo) PercentageMaximumRead() *Float {
    if s.PercentageMaximum == nil {
    if v, ok:= FloatPointer(0); ok {
      s.PercentageMaximum = ((*Float)(v))
      }
      }
      return s.PercentageMaximum
    }
  func (s *MarkValueInfo) ValidLetterMarkListRead() *ValidLetterMarkListType {
    if s.ValidLetterMarkList == nil {
     if v, ok:= ValidLetterMarkListTypePointer(ValidLetterMarkListType{}); ok {
      s.ValidLetterMarkList = v
      }
      }
      return s.ValidLetterMarkList
    }
  func (s *MarkValueInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *MarkValueInfo) NumericLowRead() *Float {
    if s.NumericLow == nil {
    if v, ok:= FloatPointer(0); ok {
      s.NumericLow = ((*Float)(v))
      }
      }
      return s.NumericLow
    }
  func (s *MarkValueInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *MarkValueInfo) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *MarkValueInfo) NarrativeMaximumSizeRead() *Int {
    if s.NarrativeMaximumSize == nil {
    if v, ok:= IntPointer(0); ok {
      s.NarrativeMaximumSize = ((*Int)(v))
      }
      }
      return s.NarrativeMaximumSize
    }
  func (s *MarkValueInfo) YearLevelsRead() *YearLevelsType {
    if s.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.YearLevels = v
      }
      }
      return s.YearLevels
    }
  func (s *MarkValueInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *MarkValueInfo) NumericPassingGradeRead() *Float {
    if s.NumericPassingGrade == nil {
    if v, ok:= FloatPointer(0); ok {
      s.NumericPassingGrade = ((*Float)(v))
      }
      }
      return s.NumericPassingGrade
    }
  func (s *MarkValueInfo) NameRead() *String {
    if s.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.Name = ((*String)(v))
      }
      }
      return s.Name
    }
  func (s *MarkValueInfo) NumericPrecisionRead() *Int {
    if s.NumericPrecision == nil {
    if v, ok:= IntPointer(0); ok {
      s.NumericPrecision = ((*Int)(v))
      }
      }
      return s.NumericPrecision
    }
  func (s *MarkValueInfo) NumericHighRead() *Float {
    if s.NumericHigh == nil {
    if v, ok:= FloatPointer(0); ok {
      s.NumericHigh = ((*Float)(v))
      }
      }
      return s.NumericHigh
    }
  func (s *MarkValueInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }

  // XXXXX
func (t *SystemRole_RoleScope) CopyString(key string, value interface{}) *SystemRole_RoleScope {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SystemRole_RoleScope) CopyClone(key string, value interface{}) *SystemRole_RoleScope {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SystemRole_RoleScope) Unset(key string) *SystemRole_RoleScope {
        switch key {
  case "RoleScopeRefId":
   n.RoleScopeRefId = nil
  case "RoleScopeName":
   n.RoleScopeName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_RoleScope")
        }
        return n
}

func (n *SystemRole_RoleScope) SetProperty(key string, value interface{}) *SystemRole_RoleScope {
        if n == nil {
                n, _ = SystemRole_RoleScopePointer(SystemRole_RoleScope{})
        }
        switch key {
    case "RoleScopeRefId":
    if v, ok:= SystemRole_RoleScopeRefIdPointer(value); ok {
      n.RoleScopeRefId = v
      }
    case "RoleScopeName":
    
    if v, ok:= StringPointer(value); ok {
      n.RoleScopeName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_RoleScope")
        }
        return n
}

  func (s *SystemRole_RoleScope) RoleScopeRefIdRead() *SystemRole_RoleScopeRefId {
    if s.RoleScopeRefId == nil {
     if v, ok:= SystemRole_RoleScopeRefIdPointer(SystemRole_RoleScopeRefId{}); ok {
      s.RoleScopeRefId = v
      }
      }
      return s.RoleScopeRefId
    }
  func (s *SystemRole_RoleScope) RoleScopeNameRead() *String {
    if s.RoleScopeName == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoleScopeName = ((*String)(v))
      }
      }
      return s.RoleScopeName
    }

  // XXXXX
func (t *IdentityAssertionsType_IdentityAssertion) CopyString(key string, value interface{}) *IdentityAssertionsType_IdentityAssertion {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *IdentityAssertionsType_IdentityAssertion) CopyClone(key string, value interface{}) *IdentityAssertionsType_IdentityAssertion {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *IdentityAssertionsType_IdentityAssertion) Unset(key string) *IdentityAssertionsType_IdentityAssertion {
        switch key {
  case "SchemaName":
   n.SchemaName = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "IdentityAssertionsType_IdentityAssertion")
        }
        return n
}

func (n *IdentityAssertionsType_IdentityAssertion) SetProperty(key string, value interface{}) *IdentityAssertionsType_IdentityAssertion {
        if n == nil {
                n, _ = IdentityAssertionsType_IdentityAssertionPointer(IdentityAssertionsType_IdentityAssertion{})
        }
        switch key {
    case "SchemaName":
    
    if v, ok:= StringPointer(value); ok {
      n.SchemaName = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "IdentityAssertionsType_IdentityAssertion")
        }
        return n
}

  func (s *IdentityAssertionsType_IdentityAssertion) SchemaNameRead() *String {
    if s.SchemaName == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchemaName = ((*String)(v))
      }
      }
      return s.SchemaName
    }
  func (s *IdentityAssertionsType_IdentityAssertion) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *EvaluationType) CopyString(key string, value interface{}) *EvaluationType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *EvaluationType) CopyClone(key string, value interface{}) *EvaluationType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *EvaluationType) Unset(key string) *EvaluationType {
        switch key {
  case "Date":
   n.Date = nil
  case "Name":
   n.Name = nil
  case "Description":
   n.Description = nil
  case "RefId":
   n.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EvaluationType")
        }
        return n
}

func (n *EvaluationType) SetProperty(key string, value interface{}) *EvaluationType {
        if n == nil {
                n, _ = EvaluationTypePointer(EvaluationType{})
        }
        switch key {
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.Date = ((*String)(v))
      }
    case "Name":
    if v, ok:= NameTypePointer(value); ok {
      n.Name = v
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EvaluationType")
        }
        return n
}

  func (s *EvaluationType) DateRead() *String {
    if s.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.Date = ((*String)(v))
      }
      }
      return s.Date
    }
  func (s *EvaluationType) NameRead() *NameType {
    if s.Name == nil {
     if v, ok:= NameTypePointer(NameType{}); ok {
      s.Name = v
      }
      }
      return s.Name
    }
  func (s *EvaluationType) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *EvaluationType) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }

  // XXXXX
func (t *LearningStandardType) CopyString(key string, value interface{}) *LearningStandardType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LearningStandardType) CopyClone(key string, value interface{}) *LearningStandardType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LearningStandardType) Unset(key string) *LearningStandardType {
        switch key {
  case "LearningStandardLocalId":
   n.LearningStandardLocalId = nil
  case "LearningStandardURL":
   n.LearningStandardURL = nil
  case "LearningStandardItemRefId":
   n.LearningStandardItemRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningStandardType")
        }
        return n
}

func (n *LearningStandardType) SetProperty(key string, value interface{}) *LearningStandardType {
        if n == nil {
                n, _ = LearningStandardTypePointer(LearningStandardType{})
        }
        switch key {
    case "LearningStandardLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LearningStandardLocalId = ((*LocalIdType)(v))
      }
    case "LearningStandardURL":
    
    if v, ok:= StringPointer(value); ok {
      n.LearningStandardURL = ((*String)(v))
      }
    case "LearningStandardItemRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.LearningStandardItemRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningStandardType")
        }
        return n
}

  func (s *LearningStandardType) LearningStandardLocalIdRead() *LocalIdType {
    if s.LearningStandardLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LearningStandardLocalId = ((*LocalIdType)(v))
      }
      }
      return s.LearningStandardLocalId
    }
  func (s *LearningStandardType) LearningStandardURLRead() *String {
    if s.LearningStandardURL == nil {
    if v, ok:= StringPointer(""); ok {
      s.LearningStandardURL = ((*String)(v))
      }
      }
      return s.LearningStandardURL
    }
  func (s *LearningStandardType) LearningStandardItemRefIdRead() *String {
    if s.LearningStandardItemRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LearningStandardItemRefId = ((*String)(v))
      }
      }
      return s.LearningStandardItemRefId
    }

  // XXXXX
func (t *SchoolProgramType) CopyString(key string, value interface{}) *SchoolProgramType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SchoolProgramType) CopyClone(key string, value interface{}) *SchoolProgramType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SchoolProgramType) Unset(key string) *SchoolProgramType {
        switch key {
  case "Type":
   n.Type = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
  case "Category":
   n.Category = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolProgramType")
        }
        return n
}

func (n *SchoolProgramType) SetProperty(key string, value interface{}) *SchoolProgramType {
        if n == nil {
                n, _ = SchoolProgramTypePointer(SchoolProgramType{})
        }
        switch key {
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
    case "Category":
    
    if v, ok:= StringPointer(value); ok {
      n.Category = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolProgramType")
        }
        return n
}

  func (s *SchoolProgramType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }
  func (s *SchoolProgramType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }
  func (s *SchoolProgramType) CategoryRead() *String {
    if s.Category == nil {
    if v, ok:= StringPointer(""); ok {
      s.Category = ((*String)(v))
      }
      }
      return s.Category
    }

  // XXXXX
func (t *LocationOfInstructionType) CopyString(key string, value interface{}) *LocationOfInstructionType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LocationOfInstructionType) CopyClone(key string, value interface{}) *LocationOfInstructionType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LocationOfInstructionType) Unset(key string) *LocationOfInstructionType {
        switch key {
  case "OtherCodeList":
   n.OtherCodeList = nil
  case "Code":
   n.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocationOfInstructionType")
        }
        return n
}

func (n *LocationOfInstructionType) SetProperty(key string, value interface{}) *LocationOfInstructionType {
        if n == nil {
                n, _ = LocationOfInstructionTypePointer(LocationOfInstructionType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsReceivingLocationOfInstructionType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsReceivingLocationOfInstructionType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsReceivingLocationOfInstructionType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocationOfInstructionType")
        }
        return n
}

  func (s *LocationOfInstructionType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }
  func (s *LocationOfInstructionType) CodeRead() *AUCodeSetsReceivingLocationOfInstructionType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsReceivingLocationOfInstructionType)(v))
      }
      }
      return s.Code
    }

  // XXXXX
func (t *WellbeingDocumentType) CopyString(key string, value interface{}) *WellbeingDocumentType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *WellbeingDocumentType) CopyClone(key string, value interface{}) *WellbeingDocumentType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *WellbeingDocumentType) Unset(key string) *WellbeingDocumentType {
        switch key {
  case "DocumentDescription":
   n.DocumentDescription = nil
  case "DocumentReviewDate":
   n.DocumentReviewDate = nil
  case "Sensitivity":
   n.Sensitivity = nil
  case "Location":
   n.Location = nil
  case "DocumentType":
   n.DocumentType = nil
  case "URL":
   n.URL = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingDocumentType")
        }
        return n
}

func (n *WellbeingDocumentType) SetProperty(key string, value interface{}) *WellbeingDocumentType {
        if n == nil {
                n, _ = WellbeingDocumentTypePointer(WellbeingDocumentType{})
        }
        switch key {
    case "DocumentDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.DocumentDescription = ((*String)(v))
      }
    case "DocumentReviewDate":
    
    if v, ok:= StringPointer(value); ok {
      n.DocumentReviewDate = ((*String)(v))
      }
    case "Sensitivity":
    
    if v, ok:= StringPointer(value); ok {
      n.Sensitivity = ((*String)(v))
      }
    case "Location":
    
    if v, ok:= StringPointer(value); ok {
      n.Location = ((*String)(v))
      }
    case "DocumentType":
    
    if v, ok:= StringPointer(value); ok {
      n.DocumentType = ((*String)(v))
      }
    case "URL":
    
    if v, ok:= StringPointer(value); ok {
      n.URL = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingDocumentType")
        }
        return n
}

  func (s *WellbeingDocumentType) DocumentDescriptionRead() *String {
    if s.DocumentDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.DocumentDescription = ((*String)(v))
      }
      }
      return s.DocumentDescription
    }
  func (s *WellbeingDocumentType) DocumentReviewDateRead() *String {
    if s.DocumentReviewDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.DocumentReviewDate = ((*String)(v))
      }
      }
      return s.DocumentReviewDate
    }
  func (s *WellbeingDocumentType) SensitivityRead() *String {
    if s.Sensitivity == nil {
    if v, ok:= StringPointer(""); ok {
      s.Sensitivity = ((*String)(v))
      }
      }
      return s.Sensitivity
    }
  func (s *WellbeingDocumentType) LocationRead() *String {
    if s.Location == nil {
    if v, ok:= StringPointer(""); ok {
      s.Location = ((*String)(v))
      }
      }
      return s.Location
    }
  func (s *WellbeingDocumentType) DocumentTypeRead() *String {
    if s.DocumentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.DocumentType = ((*String)(v))
      }
      }
      return s.DocumentType
    }
  func (s *WellbeingDocumentType) URLRead() *String {
    if s.URL == nil {
    if v, ok:= StringPointer(""); ok {
      s.URL = ((*String)(v))
      }
      }
      return s.URL
    }

  // XXXXX
func (t *ChargedLocationInfo) CopyString(key string, value interface{}) *ChargedLocationInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ChargedLocationInfo) CopyClone(key string, value interface{}) *ChargedLocationInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ChargedLocationInfo) Unset(key string) *ChargedLocationInfo {
        switch key {
  case "LocationType":
   n.LocationType = nil
  case "StateProvinceId":
   n.StateProvinceId = nil
  case "SiteCategory":
   n.SiteCategory = nil
  case "ParentChargedLocationInfoRefId":
   n.ParentChargedLocationInfoRefId = nil
  case "PhoneNumberList":
   n.PhoneNumberList = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "RefId":
   n.RefId = nil
  case "AddressList":
   n.AddressList = nil
  case "Description":
   n.Description = nil
  case "Name":
   n.Name = nil
  case "LocalId":
   n.LocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ChargedLocationInfo")
        }
        return n
}

func (n *ChargedLocationInfo) SetProperty(key string, value interface{}) *ChargedLocationInfo {
        if n == nil {
                n, _ = ChargedLocationInfoPointer(ChargedLocationInfo{})
        }
        switch key {
    case "LocationType":
    
    if v, ok:= StringPointer(value); ok {
      n.LocationType = ((*String)(v))
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "SiteCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.SiteCategory = ((*String)(v))
      }
    case "ParentChargedLocationInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.ParentChargedLocationInfoRefId = ((*String)(v))
      }
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.PhoneNumberList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.AddressList = v
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.Name = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ChargedLocationInfo")
        }
        return n
}

  func (s *ChargedLocationInfo) LocationTypeRead() *String {
    if s.LocationType == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocationType = ((*String)(v))
      }
      }
      return s.LocationType
    }
  func (s *ChargedLocationInfo) StateProvinceIdRead() *StateProvinceIdType {
    if s.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.StateProvinceId
    }
  func (s *ChargedLocationInfo) SiteCategoryRead() *String {
    if s.SiteCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.SiteCategory = ((*String)(v))
      }
      }
      return s.SiteCategory
    }
  func (s *ChargedLocationInfo) ParentChargedLocationInfoRefIdRead() *String {
    if s.ParentChargedLocationInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ParentChargedLocationInfoRefId = ((*String)(v))
      }
      }
      return s.ParentChargedLocationInfoRefId
    }
  func (s *ChargedLocationInfo) PhoneNumberListRead() *PhoneNumberListType {
    if s.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.PhoneNumberList = v
      }
      }
      return s.PhoneNumberList
    }
  func (s *ChargedLocationInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *ChargedLocationInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *ChargedLocationInfo) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *ChargedLocationInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *ChargedLocationInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *ChargedLocationInfo) AddressListRead() *AddressListType {
    if s.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.AddressList = v
      }
      }
      return s.AddressList
    }
  func (s *ChargedLocationInfo) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *ChargedLocationInfo) NameRead() *String {
    if s.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.Name = ((*String)(v))
      }
      }
      return s.Name
    }
  func (s *ChargedLocationInfo) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }

  // XXXXX
func (t *TotalEnrollmentsType) CopyString(key string, value interface{}) *TotalEnrollmentsType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TotalEnrollmentsType) CopyClone(key string, value interface{}) *TotalEnrollmentsType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TotalEnrollmentsType) Unset(key string) *TotalEnrollmentsType {
        switch key {
  case "TotalStudents":
   n.TotalStudents = nil
  case "Boys":
   n.Boys = nil
  case "Girls":
   n.Girls = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TotalEnrollmentsType")
        }
        return n
}

func (n *TotalEnrollmentsType) SetProperty(key string, value interface{}) *TotalEnrollmentsType {
        if n == nil {
                n, _ = TotalEnrollmentsTypePointer(TotalEnrollmentsType{})
        }
        switch key {
    case "TotalStudents":
    
    if v, ok:= StringPointer(value); ok {
      n.TotalStudents = ((*String)(v))
      }
    case "Boys":
    
    if v, ok:= StringPointer(value); ok {
      n.Boys = ((*String)(v))
      }
    case "Girls":
    
    if v, ok:= StringPointer(value); ok {
      n.Girls = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TotalEnrollmentsType")
        }
        return n
}

  func (s *TotalEnrollmentsType) TotalStudentsRead() *String {
    if s.TotalStudents == nil {
    if v, ok:= StringPointer(""); ok {
      s.TotalStudents = ((*String)(v))
      }
      }
      return s.TotalStudents
    }
  func (s *TotalEnrollmentsType) BoysRead() *String {
    if s.Boys == nil {
    if v, ok:= StringPointer(""); ok {
      s.Boys = ((*String)(v))
      }
      }
      return s.Boys
    }
  func (s *TotalEnrollmentsType) GirlsRead() *String {
    if s.Girls == nil {
    if v, ok:= StringPointer(""); ok {
      s.Girls = ((*String)(v))
      }
      }
      return s.Girls
    }

  // XXXXX
func (t *ScoreType) CopyString(key string, value interface{}) *ScoreType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ScoreType) CopyClone(key string, value interface{}) *ScoreType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ScoreType) Unset(key string) *ScoreType {
        switch key {
  case "ScoreDescriptionList":
   n.ScoreDescriptionList = nil
  case "MaxScoreValue":
   n.MaxScoreValue = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScoreType")
        }
        return n
}

func (n *ScoreType) SetProperty(key string, value interface{}) *ScoreType {
        if n == nil {
                n, _ = ScoreTypePointer(ScoreType{})
        }
        switch key {
    case "ScoreDescriptionList":
    if v, ok:= ScoreDescriptionListTypePointer(value); ok {
      n.ScoreDescriptionList = v
      }
    case "MaxScoreValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.MaxScoreValue = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScoreType")
        }
        return n
}

  func (s *ScoreType) ScoreDescriptionListRead() *ScoreDescriptionListType {
    if s.ScoreDescriptionList == nil {
     if v, ok:= ScoreDescriptionListTypePointer(ScoreDescriptionListType{}); ok {
      s.ScoreDescriptionList = v
      }
      }
      return s.ScoreDescriptionList
    }
  func (s *ScoreType) MaxScoreValueRead() *Float {
    if s.MaxScoreValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.MaxScoreValue = ((*Float)(v))
      }
      }
      return s.MaxScoreValue
    }

  // XXXXX
func (t *AggregateStatisticInfo) CopyString(key string, value interface{}) *AggregateStatisticInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AggregateStatisticInfo) CopyClone(key string, value interface{}) *AggregateStatisticInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AggregateStatisticInfo) Unset(key string) *AggregateStatisticInfo {
        switch key {
  case "RefId":
   n.RefId = nil
  case "ApprovalDate":
   n.ApprovalDate = nil
  case "ExclusionRules":
   n.ExclusionRules = nil
  case "StatisticName":
   n.StatisticName = nil
  case "DiscontinueDate":
   n.DiscontinueDate = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "ExpirationDate":
   n.ExpirationDate = nil
  case "CalculationRule":
   n.CalculationRule = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "Source":
   n.Source = nil
  case "EffectiveDate":
   n.EffectiveDate = nil
  case "Location":
   n.Location = nil
  case "Measure":
   n.Measure = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateStatisticInfo")
        }
        return n
}

func (n *AggregateStatisticInfo) SetProperty(key string, value interface{}) *AggregateStatisticInfo {
        if n == nil {
                n, _ = AggregateStatisticInfoPointer(AggregateStatisticInfo{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ApprovalDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ApprovalDate = ((*String)(v))
      }
    case "ExclusionRules":
    if v, ok:= ExclusionRulesTypePointer(value); ok {
      n.ExclusionRules = v
      }
    case "StatisticName":
    
    if v, ok:= StringPointer(value); ok {
      n.StatisticName = ((*String)(v))
      }
    case "DiscontinueDate":
    
    if v, ok:= StringPointer(value); ok {
      n.DiscontinueDate = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "ExpirationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ExpirationDate = ((*String)(v))
      }
    case "CalculationRule":
    if v, ok:= AggregateStatisticInfo_CalculationRulePointer(value); ok {
      n.CalculationRule = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "Source":
    
    if v, ok:= StringPointer(value); ok {
      n.Source = ((*String)(v))
      }
    case "EffectiveDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EffectiveDate = ((*String)(v))
      }
    case "Location":
    if v, ok:= LocationTypePointer(value); ok {
      n.Location = v
      }
    case "Measure":
    
    if v, ok:= StringPointer(value); ok {
      n.Measure = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateStatisticInfo")
        }
        return n
}

  func (s *AggregateStatisticInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *AggregateStatisticInfo) ApprovalDateRead() *String {
    if s.ApprovalDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ApprovalDate = ((*String)(v))
      }
      }
      return s.ApprovalDate
    }
  func (s *AggregateStatisticInfo) ExclusionRulesRead() *ExclusionRulesType {
    if s.ExclusionRules == nil {
     if v, ok:= ExclusionRulesTypePointer(ExclusionRulesType{}); ok {
      s.ExclusionRules = v
      }
      }
      return s.ExclusionRules
    }
  func (s *AggregateStatisticInfo) StatisticNameRead() *String {
    if s.StatisticName == nil {
    if v, ok:= StringPointer(""); ok {
      s.StatisticName = ((*String)(v))
      }
      }
      return s.StatisticName
    }
  func (s *AggregateStatisticInfo) DiscontinueDateRead() *String {
    if s.DiscontinueDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.DiscontinueDate = ((*String)(v))
      }
      }
      return s.DiscontinueDate
    }
  func (s *AggregateStatisticInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *AggregateStatisticInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *AggregateStatisticInfo) ExpirationDateRead() *String {
    if s.ExpirationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ExpirationDate = ((*String)(v))
      }
      }
      return s.ExpirationDate
    }
  func (s *AggregateStatisticInfo) CalculationRuleRead() *AggregateStatisticInfo_CalculationRule {
    if s.CalculationRule == nil {
     if v, ok:= AggregateStatisticInfo_CalculationRulePointer(AggregateStatisticInfo_CalculationRule{}); ok {
      s.CalculationRule = v
      }
      }
      return s.CalculationRule
    }
  func (s *AggregateStatisticInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *AggregateStatisticInfo) SourceRead() *String {
    if s.Source == nil {
    if v, ok:= StringPointer(""); ok {
      s.Source = ((*String)(v))
      }
      }
      return s.Source
    }
  func (s *AggregateStatisticInfo) EffectiveDateRead() *String {
    if s.EffectiveDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EffectiveDate = ((*String)(v))
      }
      }
      return s.EffectiveDate
    }
  func (s *AggregateStatisticInfo) LocationRead() *LocationType {
    if s.Location == nil {
     if v, ok:= LocationTypePointer(LocationType{}); ok {
      s.Location = v
      }
      }
      return s.Location
    }
  func (s *AggregateStatisticInfo) MeasureRead() *String {
    if s.Measure == nil {
    if v, ok:= StringPointer(""); ok {
      s.Measure = ((*String)(v))
      }
      }
      return s.Measure
    }

  // XXXXX
func (t *StudentAttendanceCollection) CopyString(key string, value interface{}) *StudentAttendanceCollection {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentAttendanceCollection) CopyClone(key string, value interface{}) *StudentAttendanceCollection {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentAttendanceCollection) Unset(key string) *StudentAttendanceCollection {
        switch key {
  case "StudentAttendanceCollectionReportingList":
   n.StudentAttendanceCollectionReportingList = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "RefId":
   n.RefId = nil
  case "ReportingAuthorityCommonwealthId":
   n.ReportingAuthorityCommonwealthId = nil
  case "StudentAttendanceCollectionYear":
   n.StudentAttendanceCollectionYear = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "RoundCode":
   n.RoundCode = nil
  case "SoftwareVendorInfo":
   n.SoftwareVendorInfo = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceCollection")
        }
        return n
}

func (n *StudentAttendanceCollection) SetProperty(key string, value interface{}) *StudentAttendanceCollection {
        if n == nil {
                n, _ = StudentAttendanceCollectionPointer(StudentAttendanceCollection{})
        }
        switch key {
    case "StudentAttendanceCollectionReportingList":
    if v, ok:= StudentAttendanceCollectionReportingListTypePointer(value); ok {
      n.StudentAttendanceCollectionReportingList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ReportingAuthorityCommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
    case "StudentAttendanceCollectionYear":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentAttendanceCollectionYear = ((*SchoolYearType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "RoundCode":
    
    if v, ok:= StringPointer(value); ok {
      n.RoundCode = ((*String)(v))
      }
    case "SoftwareVendorInfo":
    if v, ok:= SoftwareVendorInfoContainerTypePointer(value); ok {
      n.SoftwareVendorInfo = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceCollection")
        }
        return n
}

  func (s *StudentAttendanceCollection) StudentAttendanceCollectionReportingListRead() *StudentAttendanceCollectionReportingListType {
    if s.StudentAttendanceCollectionReportingList == nil {
     if v, ok:= StudentAttendanceCollectionReportingListTypePointer(StudentAttendanceCollectionReportingListType{}); ok {
      s.StudentAttendanceCollectionReportingList = v
      }
      }
      return s.StudentAttendanceCollectionReportingList
    }
  func (s *StudentAttendanceCollection) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentAttendanceCollection) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StudentAttendanceCollection) ReportingAuthorityCommonwealthIdRead() *String {
    if s.ReportingAuthorityCommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
      }
      return s.ReportingAuthorityCommonwealthId
    }
  func (s *StudentAttendanceCollection) StudentAttendanceCollectionYearRead() *SchoolYearType {
    if s.StudentAttendanceCollectionYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentAttendanceCollectionYear = ((*SchoolYearType)(v))
      }
      }
      return s.StudentAttendanceCollectionYear
    }
  func (s *StudentAttendanceCollection) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentAttendanceCollection) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentAttendanceCollection) RoundCodeRead() *String {
    if s.RoundCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoundCode = ((*String)(v))
      }
      }
      return s.RoundCode
    }
  func (s *StudentAttendanceCollection) SoftwareVendorInfoRead() *SoftwareVendorInfoContainerType {
    if s.SoftwareVendorInfo == nil {
     if v, ok:= SoftwareVendorInfoContainerTypePointer(SoftwareVendorInfoContainerType{}); ok {
      s.SoftwareVendorInfo = v
      }
      }
      return s.SoftwareVendorInfo
    }

  // XXXXX
func (t *AddressCollectionStudentType) CopyString(key string, value interface{}) *AddressCollectionStudentType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AddressCollectionStudentType) CopyClone(key string, value interface{}) *AddressCollectionStudentType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AddressCollectionStudentType) Unset(key string) *AddressCollectionStudentType {
        switch key {
  case "BoardingStatus":
   n.BoardingStatus = nil
  case "StudentAddress":
   n.StudentAddress = nil
  case "LocalId":
   n.LocalId = nil
  case "ReportingParent2":
   n.ReportingParent2 = nil
  case "EducationLevel":
   n.EducationLevel = nil
  case "Parent2":
   n.Parent2 = nil
  case "Parent1":
   n.Parent1 = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressCollectionStudentType")
        }
        return n
}

func (n *AddressCollectionStudentType) SetProperty(key string, value interface{}) *AddressCollectionStudentType {
        if n == nil {
                n, _ = AddressCollectionStudentTypePointer(AddressCollectionStudentType{})
        }
        switch key {
    case "BoardingStatus":
        if !CodesetContains(AUCodeSetsBoardingType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsBoardingType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.BoardingStatus = ((*AUCodeSetsBoardingType)(v))
      }
    case "StudentAddress":
    if v, ok:= AddressTypePointer(value); ok {
      n.StudentAddress = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "ReportingParent2":
    
    if v, ok:= StringPointer(value); ok {
      n.ReportingParent2 = ((*String)(v))
      }
    case "EducationLevel":
        if !CodesetContains(AUCodeSetsEducationLevelType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEducationLevelType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.EducationLevel = ((*AUCodeSetsEducationLevelType)(v))
      }
    case "Parent2":
    if v, ok:= AGParentTypePointer(value); ok {
      n.Parent2 = v
      }
    case "Parent1":
    if v, ok:= AGParentTypePointer(value); ok {
      n.Parent1 = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressCollectionStudentType")
        }
        return n
}

  func (s *AddressCollectionStudentType) BoardingStatusRead() *AUCodeSetsBoardingType {
    if s.BoardingStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.BoardingStatus = ((*AUCodeSetsBoardingType)(v))
      }
      }
      return s.BoardingStatus
    }
  func (s *AddressCollectionStudentType) StudentAddressRead() *AddressType {
    if s.StudentAddress == nil {
     if v, ok:= AddressTypePointer(AddressType{}); ok {
      s.StudentAddress = v
      }
      }
      return s.StudentAddress
    }
  func (s *AddressCollectionStudentType) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *AddressCollectionStudentType) ReportingParent2Read() *String {
    if s.ReportingParent2 == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReportingParent2 = ((*String)(v))
      }
      }
      return s.ReportingParent2
    }
  func (s *AddressCollectionStudentType) EducationLevelRead() *AUCodeSetsEducationLevelType {
    if s.EducationLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.EducationLevel = ((*AUCodeSetsEducationLevelType)(v))
      }
      }
      return s.EducationLevel
    }
  func (s *AddressCollectionStudentType) Parent2Read() *AGParentType {
    if s.Parent2 == nil {
     if v, ok:= AGParentTypePointer(AGParentType{}); ok {
      s.Parent2 = v
      }
      }
      return s.Parent2
    }
  func (s *AddressCollectionStudentType) Parent1Read() *AGParentType {
    if s.Parent1 == nil {
     if v, ok:= AGParentTypePointer(AGParentType{}); ok {
      s.Parent1 = v
      }
      }
      return s.Parent1
    }

  // XXXXX
func (t *HoldInfoType) CopyString(key string, value interface{}) *HoldInfoType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *HoldInfoType) CopyClone(key string, value interface{}) *HoldInfoType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *HoldInfoType) Unset(key string) *HoldInfoType {
        switch key {
  case "Expires":
   n.Expires = nil
  case "MadeAvailable":
   n.MadeAvailable = nil
  case "ReservationExpiry":
   n.ReservationExpiry = nil
  case "Type":
   n.Type = nil
  case "DatePlaced":
   n.DatePlaced = nil
  case "DateNeeded":
   n.DateNeeded = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "HoldInfoType")
        }
        return n
}

func (n *HoldInfoType) SetProperty(key string, value interface{}) *HoldInfoType {
        if n == nil {
                n, _ = HoldInfoTypePointer(HoldInfoType{})
        }
        switch key {
    case "Expires":
    
    if v, ok:= StringPointer(value); ok {
      n.Expires = ((*String)(v))
      }
    case "MadeAvailable":
    
    if v, ok:= StringPointer(value); ok {
      n.MadeAvailable = ((*String)(v))
      }
    case "ReservationExpiry":
    
    if v, ok:= StringPointer(value); ok {
      n.ReservationExpiry = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
    case "DatePlaced":
    
    if v, ok:= StringPointer(value); ok {
      n.DatePlaced = ((*String)(v))
      }
    case "DateNeeded":
    
    if v, ok:= StringPointer(value); ok {
      n.DateNeeded = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "HoldInfoType")
        }
        return n
}

  func (s *HoldInfoType) ExpiresRead() *String {
    if s.Expires == nil {
    if v, ok:= StringPointer(""); ok {
      s.Expires = ((*String)(v))
      }
      }
      return s.Expires
    }
  func (s *HoldInfoType) MadeAvailableRead() *String {
    if s.MadeAvailable == nil {
    if v, ok:= StringPointer(""); ok {
      s.MadeAvailable = ((*String)(v))
      }
      }
      return s.MadeAvailable
    }
  func (s *HoldInfoType) ReservationExpiryRead() *String {
    if s.ReservationExpiry == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReservationExpiry = ((*String)(v))
      }
      }
      return s.ReservationExpiry
    }
  func (s *HoldInfoType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }
  func (s *HoldInfoType) DatePlacedRead() *String {
    if s.DatePlaced == nil {
    if v, ok:= StringPointer(""); ok {
      s.DatePlaced = ((*String)(v))
      }
      }
      return s.DatePlaced
    }
  func (s *HoldInfoType) DateNeededRead() *String {
    if s.DateNeeded == nil {
    if v, ok:= StringPointer(""); ok {
      s.DateNeeded = ((*String)(v))
      }
      }
      return s.DateNeeded
    }

  // XXXXX
func (t *SessionInfo) CopyString(key string, value interface{}) *SessionInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SessionInfo) CopyClone(key string, value interface{}) *SessionInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SessionInfo) Unset(key string) *SessionInfo {
        switch key {
  case "RollMarked":
   n.RollMarked = nil
  case "TimeTableSubjectLocalId":
   n.TimeTableSubjectLocalId = nil
  case "PeriodId":
   n.PeriodId = nil
  case "SchoolLocalId":
   n.SchoolLocalId = nil
  case "RoomNumber":
   n.RoomNumber = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "StaffPersonalLocalId":
   n.StaffPersonalLocalId = nil
  case "TimeTableCellRefId":
   n.TimeTableCellRefId = nil
  case "DayId":
   n.DayId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "StartTime":
   n.StartTime = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "TeachingGroupLocalId":
   n.TeachingGroupLocalId = nil
  case "SessionDate":
   n.SessionDate = nil
  case "FinishTime":
   n.FinishTime = nil
  case "LocalId":
   n.LocalId = nil
  case "RefId":
   n.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SessionInfo")
        }
        return n
}

func (n *SessionInfo) SetProperty(key string, value interface{}) *SessionInfo {
        if n == nil {
                n, _ = SessionInfoPointer(SessionInfo{})
        }
        switch key {
    case "RollMarked":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.RollMarked = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "TimeTableSubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableSubjectLocalId = ((*LocalIdType)(v))
      }
    case "PeriodId":
    
    if v, ok:= StringPointer(value); ok {
      n.PeriodId = ((*LocalIdType)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "RoomNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.RoomNumber = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "StaffPersonalLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffPersonalLocalId = ((*LocalIdType)(v))
      }
    case "TimeTableCellRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableCellRefId = ((*String)(v))
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.DayId = ((*LocalIdType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.StartTime = ((*String)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "TeachingGroupLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.TeachingGroupLocalId = ((*LocalIdType)(v))
      }
    case "SessionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.SessionDate = ((*String)(v))
      }
    case "FinishTime":
    
    if v, ok:= StringPointer(value); ok {
      n.FinishTime = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SessionInfo")
        }
        return n
}

  func (s *SessionInfo) RollMarkedRead() *AUCodeSetsYesOrNoCategoryType {
    if s.RollMarked == nil {
    if v, ok:= StringPointer(""); ok {
      s.RollMarked = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.RollMarked
    }
  func (s *SessionInfo) TimeTableSubjectLocalIdRead() *LocalIdType {
    if s.TimeTableSubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableSubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.TimeTableSubjectLocalId
    }
  func (s *SessionInfo) PeriodIdRead() *LocalIdType {
    if s.PeriodId == nil {
    if v, ok:= StringPointer(""); ok {
      s.PeriodId = ((*LocalIdType)(v))
      }
      }
      return s.PeriodId
    }
  func (s *SessionInfo) SchoolLocalIdRead() *LocalIdType {
    if s.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolLocalId
    }
  func (s *SessionInfo) RoomNumberRead() *String {
    if s.RoomNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoomNumber = ((*String)(v))
      }
      }
      return s.RoomNumber
    }
  func (s *SessionInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *SessionInfo) StaffPersonalLocalIdRead() *LocalIdType {
    if s.StaffPersonalLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffPersonalLocalId = ((*LocalIdType)(v))
      }
      }
      return s.StaffPersonalLocalId
    }
  func (s *SessionInfo) TimeTableCellRefIdRead() *String {
    if s.TimeTableCellRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableCellRefId = ((*String)(v))
      }
      }
      return s.TimeTableCellRefId
    }
  func (s *SessionInfo) DayIdRead() *LocalIdType {
    if s.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.DayId = ((*LocalIdType)(v))
      }
      }
      return s.DayId
    }
  func (s *SessionInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *SessionInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *SessionInfo) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *SessionInfo) StartTimeRead() *String {
    if s.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartTime = ((*String)(v))
      }
      }
      return s.StartTime
    }
  func (s *SessionInfo) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *SessionInfo) TeachingGroupLocalIdRead() *LocalIdType {
    if s.TeachingGroupLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TeachingGroupLocalId = ((*LocalIdType)(v))
      }
      }
      return s.TeachingGroupLocalId
    }
  func (s *SessionInfo) SessionDateRead() *String {
    if s.SessionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.SessionDate = ((*String)(v))
      }
      }
      return s.SessionDate
    }
  func (s *SessionInfo) FinishTimeRead() *String {
    if s.FinishTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.FinishTime = ((*String)(v))
      }
      }
      return s.FinishTime
    }
  func (s *SessionInfo) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *SessionInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }

  // XXXXX
func (t *ExclusionRuleType) CopyString(key string, value interface{}) *ExclusionRuleType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ExclusionRuleType) CopyClone(key string, value interface{}) *ExclusionRuleType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ExclusionRuleType) Unset(key string) *ExclusionRuleType {
        switch key {
  case "Value":
   n.Value = nil
  case "Type":
   n.Type = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ExclusionRuleType")
        }
        return n
}

func (n *ExclusionRuleType) SetProperty(key string, value interface{}) *ExclusionRuleType {
        if n == nil {
                n, _ = ExclusionRuleTypePointer(ExclusionRuleType{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ExclusionRuleType")
        }
        return n
}

  func (s *ExclusionRuleType) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *ExclusionRuleType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }

  // XXXXX
func (t *SystemRole_RoleScopeRefId) CopyString(key string, value interface{}) *SystemRole_RoleScopeRefId {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SystemRole_RoleScopeRefId) CopyClone(key string, value interface{}) *SystemRole_RoleScopeRefId {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SystemRole_RoleScopeRefId) Unset(key string) *SystemRole_RoleScopeRefId {
        switch key {
  case "Value":
   n.Value = nil
  case "SIF_RefObject":
   n.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_RoleScopeRefId")
        }
        return n
}

func (n *SystemRole_RoleScopeRefId) SetProperty(key string, value interface{}) *SystemRole_RoleScopeRefId {
        if n == nil {
                n, _ = SystemRole_RoleScopeRefIdPointer(SystemRole_RoleScopeRefId{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_RoleScopeRefId")
        }
        return n
}

  func (s *SystemRole_RoleScopeRefId) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *SystemRole_RoleScopeRefId) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }

  // XXXXX
func (t *NAPStudentResponseSet) CopyString(key string, value interface{}) *NAPStudentResponseSet {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPStudentResponseSet) CopyClone(key string, value interface{}) *NAPStudentResponseSet {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPStudentResponseSet) Unset(key string) *NAPStudentResponseSet {
        switch key {
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "ReportExclusionFlag":
   n.ReportExclusionFlag = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "CalibrationSampleFlag":
   n.CalibrationSampleFlag = nil
  case "TestletList":
   n.TestletList = nil
  case "PathTakenForDomain":
   n.PathTakenForDomain = nil
  case "RefId":
   n.RefId = nil
  case "ParallelTest":
   n.ParallelTest = nil
  case "EquatingSampleFlag":
   n.EquatingSampleFlag = nil
  case "DomainScore":
   n.DomainScore = nil
  case "PlatformStudentIdentifier":
   n.PlatformStudentIdentifier = nil
  case "NAPTestLocalId":
   n.NAPTestLocalId = nil
  case "NAPTestRefId":
   n.NAPTestRefId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPStudentResponseSet")
        }
        return n
}

func (n *NAPStudentResponseSet) SetProperty(key string, value interface{}) *NAPStudentResponseSet {
        if n == nil {
                n, _ = NAPStudentResponseSetPointer(NAPStudentResponseSet{})
        }
        switch key {
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "ReportExclusionFlag":
    
    if v, ok:= BoolPointer(value); ok {
      n.ReportExclusionFlag = ((*Bool)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "CalibrationSampleFlag":
    
    if v, ok:= StringPointer(value); ok {
      n.CalibrationSampleFlag = ((*String)(v))
      }
    case "TestletList":
    if v, ok:= NAPStudentResponseTestletListTypePointer(value); ok {
      n.TestletList = v
      }
    case "PathTakenForDomain":
    
    if v, ok:= StringPointer(value); ok {
      n.PathTakenForDomain = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ParallelTest":
    
    if v, ok:= StringPointer(value); ok {
      n.ParallelTest = ((*String)(v))
      }
    case "EquatingSampleFlag":
    
    if v, ok:= StringPointer(value); ok {
      n.EquatingSampleFlag = ((*String)(v))
      }
    case "DomainScore":
    if v, ok:= DomainScoreTypePointer(value); ok {
      n.DomainScore = v
      }
    case "PlatformStudentIdentifier":
    
    if v, ok:= StringPointer(value); ok {
      n.PlatformStudentIdentifier = ((*LocalIdType)(v))
      }
    case "NAPTestLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestLocalId = ((*LocalIdType)(v))
      }
    case "NAPTestRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.NAPTestRefId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPStudentResponseSet")
        }
        return n
}

  func (s *NAPStudentResponseSet) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *NAPStudentResponseSet) ReportExclusionFlagRead() *Bool {
    if s.ReportExclusionFlag == nil {
    if v, ok:= BoolPointer(false); ok {
      s.ReportExclusionFlag = ((*Bool)(v))
      }
      }
      return s.ReportExclusionFlag
    }
  func (s *NAPStudentResponseSet) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *NAPStudentResponseSet) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *NAPStudentResponseSet) CalibrationSampleFlagRead() *String {
    if s.CalibrationSampleFlag == nil {
    if v, ok:= StringPointer(""); ok {
      s.CalibrationSampleFlag = ((*String)(v))
      }
      }
      return s.CalibrationSampleFlag
    }
  func (s *NAPStudentResponseSet) TestletListRead() *NAPStudentResponseTestletListType {
    if s.TestletList == nil {
     if v, ok:= NAPStudentResponseTestletListTypePointer(NAPStudentResponseTestletListType{}); ok {
      s.TestletList = v
      }
      }
      return s.TestletList
    }
  func (s *NAPStudentResponseSet) PathTakenForDomainRead() *String {
    if s.PathTakenForDomain == nil {
    if v, ok:= StringPointer(""); ok {
      s.PathTakenForDomain = ((*String)(v))
      }
      }
      return s.PathTakenForDomain
    }
  func (s *NAPStudentResponseSet) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *NAPStudentResponseSet) ParallelTestRead() *String {
    if s.ParallelTest == nil {
    if v, ok:= StringPointer(""); ok {
      s.ParallelTest = ((*String)(v))
      }
      }
      return s.ParallelTest
    }
  func (s *NAPStudentResponseSet) EquatingSampleFlagRead() *String {
    if s.EquatingSampleFlag == nil {
    if v, ok:= StringPointer(""); ok {
      s.EquatingSampleFlag = ((*String)(v))
      }
      }
      return s.EquatingSampleFlag
    }
  func (s *NAPStudentResponseSet) DomainScoreRead() *DomainScoreType {
    if s.DomainScore == nil {
     if v, ok:= DomainScoreTypePointer(DomainScoreType{}); ok {
      s.DomainScore = v
      }
      }
      return s.DomainScore
    }
  func (s *NAPStudentResponseSet) PlatformStudentIdentifierRead() *LocalIdType {
    if s.PlatformStudentIdentifier == nil {
    if v, ok:= StringPointer(""); ok {
      s.PlatformStudentIdentifier = ((*LocalIdType)(v))
      }
      }
      return s.PlatformStudentIdentifier
    }
  func (s *NAPStudentResponseSet) NAPTestLocalIdRead() *LocalIdType {
    if s.NAPTestLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestLocalId = ((*LocalIdType)(v))
      }
      }
      return s.NAPTestLocalId
    }
  func (s *NAPStudentResponseSet) NAPTestRefIdRead() *String {
    if s.NAPTestRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.NAPTestRefId = ((*String)(v))
      }
      }
      return s.NAPTestRefId
    }
  func (s *NAPStudentResponseSet) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }

  // XXXXX
func (t *Identity_SIF_RefId) CopyString(key string, value interface{}) *Identity_SIF_RefId {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *Identity_SIF_RefId) CopyClone(key string, value interface{}) *Identity_SIF_RefId {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *Identity_SIF_RefId) Unset(key string) *Identity_SIF_RefId {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Identity_SIF_RefId")
        }
        return n
}

func (n *Identity_SIF_RefId) SetProperty(key string, value interface{}) *Identity_SIF_RefId {
        if n == nil {
                n, _ = Identity_SIF_RefIdPointer(Identity_SIF_RefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Identity_SIF_RefId")
        }
        return n
}

  func (s *Identity_SIF_RefId) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *Identity_SIF_RefId) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *TimeTableScheduleCellType) CopyString(key string, value interface{}) *TimeTableScheduleCellType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TimeTableScheduleCellType) CopyClone(key string, value interface{}) *TimeTableScheduleCellType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TimeTableScheduleCellType) Unset(key string) *TimeTableScheduleCellType {
        switch key {
  case "TimeTableScheduleCellLocalId":
   n.TimeTableScheduleCellLocalId = nil
  case "SchoolLocalId":
   n.SchoolLocalId = nil
  case "PeriodId":
   n.PeriodId = nil
  case "RoomNumber":
   n.RoomNumber = nil
  case "StaffPersonalRefId":
   n.StaffPersonalRefId = nil
  case "TimeTableSubjectRefId":
   n.TimeTableSubjectRefId = nil
  case "SubjectLocalId":
   n.SubjectLocalId = nil
  case "TeachingGroupGUID":
   n.TeachingGroupGUID = nil
  case "TeacherList":
   n.TeacherList = nil
  case "CellType":
   n.CellType = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "DayId":
   n.DayId = nil
  case "StaffLocalId":
   n.StaffLocalId = nil
  case "RoomInfoRefId":
   n.RoomInfoRefId = nil
  case "TimeTableLocalId":
   n.TimeTableLocalId = nil
  case "TeachingGroupLocalId":
   n.TeachingGroupLocalId = nil
  case "RoomList":
   n.RoomList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableScheduleCellType")
        }
        return n
}

func (n *TimeTableScheduleCellType) SetProperty(key string, value interface{}) *TimeTableScheduleCellType {
        if n == nil {
                n, _ = TimeTableScheduleCellTypePointer(TimeTableScheduleCellType{})
        }
        switch key {
    case "TimeTableScheduleCellLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableScheduleCellLocalId = ((*LocalIdType)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "PeriodId":
    
    if v, ok:= StringPointer(value); ok {
      n.PeriodId = ((*LocalIdType)(v))
      }
    case "RoomNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.RoomNumber = ((*HomeroomNumberType)(v))
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffPersonalRefId = ((*String)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableSubjectRefId = ((*String)(v))
      }
    case "SubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SubjectLocalId = ((*LocalIdType)(v))
      }
    case "TeachingGroupGUID":
    
    if v, ok:= StringPointer(value); ok {
      n.TeachingGroupGUID = ((*String)(v))
      }
    case "TeacherList":
    if v, ok:= ScheduledTeacherListTypePointer(value); ok {
      n.TeacherList = v
      }
    case "CellType":
    
    if v, ok:= StringPointer(value); ok {
      n.CellType = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.DayId = ((*LocalIdType)(v))
      }
    case "StaffLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffLocalId = ((*LocalIdType)(v))
      }
    case "RoomInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RoomInfoRefId = ((*String)(v))
      }
    case "TimeTableLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableLocalId = ((*LocalIdType)(v))
      }
    case "TeachingGroupLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.TeachingGroupLocalId = ((*LocalIdType)(v))
      }
    case "RoomList":
    if v, ok:= RoomListTypePointer(value); ok {
      n.RoomList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableScheduleCellType")
        }
        return n
}

  func (s *TimeTableScheduleCellType) TimeTableScheduleCellLocalIdRead() *LocalIdType {
    if s.TimeTableScheduleCellLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableScheduleCellLocalId = ((*LocalIdType)(v))
      }
      }
      return s.TimeTableScheduleCellLocalId
    }
  func (s *TimeTableScheduleCellType) SchoolLocalIdRead() *LocalIdType {
    if s.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolLocalId
    }
  func (s *TimeTableScheduleCellType) PeriodIdRead() *LocalIdType {
    if s.PeriodId == nil {
    if v, ok:= StringPointer(""); ok {
      s.PeriodId = ((*LocalIdType)(v))
      }
      }
      return s.PeriodId
    }
  func (s *TimeTableScheduleCellType) RoomNumberRead() *HomeroomNumberType {
    if s.RoomNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoomNumber = ((*HomeroomNumberType)(v))
      }
      }
      return s.RoomNumber
    }
  func (s *TimeTableScheduleCellType) StaffPersonalRefIdRead() *String {
    if s.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.StaffPersonalRefId
    }
  func (s *TimeTableScheduleCellType) TimeTableSubjectRefIdRead() *String {
    if s.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableSubjectRefId = ((*String)(v))
      }
      }
      return s.TimeTableSubjectRefId
    }
  func (s *TimeTableScheduleCellType) SubjectLocalIdRead() *LocalIdType {
    if s.SubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SubjectLocalId
    }
  func (s *TimeTableScheduleCellType) TeachingGroupGUIDRead() *String {
    if s.TeachingGroupGUID == nil {
    if v, ok:= StringPointer(""); ok {
      s.TeachingGroupGUID = ((*String)(v))
      }
      }
      return s.TeachingGroupGUID
    }
  func (s *TimeTableScheduleCellType) TeacherListRead() *ScheduledTeacherListType {
    if s.TeacherList == nil {
     if v, ok:= ScheduledTeacherListTypePointer(ScheduledTeacherListType{}); ok {
      s.TeacherList = v
      }
      }
      return s.TeacherList
    }
  func (s *TimeTableScheduleCellType) CellTypeRead() *String {
    if s.CellType == nil {
    if v, ok:= StringPointer(""); ok {
      s.CellType = ((*String)(v))
      }
      }
      return s.CellType
    }
  func (s *TimeTableScheduleCellType) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *TimeTableScheduleCellType) DayIdRead() *LocalIdType {
    if s.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.DayId = ((*LocalIdType)(v))
      }
      }
      return s.DayId
    }
  func (s *TimeTableScheduleCellType) StaffLocalIdRead() *LocalIdType {
    if s.StaffLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffLocalId = ((*LocalIdType)(v))
      }
      }
      return s.StaffLocalId
    }
  func (s *TimeTableScheduleCellType) RoomInfoRefIdRead() *String {
    if s.RoomInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoomInfoRefId = ((*String)(v))
      }
      }
      return s.RoomInfoRefId
    }
  func (s *TimeTableScheduleCellType) TimeTableLocalIdRead() *LocalIdType {
    if s.TimeTableLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableLocalId = ((*LocalIdType)(v))
      }
      }
      return s.TimeTableLocalId
    }
  func (s *TimeTableScheduleCellType) TeachingGroupLocalIdRead() *LocalIdType {
    if s.TeachingGroupLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TeachingGroupLocalId = ((*LocalIdType)(v))
      }
      }
      return s.TeachingGroupLocalId
    }
  func (s *TimeTableScheduleCellType) RoomListRead() *RoomListType {
    if s.RoomList == nil {
     if v, ok:= RoomListTypePointer(RoomListType{}); ok {
      s.RoomList = v
      }
      }
      return s.RoomList
    }

  // XXXXX
func (t *LifeCycleType_Modified) CopyString(key string, value interface{}) *LifeCycleType_Modified {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LifeCycleType_Modified) CopyClone(key string, value interface{}) *LifeCycleType_Modified {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LifeCycleType_Modified) Unset(key string) *LifeCycleType_Modified {
        switch key {
  case "By":
   n.By = nil
  case "DateTime":
   n.DateTime = nil
  case "Description":
   n.Description = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType_Modified")
        }
        return n
}

func (n *LifeCycleType_Modified) SetProperty(key string, value interface{}) *LifeCycleType_Modified {
        if n == nil {
                n, _ = LifeCycleType_ModifiedPointer(LifeCycleType_Modified{})
        }
        switch key {
    case "By":
    
    if v, ok:= StringPointer(value); ok {
      n.By = ((*String)(v))
      }
    case "DateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.DateTime = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType_Modified")
        }
        return n
}

  func (s *LifeCycleType_Modified) ByRead() *String {
    if s.By == nil {
    if v, ok:= StringPointer(""); ok {
      s.By = ((*String)(v))
      }
      }
      return s.By
    }
  func (s *LifeCycleType_Modified) DateTimeRead() *String {
    if s.DateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.DateTime = ((*String)(v))
      }
      }
      return s.DateTime
    }
  func (s *LifeCycleType_Modified) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }

  // XXXXX
func (t *TeachingGroup) CopyString(key string, value interface{}) *TeachingGroup {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TeachingGroup) CopyClone(key string, value interface{}) *TeachingGroup {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TeachingGroup) Unset(key string) *TeachingGroup {
        switch key {
  case "Semester":
   n.Semester = nil
  case "MaxClassSize":
   n.MaxClassSize = nil
  case "TeacherList":
   n.TeacherList = nil
  case "CurriculumLevel":
   n.CurriculumLevel = nil
  case "TimeTableSubjectRefId":
   n.TimeTableSubjectRefId = nil
  case "ShortName":
   n.ShortName = nil
  case "GroupType":
   n.GroupType = nil
  case "MinClassSize":
   n.MinClassSize = nil
  case "KeyLearningArea":
   n.KeyLearningArea = nil
  case "StudentList":
   n.StudentList = nil
  case "Set":
   n.Set = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolCourseInfoRefId":
   n.SchoolCourseInfoRefId = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "SchoolCourseLocalId":
   n.SchoolCourseLocalId = nil
  case "LongName":
   n.LongName = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "TimeTableSubjectLocalId":
   n.TimeTableSubjectLocalId = nil
  case "SchoolLocalId":
   n.SchoolLocalId = nil
  case "TeachingGroupPeriodList":
   n.TeachingGroupPeriodList = nil
  case "LocalId":
   n.LocalId = nil
  case "Block":
   n.Block = nil
  case "RefId":
   n.RefId = nil
  case "SchoolYear":
   n.SchoolYear = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroup")
        }
        return n
}

func (n *TeachingGroup) SetProperty(key string, value interface{}) *TeachingGroup {
        if n == nil {
                n, _ = TeachingGroupPointer(TeachingGroup{})
        }
        switch key {
    case "Semester":
    
    if v, ok:= IntPointer(value); ok {
      n.Semester = ((*Int)(v))
      }
    case "MaxClassSize":
    
    if v, ok:= IntPointer(value); ok {
      n.MaxClassSize = ((*Int)(v))
      }
    case "TeacherList":
    if v, ok:= TeacherListTypePointer(value); ok {
      n.TeacherList = v
      }
    case "CurriculumLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.CurriculumLevel = ((*String)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
    case "ShortName":
    
    if v, ok:= StringPointer(value); ok {
      n.ShortName = ((*String)(v))
      }
    case "GroupType":
    
    if v, ok:= StringPointer(value); ok {
      n.GroupType = ((*String)(v))
      }
    case "MinClassSize":
    
    if v, ok:= IntPointer(value); ok {
      n.MinClassSize = ((*Int)(v))
      }
    case "KeyLearningArea":
        if !CodesetContains(AUCodeSetsACStrandType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsACStrandType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.KeyLearningArea = ((*AUCodeSetsACStrandType)(v))
      }
    case "StudentList":
    if v, ok:= StudentListTypePointer(value); ok {
      n.StudentList = v
      }
    case "Set":
    
    if v, ok:= StringPointer(value); ok {
      n.Set = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolCourseInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolCourseInfoRefId = ((*RefIdType)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*RefIdType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "SchoolCourseLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolCourseLocalId = ((*LocalIdType)(v))
      }
    case "LongName":
    
    if v, ok:= StringPointer(value); ok {
      n.LongName = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "TimeTableSubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableSubjectLocalId = ((*LocalIdType)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "TeachingGroupPeriodList":
    if v, ok:= TeachingGroupPeriodListTypePointer(value); ok {
      n.TeachingGroupPeriodList = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "Block":
    
    if v, ok:= StringPointer(value); ok {
      n.Block = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroup")
        }
        return n
}

  func (s *TeachingGroup) SemesterRead() *Int {
    if s.Semester == nil {
    if v, ok:= IntPointer(0); ok {
      s.Semester = ((*Int)(v))
      }
      }
      return s.Semester
    }
  func (s *TeachingGroup) MaxClassSizeRead() *Int {
    if s.MaxClassSize == nil {
    if v, ok:= IntPointer(0); ok {
      s.MaxClassSize = ((*Int)(v))
      }
      }
      return s.MaxClassSize
    }
  func (s *TeachingGroup) TeacherListRead() *TeacherListType {
    if s.TeacherList == nil {
     if v, ok:= TeacherListTypePointer(TeacherListType{}); ok {
      s.TeacherList = v
      }
      }
      return s.TeacherList
    }
  func (s *TeachingGroup) CurriculumLevelRead() *String {
    if s.CurriculumLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.CurriculumLevel = ((*String)(v))
      }
      }
      return s.CurriculumLevel
    }
  func (s *TeachingGroup) TimeTableSubjectRefIdRead() *RefIdType {
    if s.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
      }
      return s.TimeTableSubjectRefId
    }
  func (s *TeachingGroup) ShortNameRead() *String {
    if s.ShortName == nil {
    if v, ok:= StringPointer(""); ok {
      s.ShortName = ((*String)(v))
      }
      }
      return s.ShortName
    }
  func (s *TeachingGroup) GroupTypeRead() *String {
    if s.GroupType == nil {
    if v, ok:= StringPointer(""); ok {
      s.GroupType = ((*String)(v))
      }
      }
      return s.GroupType
    }
  func (s *TeachingGroup) MinClassSizeRead() *Int {
    if s.MinClassSize == nil {
    if v, ok:= IntPointer(0); ok {
      s.MinClassSize = ((*Int)(v))
      }
      }
      return s.MinClassSize
    }
  func (s *TeachingGroup) KeyLearningAreaRead() *AUCodeSetsACStrandType {
    if s.KeyLearningArea == nil {
    if v, ok:= StringPointer(""); ok {
      s.KeyLearningArea = ((*AUCodeSetsACStrandType)(v))
      }
      }
      return s.KeyLearningArea
    }
  func (s *TeachingGroup) StudentListRead() *StudentListType {
    if s.StudentList == nil {
     if v, ok:= StudentListTypePointer(StudentListType{}); ok {
      s.StudentList = v
      }
      }
      return s.StudentList
    }
  func (s *TeachingGroup) SetRead() *String {
    if s.Set == nil {
    if v, ok:= StringPointer(""); ok {
      s.Set = ((*String)(v))
      }
      }
      return s.Set
    }
  func (s *TeachingGroup) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *TeachingGroup) SchoolCourseInfoRefIdRead() *RefIdType {
    if s.SchoolCourseInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolCourseInfoRefId = ((*RefIdType)(v))
      }
      }
      return s.SchoolCourseInfoRefId
    }
  func (s *TeachingGroup) SchoolInfoRefIdRead() *RefIdType {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*RefIdType)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *TeachingGroup) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *TeachingGroup) SchoolCourseLocalIdRead() *LocalIdType {
    if s.SchoolCourseLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolCourseLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolCourseLocalId
    }
  func (s *TeachingGroup) LongNameRead() *String {
    if s.LongName == nil {
    if v, ok:= StringPointer(""); ok {
      s.LongName = ((*String)(v))
      }
      }
      return s.LongName
    }
  func (s *TeachingGroup) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *TeachingGroup) TimeTableSubjectLocalIdRead() *LocalIdType {
    if s.TimeTableSubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableSubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.TimeTableSubjectLocalId
    }
  func (s *TeachingGroup) SchoolLocalIdRead() *LocalIdType {
    if s.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolLocalId
    }
  func (s *TeachingGroup) TeachingGroupPeriodListRead() *TeachingGroupPeriodListType {
    if s.TeachingGroupPeriodList == nil {
     if v, ok:= TeachingGroupPeriodListTypePointer(TeachingGroupPeriodListType{}); ok {
      s.TeachingGroupPeriodList = v
      }
      }
      return s.TeachingGroupPeriodList
    }
  func (s *TeachingGroup) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *TeachingGroup) BlockRead() *String {
    if s.Block == nil {
    if v, ok:= StringPointer(""); ok {
      s.Block = ((*String)(v))
      }
      }
      return s.Block
    }
  func (s *TeachingGroup) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *TeachingGroup) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }

  // XXXXX
func (t *AssignmentScoreType) CopyString(key string, value interface{}) *AssignmentScoreType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AssignmentScoreType) CopyClone(key string, value interface{}) *AssignmentScoreType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AssignmentScoreType) Unset(key string) *AssignmentScoreType {
        switch key {
  case "Weight":
   n.Weight = nil
  case "GradingAssignmentScoreRefId":
   n.GradingAssignmentScoreRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AssignmentScoreType")
        }
        return n
}

func (n *AssignmentScoreType) SetProperty(key string, value interface{}) *AssignmentScoreType {
        if n == nil {
                n, _ = AssignmentScoreTypePointer(AssignmentScoreType{})
        }
        switch key {
    case "Weight":
    
    if v, ok:= FloatPointer(value); ok {
      n.Weight = ((*Float)(v))
      }
    case "GradingAssignmentScoreRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.GradingAssignmentScoreRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AssignmentScoreType")
        }
        return n
}

  func (s *AssignmentScoreType) WeightRead() *Float {
    if s.Weight == nil {
    if v, ok:= FloatPointer(0); ok {
      s.Weight = ((*Float)(v))
      }
      }
      return s.Weight
    }
  func (s *AssignmentScoreType) GradingAssignmentScoreRefIdRead() *String {
    if s.GradingAssignmentScoreRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.GradingAssignmentScoreRefId = ((*String)(v))
      }
      }
      return s.GradingAssignmentScoreRefId
    }

  // XXXXX
func (t *StatsCohortType) CopyString(key string, value interface{}) *StatsCohortType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StatsCohortType) CopyClone(key string, value interface{}) *StatsCohortType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StatsCohortType) Unset(key string) *StatsCohortType {
        switch key {
  case "AttendanceGTE90Percent":
   n.AttendanceGTE90Percent = nil
  case "StatsCohortId":
   n.StatsCohortId = nil
  case "CohortGender":
   n.CohortGender = nil
  case "AttendanceLess90Percent":
   n.AttendanceLess90Percent = nil
  case "DaysInReferencePeriod":
   n.DaysInReferencePeriod = nil
  case "StatsIndigenousStudentType":
   n.StatsIndigenousStudentType = nil
  case "AttendanceDays":
   n.AttendanceDays = nil
  case "PossibleSchoolDays":
   n.PossibleSchoolDays = nil
  case "PossibleSchoolDaysGT90PercentAttendance":
   n.PossibleSchoolDaysGT90PercentAttendance = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StatsCohortType")
        }
        return n
}

func (n *StatsCohortType) SetProperty(key string, value interface{}) *StatsCohortType {
        if n == nil {
                n, _ = StatsCohortTypePointer(StatsCohortType{})
        }
        switch key {
    case "AttendanceGTE90Percent":
    
    if v, ok:= IntPointer(value); ok {
      n.AttendanceGTE90Percent = ((*Int)(v))
      }
    case "StatsCohortId":
    
    if v, ok:= StringPointer(value); ok {
      n.StatsCohortId = ((*LocalIdType)(v))
      }
    case "CohortGender":
    
    if v, ok:= StringPointer(value); ok {
      n.CohortGender = ((*String)(v))
      }
    case "AttendanceLess90Percent":
    
    if v, ok:= IntPointer(value); ok {
      n.AttendanceLess90Percent = ((*Int)(v))
      }
    case "DaysInReferencePeriod":
    
    if v, ok:= IntPointer(value); ok {
      n.DaysInReferencePeriod = ((*Int)(v))
      }
    case "StatsIndigenousStudentType":
    
    if v, ok:= StringPointer(value); ok {
      n.StatsIndigenousStudentType = ((*String)(v))
      }
    case "AttendanceDays":
    
    if v, ok:= FloatPointer(value); ok {
      n.AttendanceDays = ((*Float)(v))
      }
    case "PossibleSchoolDays":
    
    if v, ok:= IntPointer(value); ok {
      n.PossibleSchoolDays = ((*Int)(v))
      }
    case "PossibleSchoolDaysGT90PercentAttendance":
    
    if v, ok:= IntPointer(value); ok {
      n.PossibleSchoolDaysGT90PercentAttendance = ((*Int)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StatsCohortType")
        }
        return n
}

  func (s *StatsCohortType) AttendanceGTE90PercentRead() *Int {
    if s.AttendanceGTE90Percent == nil {
    if v, ok:= IntPointer(0); ok {
      s.AttendanceGTE90Percent = ((*Int)(v))
      }
      }
      return s.AttendanceGTE90Percent
    }
  func (s *StatsCohortType) StatsCohortIdRead() *LocalIdType {
    if s.StatsCohortId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StatsCohortId = ((*LocalIdType)(v))
      }
      }
      return s.StatsCohortId
    }
  func (s *StatsCohortType) CohortGenderRead() *String {
    if s.CohortGender == nil {
    if v, ok:= StringPointer(""); ok {
      s.CohortGender = ((*String)(v))
      }
      }
      return s.CohortGender
    }
  func (s *StatsCohortType) AttendanceLess90PercentRead() *Int {
    if s.AttendanceLess90Percent == nil {
    if v, ok:= IntPointer(0); ok {
      s.AttendanceLess90Percent = ((*Int)(v))
      }
      }
      return s.AttendanceLess90Percent
    }
  func (s *StatsCohortType) DaysInReferencePeriodRead() *Int {
    if s.DaysInReferencePeriod == nil {
    if v, ok:= IntPointer(0); ok {
      s.DaysInReferencePeriod = ((*Int)(v))
      }
      }
      return s.DaysInReferencePeriod
    }
  func (s *StatsCohortType) StatsIndigenousStudentTypeRead() *String {
    if s.StatsIndigenousStudentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.StatsIndigenousStudentType = ((*String)(v))
      }
      }
      return s.StatsIndigenousStudentType
    }
  func (s *StatsCohortType) AttendanceDaysRead() *Float {
    if s.AttendanceDays == nil {
    if v, ok:= FloatPointer(0); ok {
      s.AttendanceDays = ((*Float)(v))
      }
      }
      return s.AttendanceDays
    }
  func (s *StatsCohortType) PossibleSchoolDaysRead() *Int {
    if s.PossibleSchoolDays == nil {
    if v, ok:= IntPointer(0); ok {
      s.PossibleSchoolDays = ((*Int)(v))
      }
      }
      return s.PossibleSchoolDays
    }
  func (s *StatsCohortType) PossibleSchoolDaysGT90PercentAttendanceRead() *Int {
    if s.PossibleSchoolDaysGT90PercentAttendance == nil {
    if v, ok:= IntPointer(0); ok {
      s.PossibleSchoolDaysGT90PercentAttendance = ((*Int)(v))
      }
      }
      return s.PossibleSchoolDaysGT90PercentAttendance
    }

  // XXXXX
func (t *TechnicalRequirementsType) CopyString(key string, value interface{}) *TechnicalRequirementsType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TechnicalRequirementsType) CopyClone(key string, value interface{}) *TechnicalRequirementsType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TechnicalRequirementsType) Unset(key string) *TechnicalRequirementsType {
        switch key {
  case "TechnicalRequirement":
   n.TechnicalRequirement = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TechnicalRequirementsType")
        }
        return n
}

func (n *TechnicalRequirementsType) SetProperty(key string, value interface{}) *TechnicalRequirementsType {
        if n == nil {
                n, _ = TechnicalRequirementsTypePointer(TechnicalRequirementsType{})
        }
        switch key {
    case "TechnicalRequirement":
    
    if v, ok:= StringPointer(value); ok {
      n.TechnicalRequirement = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TechnicalRequirementsType")
        }
        return n
}

  func (s *TechnicalRequirementsType) TechnicalRequirementRead() *String {
    if s.TechnicalRequirement == nil {
    if v, ok:= StringPointer(""); ok {
      s.TechnicalRequirement = ((*String)(v))
      }
      }
      return s.TechnicalRequirement
    }

  // XXXXX
func (t *LEAInfo) CopyString(key string, value interface{}) *LEAInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LEAInfo) CopyClone(key string, value interface{}) *LEAInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LEAInfo) Unset(key string) *LEAInfo {
        switch key {
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "EducationAgencyType":
   n.EducationAgencyType = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalId":
   n.LocalId = nil
  case "LEAURL":
   n.LEAURL = nil
  case "AddressList":
   n.AddressList = nil
  case "RefId":
   n.RefId = nil
  case "StateProvinceId":
   n.StateProvinceId = nil
  case "JurisdictionLowerHouse":
   n.JurisdictionLowerHouse = nil
  case "SLA":
   n.SLA = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "OperationalStatus":
   n.OperationalStatus = nil
  case "LEAContactList":
   n.LEAContactList = nil
  case "LEAName":
   n.LEAName = nil
  case "CommonwealthId":
   n.CommonwealthId = nil
  case "PhoneNumberList":
   n.PhoneNumberList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LEAInfo")
        }
        return n
}

func (n *LEAInfo) SetProperty(key string, value interface{}) *LEAInfo {
        if n == nil {
                n, _ = LEAInfoPointer(LEAInfo{})
        }
        switch key {
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "EducationAgencyType":
    if v, ok:= AgencyTypePointer(value); ok {
      n.EducationAgencyType = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "LEAURL":
    
    if v, ok:= StringPointer(value); ok {
      n.LEAURL = ((*String)(v))
      }
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.AddressList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "JurisdictionLowerHouse":
    
    if v, ok:= StringPointer(value); ok {
      n.JurisdictionLowerHouse = ((*String)(v))
      }
    case "SLA":
        if !CodesetContains(AUCodeSetsAustralianStandardGeographicalClassificationASGCType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardGeographicalClassificationASGCType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.SLA = ((*AUCodeSetsAustralianStandardGeographicalClassificationASGCType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "OperationalStatus":
        if !CodesetContains(AUCodeSetsOperationalStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsOperationalStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.OperationalStatus = ((*OperationalStatusType)(v))
      }
    case "LEAContactList":
    if v, ok:= LEAContactListTypePointer(value); ok {
      n.LEAContactList = v
      }
    case "LEAName":
    
    if v, ok:= StringPointer(value); ok {
      n.LEAName = ((*String)(v))
      }
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.CommonwealthId = ((*String)(v))
      }
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.PhoneNumberList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LEAInfo")
        }
        return n
}

  func (s *LEAInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *LEAInfo) EducationAgencyTypeRead() *AgencyType {
    if s.EducationAgencyType == nil {
     if v, ok:= AgencyTypePointer(AgencyType{}); ok {
      s.EducationAgencyType = v
      }
      }
      return s.EducationAgencyType
    }
  func (s *LEAInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *LEAInfo) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *LEAInfo) LEAURLRead() *String {
    if s.LEAURL == nil {
    if v, ok:= StringPointer(""); ok {
      s.LEAURL = ((*String)(v))
      }
      }
      return s.LEAURL
    }
  func (s *LEAInfo) AddressListRead() *AddressListType {
    if s.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.AddressList = v
      }
      }
      return s.AddressList
    }
  func (s *LEAInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *LEAInfo) StateProvinceIdRead() *StateProvinceIdType {
    if s.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.StateProvinceId
    }
  func (s *LEAInfo) JurisdictionLowerHouseRead() *String {
    if s.JurisdictionLowerHouse == nil {
    if v, ok:= StringPointer(""); ok {
      s.JurisdictionLowerHouse = ((*String)(v))
      }
      }
      return s.JurisdictionLowerHouse
    }
  func (s *LEAInfo) SLARead() *AUCodeSetsAustralianStandardGeographicalClassificationASGCType {
    if s.SLA == nil {
    if v, ok:= StringPointer(""); ok {
      s.SLA = ((*AUCodeSetsAustralianStandardGeographicalClassificationASGCType)(v))
      }
      }
      return s.SLA
    }
  func (s *LEAInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *LEAInfo) OperationalStatusRead() *OperationalStatusType {
    if s.OperationalStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.OperationalStatus = ((*OperationalStatusType)(v))
      }
      }
      return s.OperationalStatus
    }
  func (s *LEAInfo) LEAContactListRead() *LEAContactListType {
    if s.LEAContactList == nil {
     if v, ok:= LEAContactListTypePointer(LEAContactListType{}); ok {
      s.LEAContactList = v
      }
      }
      return s.LEAContactList
    }
  func (s *LEAInfo) LEANameRead() *String {
    if s.LEAName == nil {
    if v, ok:= StringPointer(""); ok {
      s.LEAName = ((*String)(v))
      }
      }
      return s.LEAName
    }
  func (s *LEAInfo) CommonwealthIdRead() *String {
    if s.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.CommonwealthId = ((*String)(v))
      }
      }
      return s.CommonwealthId
    }
  func (s *LEAInfo) PhoneNumberListRead() *PhoneNumberListType {
    if s.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.PhoneNumberList = v
      }
      }
      return s.PhoneNumberList
    }

  // XXXXX
func (t *AGReportingObjectResponseType) CopyString(key string, value interface{}) *AGReportingObjectResponseType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AGReportingObjectResponseType) CopyClone(key string, value interface{}) *AGReportingObjectResponseType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AGReportingObjectResponseType) Unset(key string) *AGReportingObjectResponseType {
        switch key {
  case "SubmittedRefId":
   n.SubmittedRefId = nil
  case "EntityName":
   n.EntityName = nil
  case "SIFRefId":
   n.SIFRefId = nil
  case "HTTPStatusCode":
   n.HTTPStatusCode = nil
  case "AGSubmissionStatusCode":
   n.AGSubmissionStatusCode = nil
  case "ErrorText":
   n.ErrorText = nil
  case "CommonwealthId":
   n.CommonwealthId = nil
  case "AGRuleList":
   n.AGRuleList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGReportingObjectResponseType")
        }
        return n
}

func (n *AGReportingObjectResponseType) SetProperty(key string, value interface{}) *AGReportingObjectResponseType {
        if n == nil {
                n, _ = AGReportingObjectResponseTypePointer(AGReportingObjectResponseType{})
        }
        switch key {
    case "SubmittedRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SubmittedRefId = ((*String)(v))
      }
    case "EntityName":
    
    if v, ok:= StringPointer(value); ok {
      n.EntityName = ((*String)(v))
      }
    case "SIFRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SIFRefId = ((*String)(v))
      }
    case "HTTPStatusCode":
    
    if v, ok:= StringPointer(value); ok {
      n.HTTPStatusCode = ((*String)(v))
      }
    case "AGSubmissionStatusCode":
        if !CodesetContains(AUCodeSetsAGSubmissionStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAGSubmissionStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AGSubmissionStatusCode = ((*AUCodeSetsAGSubmissionStatusType)(v))
      }
    case "ErrorText":
    
    if v, ok:= StringPointer(value); ok {
      n.ErrorText = ((*String)(v))
      }
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.CommonwealthId = ((*String)(v))
      }
    case "AGRuleList":
    if v, ok:= AGRuleListTypePointer(value); ok {
      n.AGRuleList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGReportingObjectResponseType")
        }
        return n
}

  func (s *AGReportingObjectResponseType) SubmittedRefIdRead() *String {
    if s.SubmittedRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubmittedRefId = ((*String)(v))
      }
      }
      return s.SubmittedRefId
    }
  func (s *AGReportingObjectResponseType) EntityNameRead() *String {
    if s.EntityName == nil {
    if v, ok:= StringPointer(""); ok {
      s.EntityName = ((*String)(v))
      }
      }
      return s.EntityName
    }
  func (s *AGReportingObjectResponseType) SIFRefIdRead() *String {
    if s.SIFRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIFRefId = ((*String)(v))
      }
      }
      return s.SIFRefId
    }
  func (s *AGReportingObjectResponseType) HTTPStatusCodeRead() *String {
    if s.HTTPStatusCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.HTTPStatusCode = ((*String)(v))
      }
      }
      return s.HTTPStatusCode
    }
  func (s *AGReportingObjectResponseType) AGSubmissionStatusCodeRead() *AUCodeSetsAGSubmissionStatusType {
    if s.AGSubmissionStatusCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.AGSubmissionStatusCode = ((*AUCodeSetsAGSubmissionStatusType)(v))
      }
      }
      return s.AGSubmissionStatusCode
    }
  func (s *AGReportingObjectResponseType) ErrorTextRead() *String {
    if s.ErrorText == nil {
    if v, ok:= StringPointer(""); ok {
      s.ErrorText = ((*String)(v))
      }
      }
      return s.ErrorText
    }
  func (s *AGReportingObjectResponseType) CommonwealthIdRead() *String {
    if s.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.CommonwealthId = ((*String)(v))
      }
      }
      return s.CommonwealthId
    }
  func (s *AGReportingObjectResponseType) AGRuleListRead() *AGRuleListType {
    if s.AGRuleList == nil {
     if v, ok:= AGRuleListTypePointer(AGRuleListType{}); ok {
      s.AGRuleList = v
      }
      }
      return s.AGRuleList
    }

  // XXXXX
func (t *ReferralSourceType) CopyString(key string, value interface{}) *ReferralSourceType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ReferralSourceType) CopyClone(key string, value interface{}) *ReferralSourceType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ReferralSourceType) Unset(key string) *ReferralSourceType {
        switch key {
  case "Code":
   n.Code = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ReferralSourceType")
        }
        return n
}

func (n *ReferralSourceType) SetProperty(key string, value interface{}) *ReferralSourceType {
        if n == nil {
                n, _ = ReferralSourceTypePointer(ReferralSourceType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSets0792IdentificationProcedureType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSets0792IdentificationProcedureType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSets0792IdentificationProcedureType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ReferralSourceType")
        }
        return n
}

  func (s *ReferralSourceType) CodeRead() *AUCodeSets0792IdentificationProcedureType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSets0792IdentificationProcedureType)(v))
      }
      }
      return s.Code
    }
  func (s *ReferralSourceType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }

  // XXXXX
func (t *SchoolInfo) CopyString(key string, value interface{}) *SchoolInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SchoolInfo) CopyClone(key string, value interface{}) *SchoolInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SchoolInfo) Unset(key string) *SchoolInfo {
        switch key {
  case "YearLevelEnrollmentList":
   n.YearLevelEnrollmentList = nil
  case "SchoolCoEdStatus":
   n.SchoolCoEdStatus = nil
  case "System":
   n.System = nil
  case "LocalId":
   n.LocalId = nil
  case "TotalEnrollments":
   n.TotalEnrollments = nil
  case "RefId":
   n.RefId = nil
  case "ReligiousAffiliation":
   n.ReligiousAffiliation = nil
  case "LocalGovernmentArea":
   n.LocalGovernmentArea = nil
  case "OtherLEA":
   n.OtherLEA = nil
  case "SchoolTimeZone":
   n.SchoolTimeZone = nil
  case "YearLevels":
   n.YearLevels = nil
  case "SessionType":
   n.SessionType = nil
  case "LEAInfoRefId":
   n.LEAInfoRefId = nil
  case "Entity_Close":
   n.Entity_Close = nil
  case "SchoolName":
   n.SchoolName = nil
  case "SchoolEmailList":
   n.SchoolEmailList = nil
  case "OtherIdList":
   n.OtherIdList = nil
  case "SchoolGeographicLocation":
   n.SchoolGeographicLocation = nil
  case "SchoolDistrict":
   n.SchoolDistrict = nil
  case "PhoneNumberList":
   n.PhoneNumberList = nil
  case "CommonwealthId":
   n.CommonwealthId = nil
  case "SchoolFocusList":
   n.SchoolFocusList = nil
  case "Campus":
   n.Campus = nil
  case "SchoolType":
   n.SchoolType = nil
  case "SchoolSector":
   n.SchoolSector = nil
  case "SchoolURL":
   n.SchoolURL = nil
  case "ACARAId":
   n.ACARAId = nil
  case "IndependentSchool":
   n.IndependentSchool = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "SchoolContactList":
   n.SchoolContactList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "PrincipalInfo":
   n.PrincipalInfo = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolDistrictLocalId":
   n.SchoolDistrictLocalId = nil
  case "Entity_Open":
   n.Entity_Open = nil
  case "FederalElectorate":
   n.FederalElectorate = nil
  case "ARIA":
   n.ARIA = nil
  case "AddressList":
   n.AddressList = nil
  case "JurisdictionLowerHouse":
   n.JurisdictionLowerHouse = nil
  case "StateProvinceId":
   n.StateProvinceId = nil
  case "SchoolGroupList":
   n.SchoolGroupList = nil
  case "SLA":
   n.SLA = nil
  case "BoardingSchoolStatus":
   n.BoardingSchoolStatus = nil
  case "NonGovSystemicStatus":
   n.NonGovSystemicStatus = nil
  case "OperationalStatus":
   n.OperationalStatus = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolInfo")
        }
        return n
}

func (n *SchoolInfo) SetProperty(key string, value interface{}) *SchoolInfo {
        if n == nil {
                n, _ = SchoolInfoPointer(SchoolInfo{})
        }
        switch key {
    case "YearLevelEnrollmentList":
    if v, ok:= YearLevelEnrollmentListTypePointer(value); ok {
      n.YearLevelEnrollmentList = v
      }
    case "SchoolCoEdStatus":
        if !CodesetContains(AUCodeSetsSchoolCoEdStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolCoEdStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.SchoolCoEdStatus = ((*AUCodeSetsSchoolCoEdStatusType)(v))
      }
    case "System":
        if !CodesetContains(AUCodeSetsSchoolSystemType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolSystemType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.System = ((*AUCodeSetsSchoolSystemType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "TotalEnrollments":
    if v, ok:= TotalEnrollmentsTypePointer(value); ok {
      n.TotalEnrollments = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ReligiousAffiliation":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ReligiousAffiliation = ((*AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType)(v))
      }
    case "LocalGovernmentArea":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalGovernmentArea = ((*String)(v))
      }
    case "OtherLEA":
    if v, ok:= SchoolInfo_OtherLEAPointer(value); ok {
      n.OtherLEA = v
      }
    case "SchoolTimeZone":
        if !CodesetContains(AUCodeSetsAustralianTimeZoneType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianTimeZoneType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.SchoolTimeZone = ((*AUCodeSetsAustralianTimeZoneType)(v))
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.YearLevels = v
      }
    case "SessionType":
        if !CodesetContains(AUCodeSetsSessionTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSessionTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.SessionType = ((*AUCodeSetsSessionTypeType)(v))
      }
    case "LEAInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.LEAInfoRefId = ((*RefIdType)(v))
      }
    case "Entity_Close":
    
    if v, ok:= StringPointer(value); ok {
      n.Entity_Close = ((*String)(v))
      }
    case "SchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolName = ((*String)(v))
      }
    case "SchoolEmailList":
    if v, ok:= EmailListTypePointer(value); ok {
      n.SchoolEmailList = v
      }
    case "OtherIdList":
    if v, ok:= OtherIdListTypePointer(value); ok {
      n.OtherIdList = v
      }
    case "SchoolGeographicLocation":
        if !CodesetContains(AUCodeSetsSchoolLocationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolLocationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.SchoolGeographicLocation = ((*AUCodeSetsSchoolLocationType)(v))
      }
    case "SchoolDistrict":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolDistrict = ((*String)(v))
      }
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.PhoneNumberList = v
      }
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.CommonwealthId = ((*String)(v))
      }
    case "SchoolFocusList":
    if v, ok:= SchoolFocusListTypePointer(value); ok {
      n.SchoolFocusList = v
      }
    case "Campus":
    if v, ok:= CampusContainerTypePointer(value); ok {
      n.Campus = v
      }
    case "SchoolType":
        if !CodesetContains(AUCodeSetsSchoolLevelType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolLevelType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.SchoolType = ((*AUCodeSetsSchoolLevelType)(v))
      }
    case "SchoolSector":
        if !CodesetContains(AUCodeSetsSchoolSectorCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolSectorCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.SchoolSector = ((*AUCodeSetsSchoolSectorCodeType)(v))
      }
    case "SchoolURL":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolURL = ((*SchoolURLType)(v))
      }
    case "ACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.ACARAId = ((*String)(v))
      }
    case "IndependentSchool":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.IndependentSchool = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "SchoolContactList":
    if v, ok:= SchoolContactListTypePointer(value); ok {
      n.SchoolContactList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "PrincipalInfo":
    if v, ok:= PrincipalInfoTypePointer(value); ok {
      n.PrincipalInfo = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolDistrictLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolDistrictLocalId = ((*LocalIdType)(v))
      }
    case "Entity_Open":
    
    if v, ok:= StringPointer(value); ok {
      n.Entity_Open = ((*String)(v))
      }
    case "FederalElectorate":
        if !CodesetContains(AUCodeSetsFederalElectorateType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsFederalElectorateType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.FederalElectorate = ((*AUCodeSetsFederalElectorateType)(v))
      }
    case "ARIA":
    
    if v, ok:= FloatPointer(value); ok {
      n.ARIA = ((*Float)(v))
      }
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.AddressList = v
      }
    case "JurisdictionLowerHouse":
    
    if v, ok:= StringPointer(value); ok {
      n.JurisdictionLowerHouse = ((*String)(v))
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "SchoolGroupList":
    if v, ok:= SchoolGroupListTypePointer(value); ok {
      n.SchoolGroupList = v
      }
    case "SLA":
        if !CodesetContains(AUCodeSetsAustralianStandardGeographicalClassificationASGCType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardGeographicalClassificationASGCType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.SLA = ((*AUCodeSetsAustralianStandardGeographicalClassificationASGCType)(v))
      }
    case "BoardingSchoolStatus":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.BoardingSchoolStatus = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "NonGovSystemicStatus":
        if !CodesetContains(AUCodeSetsSystemicStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSystemicStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.NonGovSystemicStatus = ((*AUCodeSetsSystemicStatusType)(v))
      }
    case "OperationalStatus":
        if !CodesetContains(AUCodeSetsOperationalStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsOperationalStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.OperationalStatus = ((*OperationalStatusType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolInfo")
        }
        return n
}

  func (s *SchoolInfo) YearLevelEnrollmentListRead() *YearLevelEnrollmentListType {
    if s.YearLevelEnrollmentList == nil {
     if v, ok:= YearLevelEnrollmentListTypePointer(YearLevelEnrollmentListType{}); ok {
      s.YearLevelEnrollmentList = v
      }
      }
      return s.YearLevelEnrollmentList
    }
  func (s *SchoolInfo) SchoolCoEdStatusRead() *AUCodeSetsSchoolCoEdStatusType {
    if s.SchoolCoEdStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolCoEdStatus = ((*AUCodeSetsSchoolCoEdStatusType)(v))
      }
      }
      return s.SchoolCoEdStatus
    }
  func (s *SchoolInfo) SystemRead() *AUCodeSetsSchoolSystemType {
    if s.System == nil {
    if v, ok:= StringPointer(""); ok {
      s.System = ((*AUCodeSetsSchoolSystemType)(v))
      }
      }
      return s.System
    }
  func (s *SchoolInfo) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *SchoolInfo) TotalEnrollmentsRead() *TotalEnrollmentsType {
    if s.TotalEnrollments == nil {
     if v, ok:= TotalEnrollmentsTypePointer(TotalEnrollmentsType{}); ok {
      s.TotalEnrollments = v
      }
      }
      return s.TotalEnrollments
    }
  func (s *SchoolInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *SchoolInfo) ReligiousAffiliationRead() *AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType {
    if s.ReligiousAffiliation == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReligiousAffiliation = ((*AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType)(v))
      }
      }
      return s.ReligiousAffiliation
    }
  func (s *SchoolInfo) LocalGovernmentAreaRead() *String {
    if s.LocalGovernmentArea == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalGovernmentArea = ((*String)(v))
      }
      }
      return s.LocalGovernmentArea
    }
  func (s *SchoolInfo) OtherLEARead() *SchoolInfo_OtherLEA {
    if s.OtherLEA == nil {
     if v, ok:= SchoolInfo_OtherLEAPointer(SchoolInfo_OtherLEA{}); ok {
      s.OtherLEA = v
      }
      }
      return s.OtherLEA
    }
  func (s *SchoolInfo) SchoolTimeZoneRead() *AUCodeSetsAustralianTimeZoneType {
    if s.SchoolTimeZone == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolTimeZone = ((*AUCodeSetsAustralianTimeZoneType)(v))
      }
      }
      return s.SchoolTimeZone
    }
  func (s *SchoolInfo) YearLevelsRead() *YearLevelsType {
    if s.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.YearLevels = v
      }
      }
      return s.YearLevels
    }
  func (s *SchoolInfo) SessionTypeRead() *AUCodeSetsSessionTypeType {
    if s.SessionType == nil {
    if v, ok:= StringPointer(""); ok {
      s.SessionType = ((*AUCodeSetsSessionTypeType)(v))
      }
      }
      return s.SessionType
    }
  func (s *SchoolInfo) LEAInfoRefIdRead() *RefIdType {
    if s.LEAInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LEAInfoRefId = ((*RefIdType)(v))
      }
      }
      return s.LEAInfoRefId
    }
  func (s *SchoolInfo) Entity_CloseRead() *String {
    if s.Entity_Close == nil {
    if v, ok:= StringPointer(""); ok {
      s.Entity_Close = ((*String)(v))
      }
      }
      return s.Entity_Close
    }
  func (s *SchoolInfo) SchoolNameRead() *String {
    if s.SchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolName = ((*String)(v))
      }
      }
      return s.SchoolName
    }
  func (s *SchoolInfo) SchoolEmailListRead() *EmailListType {
    if s.SchoolEmailList == nil {
     if v, ok:= EmailListTypePointer(EmailListType{}); ok {
      s.SchoolEmailList = v
      }
      }
      return s.SchoolEmailList
    }
  func (s *SchoolInfo) OtherIdListRead() *OtherIdListType {
    if s.OtherIdList == nil {
     if v, ok:= OtherIdListTypePointer(OtherIdListType{}); ok {
      s.OtherIdList = v
      }
      }
      return s.OtherIdList
    }
  func (s *SchoolInfo) SchoolGeographicLocationRead() *AUCodeSetsSchoolLocationType {
    if s.SchoolGeographicLocation == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolGeographicLocation = ((*AUCodeSetsSchoolLocationType)(v))
      }
      }
      return s.SchoolGeographicLocation
    }
  func (s *SchoolInfo) SchoolDistrictRead() *String {
    if s.SchoolDistrict == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolDistrict = ((*String)(v))
      }
      }
      return s.SchoolDistrict
    }
  func (s *SchoolInfo) PhoneNumberListRead() *PhoneNumberListType {
    if s.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.PhoneNumberList = v
      }
      }
      return s.PhoneNumberList
    }
  func (s *SchoolInfo) CommonwealthIdRead() *String {
    if s.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.CommonwealthId = ((*String)(v))
      }
      }
      return s.CommonwealthId
    }
  func (s *SchoolInfo) SchoolFocusListRead() *SchoolFocusListType {
    if s.SchoolFocusList == nil {
     if v, ok:= SchoolFocusListTypePointer(SchoolFocusListType{}); ok {
      s.SchoolFocusList = v
      }
      }
      return s.SchoolFocusList
    }
  func (s *SchoolInfo) CampusRead() *CampusContainerType {
    if s.Campus == nil {
     if v, ok:= CampusContainerTypePointer(CampusContainerType{}); ok {
      s.Campus = v
      }
      }
      return s.Campus
    }
  func (s *SchoolInfo) SchoolTypeRead() *AUCodeSetsSchoolLevelType {
    if s.SchoolType == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolType = ((*AUCodeSetsSchoolLevelType)(v))
      }
      }
      return s.SchoolType
    }
  func (s *SchoolInfo) SchoolSectorRead() *AUCodeSetsSchoolSectorCodeType {
    if s.SchoolSector == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolSector = ((*AUCodeSetsSchoolSectorCodeType)(v))
      }
      }
      return s.SchoolSector
    }
  func (s *SchoolInfo) SchoolURLRead() *SchoolURLType {
    if s.SchoolURL == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolURL = ((*SchoolURLType)(v))
      }
      }
      return s.SchoolURL
    }
  func (s *SchoolInfo) ACARAIdRead() *String {
    if s.ACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ACARAId = ((*String)(v))
      }
      }
      return s.ACARAId
    }
  func (s *SchoolInfo) IndependentSchoolRead() *AUCodeSetsYesOrNoCategoryType {
    if s.IndependentSchool == nil {
    if v, ok:= StringPointer(""); ok {
      s.IndependentSchool = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.IndependentSchool
    }
  func (s *SchoolInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *SchoolInfo) SchoolContactListRead() *SchoolContactListType {
    if s.SchoolContactList == nil {
     if v, ok:= SchoolContactListTypePointer(SchoolContactListType{}); ok {
      s.SchoolContactList = v
      }
      }
      return s.SchoolContactList
    }
  func (s *SchoolInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *SchoolInfo) PrincipalInfoRead() *PrincipalInfoType {
    if s.PrincipalInfo == nil {
     if v, ok:= PrincipalInfoTypePointer(PrincipalInfoType{}); ok {
      s.PrincipalInfo = v
      }
      }
      return s.PrincipalInfo
    }
  func (s *SchoolInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *SchoolInfo) SchoolDistrictLocalIdRead() *LocalIdType {
    if s.SchoolDistrictLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolDistrictLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolDistrictLocalId
    }
  func (s *SchoolInfo) Entity_OpenRead() *String {
    if s.Entity_Open == nil {
    if v, ok:= StringPointer(""); ok {
      s.Entity_Open = ((*String)(v))
      }
      }
      return s.Entity_Open
    }
  func (s *SchoolInfo) FederalElectorateRead() *AUCodeSetsFederalElectorateType {
    if s.FederalElectorate == nil {
    if v, ok:= StringPointer(""); ok {
      s.FederalElectorate = ((*AUCodeSetsFederalElectorateType)(v))
      }
      }
      return s.FederalElectorate
    }
  func (s *SchoolInfo) ARIARead() *Float {
    if s.ARIA == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ARIA = ((*Float)(v))
      }
      }
      return s.ARIA
    }
  func (s *SchoolInfo) AddressListRead() *AddressListType {
    if s.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.AddressList = v
      }
      }
      return s.AddressList
    }
  func (s *SchoolInfo) JurisdictionLowerHouseRead() *String {
    if s.JurisdictionLowerHouse == nil {
    if v, ok:= StringPointer(""); ok {
      s.JurisdictionLowerHouse = ((*String)(v))
      }
      }
      return s.JurisdictionLowerHouse
    }
  func (s *SchoolInfo) StateProvinceIdRead() *StateProvinceIdType {
    if s.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.StateProvinceId
    }
  func (s *SchoolInfo) SchoolGroupListRead() *SchoolGroupListType {
    if s.SchoolGroupList == nil {
     if v, ok:= SchoolGroupListTypePointer(SchoolGroupListType{}); ok {
      s.SchoolGroupList = v
      }
      }
      return s.SchoolGroupList
    }
  func (s *SchoolInfo) SLARead() *AUCodeSetsAustralianStandardGeographicalClassificationASGCType {
    if s.SLA == nil {
    if v, ok:= StringPointer(""); ok {
      s.SLA = ((*AUCodeSetsAustralianStandardGeographicalClassificationASGCType)(v))
      }
      }
      return s.SLA
    }
  func (s *SchoolInfo) BoardingSchoolStatusRead() *AUCodeSetsYesOrNoCategoryType {
    if s.BoardingSchoolStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.BoardingSchoolStatus = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.BoardingSchoolStatus
    }
  func (s *SchoolInfo) NonGovSystemicStatusRead() *AUCodeSetsSystemicStatusType {
    if s.NonGovSystemicStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.NonGovSystemicStatus = ((*AUCodeSetsSystemicStatusType)(v))
      }
      }
      return s.NonGovSystemicStatus
    }
  func (s *SchoolInfo) OperationalStatusRead() *OperationalStatusType {
    if s.OperationalStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.OperationalStatus = ((*OperationalStatusType)(v))
      }
      }
      return s.OperationalStatus
    }

  // XXXXX
func (t *ResourceUsage_SIF_RefId) CopyString(key string, value interface{}) *ResourceUsage_SIF_RefId {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ResourceUsage_SIF_RefId) CopyClone(key string, value interface{}) *ResourceUsage_SIF_RefId {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ResourceUsage_SIF_RefId) Unset(key string) *ResourceUsage_SIF_RefId {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_SIF_RefId")
        }
        return n
}

func (n *ResourceUsage_SIF_RefId) SetProperty(key string, value interface{}) *ResourceUsage_SIF_RefId {
        if n == nil {
                n, _ = ResourceUsage_SIF_RefIdPointer(ResourceUsage_SIF_RefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_SIF_RefId")
        }
        return n
}

  func (s *ResourceUsage_SIF_RefId) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *ResourceUsage_SIF_RefId) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *AbstractContentElementType_TextData) CopyString(key string, value interface{}) *AbstractContentElementType_TextData {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AbstractContentElementType_TextData) CopyClone(key string, value interface{}) *AbstractContentElementType_TextData {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AbstractContentElementType_TextData) Unset(key string) *AbstractContentElementType_TextData {
        switch key {
  case "FileName":
   n.FileName = nil
  case "MIMEType":
   n.MIMEType = nil
  case "Description":
   n.Description = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_TextData")
        }
        return n
}

func (n *AbstractContentElementType_TextData) SetProperty(key string, value interface{}) *AbstractContentElementType_TextData {
        if n == nil {
                n, _ = AbstractContentElementType_TextDataPointer(AbstractContentElementType_TextData{})
        }
        switch key {
    case "FileName":
    
    if v, ok:= StringPointer(value); ok {
      n.FileName = ((*String)(v))
      }
    case "MIMEType":
    
    if v, ok:= StringPointer(value); ok {
      n.MIMEType = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_TextData")
        }
        return n
}

  func (s *AbstractContentElementType_TextData) FileNameRead() *String {
    if s.FileName == nil {
    if v, ok:= StringPointer(""); ok {
      s.FileName = ((*String)(v))
      }
      }
      return s.FileName
    }
  func (s *AbstractContentElementType_TextData) MIMETypeRead() *String {
    if s.MIMEType == nil {
    if v, ok:= StringPointer(""); ok {
      s.MIMEType = ((*String)(v))
      }
      }
      return s.MIMEType
    }
  func (s *AbstractContentElementType_TextData) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *AbstractContentElementType_TextData) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *OtherCodeListType_OtherCode) CopyString(key string, value interface{}) *OtherCodeListType_OtherCode {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *OtherCodeListType_OtherCode) CopyClone(key string, value interface{}) *OtherCodeListType_OtherCode {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *OtherCodeListType_OtherCode) Unset(key string) *OtherCodeListType_OtherCode {
        switch key {
  case "Codeset":
   n.Codeset = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherCodeListType_OtherCode")
        }
        return n
}

func (n *OtherCodeListType_OtherCode) SetProperty(key string, value interface{}) *OtherCodeListType_OtherCode {
        if n == nil {
                n, _ = OtherCodeListType_OtherCodePointer(OtherCodeListType_OtherCode{})
        }
        switch key {
    case "Codeset":
    
    if v, ok:= StringPointer(value); ok {
      n.Codeset = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherCodeListType_OtherCode")
        }
        return n
}

  func (s *OtherCodeListType_OtherCode) CodesetRead() *String {
    if s.Codeset == nil {
    if v, ok:= StringPointer(""); ok {
      s.Codeset = ((*String)(v))
      }
      }
      return s.Codeset
    }
  func (s *OtherCodeListType_OtherCode) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *PersonalisedPlan) CopyString(key string, value interface{}) *PersonalisedPlan {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PersonalisedPlan) CopyClone(key string, value interface{}) *PersonalisedPlan {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PersonalisedPlan) Unset(key string) *PersonalisedPlan {
        switch key {
  case "PersonalisedPlanCategory":
   n.PersonalisedPlanCategory = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "PersonalisedPlanStartDate":
   n.PersonalisedPlanStartDate = nil
  case "PersonalisedPlanEndDate":
   n.PersonalisedPlanEndDate = nil
  case "RefId":
   n.RefId = nil
  case "DocumentList":
   n.DocumentList = nil
  case "AssociatedAttachment":
   n.AssociatedAttachment = nil
  case "LocalId":
   n.LocalId = nil
  case "PersonalisedPlanNotes":
   n.PersonalisedPlanNotes = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "PersonalisedPlanReviewDate":
   n.PersonalisedPlanReviewDate = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonalisedPlan")
        }
        return n
}

func (n *PersonalisedPlan) SetProperty(key string, value interface{}) *PersonalisedPlan {
        if n == nil {
                n, _ = PersonalisedPlanPointer(PersonalisedPlan{})
        }
        switch key {
    case "PersonalisedPlanCategory":
        if !CodesetContains(AUCodeSetsPersonalisedPlanType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsPersonalisedPlanType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PersonalisedPlanCategory = ((*AUCodeSetsPersonalisedPlanType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "PersonalisedPlanStartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.PersonalisedPlanStartDate = ((*String)(v))
      }
    case "PersonalisedPlanEndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.PersonalisedPlanEndDate = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "DocumentList":
    if v, ok:= WellbeingDocumentListTypePointer(value); ok {
      n.DocumentList = v
      }
    case "AssociatedAttachment":
    
    if v, ok:= StringPointer(value); ok {
      n.AssociatedAttachment = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "PersonalisedPlanNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.PersonalisedPlanNotes = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "PersonalisedPlanReviewDate":
    
    if v, ok:= StringPointer(value); ok {
      n.PersonalisedPlanReviewDate = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonalisedPlan")
        }
        return n
}

  func (s *PersonalisedPlan) PersonalisedPlanCategoryRead() *AUCodeSetsPersonalisedPlanType {
    if s.PersonalisedPlanCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.PersonalisedPlanCategory = ((*AUCodeSetsPersonalisedPlanType)(v))
      }
      }
      return s.PersonalisedPlanCategory
    }
  func (s *PersonalisedPlan) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *PersonalisedPlan) PersonalisedPlanStartDateRead() *String {
    if s.PersonalisedPlanStartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.PersonalisedPlanStartDate = ((*String)(v))
      }
      }
      return s.PersonalisedPlanStartDate
    }
  func (s *PersonalisedPlan) PersonalisedPlanEndDateRead() *String {
    if s.PersonalisedPlanEndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.PersonalisedPlanEndDate = ((*String)(v))
      }
      }
      return s.PersonalisedPlanEndDate
    }
  func (s *PersonalisedPlan) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *PersonalisedPlan) DocumentListRead() *WellbeingDocumentListType {
    if s.DocumentList == nil {
     if v, ok:= WellbeingDocumentListTypePointer(WellbeingDocumentListType{}); ok {
      s.DocumentList = v
      }
      }
      return s.DocumentList
    }
  func (s *PersonalisedPlan) AssociatedAttachmentRead() *String {
    if s.AssociatedAttachment == nil {
    if v, ok:= StringPointer(""); ok {
      s.AssociatedAttachment = ((*String)(v))
      }
      }
      return s.AssociatedAttachment
    }
  func (s *PersonalisedPlan) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *PersonalisedPlan) PersonalisedPlanNotesRead() *String {
    if s.PersonalisedPlanNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.PersonalisedPlanNotes = ((*String)(v))
      }
      }
      return s.PersonalisedPlanNotes
    }
  func (s *PersonalisedPlan) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *PersonalisedPlan) PersonalisedPlanReviewDateRead() *String {
    if s.PersonalisedPlanReviewDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.PersonalisedPlanReviewDate = ((*String)(v))
      }
      }
      return s.PersonalisedPlanReviewDate
    }
  func (s *PersonalisedPlan) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *PersonalisedPlan) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *PersonalisedPlan) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }

  // XXXXX
func (t *TimeTablePeriodType) CopyString(key string, value interface{}) *TimeTablePeriodType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TimeTablePeriodType) CopyClone(key string, value interface{}) *TimeTablePeriodType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TimeTablePeriodType) Unset(key string) *TimeTablePeriodType {
        switch key {
  case "EndTime":
   n.EndTime = nil
  case "UseInAttendanceCalculations":
   n.UseInAttendanceCalculations = nil
  case "PeriodTitle":
   n.PeriodTitle = nil
  case "BellPeriod":
   n.BellPeriod = nil
  case "PeriodId":
   n.PeriodId = nil
  case "StartTime":
   n.StartTime = nil
  case "InstructionalMinutes":
   n.InstructionalMinutes = nil
  case "RegularSchoolPeriod":
   n.RegularSchoolPeriod = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTablePeriodType")
        }
        return n
}

func (n *TimeTablePeriodType) SetProperty(key string, value interface{}) *TimeTablePeriodType {
        if n == nil {
                n, _ = TimeTablePeriodTypePointer(TimeTablePeriodType{})
        }
        switch key {
    case "EndTime":
    
    if v, ok:= StringPointer(value); ok {
      n.EndTime = ((*String)(v))
      }
    case "UseInAttendanceCalculations":
    
    if v, ok:= StringPointer(value); ok {
      n.UseInAttendanceCalculations = ((*String)(v))
      }
    case "PeriodTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.PeriodTitle = ((*String)(v))
      }
    case "BellPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.BellPeriod = ((*String)(v))
      }
    case "PeriodId":
    
    if v, ok:= StringPointer(value); ok {
      n.PeriodId = ((*LocalIdType)(v))
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.StartTime = ((*String)(v))
      }
    case "InstructionalMinutes":
    
    if v, ok:= IntPointer(value); ok {
      n.InstructionalMinutes = ((*Int)(v))
      }
    case "RegularSchoolPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.RegularSchoolPeriod = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTablePeriodType")
        }
        return n
}

  func (s *TimeTablePeriodType) EndTimeRead() *String {
    if s.EndTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndTime = ((*String)(v))
      }
      }
      return s.EndTime
    }
  func (s *TimeTablePeriodType) UseInAttendanceCalculationsRead() *String {
    if s.UseInAttendanceCalculations == nil {
    if v, ok:= StringPointer(""); ok {
      s.UseInAttendanceCalculations = ((*String)(v))
      }
      }
      return s.UseInAttendanceCalculations
    }
  func (s *TimeTablePeriodType) PeriodTitleRead() *String {
    if s.PeriodTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.PeriodTitle = ((*String)(v))
      }
      }
      return s.PeriodTitle
    }
  func (s *TimeTablePeriodType) BellPeriodRead() *String {
    if s.BellPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.BellPeriod = ((*String)(v))
      }
      }
      return s.BellPeriod
    }
  func (s *TimeTablePeriodType) PeriodIdRead() *LocalIdType {
    if s.PeriodId == nil {
    if v, ok:= StringPointer(""); ok {
      s.PeriodId = ((*LocalIdType)(v))
      }
      }
      return s.PeriodId
    }
  func (s *TimeTablePeriodType) StartTimeRead() *String {
    if s.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartTime = ((*String)(v))
      }
      }
      return s.StartTime
    }
  func (s *TimeTablePeriodType) InstructionalMinutesRead() *Int {
    if s.InstructionalMinutes == nil {
    if v, ok:= IntPointer(0); ok {
      s.InstructionalMinutes = ((*Int)(v))
      }
      }
      return s.InstructionalMinutes
    }
  func (s *TimeTablePeriodType) RegularSchoolPeriodRead() *String {
    if s.RegularSchoolPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.RegularSchoolPeriod = ((*String)(v))
      }
      }
      return s.RegularSchoolPeriod
    }

  // XXXXX
func (t *AwardContainerType) CopyString(key string, value interface{}) *AwardContainerType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AwardContainerType) CopyClone(key string, value interface{}) *AwardContainerType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AwardContainerType) Unset(key string) *AwardContainerType {
        switch key {
  case "AwardDescription":
   n.AwardDescription = nil
  case "AwardDate":
   n.AwardDate = nil
  case "AwardNotes":
   n.AwardNotes = nil
  case "AwardType":
   n.AwardType = nil
  case "Status":
   n.Status = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AwardContainerType")
        }
        return n
}

func (n *AwardContainerType) SetProperty(key string, value interface{}) *AwardContainerType {
        if n == nil {
                n, _ = AwardContainerTypePointer(AwardContainerType{})
        }
        switch key {
    case "AwardDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.AwardDescription = ((*String)(v))
      }
    case "AwardDate":
    
    if v, ok:= StringPointer(value); ok {
      n.AwardDate = ((*String)(v))
      }
    case "AwardNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.AwardNotes = ((*String)(v))
      }
    case "AwardType":
    
    if v, ok:= StringPointer(value); ok {
      n.AwardType = ((*String)(v))
      }
    case "Status":
        if !CodesetContains(AUCodeSetsWellbeingStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AwardContainerType")
        }
        return n
}

  func (s *AwardContainerType) AwardDescriptionRead() *String {
    if s.AwardDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.AwardDescription = ((*String)(v))
      }
      }
      return s.AwardDescription
    }
  func (s *AwardContainerType) AwardDateRead() *String {
    if s.AwardDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.AwardDate = ((*String)(v))
      }
      }
      return s.AwardDate
    }
  func (s *AwardContainerType) AwardNotesRead() *String {
    if s.AwardNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.AwardNotes = ((*String)(v))
      }
      }
      return s.AwardNotes
    }
  func (s *AwardContainerType) AwardTypeRead() *String {
    if s.AwardType == nil {
    if v, ok:= StringPointer(""); ok {
      s.AwardType = ((*String)(v))
      }
      }
      return s.AwardType
    }
  func (s *AwardContainerType) StatusRead() *AUCodeSetsWellbeingStatusType {
    if s.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
      }
      return s.Status
    }

  // XXXXX
func (t *StaffActivityExtensionType) CopyString(key string, value interface{}) *StaffActivityExtensionType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StaffActivityExtensionType) CopyClone(key string, value interface{}) *StaffActivityExtensionType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StaffActivityExtensionType) Unset(key string) *StaffActivityExtensionType {
        switch key {
  case "Code":
   n.Code = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffActivityExtensionType")
        }
        return n
}

func (n *StaffActivityExtensionType) SetProperty(key string, value interface{}) *StaffActivityExtensionType {
        if n == nil {
                n, _ = StaffActivityExtensionTypePointer(StaffActivityExtensionType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsStaffActivityType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStaffActivityType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsStaffActivityType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffActivityExtensionType")
        }
        return n
}

  func (s *StaffActivityExtensionType) CodeRead() *AUCodeSetsStaffActivityType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsStaffActivityType)(v))
      }
      }
      return s.Code
    }
  func (s *StaffActivityExtensionType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }

  // XXXXX
func (t *AbstractContentElementType_BinaryData) CopyString(key string, value interface{}) *AbstractContentElementType_BinaryData {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AbstractContentElementType_BinaryData) CopyClone(key string, value interface{}) *AbstractContentElementType_BinaryData {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AbstractContentElementType_BinaryData) Unset(key string) *AbstractContentElementType_BinaryData {
        switch key {
  case "FileName":
   n.FileName = nil
  case "Description":
   n.Description = nil
  case "MIMEType":
   n.MIMEType = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_BinaryData")
        }
        return n
}

func (n *AbstractContentElementType_BinaryData) SetProperty(key string, value interface{}) *AbstractContentElementType_BinaryData {
        if n == nil {
                n, _ = AbstractContentElementType_BinaryDataPointer(AbstractContentElementType_BinaryData{})
        }
        switch key {
    case "FileName":
    
    if v, ok:= StringPointer(value); ok {
      n.FileName = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "MIMEType":
    
    if v, ok:= StringPointer(value); ok {
      n.MIMEType = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_BinaryData")
        }
        return n
}

  func (s *AbstractContentElementType_BinaryData) FileNameRead() *String {
    if s.FileName == nil {
    if v, ok:= StringPointer(""); ok {
      s.FileName = ((*String)(v))
      }
      }
      return s.FileName
    }
  func (s *AbstractContentElementType_BinaryData) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *AbstractContentElementType_BinaryData) MIMETypeRead() *String {
    if s.MIMEType == nil {
    if v, ok:= StringPointer(""); ok {
      s.MIMEType = ((*String)(v))
      }
      }
      return s.MIMEType
    }
  func (s *AbstractContentElementType_BinaryData) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *CensusStaffType) CopyString(key string, value interface{}) *CensusStaffType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *CensusStaffType) CopyClone(key string, value interface{}) *CensusStaffType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *CensusStaffType) Unset(key string) *CensusStaffType {
        switch key {
  case "SecondaryFTE":
   n.SecondaryFTE = nil
  case "StaffCohortId":
   n.StaffCohortId = nil
  case "PrimaryFTE":
   n.PrimaryFTE = nil
  case "CohortIndigenousType":
   n.CohortIndigenousType = nil
  case "JobFTE":
   n.JobFTE = nil
  case "StaffActivity":
   n.StaffActivity = nil
  case "CohortGender":
   n.CohortGender = nil
  case "Headcount":
   n.Headcount = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusStaffType")
        }
        return n
}

func (n *CensusStaffType) SetProperty(key string, value interface{}) *CensusStaffType {
        if n == nil {
                n, _ = CensusStaffTypePointer(CensusStaffType{})
        }
        switch key {
    case "SecondaryFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.SecondaryFTE = ((*Float)(v))
      }
    case "StaffCohortId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffCohortId = ((*LocalIdType)(v))
      }
    case "PrimaryFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.PrimaryFTE = ((*Float)(v))
      }
    case "CohortIndigenousType":
    
    if v, ok:= StringPointer(value); ok {
      n.CohortIndigenousType = ((*String)(v))
      }
    case "JobFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.JobFTE = ((*Float)(v))
      }
    case "StaffActivity":
    if v, ok:= StaffActivityExtensionTypePointer(value); ok {
      n.StaffActivity = v
      }
    case "CohortGender":
    
    if v, ok:= StringPointer(value); ok {
      n.CohortGender = ((*String)(v))
      }
    case "Headcount":
    
    if v, ok:= IntPointer(value); ok {
      n.Headcount = ((*Int)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusStaffType")
        }
        return n
}

  func (s *CensusStaffType) SecondaryFTERead() *Float {
    if s.SecondaryFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.SecondaryFTE = ((*Float)(v))
      }
      }
      return s.SecondaryFTE
    }
  func (s *CensusStaffType) StaffCohortIdRead() *LocalIdType {
    if s.StaffCohortId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffCohortId = ((*LocalIdType)(v))
      }
      }
      return s.StaffCohortId
    }
  func (s *CensusStaffType) PrimaryFTERead() *Float {
    if s.PrimaryFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.PrimaryFTE = ((*Float)(v))
      }
      }
      return s.PrimaryFTE
    }
  func (s *CensusStaffType) CohortIndigenousTypeRead() *String {
    if s.CohortIndigenousType == nil {
    if v, ok:= StringPointer(""); ok {
      s.CohortIndigenousType = ((*String)(v))
      }
      }
      return s.CohortIndigenousType
    }
  func (s *CensusStaffType) JobFTERead() *Float {
    if s.JobFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.JobFTE = ((*Float)(v))
      }
      }
      return s.JobFTE
    }
  func (s *CensusStaffType) StaffActivityRead() *StaffActivityExtensionType {
    if s.StaffActivity == nil {
     if v, ok:= StaffActivityExtensionTypePointer(StaffActivityExtensionType{}); ok {
      s.StaffActivity = v
      }
      }
      return s.StaffActivity
    }
  func (s *CensusStaffType) CohortGenderRead() *String {
    if s.CohortGender == nil {
    if v, ok:= StringPointer(""); ok {
      s.CohortGender = ((*String)(v))
      }
      }
      return s.CohortGender
    }
  func (s *CensusStaffType) HeadcountRead() *Int {
    if s.Headcount == nil {
    if v, ok:= IntPointer(0); ok {
      s.Headcount = ((*Int)(v))
      }
      }
      return s.Headcount
    }

  // XXXXX
func (t *Debtor) CopyString(key string, value interface{}) *Debtor {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *Debtor) CopyClone(key string, value interface{}) *Debtor {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *Debtor) Unset(key string) *Debtor {
        switch key {
  case "AddressList":
   n.AddressList = nil
  case "RefId":
   n.RefId = nil
  case "LocalId":
   n.LocalId = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "BillingNote":
   n.BillingNote = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "Discount":
   n.Discount = nil
  case "BillingName":
   n.BillingName = nil
  case "BilledEntity":
   n.BilledEntity = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Debtor")
        }
        return n
}

func (n *Debtor) SetProperty(key string, value interface{}) *Debtor {
        if n == nil {
                n, _ = DebtorPointer(Debtor{})
        }
        switch key {
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.AddressList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "BillingNote":
    
    if v, ok:= StringPointer(value); ok {
      n.BillingNote = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "Discount":
    
    if v, ok:= StringPointer(value); ok {
      n.Discount = ((*String)(v))
      }
    case "BillingName":
    
    if v, ok:= StringPointer(value); ok {
      n.BillingName = ((*String)(v))
      }
    case "BilledEntity":
    if v, ok:= Debtor_BilledEntityPointer(value); ok {
      n.BilledEntity = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Debtor")
        }
        return n
}

  func (s *Debtor) AddressListRead() *AddressListType {
    if s.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.AddressList = v
      }
      }
      return s.AddressList
    }
  func (s *Debtor) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *Debtor) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *Debtor) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *Debtor) BillingNoteRead() *String {
    if s.BillingNote == nil {
    if v, ok:= StringPointer(""); ok {
      s.BillingNote = ((*String)(v))
      }
      }
      return s.BillingNote
    }
  func (s *Debtor) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *Debtor) DiscountRead() *String {
    if s.Discount == nil {
    if v, ok:= StringPointer(""); ok {
      s.Discount = ((*String)(v))
      }
      }
      return s.Discount
    }
  func (s *Debtor) BillingNameRead() *String {
    if s.BillingName == nil {
    if v, ok:= StringPointer(""); ok {
      s.BillingName = ((*String)(v))
      }
      }
      return s.BillingName
    }
  func (s *Debtor) BilledEntityRead() *Debtor_BilledEntity {
    if s.BilledEntity == nil {
     if v, ok:= Debtor_BilledEntityPointer(Debtor_BilledEntity{}); ok {
      s.BilledEntity = v
      }
      }
      return s.BilledEntity
    }
  func (s *Debtor) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }

  // XXXXX
func (t *Activity) CopyString(key string, value interface{}) *Activity {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *Activity) CopyClone(key string, value interface{}) *Activity {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *Activity) Unset(key string) *Activity {
        switch key {
  case "Students":
   n.Students = nil
  case "LearningObjectives":
   n.LearningObjectives = nil
  case "MaxAttemptsAllowed":
   n.MaxAttemptsAllowed = nil
  case "Title":
   n.Title = nil
  case "ActivityTime":
   n.ActivityTime = nil
  case "ActivityWeight":
   n.ActivityWeight = nil
  case "SourceObjects":
   n.SourceObjects = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "SubjectArea":
   n.SubjectArea = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "Preamble":
   n.Preamble = nil
  case "Prerequisites":
   n.Prerequisites = nil
  case "LearningResources":
   n.LearningResources = nil
  case "Evaluation":
   n.Evaluation = nil
  case "TechnicalRequirements":
   n.TechnicalRequirements = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "EssentialMaterials":
   n.EssentialMaterials = nil
  case "Points":
   n.Points = nil
  case "LearningStandards":
   n.LearningStandards = nil
  case "AssessmentRefId":
   n.AssessmentRefId = nil
  case "SoftwareRequirementList":
   n.SoftwareRequirementList = nil
  case "RefId":
   n.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Activity")
        }
        return n
}

func (n *Activity) SetProperty(key string, value interface{}) *Activity {
        if n == nil {
                n, _ = ActivityPointer(Activity{})
        }
        switch key {
    case "Students":
    if v, ok:= StudentsTypePointer(value); ok {
      n.Students = v
      }
    case "LearningObjectives":
    if v, ok:= LearningObjectivesTypePointer(value); ok {
      n.LearningObjectives = v
      }
    case "MaxAttemptsAllowed":
    
    if v, ok:= IntPointer(value); ok {
      n.MaxAttemptsAllowed = ((*Int)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.Title = ((*String)(v))
      }
    case "ActivityTime":
    if v, ok:= ActivityTimeTypePointer(value); ok {
      n.ActivityTime = v
      }
    case "ActivityWeight":
    
    if v, ok:= FloatPointer(value); ok {
      n.ActivityWeight = ((*Float)(v))
      }
    case "SourceObjects":
    if v, ok:= SourceObjectsTypePointer(value); ok {
      n.SourceObjects = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "SubjectArea":
    if v, ok:= SubjectAreaTypePointer(value); ok {
      n.SubjectArea = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "Preamble":
    
    if v, ok:= StringPointer(value); ok {
      n.Preamble = ((*String)(v))
      }
    case "Prerequisites":
    if v, ok:= PrerequisitesTypePointer(value); ok {
      n.Prerequisites = v
      }
    case "LearningResources":
    if v, ok:= LearningResourcesTypePointer(value); ok {
      n.LearningResources = v
      }
    case "Evaluation":
    if v, ok:= Activity_EvaluationPointer(value); ok {
      n.Evaluation = v
      }
    case "TechnicalRequirements":
    if v, ok:= TechnicalRequirementsTypePointer(value); ok {
      n.TechnicalRequirements = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "EssentialMaterials":
    if v, ok:= EssentialMaterialsTypePointer(value); ok {
      n.EssentialMaterials = v
      }
    case "Points":
    
    if v, ok:= IntPointer(value); ok {
      n.Points = ((*Int)(v))
      }
    case "LearningStandards":
    if v, ok:= LearningStandardsTypePointer(value); ok {
      n.LearningStandards = v
      }
    case "AssessmentRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.AssessmentRefId = ((*String)(v))
      }
    case "SoftwareRequirementList":
    if v, ok:= SoftwareRequirementListTypePointer(value); ok {
      n.SoftwareRequirementList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Activity")
        }
        return n
}

  func (s *Activity) StudentsRead() *StudentsType {
    if s.Students == nil {
     if v, ok:= StudentsTypePointer(StudentsType{}); ok {
      s.Students = v
      }
      }
      return s.Students
    }
  func (s *Activity) LearningObjectivesRead() *LearningObjectivesType {
    if s.LearningObjectives == nil {
     if v, ok:= LearningObjectivesTypePointer(LearningObjectivesType{}); ok {
      s.LearningObjectives = v
      }
      }
      return s.LearningObjectives
    }
  func (s *Activity) MaxAttemptsAllowedRead() *Int {
    if s.MaxAttemptsAllowed == nil {
    if v, ok:= IntPointer(0); ok {
      s.MaxAttemptsAllowed = ((*Int)(v))
      }
      }
      return s.MaxAttemptsAllowed
    }
  func (s *Activity) TitleRead() *String {
    if s.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.Title = ((*String)(v))
      }
      }
      return s.Title
    }
  func (s *Activity) ActivityTimeRead() *ActivityTimeType {
    if s.ActivityTime == nil {
     if v, ok:= ActivityTimeTypePointer(ActivityTimeType{}); ok {
      s.ActivityTime = v
      }
      }
      return s.ActivityTime
    }
  func (s *Activity) ActivityWeightRead() *Float {
    if s.ActivityWeight == nil {
    if v, ok:= FloatPointer(0); ok {
      s.ActivityWeight = ((*Float)(v))
      }
      }
      return s.ActivityWeight
    }
  func (s *Activity) SourceObjectsRead() *SourceObjectsType {
    if s.SourceObjects == nil {
     if v, ok:= SourceObjectsTypePointer(SourceObjectsType{}); ok {
      s.SourceObjects = v
      }
      }
      return s.SourceObjects
    }
  func (s *Activity) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *Activity) SubjectAreaRead() *SubjectAreaType {
    if s.SubjectArea == nil {
     if v, ok:= SubjectAreaTypePointer(SubjectAreaType{}); ok {
      s.SubjectArea = v
      }
      }
      return s.SubjectArea
    }
  func (s *Activity) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *Activity) PreambleRead() *String {
    if s.Preamble == nil {
    if v, ok:= StringPointer(""); ok {
      s.Preamble = ((*String)(v))
      }
      }
      return s.Preamble
    }
  func (s *Activity) PrerequisitesRead() *PrerequisitesType {
    if s.Prerequisites == nil {
     if v, ok:= PrerequisitesTypePointer(PrerequisitesType{}); ok {
      s.Prerequisites = v
      }
      }
      return s.Prerequisites
    }
  func (s *Activity) LearningResourcesRead() *LearningResourcesType {
    if s.LearningResources == nil {
     if v, ok:= LearningResourcesTypePointer(LearningResourcesType{}); ok {
      s.LearningResources = v
      }
      }
      return s.LearningResources
    }
  func (s *Activity) EvaluationRead() *Activity_Evaluation {
    if s.Evaluation == nil {
     if v, ok:= Activity_EvaluationPointer(Activity_Evaluation{}); ok {
      s.Evaluation = v
      }
      }
      return s.Evaluation
    }
  func (s *Activity) TechnicalRequirementsRead() *TechnicalRequirementsType {
    if s.TechnicalRequirements == nil {
     if v, ok:= TechnicalRequirementsTypePointer(TechnicalRequirementsType{}); ok {
      s.TechnicalRequirements = v
      }
      }
      return s.TechnicalRequirements
    }
  func (s *Activity) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *Activity) EssentialMaterialsRead() *EssentialMaterialsType {
    if s.EssentialMaterials == nil {
     if v, ok:= EssentialMaterialsTypePointer(EssentialMaterialsType{}); ok {
      s.EssentialMaterials = v
      }
      }
      return s.EssentialMaterials
    }
  func (s *Activity) PointsRead() *Int {
    if s.Points == nil {
    if v, ok:= IntPointer(0); ok {
      s.Points = ((*Int)(v))
      }
      }
      return s.Points
    }
  func (s *Activity) LearningStandardsRead() *LearningStandardsType {
    if s.LearningStandards == nil {
     if v, ok:= LearningStandardsTypePointer(LearningStandardsType{}); ok {
      s.LearningStandards = v
      }
      }
      return s.LearningStandards
    }
  func (s *Activity) AssessmentRefIdRead() *String {
    if s.AssessmentRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.AssessmentRefId = ((*String)(v))
      }
      }
      return s.AssessmentRefId
    }
  func (s *Activity) SoftwareRequirementListRead() *SoftwareRequirementListType {
    if s.SoftwareRequirementList == nil {
     if v, ok:= SoftwareRequirementListTypePointer(SoftwareRequirementListType{}); ok {
      s.SoftwareRequirementList = v
      }
      }
      return s.SoftwareRequirementList
    }
  func (s *Activity) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }

  // XXXXX
func (t *StudentGrade) CopyString(key string, value interface{}) *StudentGrade {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentGrade) CopyClone(key string, value interface{}) *StudentGrade {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentGrade) Unset(key string) *StudentGrade {
        switch key {
  case "Homegroup":
   n.Homegroup = nil
  case "StaffPersonalRefId":
   n.StaffPersonalRefId = nil
  case "LearningStandardList":
   n.LearningStandardList = nil
  case "TermInfoRefId":
   n.TermInfoRefId = nil
  case "TeachingGroupShortName":
   n.TeachingGroupShortName = nil
  case "LearningArea":
   n.LearningArea = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "Grade":
   n.Grade = nil
  case "TeacherJudgement":
   n.TeacherJudgement = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "RefId":
   n.RefId = nil
  case "YearLevel":
   n.YearLevel = nil
  case "Description":
   n.Description = nil
  case "Markers":
   n.Markers = nil
  case "TeachingGroupRefId":
   n.TeachingGroupRefId = nil
  case "GradingScoreList":
   n.GradingScoreList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentGrade")
        }
        return n
}

func (n *StudentGrade) SetProperty(key string, value interface{}) *StudentGrade {
        if n == nil {
                n, _ = StudentGradePointer(StudentGrade{})
        }
        switch key {
    case "Homegroup":
    
    if v, ok:= StringPointer(value); ok {
      n.Homegroup = ((*String)(v))
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StaffPersonalRefId = ((*String)(v))
      }
    case "LearningStandardList":
    if v, ok:= LearningStandardListTypePointer(value); ok {
      n.LearningStandardList = v
      }
    case "TermInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TermInfoRefId = ((*String)(v))
      }
    case "TeachingGroupShortName":
    
    if v, ok:= StringPointer(value); ok {
      n.TeachingGroupShortName = ((*String)(v))
      }
    case "LearningArea":
    if v, ok:= ACStrandSubjectAreaTypePointer(value); ok {
      n.LearningArea = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "Grade":
    if v, ok:= GradeTypePointer(value); ok {
      n.Grade = v
      }
    case "TeacherJudgement":
    
    if v, ok:= StringPointer(value); ok {
      n.TeacherJudgement = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "YearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.YearLevel = v
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "Markers":
    if v, ok:= StudentGradeMarkersListTypePointer(value); ok {
      n.Markers = v
      }
    case "TeachingGroupRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TeachingGroupRefId = ((*String)(v))
      }
    case "GradingScoreList":
    if v, ok:= GradingScoreListTypePointer(value); ok {
      n.GradingScoreList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentGrade")
        }
        return n
}

  func (s *StudentGrade) HomegroupRead() *String {
    if s.Homegroup == nil {
    if v, ok:= StringPointer(""); ok {
      s.Homegroup = ((*String)(v))
      }
      }
      return s.Homegroup
    }
  func (s *StudentGrade) StaffPersonalRefIdRead() *String {
    if s.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.StaffPersonalRefId
    }
  func (s *StudentGrade) LearningStandardListRead() *LearningStandardListType {
    if s.LearningStandardList == nil {
     if v, ok:= LearningStandardListTypePointer(LearningStandardListType{}); ok {
      s.LearningStandardList = v
      }
      }
      return s.LearningStandardList
    }
  func (s *StudentGrade) TermInfoRefIdRead() *String {
    if s.TermInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TermInfoRefId = ((*String)(v))
      }
      }
      return s.TermInfoRefId
    }
  func (s *StudentGrade) TeachingGroupShortNameRead() *String {
    if s.TeachingGroupShortName == nil {
    if v, ok:= StringPointer(""); ok {
      s.TeachingGroupShortName = ((*String)(v))
      }
      }
      return s.TeachingGroupShortName
    }
  func (s *StudentGrade) LearningAreaRead() *ACStrandSubjectAreaType {
    if s.LearningArea == nil {
     if v, ok:= ACStrandSubjectAreaTypePointer(ACStrandSubjectAreaType{}); ok {
      s.LearningArea = v
      }
      }
      return s.LearningArea
    }
  func (s *StudentGrade) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentGrade) GradeRead() *GradeType {
    if s.Grade == nil {
     if v, ok:= GradeTypePointer(GradeType{}); ok {
      s.Grade = v
      }
      }
      return s.Grade
    }
  func (s *StudentGrade) TeacherJudgementRead() *String {
    if s.TeacherJudgement == nil {
    if v, ok:= StringPointer(""); ok {
      s.TeacherJudgement = ((*String)(v))
      }
      }
      return s.TeacherJudgement
    }
  func (s *StudentGrade) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *StudentGrade) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentGrade) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *StudentGrade) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentGrade) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StudentGrade) YearLevelRead() *YearLevelType {
    if s.YearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.YearLevel = v
      }
      }
      return s.YearLevel
    }
  func (s *StudentGrade) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *StudentGrade) MarkersRead() *StudentGradeMarkersListType {
    if s.Markers == nil {
     if v, ok:= StudentGradeMarkersListTypePointer(StudentGradeMarkersListType{}); ok {
      s.Markers = v
      }
      }
      return s.Markers
    }
  func (s *StudentGrade) TeachingGroupRefIdRead() *String {
    if s.TeachingGroupRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TeachingGroupRefId = ((*String)(v))
      }
      }
      return s.TeachingGroupRefId
    }
  func (s *StudentGrade) GradingScoreListRead() *GradingScoreListType {
    if s.GradingScoreList == nil {
     if v, ok:= GradingScoreListTypePointer(GradingScoreListType{}); ok {
      s.GradingScoreList = v
      }
      }
      return s.GradingScoreList
    }

  // XXXXX
func (t *SIF_MetadataType) CopyString(key string, value interface{}) *SIF_MetadataType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SIF_MetadataType) CopyClone(key string, value interface{}) *SIF_MetadataType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SIF_MetadataType) Unset(key string) *SIF_MetadataType {
        switch key {
  case "LifeCycle":
   n.LifeCycle = nil
  case "EducationFilter":
   n.EducationFilter = nil
  case "TimeElements":
   n.TimeElements = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SIF_MetadataType")
        }
        return n
}

func (n *SIF_MetadataType) SetProperty(key string, value interface{}) *SIF_MetadataType {
        if n == nil {
                n, _ = SIF_MetadataTypePointer(SIF_MetadataType{})
        }
        switch key {
    case "LifeCycle":
    if v, ok:= LifeCycleTypePointer(value); ok {
      n.LifeCycle = v
      }
    case "EducationFilter":
    if v, ok:= EducationFilterTypePointer(value); ok {
      n.EducationFilter = v
      }
    case "TimeElements":
    if v, ok:= SIF_MetadataType_TimeElementsPointer(value); ok {
      n.TimeElements = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SIF_MetadataType")
        }
        return n
}

  func (s *SIF_MetadataType) LifeCycleRead() *LifeCycleType {
    if s.LifeCycle == nil {
     if v, ok:= LifeCycleTypePointer(LifeCycleType{}); ok {
      s.LifeCycle = v
      }
      }
      return s.LifeCycle
    }
  func (s *SIF_MetadataType) EducationFilterRead() *EducationFilterType {
    if s.EducationFilter == nil {
     if v, ok:= EducationFilterTypePointer(EducationFilterType{}); ok {
      s.EducationFilter = v
      }
      }
      return s.EducationFilter
    }
  func (s *SIF_MetadataType) TimeElementsRead() *SIF_MetadataType_TimeElements {
    if s.TimeElements == nil {
     if v, ok:= SIF_MetadataType_TimeElementsPointer(SIF_MetadataType_TimeElements{}); ok {
      s.TimeElements = v
      }
      }
      return s.TimeElements
    }

  // XXXXX
func (t *StudentSectionEnrollment) CopyString(key string, value interface{}) *StudentSectionEnrollment {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentSectionEnrollment) CopyClone(key string, value interface{}) *StudentSectionEnrollment {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentSectionEnrollment) Unset(key string) *StudentSectionEnrollment {
        switch key {
  case "RefId":
   n.RefId = nil
  case "ExitDate":
   n.ExitDate = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "EntryDate":
   n.EntryDate = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SectionInfoRefId":
   n.SectionInfoRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSectionEnrollment")
        }
        return n
}

func (n *StudentSectionEnrollment) SetProperty(key string, value interface{}) *StudentSectionEnrollment {
        if n == nil {
                n, _ = StudentSectionEnrollmentPointer(StudentSectionEnrollment{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ExitDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ExitDate = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "EntryDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EntryDate = ((*String)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SectionInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SectionInfoRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSectionEnrollment")
        }
        return n
}

  func (s *StudentSectionEnrollment) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StudentSectionEnrollment) ExitDateRead() *String {
    if s.ExitDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ExitDate = ((*String)(v))
      }
      }
      return s.ExitDate
    }
  func (s *StudentSectionEnrollment) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentSectionEnrollment) EntryDateRead() *String {
    if s.EntryDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EntryDate = ((*String)(v))
      }
      }
      return s.EntryDate
    }
  func (s *StudentSectionEnrollment) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *StudentSectionEnrollment) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *StudentSectionEnrollment) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentSectionEnrollment) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentSectionEnrollment) SectionInfoRefIdRead() *String {
    if s.SectionInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SectionInfoRefId = ((*String)(v))
      }
      }
      return s.SectionInfoRefId
    }

  // XXXXX
func (t *ResourceUsage_ResourceReportColumn) CopyString(key string, value interface{}) *ResourceUsage_ResourceReportColumn {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ResourceUsage_ResourceReportColumn) CopyClone(key string, value interface{}) *ResourceUsage_ResourceReportColumn {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ResourceUsage_ResourceReportColumn) Unset(key string) *ResourceUsage_ResourceReportColumn {
        switch key {
  case "ColumnName":
   n.ColumnName = nil
  case "ColumnDelimiter":
   n.ColumnDelimiter = nil
  case "ColumnDescription":
   n.ColumnDescription = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_ResourceReportColumn")
        }
        return n
}

func (n *ResourceUsage_ResourceReportColumn) SetProperty(key string, value interface{}) *ResourceUsage_ResourceReportColumn {
        if n == nil {
                n, _ = ResourceUsage_ResourceReportColumnPointer(ResourceUsage_ResourceReportColumn{})
        }
        switch key {
    case "ColumnName":
    
    if v, ok:= StringPointer(value); ok {
      n.ColumnName = ((*String)(v))
      }
    case "ColumnDelimiter":
    
    if v, ok:= StringPointer(value); ok {
      n.ColumnDelimiter = ((*String)(v))
      }
    case "ColumnDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.ColumnDescription = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_ResourceReportColumn")
        }
        return n
}

  func (s *ResourceUsage_ResourceReportColumn) ColumnNameRead() *String {
    if s.ColumnName == nil {
    if v, ok:= StringPointer(""); ok {
      s.ColumnName = ((*String)(v))
      }
      }
      return s.ColumnName
    }
  func (s *ResourceUsage_ResourceReportColumn) ColumnDelimiterRead() *String {
    if s.ColumnDelimiter == nil {
    if v, ok:= StringPointer(""); ok {
      s.ColumnDelimiter = ((*String)(v))
      }
      }
      return s.ColumnDelimiter
    }
  func (s *ResourceUsage_ResourceReportColumn) ColumnDescriptionRead() *String {
    if s.ColumnDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.ColumnDescription = ((*String)(v))
      }
      }
      return s.ColumnDescription
    }

  // XXXXX
func (t *OtherIdType) CopyString(key string, value interface{}) *OtherIdType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *OtherIdType) CopyClone(key string, value interface{}) *OtherIdType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *OtherIdType) Unset(key string) *OtherIdType {
        switch key {
  case "Type":
   n.Type = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherIdType")
        }
        return n
}

func (n *OtherIdType) SetProperty(key string, value interface{}) *OtherIdType {
        if n == nil {
                n, _ = OtherIdTypePointer(OtherIdType{})
        }
        switch key {
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherIdType")
        }
        return n
}

  func (s *OtherIdType) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }
  func (s *OtherIdType) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *SystemRole) CopyString(key string, value interface{}) *SystemRole {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SystemRole) CopyClone(key string, value interface{}) *SystemRole {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SystemRole) Unset(key string) *SystemRole {
        switch key {
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "SystemContextList":
   n.SystemContextList = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "SIF_RefId":
   n.SIF_RefId = nil
  case "RefId":
   n.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole")
        }
        return n
}

func (n *SystemRole) SetProperty(key string, value interface{}) *SystemRole {
        if n == nil {
                n, _ = SystemRolePointer(SystemRole{})
        }
        switch key {
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "SystemContextList":
    if v, ok:= SystemRole_SystemContextListPointer(value); ok {
      n.SystemContextList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "SIF_RefId":
    if v, ok:= SystemRole_SIF_RefIdPointer(value); ok {
      n.SIF_RefId = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole")
        }
        return n
}

  func (s *SystemRole) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *SystemRole) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *SystemRole) SystemContextListRead() *SystemRole_SystemContextList {
    if s.SystemContextList == nil {
     if v, ok:= SystemRole_SystemContextListPointer(SystemRole_SystemContextList{}); ok {
      s.SystemContextList = v
      }
      }
      return s.SystemContextList
    }
  func (s *SystemRole) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *SystemRole) SIF_RefIdRead() *SystemRole_SIF_RefId {
    if s.SIF_RefId == nil {
     if v, ok:= SystemRole_SIF_RefIdPointer(SystemRole_SIF_RefId{}); ok {
      s.SIF_RefId = v
      }
      }
      return s.SIF_RefId
    }
  func (s *SystemRole) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }

  // XXXXX
func (t *PrincipalInfoType) CopyString(key string, value interface{}) *PrincipalInfoType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PrincipalInfoType) CopyClone(key string, value interface{}) *PrincipalInfoType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PrincipalInfoType) Unset(key string) *PrincipalInfoType {
        switch key {
  case "ContactTitle":
   n.ContactTitle = nil
  case "ContactName":
   n.ContactName = nil
  case "EmailList":
   n.EmailList = nil
  case "PhoneNumberList":
   n.PhoneNumberList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PrincipalInfoType")
        }
        return n
}

func (n *PrincipalInfoType) SetProperty(key string, value interface{}) *PrincipalInfoType {
        if n == nil {
                n, _ = PrincipalInfoTypePointer(PrincipalInfoType{})
        }
        switch key {
    case "ContactTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.ContactTitle = ((*String)(v))
      }
    case "ContactName":
    if v, ok:= NameOfRecordTypePointer(value); ok {
      n.ContactName = v
      }
    case "EmailList":
    if v, ok:= EmailListTypePointer(value); ok {
      n.EmailList = v
      }
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.PhoneNumberList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PrincipalInfoType")
        }
        return n
}

  func (s *PrincipalInfoType) ContactTitleRead() *String {
    if s.ContactTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.ContactTitle = ((*String)(v))
      }
      }
      return s.ContactTitle
    }
  func (s *PrincipalInfoType) ContactNameRead() *NameOfRecordType {
    if s.ContactName == nil {
     if v, ok:= NameOfRecordTypePointer(NameOfRecordType{}); ok {
      s.ContactName = v
      }
      }
      return s.ContactName
    }
  func (s *PrincipalInfoType) EmailListRead() *EmailListType {
    if s.EmailList == nil {
     if v, ok:= EmailListTypePointer(EmailListType{}); ok {
      s.EmailList = v
      }
      }
      return s.EmailList
    }
  func (s *PrincipalInfoType) PhoneNumberListRead() *PhoneNumberListType {
    if s.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.PhoneNumberList = v
      }
      }
      return s.PhoneNumberList
    }

  // XXXXX
func (t *StatsCohortYearLevelType) CopyString(key string, value interface{}) *StatsCohortYearLevelType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StatsCohortYearLevelType) CopyClone(key string, value interface{}) *StatsCohortYearLevelType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StatsCohortYearLevelType) Unset(key string) *StatsCohortYearLevelType {
        switch key {
  case "StatsCohortList":
   n.StatsCohortList = nil
  case "CohortYearLevel":
   n.CohortYearLevel = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StatsCohortYearLevelType")
        }
        return n
}

func (n *StatsCohortYearLevelType) SetProperty(key string, value interface{}) *StatsCohortYearLevelType {
        if n == nil {
                n, _ = StatsCohortYearLevelTypePointer(StatsCohortYearLevelType{})
        }
        switch key {
    case "StatsCohortList":
    if v, ok:= StatsCohortListTypePointer(value); ok {
      n.StatsCohortList = v
      }
    case "CohortYearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.CohortYearLevel = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StatsCohortYearLevelType")
        }
        return n
}

  func (s *StatsCohortYearLevelType) StatsCohortListRead() *StatsCohortListType {
    if s.StatsCohortList == nil {
     if v, ok:= StatsCohortListTypePointer(StatsCohortListType{}); ok {
      s.StatsCohortList = v
      }
      }
      return s.StatsCohortList
    }
  func (s *StatsCohortYearLevelType) CohortYearLevelRead() *YearLevelType {
    if s.CohortYearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.CohortYearLevel = v
      }
      }
      return s.CohortYearLevel
    }

  // XXXXX
func (t *OtherNameType) CopyString(key string, value interface{}) *OtherNameType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *OtherNameType) CopyClone(key string, value interface{}) *OtherNameType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *OtherNameType) Unset(key string) *OtherNameType {
        switch key {
  case "Type":
   n.Type = nil
  case "Title":
   n.Title = nil
  case "FamilyName":
   n.FamilyName = nil
  case "GivenName":
   n.GivenName = nil
  case "PreferredFamilyNameFirst":
   n.PreferredFamilyNameFirst = nil
  case "Suffix":
   n.Suffix = nil
  case "PreferredGivenName":
   n.PreferredGivenName = nil
  case "FamilyNameFirst":
   n.FamilyNameFirst = nil
  case "MiddleName":
   n.MiddleName = nil
  case "FullName":
   n.FullName = nil
  case "PreferredFamilyName":
   n.PreferredFamilyName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherNameType")
        }
        return n
}

func (n *OtherNameType) SetProperty(key string, value interface{}) *OtherNameType {
        if n == nil {
                n, _ = OtherNameTypePointer(OtherNameType{})
        }
        switch key {
    case "Type":
        if !CodesetContains(AUCodeSetsNameUsageTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNameUsageTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Type = ((*AUCodeSetsNameUsageTypeType)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.Title = ((*String)(v))
      }
    case "FamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.FamilyName = ((*String)(v))
      }
    case "GivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.GivenName = ((*String)(v))
      }
    case "PreferredFamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Suffix":
    
    if v, ok:= StringPointer(value); ok {
      n.Suffix = ((*String)(v))
      }
    case "PreferredGivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.PreferredGivenName = ((*String)(v))
      }
    case "FamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "MiddleName":
    
    if v, ok:= StringPointer(value); ok {
      n.MiddleName = ((*String)(v))
      }
    case "FullName":
    
    if v, ok:= StringPointer(value); ok {
      n.FullName = ((*String)(v))
      }
    case "PreferredFamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.PreferredFamilyName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherNameType")
        }
        return n
}

  func (s *OtherNameType) TypeRead() *AUCodeSetsNameUsageTypeType {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*AUCodeSetsNameUsageTypeType)(v))
      }
      }
      return s.Type
    }
  func (s *OtherNameType) TitleRead() *String {
    if s.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.Title = ((*String)(v))
      }
      }
      return s.Title
    }
  func (s *OtherNameType) FamilyNameRead() *String {
    if s.FamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.FamilyName = ((*String)(v))
      }
      }
      return s.FamilyName
    }
  func (s *OtherNameType) GivenNameRead() *String {
    if s.GivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.GivenName = ((*String)(v))
      }
      }
      return s.GivenName
    }
  func (s *OtherNameType) PreferredFamilyNameFirstRead() *AUCodeSetsYesOrNoCategoryType {
    if s.PreferredFamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.PreferredFamilyNameFirst
    }
  func (s *OtherNameType) SuffixRead() *String {
    if s.Suffix == nil {
    if v, ok:= StringPointer(""); ok {
      s.Suffix = ((*String)(v))
      }
      }
      return s.Suffix
    }
  func (s *OtherNameType) PreferredGivenNameRead() *String {
    if s.PreferredGivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreferredGivenName = ((*String)(v))
      }
      }
      return s.PreferredGivenName
    }
  func (s *OtherNameType) FamilyNameFirstRead() *AUCodeSetsYesOrNoCategoryType {
    if s.FamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.FamilyNameFirst
    }
  func (s *OtherNameType) MiddleNameRead() *String {
    if s.MiddleName == nil {
    if v, ok:= StringPointer(""); ok {
      s.MiddleName = ((*String)(v))
      }
      }
      return s.MiddleName
    }
  func (s *OtherNameType) FullNameRead() *String {
    if s.FullName == nil {
    if v, ok:= StringPointer(""); ok {
      s.FullName = ((*String)(v))
      }
      }
      return s.FullName
    }
  func (s *OtherNameType) PreferredFamilyNameRead() *String {
    if s.PreferredFamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreferredFamilyName = ((*String)(v))
      }
      }
      return s.PreferredFamilyName
    }

  // XXXXX
func (t *ReligionType) CopyString(key string, value interface{}) *ReligionType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ReligionType) CopyClone(key string, value interface{}) *ReligionType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ReligionType) Unset(key string) *ReligionType {
        switch key {
  case "Code":
   n.Code = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ReligionType")
        }
        return n
}

func (n *ReligionType) SetProperty(key string, value interface{}) *ReligionType {
        if n == nil {
                n, _ = ReligionTypePointer(ReligionType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ReligionType")
        }
        return n
}

  func (s *ReligionType) CodeRead() *AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType)(v))
      }
      }
      return s.Code
    }
  func (s *ReligionType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }

  // XXXXX
func (t *Invoice_InvoicedEntity) CopyString(key string, value interface{}) *Invoice_InvoicedEntity {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *Invoice_InvoicedEntity) CopyClone(key string, value interface{}) *Invoice_InvoicedEntity {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *Invoice_InvoicedEntity) Unset(key string) *Invoice_InvoicedEntity {
        switch key {
  case "Value":
   n.Value = nil
  case "SIF_RefObject":
   n.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Invoice_InvoicedEntity")
        }
        return n
}

func (n *Invoice_InvoicedEntity) SetProperty(key string, value interface{}) *Invoice_InvoicedEntity {
        if n == nil {
                n, _ = Invoice_InvoicedEntityPointer(Invoice_InvoicedEntity{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Invoice_InvoicedEntity")
        }
        return n
}

  func (s *Invoice_InvoicedEntity) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *Invoice_InvoicedEntity) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }

  // XXXXX
func (t *TimeTableScheduleType) CopyString(key string, value interface{}) *TimeTableScheduleType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TimeTableScheduleType) CopyClone(key string, value interface{}) *TimeTableScheduleType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TimeTableScheduleType) Unset(key string) *TimeTableScheduleType {
        switch key {
  case "Title":
   n.Title = nil
  case "TeachingPeriodsPerDay":
   n.TeachingPeriodsPerDay = nil
  case "SchoolLocalId":
   n.SchoolLocalId = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "SchoolName":
   n.SchoolName = nil
  case "PeriodsPerDay":
   n.PeriodsPerDay = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "EndDate":
   n.EndDate = nil
  case "StartDate":
   n.StartDate = nil
  case "TimeTableDayList":
   n.TimeTableDayList = nil
  case "DaysPerCycle":
   n.DaysPerCycle = nil
  case "LocalId":
   n.LocalId = nil
  case "TimeTableCreationDate":
   n.TimeTableCreationDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableScheduleType")
        }
        return n
}

func (n *TimeTableScheduleType) SetProperty(key string, value interface{}) *TimeTableScheduleType {
        if n == nil {
                n, _ = TimeTableScheduleTypePointer(TimeTableScheduleType{})
        }
        switch key {
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.Title = ((*String)(v))
      }
    case "TeachingPeriodsPerDay":
    
    if v, ok:= IntPointer(value); ok {
      n.TeachingPeriodsPerDay = ((*Int)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolName = ((*String)(v))
      }
    case "PeriodsPerDay":
    
    if v, ok:= IntPointer(value); ok {
      n.PeriodsPerDay = ((*Int)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EndDate = ((*String)(v))
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.StartDate = ((*String)(v))
      }
    case "TimeTableDayList":
    if v, ok:= TimeTableDayListTypePointer(value); ok {
      n.TimeTableDayList = v
      }
    case "DaysPerCycle":
    
    if v, ok:= IntPointer(value); ok {
      n.DaysPerCycle = ((*Int)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.LocalId = ((*LocalIdType)(v))
      }
    case "TimeTableCreationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.TimeTableCreationDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableScheduleType")
        }
        return n
}

  func (s *TimeTableScheduleType) TitleRead() *String {
    if s.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.Title = ((*String)(v))
      }
      }
      return s.Title
    }
  func (s *TimeTableScheduleType) TeachingPeriodsPerDayRead() *Int {
    if s.TeachingPeriodsPerDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.TeachingPeriodsPerDay = ((*Int)(v))
      }
      }
      return s.TeachingPeriodsPerDay
    }
  func (s *TimeTableScheduleType) SchoolLocalIdRead() *LocalIdType {
    if s.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SchoolLocalId
    }
  func (s *TimeTableScheduleType) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *TimeTableScheduleType) SchoolNameRead() *String {
    if s.SchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolName = ((*String)(v))
      }
      }
      return s.SchoolName
    }
  func (s *TimeTableScheduleType) PeriodsPerDayRead() *Int {
    if s.PeriodsPerDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.PeriodsPerDay = ((*Int)(v))
      }
      }
      return s.PeriodsPerDay
    }
  func (s *TimeTableScheduleType) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *TimeTableScheduleType) EndDateRead() *String {
    if s.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndDate = ((*String)(v))
      }
      }
      return s.EndDate
    }
  func (s *TimeTableScheduleType) StartDateRead() *String {
    if s.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartDate = ((*String)(v))
      }
      }
      return s.StartDate
    }
  func (s *TimeTableScheduleType) TimeTableDayListRead() *TimeTableDayListType {
    if s.TimeTableDayList == nil {
     if v, ok:= TimeTableDayListTypePointer(TimeTableDayListType{}); ok {
      s.TimeTableDayList = v
      }
      }
      return s.TimeTableDayList
    }
  func (s *TimeTableScheduleType) DaysPerCycleRead() *Int {
    if s.DaysPerCycle == nil {
    if v, ok:= IntPointer(0); ok {
      s.DaysPerCycle = ((*Int)(v))
      }
      }
      return s.DaysPerCycle
    }
  func (s *TimeTableScheduleType) LocalIdRead() *LocalIdType {
    if s.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.LocalId
    }
  func (s *TimeTableScheduleType) TimeTableCreationDateRead() *String {
    if s.TimeTableCreationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeTableCreationDate = ((*String)(v))
      }
      }
      return s.TimeTableCreationDate
    }

  // XXXXX
func (t *ContactType) CopyString(key string, value interface{}) *ContactType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ContactType) CopyClone(key string, value interface{}) *ContactType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ContactType) Unset(key string) *ContactType {
        switch key {
  case "PhoneNumber":
   n.PhoneNumber = nil
  case "Name":
   n.Name = nil
  case "Email":
   n.Email = nil
  case "Address":
   n.Address = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ContactType")
        }
        return n
}

func (n *ContactType) SetProperty(key string, value interface{}) *ContactType {
        if n == nil {
                n, _ = ContactTypePointer(ContactType{})
        }
        switch key {
    case "PhoneNumber":
    if v, ok:= PhoneNumberTypePointer(value); ok {
      n.PhoneNumber = v
      }
    case "Name":
    if v, ok:= NameTypePointer(value); ok {
      n.Name = v
      }
    case "Email":
    if v, ok:= EmailTypePointer(value); ok {
      n.Email = v
      }
    case "Address":
    if v, ok:= AddressTypePointer(value); ok {
      n.Address = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ContactType")
        }
        return n
}

  func (s *ContactType) PhoneNumberRead() *PhoneNumberType {
    if s.PhoneNumber == nil {
     if v, ok:= PhoneNumberTypePointer(PhoneNumberType{}); ok {
      s.PhoneNumber = v
      }
      }
      return s.PhoneNumber
    }
  func (s *ContactType) NameRead() *NameType {
    if s.Name == nil {
     if v, ok:= NameTypePointer(NameType{}); ok {
      s.Name = v
      }
      }
      return s.Name
    }
  func (s *ContactType) EmailRead() *EmailType {
    if s.Email == nil {
     if v, ok:= EmailTypePointer(EmailType{}); ok {
      s.Email = v
      }
      }
      return s.Email
    }
  func (s *ContactType) AddressRead() *AddressType {
    if s.Address == nil {
     if v, ok:= AddressTypePointer(AddressType{}); ok {
      s.Address = v
      }
      }
      return s.Address
    }

  // XXXXX
func (t *SchoolInfo_OtherLEA) CopyString(key string, value interface{}) *SchoolInfo_OtherLEA {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SchoolInfo_OtherLEA) CopyClone(key string, value interface{}) *SchoolInfo_OtherLEA {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SchoolInfo_OtherLEA) Unset(key string) *SchoolInfo_OtherLEA {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolInfo_OtherLEA")
        }
        return n
}

func (n *SchoolInfo_OtherLEA) SetProperty(key string, value interface{}) *SchoolInfo_OtherLEA {
        if n == nil {
                n, _ = SchoolInfo_OtherLEAPointer(SchoolInfo_OtherLEA{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolInfo_OtherLEA")
        }
        return n
}

  func (s *SchoolInfo_OtherLEA) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *SchoolInfo_OtherLEA) ValueRead() *RefIdType {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*RefIdType)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *ResourceUsage) CopyString(key string, value interface{}) *ResourceUsage {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ResourceUsage) CopyClone(key string, value interface{}) *ResourceUsage {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ResourceUsage) Unset(key string) *ResourceUsage {
        switch key {
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "ResourceReportColumnList":
   n.ResourceReportColumnList = nil
  case "RefId":
   n.RefId = nil
  case "ResourceReportLineList":
   n.ResourceReportLineList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "ResourceUsageContentType":
   n.ResourceUsageContentType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage")
        }
        return n
}

func (n *ResourceUsage) SetProperty(key string, value interface{}) *ResourceUsage {
        if n == nil {
                n, _ = ResourceUsagePointer(ResourceUsage{})
        }
        switch key {
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "ResourceReportColumnList":
    if v, ok:= ResourceUsage_ResourceReportColumnListPointer(value); ok {
      n.ResourceReportColumnList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "ResourceReportLineList":
    if v, ok:= ResourceUsage_ResourceReportLineListPointer(value); ok {
      n.ResourceReportLineList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "ResourceUsageContentType":
    if v, ok:= ResourceUsage_ResourceUsageContentTypePointer(value); ok {
      n.ResourceUsageContentType = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage")
        }
        return n
}

  func (s *ResourceUsage) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *ResourceUsage) ResourceReportColumnListRead() *ResourceUsage_ResourceReportColumnList {
    if s.ResourceReportColumnList == nil {
     if v, ok:= ResourceUsage_ResourceReportColumnListPointer(ResourceUsage_ResourceReportColumnList{}); ok {
      s.ResourceReportColumnList = v
      }
      }
      return s.ResourceReportColumnList
    }
  func (s *ResourceUsage) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *ResourceUsage) ResourceReportLineListRead() *ResourceUsage_ResourceReportLineList {
    if s.ResourceReportLineList == nil {
     if v, ok:= ResourceUsage_ResourceReportLineListPointer(ResourceUsage_ResourceReportLineList{}); ok {
      s.ResourceReportLineList = v
      }
      }
      return s.ResourceReportLineList
    }
  func (s *ResourceUsage) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *ResourceUsage) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *ResourceUsage) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *ResourceUsage) ResourceUsageContentTypeRead() *ResourceUsage_ResourceUsageContentType {
    if s.ResourceUsageContentType == nil {
     if v, ok:= ResourceUsage_ResourceUsageContentTypePointer(ResourceUsage_ResourceUsageContentType{}); ok {
      s.ResourceUsageContentType = v
      }
      }
      return s.ResourceUsageContentType
    }

  // XXXXX
func (t *LifeCycleType) CopyString(key string, value interface{}) *LifeCycleType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LifeCycleType) CopyClone(key string, value interface{}) *LifeCycleType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LifeCycleType) Unset(key string) *LifeCycleType {
        switch key {
  case "TimeElements":
   n.TimeElements = nil
  case "Created":
   n.Created = nil
  case "ModificationHistory":
   n.ModificationHistory = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType")
        }
        return n
}

func (n *LifeCycleType) SetProperty(key string, value interface{}) *LifeCycleType {
        if n == nil {
                n, _ = LifeCycleTypePointer(LifeCycleType{})
        }
        switch key {
    case "TimeElements":
    if v, ok:= LifeCycleType_TimeElementsPointer(value); ok {
      n.TimeElements = v
      }
    case "Created":
    if v, ok:= LifeCycleType_CreatedPointer(value); ok {
      n.Created = v
      }
    case "ModificationHistory":
    if v, ok:= LifeCycleType_ModificationHistoryPointer(value); ok {
      n.ModificationHistory = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType")
        }
        return n
}

  func (s *LifeCycleType) TimeElementsRead() *LifeCycleType_TimeElements {
    if s.TimeElements == nil {
     if v, ok:= LifeCycleType_TimeElementsPointer(LifeCycleType_TimeElements{}); ok {
      s.TimeElements = v
      }
      }
      return s.TimeElements
    }
  func (s *LifeCycleType) CreatedRead() *LifeCycleType_Created {
    if s.Created == nil {
     if v, ok:= LifeCycleType_CreatedPointer(LifeCycleType_Created{}); ok {
      s.Created = v
      }
      }
      return s.Created
    }
  func (s *LifeCycleType) ModificationHistoryRead() *LifeCycleType_ModificationHistory {
    if s.ModificationHistory == nil {
     if v, ok:= LifeCycleType_ModificationHistoryPointer(LifeCycleType_ModificationHistory{}); ok {
      s.ModificationHistory = v
      }
      }
      return s.ModificationHistory
    }

  // XXXXX
func (t *FollowUpActionType) CopyString(key string, value interface{}) *FollowUpActionType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *FollowUpActionType) CopyClone(key string, value interface{}) *FollowUpActionType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *FollowUpActionType) Unset(key string) *FollowUpActionType {
        switch key {
  case "FollowUpActionCategory":
   n.FollowUpActionCategory = nil
  case "WellbeingResponseRefId":
   n.WellbeingResponseRefId = nil
  case "FollowUpDetails":
   n.FollowUpDetails = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FollowUpActionType")
        }
        return n
}

func (n *FollowUpActionType) SetProperty(key string, value interface{}) *FollowUpActionType {
        if n == nil {
                n, _ = FollowUpActionTypePointer(FollowUpActionType{})
        }
        switch key {
    case "FollowUpActionCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.FollowUpActionCategory = ((*String)(v))
      }
    case "WellbeingResponseRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.WellbeingResponseRefId = ((*String)(v))
      }
    case "FollowUpDetails":
    
    if v, ok:= StringPointer(value); ok {
      n.FollowUpDetails = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FollowUpActionType")
        }
        return n
}

  func (s *FollowUpActionType) FollowUpActionCategoryRead() *String {
    if s.FollowUpActionCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.FollowUpActionCategory = ((*String)(v))
      }
      }
      return s.FollowUpActionCategory
    }
  func (s *FollowUpActionType) WellbeingResponseRefIdRead() *String {
    if s.WellbeingResponseRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.WellbeingResponseRefId = ((*String)(v))
      }
      }
      return s.WellbeingResponseRefId
    }
  func (s *FollowUpActionType) FollowUpDetailsRead() *String {
    if s.FollowUpDetails == nil {
    if v, ok:= StringPointer(""); ok {
      s.FollowUpDetails = ((*String)(v))
      }
      }
      return s.FollowUpDetails
    }

  // XXXXX
func (t *AggregateCharacteristicInfo) CopyString(key string, value interface{}) *AggregateCharacteristicInfo {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AggregateCharacteristicInfo) CopyClone(key string, value interface{}) *AggregateCharacteristicInfo {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AggregateCharacteristicInfo) Unset(key string) *AggregateCharacteristicInfo {
        switch key {
  case "Definition":
   n.Definition = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "ElementName":
   n.ElementName = nil
  case "RefId":
   n.RefId = nil
  case "Description":
   n.Description = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateCharacteristicInfo")
        }
        return n
}

func (n *AggregateCharacteristicInfo) SetProperty(key string, value interface{}) *AggregateCharacteristicInfo {
        if n == nil {
                n, _ = AggregateCharacteristicInfoPointer(AggregateCharacteristicInfo{})
        }
        switch key {
    case "Definition":
    
    if v, ok:= StringPointer(value); ok {
      n.Definition = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "ElementName":
    
    if v, ok:= StringPointer(value); ok {
      n.ElementName = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.Description = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateCharacteristicInfo")
        }
        return n
}

  func (s *AggregateCharacteristicInfo) DefinitionRead() *String {
    if s.Definition == nil {
    if v, ok:= StringPointer(""); ok {
      s.Definition = ((*String)(v))
      }
      }
      return s.Definition
    }
  func (s *AggregateCharacteristicInfo) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *AggregateCharacteristicInfo) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *AggregateCharacteristicInfo) ElementNameRead() *String {
    if s.ElementName == nil {
    if v, ok:= StringPointer(""); ok {
      s.ElementName = ((*String)(v))
      }
      }
      return s.ElementName
    }
  func (s *AggregateCharacteristicInfo) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *AggregateCharacteristicInfo) DescriptionRead() *String {
    if s.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.Description = ((*String)(v))
      }
      }
      return s.Description
    }
  func (s *AggregateCharacteristicInfo) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }

  // XXXXX
func (t *TimeElementType_SpanGap) CopyString(key string, value interface{}) *TimeElementType_SpanGap {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TimeElementType_SpanGap) CopyClone(key string, value interface{}) *TimeElementType_SpanGap {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TimeElementType_SpanGap) Unset(key string) *TimeElementType_SpanGap {
        switch key {
  case "StartDateTime":
   n.StartDateTime = nil
  case "Name":
   n.Name = nil
  case "Type":
   n.Type = nil
  case "Value":
   n.Value = nil
  case "EndDateTime":
   n.EndDateTime = nil
  case "Code":
   n.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeElementType_SpanGap")
        }
        return n
}

func (n *TimeElementType_SpanGap) SetProperty(key string, value interface{}) *TimeElementType_SpanGap {
        if n == nil {
                n, _ = TimeElementType_SpanGapPointer(TimeElementType_SpanGap{})
        }
        switch key {
    case "StartDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.StartDateTime = ((*String)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.Name = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.Type = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "EndDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.EndDateTime = ((*String)(v))
      }
    case "Code":
    
    if v, ok:= StringPointer(value); ok {
      n.Code = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeElementType_SpanGap")
        }
        return n
}

  func (s *TimeElementType_SpanGap) StartDateTimeRead() *String {
    if s.StartDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartDateTime = ((*String)(v))
      }
      }
      return s.StartDateTime
    }
  func (s *TimeElementType_SpanGap) NameRead() *String {
    if s.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.Name = ((*String)(v))
      }
      }
      return s.Name
    }
  func (s *TimeElementType_SpanGap) TypeRead() *String {
    if s.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.Type = ((*String)(v))
      }
      }
      return s.Type
    }
  func (s *TimeElementType_SpanGap) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *TimeElementType_SpanGap) EndDateTimeRead() *String {
    if s.EndDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.EndDateTime = ((*String)(v))
      }
      }
      return s.EndDateTime
    }
  func (s *TimeElementType_SpanGap) CodeRead() *String {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*String)(v))
      }
      }
      return s.Code
    }

  // XXXXX
func (t *StudentSchoolEnrollment) CopyString(key string, value interface{}) *StudentSchoolEnrollment {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentSchoolEnrollment) CopyClone(key string, value interface{}) *StudentSchoolEnrollment {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentSchoolEnrollment) Unset(key string) *StudentSchoolEnrollment {
        switch key {
  case "Homeroom":
   n.Homeroom = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.SchoolInfoRefId = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "ExitStatus":
   n.ExitStatus = nil
  case "InternationalStudent":
   n.InternationalStudent = nil
  case "ClassCode":
   n.ClassCode = nil
  case "CatchmentStatus":
   n.CatchmentStatus = nil
  case "DestinationSchool":
   n.DestinationSchool = nil
  case "Advisor":
   n.Advisor = nil
  case "DisabilityCategory":
   n.DisabilityCategory = nil
  case "Homegroup":
   n.Homegroup = nil
  case "CensusAge":
   n.CensusAge = nil
  case "PromotionInfo":
   n.PromotionInfo = nil
  case "BoardingStatus":
   n.BoardingStatus = nil
  case "MembershipType":
   n.MembershipType = nil
  case "StudentSubjectChoiceList":
   n.StudentSubjectChoiceList = nil
  case "ReportingSchool":
   n.ReportingSchool = nil
  case "Calendar":
   n.Calendar = nil
  case "SchoolYear":
   n.SchoolYear = nil
  case "ExitType":
   n.ExitType = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "IndividualLearningPlan":
   n.IndividualLearningPlan = nil
  case "TestLevel":
   n.TestLevel = nil
  case "EntryType":
   n.EntryType = nil
  case "House":
   n.House = nil
  case "YearLevel":
   n.YearLevel = nil
  case "ExitDate":
   n.ExitDate = nil
  case "StartedAtSchoolDate":
   n.StartedAtSchoolDate = nil
  case "DisabilityLevelOfAdjustment":
   n.DisabilityLevelOfAdjustment = nil
  case "FFPOS":
   n.FFPOS = nil
  case "PublishingPermissionList":
   n.PublishingPermissionList = nil
  case "StudentGroupList":
   n.StudentGroupList = nil
  case "StudentPersonalRefId":
   n.StudentPersonalRefId = nil
  case "PreviousSchoolName":
   n.PreviousSchoolName = nil
  case "FTPTStatus":
   n.FTPTStatus = nil
  case "DistanceEducationStudent":
   n.DistanceEducationStudent = nil
  case "RefId":
   n.RefId = nil
  case "TimeFrame":
   n.TimeFrame = nil
  case "DestinationSchoolName":
   n.DestinationSchoolName = nil
  case "PreviousSchool":
   n.PreviousSchool = nil
  case "ACARASchoolId":
   n.ACARASchoolId = nil
  case "EntryDate":
   n.EntryDate = nil
  case "RecordClosureReason":
   n.RecordClosureReason = nil
  case "FTE":
   n.FTE = nil
  case "Counselor":
   n.Counselor = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment")
        }
        return n
}

func (n *StudentSchoolEnrollment) SetProperty(key string, value interface{}) *StudentSchoolEnrollment {
        if n == nil {
                n, _ = StudentSchoolEnrollmentPointer(StudentSchoolEnrollment{})
        }
        switch key {
    case "Homeroom":
    if v, ok:= StudentSchoolEnrollment_HomeroomPointer(value); ok {
      n.Homeroom = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolInfoRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "ExitStatus":
    if v, ok:= StudentExitStatusContainerTypePointer(value); ok {
      n.ExitStatus = v
      }
    case "InternationalStudent":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.InternationalStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ClassCode":
    
    if v, ok:= StringPointer(value); ok {
      n.ClassCode = ((*String)(v))
      }
    case "CatchmentStatus":
    if v, ok:= CatchmentStatusContainerTypePointer(value); ok {
      n.CatchmentStatus = v
      }
    case "DestinationSchool":
    
    if v, ok:= StringPointer(value); ok {
      n.DestinationSchool = ((*LocalIdType)(v))
      }
    case "Advisor":
    if v, ok:= StudentSchoolEnrollment_AdvisorPointer(value); ok {
      n.Advisor = v
      }
    case "DisabilityCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.DisabilityCategory = ((*String)(v))
      }
    case "Homegroup":
    
    if v, ok:= StringPointer(value); ok {
      n.Homegroup = ((*String)(v))
      }
    case "CensusAge":
    
    if v, ok:= FloatPointer(value); ok {
      n.CensusAge = ((*Float)(v))
      }
    case "PromotionInfo":
    if v, ok:= PromotionInfoTypePointer(value); ok {
      n.PromotionInfo = v
      }
    case "BoardingStatus":
        if !CodesetContains(AUCodeSetsBoardingType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsBoardingType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.BoardingStatus = ((*AUCodeSetsBoardingType)(v))
      }
    case "MembershipType":
        if !CodesetContains(AUCodeSetsSchoolEnrollmentTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolEnrollmentTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.MembershipType = ((*AUCodeSetsSchoolEnrollmentTypeType)(v))
      }
    case "StudentSubjectChoiceList":
    if v, ok:= StudentSubjectChoiceListTypePointer(value); ok {
      n.StudentSubjectChoiceList = v
      }
    case "ReportingSchool":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ReportingSchool = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Calendar":
    if v, ok:= StudentSchoolEnrollment_CalendarPointer(value); ok {
      n.Calendar = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.SchoolYear = ((*SchoolYearType)(v))
      }
    case "ExitType":
    if v, ok:= StudentExitContainerTypePointer(value); ok {
      n.ExitType = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "IndividualLearningPlan":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.IndividualLearningPlan = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "TestLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.TestLevel = v
      }
    case "EntryType":
    if v, ok:= StudentEntryContainerTypePointer(value); ok {
      n.EntryType = v
      }
    case "House":
    
    if v, ok:= StringPointer(value); ok {
      n.House = ((*String)(v))
      }
    case "YearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.YearLevel = v
      }
    case "ExitDate":
    
    if v, ok:= StringPointer(value); ok {
      n.ExitDate = ((*String)(v))
      }
    case "StartedAtSchoolDate":
    
    if v, ok:= StringPointer(value); ok {
      n.StartedAtSchoolDate = ((*String)(v))
      }
    case "DisabilityLevelOfAdjustment":
    
    if v, ok:= StringPointer(value); ok {
      n.DisabilityLevelOfAdjustment = ((*String)(v))
      }
    case "FFPOS":
        if !CodesetContains(AUCodeSetsFFPOSStatusCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsFFPOSStatusCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.FFPOS = ((*AUCodeSetsFFPOSStatusCodeType)(v))
      }
    case "PublishingPermissionList":
    if v, ok:= PublishingPermissionListTypePointer(value); ok {
      n.PublishingPermissionList = v
      }
    case "StudentGroupList":
    if v, ok:= StudentGroupListTypePointer(value); ok {
      n.StudentGroupList = v
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.StudentPersonalRefId = ((*String)(v))
      }
    case "PreviousSchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.PreviousSchoolName = ((*String)(v))
      }
    case "FTPTStatus":
        if !CodesetContains(AUCodeSetsFTPTStatusCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsFTPTStatusCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.FTPTStatus = ((*AUCodeSetsFTPTStatusCodeType)(v))
      }
    case "DistanceEducationStudent":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.DistanceEducationStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "TimeFrame":
        if !CodesetContains(AUCodeSetsEnrollmentTimeFrameType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEnrollmentTimeFrameType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.TimeFrame = ((*AUCodeSetsEnrollmentTimeFrameType)(v))
      }
    case "DestinationSchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.DestinationSchoolName = ((*String)(v))
      }
    case "PreviousSchool":
    
    if v, ok:= StringPointer(value); ok {
      n.PreviousSchool = ((*LocalIdType)(v))
      }
    case "ACARASchoolId":
    
    if v, ok:= StringPointer(value); ok {
      n.ACARASchoolId = ((*LocalIdType)(v))
      }
    case "EntryDate":
    
    if v, ok:= StringPointer(value); ok {
      n.EntryDate = ((*String)(v))
      }
    case "RecordClosureReason":
    
    if v, ok:= StringPointer(value); ok {
      n.RecordClosureReason = ((*String)(v))
      }
    case "FTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.FTE = ((*Float)(v))
      }
    case "Counselor":
    if v, ok:= StudentSchoolEnrollment_CounselorPointer(value); ok {
      n.Counselor = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment")
        }
        return n
}

  func (s *StudentSchoolEnrollment) HomeroomRead() *StudentSchoolEnrollment_Homeroom {
    if s.Homeroom == nil {
     if v, ok:= StudentSchoolEnrollment_HomeroomPointer(StudentSchoolEnrollment_Homeroom{}); ok {
      s.Homeroom = v
      }
      }
      return s.Homeroom
    }
  func (s *StudentSchoolEnrollment) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *StudentSchoolEnrollment) SchoolInfoRefIdRead() *String {
    if s.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.SchoolInfoRefId
    }
  func (s *StudentSchoolEnrollment) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *StudentSchoolEnrollment) ExitStatusRead() *StudentExitStatusContainerType {
    if s.ExitStatus == nil {
     if v, ok:= StudentExitStatusContainerTypePointer(StudentExitStatusContainerType{}); ok {
      s.ExitStatus = v
      }
      }
      return s.ExitStatus
    }
  func (s *StudentSchoolEnrollment) InternationalStudentRead() *AUCodeSetsYesOrNoCategoryType {
    if s.InternationalStudent == nil {
    if v, ok:= StringPointer(""); ok {
      s.InternationalStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.InternationalStudent
    }
  func (s *StudentSchoolEnrollment) ClassCodeRead() *String {
    if s.ClassCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.ClassCode = ((*String)(v))
      }
      }
      return s.ClassCode
    }
  func (s *StudentSchoolEnrollment) CatchmentStatusRead() *CatchmentStatusContainerType {
    if s.CatchmentStatus == nil {
     if v, ok:= CatchmentStatusContainerTypePointer(CatchmentStatusContainerType{}); ok {
      s.CatchmentStatus = v
      }
      }
      return s.CatchmentStatus
    }
  func (s *StudentSchoolEnrollment) DestinationSchoolRead() *LocalIdType {
    if s.DestinationSchool == nil {
    if v, ok:= StringPointer(""); ok {
      s.DestinationSchool = ((*LocalIdType)(v))
      }
      }
      return s.DestinationSchool
    }
  func (s *StudentSchoolEnrollment) AdvisorRead() *StudentSchoolEnrollment_Advisor {
    if s.Advisor == nil {
     if v, ok:= StudentSchoolEnrollment_AdvisorPointer(StudentSchoolEnrollment_Advisor{}); ok {
      s.Advisor = v
      }
      }
      return s.Advisor
    }
  func (s *StudentSchoolEnrollment) DisabilityCategoryRead() *String {
    if s.DisabilityCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.DisabilityCategory = ((*String)(v))
      }
      }
      return s.DisabilityCategory
    }
  func (s *StudentSchoolEnrollment) HomegroupRead() *String {
    if s.Homegroup == nil {
    if v, ok:= StringPointer(""); ok {
      s.Homegroup = ((*String)(v))
      }
      }
      return s.Homegroup
    }
  func (s *StudentSchoolEnrollment) CensusAgeRead() *Float {
    if s.CensusAge == nil {
    if v, ok:= FloatPointer(0); ok {
      s.CensusAge = ((*Float)(v))
      }
      }
      return s.CensusAge
    }
  func (s *StudentSchoolEnrollment) PromotionInfoRead() *PromotionInfoType {
    if s.PromotionInfo == nil {
     if v, ok:= PromotionInfoTypePointer(PromotionInfoType{}); ok {
      s.PromotionInfo = v
      }
      }
      return s.PromotionInfo
    }
  func (s *StudentSchoolEnrollment) BoardingStatusRead() *AUCodeSetsBoardingType {
    if s.BoardingStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.BoardingStatus = ((*AUCodeSetsBoardingType)(v))
      }
      }
      return s.BoardingStatus
    }
  func (s *StudentSchoolEnrollment) MembershipTypeRead() *AUCodeSetsSchoolEnrollmentTypeType {
    if s.MembershipType == nil {
    if v, ok:= StringPointer(""); ok {
      s.MembershipType = ((*AUCodeSetsSchoolEnrollmentTypeType)(v))
      }
      }
      return s.MembershipType
    }
  func (s *StudentSchoolEnrollment) StudentSubjectChoiceListRead() *StudentSubjectChoiceListType {
    if s.StudentSubjectChoiceList == nil {
     if v, ok:= StudentSubjectChoiceListTypePointer(StudentSubjectChoiceListType{}); ok {
      s.StudentSubjectChoiceList = v
      }
      }
      return s.StudentSubjectChoiceList
    }
  func (s *StudentSchoolEnrollment) ReportingSchoolRead() *AUCodeSetsYesOrNoCategoryType {
    if s.ReportingSchool == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReportingSchool = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.ReportingSchool
    }
  func (s *StudentSchoolEnrollment) CalendarRead() *StudentSchoolEnrollment_Calendar {
    if s.Calendar == nil {
     if v, ok:= StudentSchoolEnrollment_CalendarPointer(StudentSchoolEnrollment_Calendar{}); ok {
      s.Calendar = v
      }
      }
      return s.Calendar
    }
  func (s *StudentSchoolEnrollment) SchoolYearRead() *SchoolYearType {
    if s.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.SchoolYear
    }
  func (s *StudentSchoolEnrollment) ExitTypeRead() *StudentExitContainerType {
    if s.ExitType == nil {
     if v, ok:= StudentExitContainerTypePointer(StudentExitContainerType{}); ok {
      s.ExitType = v
      }
      }
      return s.ExitType
    }
  func (s *StudentSchoolEnrollment) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *StudentSchoolEnrollment) IndividualLearningPlanRead() *AUCodeSetsYesOrNoCategoryType {
    if s.IndividualLearningPlan == nil {
    if v, ok:= StringPointer(""); ok {
      s.IndividualLearningPlan = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.IndividualLearningPlan
    }
  func (s *StudentSchoolEnrollment) TestLevelRead() *YearLevelType {
    if s.TestLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.TestLevel = v
      }
      }
      return s.TestLevel
    }
  func (s *StudentSchoolEnrollment) EntryTypeRead() *StudentEntryContainerType {
    if s.EntryType == nil {
     if v, ok:= StudentEntryContainerTypePointer(StudentEntryContainerType{}); ok {
      s.EntryType = v
      }
      }
      return s.EntryType
    }
  func (s *StudentSchoolEnrollment) HouseRead() *String {
    if s.House == nil {
    if v, ok:= StringPointer(""); ok {
      s.House = ((*String)(v))
      }
      }
      return s.House
    }
  func (s *StudentSchoolEnrollment) YearLevelRead() *YearLevelType {
    if s.YearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.YearLevel = v
      }
      }
      return s.YearLevel
    }
  func (s *StudentSchoolEnrollment) ExitDateRead() *String {
    if s.ExitDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.ExitDate = ((*String)(v))
      }
      }
      return s.ExitDate
    }
  func (s *StudentSchoolEnrollment) StartedAtSchoolDateRead() *String {
    if s.StartedAtSchoolDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.StartedAtSchoolDate = ((*String)(v))
      }
      }
      return s.StartedAtSchoolDate
    }
  func (s *StudentSchoolEnrollment) DisabilityLevelOfAdjustmentRead() *String {
    if s.DisabilityLevelOfAdjustment == nil {
    if v, ok:= StringPointer(""); ok {
      s.DisabilityLevelOfAdjustment = ((*String)(v))
      }
      }
      return s.DisabilityLevelOfAdjustment
    }
  func (s *StudentSchoolEnrollment) FFPOSRead() *AUCodeSetsFFPOSStatusCodeType {
    if s.FFPOS == nil {
    if v, ok:= StringPointer(""); ok {
      s.FFPOS = ((*AUCodeSetsFFPOSStatusCodeType)(v))
      }
      }
      return s.FFPOS
    }
  func (s *StudentSchoolEnrollment) PublishingPermissionListRead() *PublishingPermissionListType {
    if s.PublishingPermissionList == nil {
     if v, ok:= PublishingPermissionListTypePointer(PublishingPermissionListType{}); ok {
      s.PublishingPermissionList = v
      }
      }
      return s.PublishingPermissionList
    }
  func (s *StudentSchoolEnrollment) StudentGroupListRead() *StudentGroupListType {
    if s.StudentGroupList == nil {
     if v, ok:= StudentGroupListTypePointer(StudentGroupListType{}); ok {
      s.StudentGroupList = v
      }
      }
      return s.StudentGroupList
    }
  func (s *StudentSchoolEnrollment) StudentPersonalRefIdRead() *String {
    if s.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.StudentPersonalRefId
    }
  func (s *StudentSchoolEnrollment) PreviousSchoolNameRead() *String {
    if s.PreviousSchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreviousSchoolName = ((*String)(v))
      }
      }
      return s.PreviousSchoolName
    }
  func (s *StudentSchoolEnrollment) FTPTStatusRead() *AUCodeSetsFTPTStatusCodeType {
    if s.FTPTStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.FTPTStatus = ((*AUCodeSetsFTPTStatusCodeType)(v))
      }
      }
      return s.FTPTStatus
    }
  func (s *StudentSchoolEnrollment) DistanceEducationStudentRead() *AUCodeSetsYesOrNoCategoryType {
    if s.DistanceEducationStudent == nil {
    if v, ok:= StringPointer(""); ok {
      s.DistanceEducationStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.DistanceEducationStudent
    }
  func (s *StudentSchoolEnrollment) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *StudentSchoolEnrollment) TimeFrameRead() *AUCodeSetsEnrollmentTimeFrameType {
    if s.TimeFrame == nil {
    if v, ok:= StringPointer(""); ok {
      s.TimeFrame = ((*AUCodeSetsEnrollmentTimeFrameType)(v))
      }
      }
      return s.TimeFrame
    }
  func (s *StudentSchoolEnrollment) DestinationSchoolNameRead() *String {
    if s.DestinationSchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.DestinationSchoolName = ((*String)(v))
      }
      }
      return s.DestinationSchoolName
    }
  func (s *StudentSchoolEnrollment) PreviousSchoolRead() *LocalIdType {
    if s.PreviousSchool == nil {
    if v, ok:= StringPointer(""); ok {
      s.PreviousSchool = ((*LocalIdType)(v))
      }
      }
      return s.PreviousSchool
    }
  func (s *StudentSchoolEnrollment) ACARASchoolIdRead() *LocalIdType {
    if s.ACARASchoolId == nil {
    if v, ok:= StringPointer(""); ok {
      s.ACARASchoolId = ((*LocalIdType)(v))
      }
      }
      return s.ACARASchoolId
    }
  func (s *StudentSchoolEnrollment) EntryDateRead() *String {
    if s.EntryDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.EntryDate = ((*String)(v))
      }
      }
      return s.EntryDate
    }
  func (s *StudentSchoolEnrollment) RecordClosureReasonRead() *String {
    if s.RecordClosureReason == nil {
    if v, ok:= StringPointer(""); ok {
      s.RecordClosureReason = ((*String)(v))
      }
      }
      return s.RecordClosureReason
    }
  func (s *StudentSchoolEnrollment) FTERead() *Float {
    if s.FTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.FTE = ((*Float)(v))
      }
      }
      return s.FTE
    }
  func (s *StudentSchoolEnrollment) CounselorRead() *StudentSchoolEnrollment_Counselor {
    if s.Counselor == nil {
     if v, ok:= StudentSchoolEnrollment_CounselorPointer(StudentSchoolEnrollment_Counselor{}); ok {
      s.Counselor = v
      }
      }
      return s.Counselor
    }

  // XXXXX
func (t *ProgramFundingSourceType) CopyString(key string, value interface{}) *ProgramFundingSourceType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ProgramFundingSourceType) CopyClone(key string, value interface{}) *ProgramFundingSourceType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ProgramFundingSourceType) Unset(key string) *ProgramFundingSourceType {
        switch key {
  case "Code":
   n.Code = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ProgramFundingSourceType")
        }
        return n
}

func (n *ProgramFundingSourceType) SetProperty(key string, value interface{}) *ProgramFundingSourceType {
        if n == nil {
                n, _ = ProgramFundingSourceTypePointer(ProgramFundingSourceType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsProgramFundingSourceCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsProgramFundingSourceCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsProgramFundingSourceCodeType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ProgramFundingSourceType")
        }
        return n
}

  func (s *ProgramFundingSourceType) CodeRead() *AUCodeSetsProgramFundingSourceCodeType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsProgramFundingSourceCodeType)(v))
      }
      }
      return s.Code
    }
  func (s *ProgramFundingSourceType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }

  // XXXXX
func (t *NAPTestItem2Type) CopyString(key string, value interface{}) *NAPTestItem2Type {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *NAPTestItem2Type) CopyClone(key string, value interface{}) *NAPTestItem2Type {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *NAPTestItem2Type) Unset(key string) *NAPTestItem2Type {
        switch key {
  case "SequenceNumber":
   n.SequenceNumber = nil
  case "TestItemRefId":
   n.TestItemRefId = nil
  case "TestItemLocalId":
   n.TestItemLocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestItem2Type")
        }
        return n
}

func (n *NAPTestItem2Type) SetProperty(key string, value interface{}) *NAPTestItem2Type {
        if n == nil {
                n, _ = NAPTestItem2TypePointer(NAPTestItem2Type{})
        }
        switch key {
    case "SequenceNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.SequenceNumber = ((*Int)(v))
      }
    case "TestItemRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.TestItemRefId = ((*String)(v))
      }
    case "TestItemLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.TestItemLocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestItem2Type")
        }
        return n
}

  func (s *NAPTestItem2Type) SequenceNumberRead() *Int {
    if s.SequenceNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.SequenceNumber = ((*Int)(v))
      }
      }
      return s.SequenceNumber
    }
  func (s *NAPTestItem2Type) TestItemRefIdRead() *String {
    if s.TestItemRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TestItemRefId = ((*String)(v))
      }
      }
      return s.TestItemRefId
    }
  func (s *NAPTestItem2Type) TestItemLocalIdRead() *LocalIdType {
    if s.TestItemLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.TestItemLocalId = ((*LocalIdType)(v))
      }
      }
      return s.TestItemLocalId
    }

  // XXXXX
func (t *SchoolCourseInfoOverrideType) CopyString(key string, value interface{}) *SchoolCourseInfoOverrideType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SchoolCourseInfoOverrideType) CopyClone(key string, value interface{}) *SchoolCourseInfoOverrideType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SchoolCourseInfoOverrideType) Unset(key string) *SchoolCourseInfoOverrideType {
        switch key {
  case "CourseTitle":
   n.CourseTitle = nil
  case "InstructionalLevel":
   n.InstructionalLevel = nil
  case "StateCourseCode":
   n.StateCourseCode = nil
  case "SubjectArea":
   n.SubjectArea = nil
  case "CourseCode":
   n.CourseCode = nil
  case "CourseCredits":
   n.CourseCredits = nil
  case "Override":
   n.Override = nil
  case "DistrictCourseCode":
   n.DistrictCourseCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolCourseInfoOverrideType")
        }
        return n
}

func (n *SchoolCourseInfoOverrideType) SetProperty(key string, value interface{}) *SchoolCourseInfoOverrideType {
        if n == nil {
                n, _ = SchoolCourseInfoOverrideTypePointer(SchoolCourseInfoOverrideType{})
        }
        switch key {
    case "CourseTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.CourseTitle = ((*String)(v))
      }
    case "InstructionalLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.InstructionalLevel = ((*String)(v))
      }
    case "StateCourseCode":
    
    if v, ok:= StringPointer(value); ok {
      n.StateCourseCode = ((*String)(v))
      }
    case "SubjectArea":
    if v, ok:= SubjectAreaTypePointer(value); ok {
      n.SubjectArea = v
      }
    case "CourseCode":
    
    if v, ok:= StringPointer(value); ok {
      n.CourseCode = ((*String)(v))
      }
    case "CourseCredits":
    
    if v, ok:= StringPointer(value); ok {
      n.CourseCredits = ((*String)(v))
      }
    case "Override":
    
    if v, ok:= StringPointer(value); ok {
      n.Override = ((*String)(v))
      }
    case "DistrictCourseCode":
    
    if v, ok:= StringPointer(value); ok {
      n.DistrictCourseCode = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolCourseInfoOverrideType")
        }
        return n
}

  func (s *SchoolCourseInfoOverrideType) CourseTitleRead() *String {
    if s.CourseTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.CourseTitle = ((*String)(v))
      }
      }
      return s.CourseTitle
    }
  func (s *SchoolCourseInfoOverrideType) InstructionalLevelRead() *String {
    if s.InstructionalLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.InstructionalLevel = ((*String)(v))
      }
      }
      return s.InstructionalLevel
    }
  func (s *SchoolCourseInfoOverrideType) StateCourseCodeRead() *String {
    if s.StateCourseCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.StateCourseCode = ((*String)(v))
      }
      }
      return s.StateCourseCode
    }
  func (s *SchoolCourseInfoOverrideType) SubjectAreaRead() *SubjectAreaType {
    if s.SubjectArea == nil {
     if v, ok:= SubjectAreaTypePointer(SubjectAreaType{}); ok {
      s.SubjectArea = v
      }
      }
      return s.SubjectArea
    }
  func (s *SchoolCourseInfoOverrideType) CourseCodeRead() *String {
    if s.CourseCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.CourseCode = ((*String)(v))
      }
      }
      return s.CourseCode
    }
  func (s *SchoolCourseInfoOverrideType) CourseCreditsRead() *String {
    if s.CourseCredits == nil {
    if v, ok:= StringPointer(""); ok {
      s.CourseCredits = ((*String)(v))
      }
      }
      return s.CourseCredits
    }
  func (s *SchoolCourseInfoOverrideType) OverrideRead() *String {
    if s.Override == nil {
    if v, ok:= StringPointer(""); ok {
      s.Override = ((*String)(v))
      }
      }
      return s.Override
    }
  func (s *SchoolCourseInfoOverrideType) DistrictCourseCodeRead() *String {
    if s.DistrictCourseCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.DistrictCourseCode = ((*String)(v))
      }
      }
      return s.DistrictCourseCode
    }

  // XXXXX
func (t *EnglishProficiencyType) CopyString(key string, value interface{}) *EnglishProficiencyType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *EnglishProficiencyType) CopyClone(key string, value interface{}) *EnglishProficiencyType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *EnglishProficiencyType) Unset(key string) *EnglishProficiencyType {
        switch key {
  case "OtherCodeList":
   n.OtherCodeList = nil
  case "Code":
   n.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EnglishProficiencyType")
        }
        return n
}

func (n *EnglishProficiencyType) SetProperty(key string, value interface{}) *EnglishProficiencyType {
        if n == nil {
                n, _ = EnglishProficiencyTypePointer(EnglishProficiencyType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsEnglishProficiencyType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEnglishProficiencyType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsEnglishProficiencyType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EnglishProficiencyType")
        }
        return n
}

  func (s *EnglishProficiencyType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }
  func (s *EnglishProficiencyType) CodeRead() *AUCodeSetsEnglishProficiencyType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsEnglishProficiencyType)(v))
      }
      }
      return s.Code
    }

  // XXXXX
func (t *LanguageOfInstructionType) CopyString(key string, value interface{}) *LanguageOfInstructionType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LanguageOfInstructionType) CopyClone(key string, value interface{}) *LanguageOfInstructionType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LanguageOfInstructionType) Unset(key string) *LanguageOfInstructionType {
        switch key {
  case "Code":
   n.Code = nil
  case "OtherCodeList":
   n.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LanguageOfInstructionType")
        }
        return n
}

func (n *LanguageOfInstructionType) SetProperty(key string, value interface{}) *LanguageOfInstructionType {
        if n == nil {
                n, _ = LanguageOfInstructionTypePointer(LanguageOfInstructionType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.Code = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LanguageOfInstructionType")
        }
        return n
}

  func (s *LanguageOfInstructionType) CodeRead() *AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType {
    if s.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.Code = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
      }
      return s.Code
    }
  func (s *LanguageOfInstructionType) OtherCodeListRead() *OtherCodeListType {
    if s.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.OtherCodeList = v
      }
      }
      return s.OtherCodeList
    }

  // XXXXX
func (t *WellbeingPlanType) CopyString(key string, value interface{}) *WellbeingPlanType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *WellbeingPlanType) CopyClone(key string, value interface{}) *WellbeingPlanType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *WellbeingPlanType) Unset(key string) *WellbeingPlanType {
        switch key {
  case "PlanNotes":
   n.PlanNotes = nil
  case "PersonalisedPlanRefId":
   n.PersonalisedPlanRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingPlanType")
        }
        return n
}

func (n *WellbeingPlanType) SetProperty(key string, value interface{}) *WellbeingPlanType {
        if n == nil {
                n, _ = WellbeingPlanTypePointer(WellbeingPlanType{})
        }
        switch key {
    case "PlanNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.PlanNotes = ((*String)(v))
      }
    case "PersonalisedPlanRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.PersonalisedPlanRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingPlanType")
        }
        return n
}

  func (s *WellbeingPlanType) PlanNotesRead() *String {
    if s.PlanNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.PlanNotes = ((*String)(v))
      }
      }
      return s.PlanNotes
    }
  func (s *WellbeingPlanType) PersonalisedPlanRefIdRead() *String {
    if s.PersonalisedPlanRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.PersonalisedPlanRefId = ((*String)(v))
      }
      }
      return s.PersonalisedPlanRefId
    }

  // XXXXX
func (t *ContactInfoType) CopyString(key string, value interface{}) *ContactInfoType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ContactInfoType) CopyClone(key string, value interface{}) *ContactInfoType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ContactInfoType) Unset(key string) *ContactInfoType {
        switch key {
  case "RegistrationDetails":
   n.RegistrationDetails = nil
  case "EmailList":
   n.EmailList = nil
  case "Address":
   n.Address = nil
  case "Role":
   n.Role = nil
  case "PhoneNumberList":
   n.PhoneNumberList = nil
  case "Name":
   n.Name = nil
  case "Qualifications":
   n.Qualifications = nil
  case "PositionTitle":
   n.PositionTitle = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ContactInfoType")
        }
        return n
}

func (n *ContactInfoType) SetProperty(key string, value interface{}) *ContactInfoType {
        if n == nil {
                n, _ = ContactInfoTypePointer(ContactInfoType{})
        }
        switch key {
    case "RegistrationDetails":
    
    if v, ok:= StringPointer(value); ok {
      n.RegistrationDetails = ((*String)(v))
      }
    case "EmailList":
    if v, ok:= EmailListTypePointer(value); ok {
      n.EmailList = v
      }
    case "Address":
    if v, ok:= AddressTypePointer(value); ok {
      n.Address = v
      }
    case "Role":
    
    if v, ok:= StringPointer(value); ok {
      n.Role = ((*String)(v))
      }
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.PhoneNumberList = v
      }
    case "Name":
    if v, ok:= NameTypePointer(value); ok {
      n.Name = v
      }
    case "Qualifications":
    
    if v, ok:= StringPointer(value); ok {
      n.Qualifications = ((*String)(v))
      }
    case "PositionTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.PositionTitle = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ContactInfoType")
        }
        return n
}

  func (s *ContactInfoType) RegistrationDetailsRead() *String {
    if s.RegistrationDetails == nil {
    if v, ok:= StringPointer(""); ok {
      s.RegistrationDetails = ((*String)(v))
      }
      }
      return s.RegistrationDetails
    }
  func (s *ContactInfoType) EmailListRead() *EmailListType {
    if s.EmailList == nil {
     if v, ok:= EmailListTypePointer(EmailListType{}); ok {
      s.EmailList = v
      }
      }
      return s.EmailList
    }
  func (s *ContactInfoType) AddressRead() *AddressType {
    if s.Address == nil {
     if v, ok:= AddressTypePointer(AddressType{}); ok {
      s.Address = v
      }
      }
      return s.Address
    }
  func (s *ContactInfoType) RoleRead() *String {
    if s.Role == nil {
    if v, ok:= StringPointer(""); ok {
      s.Role = ((*String)(v))
      }
      }
      return s.Role
    }
  func (s *ContactInfoType) PhoneNumberListRead() *PhoneNumberListType {
    if s.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.PhoneNumberList = v
      }
      }
      return s.PhoneNumberList
    }
  func (s *ContactInfoType) NameRead() *NameType {
    if s.Name == nil {
     if v, ok:= NameTypePointer(NameType{}); ok {
      s.Name = v
      }
      }
      return s.Name
    }
  func (s *ContactInfoType) QualificationsRead() *String {
    if s.Qualifications == nil {
    if v, ok:= StringPointer(""); ok {
      s.Qualifications = ((*String)(v))
      }
      }
      return s.Qualifications
    }
  func (s *ContactInfoType) PositionTitleRead() *String {
    if s.PositionTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.PositionTitle = ((*String)(v))
      }
      }
      return s.PositionTitle
    }

  // XXXXX
func (t *TimeTableDayType) CopyString(key string, value interface{}) *TimeTableDayType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TimeTableDayType) CopyClone(key string, value interface{}) *TimeTableDayType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TimeTableDayType) Unset(key string) *TimeTableDayType {
        switch key {
  case "DayTitle":
   n.DayTitle = nil
  case "TimeTablePeriodList":
   n.TimeTablePeriodList = nil
  case "DayId":
   n.DayId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableDayType")
        }
        return n
}

func (n *TimeTableDayType) SetProperty(key string, value interface{}) *TimeTableDayType {
        if n == nil {
                n, _ = TimeTableDayTypePointer(TimeTableDayType{})
        }
        switch key {
    case "DayTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.DayTitle = ((*String)(v))
      }
    case "TimeTablePeriodList":
    if v, ok:= TimeTablePeriodListTypePointer(value); ok {
      n.TimeTablePeriodList = v
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.DayId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableDayType")
        }
        return n
}

  func (s *TimeTableDayType) DayTitleRead() *String {
    if s.DayTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.DayTitle = ((*String)(v))
      }
      }
      return s.DayTitle
    }
  func (s *TimeTableDayType) TimeTablePeriodListRead() *TimeTablePeriodListType {
    if s.TimeTablePeriodList == nil {
     if v, ok:= TimeTablePeriodListTypePointer(TimeTablePeriodListType{}); ok {
      s.TimeTablePeriodList = v
      }
      }
      return s.TimeTablePeriodList
    }
  func (s *TimeTableDayType) DayIdRead() *LocalIdType {
    if s.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.DayId = ((*LocalIdType)(v))
      }
      }
      return s.DayId
    }

  // XXXXX
func (t *LocationType_LocationRefId) CopyString(key string, value interface{}) *LocationType_LocationRefId {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *LocationType_LocationRefId) CopyClone(key string, value interface{}) *LocationType_LocationRefId {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *LocationType_LocationRefId) Unset(key string) *LocationType_LocationRefId {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocationType_LocationRefId")
        }
        return n
}

func (n *LocationType_LocationRefId) SetProperty(key string, value interface{}) *LocationType_LocationRefId {
        if n == nil {
                n, _ = LocationType_LocationRefIdPointer(LocationType_LocationRefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocationType_LocationRefId")
        }
        return n
}

  func (s *LocationType_LocationRefId) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *LocationType_LocationRefId) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *Identity) CopyString(key string, value interface{}) *Identity {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *Identity) CopyClone(key string, value interface{}) *Identity {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *Identity) Unset(key string) *Identity {
        switch key {
  case "SIF_Metadata":
   n.SIF_Metadata = nil
  case "PasswordList":
   n.PasswordList = nil
  case "SIF_RefId":
   n.SIF_RefId = nil
  case "RefId":
   n.RefId = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "IdentityAssertions":
   n.IdentityAssertions = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "AuthenticationSourceGlobalUID":
   n.AuthenticationSourceGlobalUID = nil
  case "AuthenticationSource":
   n.AuthenticationSource = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Identity")
        }
        return n
}

func (n *Identity) SetProperty(key string, value interface{}) *Identity {
        if n == nil {
                n, _ = IdentityPointer(Identity{})
        }
        switch key {
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
    case "PasswordList":
    if v, ok:= PasswordListTypePointer(value); ok {
      n.PasswordList = v
      }
    case "SIF_RefId":
    if v, ok:= Identity_SIF_RefIdPointer(value); ok {
      n.SIF_RefId = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "IdentityAssertions":
    if v, ok:= IdentityAssertionsTypePointer(value); ok {
      n.IdentityAssertions = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "AuthenticationSourceGlobalUID":
    
    if v, ok:= StringPointer(value); ok {
      n.AuthenticationSourceGlobalUID = ((*String)(v))
      }
    case "AuthenticationSource":
    
    if v, ok:= StringPointer(value); ok {
      n.AuthenticationSource = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Identity")
        }
        return n
}

  func (s *Identity) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }
  func (s *Identity) PasswordListRead() *PasswordListType {
    if s.PasswordList == nil {
     if v, ok:= PasswordListTypePointer(PasswordListType{}); ok {
      s.PasswordList = v
      }
      }
      return s.PasswordList
    }
  func (s *Identity) SIF_RefIdRead() *Identity_SIF_RefId {
    if s.SIF_RefId == nil {
     if v, ok:= Identity_SIF_RefIdPointer(Identity_SIF_RefId{}); ok {
      s.SIF_RefId = v
      }
      }
      return s.SIF_RefId
    }
  func (s *Identity) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *Identity) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *Identity) IdentityAssertionsRead() *IdentityAssertionsType {
    if s.IdentityAssertions == nil {
     if v, ok:= IdentityAssertionsTypePointer(IdentityAssertionsType{}); ok {
      s.IdentityAssertions = v
      }
      }
      return s.IdentityAssertions
    }
  func (s *Identity) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *Identity) AuthenticationSourceGlobalUIDRead() *String {
    if s.AuthenticationSourceGlobalUID == nil {
    if v, ok:= StringPointer(""); ok {
      s.AuthenticationSourceGlobalUID = ((*String)(v))
      }
      }
      return s.AuthenticationSourceGlobalUID
    }
  func (s *Identity) AuthenticationSourceRead() *String {
    if s.AuthenticationSource == nil {
    if v, ok:= StringPointer(""); ok {
      s.AuthenticationSource = ((*String)(v))
      }
      }
      return s.AuthenticationSource
    }

  // XXXXX
func (t *ContactFlagsType) CopyString(key string, value interface{}) *ContactFlagsType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ContactFlagsType) CopyClone(key string, value interface{}) *ContactFlagsType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ContactFlagsType) Unset(key string) *ContactFlagsType {
        switch key {
  case "EmergencyContact":
   n.EmergencyContact = nil
  case "AccessToRecords":
   n.AccessToRecords = nil
  case "AttendanceContact":
   n.AttendanceContact = nil
  case "PrimaryCareProvider":
   n.PrimaryCareProvider = nil
  case "PickupRights":
   n.PickupRights = nil
  case "ReceivesAssessmentReport":
   n.ReceivesAssessmentReport = nil
  case "ParentLegalGuardian":
   n.ParentLegalGuardian = nil
  case "FamilyMail":
   n.FamilyMail = nil
  case "FeesAccess":
   n.FeesAccess = nil
  case "HasCustody":
   n.HasCustody = nil
  case "FeesBilling":
   n.FeesBilling = nil
  case "InterventionOrder":
   n.InterventionOrder = nil
  case "LivesWith":
   n.LivesWith = nil
  case "DisciplinaryContact":
   n.DisciplinaryContact = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ContactFlagsType")
        }
        return n
}

func (n *ContactFlagsType) SetProperty(key string, value interface{}) *ContactFlagsType {
        if n == nil {
                n, _ = ContactFlagsTypePointer(ContactFlagsType{})
        }
        switch key {
    case "EmergencyContact":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.EmergencyContact = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "AccessToRecords":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AccessToRecords = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "AttendanceContact":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.AttendanceContact = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "PrimaryCareProvider":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PrimaryCareProvider = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "PickupRights":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.PickupRights = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ReceivesAssessmentReport":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ReceivesAssessmentReport = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ParentLegalGuardian":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.ParentLegalGuardian = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "FamilyMail":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.FamilyMail = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "FeesAccess":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.FeesAccess = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "HasCustody":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.HasCustody = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "FeesBilling":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.FeesBilling = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "InterventionOrder":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.InterventionOrder = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "LivesWith":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.LivesWith = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "DisciplinaryContact":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.DisciplinaryContact = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ContactFlagsType")
        }
        return n
}

  func (s *ContactFlagsType) EmergencyContactRead() *AUCodeSetsYesOrNoCategoryType {
    if s.EmergencyContact == nil {
    if v, ok:= StringPointer(""); ok {
      s.EmergencyContact = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.EmergencyContact
    }
  func (s *ContactFlagsType) AccessToRecordsRead() *AUCodeSetsYesOrNoCategoryType {
    if s.AccessToRecords == nil {
    if v, ok:= StringPointer(""); ok {
      s.AccessToRecords = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.AccessToRecords
    }
  func (s *ContactFlagsType) AttendanceContactRead() *AUCodeSetsYesOrNoCategoryType {
    if s.AttendanceContact == nil {
    if v, ok:= StringPointer(""); ok {
      s.AttendanceContact = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.AttendanceContact
    }
  func (s *ContactFlagsType) PrimaryCareProviderRead() *AUCodeSetsYesOrNoCategoryType {
    if s.PrimaryCareProvider == nil {
    if v, ok:= StringPointer(""); ok {
      s.PrimaryCareProvider = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.PrimaryCareProvider
    }
  func (s *ContactFlagsType) PickupRightsRead() *AUCodeSetsYesOrNoCategoryType {
    if s.PickupRights == nil {
    if v, ok:= StringPointer(""); ok {
      s.PickupRights = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.PickupRights
    }
  func (s *ContactFlagsType) ReceivesAssessmentReportRead() *AUCodeSetsYesOrNoCategoryType {
    if s.ReceivesAssessmentReport == nil {
    if v, ok:= StringPointer(""); ok {
      s.ReceivesAssessmentReport = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.ReceivesAssessmentReport
    }
  func (s *ContactFlagsType) ParentLegalGuardianRead() *AUCodeSetsYesOrNoCategoryType {
    if s.ParentLegalGuardian == nil {
    if v, ok:= StringPointer(""); ok {
      s.ParentLegalGuardian = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.ParentLegalGuardian
    }
  func (s *ContactFlagsType) FamilyMailRead() *AUCodeSetsYesOrNoCategoryType {
    if s.FamilyMail == nil {
    if v, ok:= StringPointer(""); ok {
      s.FamilyMail = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.FamilyMail
    }
  func (s *ContactFlagsType) FeesAccessRead() *AUCodeSetsYesOrNoCategoryType {
    if s.FeesAccess == nil {
    if v, ok:= StringPointer(""); ok {
      s.FeesAccess = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.FeesAccess
    }
  func (s *ContactFlagsType) HasCustodyRead() *AUCodeSetsYesOrNoCategoryType {
    if s.HasCustody == nil {
    if v, ok:= StringPointer(""); ok {
      s.HasCustody = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.HasCustody
    }
  func (s *ContactFlagsType) FeesBillingRead() *AUCodeSetsYesOrNoCategoryType {
    if s.FeesBilling == nil {
    if v, ok:= StringPointer(""); ok {
      s.FeesBilling = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.FeesBilling
    }
  func (s *ContactFlagsType) InterventionOrderRead() *AUCodeSetsYesOrNoCategoryType {
    if s.InterventionOrder == nil {
    if v, ok:= StringPointer(""); ok {
      s.InterventionOrder = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.InterventionOrder
    }
  func (s *ContactFlagsType) LivesWithRead() *AUCodeSetsYesOrNoCategoryType {
    if s.LivesWith == nil {
    if v, ok:= StringPointer(""); ok {
      s.LivesWith = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.LivesWith
    }
  func (s *ContactFlagsType) DisciplinaryContactRead() *AUCodeSetsYesOrNoCategoryType {
    if s.DisciplinaryContact == nil {
    if v, ok:= StringPointer(""); ok {
      s.DisciplinaryContact = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.DisciplinaryContact
    }

  // XXXXX
func (t *SubstituteItemType) CopyString(key string, value interface{}) *SubstituteItemType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SubstituteItemType) CopyClone(key string, value interface{}) *SubstituteItemType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SubstituteItemType) Unset(key string) *SubstituteItemType {
        switch key {
  case "SubstituteItemLocalId":
   n.SubstituteItemLocalId = nil
  case "SubstituteItemRefId":
   n.SubstituteItemRefId = nil
  case "PNPCodeList":
   n.PNPCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SubstituteItemType")
        }
        return n
}

func (n *SubstituteItemType) SetProperty(key string, value interface{}) *SubstituteItemType {
        if n == nil {
                n, _ = SubstituteItemTypePointer(SubstituteItemType{})
        }
        switch key {
    case "SubstituteItemLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.SubstituteItemLocalId = ((*LocalIdType)(v))
      }
    case "SubstituteItemRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.SubstituteItemRefId = ((*String)(v))
      }
    case "PNPCodeList":
    if v, ok:= PNPCodeListTypePointer(value); ok {
      n.PNPCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SubstituteItemType")
        }
        return n
}

  func (s *SubstituteItemType) SubstituteItemLocalIdRead() *LocalIdType {
    if s.SubstituteItemLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubstituteItemLocalId = ((*LocalIdType)(v))
      }
      }
      return s.SubstituteItemLocalId
    }
  func (s *SubstituteItemType) SubstituteItemRefIdRead() *String {
    if s.SubstituteItemRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.SubstituteItemRefId = ((*String)(v))
      }
      }
      return s.SubstituteItemRefId
    }
  func (s *SubstituteItemType) PNPCodeListRead() *PNPCodeListType {
    if s.PNPCodeList == nil {
     if v, ok:= PNPCodeListTypePointer(PNPCodeListType{}); ok {
      s.PNPCodeList = v
      }
      }
      return s.PNPCodeList
    }

  // XXXXX
func (t *SystemRole_Role) CopyString(key string, value interface{}) *SystemRole_Role {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *SystemRole_Role) CopyClone(key string, value interface{}) *SystemRole_Role {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *SystemRole_Role) Unset(key string) *SystemRole_Role {
        switch key {
  case "RoleId":
   n.RoleId = nil
  case "RoleScopeList":
   n.RoleScopeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_Role")
        }
        return n
}

func (n *SystemRole_Role) SetProperty(key string, value interface{}) *SystemRole_Role {
        if n == nil {
                n, _ = SystemRole_RolePointer(SystemRole_Role{})
        }
        switch key {
    case "RoleId":
    
    if v, ok:= StringPointer(value); ok {
      n.RoleId = ((*String)(v))
      }
    case "RoleScopeList":
    if v, ok:= SystemRole_RoleScopeListPointer(value); ok {
      n.RoleScopeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_Role")
        }
        return n
}

  func (s *SystemRole_Role) RoleIdRead() *String {
    if s.RoleId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RoleId = ((*String)(v))
      }
      }
      return s.RoleId
    }
  func (s *SystemRole_Role) RoleScopeListRead() *SystemRole_RoleScopeList {
    if s.RoleScopeList == nil {
     if v, ok:= SystemRole_RoleScopeListPointer(SystemRole_RoleScopeList{}); ok {
      s.RoleScopeList = v
      }
      }
      return s.RoleScopeList
    }

  // XXXXX
func (t *PersonInvolvementType) CopyString(key string, value interface{}) *PersonInvolvementType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *PersonInvolvementType) CopyClone(key string, value interface{}) *PersonInvolvementType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *PersonInvolvementType) Unset(key string) *PersonInvolvementType {
        switch key {
  case "ShortName":
   n.ShortName = nil
  case "HowInvolved":
   n.HowInvolved = nil
  case "PersonRefId":
   n.PersonRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonInvolvementType")
        }
        return n
}

func (n *PersonInvolvementType) SetProperty(key string, value interface{}) *PersonInvolvementType {
        if n == nil {
                n, _ = PersonInvolvementTypePointer(PersonInvolvementType{})
        }
        switch key {
    case "ShortName":
    
    if v, ok:= StringPointer(value); ok {
      n.ShortName = ((*String)(v))
      }
    case "HowInvolved":
    
    if v, ok:= StringPointer(value); ok {
      n.HowInvolved = ((*String)(v))
      }
    case "PersonRefId":
    if v, ok:= PersonInvolvementType_PersonRefIdPointer(value); ok {
      n.PersonRefId = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonInvolvementType")
        }
        return n
}

  func (s *PersonInvolvementType) ShortNameRead() *String {
    if s.ShortName == nil {
    if v, ok:= StringPointer(""); ok {
      s.ShortName = ((*String)(v))
      }
      }
      return s.ShortName
    }
  func (s *PersonInvolvementType) HowInvolvedRead() *String {
    if s.HowInvolved == nil {
    if v, ok:= StringPointer(""); ok {
      s.HowInvolved = ((*String)(v))
      }
      }
      return s.HowInvolved
    }
  func (s *PersonInvolvementType) PersonRefIdRead() *PersonInvolvementType_PersonRefId {
    if s.PersonRefId == nil {
     if v, ok:= PersonInvolvementType_PersonRefIdPointer(PersonInvolvementType_PersonRefId{}); ok {
      s.PersonRefId = v
      }
      }
      return s.PersonRefId
    }

  // XXXXX
func (t *ExpenseAccountType) CopyString(key string, value interface{}) *ExpenseAccountType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *ExpenseAccountType) CopyClone(key string, value interface{}) *ExpenseAccountType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *ExpenseAccountType) Unset(key string) *ExpenseAccountType {
        switch key {
  case "Amount":
   n.Amount = nil
  case "AccountCode":
   n.AccountCode = nil
  case "FinancialAccountRefId":
   n.FinancialAccountRefId = nil
  case "AccountingPeriod":
   n.AccountingPeriod = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ExpenseAccountType")
        }
        return n
}

func (n *ExpenseAccountType) SetProperty(key string, value interface{}) *ExpenseAccountType {
        if n == nil {
                n, _ = ExpenseAccountTypePointer(ExpenseAccountType{})
        }
        switch key {
    case "Amount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.Amount = v
      }
    case "AccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.AccountCode = ((*String)(v))
      }
    case "FinancialAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.FinancialAccountRefId = ((*String)(v))
      }
    case "AccountingPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.AccountingPeriod = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ExpenseAccountType")
        }
        return n
}

  func (s *ExpenseAccountType) AmountRead() *MonetaryAmountType {
    if s.Amount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.Amount = v
      }
      }
      return s.Amount
    }
  func (s *ExpenseAccountType) AccountCodeRead() *String {
    if s.AccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.AccountCode = ((*String)(v))
      }
      }
      return s.AccountCode
    }
  func (s *ExpenseAccountType) FinancialAccountRefIdRead() *String {
    if s.FinancialAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.FinancialAccountRefId = ((*String)(v))
      }
      }
      return s.FinancialAccountRefId
    }
  func (s *ExpenseAccountType) AccountingPeriodRead() *LocalIdType {
    if s.AccountingPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.AccountingPeriod = ((*LocalIdType)(v))
      }
      }
      return s.AccountingPeriod
    }

  // XXXXX
func (t *WellbeingEventLocationDetailsType) CopyString(key string, value interface{}) *WellbeingEventLocationDetailsType {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *WellbeingEventLocationDetailsType) CopyClone(key string, value interface{}) *WellbeingEventLocationDetailsType {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *WellbeingEventLocationDetailsType) Unset(key string) *WellbeingEventLocationDetailsType {
        switch key {
  case "Class":
   n.Class = nil
  case "FurtherLocationNotes":
   n.FurtherLocationNotes = nil
  case "EventLocation":
   n.EventLocation = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingEventLocationDetailsType")
        }
        return n
}

func (n *WellbeingEventLocationDetailsType) SetProperty(key string, value interface{}) *WellbeingEventLocationDetailsType {
        if n == nil {
                n, _ = WellbeingEventLocationDetailsTypePointer(WellbeingEventLocationDetailsType{})
        }
        switch key {
    case "Class":
    
    if v, ok:= StringPointer(value); ok {
      n.Class = ((*String)(v))
      }
    case "FurtherLocationNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.FurtherLocationNotes = ((*String)(v))
      }
    case "EventLocation":
        if !CodesetContains(AUCodeSetsWellbeingEventLocationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingEventLocationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.EventLocation = ((*AUCodeSetsWellbeingEventLocationType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingEventLocationDetailsType")
        }
        return n
}

  func (s *WellbeingEventLocationDetailsType) ClassRead() *String {
    if s.Class == nil {
    if v, ok:= StringPointer(""); ok {
      s.Class = ((*String)(v))
      }
      }
      return s.Class
    }
  func (s *WellbeingEventLocationDetailsType) FurtherLocationNotesRead() *String {
    if s.FurtherLocationNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.FurtherLocationNotes = ((*String)(v))
      }
      }
      return s.FurtherLocationNotes
    }
  func (s *WellbeingEventLocationDetailsType) EventLocationRead() *AUCodeSetsWellbeingEventLocationType {
    if s.EventLocation == nil {
    if v, ok:= StringPointer(""); ok {
      s.EventLocation = ((*AUCodeSetsWellbeingEventLocationType)(v))
      }
      }
      return s.EventLocation
    }

  // XXXXX
func (t *TimeTableContainer) CopyString(key string, value interface{}) *TimeTableContainer {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *TimeTableContainer) CopyClone(key string, value interface{}) *TimeTableContainer {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *TimeTableContainer) Unset(key string) *TimeTableContainer {
        switch key {
  case "TeachingGroupScheduleList":
   n.TeachingGroupScheduleList = nil
  case "TimeTableSchedule":
   n.TimeTableSchedule = nil
  case "SIF_ExtendedElements":
   n.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.LocalCodeList = nil
  case "RefId":
   n.RefId = nil
  case "TimeTableScheduleCellList":
   n.TimeTableScheduleCellList = nil
  case "SIF_Metadata":
   n.SIF_Metadata = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableContainer")
        }
        return n
}

func (n *TimeTableContainer) SetProperty(key string, value interface{}) *TimeTableContainer {
        if n == nil {
                n, _ = TimeTableContainerPointer(TimeTableContainer{})
        }
        switch key {
    case "TeachingGroupScheduleList":
    if v, ok:= TeachingGroupScheduleTypePointer(value); ok {
      n.TeachingGroupScheduleList = v
      }
    case "TimeTableSchedule":
    if v, ok:= TimeTableScheduleTypePointer(value); ok {
      n.TimeTableSchedule = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.LocalCodeList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.RefId = ((*RefIdType)(v))
      }
    case "TimeTableScheduleCellList":
    if v, ok:= TimeTableScheduleCellListTypePointer(value); ok {
      n.TimeTableScheduleCellList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.SIF_Metadata = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableContainer")
        }
        return n
}

  func (s *TimeTableContainer) TeachingGroupScheduleListRead() *TeachingGroupScheduleType {
    if s.TeachingGroupScheduleList == nil {
     if v, ok:= TeachingGroupScheduleTypePointer(TeachingGroupScheduleType{}); ok {
      s.TeachingGroupScheduleList = v
      }
      }
      return s.TeachingGroupScheduleList
    }
  func (s *TimeTableContainer) TimeTableScheduleRead() *TimeTableScheduleType {
    if s.TimeTableSchedule == nil {
     if v, ok:= TimeTableScheduleTypePointer(TimeTableScheduleType{}); ok {
      s.TimeTableSchedule = v
      }
      }
      return s.TimeTableSchedule
    }
  func (s *TimeTableContainer) SIF_ExtendedElementsRead() *SIF_ExtendedElementsType {
    if s.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.SIF_ExtendedElements = v
      }
      }
      return s.SIF_ExtendedElements
    }
  func (s *TimeTableContainer) LocalCodeListRead() *LocalCodeListType {
    if s.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.LocalCodeList = v
      }
      }
      return s.LocalCodeList
    }
  func (s *TimeTableContainer) RefIdRead() *RefIdType {
    if s.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.RefId = ((*RefIdType)(v))
      }
      }
      return s.RefId
    }
  func (s *TimeTableContainer) TimeTableScheduleCellListRead() *TimeTableScheduleCellListType {
    if s.TimeTableScheduleCellList == nil {
     if v, ok:= TimeTableScheduleCellListTypePointer(TimeTableScheduleCellListType{}); ok {
      s.TimeTableScheduleCellList = v
      }
      }
      return s.TimeTableScheduleCellList
    }
  func (s *TimeTableContainer) SIF_MetadataRead() *SIF_MetadataType {
    if s.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.SIF_Metadata = v
      }
      }
      return s.SIF_Metadata
    }

  // XXXXX
func (t *StudentSchoolEnrollment_Homeroom) CopyString(key string, value interface{}) *StudentSchoolEnrollment_Homeroom {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *StudentSchoolEnrollment_Homeroom) CopyClone(key string, value interface{}) *StudentSchoolEnrollment_Homeroom {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *StudentSchoolEnrollment_Homeroom) Unset(key string) *StudentSchoolEnrollment_Homeroom {
        switch key {
  case "SIF_RefObject":
   n.SIF_RefObject = nil
  case "Value":
   n.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Homeroom")
        }
        return n
}

func (n *StudentSchoolEnrollment_Homeroom) SetProperty(key string, value interface{}) *StudentSchoolEnrollment_Homeroom {
        if n == nil {
                n, _ = StudentSchoolEnrollment_HomeroomPointer(StudentSchoolEnrollment_Homeroom{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Homeroom")
        }
        return n
}

  func (s *StudentSchoolEnrollment_Homeroom) SIF_RefObjectRead() *String {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*String)(v))
      }
      }
      return s.SIF_RefObject
    }
  func (s *StudentSchoolEnrollment_Homeroom) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }

  // XXXXX
func (t *AssociatedObjectsType_AssociatedObject) CopyString(key string, value interface{}) *AssociatedObjectsType_AssociatedObject {
  return t.SetProperty(key, fmt.Sprint(reflect.ValueOf(value).Elem().Interface()))
}


  // XXXXX
func (t *AssociatedObjectsType_AssociatedObject) CopyClone(key string, value interface{}) *AssociatedObjectsType_AssociatedObject {
  if value == nil || reflect.ValueOf(value).IsNil() {
    return t
    }
  resource := deepcopy.Copy(value)
  return t.SetProperty(key, reflect.ValueOf(resource).Elem().Interface())
}

  // XXXXX
func (n *AssociatedObjectsType_AssociatedObject) Unset(key string) *AssociatedObjectsType_AssociatedObject {
        switch key {
  case "Value":
   n.Value = nil
  case "SIF_RefObject":
   n.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AssociatedObjectsType_AssociatedObject")
        }
        return n
}

func (n *AssociatedObjectsType_AssociatedObject) SetProperty(key string, value interface{}) *AssociatedObjectsType_AssociatedObject {
        if n == nil {
                n, _ = AssociatedObjectsType_AssociatedObjectPointer(AssociatedObjectsType_AssociatedObject{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.SIF_RefObject = ((*ObjectNameType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AssociatedObjectsType_AssociatedObject")
        }
        return n
}

  func (s *AssociatedObjectsType_AssociatedObject) ValueRead() *String {
    if s.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.Value = ((*String)(v))
      }
      }
      return s.Value
    }
  func (s *AssociatedObjectsType_AssociatedObject) SIF_RefObjectRead() *ObjectNameType {
    if s.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.SIF_RefObject = ((*ObjectNameType)(v))
      }
      }
      return s.SIF_RefObject
    }
