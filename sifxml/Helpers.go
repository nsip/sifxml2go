package sifxml

import (
  "fmt"
  "log"
  "reflect"

  "github.com/qdm12/reprint"
  )

type Prop struct {
  Key string
  Value interface{}
}

func CodesetContains(codeset map[string]struct{}, value interface{}) bool {

 	vstr, ok := value.(string)
 	if !ok {
 		return ok
 	}
 	_, ok = codeset[vstr]
 	return ok
 }

func ActivitySlice() []*Activity {
  return make([]*Activity, 0)
  }
func AddressCollectionSlice() []*AddressCollection {
  return make([]*AddressCollection, 0)
  }
func AggregateCharacteristicInfoSlice() []*AggregateCharacteristicInfo {
  return make([]*AggregateCharacteristicInfo, 0)
  }
func AggregateStatisticFactSlice() []*AggregateStatisticFact {
  return make([]*AggregateStatisticFact, 0)
  }
func AggregateStatisticInfoSlice() []*AggregateStatisticInfo {
  return make([]*AggregateStatisticInfo, 0)
  }
func CalendarDateSlice() []*CalendarDate {
  return make([]*CalendarDate, 0)
  }
func CalendarSummarySlice() []*CalendarSummary {
  return make([]*CalendarSummary, 0)
  }
func CensusCollectionSlice() []*CensusCollection {
  return make([]*CensusCollection, 0)
  }
func ChargedLocationInfoSlice() []*ChargedLocationInfo {
  return make([]*ChargedLocationInfo, 0)
  }
func CollectionRoundSlice() []*CollectionRound {
  return make([]*CollectionRound, 0)
  }
func CollectionStatusSlice() []*CollectionStatus {
  return make([]*CollectionStatus, 0)
  }
func DebtorSlice() []*Debtor {
  return make([]*Debtor, 0)
  }
func EquipmentInfoSlice() []*EquipmentInfo {
  return make([]*EquipmentInfo, 0)
  }
func FinancialAccountSlice() []*FinancialAccount {
  return make([]*FinancialAccount, 0)
  }
func FinancialQuestionnaireCollectionSlice() []*FinancialQuestionnaireCollection {
  return make([]*FinancialQuestionnaireCollection, 0)
  }
func GradingAssignmentSlice() []*GradingAssignment {
  return make([]*GradingAssignment, 0)
  }
func GradingAssignmentScoreSlice() []*GradingAssignmentScore {
  return make([]*GradingAssignmentScore, 0)
  }
func IdentitySlice() []*Identity {
  return make([]*Identity, 0)
  }
func InvoiceSlice() []*Invoice {
  return make([]*Invoice, 0)
  }
func JournalSlice() []*Journal {
  return make([]*Journal, 0)
  }
func LEAInfoSlice() []*LEAInfo {
  return make([]*LEAInfo, 0)
  }
func LearningResourceSlice() []*LearningResource {
  return make([]*LearningResource, 0)
  }
func LearningResourcePackageSlice() []*LearningResourcePackage {
  return make([]*LearningResourcePackage, 0)
  }
func LearningStandardDocumentSlice() []*LearningStandardDocument {
  return make([]*LearningStandardDocument, 0)
  }
func LearningStandardItemSlice() []*LearningStandardItem {
  return make([]*LearningStandardItem, 0)
  }
func LibraryPatronStatusSlice() []*LibraryPatronStatus {
  return make([]*LibraryPatronStatus, 0)
  }
func MarkValueInfoSlice() []*MarkValueInfo {
  return make([]*MarkValueInfo, 0)
  }
func NAPCodeFrameSlice() []*NAPCodeFrame {
  return make([]*NAPCodeFrame, 0)
  }
func NAPEventStudentLinkSlice() []*NAPEventStudentLink {
  return make([]*NAPEventStudentLink, 0)
  }
func NAPStudentResponseSetSlice() []*NAPStudentResponseSet {
  return make([]*NAPStudentResponseSet, 0)
  }
func NAPTestSlice() []*NAPTest {
  return make([]*NAPTest, 0)
  }
func NAPTestItemSlice() []*NAPTestItem {
  return make([]*NAPTestItem, 0)
  }
func NAPTestScoreSummarySlice() []*NAPTestScoreSummary {
  return make([]*NAPTestScoreSummary, 0)
  }
func NAPTestletSlice() []*NAPTestlet {
  return make([]*NAPTestlet, 0)
  }
func PaymentReceiptSlice() []*PaymentReceipt {
  return make([]*PaymentReceipt, 0)
  }
func PersonPictureSlice() []*PersonPicture {
  return make([]*PersonPicture, 0)
  }
func PersonalisedPlanSlice() []*PersonalisedPlan {
  return make([]*PersonalisedPlan, 0)
  }
func PurchaseOrderSlice() []*PurchaseOrder {
  return make([]*PurchaseOrder, 0)
  }
func ResourceBookingSlice() []*ResourceBooking {
  return make([]*ResourceBooking, 0)
  }
func ResourceUsageSlice() []*ResourceUsage {
  return make([]*ResourceUsage, 0)
  }
func RoomInfoSlice() []*RoomInfo {
  return make([]*RoomInfo, 0)
  }
func ScheduledActivitySlice() []*ScheduledActivity {
  return make([]*ScheduledActivity, 0)
  }
func SchoolCourseInfoSlice() []*SchoolCourseInfo {
  return make([]*SchoolCourseInfo, 0)
  }
func SchoolInfoSlice() []*SchoolInfo {
  return make([]*SchoolInfo, 0)
  }
func SchoolProgramsSlice() []*SchoolPrograms {
  return make([]*SchoolPrograms, 0)
  }
func SectionInfoSlice() []*SectionInfo {
  return make([]*SectionInfo, 0)
  }
func SessionInfoSlice() []*SessionInfo {
  return make([]*SessionInfo, 0)
  }
func StaffAssignmentSlice() []*StaffAssignment {
  return make([]*StaffAssignment, 0)
  }
func StaffPersonalSlice() []*StaffPersonal {
  return make([]*StaffPersonal, 0)
  }
func StudentActivityInfoSlice() []*StudentActivityInfo {
  return make([]*StudentActivityInfo, 0)
  }
func StudentActivityParticipationSlice() []*StudentActivityParticipation {
  return make([]*StudentActivityParticipation, 0)
  }
func StudentAttendanceCollectionSlice() []*StudentAttendanceCollection {
  return make([]*StudentAttendanceCollection, 0)
  }
func StudentAttendanceSummarySlice() []*StudentAttendanceSummary {
  return make([]*StudentAttendanceSummary, 0)
  }
func StudentAttendanceTimeListSlice() []*StudentAttendanceTimeList {
  return make([]*StudentAttendanceTimeList, 0)
  }
func StudentContactPersonalSlice() []*StudentContactPersonal {
  return make([]*StudentContactPersonal, 0)
  }
func StudentContactRelationshipSlice() []*StudentContactRelationship {
  return make([]*StudentContactRelationship, 0)
  }
func StudentDailyAttendanceSlice() []*StudentDailyAttendance {
  return make([]*StudentDailyAttendance, 0)
  }
func StudentGradeSlice() []*StudentGrade {
  return make([]*StudentGrade, 0)
  }
func StudentParticipationSlice() []*StudentParticipation {
  return make([]*StudentParticipation, 0)
  }
func StudentPeriodAttendanceSlice() []*StudentPeriodAttendance {
  return make([]*StudentPeriodAttendance, 0)
  }
func StudentPersonalSlice() []*StudentPersonal {
  return make([]*StudentPersonal, 0)
  }
func StudentSchoolEnrollmentSlice() []*StudentSchoolEnrollment {
  return make([]*StudentSchoolEnrollment, 0)
  }
func StudentScoreJudgementAgainstStandardSlice() []*StudentScoreJudgementAgainstStandard {
  return make([]*StudentScoreJudgementAgainstStandard, 0)
  }
func StudentSectionEnrollmentSlice() []*StudentSectionEnrollment {
  return make([]*StudentSectionEnrollment, 0)
  }
func SystemRoleSlice() []*SystemRole {
  return make([]*SystemRole, 0)
  }
func TeachingGroupSlice() []*TeachingGroup {
  return make([]*TeachingGroup, 0)
  }
func TermInfoSlice() []*TermInfo {
  return make([]*TermInfo, 0)
  }
func TimeTableSlice() []*TimeTable {
  return make([]*TimeTable, 0)
  }
func TimeTableCellSlice() []*TimeTableCell {
  return make([]*TimeTableCell, 0)
  }
func TimeTableContainerSlice() []*TimeTableContainer {
  return make([]*TimeTableContainer, 0)
  }
func TimeTableSubjectSlice() []*TimeTableSubject {
  return make([]*TimeTableSubject, 0)
  }
func VendorInfoSlice() []*VendorInfo {
  return make([]*VendorInfo, 0)
  }
func WellbeingAlertSlice() []*WellbeingAlert {
  return make([]*WellbeingAlert, 0)
  }
func WellbeingAppealSlice() []*WellbeingAppeal {
  return make([]*WellbeingAppeal, 0)
  }
func WellbeingCharacteristicSlice() []*WellbeingCharacteristic {
  return make([]*WellbeingCharacteristic, 0)
  }
func WellbeingEventSlice() []*WellbeingEvent {
  return make([]*WellbeingEvent, 0)
  }
func WellbeingPersonLinkSlice() []*WellbeingPersonLink {
  return make([]*WellbeingPersonLink, 0)
  }
func WellbeingResponseSlice() []*WellbeingResponse {
  return make([]*WellbeingResponse, 0)
  }
  func ComponentsTypePointer(value interface{}) (*ComponentsType, bool) {
switch t := value.(type) {
        case *ComponentsType:
                return value.(*ComponentsType), true
        case ComponentsType:
                v, _ := value.(ComponentsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ComponentsType\n", t, value)
        }
        return nil, false
  }

  func (t *ComponentsType) Clone() (*ComponentsType) {
return reprint.This(t).(*ComponentsType)
  }
  func StaffSubjectTypePointer(value interface{}) (*StaffSubjectType, bool) {
switch t := value.(type) {
        case *StaffSubjectType:
                return value.(*StaffSubjectType), true
        case StaffSubjectType:
                v, _ := value.(StaffSubjectType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffSubjectType\n", t, value)
        }
        return nil, false
  }

  func (t *StaffSubjectType) Clone() (*StaffSubjectType) {
return reprint.This(t).(*StaffSubjectType)
  }
  func OtherNamesTypePointer(value interface{}) (*OtherNamesType, bool) {
switch t := value.(type) {
        case *OtherNamesType:
                return value.(*OtherNamesType), true
        case OtherNamesType:
                v, _ := value.(OtherNamesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherNamesType\n", t, value)
        }
        return nil, false
  }

  func (t *OtherNamesType) Clone() (*OtherNamesType) {
return reprint.This(t).(*OtherNamesType)
  }
  func AbstractContentElementType_ReferencePointer(value interface{}) (*AbstractContentElementType_Reference, bool) {
switch t := value.(type) {
        case *AbstractContentElementType_Reference:
                return value.(*AbstractContentElementType_Reference), true
        case AbstractContentElementType_Reference:
                v, _ := value.(AbstractContentElementType_Reference)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentElementType_Reference\n", t, value)
        }
        return nil, false
  }

  func (t *AbstractContentElementType_Reference) Clone() (*AbstractContentElementType_Reference) {
return reprint.This(t).(*AbstractContentElementType_Reference)
  }
  func NAPTestScoreSummaryPointer(value interface{}) (*NAPTestScoreSummary, bool) {
switch t := value.(type) {
        case *NAPTestScoreSummary:
                return value.(*NAPTestScoreSummary), true
        case NAPTestScoreSummary:
                v, _ := value.(NAPTestScoreSummary)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestScoreSummary\n", t, value)
        }
        return nil, false
  }

  func (t *NAPTestScoreSummary) Clone() (*NAPTestScoreSummary) {
return reprint.This(t).(*NAPTestScoreSummary)
  }
  func LifeCycleType_CreatorPointer(value interface{}) (*LifeCycleType_Creator, bool) {
switch t := value.(type) {
        case *LifeCycleType_Creator:
                return value.(*LifeCycleType_Creator), true
        case LifeCycleType_Creator:
                v, _ := value.(LifeCycleType_Creator)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType_Creator\n", t, value)
        }
        return nil, false
  }

  func (t *LifeCycleType_Creator) Clone() (*LifeCycleType_Creator) {
return reprint.This(t).(*LifeCycleType_Creator)
  }
  func LanguageOfInstructionTypePointer(value interface{}) (*LanguageOfInstructionType, bool) {
switch t := value.(type) {
        case *LanguageOfInstructionType:
                return value.(*LanguageOfInstructionType), true
        case LanguageOfInstructionType:
                v, _ := value.(LanguageOfInstructionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LanguageOfInstructionType\n", t, value)
        }
        return nil, false
  }

  func (t *LanguageOfInstructionType) Clone() (*LanguageOfInstructionType) {
return reprint.This(t).(*LanguageOfInstructionType)
  }
  func SchoolProgramTypePointer(value interface{}) (*SchoolProgramType, bool) {
switch t := value.(type) {
        case *SchoolProgramType:
                return value.(*SchoolProgramType), true
        case SchoolProgramType:
                v, _ := value.(SchoolProgramType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolProgramType\n", t, value)
        }
        return nil, false
  }

  func (t *SchoolProgramType) Clone() (*SchoolProgramType) {
return reprint.This(t).(*SchoolProgramType)
  }
  func StudentActivityParticipationPointer(value interface{}) (*StudentActivityParticipation, bool) {
switch t := value.(type) {
        case *StudentActivityParticipation:
                return value.(*StudentActivityParticipation), true
        case StudentActivityParticipation:
                v, _ := value.(StudentActivityParticipation)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentActivityParticipation\n", t, value)
        }
        return nil, false
  }

  func (t *StudentActivityParticipation) Clone() (*StudentActivityParticipation) {
return reprint.This(t).(*StudentActivityParticipation)
  }
  func IdentityAssertionsTypePointer(value interface{}) (*IdentityAssertionsType, bool) {
switch t := value.(type) {
        case *IdentityAssertionsType:
                return value.(*IdentityAssertionsType), true
        case IdentityAssertionsType:
                v, _ := value.(IdentityAssertionsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to IdentityAssertionsType\n", t, value)
        }
        return nil, false
  }

  func (t *IdentityAssertionsType) Clone() (*IdentityAssertionsType) {
return reprint.This(t).(*IdentityAssertionsType)
  }
  func TeachingGroupPeriodTypePointer(value interface{}) (*TeachingGroupPeriodType, bool) {
switch t := value.(type) {
        case *TeachingGroupPeriodType:
                return value.(*TeachingGroupPeriodType), true
        case TeachingGroupPeriodType:
                v, _ := value.(TeachingGroupPeriodType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupPeriodType\n", t, value)
        }
        return nil, false
  }

  func (t *TeachingGroupPeriodType) Clone() (*TeachingGroupPeriodType) {
return reprint.This(t).(*TeachingGroupPeriodType)
  }
  func NAPTestItemListTypePointer(value interface{}) (*NAPTestItemListType, bool) {
switch t := value.(type) {
        case *NAPTestItemListType:
                return value.(*NAPTestItemListType), true
        case NAPTestItemListType:
                v, _ := value.(NAPTestItemListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestItemListType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPTestItemListType) Clone() (*NAPTestItemListType) {
return reprint.This(t).(*NAPTestItemListType)
  }
  func WithdrawalTypePointer(value interface{}) (*WithdrawalType, bool) {
switch t := value.(type) {
        case *WithdrawalType:
                return value.(*WithdrawalType), true
        case WithdrawalType:
                v, _ := value.(WithdrawalType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WithdrawalType\n", t, value)
        }
        return nil, false
  }

  func (t *WithdrawalType) Clone() (*WithdrawalType) {
return reprint.This(t).(*WithdrawalType)
  }
  func NAPStudentResponseSetPointer(value interface{}) (*NAPStudentResponseSet, bool) {
switch t := value.(type) {
        case *NAPStudentResponseSet:
                return value.(*NAPStudentResponseSet), true
        case NAPStudentResponseSet:
                v, _ := value.(NAPStudentResponseSet)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPStudentResponseSet\n", t, value)
        }
        return nil, false
  }

  func (t *NAPStudentResponseSet) Clone() (*NAPStudentResponseSet) {
return reprint.This(t).(*NAPStudentResponseSet)
  }
  func AddressStreetTypePointer(value interface{}) (*AddressStreetType, bool) {
switch t := value.(type) {
        case *AddressStreetType:
                return value.(*AddressStreetType), true
        case AddressStreetType:
                v, _ := value.(AddressStreetType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressStreetType\n", t, value)
        }
        return nil, false
  }

  func (t *AddressStreetType) Clone() (*AddressStreetType) {
return reprint.This(t).(*AddressStreetType)
  }
  func LearningStandardItemPointer(value interface{}) (*LearningStandardItem, bool) {
switch t := value.(type) {
        case *LearningStandardItem:
                return value.(*LearningStandardItem), true
        case LearningStandardItem:
                v, _ := value.(LearningStandardItem)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningStandardItem\n", t, value)
        }
        return nil, false
  }

  func (t *LearningStandardItem) Clone() (*LearningStandardItem) {
return reprint.This(t).(*LearningStandardItem)
  }
  func ResourcesTypePointer(value interface{}) (*ResourcesType, bool) {
switch t := value.(type) {
        case *ResourcesType:
                return value.(*ResourcesType), true
        case ResourcesType:
                v, _ := value.(ResourcesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourcesType\n", t, value)
        }
        return nil, false
  }

  func (t *ResourcesType) Clone() (*ResourcesType) {
return reprint.This(t).(*ResourcesType)
  }
  func LEAContactListTypePointer(value interface{}) (*LEAContactListType, bool) {
switch t := value.(type) {
        case *LEAContactListType:
                return value.(*LEAContactListType), true
        case LEAContactListType:
                v, _ := value.(LEAContactListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LEAContactListType\n", t, value)
        }
        return nil, false
  }

  func (t *LEAContactListType) Clone() (*LEAContactListType) {
return reprint.This(t).(*LEAContactListType)
  }
  func WellbeingPlanTypePointer(value interface{}) (*WellbeingPlanType, bool) {
switch t := value.(type) {
        case *WellbeingPlanType:
                return value.(*WellbeingPlanType), true
        case WellbeingPlanType:
                v, _ := value.(WellbeingPlanType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingPlanType\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingPlanType) Clone() (*WellbeingPlanType) {
return reprint.This(t).(*WellbeingPlanType)
  }
  func StudentSubjectChoiceListTypePointer(value interface{}) (*StudentSubjectChoiceListType, bool) {
switch t := value.(type) {
        case *StudentSubjectChoiceListType:
                return value.(*StudentSubjectChoiceListType), true
        case StudentSubjectChoiceListType:
                v, _ := value.(StudentSubjectChoiceListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSubjectChoiceListType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentSubjectChoiceListType) Clone() (*StudentSubjectChoiceListType) {
return reprint.This(t).(*StudentSubjectChoiceListType)
  }
  func PersonPicture_PictureSourcePointer(value interface{}) (*PersonPicture_PictureSource, bool) {
switch t := value.(type) {
        case *PersonPicture_PictureSource:
                return value.(*PersonPicture_PictureSource), true
        case PersonPicture_PictureSource:
                v, _ := value.(PersonPicture_PictureSource)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonPicture_PictureSource\n", t, value)
        }
        return nil, false
  }

  func (t *PersonPicture_PictureSource) Clone() (*PersonPicture_PictureSource) {
return reprint.This(t).(*PersonPicture_PictureSource)
  }
  func PersonInvolvementType_PersonRefIdPointer(value interface{}) (*PersonInvolvementType_PersonRefId, bool) {
switch t := value.(type) {
        case *PersonInvolvementType_PersonRefId:
                return value.(*PersonInvolvementType_PersonRefId), true
        case PersonInvolvementType_PersonRefId:
                v, _ := value.(PersonInvolvementType_PersonRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonInvolvementType_PersonRefId\n", t, value)
        }
        return nil, false
  }

  func (t *PersonInvolvementType_PersonRefId) Clone() (*PersonInvolvementType_PersonRefId) {
return reprint.This(t).(*PersonInvolvementType_PersonRefId)
  }
  func WellbeingEventPointer(value interface{}) (*WellbeingEvent, bool) {
switch t := value.(type) {
        case *WellbeingEvent:
                return value.(*WellbeingEvent), true
        case WellbeingEvent:
                v, _ := value.(WellbeingEvent)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingEvent\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingEvent) Clone() (*WellbeingEvent) {
return reprint.This(t).(*WellbeingEvent)
  }
  func Journal_OriginatingTransactionRefIdPointer(value interface{}) (*Journal_OriginatingTransactionRefId, bool) {
switch t := value.(type) {
        case *Journal_OriginatingTransactionRefId:
                return value.(*Journal_OriginatingTransactionRefId), true
        case Journal_OriginatingTransactionRefId:
                v, _ := value.(Journal_OriginatingTransactionRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Journal_OriginatingTransactionRefId\n", t, value)
        }
        return nil, false
  }

  func (t *Journal_OriginatingTransactionRefId) Clone() (*Journal_OriginatingTransactionRefId) {
return reprint.This(t).(*Journal_OriginatingTransactionRefId)
  }
  func StudentEntryContainerTypePointer(value interface{}) (*StudentEntryContainerType, bool) {
switch t := value.(type) {
        case *StudentEntryContainerType:
                return value.(*StudentEntryContainerType), true
        case StudentEntryContainerType:
                v, _ := value.(StudentEntryContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentEntryContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentEntryContainerType) Clone() (*StudentEntryContainerType) {
return reprint.This(t).(*StudentEntryContainerType)
  }
  func ApprovalsTypePointer(value interface{}) (*ApprovalsType, bool) {
switch t := value.(type) {
        case *ApprovalsType:
                return value.(*ApprovalsType), true
        case ApprovalsType:
                v, _ := value.(ApprovalsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ApprovalsType\n", t, value)
        }
        return nil, false
  }

  func (t *ApprovalsType) Clone() (*ApprovalsType) {
return reprint.This(t).(*ApprovalsType)
  }
  func EquipmentInfo_SIF_RefIdPointer(value interface{}) (*EquipmentInfo_SIF_RefId, bool) {
switch t := value.(type) {
        case *EquipmentInfo_SIF_RefId:
                return value.(*EquipmentInfo_SIF_RefId), true
        case EquipmentInfo_SIF_RefId:
                v, _ := value.(EquipmentInfo_SIF_RefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EquipmentInfo_SIF_RefId\n", t, value)
        }
        return nil, false
  }

  func (t *EquipmentInfo_SIF_RefId) Clone() (*EquipmentInfo_SIF_RefId) {
return reprint.This(t).(*EquipmentInfo_SIF_RefId)
  }
  func AddressCollectionReportingListTypePointer(value interface{}) (*AddressCollectionReportingListType, bool) {
switch t := value.(type) {
        case *AddressCollectionReportingListType:
                return value.(*AddressCollectionReportingListType), true
        case AddressCollectionReportingListType:
                v, _ := value.(AddressCollectionReportingListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressCollectionReportingListType\n", t, value)
        }
        return nil, false
  }

  func (t *AddressCollectionReportingListType) Clone() (*AddressCollectionReportingListType) {
return reprint.This(t).(*AddressCollectionReportingListType)
  }
  func LifeCycleType_ModificationHistoryPointer(value interface{}) (*LifeCycleType_ModificationHistory, bool) {
switch t := value.(type) {
        case *LifeCycleType_ModificationHistory:
                return value.(*LifeCycleType_ModificationHistory), true
        case LifeCycleType_ModificationHistory:
                v, _ := value.(LifeCycleType_ModificationHistory)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType_ModificationHistory\n", t, value)
        }
        return nil, false
  }

  func (t *LifeCycleType_ModificationHistory) Clone() (*LifeCycleType_ModificationHistory) {
return reprint.This(t).(*LifeCycleType_ModificationHistory)
  }
  func ActivityTimeTypePointer(value interface{}) (*ActivityTimeType, bool) {
switch t := value.(type) {
        case *ActivityTimeType:
                return value.(*ActivityTimeType), true
        case ActivityTimeType:
                v, _ := value.(ActivityTimeType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ActivityTimeType\n", t, value)
        }
        return nil, false
  }

  func (t *ActivityTimeType) Clone() (*ActivityTimeType) {
return reprint.This(t).(*ActivityTimeType)
  }
  func TeachingGroupScheduleTypePointer(value interface{}) (*TeachingGroupScheduleType, bool) {
switch t := value.(type) {
        case *TeachingGroupScheduleType:
                return value.(*TeachingGroupScheduleType), true
        case TeachingGroupScheduleType:
                v, _ := value.(TeachingGroupScheduleType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupScheduleType\n", t, value)
        }
        return nil, false
  }

  func (t *TeachingGroupScheduleType) Clone() (*TeachingGroupScheduleType) {
return reprint.This(t).(*TeachingGroupScheduleType)
  }
  func ProgramStatusTypePointer(value interface{}) (*ProgramStatusType, bool) {
switch t := value.(type) {
        case *ProgramStatusType:
                return value.(*ProgramStatusType), true
        case ProgramStatusType:
                v, _ := value.(ProgramStatusType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ProgramStatusType\n", t, value)
        }
        return nil, false
  }

  func (t *ProgramStatusType) Clone() (*ProgramStatusType) {
return reprint.This(t).(*ProgramStatusType)
  }
  func LifeCycleType_CreatorsPointer(value interface{}) (*LifeCycleType_Creators, bool) {
switch t := value.(type) {
        case *LifeCycleType_Creators:
                return value.(*LifeCycleType_Creators), true
        case LifeCycleType_Creators:
                v, _ := value.(LifeCycleType_Creators)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType_Creators\n", t, value)
        }
        return nil, false
  }

  func (t *LifeCycleType_Creators) Clone() (*LifeCycleType_Creators) {
return reprint.This(t).(*LifeCycleType_Creators)
  }
  func AuthorsTypePointer(value interface{}) (*AuthorsType, bool) {
switch t := value.(type) {
        case *AuthorsType:
                return value.(*AuthorsType), true
        case AuthorsType:
                v, _ := value.(AuthorsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AuthorsType\n", t, value)
        }
        return nil, false
  }

  func (t *AuthorsType) Clone() (*AuthorsType) {
return reprint.This(t).(*AuthorsType)
  }
  func StudentsTypePointer(value interface{}) (*StudentsType, bool) {
switch t := value.(type) {
        case *StudentsType:
                return value.(*StudentsType), true
        case StudentsType:
                v, _ := value.(StudentsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentsType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentsType) Clone() (*StudentsType) {
return reprint.This(t).(*StudentsType)
  }
  func CatchmentStatusContainerTypePointer(value interface{}) (*CatchmentStatusContainerType, bool) {
switch t := value.(type) {
        case *CatchmentStatusContainerType:
                return value.(*CatchmentStatusContainerType), true
        case CatchmentStatusContainerType:
                v, _ := value.(CatchmentStatusContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CatchmentStatusContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *CatchmentStatusContainerType) Clone() (*CatchmentStatusContainerType) {
return reprint.This(t).(*CatchmentStatusContainerType)
  }
  func NAPCodeFrameTestletListTypePointer(value interface{}) (*NAPCodeFrameTestletListType, bool) {
switch t := value.(type) {
        case *NAPCodeFrameTestletListType:
                return value.(*NAPCodeFrameTestletListType), true
        case NAPCodeFrameTestletListType:
                v, _ := value.(NAPCodeFrameTestletListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPCodeFrameTestletListType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPCodeFrameTestletListType) Clone() (*NAPCodeFrameTestletListType) {
return reprint.This(t).(*NAPCodeFrameTestletListType)
  }
  func ScheduledActivityPointer(value interface{}) (*ScheduledActivity, bool) {
switch t := value.(type) {
        case *ScheduledActivity:
                return value.(*ScheduledActivity), true
        case ScheduledActivity:
                v, _ := value.(ScheduledActivity)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScheduledActivity\n", t, value)
        }
        return nil, false
  }

  func (t *ScheduledActivity) Clone() (*ScheduledActivity) {
return reprint.This(t).(*ScheduledActivity)
  }
  func TeachingGroupPeriodListTypePointer(value interface{}) (*TeachingGroupPeriodListType, bool) {
switch t := value.(type) {
        case *TeachingGroupPeriodListType:
                return value.(*TeachingGroupPeriodListType), true
        case TeachingGroupPeriodListType:
                v, _ := value.(TeachingGroupPeriodListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupPeriodListType\n", t, value)
        }
        return nil, false
  }

  func (t *TeachingGroupPeriodListType) Clone() (*TeachingGroupPeriodListType) {
return reprint.This(t).(*TeachingGroupPeriodListType)
  }
  func LifeCycleType_ModifiedPointer(value interface{}) (*LifeCycleType_Modified, bool) {
switch t := value.(type) {
        case *LifeCycleType_Modified:
                return value.(*LifeCycleType_Modified), true
        case LifeCycleType_Modified:
                v, _ := value.(LifeCycleType_Modified)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType_Modified\n", t, value)
        }
        return nil, false
  }

  func (t *LifeCycleType_Modified) Clone() (*LifeCycleType_Modified) {
return reprint.This(t).(*LifeCycleType_Modified)
  }
  func AuditInfoTypePointer(value interface{}) (*AuditInfoType, bool) {
switch t := value.(type) {
        case *AuditInfoType:
                return value.(*AuditInfoType), true
        case AuditInfoType:
                v, _ := value.(AuditInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AuditInfoType\n", t, value)
        }
        return nil, false
  }

  func (t *AuditInfoType) Clone() (*AuditInfoType) {
return reprint.This(t).(*AuditInfoType)
  }
  func StudentParticipation_ManagingSchoolPointer(value interface{}) (*StudentParticipation_ManagingSchool, bool) {
switch t := value.(type) {
        case *StudentParticipation_ManagingSchool:
                return value.(*StudentParticipation_ManagingSchool), true
        case StudentParticipation_ManagingSchool:
                v, _ := value.(StudentParticipation_ManagingSchool)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentParticipation_ManagingSchool\n", t, value)
        }
        return nil, false
  }

  func (t *StudentParticipation_ManagingSchool) Clone() (*StudentParticipation_ManagingSchool) {
return reprint.This(t).(*StudentParticipation_ManagingSchool)
  }
  func StudentAttendanceSummaryPointer(value interface{}) (*StudentAttendanceSummary, bool) {
switch t := value.(type) {
        case *StudentAttendanceSummary:
                return value.(*StudentAttendanceSummary), true
        case StudentAttendanceSummary:
                v, _ := value.(StudentAttendanceSummary)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentAttendanceSummary\n", t, value)
        }
        return nil, false
  }

  func (t *StudentAttendanceSummary) Clone() (*StudentAttendanceSummary) {
return reprint.This(t).(*StudentAttendanceSummary)
  }
  func SubjectAreaListTypePointer(value interface{}) (*SubjectAreaListType, bool) {
switch t := value.(type) {
        case *SubjectAreaListType:
                return value.(*SubjectAreaListType), true
        case SubjectAreaListType:
                v, _ := value.(SubjectAreaListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SubjectAreaListType\n", t, value)
        }
        return nil, false
  }

  func (t *SubjectAreaListType) Clone() (*SubjectAreaListType) {
return reprint.This(t).(*SubjectAreaListType)
  }
  func SchoolFocusListTypePointer(value interface{}) (*SchoolFocusListType, bool) {
switch t := value.(type) {
        case *SchoolFocusListType:
                return value.(*SchoolFocusListType), true
        case SchoolFocusListType:
                v, _ := value.(SchoolFocusListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolFocusListType\n", t, value)
        }
        return nil, false
  }

  func (t *SchoolFocusListType) Clone() (*SchoolFocusListType) {
return reprint.This(t).(*SchoolFocusListType)
  }
  func SIF_MetadataTypePointer(value interface{}) (*SIF_MetadataType, bool) {
switch t := value.(type) {
        case *SIF_MetadataType:
                return value.(*SIF_MetadataType), true
        case SIF_MetadataType:
                v, _ := value.(SIF_MetadataType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SIF_MetadataType\n", t, value)
        }
        return nil, false
  }

  func (t *SIF_MetadataType) Clone() (*SIF_MetadataType) {
return reprint.This(t).(*SIF_MetadataType)
  }
  func NAPTestletPointer(value interface{}) (*NAPTestlet, bool) {
switch t := value.(type) {
        case *NAPTestlet:
                return value.(*NAPTestlet), true
        case NAPTestlet:
                v, _ := value.(NAPTestlet)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestlet\n", t, value)
        }
        return nil, false
  }

  func (t *NAPTestlet) Clone() (*NAPTestlet) {
return reprint.This(t).(*NAPTestlet)
  }
  func TimeTableDayTypePointer(value interface{}) (*TimeTableDayType, bool) {
switch t := value.(type) {
        case *TimeTableDayType:
                return value.(*TimeTableDayType), true
        case TimeTableDayType:
                v, _ := value.(TimeTableDayType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableDayType\n", t, value)
        }
        return nil, false
  }

  func (t *TimeTableDayType) Clone() (*TimeTableDayType) {
return reprint.This(t).(*TimeTableDayType)
  }
  func ExclusionRuleTypePointer(value interface{}) (*ExclusionRuleType, bool) {
switch t := value.(type) {
        case *ExclusionRuleType:
                return value.(*ExclusionRuleType), true
        case ExclusionRuleType:
                v, _ := value.(ExclusionRuleType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ExclusionRuleType\n", t, value)
        }
        return nil, false
  }

  func (t *ExclusionRuleType) Clone() (*ExclusionRuleType) {
return reprint.This(t).(*ExclusionRuleType)
  }
  func ApprovalTypePointer(value interface{}) (*ApprovalType, bool) {
switch t := value.(type) {
        case *ApprovalType:
                return value.(*ApprovalType), true
        case ApprovalType:
                v, _ := value.(ApprovalType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ApprovalType\n", t, value)
        }
        return nil, false
  }

  func (t *ApprovalType) Clone() (*ApprovalType) {
return reprint.This(t).(*ApprovalType)
  }
  func SourceObjectsTypePointer(value interface{}) (*SourceObjectsType, bool) {
switch t := value.(type) {
        case *SourceObjectsType:
                return value.(*SourceObjectsType), true
        case SourceObjectsType:
                v, _ := value.(SourceObjectsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SourceObjectsType\n", t, value)
        }
        return nil, false
  }

  func (t *SourceObjectsType) Clone() (*SourceObjectsType) {
return reprint.This(t).(*SourceObjectsType)
  }
  func LResourcesTypePointer(value interface{}) (*LResourcesType, bool) {
switch t := value.(type) {
        case *LResourcesType:
                return value.(*LResourcesType), true
        case LResourcesType:
                v, _ := value.(LResourcesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LResourcesType\n", t, value)
        }
        return nil, false
  }

  func (t *LResourcesType) Clone() (*LResourcesType) {
return reprint.This(t).(*LResourcesType)
  }
  func NAPTestletContentTypePointer(value interface{}) (*NAPTestletContentType, bool) {
switch t := value.(type) {
        case *NAPTestletContentType:
                return value.(*NAPTestletContentType), true
        case NAPTestletContentType:
                v, _ := value.(NAPTestletContentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestletContentType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPTestletContentType) Clone() (*NAPTestletContentType) {
return reprint.This(t).(*NAPTestletContentType)
  }
  func DemographicsTypePointer(value interface{}) (*DemographicsType, bool) {
switch t := value.(type) {
        case *DemographicsType:
                return value.(*DemographicsType), true
        case DemographicsType:
                v, _ := value.(DemographicsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DemographicsType\n", t, value)
        }
        return nil, false
  }

  func (t *DemographicsType) Clone() (*DemographicsType) {
return reprint.This(t).(*DemographicsType)
  }
  func PrerequisitesTypePointer(value interface{}) (*PrerequisitesType, bool) {
switch t := value.(type) {
        case *PrerequisitesType:
                return value.(*PrerequisitesType), true
        case PrerequisitesType:
                v, _ := value.(PrerequisitesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PrerequisitesType\n", t, value)
        }
        return nil, false
  }

  func (t *PrerequisitesType) Clone() (*PrerequisitesType) {
return reprint.This(t).(*PrerequisitesType)
  }
  func AssociatedObjectsTypePointer(value interface{}) (*AssociatedObjectsType, bool) {
switch t := value.(type) {
        case *AssociatedObjectsType:
                return value.(*AssociatedObjectsType), true
        case AssociatedObjectsType:
                v, _ := value.(AssociatedObjectsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AssociatedObjectsType\n", t, value)
        }
        return nil, false
  }

  func (t *AssociatedObjectsType) Clone() (*AssociatedObjectsType) {
return reprint.This(t).(*AssociatedObjectsType)
  }
  func PlanRequiredContainerTypePointer(value interface{}) (*PlanRequiredContainerType, bool) {
switch t := value.(type) {
        case *PlanRequiredContainerType:
                return value.(*PlanRequiredContainerType), true
        case PlanRequiredContainerType:
                v, _ := value.(PlanRequiredContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PlanRequiredContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *PlanRequiredContainerType) Clone() (*PlanRequiredContainerType) {
return reprint.This(t).(*PlanRequiredContainerType)
  }
  func NAPTestContentTypePointer(value interface{}) (*NAPTestContentType, bool) {
switch t := value.(type) {
        case *NAPTestContentType:
                return value.(*NAPTestContentType), true
        case NAPTestContentType:
                v, _ := value.(NAPTestContentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestContentType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPTestContentType) Clone() (*NAPTestContentType) {
return reprint.This(t).(*NAPTestContentType)
  }
  func NAPTestPointer(value interface{}) (*NAPTest, bool) {
switch t := value.(type) {
        case *NAPTest:
                return value.(*NAPTest), true
        case NAPTest:
                v, _ := value.(NAPTest)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTest\n", t, value)
        }
        return nil, false
  }

  func (t *NAPTest) Clone() (*NAPTest) {
return reprint.This(t).(*NAPTest)
  }
  func EvaluationsTypePointer(value interface{}) (*EvaluationsType, bool) {
switch t := value.(type) {
        case *EvaluationsType:
                return value.(*EvaluationsType), true
        case EvaluationsType:
                v, _ := value.(EvaluationsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EvaluationsType\n", t, value)
        }
        return nil, false
  }

  func (t *EvaluationsType) Clone() (*EvaluationsType) {
return reprint.This(t).(*EvaluationsType)
  }
  func AbstractContentPackageType_XMLDataPointer(value interface{}) (*AbstractContentPackageType_XMLData, bool) {
switch t := value.(type) {
        case *AbstractContentPackageType_XMLData:
                return value.(*AbstractContentPackageType_XMLData), true
        case AbstractContentPackageType_XMLData:
                v, _ := value.(AbstractContentPackageType_XMLData)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentPackageType_XMLData\n", t, value)
        }
        return nil, false
  }

  func (t *AbstractContentPackageType_XMLData) Clone() (*AbstractContentPackageType_XMLData) {
return reprint.This(t).(*AbstractContentPackageType_XMLData)
  }
  func WellbeingPersonLink_PersonRefIdPointer(value interface{}) (*WellbeingPersonLink_PersonRefId, bool) {
switch t := value.(type) {
        case *WellbeingPersonLink_PersonRefId:
                return value.(*WellbeingPersonLink_PersonRefId), true
        case WellbeingPersonLink_PersonRefId:
                v, _ := value.(WellbeingPersonLink_PersonRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingPersonLink_PersonRefId\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingPersonLink_PersonRefId) Clone() (*WellbeingPersonLink_PersonRefId) {
return reprint.This(t).(*WellbeingPersonLink_PersonRefId)
  }
  func ResourceUsagePointer(value interface{}) (*ResourceUsage, bool) {
switch t := value.(type) {
        case *ResourceUsage:
                return value.(*ResourceUsage), true
        case ResourceUsage:
                v, _ := value.(ResourceUsage)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage\n", t, value)
        }
        return nil, false
  }

  func (t *ResourceUsage) Clone() (*ResourceUsage) {
return reprint.This(t).(*ResourceUsage)
  }
  func LEAContactTypePointer(value interface{}) (*LEAContactType, bool) {
switch t := value.(type) {
        case *LEAContactType:
                return value.(*LEAContactType), true
        case LEAContactType:
                v, _ := value.(LEAContactType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LEAContactType\n", t, value)
        }
        return nil, false
  }

  func (t *LEAContactType) Clone() (*LEAContactType) {
return reprint.This(t).(*LEAContactType)
  }
  func ResourceBookingPointer(value interface{}) (*ResourceBooking, bool) {
switch t := value.(type) {
        case *ResourceBooking:
                return value.(*ResourceBooking), true
        case ResourceBooking:
                v, _ := value.(ResourceBooking)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceBooking\n", t, value)
        }
        return nil, false
  }

  func (t *ResourceBooking) Clone() (*ResourceBooking) {
return reprint.This(t).(*ResourceBooking)
  }
  func AddressCollectionStudentTypePointer(value interface{}) (*AddressCollectionStudentType, bool) {
switch t := value.(type) {
        case *AddressCollectionStudentType:
                return value.(*AddressCollectionStudentType), true
        case AddressCollectionStudentType:
                v, _ := value.(AddressCollectionStudentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressCollectionStudentType\n", t, value)
        }
        return nil, false
  }

  func (t *AddressCollectionStudentType) Clone() (*AddressCollectionStudentType) {
return reprint.This(t).(*AddressCollectionStudentType)
  }
  func OtherIdListTypePointer(value interface{}) (*OtherIdListType, bool) {
switch t := value.(type) {
        case *OtherIdListType:
                return value.(*OtherIdListType), true
        case OtherIdListType:
                v, _ := value.(OtherIdListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherIdListType\n", t, value)
        }
        return nil, false
  }

  func (t *OtherIdListType) Clone() (*OtherIdListType) {
return reprint.This(t).(*OtherIdListType)
  }
  func EducationFilterTypePointer(value interface{}) (*EducationFilterType, bool) {
switch t := value.(type) {
        case *EducationFilterType:
                return value.(*EducationFilterType), true
        case EducationFilterType:
                v, _ := value.(EducationFilterType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EducationFilterType\n", t, value)
        }
        return nil, false
  }

  func (t *EducationFilterType) Clone() (*EducationFilterType) {
return reprint.This(t).(*EducationFilterType)
  }
  func LearningObjectivesTypePointer(value interface{}) (*LearningObjectivesType, bool) {
switch t := value.(type) {
        case *LearningObjectivesType:
                return value.(*LearningObjectivesType), true
        case LearningObjectivesType:
                v, _ := value.(LearningObjectivesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningObjectivesType\n", t, value)
        }
        return nil, false
  }

  func (t *LearningObjectivesType) Clone() (*LearningObjectivesType) {
return reprint.This(t).(*LearningObjectivesType)
  }
  func AbstractContentElementType_BinaryDataPointer(value interface{}) (*AbstractContentElementType_BinaryData, bool) {
switch t := value.(type) {
        case *AbstractContentElementType_BinaryData:
                return value.(*AbstractContentElementType_BinaryData), true
        case AbstractContentElementType_BinaryData:
                v, _ := value.(AbstractContentElementType_BinaryData)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentElementType_BinaryData\n", t, value)
        }
        return nil, false
  }

  func (t *AbstractContentElementType_BinaryData) Clone() (*AbstractContentElementType_BinaryData) {
return reprint.This(t).(*AbstractContentElementType_BinaryData)
  }
  func StudentSchoolEnrollment_HomeroomPointer(value interface{}) (*StudentSchoolEnrollment_Homeroom, bool) {
switch t := value.(type) {
        case *StudentSchoolEnrollment_Homeroom:
                return value.(*StudentSchoolEnrollment_Homeroom), true
        case StudentSchoolEnrollment_Homeroom:
                v, _ := value.(StudentSchoolEnrollment_Homeroom)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSchoolEnrollment_Homeroom\n", t, value)
        }
        return nil, false
  }

  func (t *StudentSchoolEnrollment_Homeroom) Clone() (*StudentSchoolEnrollment_Homeroom) {
return reprint.This(t).(*StudentSchoolEnrollment_Homeroom)
  }
  func ValidLetterMarkListTypePointer(value interface{}) (*ValidLetterMarkListType, bool) {
switch t := value.(type) {
        case *ValidLetterMarkListType:
                return value.(*ValidLetterMarkListType), true
        case ValidLetterMarkListType:
                v, _ := value.(ValidLetterMarkListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ValidLetterMarkListType\n", t, value)
        }
        return nil, false
  }

  func (t *ValidLetterMarkListType) Clone() (*ValidLetterMarkListType) {
return reprint.This(t).(*ValidLetterMarkListType)
  }
  func ResourceUsage_ResourceUsageContentTypePointer(value interface{}) (*ResourceUsage_ResourceUsageContentType, bool) {
switch t := value.(type) {
        case *ResourceUsage_ResourceUsageContentType:
                return value.(*ResourceUsage_ResourceUsageContentType), true
        case ResourceUsage_ResourceUsageContentType:
                v, _ := value.(ResourceUsage_ResourceUsageContentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage_ResourceUsageContentType\n", t, value)
        }
        return nil, false
  }

  func (t *ResourceUsage_ResourceUsageContentType) Clone() (*ResourceUsage_ResourceUsageContentType) {
return reprint.This(t).(*ResourceUsage_ResourceUsageContentType)
  }
  func TimeTablePeriodListTypePointer(value interface{}) (*TimeTablePeriodListType, bool) {
switch t := value.(type) {
        case *TimeTablePeriodListType:
                return value.(*TimeTablePeriodListType), true
        case TimeTablePeriodListType:
                v, _ := value.(TimeTablePeriodListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTablePeriodListType\n", t, value)
        }
        return nil, false
  }

  func (t *TimeTablePeriodListType) Clone() (*TimeTablePeriodListType) {
return reprint.This(t).(*TimeTablePeriodListType)
  }
  func RoomListTypePointer(value interface{}) (*RoomListType, bool) {
switch t := value.(type) {
        case *RoomListType:
                return value.(*RoomListType), true
        case RoomListType:
                v, _ := value.(RoomListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to RoomListType\n", t, value)
        }
        return nil, false
  }

  func (t *RoomListType) Clone() (*RoomListType) {
return reprint.This(t).(*RoomListType)
  }
  func ProgramAvailabilityTypePointer(value interface{}) (*ProgramAvailabilityType, bool) {
switch t := value.(type) {
        case *ProgramAvailabilityType:
                return value.(*ProgramAvailabilityType), true
        case ProgramAvailabilityType:
                v, _ := value.(ProgramAvailabilityType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ProgramAvailabilityType\n", t, value)
        }
        return nil, false
  }

  func (t *ProgramAvailabilityType) Clone() (*ProgramAvailabilityType) {
return reprint.This(t).(*ProgramAvailabilityType)
  }
  func LEAInfoPointer(value interface{}) (*LEAInfo, bool) {
switch t := value.(type) {
        case *LEAInfo:
                return value.(*LEAInfo), true
        case LEAInfo:
                v, _ := value.(LEAInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LEAInfo\n", t, value)
        }
        return nil, false
  }

  func (t *LEAInfo) Clone() (*LEAInfo) {
return reprint.This(t).(*LEAInfo)
  }
  func CensusReportingListTypePointer(value interface{}) (*CensusReportingListType, bool) {
switch t := value.(type) {
        case *CensusReportingListType:
                return value.(*CensusReportingListType), true
        case CensusReportingListType:
                v, _ := value.(CensusReportingListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusReportingListType\n", t, value)
        }
        return nil, false
  }

  func (t *CensusReportingListType) Clone() (*CensusReportingListType) {
return reprint.This(t).(*CensusReportingListType)
  }
  func SubjectAreaTypePointer(value interface{}) (*SubjectAreaType, bool) {
switch t := value.(type) {
        case *SubjectAreaType:
                return value.(*SubjectAreaType), true
        case SubjectAreaType:
                v, _ := value.(SubjectAreaType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SubjectAreaType\n", t, value)
        }
        return nil, false
  }

  func (t *SubjectAreaType) Clone() (*SubjectAreaType) {
return reprint.This(t).(*SubjectAreaType)
  }
  func ElectronicIdListTypePointer(value interface{}) (*ElectronicIdListType, bool) {
switch t := value.(type) {
        case *ElectronicIdListType:
                return value.(*ElectronicIdListType), true
        case ElectronicIdListType:
                v, _ := value.(ElectronicIdListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ElectronicIdListType\n", t, value)
        }
        return nil, false
  }

  func (t *ElectronicIdListType) Clone() (*ElectronicIdListType) {
return reprint.This(t).(*ElectronicIdListType)
  }
  func StudentMostRecentContainerTypePointer(value interface{}) (*StudentMostRecentContainerType, bool) {
switch t := value.(type) {
        case *StudentMostRecentContainerType:
                return value.(*StudentMostRecentContainerType), true
        case StudentMostRecentContainerType:
                v, _ := value.(StudentMostRecentContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentMostRecentContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentMostRecentContainerType) Clone() (*StudentMostRecentContainerType) {
return reprint.This(t).(*StudentMostRecentContainerType)
  }
  func StaffListTypePointer(value interface{}) (*StaffListType, bool) {
switch t := value.(type) {
        case *StaffListType:
                return value.(*StaffListType), true
        case StaffListType:
                v, _ := value.(StaffListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffListType\n", t, value)
        }
        return nil, false
  }

  func (t *StaffListType) Clone() (*StaffListType) {
return reprint.This(t).(*StaffListType)
  }
  func GradeTypePointer(value interface{}) (*GradeType, bool) {
switch t := value.(type) {
        case *GradeType:
                return value.(*GradeType), true
        case GradeType:
                v, _ := value.(GradeType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to GradeType\n", t, value)
        }
        return nil, false
  }

  func (t *GradeType) Clone() (*GradeType) {
return reprint.This(t).(*GradeType)
  }
  func AGContextualQuestionTypePointer(value interface{}) (*AGContextualQuestionType, bool) {
switch t := value.(type) {
        case *AGContextualQuestionType:
                return value.(*AGContextualQuestionType), true
        case AGContextualQuestionType:
                v, _ := value.(AGContextualQuestionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGContextualQuestionType\n", t, value)
        }
        return nil, false
  }

  func (t *AGContextualQuestionType) Clone() (*AGContextualQuestionType) {
return reprint.This(t).(*AGContextualQuestionType)
  }
  func JournalAdjustmentTypePointer(value interface{}) (*JournalAdjustmentType, bool) {
switch t := value.(type) {
        case *JournalAdjustmentType:
                return value.(*JournalAdjustmentType), true
        case JournalAdjustmentType:
                v, _ := value.(JournalAdjustmentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to JournalAdjustmentType\n", t, value)
        }
        return nil, false
  }

  func (t *JournalAdjustmentType) Clone() (*JournalAdjustmentType) {
return reprint.This(t).(*JournalAdjustmentType)
  }
  func StandardHierarchyLevelTypePointer(value interface{}) (*StandardHierarchyLevelType, bool) {
switch t := value.(type) {
        case *StandardHierarchyLevelType:
                return value.(*StandardHierarchyLevelType), true
        case StandardHierarchyLevelType:
                v, _ := value.(StandardHierarchyLevelType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StandardHierarchyLevelType\n", t, value)
        }
        return nil, false
  }

  func (t *StandardHierarchyLevelType) Clone() (*StandardHierarchyLevelType) {
return reprint.This(t).(*StandardHierarchyLevelType)
  }
  func SessionInfoPointer(value interface{}) (*SessionInfo, bool) {
switch t := value.(type) {
        case *SessionInfo:
                return value.(*SessionInfo), true
        case SessionInfo:
                v, _ := value.(SessionInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SessionInfo\n", t, value)
        }
        return nil, false
  }

  func (t *SessionInfo) Clone() (*SessionInfo) {
return reprint.This(t).(*SessionInfo)
  }
  func TimeTableScheduleCellListTypePointer(value interface{}) (*TimeTableScheduleCellListType, bool) {
switch t := value.(type) {
        case *TimeTableScheduleCellListType:
                return value.(*TimeTableScheduleCellListType), true
        case TimeTableScheduleCellListType:
                v, _ := value.(TimeTableScheduleCellListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableScheduleCellListType\n", t, value)
        }
        return nil, false
  }

  func (t *TimeTableScheduleCellListType) Clone() (*TimeTableScheduleCellListType) {
return reprint.This(t).(*TimeTableScheduleCellListType)
  }
  func PlanRequiredListTypePointer(value interface{}) (*PlanRequiredListType, bool) {
switch t := value.(type) {
        case *PlanRequiredListType:
                return value.(*PlanRequiredListType), true
        case PlanRequiredListType:
                v, _ := value.(PlanRequiredListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PlanRequiredListType\n", t, value)
        }
        return nil, false
  }

  func (t *PlanRequiredListType) Clone() (*PlanRequiredListType) {
return reprint.This(t).(*PlanRequiredListType)
  }
  func ReligiousEventListTypePointer(value interface{}) (*ReligiousEventListType, bool) {
switch t := value.(type) {
        case *ReligiousEventListType:
                return value.(*ReligiousEventListType), true
        case ReligiousEventListType:
                v, _ := value.(ReligiousEventListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ReligiousEventListType\n", t, value)
        }
        return nil, false
  }

  func (t *ReligiousEventListType) Clone() (*ReligiousEventListType) {
return reprint.This(t).(*ReligiousEventListType)
  }
  func TimeTableSubjectPointer(value interface{}) (*TimeTableSubject, bool) {
switch t := value.(type) {
        case *TimeTableSubject:
                return value.(*TimeTableSubject), true
        case TimeTableSubject:
                v, _ := value.(TimeTableSubject)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableSubject\n", t, value)
        }
        return nil, false
  }

  func (t *TimeTableSubject) Clone() (*TimeTableSubject) {
return reprint.This(t).(*TimeTableSubject)
  }
  func WellbeingPersonLinkPointer(value interface{}) (*WellbeingPersonLink, bool) {
switch t := value.(type) {
        case *WellbeingPersonLink:
                return value.(*WellbeingPersonLink), true
        case WellbeingPersonLink:
                v, _ := value.(WellbeingPersonLink)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingPersonLink\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingPersonLink) Clone() (*WellbeingPersonLink) {
return reprint.This(t).(*WellbeingPersonLink)
  }
  func MedicalAlertMessageTypePointer(value interface{}) (*MedicalAlertMessageType, bool) {
switch t := value.(type) {
        case *MedicalAlertMessageType:
                return value.(*MedicalAlertMessageType), true
        case MedicalAlertMessageType:
                v, _ := value.(MedicalAlertMessageType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MedicalAlertMessageType\n", t, value)
        }
        return nil, false
  }

  func (t *MedicalAlertMessageType) Clone() (*MedicalAlertMessageType) {
return reprint.This(t).(*MedicalAlertMessageType)
  }
  func TeachingGroupTeacherTypePointer(value interface{}) (*TeachingGroupTeacherType, bool) {
switch t := value.(type) {
        case *TeachingGroupTeacherType:
                return value.(*TeachingGroupTeacherType), true
        case TeachingGroupTeacherType:
                v, _ := value.(TeachingGroupTeacherType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupTeacherType\n", t, value)
        }
        return nil, false
  }

  func (t *TeachingGroupTeacherType) Clone() (*TeachingGroupTeacherType) {
return reprint.This(t).(*TeachingGroupTeacherType)
  }
  func PNPCodeListTypePointer(value interface{}) (*PNPCodeListType, bool) {
switch t := value.(type) {
        case *PNPCodeListType:
                return value.(*PNPCodeListType), true
        case PNPCodeListType:
                v, _ := value.(PNPCodeListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PNPCodeListType\n", t, value)
        }
        return nil, false
  }

  func (t *PNPCodeListType) Clone() (*PNPCodeListType) {
return reprint.This(t).(*PNPCodeListType)
  }
  func WellbeingEventLocationDetailsTypePointer(value interface{}) (*WellbeingEventLocationDetailsType, bool) {
switch t := value.(type) {
        case *WellbeingEventLocationDetailsType:
                return value.(*WellbeingEventLocationDetailsType), true
        case WellbeingEventLocationDetailsType:
                v, _ := value.(WellbeingEventLocationDetailsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingEventLocationDetailsType\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingEventLocationDetailsType) Clone() (*WellbeingEventLocationDetailsType) {
return reprint.This(t).(*WellbeingEventLocationDetailsType)
  }
  func SchoolCourseInfoOverrideTypePointer(value interface{}) (*SchoolCourseInfoOverrideType, bool) {
switch t := value.(type) {
        case *SchoolCourseInfoOverrideType:
                return value.(*SchoolCourseInfoOverrideType), true
        case SchoolCourseInfoOverrideType:
                v, _ := value.(SchoolCourseInfoOverrideType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolCourseInfoOverrideType\n", t, value)
        }
        return nil, false
  }

  func (t *SchoolCourseInfoOverrideType) Clone() (*SchoolCourseInfoOverrideType) {
return reprint.This(t).(*SchoolCourseInfoOverrideType)
  }
  func PasswordListTypePointer(value interface{}) (*PasswordListType, bool) {
switch t := value.(type) {
        case *PasswordListType:
                return value.(*PasswordListType), true
        case PasswordListType:
                v, _ := value.(PasswordListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PasswordListType\n", t, value)
        }
        return nil, false
  }

  func (t *PasswordListType) Clone() (*PasswordListType) {
return reprint.This(t).(*PasswordListType)
  }
  func LearningStandardDocumentPointer(value interface{}) (*LearningStandardDocument, bool) {
switch t := value.(type) {
        case *LearningStandardDocument:
                return value.(*LearningStandardDocument), true
        case LearningStandardDocument:
                v, _ := value.(LearningStandardDocument)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningStandardDocument\n", t, value)
        }
        return nil, false
  }

  func (t *LearningStandardDocument) Clone() (*LearningStandardDocument) {
return reprint.This(t).(*LearningStandardDocument)
  }
  func PaymentReceiptLineListTypePointer(value interface{}) (*PaymentReceiptLineListType, bool) {
switch t := value.(type) {
        case *PaymentReceiptLineListType:
                return value.(*PaymentReceiptLineListType), true
        case PaymentReceiptLineListType:
                v, _ := value.(PaymentReceiptLineListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PaymentReceiptLineListType\n", t, value)
        }
        return nil, false
  }

  func (t *PaymentReceiptLineListType) Clone() (*PaymentReceiptLineListType) {
return reprint.This(t).(*PaymentReceiptLineListType)
  }
  func NAPWritingRubricTypePointer(value interface{}) (*NAPWritingRubricType, bool) {
switch t := value.(type) {
        case *NAPWritingRubricType:
                return value.(*NAPWritingRubricType), true
        case NAPWritingRubricType:
                v, _ := value.(NAPWritingRubricType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPWritingRubricType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPWritingRubricType) Clone() (*NAPWritingRubricType) {
return reprint.This(t).(*NAPWritingRubricType)
  }
  func ResourceUsage_ResourceReportColumnPointer(value interface{}) (*ResourceUsage_ResourceReportColumn, bool) {
switch t := value.(type) {
        case *ResourceUsage_ResourceReportColumn:
                return value.(*ResourceUsage_ResourceReportColumn), true
        case ResourceUsage_ResourceReportColumn:
                v, _ := value.(ResourceUsage_ResourceReportColumn)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage_ResourceReportColumn\n", t, value)
        }
        return nil, false
  }

  func (t *ResourceUsage_ResourceReportColumn) Clone() (*ResourceUsage_ResourceReportColumn) {
return reprint.This(t).(*ResourceUsage_ResourceReportColumn)
  }
  func ACStrandAreaListTypePointer(value interface{}) (*ACStrandAreaListType, bool) {
switch t := value.(type) {
        case *ACStrandAreaListType:
                return value.(*ACStrandAreaListType), true
        case ACStrandAreaListType:
                v, _ := value.(ACStrandAreaListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ACStrandAreaListType\n", t, value)
        }
        return nil, false
  }

  func (t *ACStrandAreaListType) Clone() (*ACStrandAreaListType) {
return reprint.This(t).(*ACStrandAreaListType)
  }
  func AttendanceTimeTypePointer(value interface{}) (*AttendanceTimeType, bool) {
switch t := value.(type) {
        case *AttendanceTimeType:
                return value.(*AttendanceTimeType), true
        case AttendanceTimeType:
                v, _ := value.(AttendanceTimeType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AttendanceTimeType\n", t, value)
        }
        return nil, false
  }

  func (t *AttendanceTimeType) Clone() (*AttendanceTimeType) {
return reprint.This(t).(*AttendanceTimeType)
  }
  func StudentGroupListTypePointer(value interface{}) (*StudentGroupListType, bool) {
switch t := value.(type) {
        case *StudentGroupListType:
                return value.(*StudentGroupListType), true
        case StudentGroupListType:
                v, _ := value.(StudentGroupListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentGroupListType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentGroupListType) Clone() (*StudentGroupListType) {
return reprint.This(t).(*StudentGroupListType)
  }
  func FollowUpActionListTypePointer(value interface{}) (*FollowUpActionListType, bool) {
switch t := value.(type) {
        case *FollowUpActionListType:
                return value.(*FollowUpActionListType), true
        case FollowUpActionListType:
                v, _ := value.(FollowUpActionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FollowUpActionListType\n", t, value)
        }
        return nil, false
  }

  func (t *FollowUpActionListType) Clone() (*FollowUpActionListType) {
return reprint.This(t).(*FollowUpActionListType)
  }
  func SystemRole_RoleListPointer(value interface{}) (*SystemRole_RoleList, bool) {
switch t := value.(type) {
        case *SystemRole_RoleList:
                return value.(*SystemRole_RoleList), true
        case SystemRole_RoleList:
                v, _ := value.(SystemRole_RoleList)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_RoleList\n", t, value)
        }
        return nil, false
  }

  func (t *SystemRole_RoleList) Clone() (*SystemRole_RoleList) {
return reprint.This(t).(*SystemRole_RoleList)
  }
  func CollectionStatusPointer(value interface{}) (*CollectionStatus, bool) {
switch t := value.(type) {
        case *CollectionStatus:
                return value.(*CollectionStatus), true
        case CollectionStatus:
                v, _ := value.(CollectionStatus)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CollectionStatus\n", t, value)
        }
        return nil, false
  }

  func (t *CollectionStatus) Clone() (*CollectionStatus) {
return reprint.This(t).(*CollectionStatus)
  }
  func ResourceUsage_ResourceReportColumnListPointer(value interface{}) (*ResourceUsage_ResourceReportColumnList, bool) {
switch t := value.(type) {
        case *ResourceUsage_ResourceReportColumnList:
                return value.(*ResourceUsage_ResourceReportColumnList), true
        case ResourceUsage_ResourceReportColumnList:
                v, _ := value.(ResourceUsage_ResourceReportColumnList)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage_ResourceReportColumnList\n", t, value)
        }
        return nil, false
  }

  func (t *ResourceUsage_ResourceReportColumnList) Clone() (*ResourceUsage_ResourceReportColumnList) {
return reprint.This(t).(*ResourceUsage_ResourceReportColumnList)
  }
  func VisaSubClassListTypePointer(value interface{}) (*VisaSubClassListType, bool) {
switch t := value.(type) {
        case *VisaSubClassListType:
                return value.(*VisaSubClassListType), true
        case VisaSubClassListType:
                v, _ := value.(VisaSubClassListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to VisaSubClassListType\n", t, value)
        }
        return nil, false
  }

  func (t *VisaSubClassListType) Clone() (*VisaSubClassListType) {
return reprint.This(t).(*VisaSubClassListType)
  }
  func StaffActivityExtensionTypePointer(value interface{}) (*StaffActivityExtensionType, bool) {
switch t := value.(type) {
        case *StaffActivityExtensionType:
                return value.(*StaffActivityExtensionType), true
        case StaffActivityExtensionType:
                v, _ := value.(StaffActivityExtensionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffActivityExtensionType\n", t, value)
        }
        return nil, false
  }

  func (t *StaffActivityExtensionType) Clone() (*StaffActivityExtensionType) {
return reprint.This(t).(*StaffActivityExtensionType)
  }
  func AGRoundTypePointer(value interface{}) (*AGRoundType, bool) {
switch t := value.(type) {
        case *AGRoundType:
                return value.(*AGRoundType), true
        case AGRoundType:
                v, _ := value.(AGRoundType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGRoundType\n", t, value)
        }
        return nil, false
  }

  func (t *AGRoundType) Clone() (*AGRoundType) {
return reprint.This(t).(*AGRoundType)
  }
  func LibraryTransactionListTypePointer(value interface{}) (*LibraryTransactionListType, bool) {
switch t := value.(type) {
        case *LibraryTransactionListType:
                return value.(*LibraryTransactionListType), true
        case LibraryTransactionListType:
                v, _ := value.(LibraryTransactionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LibraryTransactionListType\n", t, value)
        }
        return nil, false
  }

  func (t *LibraryTransactionListType) Clone() (*LibraryTransactionListType) {
return reprint.This(t).(*LibraryTransactionListType)
  }
  func MarkerTypePointer(value interface{}) (*MarkerType, bool) {
switch t := value.(type) {
        case *MarkerType:
                return value.(*MarkerType), true
        case MarkerType:
                v, _ := value.(MarkerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MarkerType\n", t, value)
        }
        return nil, false
  }

  func (t *MarkerType) Clone() (*MarkerType) {
return reprint.This(t).(*MarkerType)
  }
  func Debtor_BilledEntityPointer(value interface{}) (*Debtor_BilledEntity, bool) {
switch t := value.(type) {
        case *Debtor_BilledEntity:
                return value.(*Debtor_BilledEntity), true
        case Debtor_BilledEntity:
                v, _ := value.(Debtor_BilledEntity)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Debtor_BilledEntity\n", t, value)
        }
        return nil, false
  }

  func (t *Debtor_BilledEntity) Clone() (*Debtor_BilledEntity) {
return reprint.This(t).(*Debtor_BilledEntity)
  }
  func PlausibleScaledValueListTypePointer(value interface{}) (*PlausibleScaledValueListType, bool) {
switch t := value.(type) {
        case *PlausibleScaledValueListType:
                return value.(*PlausibleScaledValueListType), true
        case PlausibleScaledValueListType:
                v, _ := value.(PlausibleScaledValueListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PlausibleScaledValueListType\n", t, value)
        }
        return nil, false
  }

  func (t *PlausibleScaledValueListType) Clone() (*PlausibleScaledValueListType) {
return reprint.This(t).(*PlausibleScaledValueListType)
  }
  func LearningStandardsTypePointer(value interface{}) (*LearningStandardsType, bool) {
switch t := value.(type) {
        case *LearningStandardsType:
                return value.(*LearningStandardsType), true
        case LearningStandardsType:
                v, _ := value.(LearningStandardsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningStandardsType\n", t, value)
        }
        return nil, false
  }

  func (t *LearningStandardsType) Clone() (*LearningStandardsType) {
return reprint.This(t).(*LearningStandardsType)
  }
  func PersonPicture_ParentObjectRefIdPointer(value interface{}) (*PersonPicture_ParentObjectRefId, bool) {
switch t := value.(type) {
        case *PersonPicture_ParentObjectRefId:
                return value.(*PersonPicture_ParentObjectRefId), true
        case PersonPicture_ParentObjectRefId:
                v, _ := value.(PersonPicture_ParentObjectRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonPicture_ParentObjectRefId\n", t, value)
        }
        return nil, false
  }

  func (t *PersonPicture_ParentObjectRefId) Clone() (*PersonPicture_ParentObjectRefId) {
return reprint.This(t).(*PersonPicture_ParentObjectRefId)
  }
  func OtherCodeListTypePointer(value interface{}) (*OtherCodeListType, bool) {
switch t := value.(type) {
        case *OtherCodeListType:
                return value.(*OtherCodeListType), true
        case OtherCodeListType:
                v, _ := value.(OtherCodeListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherCodeListType\n", t, value)
        }
        return nil, false
  }

  func (t *OtherCodeListType) Clone() (*OtherCodeListType) {
return reprint.This(t).(*OtherCodeListType)
  }
  func WellbeingCharacteristicPointer(value interface{}) (*WellbeingCharacteristic, bool) {
switch t := value.(type) {
        case *WellbeingCharacteristic:
                return value.(*WellbeingCharacteristic), true
        case WellbeingCharacteristic:
                v, _ := value.(WellbeingCharacteristic)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingCharacteristic\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingCharacteristic) Clone() (*WellbeingCharacteristic) {
return reprint.This(t).(*WellbeingCharacteristic)
  }
  func StimulusTypePointer(value interface{}) (*StimulusType, bool) {
switch t := value.(type) {
        case *StimulusType:
                return value.(*StimulusType), true
        case StimulusType:
                v, _ := value.(StimulusType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StimulusType\n", t, value)
        }
        return nil, false
  }

  func (t *StimulusType) Clone() (*StimulusType) {
return reprint.This(t).(*StimulusType)
  }
  func ACStrandSubjectAreaTypePointer(value interface{}) (*ACStrandSubjectAreaType, bool) {
switch t := value.(type) {
        case *ACStrandSubjectAreaType:
                return value.(*ACStrandSubjectAreaType), true
        case ACStrandSubjectAreaType:
                v, _ := value.(ACStrandSubjectAreaType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ACStrandSubjectAreaType\n", t, value)
        }
        return nil, false
  }

  func (t *ACStrandSubjectAreaType) Clone() (*ACStrandSubjectAreaType) {
return reprint.This(t).(*ACStrandSubjectAreaType)
  }
  func StaffPersonalPointer(value interface{}) (*StaffPersonal, bool) {
switch t := value.(type) {
        case *StaffPersonal:
                return value.(*StaffPersonal), true
        case StaffPersonal:
                v, _ := value.(StaffPersonal)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffPersonal\n", t, value)
        }
        return nil, false
  }

  func (t *StaffPersonal) Clone() (*StaffPersonal) {
return reprint.This(t).(*StaffPersonal)
  }
  func RecognitionListTypePointer(value interface{}) (*RecognitionListType, bool) {
switch t := value.(type) {
        case *RecognitionListType:
                return value.(*RecognitionListType), true
        case RecognitionListType:
                v, _ := value.(RecognitionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to RecognitionListType\n", t, value)
        }
        return nil, false
  }

  func (t *RecognitionListType) Clone() (*RecognitionListType) {
return reprint.This(t).(*RecognitionListType)
  }
  func StudentSectionEnrollmentPointer(value interface{}) (*StudentSectionEnrollment, bool) {
switch t := value.(type) {
        case *StudentSectionEnrollment:
                return value.(*StudentSectionEnrollment), true
        case StudentSectionEnrollment:
                v, _ := value.(StudentSectionEnrollment)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSectionEnrollment\n", t, value)
        }
        return nil, false
  }

  func (t *StudentSectionEnrollment) Clone() (*StudentSectionEnrollment) {
return reprint.This(t).(*StudentSectionEnrollment)
  }
  func CountryList2TypePointer(value interface{}) (*CountryList2Type, bool) {
switch t := value.(type) {
        case *CountryList2Type:
                return value.(*CountryList2Type), true
        case CountryList2Type:
                v, _ := value.(CountryList2Type)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CountryList2Type\n", t, value)
        }
        return nil, false
  }

  func (t *CountryList2Type) Clone() (*CountryList2Type) {
return reprint.This(t).(*CountryList2Type)
  }
  func NAPSubscoreListTypePointer(value interface{}) (*NAPSubscoreListType, bool) {
switch t := value.(type) {
        case *NAPSubscoreListType:
                return value.(*NAPSubscoreListType), true
        case NAPSubscoreListType:
                v, _ := value.(NAPSubscoreListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPSubscoreListType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPSubscoreListType) Clone() (*NAPSubscoreListType) {
return reprint.This(t).(*NAPSubscoreListType)
  }
  func DetentionContainerTypePointer(value interface{}) (*DetentionContainerType, bool) {
switch t := value.(type) {
        case *DetentionContainerType:
                return value.(*DetentionContainerType), true
        case DetentionContainerType:
                v, _ := value.(DetentionContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DetentionContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *DetentionContainerType) Clone() (*DetentionContainerType) {
return reprint.This(t).(*DetentionContainerType)
  }
  func StandardIdentifierTypePointer(value interface{}) (*StandardIdentifierType, bool) {
switch t := value.(type) {
        case *StandardIdentifierType:
                return value.(*StandardIdentifierType), true
        case StandardIdentifierType:
                v, _ := value.(StandardIdentifierType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StandardIdentifierType\n", t, value)
        }
        return nil, false
  }

  func (t *StandardIdentifierType) Clone() (*StandardIdentifierType) {
return reprint.This(t).(*StandardIdentifierType)
  }
  func GridLocationTypePointer(value interface{}) (*GridLocationType, bool) {
switch t := value.(type) {
        case *GridLocationType:
                return value.(*GridLocationType), true
        case GridLocationType:
                v, _ := value.(GridLocationType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to GridLocationType\n", t, value)
        }
        return nil, false
  }

  func (t *GridLocationType) Clone() (*GridLocationType) {
return reprint.This(t).(*GridLocationType)
  }
  func StudentParticipationPointer(value interface{}) (*StudentParticipation, bool) {
switch t := value.(type) {
        case *StudentParticipation:
                return value.(*StudentParticipation), true
        case StudentParticipation:
                v, _ := value.(StudentParticipation)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentParticipation\n", t, value)
        }
        return nil, false
  }

  func (t *StudentParticipation) Clone() (*StudentParticipation) {
return reprint.This(t).(*StudentParticipation)
  }
  func FQContextualQuestionTypePointer(value interface{}) (*FQContextualQuestionType, bool) {
switch t := value.(type) {
        case *FQContextualQuestionType:
                return value.(*FQContextualQuestionType), true
        case FQContextualQuestionType:
                v, _ := value.(FQContextualQuestionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FQContextualQuestionType\n", t, value)
        }
        return nil, false
  }

  func (t *FQContextualQuestionType) Clone() (*FQContextualQuestionType) {
return reprint.This(t).(*FQContextualQuestionType)
  }
  func StatsCohortYearLevelListTypePointer(value interface{}) (*StatsCohortYearLevelListType, bool) {
switch t := value.(type) {
        case *StatsCohortYearLevelListType:
                return value.(*StatsCohortYearLevelListType), true
        case StatsCohortYearLevelListType:
                v, _ := value.(StatsCohortYearLevelListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatsCohortYearLevelListType\n", t, value)
        }
        return nil, false
  }

  func (t *StatsCohortYearLevelListType) Clone() (*StatsCohortYearLevelListType) {
return reprint.This(t).(*StatsCohortYearLevelListType)
  }
  func AGReportingObjectResponseListTypePointer(value interface{}) (*AGReportingObjectResponseListType, bool) {
switch t := value.(type) {
        case *AGReportingObjectResponseListType:
                return value.(*AGReportingObjectResponseListType), true
        case AGReportingObjectResponseListType:
                v, _ := value.(AGReportingObjectResponseListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGReportingObjectResponseListType\n", t, value)
        }
        return nil, false
  }

  func (t *AGReportingObjectResponseListType) Clone() (*AGReportingObjectResponseListType) {
return reprint.This(t).(*AGReportingObjectResponseListType)
  }
  func FQContextualQuestionListTypePointer(value interface{}) (*FQContextualQuestionListType, bool) {
switch t := value.(type) {
        case *FQContextualQuestionListType:
                return value.(*FQContextualQuestionListType), true
        case FQContextualQuestionListType:
                v, _ := value.(FQContextualQuestionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FQContextualQuestionListType\n", t, value)
        }
        return nil, false
  }

  func (t *FQContextualQuestionListType) Clone() (*FQContextualQuestionListType) {
return reprint.This(t).(*FQContextualQuestionListType)
  }
  func ScoreDescriptionTypePointer(value interface{}) (*ScoreDescriptionType, bool) {
switch t := value.(type) {
        case *ScoreDescriptionType:
                return value.(*ScoreDescriptionType), true
        case ScoreDescriptionType:
                v, _ := value.(ScoreDescriptionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScoreDescriptionType\n", t, value)
        }
        return nil, false
  }

  func (t *ScoreDescriptionType) Clone() (*ScoreDescriptionType) {
return reprint.This(t).(*ScoreDescriptionType)
  }
  func PeriodAttendanceTypePointer(value interface{}) (*PeriodAttendanceType, bool) {
switch t := value.(type) {
        case *PeriodAttendanceType:
                return value.(*PeriodAttendanceType), true
        case PeriodAttendanceType:
                v, _ := value.(PeriodAttendanceType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PeriodAttendanceType\n", t, value)
        }
        return nil, false
  }

  func (t *PeriodAttendanceType) Clone() (*PeriodAttendanceType) {
return reprint.This(t).(*PeriodAttendanceType)
  }
  func StudentPeriodAttendancePointer(value interface{}) (*StudentPeriodAttendance, bool) {
switch t := value.(type) {
        case *StudentPeriodAttendance:
                return value.(*StudentPeriodAttendance), true
        case StudentPeriodAttendance:
                v, _ := value.(StudentPeriodAttendance)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentPeriodAttendance\n", t, value)
        }
        return nil, false
  }

  func (t *StudentPeriodAttendance) Clone() (*StudentPeriodAttendance) {
return reprint.This(t).(*StudentPeriodAttendance)
  }
  func HouseholdContactInfoListTypePointer(value interface{}) (*HouseholdContactInfoListType, bool) {
switch t := value.(type) {
        case *HouseholdContactInfoListType:
                return value.(*HouseholdContactInfoListType), true
        case HouseholdContactInfoListType:
                v, _ := value.(HouseholdContactInfoListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to HouseholdContactInfoListType\n", t, value)
        }
        return nil, false
  }

  func (t *HouseholdContactInfoListType) Clone() (*HouseholdContactInfoListType) {
return reprint.This(t).(*HouseholdContactInfoListType)
  }
  func RoomInfoPointer(value interface{}) (*RoomInfo, bool) {
switch t := value.(type) {
        case *RoomInfo:
                return value.(*RoomInfo), true
        case RoomInfo:
                v, _ := value.(RoomInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to RoomInfo\n", t, value)
        }
        return nil, false
  }

  func (t *RoomInfo) Clone() (*RoomInfo) {
return reprint.This(t).(*RoomInfo)
  }
  func MonetaryAmountTypePointer(value interface{}) (*MonetaryAmountType, bool) {
switch t := value.(type) {
        case *MonetaryAmountType:
                return value.(*MonetaryAmountType), true
        case MonetaryAmountType:
                v, _ := value.(MonetaryAmountType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MonetaryAmountType\n", t, value)
        }
        return nil, false
  }

  func (t *MonetaryAmountType) Clone() (*MonetaryAmountType) {
return reprint.This(t).(*MonetaryAmountType)
  }
  func AddressCollectionReportingTypePointer(value interface{}) (*AddressCollectionReportingType, bool) {
switch t := value.(type) {
        case *AddressCollectionReportingType:
                return value.(*AddressCollectionReportingType), true
        case AddressCollectionReportingType:
                v, _ := value.(AddressCollectionReportingType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressCollectionReportingType\n", t, value)
        }
        return nil, false
  }

  func (t *AddressCollectionReportingType) Clone() (*AddressCollectionReportingType) {
return reprint.This(t).(*AddressCollectionReportingType)
  }
  func AbstractContentPackageType_BinaryDataPointer(value interface{}) (*AbstractContentPackageType_BinaryData, bool) {
switch t := value.(type) {
        case *AbstractContentPackageType_BinaryData:
                return value.(*AbstractContentPackageType_BinaryData), true
        case AbstractContentPackageType_BinaryData:
                v, _ := value.(AbstractContentPackageType_BinaryData)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentPackageType_BinaryData\n", t, value)
        }
        return nil, false
  }

  func (t *AbstractContentPackageType_BinaryData) Clone() (*AbstractContentPackageType_BinaryData) {
return reprint.This(t).(*AbstractContentPackageType_BinaryData)
  }
  func AGRuleTypePointer(value interface{}) (*AGRuleType, bool) {
switch t := value.(type) {
        case *AGRuleType:
                return value.(*AGRuleType), true
        case AGRuleType:
                v, _ := value.(AGRuleType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGRuleType\n", t, value)
        }
        return nil, false
  }

  func (t *AGRuleType) Clone() (*AGRuleType) {
return reprint.This(t).(*AGRuleType)
  }
  func ActivityTimeType_DurationPointer(value interface{}) (*ActivityTimeType_Duration, bool) {
switch t := value.(type) {
        case *ActivityTimeType_Duration:
                return value.(*ActivityTimeType_Duration), true
        case ActivityTimeType_Duration:
                v, _ := value.(ActivityTimeType_Duration)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ActivityTimeType_Duration\n", t, value)
        }
        return nil, false
  }

  func (t *ActivityTimeType_Duration) Clone() (*ActivityTimeType_Duration) {
return reprint.This(t).(*ActivityTimeType_Duration)
  }
  func MedicationTypePointer(value interface{}) (*MedicationType, bool) {
switch t := value.(type) {
        case *MedicationType:
                return value.(*MedicationType), true
        case MedicationType:
                v, _ := value.(MedicationType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MedicationType\n", t, value)
        }
        return nil, false
  }

  func (t *MedicationType) Clone() (*MedicationType) {
return reprint.This(t).(*MedicationType)
  }
  func StaffMostRecentContainerTypePointer(value interface{}) (*StaffMostRecentContainerType, bool) {
switch t := value.(type) {
        case *StaffMostRecentContainerType:
                return value.(*StaffMostRecentContainerType), true
        case StaffMostRecentContainerType:
                v, _ := value.(StaffMostRecentContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffMostRecentContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *StaffMostRecentContainerType) Clone() (*StaffMostRecentContainerType) {
return reprint.This(t).(*StaffMostRecentContainerType)
  }
  func ContactFlagsTypePointer(value interface{}) (*ContactFlagsType, bool) {
switch t := value.(type) {
        case *ContactFlagsType:
                return value.(*ContactFlagsType), true
        case ContactFlagsType:
                v, _ := value.(ContactFlagsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ContactFlagsType\n", t, value)
        }
        return nil, false
  }

  func (t *ContactFlagsType) Clone() (*ContactFlagsType) {
return reprint.This(t).(*ContactFlagsType)
  }
  func CreationUserTypePointer(value interface{}) (*CreationUserType, bool) {
switch t := value.(type) {
        case *CreationUserType:
                return value.(*CreationUserType), true
        case CreationUserType:
                v, _ := value.(CreationUserType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CreationUserType\n", t, value)
        }
        return nil, false
  }

  func (t *CreationUserType) Clone() (*CreationUserType) {
return reprint.This(t).(*CreationUserType)
  }
  func YearLevelsTypePointer(value interface{}) (*YearLevelsType, bool) {
switch t := value.(type) {
        case *YearLevelsType:
                return value.(*YearLevelsType), true
        case YearLevelsType:
                v, _ := value.(YearLevelsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to YearLevelsType\n", t, value)
        }
        return nil, false
  }

  func (t *YearLevelsType) Clone() (*YearLevelsType) {
return reprint.This(t).(*YearLevelsType)
  }
  func NAPTestItemPointer(value interface{}) (*NAPTestItem, bool) {
switch t := value.(type) {
        case *NAPTestItem:
                return value.(*NAPTestItem), true
        case NAPTestItem:
                v, _ := value.(NAPTestItem)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestItem\n", t, value)
        }
        return nil, false
  }

  func (t *NAPTestItem) Clone() (*NAPTestItem) {
return reprint.This(t).(*NAPTestItem)
  }
  func SystemRole_RoleScopeRefIdPointer(value interface{}) (*SystemRole_RoleScopeRefId, bool) {
switch t := value.(type) {
        case *SystemRole_RoleScopeRefId:
                return value.(*SystemRole_RoleScopeRefId), true
        case SystemRole_RoleScopeRefId:
                v, _ := value.(SystemRole_RoleScopeRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_RoleScopeRefId\n", t, value)
        }
        return nil, false
  }

  func (t *SystemRole_RoleScopeRefId) Clone() (*SystemRole_RoleScopeRefId) {
return reprint.This(t).(*SystemRole_RoleScopeRefId)
  }
  func AttendanceTimesTypePointer(value interface{}) (*AttendanceTimesType, bool) {
switch t := value.(type) {
        case *AttendanceTimesType:
                return value.(*AttendanceTimesType), true
        case AttendanceTimesType:
                v, _ := value.(AttendanceTimesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AttendanceTimesType\n", t, value)
        }
        return nil, false
  }

  func (t *AttendanceTimesType) Clone() (*AttendanceTimesType) {
return reprint.This(t).(*AttendanceTimesType)
  }
  func AbstractContentElementType_XMLDataPointer(value interface{}) (*AbstractContentElementType_XMLData, bool) {
switch t := value.(type) {
        case *AbstractContentElementType_XMLData:
                return value.(*AbstractContentElementType_XMLData), true
        case AbstractContentElementType_XMLData:
                v, _ := value.(AbstractContentElementType_XMLData)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentElementType_XMLData\n", t, value)
        }
        return nil, false
  }

  func (t *AbstractContentElementType_XMLData) Clone() (*AbstractContentElementType_XMLData) {
return reprint.This(t).(*AbstractContentElementType_XMLData)
  }
  func CharacteristicsTypePointer(value interface{}) (*CharacteristicsType, bool) {
switch t := value.(type) {
        case *CharacteristicsType:
                return value.(*CharacteristicsType), true
        case CharacteristicsType:
                v, _ := value.(CharacteristicsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CharacteristicsType\n", t, value)
        }
        return nil, false
  }

  func (t *CharacteristicsType) Clone() (*CharacteristicsType) {
return reprint.This(t).(*CharacteristicsType)
  }
  func AggregateStatisticInfoPointer(value interface{}) (*AggregateStatisticInfo, bool) {
switch t := value.(type) {
        case *AggregateStatisticInfo:
                return value.(*AggregateStatisticInfo), true
        case AggregateStatisticInfo:
                v, _ := value.(AggregateStatisticInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AggregateStatisticInfo\n", t, value)
        }
        return nil, false
  }

  func (t *AggregateStatisticInfo) Clone() (*AggregateStatisticInfo) {
return reprint.This(t).(*AggregateStatisticInfo)
  }
  func LifeCycleType_CreatedPointer(value interface{}) (*LifeCycleType_Created, bool) {
switch t := value.(type) {
        case *LifeCycleType_Created:
                return value.(*LifeCycleType_Created), true
        case LifeCycleType_Created:
                v, _ := value.(LifeCycleType_Created)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType_Created\n", t, value)
        }
        return nil, false
  }

  func (t *LifeCycleType_Created) Clone() (*LifeCycleType_Created) {
return reprint.This(t).(*LifeCycleType_Created)
  }
  func NameOfRecordTypePointer(value interface{}) (*NameOfRecordType, bool) {
switch t := value.(type) {
        case *NameOfRecordType:
                return value.(*NameOfRecordType), true
        case NameOfRecordType:
                v, _ := value.(NameOfRecordType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NameOfRecordType\n", t, value)
        }
        return nil, false
  }

  func (t *NameOfRecordType) Clone() (*NameOfRecordType) {
return reprint.This(t).(*NameOfRecordType)
  }
  func TimeElementType_SpanGapPointer(value interface{}) (*TimeElementType_SpanGap, bool) {
switch t := value.(type) {
        case *TimeElementType_SpanGap:
                return value.(*TimeElementType_SpanGap), true
        case TimeElementType_SpanGap:
                v, _ := value.(TimeElementType_SpanGap)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeElementType_SpanGap\n", t, value)
        }
        return nil, false
  }

  func (t *TimeElementType_SpanGap) Clone() (*TimeElementType_SpanGap) {
return reprint.This(t).(*TimeElementType_SpanGap)
  }
  func LocationTypePointer(value interface{}) (*LocationType, bool) {
switch t := value.(type) {
        case *LocationType:
                return value.(*LocationType), true
        case LocationType:
                v, _ := value.(LocationType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LocationType\n", t, value)
        }
        return nil, false
  }

  func (t *LocationType) Clone() (*LocationType) {
return reprint.This(t).(*LocationType)
  }
  func CheckoutInfoTypePointer(value interface{}) (*CheckoutInfoType, bool) {
switch t := value.(type) {
        case *CheckoutInfoType:
                return value.(*CheckoutInfoType), true
        case CheckoutInfoType:
                v, _ := value.(CheckoutInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CheckoutInfoType\n", t, value)
        }
        return nil, false
  }

  func (t *CheckoutInfoType) Clone() (*CheckoutInfoType) {
return reprint.This(t).(*CheckoutInfoType)
  }
  func WellbeingEventCategoryListTypePointer(value interface{}) (*WellbeingEventCategoryListType, bool) {
switch t := value.(type) {
        case *WellbeingEventCategoryListType:
                return value.(*WellbeingEventCategoryListType), true
        case WellbeingEventCategoryListType:
                v, _ := value.(WellbeingEventCategoryListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingEventCategoryListType\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingEventCategoryListType) Clone() (*WellbeingEventCategoryListType) {
return reprint.This(t).(*WellbeingEventCategoryListType)
  }
  func NAPTestletResponseTypePointer(value interface{}) (*NAPTestletResponseType, bool) {
switch t := value.(type) {
        case *NAPTestletResponseType:
                return value.(*NAPTestletResponseType), true
        case NAPTestletResponseType:
                v, _ := value.(NAPTestletResponseType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestletResponseType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPTestletResponseType) Clone() (*NAPTestletResponseType) {
return reprint.This(t).(*NAPTestletResponseType)
  }
  func DomainBandsContainerTypePointer(value interface{}) (*DomainBandsContainerType, bool) {
switch t := value.(type) {
        case *DomainBandsContainerType:
                return value.(*DomainBandsContainerType), true
        case DomainBandsContainerType:
                v, _ := value.(DomainBandsContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DomainBandsContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *DomainBandsContainerType) Clone() (*DomainBandsContainerType) {
return reprint.This(t).(*DomainBandsContainerType)
  }
  func FinancialAccountPointer(value interface{}) (*FinancialAccount, bool) {
switch t := value.(type) {
        case *FinancialAccount:
                return value.(*FinancialAccount), true
        case FinancialAccount:
                v, _ := value.(FinancialAccount)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FinancialAccount\n", t, value)
        }
        return nil, false
  }

  func (t *FinancialAccount) Clone() (*FinancialAccount) {
return reprint.This(t).(*FinancialAccount)
  }
  func WellbeingEventCategoryTypePointer(value interface{}) (*WellbeingEventCategoryType, bool) {
switch t := value.(type) {
        case *WellbeingEventCategoryType:
                return value.(*WellbeingEventCategoryType), true
        case WellbeingEventCategoryType:
                v, _ := value.(WellbeingEventCategoryType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingEventCategoryType\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingEventCategoryType) Clone() (*WellbeingEventCategoryType) {
return reprint.This(t).(*WellbeingEventCategoryType)
  }
  func CensusCollectionPointer(value interface{}) (*CensusCollection, bool) {
switch t := value.(type) {
        case *CensusCollection:
                return value.(*CensusCollection), true
        case CensusCollection:
                v, _ := value.(CensusCollection)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusCollection\n", t, value)
        }
        return nil, false
  }

  func (t *CensusCollection) Clone() (*CensusCollection) {
return reprint.This(t).(*CensusCollection)
  }
  func SymptomListTypePointer(value interface{}) (*SymptomListType, bool) {
switch t := value.(type) {
        case *SymptomListType:
                return value.(*SymptomListType), true
        case SymptomListType:
                v, _ := value.(SymptomListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SymptomListType\n", t, value)
        }
        return nil, false
  }

  func (t *SymptomListType) Clone() (*SymptomListType) {
return reprint.This(t).(*SymptomListType)
  }
  func HouseholdListTypePointer(value interface{}) (*HouseholdListType, bool) {
switch t := value.(type) {
        case *HouseholdListType:
                return value.(*HouseholdListType), true
        case HouseholdListType:
                v, _ := value.(HouseholdListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to HouseholdListType\n", t, value)
        }
        return nil, false
  }

  func (t *HouseholdListType) Clone() (*HouseholdListType) {
return reprint.This(t).(*HouseholdListType)
  }
  func LearningStandardListTypePointer(value interface{}) (*LearningStandardListType, bool) {
switch t := value.(type) {
        case *LearningStandardListType:
                return value.(*LearningStandardListType), true
        case LearningStandardListType:
                v, _ := value.(LearningStandardListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningStandardListType\n", t, value)
        }
        return nil, false
  }

  func (t *LearningStandardListType) Clone() (*LearningStandardListType) {
return reprint.This(t).(*LearningStandardListType)
  }
  func PaymentReceiptPointer(value interface{}) (*PaymentReceipt, bool) {
switch t := value.(type) {
        case *PaymentReceipt:
                return value.(*PaymentReceipt), true
        case PaymentReceipt:
                v, _ := value.(PaymentReceipt)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PaymentReceipt\n", t, value)
        }
        return nil, false
  }

  func (t *PaymentReceipt) Clone() (*PaymentReceipt) {
return reprint.This(t).(*PaymentReceipt)
  }
  func BaseNameTypePointer(value interface{}) (*BaseNameType, bool) {
switch t := value.(type) {
        case *BaseNameType:
                return value.(*BaseNameType), true
        case BaseNameType:
                v, _ := value.(BaseNameType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to BaseNameType\n", t, value)
        }
        return nil, false
  }

  func (t *BaseNameType) Clone() (*BaseNameType) {
return reprint.This(t).(*BaseNameType)
  }
  func FQItemListTypePointer(value interface{}) (*FQItemListType, bool) {
switch t := value.(type) {
        case *FQItemListType:
                return value.(*FQItemListType), true
        case FQItemListType:
                v, _ := value.(FQItemListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FQItemListType\n", t, value)
        }
        return nil, false
  }

  func (t *FQItemListType) Clone() (*FQItemListType) {
return reprint.This(t).(*FQItemListType)
  }
  func AlternateIdentificationCodeListTypePointer(value interface{}) (*AlternateIdentificationCodeListType, bool) {
switch t := value.(type) {
        case *AlternateIdentificationCodeListType:
                return value.(*AlternateIdentificationCodeListType), true
        case AlternateIdentificationCodeListType:
                v, _ := value.(AlternateIdentificationCodeListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AlternateIdentificationCodeListType\n", t, value)
        }
        return nil, false
  }

  func (t *AlternateIdentificationCodeListType) Clone() (*AlternateIdentificationCodeListType) {
return reprint.This(t).(*AlternateIdentificationCodeListType)
  }
  func MediaTypesTypePointer(value interface{}) (*MediaTypesType, bool) {
switch t := value.(type) {
        case *MediaTypesType:
                return value.(*MediaTypesType), true
        case MediaTypesType:
                v, _ := value.(MediaTypesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MediaTypesType\n", t, value)
        }
        return nil, false
  }

  func (t *MediaTypesType) Clone() (*MediaTypesType) {
return reprint.This(t).(*MediaTypesType)
  }
  func DomainScoreTypePointer(value interface{}) (*DomainScoreType, bool) {
switch t := value.(type) {
        case *DomainScoreType:
                return value.(*DomainScoreType), true
        case DomainScoreType:
                v, _ := value.(DomainScoreType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DomainScoreType\n", t, value)
        }
        return nil, false
  }

  func (t *DomainScoreType) Clone() (*DomainScoreType) {
return reprint.This(t).(*DomainScoreType)
  }
  func CalendarDateInfoTypePointer(value interface{}) (*CalendarDateInfoType, bool) {
switch t := value.(type) {
        case *CalendarDateInfoType:
                return value.(*CalendarDateInfoType), true
        case CalendarDateInfoType:
                v, _ := value.(CalendarDateInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CalendarDateInfoType\n", t, value)
        }
        return nil, false
  }

  func (t *CalendarDateInfoType) Clone() (*CalendarDateInfoType) {
return reprint.This(t).(*CalendarDateInfoType)
  }
  func SystemRole_SystemContextListPointer(value interface{}) (*SystemRole_SystemContextList, bool) {
switch t := value.(type) {
        case *SystemRole_SystemContextList:
                return value.(*SystemRole_SystemContextList), true
        case SystemRole_SystemContextList:
                v, _ := value.(SystemRole_SystemContextList)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_SystemContextList\n", t, value)
        }
        return nil, false
  }

  func (t *SystemRole_SystemContextList) Clone() (*SystemRole_SystemContextList) {
return reprint.This(t).(*SystemRole_SystemContextList)
  }
  func StrategiesTypePointer(value interface{}) (*StrategiesType, bool) {
switch t := value.(type) {
        case *StrategiesType:
                return value.(*StrategiesType), true
        case StrategiesType:
                v, _ := value.(StrategiesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StrategiesType\n", t, value)
        }
        return nil, false
  }

  func (t *StrategiesType) Clone() (*StrategiesType) {
return reprint.This(t).(*StrategiesType)
  }
  func TestDisruptionListTypePointer(value interface{}) (*TestDisruptionListType, bool) {
switch t := value.(type) {
        case *TestDisruptionListType:
                return value.(*TestDisruptionListType), true
        case TestDisruptionListType:
                v, _ := value.(TestDisruptionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TestDisruptionListType\n", t, value)
        }
        return nil, false
  }

  func (t *TestDisruptionListType) Clone() (*TestDisruptionListType) {
return reprint.This(t).(*TestDisruptionListType)
  }
  func StudentActivityInfoPointer(value interface{}) (*StudentActivityInfo, bool) {
switch t := value.(type) {
        case *StudentActivityInfo:
                return value.(*StudentActivityInfo), true
        case StudentActivityInfo:
                v, _ := value.(StudentActivityInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentActivityInfo\n", t, value)
        }
        return nil, false
  }

  func (t *StudentActivityInfo) Clone() (*StudentActivityInfo) {
return reprint.This(t).(*StudentActivityInfo)
  }
  func InvoicePointer(value interface{}) (*Invoice, bool) {
switch t := value.(type) {
        case *Invoice:
                return value.(*Invoice), true
        case Invoice:
                v, _ := value.(Invoice)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Invoice\n", t, value)
        }
        return nil, false
  }

  func (t *Invoice) Clone() (*Invoice) {
return reprint.This(t).(*Invoice)
  }
  func CopyRightContainerTypePointer(value interface{}) (*CopyRightContainerType, bool) {
switch t := value.(type) {
        case *CopyRightContainerType:
                return value.(*CopyRightContainerType), true
        case CopyRightContainerType:
                v, _ := value.(CopyRightContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CopyRightContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *CopyRightContainerType) Clone() (*CopyRightContainerType) {
return reprint.This(t).(*CopyRightContainerType)
  }
  func CensusStudentTypePointer(value interface{}) (*CensusStudentType, bool) {
switch t := value.(type) {
        case *CensusStudentType:
                return value.(*CensusStudentType), true
        case CensusStudentType:
                v, _ := value.(CensusStudentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusStudentType\n", t, value)
        }
        return nil, false
  }

  func (t *CensusStudentType) Clone() (*CensusStudentType) {
return reprint.This(t).(*CensusStudentType)
  }
  func MedicalAlertMessagesTypePointer(value interface{}) (*MedicalAlertMessagesType, bool) {
switch t := value.(type) {
        case *MedicalAlertMessagesType:
                return value.(*MedicalAlertMessagesType), true
        case MedicalAlertMessagesType:
                v, _ := value.(MedicalAlertMessagesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MedicalAlertMessagesType\n", t, value)
        }
        return nil, false
  }

  func (t *MedicalAlertMessagesType) Clone() (*MedicalAlertMessagesType) {
return reprint.This(t).(*MedicalAlertMessagesType)
  }
  func ChargedLocationInfoPointer(value interface{}) (*ChargedLocationInfo, bool) {
switch t := value.(type) {
        case *ChargedLocationInfo:
                return value.(*ChargedLocationInfo), true
        case ChargedLocationInfo:
                v, _ := value.(ChargedLocationInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ChargedLocationInfo\n", t, value)
        }
        return nil, false
  }

  func (t *ChargedLocationInfo) Clone() (*ChargedLocationInfo) {
return reprint.This(t).(*ChargedLocationInfo)
  }
  func StudentDailyAttendancePointer(value interface{}) (*StudentDailyAttendance, bool) {
switch t := value.(type) {
        case *StudentDailyAttendance:
                return value.(*StudentDailyAttendance), true
        case StudentDailyAttendance:
                v, _ := value.(StudentDailyAttendance)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentDailyAttendance\n", t, value)
        }
        return nil, false
  }

  func (t *StudentDailyAttendance) Clone() (*StudentDailyAttendance) {
return reprint.This(t).(*StudentDailyAttendance)
  }
  func StudentExitStatusContainerTypePointer(value interface{}) (*StudentExitStatusContainerType, bool) {
switch t := value.(type) {
        case *StudentExitStatusContainerType:
                return value.(*StudentExitStatusContainerType), true
        case StudentExitStatusContainerType:
                v, _ := value.(StudentExitStatusContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentExitStatusContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentExitStatusContainerType) Clone() (*StudentExitStatusContainerType) {
return reprint.This(t).(*StudentExitStatusContainerType)
  }
  func DwellingArrangementTypePointer(value interface{}) (*DwellingArrangementType, bool) {
switch t := value.(type) {
        case *DwellingArrangementType:
                return value.(*DwellingArrangementType), true
        case DwellingArrangementType:
                v, _ := value.(DwellingArrangementType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DwellingArrangementType\n", t, value)
        }
        return nil, false
  }

  func (t *DwellingArrangementType) Clone() (*DwellingArrangementType) {
return reprint.This(t).(*DwellingArrangementType)
  }
  func AbstractContentElementTypePointer(value interface{}) (*AbstractContentElementType, bool) {
switch t := value.(type) {
        case *AbstractContentElementType:
                return value.(*AbstractContentElementType), true
        case AbstractContentElementType:
                v, _ := value.(AbstractContentElementType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentElementType\n", t, value)
        }
        return nil, false
  }

  func (t *AbstractContentElementType) Clone() (*AbstractContentElementType) {
return reprint.This(t).(*AbstractContentElementType)
  }
  func AddressCollectionPointer(value interface{}) (*AddressCollection, bool) {
switch t := value.(type) {
        case *AddressCollection:
                return value.(*AddressCollection), true
        case AddressCollection:
                v, _ := value.(AddressCollection)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressCollection\n", t, value)
        }
        return nil, false
  }

  func (t *AddressCollection) Clone() (*AddressCollection) {
return reprint.This(t).(*AddressCollection)
  }
  func SubstituteItemListTypePointer(value interface{}) (*SubstituteItemListType, bool) {
switch t := value.(type) {
        case *SubstituteItemListType:
                return value.(*SubstituteItemListType), true
        case SubstituteItemListType:
                v, _ := value.(SubstituteItemListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SubstituteItemListType\n", t, value)
        }
        return nil, false
  }

  func (t *SubstituteItemListType) Clone() (*SubstituteItemListType) {
return reprint.This(t).(*SubstituteItemListType)
  }
  func StimulusListTypePointer(value interface{}) (*StimulusListType, bool) {
switch t := value.(type) {
        case *StimulusListType:
                return value.(*StimulusListType), true
        case StimulusListType:
                v, _ := value.(StimulusListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StimulusListType\n", t, value)
        }
        return nil, false
  }

  func (t *StimulusListType) Clone() (*StimulusListType) {
return reprint.This(t).(*StimulusListType)
  }
  func StudentGradeMarkersListTypePointer(value interface{}) (*StudentGradeMarkersListType, bool) {
switch t := value.(type) {
        case *StudentGradeMarkersListType:
                return value.(*StudentGradeMarkersListType), true
        case StudentGradeMarkersListType:
                v, _ := value.(StudentGradeMarkersListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentGradeMarkersListType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentGradeMarkersListType) Clone() (*StudentGradeMarkersListType) {
return reprint.This(t).(*StudentGradeMarkersListType)
  }
  func ExclusionRulesTypePointer(value interface{}) (*ExclusionRulesType, bool) {
switch t := value.(type) {
        case *ExclusionRulesType:
                return value.(*ExclusionRulesType), true
        case ExclusionRulesType:
                v, _ := value.(ExclusionRulesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ExclusionRulesType\n", t, value)
        }
        return nil, false
  }

  func (t *ExclusionRulesType) Clone() (*ExclusionRulesType) {
return reprint.This(t).(*ExclusionRulesType)
  }
  func AggregateCharacteristicInfoPointer(value interface{}) (*AggregateCharacteristicInfo, bool) {
switch t := value.(type) {
        case *AggregateCharacteristicInfo:
                return value.(*AggregateCharacteristicInfo), true
        case AggregateCharacteristicInfo:
                v, _ := value.(AggregateCharacteristicInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AggregateCharacteristicInfo\n", t, value)
        }
        return nil, false
  }

  func (t *AggregateCharacteristicInfo) Clone() (*AggregateCharacteristicInfo) {
return reprint.This(t).(*AggregateCharacteristicInfo)
  }
  func CalendarSummaryPointer(value interface{}) (*CalendarSummary, bool) {
switch t := value.(type) {
        case *CalendarSummary:
                return value.(*CalendarSummary), true
        case CalendarSummary:
                v, _ := value.(CalendarSummary)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CalendarSummary\n", t, value)
        }
        return nil, false
  }

  func (t *CalendarSummary) Clone() (*CalendarSummary) {
return reprint.This(t).(*CalendarSummary)
  }
  func SectionInfoPointer(value interface{}) (*SectionInfo, bool) {
switch t := value.(type) {
        case *SectionInfo:
                return value.(*SectionInfo), true
        case SectionInfo:
                v, _ := value.(SectionInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SectionInfo\n", t, value)
        }
        return nil, false
  }

  func (t *SectionInfo) Clone() (*SectionInfo) {
return reprint.This(t).(*SectionInfo)
  }
  func FinancialQuestionnaireCollectionPointer(value interface{}) (*FinancialQuestionnaireCollection, bool) {
switch t := value.(type) {
        case *FinancialQuestionnaireCollection:
                return value.(*FinancialQuestionnaireCollection), true
        case FinancialQuestionnaireCollection:
                v, _ := value.(FinancialQuestionnaireCollection)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FinancialQuestionnaireCollection\n", t, value)
        }
        return nil, false
  }

  func (t *FinancialQuestionnaireCollection) Clone() (*FinancialQuestionnaireCollection) {
return reprint.This(t).(*FinancialQuestionnaireCollection)
  }
  func SchoolContactListTypePointer(value interface{}) (*SchoolContactListType, bool) {
switch t := value.(type) {
        case *SchoolContactListType:
                return value.(*SchoolContactListType), true
        case SchoolContactListType:
                v, _ := value.(SchoolContactListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolContactListType\n", t, value)
        }
        return nil, false
  }

  func (t *SchoolContactListType) Clone() (*SchoolContactListType) {
return reprint.This(t).(*SchoolContactListType)
  }
  func ResourceUsage_ResourceReportLineListPointer(value interface{}) (*ResourceUsage_ResourceReportLineList, bool) {
switch t := value.(type) {
        case *ResourceUsage_ResourceReportLineList:
                return value.(*ResourceUsage_ResourceReportLineList), true
        case ResourceUsage_ResourceReportLineList:
                v, _ := value.(ResourceUsage_ResourceReportLineList)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage_ResourceReportLineList\n", t, value)
        }
        return nil, false
  }

  func (t *ResourceUsage_ResourceReportLineList) Clone() (*ResourceUsage_ResourceReportLineList) {
return reprint.This(t).(*ResourceUsage_ResourceReportLineList)
  }
  func AddressTypePointer(value interface{}) (*AddressType, bool) {
switch t := value.(type) {
        case *AddressType:
                return value.(*AddressType), true
        case AddressType:
                v, _ := value.(AddressType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressType\n", t, value)
        }
        return nil, false
  }

  func (t *AddressType) Clone() (*AddressType) {
return reprint.This(t).(*AddressType)
  }
  func LanguageBaseTypePointer(value interface{}) (*LanguageBaseType, bool) {
switch t := value.(type) {
        case *LanguageBaseType:
                return value.(*LanguageBaseType), true
        case LanguageBaseType:
                v, _ := value.(LanguageBaseType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LanguageBaseType\n", t, value)
        }
        return nil, false
  }

  func (t *LanguageBaseType) Clone() (*LanguageBaseType) {
return reprint.This(t).(*LanguageBaseType)
  }
  func TeachingGroupListTypePointer(value interface{}) (*TeachingGroupListType, bool) {
switch t := value.(type) {
        case *TeachingGroupListType:
                return value.(*TeachingGroupListType), true
        case TeachingGroupListType:
                v, _ := value.(TeachingGroupListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupListType\n", t, value)
        }
        return nil, false
  }

  func (t *TeachingGroupListType) Clone() (*TeachingGroupListType) {
return reprint.This(t).(*TeachingGroupListType)
  }
  func TimeTableContainerPointer(value interface{}) (*TimeTableContainer, bool) {
switch t := value.(type) {
        case *TimeTableContainer:
                return value.(*TimeTableContainer), true
        case TimeTableContainer:
                v, _ := value.(TimeTableContainer)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableContainer\n", t, value)
        }
        return nil, false
  }

  func (t *TimeTableContainer) Clone() (*TimeTableContainer) {
return reprint.This(t).(*TimeTableContainer)
  }
  func LibraryMessageTypePointer(value interface{}) (*LibraryMessageType, bool) {
switch t := value.(type) {
        case *LibraryMessageType:
                return value.(*LibraryMessageType), true
        case LibraryMessageType:
                v, _ := value.(LibraryMessageType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LibraryMessageType\n", t, value)
        }
        return nil, false
  }

  func (t *LibraryMessageType) Clone() (*LibraryMessageType) {
return reprint.This(t).(*LibraryMessageType)
  }
  func SuspensionContainerTypePointer(value interface{}) (*SuspensionContainerType, bool) {
switch t := value.(type) {
        case *SuspensionContainerType:
                return value.(*SuspensionContainerType), true
        case SuspensionContainerType:
                v, _ := value.(SuspensionContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SuspensionContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *SuspensionContainerType) Clone() (*SuspensionContainerType) {
return reprint.This(t).(*SuspensionContainerType)
  }
  func StaffAssignmentMostRecentContainerTypePointer(value interface{}) (*StaffAssignmentMostRecentContainerType, bool) {
switch t := value.(type) {
        case *StaffAssignmentMostRecentContainerType:
                return value.(*StaffAssignmentMostRecentContainerType), true
        case StaffAssignmentMostRecentContainerType:
                v, _ := value.(StaffAssignmentMostRecentContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffAssignmentMostRecentContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *StaffAssignmentMostRecentContainerType) Clone() (*StaffAssignmentMostRecentContainerType) {
return reprint.This(t).(*StaffAssignmentMostRecentContainerType)
  }
  func MedicationListTypePointer(value interface{}) (*MedicationListType, bool) {
switch t := value.(type) {
        case *MedicationListType:
                return value.(*MedicationListType), true
        case MedicationListType:
                v, _ := value.(MedicationListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MedicationListType\n", t, value)
        }
        return nil, false
  }

  func (t *MedicationListType) Clone() (*MedicationListType) {
return reprint.This(t).(*MedicationListType)
  }
  func TimeTableScheduleTypePointer(value interface{}) (*TimeTableScheduleType, bool) {
switch t := value.(type) {
        case *TimeTableScheduleType:
                return value.(*TimeTableScheduleType), true
        case TimeTableScheduleType:
                v, _ := value.(TimeTableScheduleType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableScheduleType\n", t, value)
        }
        return nil, false
  }

  func (t *TimeTableScheduleType) Clone() (*TimeTableScheduleType) {
return reprint.This(t).(*TimeTableScheduleType)
  }
  func AlertMessageTypePointer(value interface{}) (*AlertMessageType, bool) {
switch t := value.(type) {
        case *AlertMessageType:
                return value.(*AlertMessageType), true
        case AlertMessageType:
                v, _ := value.(AlertMessageType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AlertMessageType\n", t, value)
        }
        return nil, false
  }

  func (t *AlertMessageType) Clone() (*AlertMessageType) {
return reprint.This(t).(*AlertMessageType)
  }
  func HouseholdContactInfoTypePointer(value interface{}) (*HouseholdContactInfoType, bool) {
switch t := value.(type) {
        case *HouseholdContactInfoType:
                return value.(*HouseholdContactInfoType), true
        case HouseholdContactInfoType:
                v, _ := value.(HouseholdContactInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to HouseholdContactInfoType\n", t, value)
        }
        return nil, false
  }

  func (t *HouseholdContactInfoType) Clone() (*HouseholdContactInfoType) {
return reprint.This(t).(*HouseholdContactInfoType)
  }
  func TeacherCoverTypePointer(value interface{}) (*TeacherCoverType, bool) {
switch t := value.(type) {
        case *TeacherCoverType:
                return value.(*TeacherCoverType), true
        case TeacherCoverType:
                v, _ := value.(TeacherCoverType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeacherCoverType\n", t, value)
        }
        return nil, false
  }

  func (t *TeacherCoverType) Clone() (*TeacherCoverType) {
return reprint.This(t).(*TeacherCoverType)
  }
  func AssociatedObjectsType_AssociatedObjectPointer(value interface{}) (*AssociatedObjectsType_AssociatedObject, bool) {
switch t := value.(type) {
        case *AssociatedObjectsType_AssociatedObject:
                return value.(*AssociatedObjectsType_AssociatedObject), true
        case AssociatedObjectsType_AssociatedObject:
                v, _ := value.(AssociatedObjectsType_AssociatedObject)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AssociatedObjectsType_AssociatedObject\n", t, value)
        }
        return nil, false
  }

  func (t *AssociatedObjectsType_AssociatedObject) Clone() (*AssociatedObjectsType_AssociatedObject) {
return reprint.This(t).(*AssociatedObjectsType_AssociatedObject)
  }
  func NAPSubscoreTypePointer(value interface{}) (*NAPSubscoreType, bool) {
switch t := value.(type) {
        case *NAPSubscoreType:
                return value.(*NAPSubscoreType), true
        case NAPSubscoreType:
                v, _ := value.(NAPSubscoreType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPSubscoreType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPSubscoreType) Clone() (*NAPSubscoreType) {
return reprint.This(t).(*NAPSubscoreType)
  }
  func CollectionRoundPointer(value interface{}) (*CollectionRound, bool) {
switch t := value.(type) {
        case *CollectionRound:
                return value.(*CollectionRound), true
        case CollectionRound:
                v, _ := value.(CollectionRound)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CollectionRound\n", t, value)
        }
        return nil, false
  }

  func (t *CollectionRound) Clone() (*CollectionRound) {
return reprint.This(t).(*CollectionRound)
  }
  func StaffAssignmentPointer(value interface{}) (*StaffAssignment, bool) {
switch t := value.(type) {
        case *StaffAssignment:
                return value.(*StaffAssignment), true
        case StaffAssignment:
                v, _ := value.(StaffAssignment)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffAssignment\n", t, value)
        }
        return nil, false
  }

  func (t *StaffAssignment) Clone() (*StaffAssignment) {
return reprint.This(t).(*StaffAssignment)
  }
  func PublishingPermissionTypePointer(value interface{}) (*PublishingPermissionType, bool) {
switch t := value.(type) {
        case *PublishingPermissionType:
                return value.(*PublishingPermissionType), true
        case PublishingPermissionType:
                v, _ := value.(PublishingPermissionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PublishingPermissionType\n", t, value)
        }
        return nil, false
  }

  func (t *PublishingPermissionType) Clone() (*PublishingPermissionType) {
return reprint.This(t).(*PublishingPermissionType)
  }
  func Identity_SIF_RefIdPointer(value interface{}) (*Identity_SIF_RefId, bool) {
switch t := value.(type) {
        case *Identity_SIF_RefId:
                return value.(*Identity_SIF_RefId), true
        case Identity_SIF_RefId:
                v, _ := value.(Identity_SIF_RefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Identity_SIF_RefId\n", t, value)
        }
        return nil, false
  }

  func (t *Identity_SIF_RefId) Clone() (*Identity_SIF_RefId) {
return reprint.This(t).(*Identity_SIF_RefId)
  }
  func AccountCodeListTypePointer(value interface{}) (*AccountCodeListType, bool) {
switch t := value.(type) {
        case *AccountCodeListType:
                return value.(*AccountCodeListType), true
        case AccountCodeListType:
                v, _ := value.(AccountCodeListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AccountCodeListType\n", t, value)
        }
        return nil, false
  }

  func (t *AccountCodeListType) Clone() (*AccountCodeListType) {
return reprint.This(t).(*AccountCodeListType)
  }
  func GradingAssignmentScorePointer(value interface{}) (*GradingAssignmentScore, bool) {
switch t := value.(type) {
        case *GradingAssignmentScore:
                return value.(*GradingAssignmentScore), true
        case GradingAssignmentScore:
                v, _ := value.(GradingAssignmentScore)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to GradingAssignmentScore\n", t, value)
        }
        return nil, false
  }

  func (t *GradingAssignmentScore) Clone() (*GradingAssignmentScore) {
return reprint.This(t).(*GradingAssignmentScore)
  }
  func NAPTestletCodeFrameTypePointer(value interface{}) (*NAPTestletCodeFrameType, bool) {
switch t := value.(type) {
        case *NAPTestletCodeFrameType:
                return value.(*NAPTestletCodeFrameType), true
        case NAPTestletCodeFrameType:
                v, _ := value.(NAPTestletCodeFrameType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestletCodeFrameType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPTestletCodeFrameType) Clone() (*NAPTestletCodeFrameType) {
return reprint.This(t).(*NAPTestletCodeFrameType)
  }
  func OrganizationsTypePointer(value interface{}) (*OrganizationsType, bool) {
switch t := value.(type) {
        case *OrganizationsType:
                return value.(*OrganizationsType), true
        case OrganizationsType:
                v, _ := value.(OrganizationsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OrganizationsType\n", t, value)
        }
        return nil, false
  }

  func (t *OrganizationsType) Clone() (*OrganizationsType) {
return reprint.This(t).(*OrganizationsType)
  }
  func LearningResourcesTypePointer(value interface{}) (*LearningResourcesType, bool) {
switch t := value.(type) {
        case *LearningResourcesType:
                return value.(*LearningResourcesType), true
        case LearningResourcesType:
                v, _ := value.(LearningResourcesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningResourcesType\n", t, value)
        }
        return nil, false
  }

  func (t *LearningResourcesType) Clone() (*LearningResourcesType) {
return reprint.This(t).(*LearningResourcesType)
  }
  func ExpenseAccountTypePointer(value interface{}) (*ExpenseAccountType, bool) {
switch t := value.(type) {
        case *ExpenseAccountType:
                return value.(*ExpenseAccountType), true
        case ExpenseAccountType:
                v, _ := value.(ExpenseAccountType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ExpenseAccountType\n", t, value)
        }
        return nil, false
  }

  func (t *ExpenseAccountType) Clone() (*ExpenseAccountType) {
return reprint.This(t).(*ExpenseAccountType)
  }
  func PersonalisedPlanPointer(value interface{}) (*PersonalisedPlan, bool) {
switch t := value.(type) {
        case *PersonalisedPlan:
                return value.(*PersonalisedPlan), true
        case PersonalisedPlan:
                v, _ := value.(PersonalisedPlan)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonalisedPlan\n", t, value)
        }
        return nil, false
  }

  func (t *PersonalisedPlan) Clone() (*PersonalisedPlan) {
return reprint.This(t).(*PersonalisedPlan)
  }
  func WellbeingEventSubCategoryListTypePointer(value interface{}) (*WellbeingEventSubCategoryListType, bool) {
switch t := value.(type) {
        case *WellbeingEventSubCategoryListType:
                return value.(*WellbeingEventSubCategoryListType), true
        case WellbeingEventSubCategoryListType:
                v, _ := value.(WellbeingEventSubCategoryListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingEventSubCategoryListType\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingEventSubCategoryListType) Clone() (*WellbeingEventSubCategoryListType) {
return reprint.This(t).(*WellbeingEventSubCategoryListType)
  }
  func TimeTableDayListTypePointer(value interface{}) (*TimeTableDayListType, bool) {
switch t := value.(type) {
        case *TimeTableDayListType:
                return value.(*TimeTableDayListType), true
        case TimeTableDayListType:
                v, _ := value.(TimeTableDayListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableDayListType\n", t, value)
        }
        return nil, false
  }

  func (t *TimeTableDayListType) Clone() (*TimeTableDayListType) {
return reprint.This(t).(*TimeTableDayListType)
  }
  func StudentContactRelationshipPointer(value interface{}) (*StudentContactRelationship, bool) {
switch t := value.(type) {
        case *StudentContactRelationship:
                return value.(*StudentContactRelationship), true
        case StudentContactRelationship:
                v, _ := value.(StudentContactRelationship)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentContactRelationship\n", t, value)
        }
        return nil, false
  }

  func (t *StudentContactRelationship) Clone() (*StudentContactRelationship) {
return reprint.This(t).(*StudentContactRelationship)
  }
  func CalendarDatePointer(value interface{}) (*CalendarDate, bool) {
switch t := value.(type) {
        case *CalendarDate:
                return value.(*CalendarDate), true
        case CalendarDate:
                v, _ := value.(CalendarDate)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CalendarDate\n", t, value)
        }
        return nil, false
  }

  func (t *CalendarDate) Clone() (*CalendarDate) {
return reprint.This(t).(*CalendarDate)
  }
  func AssignmentScoreTypePointer(value interface{}) (*AssignmentScoreType, bool) {
switch t := value.(type) {
        case *AssignmentScoreType:
                return value.(*AssignmentScoreType), true
        case AssignmentScoreType:
                v, _ := value.(AssignmentScoreType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AssignmentScoreType\n", t, value)
        }
        return nil, false
  }

  func (t *AssignmentScoreType) Clone() (*AssignmentScoreType) {
return reprint.This(t).(*AssignmentScoreType)
  }
  func PhoneNumberTypePointer(value interface{}) (*PhoneNumberType, bool) {
switch t := value.(type) {
        case *PhoneNumberType:
                return value.(*PhoneNumberType), true
        case PhoneNumberType:
                v, _ := value.(PhoneNumberType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PhoneNumberType\n", t, value)
        }
        return nil, false
  }

  func (t *PhoneNumberType) Clone() (*PhoneNumberType) {
return reprint.This(t).(*PhoneNumberType)
  }
  func StudentExitContainerTypePointer(value interface{}) (*StudentExitContainerType, bool) {
switch t := value.(type) {
        case *StudentExitContainerType:
                return value.(*StudentExitContainerType), true
        case StudentExitContainerType:
                v, _ := value.(StudentExitContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentExitContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentExitContainerType) Clone() (*StudentExitContainerType) {
return reprint.This(t).(*StudentExitContainerType)
  }
  func YearRangeTypePointer(value interface{}) (*YearRangeType, bool) {
switch t := value.(type) {
        case *YearRangeType:
                return value.(*YearRangeType), true
        case YearRangeType:
                v, _ := value.(YearRangeType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to YearRangeType\n", t, value)
        }
        return nil, false
  }

  func (t *YearRangeType) Clone() (*YearRangeType) {
return reprint.This(t).(*YearRangeType)
  }
  func LibraryTransactionTypePointer(value interface{}) (*LibraryTransactionType, bool) {
switch t := value.(type) {
        case *LibraryTransactionType:
                return value.(*LibraryTransactionType), true
        case LibraryTransactionType:
                v, _ := value.(LibraryTransactionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LibraryTransactionType\n", t, value)
        }
        return nil, false
  }

  func (t *LibraryTransactionType) Clone() (*LibraryTransactionType) {
return reprint.This(t).(*LibraryTransactionType)
  }
  func AGRuleListTypePointer(value interface{}) (*AGRuleListType, bool) {
switch t := value.(type) {
        case *AGRuleListType:
                return value.(*AGRuleListType), true
        case AGRuleListType:
                v, _ := value.(AGRuleListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGRuleListType\n", t, value)
        }
        return nil, false
  }

  func (t *AGRuleListType) Clone() (*AGRuleListType) {
return reprint.This(t).(*AGRuleListType)
  }
  func GradingAssignmentPointer(value interface{}) (*GradingAssignment, bool) {
switch t := value.(type) {
        case *GradingAssignment:
                return value.(*GradingAssignment), true
        case GradingAssignment:
                v, _ := value.(GradingAssignment)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to GradingAssignment\n", t, value)
        }
        return nil, false
  }

  func (t *GradingAssignment) Clone() (*GradingAssignment) {
return reprint.This(t).(*GradingAssignment)
  }
  func TeachingGroupStudentTypePointer(value interface{}) (*TeachingGroupStudentType, bool) {
switch t := value.(type) {
        case *TeachingGroupStudentType:
                return value.(*TeachingGroupStudentType), true
        case TeachingGroupStudentType:
                v, _ := value.(TeachingGroupStudentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupStudentType\n", t, value)
        }
        return nil, false
  }

  func (t *TeachingGroupStudentType) Clone() (*TeachingGroupStudentType) {
return reprint.This(t).(*TeachingGroupStudentType)
  }
  func NAPTestItemContentTypePointer(value interface{}) (*NAPTestItemContentType, bool) {
switch t := value.(type) {
        case *NAPTestItemContentType:
                return value.(*NAPTestItemContentType), true
        case NAPTestItemContentType:
                v, _ := value.(NAPTestItemContentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestItemContentType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPTestItemContentType) Clone() (*NAPTestItemContentType) {
return reprint.This(t).(*NAPTestItemContentType)
  }
  func MediumOfInstructionTypePointer(value interface{}) (*MediumOfInstructionType, bool) {
switch t := value.(type) {
        case *MediumOfInstructionType:
                return value.(*MediumOfInstructionType), true
        case MediumOfInstructionType:
                v, _ := value.(MediumOfInstructionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MediumOfInstructionType\n", t, value)
        }
        return nil, false
  }

  func (t *MediumOfInstructionType) Clone() (*MediumOfInstructionType) {
return reprint.This(t).(*MediumOfInstructionType)
  }
  func StudentSubjectChoiceTypePointer(value interface{}) (*StudentSubjectChoiceType, bool) {
switch t := value.(type) {
        case *StudentSubjectChoiceType:
                return value.(*StudentSubjectChoiceType), true
        case StudentSubjectChoiceType:
                v, _ := value.(StudentSubjectChoiceType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSubjectChoiceType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentSubjectChoiceType) Clone() (*StudentSubjectChoiceType) {
return reprint.This(t).(*StudentSubjectChoiceType)
  }
  func StatementCodesTypePointer(value interface{}) (*StatementCodesType, bool) {
switch t := value.(type) {
        case *StatementCodesType:
                return value.(*StatementCodesType), true
        case StatementCodesType:
                v, _ := value.(StatementCodesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatementCodesType\n", t, value)
        }
        return nil, false
  }

  func (t *StatementCodesType) Clone() (*StatementCodesType) {
return reprint.This(t).(*StatementCodesType)
  }
  func ReligiousEventTypePointer(value interface{}) (*ReligiousEventType, bool) {
switch t := value.(type) {
        case *ReligiousEventType:
                return value.(*ReligiousEventType), true
        case ReligiousEventType:
                v, _ := value.(ReligiousEventType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ReligiousEventType\n", t, value)
        }
        return nil, false
  }

  func (t *ReligiousEventType) Clone() (*ReligiousEventType) {
return reprint.This(t).(*ReligiousEventType)
  }
  func ScoreListTypePointer(value interface{}) (*ScoreListType, bool) {
switch t := value.(type) {
        case *ScoreListType:
                return value.(*ScoreListType), true
        case ScoreListType:
                v, _ := value.(ScoreListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScoreListType\n", t, value)
        }
        return nil, false
  }

  func (t *ScoreListType) Clone() (*ScoreListType) {
return reprint.This(t).(*ScoreListType)
  }
  func SoftwareRequirementListTypePointer(value interface{}) (*SoftwareRequirementListType, bool) {
switch t := value.(type) {
        case *SoftwareRequirementListType:
                return value.(*SoftwareRequirementListType), true
        case SoftwareRequirementListType:
                v, _ := value.(SoftwareRequirementListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SoftwareRequirementListType\n", t, value)
        }
        return nil, false
  }

  func (t *SoftwareRequirementListType) Clone() (*SoftwareRequirementListType) {
return reprint.This(t).(*SoftwareRequirementListType)
  }
  func ResourceBooking_ResourceRefIdPointer(value interface{}) (*ResourceBooking_ResourceRefId, bool) {
switch t := value.(type) {
        case *ResourceBooking_ResourceRefId:
                return value.(*ResourceBooking_ResourceRefId), true
        case ResourceBooking_ResourceRefId:
                v, _ := value.(ResourceBooking_ResourceRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceBooking_ResourceRefId\n", t, value)
        }
        return nil, false
  }

  func (t *ResourceBooking_ResourceRefId) Clone() (*ResourceBooking_ResourceRefId) {
return reprint.This(t).(*ResourceBooking_ResourceRefId)
  }
  func GenericRubricTypePointer(value interface{}) (*GenericRubricType, bool) {
switch t := value.(type) {
        case *GenericRubricType:
                return value.(*GenericRubricType), true
        case GenericRubricType:
                v, _ := value.(GenericRubricType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to GenericRubricType\n", t, value)
        }
        return nil, false
  }

  func (t *GenericRubricType) Clone() (*GenericRubricType) {
return reprint.This(t).(*GenericRubricType)
  }
  func LanguageListTypePointer(value interface{}) (*LanguageListType, bool) {
switch t := value.(type) {
        case *LanguageListType:
                return value.(*LanguageListType), true
        case LanguageListType:
                v, _ := value.(LanguageListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LanguageListType\n", t, value)
        }
        return nil, false
  }

  func (t *LanguageListType) Clone() (*LanguageListType) {
return reprint.This(t).(*LanguageListType)
  }
  func CampusContainerTypePointer(value interface{}) (*CampusContainerType, bool) {
switch t := value.(type) {
        case *CampusContainerType:
                return value.(*CampusContainerType), true
        case CampusContainerType:
                v, _ := value.(CampusContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CampusContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *CampusContainerType) Clone() (*CampusContainerType) {
return reprint.This(t).(*CampusContainerType)
  }
  func StudentSchoolEnrollment_CalendarPointer(value interface{}) (*StudentSchoolEnrollment_Calendar, bool) {
switch t := value.(type) {
        case *StudentSchoolEnrollment_Calendar:
                return value.(*StudentSchoolEnrollment_Calendar), true
        case StudentSchoolEnrollment_Calendar:
                v, _ := value.(StudentSchoolEnrollment_Calendar)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSchoolEnrollment_Calendar\n", t, value)
        }
        return nil, false
  }

  func (t *StudentSchoolEnrollment_Calendar) Clone() (*StudentSchoolEnrollment_Calendar) {
return reprint.This(t).(*StudentSchoolEnrollment_Calendar)
  }
  func SystemRole_SystemContextPointer(value interface{}) (*SystemRole_SystemContext, bool) {
switch t := value.(type) {
        case *SystemRole_SystemContext:
                return value.(*SystemRole_SystemContext), true
        case SystemRole_SystemContext:
                v, _ := value.(SystemRole_SystemContext)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_SystemContext\n", t, value)
        }
        return nil, false
  }

  func (t *SystemRole_SystemContext) Clone() (*SystemRole_SystemContext) {
return reprint.This(t).(*SystemRole_SystemContext)
  }
  func AttendanceCodeTypePointer(value interface{}) (*AttendanceCodeType, bool) {
switch t := value.(type) {
        case *AttendanceCodeType:
                return value.(*AttendanceCodeType), true
        case AttendanceCodeType:
                v, _ := value.(AttendanceCodeType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AttendanceCodeType\n", t, value)
        }
        return nil, false
  }

  func (t *AttendanceCodeType) Clone() (*AttendanceCodeType) {
return reprint.This(t).(*AttendanceCodeType)
  }
  func LocalCodeTypePointer(value interface{}) (*LocalCodeType, bool) {
switch t := value.(type) {
        case *LocalCodeType:
                return value.(*LocalCodeType), true
        case LocalCodeType:
                v, _ := value.(LocalCodeType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LocalCodeType\n", t, value)
        }
        return nil, false
  }

  func (t *LocalCodeType) Clone() (*LocalCodeType) {
return reprint.This(t).(*LocalCodeType)
  }
  func SchoolProgramsPointer(value interface{}) (*SchoolPrograms, bool) {
switch t := value.(type) {
        case *SchoolPrograms:
                return value.(*SchoolPrograms), true
        case SchoolPrograms:
                v, _ := value.(SchoolPrograms)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolPrograms\n", t, value)
        }
        return nil, false
  }

  func (t *SchoolPrograms) Clone() (*SchoolPrograms) {
return reprint.This(t).(*SchoolPrograms)
  }
  func NAPEventStudentLinkPointer(value interface{}) (*NAPEventStudentLink, bool) {
switch t := value.(type) {
        case *NAPEventStudentLink:
                return value.(*NAPEventStudentLink), true
        case NAPEventStudentLink:
                v, _ := value.(NAPEventStudentLink)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPEventStudentLink\n", t, value)
        }
        return nil, false
  }

  func (t *NAPEventStudentLink) Clone() (*NAPEventStudentLink) {
return reprint.This(t).(*NAPEventStudentLink)
  }
  func IdentityPointer(value interface{}) (*Identity, bool) {
switch t := value.(type) {
        case *Identity:
                return value.(*Identity), true
        case Identity:
                v, _ := value.(Identity)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Identity\n", t, value)
        }
        return nil, false
  }

  func (t *Identity) Clone() (*Identity) {
return reprint.This(t).(*Identity)
  }
  func PersonInvolvementTypePointer(value interface{}) (*PersonInvolvementType, bool) {
switch t := value.(type) {
        case *PersonInvolvementType:
                return value.(*PersonInvolvementType), true
        case PersonInvolvementType:
                v, _ := value.(PersonInvolvementType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonInvolvementType\n", t, value)
        }
        return nil, false
  }

  func (t *PersonInvolvementType) Clone() (*PersonInvolvementType) {
return reprint.This(t).(*PersonInvolvementType)
  }
  func LifeCycleType_TimeElementsPointer(value interface{}) (*LifeCycleType_TimeElements, bool) {
switch t := value.(type) {
        case *LifeCycleType_TimeElements:
                return value.(*LifeCycleType_TimeElements), true
        case LifeCycleType_TimeElements:
                v, _ := value.(LifeCycleType_TimeElements)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType_TimeElements\n", t, value)
        }
        return nil, false
  }

  func (t *LifeCycleType_TimeElements) Clone() (*LifeCycleType_TimeElements) {
return reprint.This(t).(*LifeCycleType_TimeElements)
  }
  func TimeTableScheduleCellTypePointer(value interface{}) (*TimeTableScheduleCellType, bool) {
switch t := value.(type) {
        case *TimeTableScheduleCellType:
                return value.(*TimeTableScheduleCellType), true
        case TimeTableScheduleCellType:
                v, _ := value.(TimeTableScheduleCellType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableScheduleCellType\n", t, value)
        }
        return nil, false
  }

  func (t *TimeTableScheduleCellType) Clone() (*TimeTableScheduleCellType) {
return reprint.This(t).(*TimeTableScheduleCellType)
  }
  func WellbeingResponsePointer(value interface{}) (*WellbeingResponse, bool) {
switch t := value.(type) {
        case *WellbeingResponse:
                return value.(*WellbeingResponse), true
        case WellbeingResponse:
                v, _ := value.(WellbeingResponse)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingResponse\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingResponse) Clone() (*WellbeingResponse) {
return reprint.This(t).(*WellbeingResponse)
  }
  func TimeTableCellPointer(value interface{}) (*TimeTableCell, bool) {
switch t := value.(type) {
        case *TimeTableCell:
                return value.(*TimeTableCell), true
        case TimeTableCell:
                v, _ := value.(TimeTableCell)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTableCell\n", t, value)
        }
        return nil, false
  }

  func (t *TimeTableCell) Clone() (*TimeTableCell) {
return reprint.This(t).(*TimeTableCell)
  }
  func HoldInfoListTypePointer(value interface{}) (*HoldInfoListType, bool) {
switch t := value.(type) {
        case *HoldInfoListType:
                return value.(*HoldInfoListType), true
        case HoldInfoListType:
                v, _ := value.(HoldInfoListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to HoldInfoListType\n", t, value)
        }
        return nil, false
  }

  func (t *HoldInfoListType) Clone() (*HoldInfoListType) {
return reprint.This(t).(*HoldInfoListType)
  }
  func PersonPicturePointer(value interface{}) (*PersonPicture, bool) {
switch t := value.(type) {
        case *PersonPicture:
                return value.(*PersonPicture), true
        case PersonPicture:
                v, _ := value.(PersonPicture)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonPicture\n", t, value)
        }
        return nil, false
  }

  func (t *PersonPicture) Clone() (*PersonPicture) {
return reprint.This(t).(*PersonPicture)
  }
  func AddressListTypePointer(value interface{}) (*AddressListType, bool) {
switch t := value.(type) {
        case *AddressListType:
                return value.(*AddressListType), true
        case AddressListType:
                v, _ := value.(AddressListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressListType\n", t, value)
        }
        return nil, false
  }

  func (t *AddressListType) Clone() (*AddressListType) {
return reprint.This(t).(*AddressListType)
  }
  func ExpenseAccountsTypePointer(value interface{}) (*ExpenseAccountsType, bool) {
switch t := value.(type) {
        case *ExpenseAccountsType:
                return value.(*ExpenseAccountsType), true
        case ExpenseAccountsType:
                v, _ := value.(ExpenseAccountsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ExpenseAccountsType\n", t, value)
        }
        return nil, false
  }

  func (t *ExpenseAccountsType) Clone() (*ExpenseAccountsType) {
return reprint.This(t).(*ExpenseAccountsType)
  }
  func EmailListTypePointer(value interface{}) (*EmailListType, bool) {
switch t := value.(type) {
        case *EmailListType:
                return value.(*EmailListType), true
        case EmailListType:
                v, _ := value.(EmailListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EmailListType\n", t, value)
        }
        return nil, false
  }

  func (t *EmailListType) Clone() (*EmailListType) {
return reprint.This(t).(*EmailListType)
  }
  func LibraryPatronStatusPointer(value interface{}) (*LibraryPatronStatus, bool) {
switch t := value.(type) {
        case *LibraryPatronStatus:
                return value.(*LibraryPatronStatus), true
        case LibraryPatronStatus:
                v, _ := value.(LibraryPatronStatus)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LibraryPatronStatus\n", t, value)
        }
        return nil, false
  }

  func (t *LibraryPatronStatus) Clone() (*LibraryPatronStatus) {
return reprint.This(t).(*LibraryPatronStatus)
  }
  func ProgramFundingSourcesTypePointer(value interface{}) (*ProgramFundingSourcesType, bool) {
switch t := value.(type) {
        case *ProgramFundingSourcesType:
                return value.(*ProgramFundingSourcesType), true
        case ProgramFundingSourcesType:
                v, _ := value.(ProgramFundingSourcesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ProgramFundingSourcesType\n", t, value)
        }
        return nil, false
  }

  func (t *ProgramFundingSourcesType) Clone() (*ProgramFundingSourcesType) {
return reprint.This(t).(*ProgramFundingSourcesType)
  }
  func TimeElementTypePointer(value interface{}) (*TimeElementType, bool) {
switch t := value.(type) {
        case *TimeElementType:
                return value.(*TimeElementType), true
        case TimeElementType:
                v, _ := value.(TimeElementType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeElementType\n", t, value)
        }
        return nil, false
  }

  func (t *TimeElementType) Clone() (*TimeElementType) {
return reprint.This(t).(*TimeElementType)
  }
  func StaffSubjectListTypePointer(value interface{}) (*StaffSubjectListType, bool) {
switch t := value.(type) {
        case *StaffSubjectListType:
                return value.(*StaffSubjectListType), true
        case StaffSubjectListType:
                v, _ := value.(StaffSubjectListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StaffSubjectListType\n", t, value)
        }
        return nil, false
  }

  func (t *StaffSubjectListType) Clone() (*StaffSubjectListType) {
return reprint.This(t).(*StaffSubjectListType)
  }
  func OtherCodeListType_OtherCodePointer(value interface{}) (*OtherCodeListType_OtherCode, bool) {
switch t := value.(type) {
        case *OtherCodeListType_OtherCode:
                return value.(*OtherCodeListType_OtherCode), true
        case OtherCodeListType_OtherCode:
                v, _ := value.(OtherCodeListType_OtherCode)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherCodeListType_OtherCode\n", t, value)
        }
        return nil, false
  }

  func (t *OtherCodeListType_OtherCode) Clone() (*OtherCodeListType_OtherCode) {
return reprint.This(t).(*OtherCodeListType_OtherCode)
  }
  func CountryListTypePointer(value interface{}) (*CountryListType, bool) {
switch t := value.(type) {
        case *CountryListType:
                return value.(*CountryListType), true
        case CountryListType:
                v, _ := value.(CountryListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CountryListType\n", t, value)
        }
        return nil, false
  }

  func (t *CountryListType) Clone() (*CountryListType) {
return reprint.This(t).(*CountryListType)
  }
  func EmailTypePointer(value interface{}) (*EmailType, bool) {
switch t := value.(type) {
        case *EmailType:
                return value.(*EmailType), true
        case EmailType:
                v, _ := value.(EmailType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EmailType\n", t, value)
        }
        return nil, false
  }

  func (t *EmailType) Clone() (*EmailType) {
return reprint.This(t).(*EmailType)
  }
  func YearLevelEnrollmentListTypePointer(value interface{}) (*YearLevelEnrollmentListType, bool) {
switch t := value.(type) {
        case *YearLevelEnrollmentListType:
                return value.(*YearLevelEnrollmentListType), true
        case YearLevelEnrollmentListType:
                v, _ := value.(YearLevelEnrollmentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to YearLevelEnrollmentListType\n", t, value)
        }
        return nil, false
  }

  func (t *YearLevelEnrollmentListType) Clone() (*YearLevelEnrollmentListType) {
return reprint.This(t).(*YearLevelEnrollmentListType)
  }
  func YearLevelTypePointer(value interface{}) (*YearLevelType, bool) {
switch t := value.(type) {
        case *YearLevelType:
                return value.(*YearLevelType), true
        case YearLevelType:
                v, _ := value.(YearLevelType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to YearLevelType\n", t, value)
        }
        return nil, false
  }

  func (t *YearLevelType) Clone() (*YearLevelType) {
return reprint.This(t).(*YearLevelType)
  }
  func StudentSchoolEnrollment_CounselorPointer(value interface{}) (*StudentSchoolEnrollment_Counselor, bool) {
switch t := value.(type) {
        case *StudentSchoolEnrollment_Counselor:
                return value.(*StudentSchoolEnrollment_Counselor), true
        case StudentSchoolEnrollment_Counselor:
                v, _ := value.(StudentSchoolEnrollment_Counselor)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSchoolEnrollment_Counselor\n", t, value)
        }
        return nil, false
  }

  func (t *StudentSchoolEnrollment_Counselor) Clone() (*StudentSchoolEnrollment_Counselor) {
return reprint.This(t).(*StudentSchoolEnrollment_Counselor)
  }
  func ActivityPointer(value interface{}) (*Activity, bool) {
switch t := value.(type) {
        case *Activity:
                return value.(*Activity), true
        case Activity:
                v, _ := value.(Activity)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Activity\n", t, value)
        }
        return nil, false
  }

  func (t *Activity) Clone() (*Activity) {
return reprint.This(t).(*Activity)
  }
  func AdjustmentContainerTypePointer(value interface{}) (*AdjustmentContainerType, bool) {
switch t := value.(type) {
        case *AdjustmentContainerType:
                return value.(*AdjustmentContainerType), true
        case AdjustmentContainerType:
                v, _ := value.(AdjustmentContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AdjustmentContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *AdjustmentContainerType) Clone() (*AdjustmentContainerType) {
return reprint.This(t).(*AdjustmentContainerType)
  }
  func NameTypePointer(value interface{}) (*NameType, bool) {
switch t := value.(type) {
        case *NameType:
                return value.(*NameType), true
        case NameType:
                v, _ := value.(NameType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NameType\n", t, value)
        }
        return nil, false
  }

  func (t *NameType) Clone() (*NameType) {
return reprint.This(t).(*NameType)
  }
  func RelatedLearningStandardItemRefIdTypePointer(value interface{}) (*RelatedLearningStandardItemRefIdType, bool) {
switch t := value.(type) {
        case *RelatedLearningStandardItemRefIdType:
                return value.(*RelatedLearningStandardItemRefIdType), true
        case RelatedLearningStandardItemRefIdType:
                v, _ := value.(RelatedLearningStandardItemRefIdType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to RelatedLearningStandardItemRefIdType\n", t, value)
        }
        return nil, false
  }

  func (t *RelatedLearningStandardItemRefIdType) Clone() (*RelatedLearningStandardItemRefIdType) {
return reprint.This(t).(*RelatedLearningStandardItemRefIdType)
  }
  func TimeTablePointer(value interface{}) (*TimeTable, bool) {
switch t := value.(type) {
        case *TimeTable:
                return value.(*TimeTable), true
        case TimeTable:
                v, _ := value.(TimeTable)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTable\n", t, value)
        }
        return nil, false
  }

  func (t *TimeTable) Clone() (*TimeTable) {
return reprint.This(t).(*TimeTable)
  }
  func ReferralSourceTypePointer(value interface{}) (*ReferralSourceType, bool) {
switch t := value.(type) {
        case *ReferralSourceType:
                return value.(*ReferralSourceType), true
        case ReferralSourceType:
                v, _ := value.(ReferralSourceType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ReferralSourceType\n", t, value)
        }
        return nil, false
  }

  func (t *ReferralSourceType) Clone() (*ReferralSourceType) {
return reprint.This(t).(*ReferralSourceType)
  }
  func AGRoundListTypePointer(value interface{}) (*AGRoundListType, bool) {
switch t := value.(type) {
        case *AGRoundListType:
                return value.(*AGRoundListType), true
        case AGRoundListType:
                v, _ := value.(AGRoundListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGRoundListType\n", t, value)
        }
        return nil, false
  }

  func (t *AGRoundListType) Clone() (*AGRoundListType) {
return reprint.This(t).(*AGRoundListType)
  }
  func OtherWellbeingResponseContainerTypePointer(value interface{}) (*OtherWellbeingResponseContainerType, bool) {
switch t := value.(type) {
        case *OtherWellbeingResponseContainerType:
                return value.(*OtherWellbeingResponseContainerType), true
        case OtherWellbeingResponseContainerType:
                v, _ := value.(OtherWellbeingResponseContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherWellbeingResponseContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *OtherWellbeingResponseContainerType) Clone() (*OtherWellbeingResponseContainerType) {
return reprint.This(t).(*OtherWellbeingResponseContainerType)
  }
  func HoldInfoTypePointer(value interface{}) (*HoldInfoType, bool) {
switch t := value.(type) {
        case *HoldInfoType:
                return value.(*HoldInfoType), true
        case HoldInfoType:
                v, _ := value.(HoldInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to HoldInfoType\n", t, value)
        }
        return nil, false
  }

  func (t *HoldInfoType) Clone() (*HoldInfoType) {
return reprint.This(t).(*HoldInfoType)
  }
  func TechnicalRequirementsTypePointer(value interface{}) (*TechnicalRequirementsType, bool) {
switch t := value.(type) {
        case *TechnicalRequirementsType:
                return value.(*TechnicalRequirementsType), true
        case TechnicalRequirementsType:
                v, _ := value.(TechnicalRequirementsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TechnicalRequirementsType\n", t, value)
        }
        return nil, false
  }

  func (t *TechnicalRequirementsType) Clone() (*TechnicalRequirementsType) {
return reprint.This(t).(*TechnicalRequirementsType)
  }
  func PersonInvolvementListTypePointer(value interface{}) (*PersonInvolvementListType, bool) {
switch t := value.(type) {
        case *PersonInvolvementListType:
                return value.(*PersonInvolvementListType), true
        case PersonInvolvementListType:
                v, _ := value.(PersonInvolvementListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonInvolvementListType\n", t, value)
        }
        return nil, false
  }

  func (t *PersonInvolvementListType) Clone() (*PersonInvolvementListType) {
return reprint.This(t).(*PersonInvolvementListType)
  }
  func SystemRole_SIF_RefIdPointer(value interface{}) (*SystemRole_SIF_RefId, bool) {
switch t := value.(type) {
        case *SystemRole_SIF_RefId:
                return value.(*SystemRole_SIF_RefId), true
        case SystemRole_SIF_RefId:
                v, _ := value.(SystemRole_SIF_RefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_SIF_RefId\n", t, value)
        }
        return nil, false
  }

  func (t *SystemRole_SIF_RefId) Clone() (*SystemRole_SIF_RefId) {
return reprint.This(t).(*SystemRole_SIF_RefId)
  }
  func SchoolContactTypePointer(value interface{}) (*SchoolContactType, bool) {
switch t := value.(type) {
        case *SchoolContactType:
                return value.(*SchoolContactType), true
        case SchoolContactType:
                v, _ := value.(SchoolContactType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolContactType\n", t, value)
        }
        return nil, false
  }

  func (t *SchoolContactType) Clone() (*SchoolContactType) {
return reprint.This(t).(*SchoolContactType)
  }
  func SourceObjectsType_SourceObjectPointer(value interface{}) (*SourceObjectsType_SourceObject, bool) {
switch t := value.(type) {
        case *SourceObjectsType_SourceObject:
                return value.(*SourceObjectsType_SourceObject), true
        case SourceObjectsType_SourceObject:
                v, _ := value.(SourceObjectsType_SourceObject)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SourceObjectsType_SourceObject\n", t, value)
        }
        return nil, false
  }

  func (t *SourceObjectsType_SourceObject) Clone() (*SourceObjectsType_SourceObject) {
return reprint.This(t).(*SourceObjectsType_SourceObject)
  }
  func SystemRole_RoleScopePointer(value interface{}) (*SystemRole_RoleScope, bool) {
switch t := value.(type) {
        case *SystemRole_RoleScope:
                return value.(*SystemRole_RoleScope), true
        case SystemRole_RoleScope:
                v, _ := value.(SystemRole_RoleScope)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_RoleScope\n", t, value)
        }
        return nil, false
  }

  func (t *SystemRole_RoleScope) Clone() (*SystemRole_RoleScope) {
return reprint.This(t).(*SystemRole_RoleScope)
  }
  func TeachingGroupPointer(value interface{}) (*TeachingGroup, bool) {
switch t := value.(type) {
        case *TeachingGroup:
                return value.(*TeachingGroup), true
        case TeachingGroup:
                v, _ := value.(TeachingGroup)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroup\n", t, value)
        }
        return nil, false
  }

  func (t *TeachingGroup) Clone() (*TeachingGroup) {
return reprint.This(t).(*TeachingGroup)
  }
  func ScheduledActivityOverrideTypePointer(value interface{}) (*ScheduledActivityOverrideType, bool) {
switch t := value.(type) {
        case *ScheduledActivityOverrideType:
                return value.(*ScheduledActivityOverrideType), true
        case ScheduledActivityOverrideType:
                v, _ := value.(ScheduledActivityOverrideType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScheduledActivityOverrideType\n", t, value)
        }
        return nil, false
  }

  func (t *ScheduledActivityOverrideType) Clone() (*ScheduledActivityOverrideType) {
return reprint.This(t).(*ScheduledActivityOverrideType)
  }
  func ScoreTypePointer(value interface{}) (*ScoreType, bool) {
switch t := value.(type) {
        case *ScoreType:
                return value.(*ScoreType), true
        case ScoreType:
                v, _ := value.(ScoreType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScoreType\n", t, value)
        }
        return nil, false
  }

  func (t *ScoreType) Clone() (*ScoreType) {
return reprint.This(t).(*ScoreType)
  }
  func AddressCollectionStudentListTypePointer(value interface{}) (*AddressCollectionStudentListType, bool) {
switch t := value.(type) {
        case *AddressCollectionStudentListType:
                return value.(*AddressCollectionStudentListType), true
        case AddressCollectionStudentListType:
                v, _ := value.(AddressCollectionStudentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AddressCollectionStudentListType\n", t, value)
        }
        return nil, false
  }

  func (t *AddressCollectionStudentListType) Clone() (*AddressCollectionStudentListType) {
return reprint.This(t).(*AddressCollectionStudentListType)
  }
  func StatisticalAreasTypePointer(value interface{}) (*StatisticalAreasType, bool) {
switch t := value.(type) {
        case *StatisticalAreasType:
                return value.(*StatisticalAreasType), true
        case StatisticalAreasType:
                v, _ := value.(StatisticalAreasType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatisticalAreasType\n", t, value)
        }
        return nil, false
  }

  func (t *StatisticalAreasType) Clone() (*StatisticalAreasType) {
return reprint.This(t).(*StatisticalAreasType)
  }
  func PublishingPermissionListTypePointer(value interface{}) (*PublishingPermissionListType, bool) {
switch t := value.(type) {
        case *PublishingPermissionListType:
                return value.(*PublishingPermissionListType), true
        case PublishingPermissionListType:
                v, _ := value.(PublishingPermissionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PublishingPermissionListType\n", t, value)
        }
        return nil, false
  }

  func (t *PublishingPermissionListType) Clone() (*PublishingPermissionListType) {
return reprint.This(t).(*PublishingPermissionListType)
  }
  func VendorInfoPointer(value interface{}) (*VendorInfo, bool) {
switch t := value.(type) {
        case *VendorInfo:
                return value.(*VendorInfo), true
        case VendorInfo:
                v, _ := value.(VendorInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to VendorInfo\n", t, value)
        }
        return nil, false
  }

  func (t *VendorInfo) Clone() (*VendorInfo) {
return reprint.This(t).(*VendorInfo)
  }
  func CensusStudentListTypePointer(value interface{}) (*CensusStudentListType, bool) {
switch t := value.(type) {
        case *CensusStudentListType:
                return value.(*CensusStudentListType), true
        case CensusStudentListType:
                v, _ := value.(CensusStudentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusStudentListType\n", t, value)
        }
        return nil, false
  }

  func (t *CensusStudentListType) Clone() (*CensusStudentListType) {
return reprint.This(t).(*CensusStudentListType)
  }
  func StimulusLocalIdListTypePointer(value interface{}) (*StimulusLocalIdListType, bool) {
switch t := value.(type) {
        case *StimulusLocalIdListType:
                return value.(*StimulusLocalIdListType), true
        case StimulusLocalIdListType:
                v, _ := value.(StimulusLocalIdListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StimulusLocalIdListType\n", t, value)
        }
        return nil, false
  }

  func (t *StimulusLocalIdListType) Clone() (*StimulusLocalIdListType) {
return reprint.This(t).(*StimulusLocalIdListType)
  }
  func StudentAttendanceCollectionReportingTypePointer(value interface{}) (*StudentAttendanceCollectionReportingType, bool) {
switch t := value.(type) {
        case *StudentAttendanceCollectionReportingType:
                return value.(*StudentAttendanceCollectionReportingType), true
        case StudentAttendanceCollectionReportingType:
                v, _ := value.(StudentAttendanceCollectionReportingType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentAttendanceCollectionReportingType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentAttendanceCollectionReportingType) Clone() (*StudentAttendanceCollectionReportingType) {
return reprint.This(t).(*StudentAttendanceCollectionReportingType)
  }
  func ElectronicIdTypePointer(value interface{}) (*ElectronicIdType, bool) {
switch t := value.(type) {
        case *ElectronicIdType:
                return value.(*ElectronicIdType), true
        case ElectronicIdType:
                v, _ := value.(ElectronicIdType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ElectronicIdType\n", t, value)
        }
        return nil, false
  }

  func (t *ElectronicIdType) Clone() (*ElectronicIdType) {
return reprint.This(t).(*ElectronicIdType)
  }
  func AbstractContentElementType_TextDataPointer(value interface{}) (*AbstractContentElementType_TextData, bool) {
switch t := value.(type) {
        case *AbstractContentElementType_TextData:
                return value.(*AbstractContentElementType_TextData), true
        case AbstractContentElementType_TextData:
                v, _ := value.(AbstractContentElementType_TextData)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentElementType_TextData\n", t, value)
        }
        return nil, false
  }

  func (t *AbstractContentElementType_TextData) Clone() (*AbstractContentElementType_TextData) {
return reprint.This(t).(*AbstractContentElementType_TextData)
  }
  func ReligionTypePointer(value interface{}) (*ReligionType, bool) {
switch t := value.(type) {
        case *ReligionType:
                return value.(*ReligionType), true
        case ReligionType:
                v, _ := value.(ReligionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ReligionType\n", t, value)
        }
        return nil, false
  }

  func (t *ReligionType) Clone() (*ReligionType) {
return reprint.This(t).(*ReligionType)
  }
  func NAPWritingRubricListTypePointer(value interface{}) (*NAPWritingRubricListType, bool) {
switch t := value.(type) {
        case *NAPWritingRubricListType:
                return value.(*NAPWritingRubricListType), true
        case NAPWritingRubricListType:
                v, _ := value.(NAPWritingRubricListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPWritingRubricListType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPWritingRubricListType) Clone() (*NAPWritingRubricListType) {
return reprint.This(t).(*NAPWritingRubricListType)
  }
  func NAPTestletItemResponseListTypePointer(value interface{}) (*NAPTestletItemResponseListType, bool) {
switch t := value.(type) {
        case *NAPTestletItemResponseListType:
                return value.(*NAPTestletItemResponseListType), true
        case NAPTestletItemResponseListType:
                v, _ := value.(NAPTestletItemResponseListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestletItemResponseListType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPTestletItemResponseListType) Clone() (*NAPTestletItemResponseListType) {
return reprint.This(t).(*NAPTestletItemResponseListType)
  }
  func MapReferenceTypePointer(value interface{}) (*MapReferenceType, bool) {
switch t := value.(type) {
        case *MapReferenceType:
                return value.(*MapReferenceType), true
        case MapReferenceType:
                v, _ := value.(MapReferenceType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MapReferenceType\n", t, value)
        }
        return nil, false
  }

  func (t *MapReferenceType) Clone() (*MapReferenceType) {
return reprint.This(t).(*MapReferenceType)
  }
  func AggregateStatisticInfo_CalculationRulePointer(value interface{}) (*AggregateStatisticInfo_CalculationRule, bool) {
switch t := value.(type) {
        case *AggregateStatisticInfo_CalculationRule:
                return value.(*AggregateStatisticInfo_CalculationRule), true
        case AggregateStatisticInfo_CalculationRule:
                v, _ := value.(AggregateStatisticInfo_CalculationRule)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AggregateStatisticInfo_CalculationRule\n", t, value)
        }
        return nil, false
  }

  func (t *AggregateStatisticInfo_CalculationRule) Clone() (*AggregateStatisticInfo_CalculationRule) {
return reprint.This(t).(*AggregateStatisticInfo_CalculationRule)
  }
  func EntityContactInfoTypePointer(value interface{}) (*EntityContactInfoType, bool) {
switch t := value.(type) {
        case *EntityContactInfoType:
                return value.(*EntityContactInfoType), true
        case EntityContactInfoType:
                v, _ := value.(EntityContactInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EntityContactInfoType\n", t, value)
        }
        return nil, false
  }

  func (t *EntityContactInfoType) Clone() (*EntityContactInfoType) {
return reprint.This(t).(*EntityContactInfoType)
  }
  func JournalAdjustmentListTypePointer(value interface{}) (*JournalAdjustmentListType, bool) {
switch t := value.(type) {
        case *JournalAdjustmentListType:
                return value.(*JournalAdjustmentListType), true
        case JournalAdjustmentListType:
                v, _ := value.(JournalAdjustmentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to JournalAdjustmentListType\n", t, value)
        }
        return nil, false
  }

  func (t *JournalAdjustmentListType) Clone() (*JournalAdjustmentListType) {
return reprint.This(t).(*JournalAdjustmentListType)
  }
  func StudentPersonalPointer(value interface{}) (*StudentPersonal, bool) {
switch t := value.(type) {
        case *StudentPersonal:
                return value.(*StudentPersonal), true
        case StudentPersonal:
                v, _ := value.(StudentPersonal)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentPersonal\n", t, value)
        }
        return nil, false
  }

  func (t *StudentPersonal) Clone() (*StudentPersonal) {
return reprint.This(t).(*StudentPersonal)
  }
  func JournalPointer(value interface{}) (*Journal, bool) {
switch t := value.(type) {
        case *Journal:
                return value.(*Journal), true
        case Journal:
                v, _ := value.(Journal)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Journal\n", t, value)
        }
        return nil, false
  }

  func (t *Journal) Clone() (*Journal) {
return reprint.This(t).(*Journal)
  }
  func StudentAttendanceCollectionReportingListTypePointer(value interface{}) (*StudentAttendanceCollectionReportingListType, bool) {
switch t := value.(type) {
        case *StudentAttendanceCollectionReportingListType:
                return value.(*StudentAttendanceCollectionReportingListType), true
        case StudentAttendanceCollectionReportingListType:
                v, _ := value.(StudentAttendanceCollectionReportingListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentAttendanceCollectionReportingListType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentAttendanceCollectionReportingListType) Clone() (*StudentAttendanceCollectionReportingListType) {
return reprint.This(t).(*StudentAttendanceCollectionReportingListType)
  }
  func AbstractContentPackageTypePointer(value interface{}) (*AbstractContentPackageType, bool) {
switch t := value.(type) {
        case *AbstractContentPackageType:
                return value.(*AbstractContentPackageType), true
        case AbstractContentPackageType:
                v, _ := value.(AbstractContentPackageType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentPackageType\n", t, value)
        }
        return nil, false
  }

  func (t *AbstractContentPackageType) Clone() (*AbstractContentPackageType) {
return reprint.This(t).(*AbstractContentPackageType)
  }
  func AlertMessagesTypePointer(value interface{}) (*AlertMessagesType, bool) {
switch t := value.(type) {
        case *AlertMessagesType:
                return value.(*AlertMessagesType), true
        case AlertMessagesType:
                v, _ := value.(AlertMessagesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AlertMessagesType\n", t, value)
        }
        return nil, false
  }

  func (t *AlertMessagesType) Clone() (*AlertMessagesType) {
return reprint.This(t).(*AlertMessagesType)
  }
  func WellbeingDocumentListTypePointer(value interface{}) (*WellbeingDocumentListType, bool) {
switch t := value.(type) {
        case *WellbeingDocumentListType:
                return value.(*WellbeingDocumentListType), true
        case WellbeingDocumentListType:
                v, _ := value.(WellbeingDocumentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingDocumentListType\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingDocumentListType) Clone() (*WellbeingDocumentListType) {
return reprint.This(t).(*WellbeingDocumentListType)
  }
  func FQItemTypePointer(value interface{}) (*FQItemType, bool) {
switch t := value.(type) {
        case *FQItemType:
                return value.(*FQItemType), true
        case FQItemType:
                v, _ := value.(FQItemType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FQItemType\n", t, value)
        }
        return nil, false
  }

  func (t *FQItemType) Clone() (*FQItemType) {
return reprint.This(t).(*FQItemType)
  }
  func PurchaseOrderPointer(value interface{}) (*PurchaseOrder, bool) {
switch t := value.(type) {
        case *PurchaseOrder:
                return value.(*PurchaseOrder), true
        case PurchaseOrder:
                v, _ := value.(PurchaseOrder)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PurchaseOrder\n", t, value)
        }
        return nil, false
  }

  func (t *PurchaseOrder) Clone() (*PurchaseOrder) {
return reprint.This(t).(*PurchaseOrder)
  }
  func AgencyTypePointer(value interface{}) (*AgencyType, bool) {
switch t := value.(type) {
        case *AgencyType:
                return value.(*AgencyType), true
        case AgencyType:
                v, _ := value.(AgencyType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AgencyType\n", t, value)
        }
        return nil, false
  }

  func (t *AgencyType) Clone() (*AgencyType) {
return reprint.This(t).(*AgencyType)
  }
  func PhoneNumberListTypePointer(value interface{}) (*PhoneNumberListType, bool) {
switch t := value.(type) {
        case *PhoneNumberListType:
                return value.(*PhoneNumberListType), true
        case PhoneNumberListType:
                v, _ := value.(PhoneNumberListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PhoneNumberListType\n", t, value)
        }
        return nil, false
  }

  func (t *PhoneNumberListType) Clone() (*PhoneNumberListType) {
return reprint.This(t).(*PhoneNumberListType)
  }
  func OtherIdTypePointer(value interface{}) (*OtherIdType, bool) {
switch t := value.(type) {
        case *OtherIdType:
                return value.(*OtherIdType), true
        case OtherIdType:
                v, _ := value.(OtherIdType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherIdType\n", t, value)
        }
        return nil, false
  }

  func (t *OtherIdType) Clone() (*OtherIdType) {
return reprint.This(t).(*OtherIdType)
  }
  func ScoreDescriptionListTypePointer(value interface{}) (*ScoreDescriptionListType, bool) {
switch t := value.(type) {
        case *ScoreDescriptionListType:
                return value.(*ScoreDescriptionListType), true
        case ScoreDescriptionListType:
                v, _ := value.(ScoreDescriptionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScoreDescriptionListType\n", t, value)
        }
        return nil, false
  }

  func (t *ScoreDescriptionListType) Clone() (*ScoreDescriptionListType) {
return reprint.This(t).(*ScoreDescriptionListType)
  }
  func StudentActivityTypePointer(value interface{}) (*StudentActivityType, bool) {
switch t := value.(type) {
        case *StudentActivityType:
                return value.(*StudentActivityType), true
        case StudentActivityType:
                v, _ := value.(StudentActivityType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentActivityType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentActivityType) Clone() (*StudentActivityType) {
return reprint.This(t).(*StudentActivityType)
  }
  func ValidLetterMarkTypePointer(value interface{}) (*ValidLetterMarkType, bool) {
switch t := value.(type) {
        case *ValidLetterMarkType:
                return value.(*ValidLetterMarkType), true
        case ValidLetterMarkType:
                v, _ := value.(ValidLetterMarkType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ValidLetterMarkType\n", t, value)
        }
        return nil, false
  }

  func (t *ValidLetterMarkType) Clone() (*ValidLetterMarkType) {
return reprint.This(t).(*ValidLetterMarkType)
  }
  func WithdrawalTimeListTypePointer(value interface{}) (*WithdrawalTimeListType, bool) {
switch t := value.(type) {
        case *WithdrawalTimeListType:
                return value.(*WithdrawalTimeListType), true
        case WithdrawalTimeListType:
                v, _ := value.(WithdrawalTimeListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WithdrawalTimeListType\n", t, value)
        }
        return nil, false
  }

  func (t *WithdrawalTimeListType) Clone() (*WithdrawalTimeListType) {
return reprint.This(t).(*WithdrawalTimeListType)
  }
  func TimeTablePeriodTypePointer(value interface{}) (*TimeTablePeriodType, bool) {
switch t := value.(type) {
        case *TimeTablePeriodType:
                return value.(*TimeTablePeriodType), true
        case TimeTablePeriodType:
                v, _ := value.(TimeTablePeriodType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeTablePeriodType\n", t, value)
        }
        return nil, false
  }

  func (t *TimeTablePeriodType) Clone() (*TimeTablePeriodType) {
return reprint.This(t).(*TimeTablePeriodType)
  }
  func FinancialAccountRefIdListTypePointer(value interface{}) (*FinancialAccountRefIdListType, bool) {
switch t := value.(type) {
        case *FinancialAccountRefIdListType:
                return value.(*FinancialAccountRefIdListType), true
        case FinancialAccountRefIdListType:
                v, _ := value.(FinancialAccountRefIdListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FinancialAccountRefIdListType\n", t, value)
        }
        return nil, false
  }

  func (t *FinancialAccountRefIdListType) Clone() (*FinancialAccountRefIdListType) {
return reprint.This(t).(*FinancialAccountRefIdListType)
  }
  func SystemRole_RoleScopeListPointer(value interface{}) (*SystemRole_RoleScopeList, bool) {
switch t := value.(type) {
        case *SystemRole_RoleScopeList:
                return value.(*SystemRole_RoleScopeList), true
        case SystemRole_RoleScopeList:
                v, _ := value.(SystemRole_RoleScopeList)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_RoleScopeList\n", t, value)
        }
        return nil, false
  }

  func (t *SystemRole_RoleScopeList) Clone() (*SystemRole_RoleScopeList) {
return reprint.This(t).(*SystemRole_RoleScopeList)
  }
  func NAPCodeFramePointer(value interface{}) (*NAPCodeFrame, bool) {
switch t := value.(type) {
        case *NAPCodeFrame:
                return value.(*NAPCodeFrame), true
        case NAPCodeFrame:
                v, _ := value.(NAPCodeFrame)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPCodeFrame\n", t, value)
        }
        return nil, false
  }

  func (t *NAPCodeFrame) Clone() (*NAPCodeFrame) {
return reprint.This(t).(*NAPCodeFrame)
  }
  func CodeFrameTestItemListTypePointer(value interface{}) (*CodeFrameTestItemListType, bool) {
switch t := value.(type) {
        case *CodeFrameTestItemListType:
                return value.(*CodeFrameTestItemListType), true
        case CodeFrameTestItemListType:
                v, _ := value.(CodeFrameTestItemListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CodeFrameTestItemListType\n", t, value)
        }
        return nil, false
  }

  func (t *CodeFrameTestItemListType) Clone() (*CodeFrameTestItemListType) {
return reprint.This(t).(*CodeFrameTestItemListType)
  }
  func TimeElementType_SpanGapsPointer(value interface{}) (*TimeElementType_SpanGaps, bool) {
switch t := value.(type) {
        case *TimeElementType_SpanGaps:
                return value.(*TimeElementType_SpanGaps), true
        case TimeElementType_SpanGaps:
                v, _ := value.(TimeElementType_SpanGaps)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TimeElementType_SpanGaps\n", t, value)
        }
        return nil, false
  }

  func (t *TimeElementType_SpanGaps) Clone() (*TimeElementType_SpanGaps) {
return reprint.This(t).(*TimeElementType_SpanGaps)
  }
  func StudentScoreJudgementAgainstStandardPointer(value interface{}) (*StudentScoreJudgementAgainstStandard, bool) {
switch t := value.(type) {
        case *StudentScoreJudgementAgainstStandard:
                return value.(*StudentScoreJudgementAgainstStandard), true
        case StudentScoreJudgementAgainstStandard:
                v, _ := value.(StudentScoreJudgementAgainstStandard)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentScoreJudgementAgainstStandard\n", t, value)
        }
        return nil, false
  }

  func (t *StudentScoreJudgementAgainstStandard) Clone() (*StudentScoreJudgementAgainstStandard) {
return reprint.This(t).(*StudentScoreJudgementAgainstStandard)
  }
  func CensusReportingTypePointer(value interface{}) (*CensusReportingType, bool) {
switch t := value.(type) {
        case *CensusReportingType:
                return value.(*CensusReportingType), true
        case CensusReportingType:
                v, _ := value.(CensusReportingType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusReportingType\n", t, value)
        }
        return nil, false
  }

  func (t *CensusReportingType) Clone() (*CensusReportingType) {
return reprint.This(t).(*CensusReportingType)
  }
  func AbstractContentPackageType_ReferencePointer(value interface{}) (*AbstractContentPackageType_Reference, bool) {
switch t := value.(type) {
        case *AbstractContentPackageType_Reference:
                return value.(*AbstractContentPackageType_Reference), true
        case AbstractContentPackageType_Reference:
                v, _ := value.(AbstractContentPackageType_Reference)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentPackageType_Reference\n", t, value)
        }
        return nil, false
  }

  func (t *AbstractContentPackageType_Reference) Clone() (*AbstractContentPackageType_Reference) {
return reprint.This(t).(*AbstractContentPackageType_Reference)
  }
  func LearningStandardsDocumentTypePointer(value interface{}) (*LearningStandardsDocumentType, bool) {
switch t := value.(type) {
        case *LearningStandardsDocumentType:
                return value.(*LearningStandardsDocumentType), true
        case LearningStandardsDocumentType:
                v, _ := value.(LearningStandardsDocumentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningStandardsDocumentType\n", t, value)
        }
        return nil, false
  }

  func (t *LearningStandardsDocumentType) Clone() (*LearningStandardsDocumentType) {
return reprint.This(t).(*LearningStandardsDocumentType)
  }
  func FQReportingTypePointer(value interface{}) (*FQReportingType, bool) {
switch t := value.(type) {
        case *FQReportingType:
                return value.(*FQReportingType), true
        case FQReportingType:
                v, _ := value.(FQReportingType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FQReportingType\n", t, value)
        }
        return nil, false
  }

  func (t *FQReportingType) Clone() (*FQReportingType) {
return reprint.This(t).(*FQReportingType)
  }
  func CalendarSummaryListTypePointer(value interface{}) (*CalendarSummaryListType, bool) {
switch t := value.(type) {
        case *CalendarSummaryListType:
                return value.(*CalendarSummaryListType), true
        case CalendarSummaryListType:
                v, _ := value.(CalendarSummaryListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CalendarSummaryListType\n", t, value)
        }
        return nil, false
  }

  func (t *CalendarSummaryListType) Clone() (*CalendarSummaryListType) {
return reprint.This(t).(*CalendarSummaryListType)
  }
  func StatsCohortYearLevelTypePointer(value interface{}) (*StatsCohortYearLevelType, bool) {
switch t := value.(type) {
        case *StatsCohortYearLevelType:
                return value.(*StatsCohortYearLevelType), true
        case StatsCohortYearLevelType:
                v, _ := value.(StatsCohortYearLevelType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatsCohortYearLevelType\n", t, value)
        }
        return nil, false
  }

  func (t *StatsCohortYearLevelType) Clone() (*StatsCohortYearLevelType) {
return reprint.This(t).(*StatsCohortYearLevelType)
  }
  func TotalEnrollmentsTypePointer(value interface{}) (*TotalEnrollmentsType, bool) {
switch t := value.(type) {
        case *TotalEnrollmentsType:
                return value.(*TotalEnrollmentsType), true
        case TotalEnrollmentsType:
                v, _ := value.(TotalEnrollmentsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TotalEnrollmentsType\n", t, value)
        }
        return nil, false
  }

  func (t *TotalEnrollmentsType) Clone() (*TotalEnrollmentsType) {
return reprint.This(t).(*TotalEnrollmentsType)
  }
  func StudentAttendanceTimeListPointer(value interface{}) (*StudentAttendanceTimeList, bool) {
switch t := value.(type) {
        case *StudentAttendanceTimeList:
                return value.(*StudentAttendanceTimeList), true
        case StudentAttendanceTimeList:
                v, _ := value.(StudentAttendanceTimeList)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentAttendanceTimeList\n", t, value)
        }
        return nil, false
  }

  func (t *StudentAttendanceTimeList) Clone() (*StudentAttendanceTimeList) {
return reprint.This(t).(*StudentAttendanceTimeList)
  }
  func TestDisruptionTypePointer(value interface{}) (*TestDisruptionType, bool) {
switch t := value.(type) {
        case *TestDisruptionType:
                return value.(*TestDisruptionType), true
        case TestDisruptionType:
                v, _ := value.(TestDisruptionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TestDisruptionType\n", t, value)
        }
        return nil, false
  }

  func (t *TestDisruptionType) Clone() (*TestDisruptionType) {
return reprint.This(t).(*TestDisruptionType)
  }
  func AGContextualQuestionListTypePointer(value interface{}) (*AGContextualQuestionListType, bool) {
switch t := value.(type) {
        case *AGContextualQuestionListType:
                return value.(*AGContextualQuestionListType), true
        case AGContextualQuestionListType:
                v, _ := value.(AGContextualQuestionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGContextualQuestionListType\n", t, value)
        }
        return nil, false
  }

  func (t *AGContextualQuestionListType) Clone() (*AGContextualQuestionListType) {
return reprint.This(t).(*AGContextualQuestionListType)
  }
  func LearningResourcePointer(value interface{}) (*LearningResource, bool) {
switch t := value.(type) {
        case *LearningResource:
                return value.(*LearningResource), true
        case LearningResource:
                v, _ := value.(LearningResource)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningResource\n", t, value)
        }
        return nil, false
  }

  func (t *LearningResource) Clone() (*LearningResource) {
return reprint.This(t).(*LearningResource)
  }
  func NAPLANClassListTypePointer(value interface{}) (*NAPLANClassListType, bool) {
switch t := value.(type) {
        case *NAPLANClassListType:
                return value.(*NAPLANClassListType), true
        case NAPLANClassListType:
                v, _ := value.(NAPLANClassListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPLANClassListType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPLANClassListType) Clone() (*NAPLANClassListType) {
return reprint.This(t).(*NAPLANClassListType)
  }
  func EnglishProficiencyTypePointer(value interface{}) (*EnglishProficiencyType, bool) {
switch t := value.(type) {
        case *EnglishProficiencyType:
                return value.(*EnglishProficiencyType), true
        case EnglishProficiencyType:
                v, _ := value.(EnglishProficiencyType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EnglishProficiencyType\n", t, value)
        }
        return nil, false
  }

  func (t *EnglishProficiencyType) Clone() (*EnglishProficiencyType) {
return reprint.This(t).(*EnglishProficiencyType)
  }
  func StudentSchoolEnrollmentPointer(value interface{}) (*StudentSchoolEnrollment, bool) {
switch t := value.(type) {
        case *StudentSchoolEnrollment:
                return value.(*StudentSchoolEnrollment), true
        case StudentSchoolEnrollment:
                v, _ := value.(StudentSchoolEnrollment)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSchoolEnrollment\n", t, value)
        }
        return nil, false
  }

  func (t *StudentSchoolEnrollment) Clone() (*StudentSchoolEnrollment) {
return reprint.This(t).(*StudentSchoolEnrollment)
  }
  func ResourceUsage_ResourceReportLinePointer(value interface{}) (*ResourceUsage_ResourceReportLine, bool) {
switch t := value.(type) {
        case *ResourceUsage_ResourceReportLine:
                return value.(*ResourceUsage_ResourceReportLine), true
        case ResourceUsage_ResourceReportLine:
                v, _ := value.(ResourceUsage_ResourceReportLine)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage_ResourceReportLine\n", t, value)
        }
        return nil, false
  }

  func (t *ResourceUsage_ResourceReportLine) Clone() (*ResourceUsage_ResourceReportLine) {
return reprint.This(t).(*ResourceUsage_ResourceReportLine)
  }
  func LearningResource_LocationPointer(value interface{}) (*LearningResource_Location, bool) {
switch t := value.(type) {
        case *LearningResource_Location:
                return value.(*LearningResource_Location), true
        case LearningResource_Location:
                v, _ := value.(LearningResource_Location)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningResource_Location\n", t, value)
        }
        return nil, false
  }

  func (t *LearningResource_Location) Clone() (*LearningResource_Location) {
return reprint.This(t).(*LearningResource_Location)
  }
  func StatsCohortTypePointer(value interface{}) (*StatsCohortType, bool) {
switch t := value.(type) {
        case *StatsCohortType:
                return value.(*StatsCohortType), true
        case StatsCohortType:
                v, _ := value.(StatsCohortType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatsCohortType\n", t, value)
        }
        return nil, false
  }

  func (t *StatsCohortType) Clone() (*StatsCohortType) {
return reprint.This(t).(*StatsCohortType)
  }
  func WellbeingAppealPointer(value interface{}) (*WellbeingAppeal, bool) {
switch t := value.(type) {
        case *WellbeingAppeal:
                return value.(*WellbeingAppeal), true
        case WellbeingAppeal:
                v, _ := value.(WellbeingAppeal)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingAppeal\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingAppeal) Clone() (*WellbeingAppeal) {
return reprint.This(t).(*WellbeingAppeal)
  }
  func AGReportingObjectResponseTypePointer(value interface{}) (*AGReportingObjectResponseType, bool) {
switch t := value.(type) {
        case *AGReportingObjectResponseType:
                return value.(*AGReportingObjectResponseType), true
        case AGReportingObjectResponseType:
                v, _ := value.(AGReportingObjectResponseType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGReportingObjectResponseType\n", t, value)
        }
        return nil, false
  }

  func (t *AGReportingObjectResponseType) Clone() (*AGReportingObjectResponseType) {
return reprint.This(t).(*AGReportingObjectResponseType)
  }
  func LibraryItemInfoTypePointer(value interface{}) (*LibraryItemInfoType, bool) {
switch t := value.(type) {
        case *LibraryItemInfoType:
                return value.(*LibraryItemInfoType), true
        case LibraryItemInfoType:
                v, _ := value.(LibraryItemInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LibraryItemInfoType\n", t, value)
        }
        return nil, false
  }

  func (t *LibraryItemInfoType) Clone() (*LibraryItemInfoType) {
return reprint.This(t).(*LibraryItemInfoType)
  }
  func AGParentTypePointer(value interface{}) (*AGParentType, bool) {
switch t := value.(type) {
        case *AGParentType:
                return value.(*AGParentType), true
        case AGParentType:
                v, _ := value.(AGParentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AGParentType\n", t, value)
        }
        return nil, false
  }

  func (t *AGParentType) Clone() (*AGParentType) {
return reprint.This(t).(*AGParentType)
  }
  func TeachingGroupScheduleListTypePointer(value interface{}) (*TeachingGroupScheduleListType, bool) {
switch t := value.(type) {
        case *TeachingGroupScheduleListType:
                return value.(*TeachingGroupScheduleListType), true
        case TeachingGroupScheduleListType:
                v, _ := value.(TeachingGroupScheduleListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeachingGroupScheduleListType\n", t, value)
        }
        return nil, false
  }

  func (t *TeachingGroupScheduleListType) Clone() (*TeachingGroupScheduleListType) {
return reprint.This(t).(*TeachingGroupScheduleListType)
  }
  func SchoolInfoPointer(value interface{}) (*SchoolInfo, bool) {
switch t := value.(type) {
        case *SchoolInfo:
                return value.(*SchoolInfo), true
        case SchoolInfo:
                v, _ := value.(SchoolInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolInfo\n", t, value)
        }
        return nil, false
  }

  func (t *SchoolInfo) Clone() (*SchoolInfo) {
return reprint.This(t).(*SchoolInfo)
  }
  func SIF_MetadataType_TimeElementsPointer(value interface{}) (*SIF_MetadataType_TimeElements, bool) {
switch t := value.(type) {
        case *SIF_MetadataType_TimeElements:
                return value.(*SIF_MetadataType_TimeElements), true
        case SIF_MetadataType_TimeElements:
                v, _ := value.(SIF_MetadataType_TimeElements)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SIF_MetadataType_TimeElements\n", t, value)
        }
        return nil, false
  }

  func (t *SIF_MetadataType_TimeElements) Clone() (*SIF_MetadataType_TimeElements) {
return reprint.This(t).(*SIF_MetadataType_TimeElements)
  }
  func EssentialMaterialsTypePointer(value interface{}) (*EssentialMaterialsType, bool) {
switch t := value.(type) {
        case *EssentialMaterialsType:
                return value.(*EssentialMaterialsType), true
        case EssentialMaterialsType:
                v, _ := value.(EssentialMaterialsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EssentialMaterialsType\n", t, value)
        }
        return nil, false
  }

  func (t *EssentialMaterialsType) Clone() (*EssentialMaterialsType) {
return reprint.This(t).(*EssentialMaterialsType)
  }
  func NAPTestItem2TypePointer(value interface{}) (*NAPTestItem2Type, bool) {
switch t := value.(type) {
        case *NAPTestItem2Type:
                return value.(*NAPTestItem2Type), true
        case NAPTestItem2Type:
                v, _ := value.(NAPTestItem2Type)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestItem2Type\n", t, value)
        }
        return nil, false
  }

  func (t *NAPTestItem2Type) Clone() (*NAPTestItem2Type) {
return reprint.This(t).(*NAPTestItem2Type)
  }
  func FineInfoTypePointer(value interface{}) (*FineInfoType, bool) {
switch t := value.(type) {
        case *FineInfoType:
                return value.(*FineInfoType), true
        case FineInfoType:
                v, _ := value.(FineInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FineInfoType\n", t, value)
        }
        return nil, false
  }

  func (t *FineInfoType) Clone() (*FineInfoType) {
return reprint.This(t).(*FineInfoType)
  }
  func AwardContainerTypePointer(value interface{}) (*AwardContainerType, bool) {
switch t := value.(type) {
        case *AwardContainerType:
                return value.(*AwardContainerType), true
        case AwardContainerType:
                v, _ := value.(AwardContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AwardContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *AwardContainerType) Clone() (*AwardContainerType) {
return reprint.This(t).(*AwardContainerType)
  }
  func SubstituteItemTypePointer(value interface{}) (*SubstituteItemType, bool) {
switch t := value.(type) {
        case *SubstituteItemType:
                return value.(*SubstituteItemType), true
        case SubstituteItemType:
                v, _ := value.(SubstituteItemType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SubstituteItemType\n", t, value)
        }
        return nil, false
  }

  func (t *SubstituteItemType) Clone() (*SubstituteItemType) {
return reprint.This(t).(*SubstituteItemType)
  }
  func StudentSchoolEnrollment_AdvisorPointer(value interface{}) (*StudentSchoolEnrollment_Advisor, bool) {
switch t := value.(type) {
        case *StudentSchoolEnrollment_Advisor:
                return value.(*StudentSchoolEnrollment_Advisor), true
        case StudentSchoolEnrollment_Advisor:
                v, _ := value.(StudentSchoolEnrollment_Advisor)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentSchoolEnrollment_Advisor\n", t, value)
        }
        return nil, false
  }

  func (t *StudentSchoolEnrollment_Advisor) Clone() (*StudentSchoolEnrollment_Advisor) {
return reprint.This(t).(*StudentSchoolEnrollment_Advisor)
  }
  func AggregateStatisticFactPointer(value interface{}) (*AggregateStatisticFact, bool) {
switch t := value.(type) {
        case *AggregateStatisticFact:
                return value.(*AggregateStatisticFact), true
        case AggregateStatisticFact:
                v, _ := value.(AggregateStatisticFact)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AggregateStatisticFact\n", t, value)
        }
        return nil, false
  }

  func (t *AggregateStatisticFact) Clone() (*AggregateStatisticFact) {
return reprint.This(t).(*AggregateStatisticFact)
  }
  func StudentContactPersonalPointer(value interface{}) (*StudentContactPersonal, bool) {
switch t := value.(type) {
        case *StudentContactPersonal:
                return value.(*StudentContactPersonal), true
        case StudentContactPersonal:
                v, _ := value.(StudentContactPersonal)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentContactPersonal\n", t, value)
        }
        return nil, false
  }

  func (t *StudentContactPersonal) Clone() (*StudentContactPersonal) {
return reprint.This(t).(*StudentContactPersonal)
  }
  func StudentListTypePointer(value interface{}) (*StudentListType, bool) {
switch t := value.(type) {
        case *StudentListType:
                return value.(*StudentListType), true
        case StudentListType:
                v, _ := value.(StudentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentListType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentListType) Clone() (*StudentListType) {
return reprint.This(t).(*StudentListType)
  }
  func MarkValueInfoPointer(value interface{}) (*MarkValueInfo, bool) {
switch t := value.(type) {
        case *MarkValueInfo:
                return value.(*MarkValueInfo), true
        case MarkValueInfo:
                v, _ := value.(MarkValueInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to MarkValueInfo\n", t, value)
        }
        return nil, false
  }

  func (t *MarkValueInfo) Clone() (*MarkValueInfo) {
return reprint.This(t).(*MarkValueInfo)
  }
  func YearLevelEnrollmentTypePointer(value interface{}) (*YearLevelEnrollmentType, bool) {
switch t := value.(type) {
        case *YearLevelEnrollmentType:
                return value.(*YearLevelEnrollmentType), true
        case YearLevelEnrollmentType:
                v, _ := value.(YearLevelEnrollmentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to YearLevelEnrollmentType\n", t, value)
        }
        return nil, false
  }

  func (t *YearLevelEnrollmentType) Clone() (*YearLevelEnrollmentType) {
return reprint.This(t).(*YearLevelEnrollmentType)
  }
  func SchoolProgramListTypePointer(value interface{}) (*SchoolProgramListType, bool) {
switch t := value.(type) {
        case *SchoolProgramListType:
                return value.(*SchoolProgramListType), true
        case SchoolProgramListType:
                v, _ := value.(SchoolProgramListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolProgramListType\n", t, value)
        }
        return nil, false
  }

  func (t *SchoolProgramListType) Clone() (*SchoolProgramListType) {
return reprint.This(t).(*SchoolProgramListType)
  }
  func ContactInfoTypePointer(value interface{}) (*ContactInfoType, bool) {
switch t := value.(type) {
        case *ContactInfoType:
                return value.(*ContactInfoType), true
        case ContactInfoType:
                v, _ := value.(ContactInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ContactInfoType\n", t, value)
        }
        return nil, false
  }

  func (t *ContactInfoType) Clone() (*ContactInfoType) {
return reprint.This(t).(*ContactInfoType)
  }
  func TermInfoPointer(value interface{}) (*TermInfo, bool) {
switch t := value.(type) {
        case *TermInfo:
                return value.(*TermInfo), true
        case TermInfo:
                v, _ := value.(TermInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TermInfo\n", t, value)
        }
        return nil, false
  }

  func (t *TermInfo) Clone() (*TermInfo) {
return reprint.This(t).(*TermInfo)
  }
  func ProgramFundingSourceTypePointer(value interface{}) (*ProgramFundingSourceType, bool) {
switch t := value.(type) {
        case *ProgramFundingSourceType:
                return value.(*ProgramFundingSourceType), true
        case ProgramFundingSourceType:
                v, _ := value.(ProgramFundingSourceType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ProgramFundingSourceType\n", t, value)
        }
        return nil, false
  }

  func (t *ProgramFundingSourceType) Clone() (*ProgramFundingSourceType) {
return reprint.This(t).(*ProgramFundingSourceType)
  }
  func ResourceUsage_SIF_RefIdPointer(value interface{}) (*ResourceUsage_SIF_RefId, bool) {
switch t := value.(type) {
        case *ResourceUsage_SIF_RefId:
                return value.(*ResourceUsage_SIF_RefId), true
        case ResourceUsage_SIF_RefId:
                v, _ := value.(ResourceUsage_SIF_RefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ResourceUsage_SIF_RefId\n", t, value)
        }
        return nil, false
  }

  func (t *ResourceUsage_SIF_RefId) Clone() (*ResourceUsage_SIF_RefId) {
return reprint.This(t).(*ResourceUsage_SIF_RefId)
  }
  func NAPStudentResponseTestletListTypePointer(value interface{}) (*NAPStudentResponseTestletListType, bool) {
switch t := value.(type) {
        case *NAPStudentResponseTestletListType:
                return value.(*NAPStudentResponseTestletListType), true
        case NAPStudentResponseTestletListType:
                v, _ := value.(NAPStudentResponseTestletListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPStudentResponseTestletListType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPStudentResponseTestletListType) Clone() (*NAPStudentResponseTestletListType) {
return reprint.This(t).(*NAPStudentResponseTestletListType)
  }
  func PersonInfoTypePointer(value interface{}) (*PersonInfoType, bool) {
switch t := value.(type) {
        case *PersonInfoType:
                return value.(*PersonInfoType), true
        case PersonInfoType:
                v, _ := value.(PersonInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PersonInfoType\n", t, value)
        }
        return nil, false
  }

  func (t *PersonInfoType) Clone() (*PersonInfoType) {
return reprint.This(t).(*PersonInfoType)
  }
  func CensusStaffListTypePointer(value interface{}) (*CensusStaffListType, bool) {
switch t := value.(type) {
        case *CensusStaffListType:
                return value.(*CensusStaffListType), true
        case CensusStaffListType:
                v, _ := value.(CensusStaffListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusStaffListType\n", t, value)
        }
        return nil, false
  }

  func (t *CensusStaffListType) Clone() (*CensusStaffListType) {
return reprint.This(t).(*CensusStaffListType)
  }
  func NAPTestletResponseItemTypePointer(value interface{}) (*NAPTestletResponseItemType, bool) {
switch t := value.(type) {
        case *NAPTestletResponseItemType:
                return value.(*NAPTestletResponseItemType), true
        case NAPTestletResponseItemType:
                v, _ := value.(NAPTestletResponseItemType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to NAPTestletResponseItemType\n", t, value)
        }
        return nil, false
  }

  func (t *NAPTestletResponseItemType) Clone() (*NAPTestletResponseItemType) {
return reprint.This(t).(*NAPTestletResponseItemType)
  }
  func VisaSubClassTypePointer(value interface{}) (*VisaSubClassType, bool) {
switch t := value.(type) {
        case *VisaSubClassType:
                return value.(*VisaSubClassType), true
        case VisaSubClassType:
                v, _ := value.(VisaSubClassType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to VisaSubClassType\n", t, value)
        }
        return nil, false
  }

  func (t *VisaSubClassType) Clone() (*VisaSubClassType) {
return reprint.This(t).(*VisaSubClassType)
  }
  func StudentGroupTypePointer(value interface{}) (*StudentGroupType, bool) {
switch t := value.(type) {
        case *StudentGroupType:
                return value.(*StudentGroupType), true
        case StudentGroupType:
                v, _ := value.(StudentGroupType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentGroupType\n", t, value)
        }
        return nil, false
  }

  func (t *StudentGroupType) Clone() (*StudentGroupType) {
return reprint.This(t).(*StudentGroupType)
  }
  func LibraryMessageListTypePointer(value interface{}) (*LibraryMessageListType, bool) {
switch t := value.(type) {
        case *LibraryMessageListType:
                return value.(*LibraryMessageListType), true
        case LibraryMessageListType:
                v, _ := value.(LibraryMessageListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LibraryMessageListType\n", t, value)
        }
        return nil, false
  }

  func (t *LibraryMessageListType) Clone() (*LibraryMessageListType) {
return reprint.This(t).(*LibraryMessageListType)
  }
  func ContactsTypePointer(value interface{}) (*ContactsType, bool) {
switch t := value.(type) {
        case *ContactsType:
                return value.(*ContactsType), true
        case ContactsType:
                v, _ := value.(ContactsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ContactsType\n", t, value)
        }
        return nil, false
  }

  func (t *ContactsType) Clone() (*ContactsType) {
return reprint.This(t).(*ContactsType)
  }
  func PromotionInfoTypePointer(value interface{}) (*PromotionInfoType, bool) {
switch t := value.(type) {
        case *PromotionInfoType:
                return value.(*PromotionInfoType), true
        case PromotionInfoType:
                v, _ := value.(PromotionInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PromotionInfoType\n", t, value)
        }
        return nil, false
  }

  func (t *PromotionInfoType) Clone() (*PromotionInfoType) {
return reprint.This(t).(*PromotionInfoType)
  }
  func PeriodAttendancesTypePointer(value interface{}) (*PeriodAttendancesType, bool) {
switch t := value.(type) {
        case *PeriodAttendancesType:
                return value.(*PeriodAttendancesType), true
        case PeriodAttendancesType:
                v, _ := value.(PeriodAttendancesType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PeriodAttendancesType\n", t, value)
        }
        return nil, false
  }

  func (t *PeriodAttendancesType) Clone() (*PeriodAttendancesType) {
return reprint.This(t).(*PeriodAttendancesType)
  }
  func SchoolGroupListTypePointer(value interface{}) (*SchoolGroupListType, bool) {
switch t := value.(type) {
        case *SchoolGroupListType:
                return value.(*SchoolGroupListType), true
        case SchoolGroupListType:
                v, _ := value.(SchoolGroupListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolGroupListType\n", t, value)
        }
        return nil, false
  }

  func (t *SchoolGroupListType) Clone() (*SchoolGroupListType) {
return reprint.This(t).(*SchoolGroupListType)
  }
  func StatisticalAreaTypePointer(value interface{}) (*StatisticalAreaType, bool) {
switch t := value.(type) {
        case *StatisticalAreaType:
                return value.(*StatisticalAreaType), true
        case StatisticalAreaType:
                v, _ := value.(StatisticalAreaType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatisticalAreaType\n", t, value)
        }
        return nil, false
  }

  func (t *StatisticalAreaType) Clone() (*StatisticalAreaType) {
return reprint.This(t).(*StatisticalAreaType)
  }
  func CodeFrameTestItemTypePointer(value interface{}) (*CodeFrameTestItemType, bool) {
switch t := value.(type) {
        case *CodeFrameTestItemType:
                return value.(*CodeFrameTestItemType), true
        case CodeFrameTestItemType:
                v, _ := value.(CodeFrameTestItemType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CodeFrameTestItemType\n", t, value)
        }
        return nil, false
  }

  func (t *CodeFrameTestItemType) Clone() (*CodeFrameTestItemType) {
return reprint.This(t).(*CodeFrameTestItemType)
  }
  func GradingScoreListTypePointer(value interface{}) (*GradingScoreListType, bool) {
switch t := value.(type) {
        case *GradingScoreListType:
                return value.(*GradingScoreListType), true
        case GradingScoreListType:
                v, _ := value.(GradingScoreListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to GradingScoreListType\n", t, value)
        }
        return nil, false
  }

  func (t *GradingScoreListType) Clone() (*GradingScoreListType) {
return reprint.This(t).(*GradingScoreListType)
  }
  func LocationType_LocationRefIdPointer(value interface{}) (*LocationType_LocationRefId, bool) {
switch t := value.(type) {
        case *LocationType_LocationRefId:
                return value.(*LocationType_LocationRefId), true
        case LocationType_LocationRefId:
                v, _ := value.(LocationType_LocationRefId)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LocationType_LocationRefId\n", t, value)
        }
        return nil, false
  }

  func (t *LocationType_LocationRefId) Clone() (*LocationType_LocationRefId) {
return reprint.This(t).(*LocationType_LocationRefId)
  }
  func AttendanceInfoTypePointer(value interface{}) (*AttendanceInfoType, bool) {
switch t := value.(type) {
        case *AttendanceInfoType:
                return value.(*AttendanceInfoType), true
        case AttendanceInfoType:
                v, _ := value.(AttendanceInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AttendanceInfoType\n", t, value)
        }
        return nil, false
  }

  func (t *AttendanceInfoType) Clone() (*AttendanceInfoType) {
return reprint.This(t).(*AttendanceInfoType)
  }
  func StudentGradePointer(value interface{}) (*StudentGrade, bool) {
switch t := value.(type) {
        case *StudentGrade:
                return value.(*StudentGrade), true
        case StudentGrade:
                v, _ := value.(StudentGrade)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentGrade\n", t, value)
        }
        return nil, false
  }

  func (t *StudentGrade) Clone() (*StudentGrade) {
return reprint.This(t).(*StudentGrade)
  }
  func FineInfoListTypePointer(value interface{}) (*FineInfoListType, bool) {
switch t := value.(type) {
        case *FineInfoListType:
                return value.(*FineInfoListType), true
        case FineInfoListType:
                v, _ := value.(FineInfoListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FineInfoListType\n", t, value)
        }
        return nil, false
  }

  func (t *FineInfoListType) Clone() (*FineInfoListType) {
return reprint.This(t).(*FineInfoListType)
  }
  func WellbeingDocumentTypePointer(value interface{}) (*WellbeingDocumentType, bool) {
switch t := value.(type) {
        case *WellbeingDocumentType:
                return value.(*WellbeingDocumentType), true
        case WellbeingDocumentType:
                v, _ := value.(WellbeingDocumentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingDocumentType\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingDocumentType) Clone() (*WellbeingDocumentType) {
return reprint.This(t).(*WellbeingDocumentType)
  }
  func SoftwareVendorInfoContainerTypePointer(value interface{}) (*SoftwareVendorInfoContainerType, bool) {
switch t := value.(type) {
        case *SoftwareVendorInfoContainerType:
                return value.(*SoftwareVendorInfoContainerType), true
        case SoftwareVendorInfoContainerType:
                v, _ := value.(SoftwareVendorInfoContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SoftwareVendorInfoContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *SoftwareVendorInfoContainerType) Clone() (*SoftwareVendorInfoContainerType) {
return reprint.This(t).(*SoftwareVendorInfoContainerType)
  }
  func StatsCohortListTypePointer(value interface{}) (*StatsCohortListType, bool) {
switch t := value.(type) {
        case *StatsCohortListType:
                return value.(*StatsCohortListType), true
        case StatsCohortListType:
                v, _ := value.(StatsCohortListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatsCohortListType\n", t, value)
        }
        return nil, false
  }

  func (t *StatsCohortListType) Clone() (*StatsCohortListType) {
return reprint.This(t).(*StatsCohortListType)
  }
  func FollowUpActionTypePointer(value interface{}) (*FollowUpActionType, bool) {
switch t := value.(type) {
        case *FollowUpActionType:
                return value.(*FollowUpActionType), true
        case FollowUpActionType:
                v, _ := value.(FollowUpActionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FollowUpActionType\n", t, value)
        }
        return nil, false
  }

  func (t *FollowUpActionType) Clone() (*FollowUpActionType) {
return reprint.This(t).(*FollowUpActionType)
  }
  func WellbeingAlertPointer(value interface{}) (*WellbeingAlert, bool) {
switch t := value.(type) {
        case *WellbeingAlert:
                return value.(*WellbeingAlert), true
        case WellbeingAlert:
                v, _ := value.(WellbeingAlert)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to WellbeingAlert\n", t, value)
        }
        return nil, false
  }

  func (t *WellbeingAlert) Clone() (*WellbeingAlert) {
return reprint.This(t).(*WellbeingAlert)
  }
  func TeacherListTypePointer(value interface{}) (*TeacherListType, bool) {
switch t := value.(type) {
        case *TeacherListType:
                return value.(*TeacherListType), true
        case TeacherListType:
                v, _ := value.(TeacherListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to TeacherListType\n", t, value)
        }
        return nil, false
  }

  func (t *TeacherListType) Clone() (*TeacherListType) {
return reprint.This(t).(*TeacherListType)
  }
  func SystemRole_RolePointer(value interface{}) (*SystemRole_Role, bool) {
switch t := value.(type) {
        case *SystemRole_Role:
                return value.(*SystemRole_Role), true
        case SystemRole_Role:
                v, _ := value.(SystemRole_Role)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole_Role\n", t, value)
        }
        return nil, false
  }

  func (t *SystemRole_Role) Clone() (*SystemRole_Role) {
return reprint.This(t).(*SystemRole_Role)
  }
  func CensusStaffTypePointer(value interface{}) (*CensusStaffType, bool) {
switch t := value.(type) {
        case *CensusStaffType:
                return value.(*CensusStaffType), true
        case CensusStaffType:
                v, _ := value.(CensusStaffType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to CensusStaffType\n", t, value)
        }
        return nil, false
  }

  func (t *CensusStaffType) Clone() (*CensusStaffType) {
return reprint.This(t).(*CensusStaffType)
  }
  func PurchasingItemTypePointer(value interface{}) (*PurchasingItemType, bool) {
switch t := value.(type) {
        case *PurchasingItemType:
                return value.(*PurchasingItemType), true
        case PurchasingItemType:
                v, _ := value.(PurchasingItemType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PurchasingItemType\n", t, value)
        }
        return nil, false
  }

  func (t *PurchasingItemType) Clone() (*PurchasingItemType) {
return reprint.This(t).(*PurchasingItemType)
  }
  func AbstractContentPackageType_TextDataPointer(value interface{}) (*AbstractContentPackageType_TextData, bool) {
switch t := value.(type) {
        case *AbstractContentPackageType_TextData:
                return value.(*AbstractContentPackageType_TextData), true
        case AbstractContentPackageType_TextData:
                v, _ := value.(AbstractContentPackageType_TextData)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AbstractContentPackageType_TextData\n", t, value)
        }
        return nil, false
  }

  func (t *AbstractContentPackageType_TextData) Clone() (*AbstractContentPackageType_TextData) {
return reprint.This(t).(*AbstractContentPackageType_TextData)
  }
  func LearningStandardTypePointer(value interface{}) (*LearningStandardType, bool) {
switch t := value.(type) {
        case *LearningStandardType:
                return value.(*LearningStandardType), true
        case LearningStandardType:
                v, _ := value.(LearningStandardType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LearningStandardType\n", t, value)
        }
        return nil, false
  }

  func (t *LearningStandardType) Clone() (*LearningStandardType) {
return reprint.This(t).(*LearningStandardType)
  }
  func SoftwareRequirementTypePointer(value interface{}) (*SoftwareRequirementType, bool) {
switch t := value.(type) {
        case *SoftwareRequirementType:
                return value.(*SoftwareRequirementType), true
        case SoftwareRequirementType:
                v, _ := value.(SoftwareRequirementType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SoftwareRequirementType\n", t, value)
        }
        return nil, false
  }

  func (t *SoftwareRequirementType) Clone() (*SoftwareRequirementType) {
return reprint.This(t).(*SoftwareRequirementType)
  }
  func Invoice_InvoicedEntityPointer(value interface{}) (*Invoice_InvoicedEntity, bool) {
switch t := value.(type) {
        case *Invoice_InvoicedEntity:
                return value.(*Invoice_InvoicedEntity), true
        case Invoice_InvoicedEntity:
                v, _ := value.(Invoice_InvoicedEntity)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Invoice_InvoicedEntity\n", t, value)
        }
        return nil, false
  }

  func (t *Invoice_InvoicedEntity) Clone() (*Invoice_InvoicedEntity) {
return reprint.This(t).(*Invoice_InvoicedEntity)
  }
  func StudentAttendanceCollectionPointer(value interface{}) (*StudentAttendanceCollection, bool) {
switch t := value.(type) {
        case *StudentAttendanceCollection:
                return value.(*StudentAttendanceCollection), true
        case StudentAttendanceCollection:
                v, _ := value.(StudentAttendanceCollection)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StudentAttendanceCollection\n", t, value)
        }
        return nil, false
  }

  func (t *StudentAttendanceCollection) Clone() (*StudentAttendanceCollection) {
return reprint.This(t).(*StudentAttendanceCollection)
  }
  func DebitOrCreditAmountTypePointer(value interface{}) (*DebitOrCreditAmountType, bool) {
switch t := value.(type) {
        case *DebitOrCreditAmountType:
                return value.(*DebitOrCreditAmountType), true
        case DebitOrCreditAmountType:
                v, _ := value.(DebitOrCreditAmountType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DebitOrCreditAmountType\n", t, value)
        }
        return nil, false
  }

  func (t *DebitOrCreditAmountType) Clone() (*DebitOrCreditAmountType) {
return reprint.This(t).(*DebitOrCreditAmountType)
  }
  func SchoolCourseInfoPointer(value interface{}) (*SchoolCourseInfo, bool) {
switch t := value.(type) {
        case *SchoolCourseInfo:
                return value.(*SchoolCourseInfo), true
        case SchoolCourseInfo:
                v, _ := value.(SchoolCourseInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolCourseInfo\n", t, value)
        }
        return nil, false
  }

  func (t *SchoolCourseInfo) Clone() (*SchoolCourseInfo) {
return reprint.This(t).(*SchoolCourseInfo)
  }
  func StatementsTypePointer(value interface{}) (*StatementsType, bool) {
switch t := value.(type) {
        case *StatementsType:
                return value.(*StatementsType), true
        case StatementsType:
                v, _ := value.(StatementsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StatementsType\n", t, value)
        }
        return nil, false
  }

  func (t *StatementsType) Clone() (*StatementsType) {
return reprint.This(t).(*StatementsType)
  }
  func LocalCodeListTypePointer(value interface{}) (*LocalCodeListType, bool) {
switch t := value.(type) {
        case *LocalCodeListType:
                return value.(*LocalCodeListType), true
        case LocalCodeListType:
                v, _ := value.(LocalCodeListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LocalCodeListType\n", t, value)
        }
        return nil, false
  }

  func (t *LocalCodeListType) Clone() (*LocalCodeListType) {
return reprint.This(t).(*LocalCodeListType)
  }
  func PaymentReceiptLineTypePointer(value interface{}) (*PaymentReceiptLineType, bool) {
switch t := value.(type) {
        case *PaymentReceiptLineType:
                return value.(*PaymentReceiptLineType), true
        case PaymentReceiptLineType:
                v, _ := value.(PaymentReceiptLineType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PaymentReceiptLineType\n", t, value)
        }
        return nil, false
  }

  func (t *PaymentReceiptLineType) Clone() (*PaymentReceiptLineType) {
return reprint.This(t).(*PaymentReceiptLineType)
  }
  func PurchasingItemsTypePointer(value interface{}) (*PurchasingItemsType, bool) {
switch t := value.(type) {
        case *PurchasingItemsType:
                return value.(*PurchasingItemsType), true
        case PurchasingItemsType:
                v, _ := value.(PurchasingItemsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PurchasingItemsType\n", t, value)
        }
        return nil, false
  }

  func (t *PurchasingItemsType) Clone() (*PurchasingItemsType) {
return reprint.This(t).(*PurchasingItemsType)
  }
  func SystemRolePointer(value interface{}) (*SystemRole, bool) {
switch t := value.(type) {
        case *SystemRole:
                return value.(*SystemRole), true
        case SystemRole:
                v, _ := value.(SystemRole)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SystemRole\n", t, value)
        }
        return nil, false
  }

  func (t *SystemRole) Clone() (*SystemRole) {
return reprint.This(t).(*SystemRole)
  }
  func Activity_EvaluationPointer(value interface{}) (*Activity_Evaluation, bool) {
switch t := value.(type) {
        case *Activity_Evaluation:
                return value.(*Activity_Evaluation), true
        case Activity_Evaluation:
                v, _ := value.(Activity_Evaluation)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Activity_Evaluation\n", t, value)
        }
        return nil, false
  }

  func (t *Activity_Evaluation) Clone() (*Activity_Evaluation) {
return reprint.This(t).(*Activity_Evaluation)
  }
  func ContactTypePointer(value interface{}) (*ContactType, bool) {
switch t := value.(type) {
        case *ContactType:
                return value.(*ContactType), true
        case ContactType:
                v, _ := value.(ContactType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ContactType\n", t, value)
        }
        return nil, false
  }

  func (t *ContactType) Clone() (*ContactType) {
return reprint.This(t).(*ContactType)
  }
  func RelationshipTypePointer(value interface{}) (*RelationshipType, bool) {
switch t := value.(type) {
        case *RelationshipType:
                return value.(*RelationshipType), true
        case RelationshipType:
                v, _ := value.(RelationshipType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to RelationshipType\n", t, value)
        }
        return nil, false
  }

  func (t *RelationshipType) Clone() (*RelationshipType) {
return reprint.This(t).(*RelationshipType)
  }
  func ScheduledTeacherListTypePointer(value interface{}) (*ScheduledTeacherListType, bool) {
switch t := value.(type) {
        case *ScheduledTeacherListType:
                return value.(*ScheduledTeacherListType), true
        case ScheduledTeacherListType:
                v, _ := value.(ScheduledTeacherListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ScheduledTeacherListType\n", t, value)
        }
        return nil, false
  }

  func (t *ScheduledTeacherListType) Clone() (*ScheduledTeacherListType) {
return reprint.This(t).(*ScheduledTeacherListType)
  }
  func OtherNameTypePointer(value interface{}) (*OtherNameType, bool) {
switch t := value.(type) {
        case *OtherNameType:
                return value.(*OtherNameType), true
        case OtherNameType:
                v, _ := value.(OtherNameType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to OtherNameType\n", t, value)
        }
        return nil, false
  }

  func (t *OtherNameType) Clone() (*OtherNameType) {
return reprint.This(t).(*OtherNameType)
  }
  func EquipmentInfoPointer(value interface{}) (*EquipmentInfo, bool) {
switch t := value.(type) {
        case *EquipmentInfo:
                return value.(*EquipmentInfo), true
        case EquipmentInfo:
                v, _ := value.(EquipmentInfo)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EquipmentInfo\n", t, value)
        }
        return nil, false
  }

  func (t *EquipmentInfo) Clone() (*EquipmentInfo) {
return reprint.This(t).(*EquipmentInfo)
  }
  func ContentDescriptionListTypePointer(value interface{}) (*ContentDescriptionListType, bool) {
switch t := value.(type) {
        case *ContentDescriptionListType:
                return value.(*ContentDescriptionListType), true
        case ContentDescriptionListType:
                v, _ := value.(ContentDescriptionListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ContentDescriptionListType\n", t, value)
        }
        return nil, false
  }

  func (t *ContentDescriptionListType) Clone() (*ContentDescriptionListType) {
return reprint.This(t).(*ContentDescriptionListType)
  }
  func ComponentTypePointer(value interface{}) (*ComponentType, bool) {
switch t := value.(type) {
        case *ComponentType:
                return value.(*ComponentType), true
        case ComponentType:
                v, _ := value.(ComponentType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to ComponentType\n", t, value)
        }
        return nil, false
  }

  func (t *ComponentType) Clone() (*ComponentType) {
return reprint.This(t).(*ComponentType)
  }
  func LocationOfInstructionTypePointer(value interface{}) (*LocationOfInstructionType, bool) {
switch t := value.(type) {
        case *LocationOfInstructionType:
                return value.(*LocationOfInstructionType), true
        case LocationOfInstructionType:
                v, _ := value.(LocationOfInstructionType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LocationOfInstructionType\n", t, value)
        }
        return nil, false
  }

  func (t *LocationOfInstructionType) Clone() (*LocationOfInstructionType) {
return reprint.This(t).(*LocationOfInstructionType)
  }
  func SchoolInfo_OtherLEAPointer(value interface{}) (*SchoolInfo_OtherLEA, bool) {
switch t := value.(type) {
        case *SchoolInfo_OtherLEA:
                return value.(*SchoolInfo_OtherLEA), true
        case SchoolInfo_OtherLEA:
                v, _ := value.(SchoolInfo_OtherLEA)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SchoolInfo_OtherLEA\n", t, value)
        }
        return nil, false
  }

  func (t *SchoolInfo_OtherLEA) Clone() (*SchoolInfo_OtherLEA) {
return reprint.This(t).(*SchoolInfo_OtherLEA)
  }
  func PrincipalInfoTypePointer(value interface{}) (*PrincipalInfoType, bool) {
switch t := value.(type) {
        case *PrincipalInfoType:
                return value.(*PrincipalInfoType), true
        case PrincipalInfoType:
                v, _ := value.(PrincipalInfoType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PrincipalInfoType\n", t, value)
        }
        return nil, false
  }

  func (t *PrincipalInfoType) Clone() (*PrincipalInfoType) {
return reprint.This(t).(*PrincipalInfoType)
  }
  func SIF_ExtendedElementsTypePointer(value interface{}) (*SIF_ExtendedElementsType, bool) {
switch t := value.(type) {
        case *SIF_ExtendedElementsType:
                return value.(*SIF_ExtendedElementsType), true
        case SIF_ExtendedElementsType:
                v, _ := value.(SIF_ExtendedElementsType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SIF_ExtendedElementsType\n", t, value)
        }
        return nil, false
  }

  func (t *SIF_ExtendedElementsType) Clone() (*SIF_ExtendedElementsType) {
return reprint.This(t).(*SIF_ExtendedElementsType)
  }
  func RelatedLearningStandardItemRefIdListTypePointer(value interface{}) (*RelatedLearningStandardItemRefIdListType, bool) {
switch t := value.(type) {
        case *RelatedLearningStandardItemRefIdListType:
                return value.(*RelatedLearningStandardItemRefIdListType), true
        case RelatedLearningStandardItemRefIdListType:
                v, _ := value.(RelatedLearningStandardItemRefIdListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to RelatedLearningStandardItemRefIdListType\n", t, value)
        }
        return nil, false
  }

  func (t *RelatedLearningStandardItemRefIdListType) Clone() (*RelatedLearningStandardItemRefIdListType) {
return reprint.This(t).(*RelatedLearningStandardItemRefIdListType)
  }
  func DomainProficiencyContainerTypePointer(value interface{}) (*DomainProficiencyContainerType, bool) {
switch t := value.(type) {
        case *DomainProficiencyContainerType:
                return value.(*DomainProficiencyContainerType), true
        case DomainProficiencyContainerType:
                v, _ := value.(DomainProficiencyContainerType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to DomainProficiencyContainerType\n", t, value)
        }
        return nil, false
  }

  func (t *DomainProficiencyContainerType) Clone() (*DomainProficiencyContainerType) {
return reprint.This(t).(*DomainProficiencyContainerType)
  }
  func EvaluationTypePointer(value interface{}) (*EvaluationType, bool) {
switch t := value.(type) {
        case *EvaluationType:
                return value.(*EvaluationType), true
        case EvaluationType:
                v, _ := value.(EvaluationType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to EvaluationType\n", t, value)
        }
        return nil, false
  }

  func (t *EvaluationType) Clone() (*EvaluationType) {
return reprint.This(t).(*EvaluationType)
  }
  func SIF_ExtendedElementsType_SIF_ExtendedElementPointer(value interface{}) (*SIF_ExtendedElementsType_SIF_ExtendedElement, bool) {
switch t := value.(type) {
        case *SIF_ExtendedElementsType_SIF_ExtendedElement:
                return value.(*SIF_ExtendedElementsType_SIF_ExtendedElement), true
        case SIF_ExtendedElementsType_SIF_ExtendedElement:
                v, _ := value.(SIF_ExtendedElementsType_SIF_ExtendedElement)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to SIF_ExtendedElementsType_SIF_ExtendedElement\n", t, value)
        }
        return nil, false
  }

  func (t *SIF_ExtendedElementsType_SIF_ExtendedElement) Clone() (*SIF_ExtendedElementsType_SIF_ExtendedElement) {
return reprint.This(t).(*SIF_ExtendedElementsType_SIF_ExtendedElement)
  }
  func AssignmentListTypePointer(value interface{}) (*AssignmentListType, bool) {
switch t := value.(type) {
        case *AssignmentListType:
                return value.(*AssignmentListType), true
        case AssignmentListType:
                v, _ := value.(AssignmentListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to AssignmentListType\n", t, value)
        }
        return nil, false
  }

  func (t *AssignmentListType) Clone() (*AssignmentListType) {
return reprint.This(t).(*AssignmentListType)
  }
  func StandardsSettingBodyTypePointer(value interface{}) (*StandardsSettingBodyType, bool) {
switch t := value.(type) {
        case *StandardsSettingBodyType:
                return value.(*StandardsSettingBodyType), true
        case StandardsSettingBodyType:
                v, _ := value.(StandardsSettingBodyType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to StandardsSettingBodyType\n", t, value)
        }
        return nil, false
  }

  func (t *StandardsSettingBodyType) Clone() (*StandardsSettingBodyType) {
return reprint.This(t).(*StandardsSettingBodyType)
  }
  func IdentityAssertionsType_IdentityAssertionPointer(value interface{}) (*IdentityAssertionsType_IdentityAssertion, bool) {
switch t := value.(type) {
        case *IdentityAssertionsType_IdentityAssertion:
                return value.(*IdentityAssertionsType_IdentityAssertion), true
        case IdentityAssertionsType_IdentityAssertion:
                v, _ := value.(IdentityAssertionsType_IdentityAssertion)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to IdentityAssertionsType_IdentityAssertion\n", t, value)
        }
        return nil, false
  }

  func (t *IdentityAssertionsType_IdentityAssertion) Clone() (*IdentityAssertionsType_IdentityAssertion) {
return reprint.This(t).(*IdentityAssertionsType_IdentityAssertion)
  }
  func PasswordListType_PasswordPointer(value interface{}) (*PasswordListType_Password, bool) {
switch t := value.(type) {
        case *PasswordListType_Password:
                return value.(*PasswordListType_Password), true
        case PasswordListType_Password:
                v, _ := value.(PasswordListType_Password)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to PasswordListType_Password\n", t, value)
        }
        return nil, false
  }

  func (t *PasswordListType_Password) Clone() (*PasswordListType_Password) {
return reprint.This(t).(*PasswordListType_Password)
  }
  func LifeCycleTypePointer(value interface{}) (*LifeCycleType, bool) {
switch t := value.(type) {
        case *LifeCycleType:
                return value.(*LifeCycleType), true
        case LifeCycleType:
                v, _ := value.(LifeCycleType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to LifeCycleType\n", t, value)
        }
        return nil, false
  }

  func (t *LifeCycleType) Clone() (*LifeCycleType) {
return reprint.This(t).(*LifeCycleType)
  }
  func DebtorPointer(value interface{}) (*Debtor, bool) {
switch t := value.(type) {
        case *Debtor:
                return value.(*Debtor), true
        case Debtor:
                v, _ := value.(Debtor)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Debtor\n", t, value)
        }
        return nil, false
  }

  func (t *Debtor) Clone() (*Debtor) {
return reprint.This(t).(*Debtor)
  }
  func FQReportingListTypePointer(value interface{}) (*FQReportingListType, bool) {
switch t := value.(type) {
        case *FQReportingListType:
                return value.(*FQReportingListType), true
        case FQReportingListType:
                v, _ := value.(FQReportingListType)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to FQReportingListType\n", t, value)
        }
        return nil, false
  }

  func (t *FQReportingListType) Clone() (*FQReportingListType) {
return reprint.This(t).(*FQReportingListType)
  }

  func (t *CalendarSummaryListType) Append(value string) *CalendarSummaryListType {
    
        if t == nil {
                t, _ = CalendarSummaryListTypePointer(CalendarSummaryListType{})
        }
        if t.CalendarSummaryRefId == nil {
                t.CalendarSummaryRefId = make([]string, 0)
        }
        t.CalendarSummaryRefId = append(t.CalendarSummaryRefId, value)
        return t
}

func (t *CalendarSummaryListType) AddNew() *CalendarSummaryListType {
        if t == nil {
                t, _ = CalendarSummaryListTypePointer(CalendarSummaryListType{})
        }
        if t.CalendarSummaryRefId == nil {
                t.CalendarSummaryRefId = make([]string, 0)
        }
        t.CalendarSummaryRefId = append(t.CalendarSummaryRefId, "")
        return t
}

func (t *CalendarSummaryListType) Last() *string {
  if t.CalendarSummaryRefId == nil {
    t = t.AddNew()
    }
        return &(t.CalendarSummaryRefId[len(t.CalendarSummaryRefId)-1])
}

      func (t *CalendarSummaryListType) AppendString(value string) *CalendarSummaryListType {
        return t.Append((string)(value))
        }

  func (t *NAPSubscoreListType) Append(value NAPSubscoreType) *NAPSubscoreListType {
    
        if t == nil {
                t, _ = NAPSubscoreListTypePointer(NAPSubscoreListType{})
        }
        if t.Subscore == nil {
                t.Subscore = make([]NAPSubscoreType, 0)
        }
        t.Subscore = append(t.Subscore, value)
        return t
}

func (t *NAPSubscoreListType) AddNew() *NAPSubscoreListType {
        if t == nil {
                t, _ = NAPSubscoreListTypePointer(NAPSubscoreListType{})
        }
        if t.Subscore == nil {
                t.Subscore = make([]NAPSubscoreType, 0)
        }
        t.Subscore = append(t.Subscore, NAPSubscoreType{})
        return t
}

func (t *NAPSubscoreListType) Last() *NAPSubscoreType {
  if t.Subscore == nil {
    t = t.AddNew()
    }
        return &(t.Subscore[len(t.Subscore)-1])
}


  func (t *StatsCohortYearLevelListType) Append(value StatsCohortYearLevelType) *StatsCohortYearLevelListType {
    
        if t == nil {
                t, _ = StatsCohortYearLevelListTypePointer(StatsCohortYearLevelListType{})
        }
        if t.StatsCohortYearLevel == nil {
                t.StatsCohortYearLevel = make([]StatsCohortYearLevelType, 0)
        }
        t.StatsCohortYearLevel = append(t.StatsCohortYearLevel, value)
        return t
}

func (t *StatsCohortYearLevelListType) AddNew() *StatsCohortYearLevelListType {
        if t == nil {
                t, _ = StatsCohortYearLevelListTypePointer(StatsCohortYearLevelListType{})
        }
        if t.StatsCohortYearLevel == nil {
                t.StatsCohortYearLevel = make([]StatsCohortYearLevelType, 0)
        }
        t.StatsCohortYearLevel = append(t.StatsCohortYearLevel, StatsCohortYearLevelType{})
        return t
}

func (t *StatsCohortYearLevelListType) Last() *StatsCohortYearLevelType {
  if t.StatsCohortYearLevel == nil {
    t = t.AddNew()
    }
        return &(t.StatsCohortYearLevel[len(t.StatsCohortYearLevel)-1])
}


  func (t *AGContextualQuestionListType) Append(value AGContextualQuestionType) *AGContextualQuestionListType {
    
        if t == nil {
                t, _ = AGContextualQuestionListTypePointer(AGContextualQuestionListType{})
        }
        if t.AGContextualQuestion == nil {
                t.AGContextualQuestion = make([]AGContextualQuestionType, 0)
        }
        t.AGContextualQuestion = append(t.AGContextualQuestion, value)
        return t
}

func (t *AGContextualQuestionListType) AddNew() *AGContextualQuestionListType {
        if t == nil {
                t, _ = AGContextualQuestionListTypePointer(AGContextualQuestionListType{})
        }
        if t.AGContextualQuestion == nil {
                t.AGContextualQuestion = make([]AGContextualQuestionType, 0)
        }
        t.AGContextualQuestion = append(t.AGContextualQuestion, AGContextualQuestionType{})
        return t
}

func (t *AGContextualQuestionListType) Last() *AGContextualQuestionType {
  if t.AGContextualQuestion == nil {
    t = t.AddNew()
    }
        return &(t.AGContextualQuestion[len(t.AGContextualQuestion)-1])
}


  func (t *AGRuleListType) Append(value AGRuleType) *AGRuleListType {
    
        if t == nil {
                t, _ = AGRuleListTypePointer(AGRuleListType{})
        }
        if t.AGRule == nil {
                t.AGRule = make([]AGRuleType, 0)
        }
        t.AGRule = append(t.AGRule, value)
        return t
}

func (t *AGRuleListType) AddNew() *AGRuleListType {
        if t == nil {
                t, _ = AGRuleListTypePointer(AGRuleListType{})
        }
        if t.AGRule == nil {
                t.AGRule = make([]AGRuleType, 0)
        }
        t.AGRule = append(t.AGRule, AGRuleType{})
        return t
}

func (t *AGRuleListType) Last() *AGRuleType {
  if t.AGRule == nil {
    t = t.AddNew()
    }
        return &(t.AGRule[len(t.AGRule)-1])
}


  func (t *LEAContactListType) Append(value LEAContactType) *LEAContactListType {
    
        if t == nil {
                t, _ = LEAContactListTypePointer(LEAContactListType{})
        }
        if t.LEAContact == nil {
                t.LEAContact = make([]LEAContactType, 0)
        }
        t.LEAContact = append(t.LEAContact, value)
        return t
}

func (t *LEAContactListType) AddNew() *LEAContactListType {
        if t == nil {
                t, _ = LEAContactListTypePointer(LEAContactListType{})
        }
        if t.LEAContact == nil {
                t.LEAContact = make([]LEAContactType, 0)
        }
        t.LEAContact = append(t.LEAContact, LEAContactType{})
        return t
}

func (t *LEAContactListType) Last() *LEAContactType {
  if t.LEAContact == nil {
    t = t.AddNew()
    }
        return &(t.LEAContact[len(t.LEAContact)-1])
}


  func (t *StudentSubjectChoiceListType) Append(value StudentSubjectChoiceType) *StudentSubjectChoiceListType {
    
        if t == nil {
                t, _ = StudentSubjectChoiceListTypePointer(StudentSubjectChoiceListType{})
        }
        if t.StudentSubjectChoice == nil {
                t.StudentSubjectChoice = make([]StudentSubjectChoiceType, 0)
        }
        t.StudentSubjectChoice = append(t.StudentSubjectChoice, value)
        return t
}

func (t *StudentSubjectChoiceListType) AddNew() *StudentSubjectChoiceListType {
        if t == nil {
                t, _ = StudentSubjectChoiceListTypePointer(StudentSubjectChoiceListType{})
        }
        if t.StudentSubjectChoice == nil {
                t.StudentSubjectChoice = make([]StudentSubjectChoiceType, 0)
        }
        t.StudentSubjectChoice = append(t.StudentSubjectChoice, StudentSubjectChoiceType{})
        return t
}

func (t *StudentSubjectChoiceListType) Last() *StudentSubjectChoiceType {
  if t.StudentSubjectChoice == nil {
    t = t.AddNew()
    }
        return &(t.StudentSubjectChoice[len(t.StudentSubjectChoice)-1])
}


  func (t *HouseholdContactInfoListType) Append(value HouseholdContactInfoType) *HouseholdContactInfoListType {
    
        if t == nil {
                t, _ = HouseholdContactInfoListTypePointer(HouseholdContactInfoListType{})
        }
        if t.HouseholdContactInfo == nil {
                t.HouseholdContactInfo = make([]HouseholdContactInfoType, 0)
        }
        t.HouseholdContactInfo = append(t.HouseholdContactInfo, value)
        return t
}

func (t *HouseholdContactInfoListType) AddNew() *HouseholdContactInfoListType {
        if t == nil {
                t, _ = HouseholdContactInfoListTypePointer(HouseholdContactInfoListType{})
        }
        if t.HouseholdContactInfo == nil {
                t.HouseholdContactInfo = make([]HouseholdContactInfoType, 0)
        }
        t.HouseholdContactInfo = append(t.HouseholdContactInfo, HouseholdContactInfoType{})
        return t
}

func (t *HouseholdContactInfoListType) Last() *HouseholdContactInfoType {
  if t.HouseholdContactInfo == nil {
    t = t.AddNew()
    }
        return &(t.HouseholdContactInfo[len(t.HouseholdContactInfo)-1])
}


  func (t *ApprovalsType) Append(value ApprovalType) *ApprovalsType {
    
        if t == nil {
                t, _ = ApprovalsTypePointer(ApprovalsType{})
        }
        if t.Approval == nil {
                t.Approval = make([]ApprovalType, 0)
        }
        t.Approval = append(t.Approval, value)
        return t
}

func (t *ApprovalsType) AddNew() *ApprovalsType {
        if t == nil {
                t, _ = ApprovalsTypePointer(ApprovalsType{})
        }
        if t.Approval == nil {
                t.Approval = make([]ApprovalType, 0)
        }
        t.Approval = append(t.Approval, ApprovalType{})
        return t
}

func (t *ApprovalsType) Last() *ApprovalType {
  if t.Approval == nil {
    t = t.AddNew()
    }
        return &(t.Approval[len(t.Approval)-1])
}


  func (t *AGReportingObjectResponseListType) Append(value AGReportingObjectResponseType) *AGReportingObjectResponseListType {
    
        if t == nil {
                t, _ = AGReportingObjectResponseListTypePointer(AGReportingObjectResponseListType{})
        }
        if t.AGReportingObjectResponse == nil {
                t.AGReportingObjectResponse = make([]AGReportingObjectResponseType, 0)
        }
        t.AGReportingObjectResponse = append(t.AGReportingObjectResponse, value)
        return t
}

func (t *AGReportingObjectResponseListType) AddNew() *AGReportingObjectResponseListType {
        if t == nil {
                t, _ = AGReportingObjectResponseListTypePointer(AGReportingObjectResponseListType{})
        }
        if t.AGReportingObjectResponse == nil {
                t.AGReportingObjectResponse = make([]AGReportingObjectResponseType, 0)
        }
        t.AGReportingObjectResponse = append(t.AGReportingObjectResponse, AGReportingObjectResponseType{})
        return t
}

func (t *AGReportingObjectResponseListType) Last() *AGReportingObjectResponseType {
  if t.AGReportingObjectResponse == nil {
    t = t.AddNew()
    }
        return &(t.AGReportingObjectResponse[len(t.AGReportingObjectResponse)-1])
}


  func (t *FQContextualQuestionListType) Append(value FQContextualQuestionType) *FQContextualQuestionListType {
    
        if t == nil {
                t, _ = FQContextualQuestionListTypePointer(FQContextualQuestionListType{})
        }
        if t.FQContextualQuestion == nil {
                t.FQContextualQuestion = make([]FQContextualQuestionType, 0)
        }
        t.FQContextualQuestion = append(t.FQContextualQuestion, value)
        return t
}

func (t *FQContextualQuestionListType) AddNew() *FQContextualQuestionListType {
        if t == nil {
                t, _ = FQContextualQuestionListTypePointer(FQContextualQuestionListType{})
        }
        if t.FQContextualQuestion == nil {
                t.FQContextualQuestion = make([]FQContextualQuestionType, 0)
        }
        t.FQContextualQuestion = append(t.FQContextualQuestion, FQContextualQuestionType{})
        return t
}

func (t *FQContextualQuestionListType) Last() *FQContextualQuestionType {
  if t.FQContextualQuestion == nil {
    t = t.AddNew()
    }
        return &(t.FQContextualQuestion[len(t.FQContextualQuestion)-1])
}


  func (t *NAPLANClassListType) Append(value string) *NAPLANClassListType {
    
        if t == nil {
                t, _ = NAPLANClassListTypePointer(NAPLANClassListType{})
        }
        if t.ClassCode == nil {
                t.ClassCode = make([]string, 0)
        }
        t.ClassCode = append(t.ClassCode, value)
        return t
}

func (t *NAPLANClassListType) AddNew() *NAPLANClassListType {
        if t == nil {
                t, _ = NAPLANClassListTypePointer(NAPLANClassListType{})
        }
        if t.ClassCode == nil {
                t.ClassCode = make([]string, 0)
        }
        t.ClassCode = append(t.ClassCode, "")
        return t
}

func (t *NAPLANClassListType) Last() *string {
  if t.ClassCode == nil {
    t = t.AddNew()
    }
        return &(t.ClassCode[len(t.ClassCode)-1])
}

      func (t *NAPLANClassListType) AppendString(value string) *NAPLANClassListType {
        return t.Append((string)(value))
        }

  func (t *AddressCollectionReportingListType) Append(value AddressCollectionReportingType) *AddressCollectionReportingListType {
    
        if t == nil {
                t, _ = AddressCollectionReportingListTypePointer(AddressCollectionReportingListType{})
        }
        if t.AddressCollectionReporting == nil {
                t.AddressCollectionReporting = make([]AddressCollectionReportingType, 0)
        }
        t.AddressCollectionReporting = append(t.AddressCollectionReporting, value)
        return t
}

func (t *AddressCollectionReportingListType) AddNew() *AddressCollectionReportingListType {
        if t == nil {
                t, _ = AddressCollectionReportingListTypePointer(AddressCollectionReportingListType{})
        }
        if t.AddressCollectionReporting == nil {
                t.AddressCollectionReporting = make([]AddressCollectionReportingType, 0)
        }
        t.AddressCollectionReporting = append(t.AddressCollectionReporting, AddressCollectionReportingType{})
        return t
}

func (t *AddressCollectionReportingListType) Last() *AddressCollectionReportingType {
  if t.AddressCollectionReporting == nil {
    t = t.AddNew()
    }
        return &(t.AddressCollectionReporting[len(t.AddressCollectionReporting)-1])
}


  func (t *LifeCycleType_ModificationHistory) Append(value LifeCycleType_Modified) *LifeCycleType_ModificationHistory {
    
        if t == nil {
                t, _ = LifeCycleType_ModificationHistoryPointer(LifeCycleType_ModificationHistory{})
        }
        if t.Modified == nil {
                t.Modified = make([]LifeCycleType_Modified, 0)
        }
        t.Modified = append(t.Modified, value)
        return t
}

func (t *LifeCycleType_ModificationHistory) AddNew() *LifeCycleType_ModificationHistory {
        if t == nil {
                t, _ = LifeCycleType_ModificationHistoryPointer(LifeCycleType_ModificationHistory{})
        }
        if t.Modified == nil {
                t.Modified = make([]LifeCycleType_Modified, 0)
        }
        t.Modified = append(t.Modified, LifeCycleType_Modified{})
        return t
}

func (t *LifeCycleType_ModificationHistory) Last() *LifeCycleType_Modified {
  if t.Modified == nil {
    t = t.AddNew()
    }
        return &(t.Modified[len(t.Modified)-1])
}


  func (t *StudentGroupListType) Append(value StudentGroupType) *StudentGroupListType {
    
        if t == nil {
                t, _ = StudentGroupListTypePointer(StudentGroupListType{})
        }
        if t.StudentGroup == nil {
                t.StudentGroup = make([]StudentGroupType, 0)
        }
        t.StudentGroup = append(t.StudentGroup, value)
        return t
}

func (t *StudentGroupListType) AddNew() *StudentGroupListType {
        if t == nil {
                t, _ = StudentGroupListTypePointer(StudentGroupListType{})
        }
        if t.StudentGroup == nil {
                t.StudentGroup = make([]StudentGroupType, 0)
        }
        t.StudentGroup = append(t.StudentGroup, StudentGroupType{})
        return t
}

func (t *StudentGroupListType) Last() *StudentGroupType {
  if t.StudentGroup == nil {
    t = t.AddNew()
    }
        return &(t.StudentGroup[len(t.StudentGroup)-1])
}


  func (t *OtherNamesType) Append(value OtherNameType) *OtherNamesType {
    
        if t == nil {
                t, _ = OtherNamesTypePointer(OtherNamesType{})
        }
        if t.Name == nil {
                t.Name = make([]OtherNameType, 0)
        }
        t.Name = append(t.Name, value)
        return t
}

func (t *OtherNamesType) AddNew() *OtherNamesType {
        if t == nil {
                t, _ = OtherNamesTypePointer(OtherNamesType{})
        }
        if t.Name == nil {
                t.Name = make([]OtherNameType, 0)
        }
        t.Name = append(t.Name, OtherNameType{})
        return t
}

func (t *OtherNamesType) Last() *OtherNameType {
  if t.Name == nil {
    t = t.AddNew()
    }
        return &(t.Name[len(t.Name)-1])
}


  func (t *AccountCodeListType) Append(value string) *AccountCodeListType {
    
        if t == nil {
                t, _ = AccountCodeListTypePointer(AccountCodeListType{})
        }
        if t.AccountCode == nil {
                t.AccountCode = make([]string, 0)
        }
        t.AccountCode = append(t.AccountCode, value)
        return t
}

func (t *AccountCodeListType) AddNew() *AccountCodeListType {
        if t == nil {
                t, _ = AccountCodeListTypePointer(AccountCodeListType{})
        }
        if t.AccountCode == nil {
                t.AccountCode = make([]string, 0)
        }
        t.AccountCode = append(t.AccountCode, "")
        return t
}

func (t *AccountCodeListType) Last() *string {
  if t.AccountCode == nil {
    t = t.AddNew()
    }
        return &(t.AccountCode[len(t.AccountCode)-1])
}

      func (t *AccountCodeListType) AppendString(value string) *AccountCodeListType {
        return t.Append((string)(value))
        }

  func (t *VisaSubClassListType) Append(value VisaSubClassType) *VisaSubClassListType {
    
        if t == nil {
                t, _ = VisaSubClassListTypePointer(VisaSubClassListType{})
        }
        if t.VisaSubClass == nil {
                t.VisaSubClass = make([]VisaSubClassType, 0)
        }
        t.VisaSubClass = append(t.VisaSubClass, value)
        return t
}

func (t *VisaSubClassListType) AddNew() *VisaSubClassListType {
        if t == nil {
                t, _ = VisaSubClassListTypePointer(VisaSubClassListType{})
        }
        if t.VisaSubClass == nil {
                t.VisaSubClass = make([]VisaSubClassType, 0)
        }
        t.VisaSubClass = append(t.VisaSubClass, VisaSubClassType{})
        return t
}

func (t *VisaSubClassListType) Last() *VisaSubClassType {
  if t.VisaSubClass == nil {
    t = t.AddNew()
    }
        return &(t.VisaSubClass[len(t.VisaSubClass)-1])
}


  func (t *ResourceUsage_ResourceReportColumnList) Append(value ResourceUsage_ResourceReportColumn) *ResourceUsage_ResourceReportColumnList {
    
        if t == nil {
                t, _ = ResourceUsage_ResourceReportColumnListPointer(ResourceUsage_ResourceReportColumnList{})
        }
        if t.ResourceReportColumn == nil {
                t.ResourceReportColumn = make([]ResourceUsage_ResourceReportColumn, 0)
        }
        t.ResourceReportColumn = append(t.ResourceReportColumn, value)
        return t
}

func (t *ResourceUsage_ResourceReportColumnList) AddNew() *ResourceUsage_ResourceReportColumnList {
        if t == nil {
                t, _ = ResourceUsage_ResourceReportColumnListPointer(ResourceUsage_ResourceReportColumnList{})
        }
        if t.ResourceReportColumn == nil {
                t.ResourceReportColumn = make([]ResourceUsage_ResourceReportColumn, 0)
        }
        t.ResourceReportColumn = append(t.ResourceReportColumn, ResourceUsage_ResourceReportColumn{})
        return t
}

func (t *ResourceUsage_ResourceReportColumnList) Last() *ResourceUsage_ResourceReportColumn {
  if t.ResourceReportColumn == nil {
    t = t.AddNew()
    }
        return &(t.ResourceReportColumn[len(t.ResourceReportColumn)-1])
}


  func (t *SystemRole_RoleList) Append(value SystemRole_Role) *SystemRole_RoleList {
    
        if t == nil {
                t, _ = SystemRole_RoleListPointer(SystemRole_RoleList{})
        }
        if t.Role == nil {
                t.Role = make([]SystemRole_Role, 0)
        }
        t.Role = append(t.Role, value)
        return t
}

func (t *SystemRole_RoleList) AddNew() *SystemRole_RoleList {
        if t == nil {
                t, _ = SystemRole_RoleListPointer(SystemRole_RoleList{})
        }
        if t.Role == nil {
                t.Role = make([]SystemRole_Role, 0)
        }
        t.Role = append(t.Role, SystemRole_Role{})
        return t
}

func (t *SystemRole_RoleList) Last() *SystemRole_Role {
  if t.Role == nil {
    t = t.AddNew()
    }
        return &(t.Role[len(t.Role)-1])
}


  func (t *FollowUpActionListType) Append(value FollowUpActionType) *FollowUpActionListType {
    
        if t == nil {
                t, _ = FollowUpActionListTypePointer(FollowUpActionListType{})
        }
        if t.FollowUpAction == nil {
                t.FollowUpAction = make([]FollowUpActionType, 0)
        }
        t.FollowUpAction = append(t.FollowUpAction, value)
        return t
}

func (t *FollowUpActionListType) AddNew() *FollowUpActionListType {
        if t == nil {
                t, _ = FollowUpActionListTypePointer(FollowUpActionListType{})
        }
        if t.FollowUpAction == nil {
                t.FollowUpAction = make([]FollowUpActionType, 0)
        }
        t.FollowUpAction = append(t.FollowUpAction, FollowUpActionType{})
        return t
}

func (t *FollowUpActionListType) Last() *FollowUpActionType {
  if t.FollowUpAction == nil {
    t = t.AddNew()
    }
        return &(t.FollowUpAction[len(t.FollowUpAction)-1])
}


  func (t *ScoreDescriptionListType) Append(value ScoreDescriptionType) *ScoreDescriptionListType {
    
        if t == nil {
                t, _ = ScoreDescriptionListTypePointer(ScoreDescriptionListType{})
        }
        if t.ScoreDescription == nil {
                t.ScoreDescription = make([]ScoreDescriptionType, 0)
        }
        t.ScoreDescription = append(t.ScoreDescription, value)
        return t
}

func (t *ScoreDescriptionListType) AddNew() *ScoreDescriptionListType {
        if t == nil {
                t, _ = ScoreDescriptionListTypePointer(ScoreDescriptionListType{})
        }
        if t.ScoreDescription == nil {
                t.ScoreDescription = make([]ScoreDescriptionType, 0)
        }
        t.ScoreDescription = append(t.ScoreDescription, ScoreDescriptionType{})
        return t
}

func (t *ScoreDescriptionListType) Last() *ScoreDescriptionType {
  if t.ScoreDescription == nil {
    t = t.AddNew()
    }
        return &(t.ScoreDescription[len(t.ScoreDescription)-1])
}


  func (t *ComponentsType) Append(value ComponentType) *ComponentsType {
    
        if t == nil {
                t, _ = ComponentsTypePointer(ComponentsType{})
        }
        if t.Component == nil {
                t.Component = make([]ComponentType, 0)
        }
        t.Component = append(t.Component, value)
        return t
}

func (t *ComponentsType) AddNew() *ComponentsType {
        if t == nil {
                t, _ = ComponentsTypePointer(ComponentsType{})
        }
        if t.Component == nil {
                t.Component = make([]ComponentType, 0)
        }
        t.Component = append(t.Component, ComponentType{})
        return t
}

func (t *ComponentsType) Last() *ComponentType {
  if t.Component == nil {
    t = t.AddNew()
    }
        return &(t.Component[len(t.Component)-1])
}


  func (t *ACStrandAreaListType) Append(value ACStrandSubjectAreaType) *ACStrandAreaListType {
    
        if t == nil {
                t, _ = ACStrandAreaListTypePointer(ACStrandAreaListType{})
        }
        if t.ACStrandSubjectArea == nil {
                t.ACStrandSubjectArea = make([]ACStrandSubjectAreaType, 0)
        }
        t.ACStrandSubjectArea = append(t.ACStrandSubjectArea, value)
        return t
}

func (t *ACStrandAreaListType) AddNew() *ACStrandAreaListType {
        if t == nil {
                t, _ = ACStrandAreaListTypePointer(ACStrandAreaListType{})
        }
        if t.ACStrandSubjectArea == nil {
                t.ACStrandSubjectArea = make([]ACStrandSubjectAreaType, 0)
        }
        t.ACStrandSubjectArea = append(t.ACStrandSubjectArea, ACStrandSubjectAreaType{})
        return t
}

func (t *ACStrandAreaListType) Last() *ACStrandSubjectAreaType {
  if t.ACStrandSubjectArea == nil {
    t = t.AddNew()
    }
        return &(t.ACStrandSubjectArea[len(t.ACStrandSubjectArea)-1])
}


  func (t *PlausibleScaledValueListType) Append(value float64) *PlausibleScaledValueListType {
    
        if t == nil {
                t, _ = PlausibleScaledValueListTypePointer(PlausibleScaledValueListType{})
        }
        if t.PlausibleScaledValue == nil {
                t.PlausibleScaledValue = make([]float64, 0)
        }
        t.PlausibleScaledValue = append(t.PlausibleScaledValue, value)
        return t
}

func (t *PlausibleScaledValueListType) AddNew() *PlausibleScaledValueListType {
        if t == nil {
                t, _ = PlausibleScaledValueListTypePointer(PlausibleScaledValueListType{})
        }
        if t.PlausibleScaledValue == nil {
                t.PlausibleScaledValue = make([]float64, 0)
        }
        t.PlausibleScaledValue = append(t.PlausibleScaledValue, 0)
        return t
}

func (t *PlausibleScaledValueListType) Last() *float64 {
  if t.PlausibleScaledValue == nil {
    t = t.AddNew()
    }
        return &(t.PlausibleScaledValue[len(t.PlausibleScaledValue)-1])
}


  func (t *WithdrawalTimeListType) Append(value WithdrawalType) *WithdrawalTimeListType {
    
        if t == nil {
                t, _ = WithdrawalTimeListTypePointer(WithdrawalTimeListType{})
        }
        if t.Withdrawal == nil {
                t.Withdrawal = make([]WithdrawalType, 0)
        }
        t.Withdrawal = append(t.Withdrawal, value)
        return t
}

func (t *WithdrawalTimeListType) AddNew() *WithdrawalTimeListType {
        if t == nil {
                t, _ = WithdrawalTimeListTypePointer(WithdrawalTimeListType{})
        }
        if t.Withdrawal == nil {
                t.Withdrawal = make([]WithdrawalType, 0)
        }
        t.Withdrawal = append(t.Withdrawal, WithdrawalType{})
        return t
}

func (t *WithdrawalTimeListType) Last() *WithdrawalType {
  if t.Withdrawal == nil {
    t = t.AddNew()
    }
        return &(t.Withdrawal[len(t.Withdrawal)-1])
}


  func (t *OrganizationsType) Append(value string) *OrganizationsType {
    
        if t == nil {
                t, _ = OrganizationsTypePointer(OrganizationsType{})
        }
        if t.Organization == nil {
                t.Organization = make([]string, 0)
        }
        t.Organization = append(t.Organization, value)
        return t
}

func (t *OrganizationsType) AddNew() *OrganizationsType {
        if t == nil {
                t, _ = OrganizationsTypePointer(OrganizationsType{})
        }
        if t.Organization == nil {
                t.Organization = make([]string, 0)
        }
        t.Organization = append(t.Organization, "")
        return t
}

func (t *OrganizationsType) Last() *string {
  if t.Organization == nil {
    t = t.AddNew()
    }
        return &(t.Organization[len(t.Organization)-1])
}

      func (t *OrganizationsType) AppendString(value string) *OrganizationsType {
        return t.Append((string)(value))
        }

  func (t *LibraryTransactionListType) Append(value LibraryTransactionType) *LibraryTransactionListType {
    
        if t == nil {
                t, _ = LibraryTransactionListTypePointer(LibraryTransactionListType{})
        }
        if t.Transaction == nil {
                t.Transaction = make([]LibraryTransactionType, 0)
        }
        t.Transaction = append(t.Transaction, value)
        return t
}

func (t *LibraryTransactionListType) AddNew() *LibraryTransactionListType {
        if t == nil {
                t, _ = LibraryTransactionListTypePointer(LibraryTransactionListType{})
        }
        if t.Transaction == nil {
                t.Transaction = make([]LibraryTransactionType, 0)
        }
        t.Transaction = append(t.Transaction, LibraryTransactionType{})
        return t
}

func (t *LibraryTransactionListType) Last() *LibraryTransactionType {
  if t.Transaction == nil {
    t = t.AddNew()
    }
        return &(t.Transaction[len(t.Transaction)-1])
}


  func (t *TimeElementType_SpanGaps) Append(value TimeElementType_SpanGap) *TimeElementType_SpanGaps {
    
        if t == nil {
                t, _ = TimeElementType_SpanGapsPointer(TimeElementType_SpanGaps{})
        }
        if t.SpanGap == nil {
                t.SpanGap = make([]TimeElementType_SpanGap, 0)
        }
        t.SpanGap = append(t.SpanGap, value)
        return t
}

func (t *TimeElementType_SpanGaps) AddNew() *TimeElementType_SpanGaps {
        if t == nil {
                t, _ = TimeElementType_SpanGapsPointer(TimeElementType_SpanGaps{})
        }
        if t.SpanGap == nil {
                t.SpanGap = make([]TimeElementType_SpanGap, 0)
        }
        t.SpanGap = append(t.SpanGap, TimeElementType_SpanGap{})
        return t
}

func (t *TimeElementType_SpanGaps) Last() *TimeElementType_SpanGap {
  if t.SpanGap == nil {
    t = t.AddNew()
    }
        return &(t.SpanGap[len(t.SpanGap)-1])
}


  func (t *CodeFrameTestItemListType) Append(value CodeFrameTestItemType) *CodeFrameTestItemListType {
    
        if t == nil {
                t, _ = CodeFrameTestItemListTypePointer(CodeFrameTestItemListType{})
        }
        if t.TestItem == nil {
                t.TestItem = make([]CodeFrameTestItemType, 0)
        }
        t.TestItem = append(t.TestItem, value)
        return t
}

func (t *CodeFrameTestItemListType) AddNew() *CodeFrameTestItemListType {
        if t == nil {
                t, _ = CodeFrameTestItemListTypePointer(CodeFrameTestItemListType{})
        }
        if t.TestItem == nil {
                t.TestItem = make([]CodeFrameTestItemType, 0)
        }
        t.TestItem = append(t.TestItem, CodeFrameTestItemType{})
        return t
}

func (t *CodeFrameTestItemListType) Last() *CodeFrameTestItemType {
  if t.TestItem == nil {
    t = t.AddNew()
    }
        return &(t.TestItem[len(t.TestItem)-1])
}


  func (t *LearningResourcesType) Append(value string) *LearningResourcesType {
    
        if t == nil {
                t, _ = LearningResourcesTypePointer(LearningResourcesType{})
        }
        if t.LearningResourceRefId == nil {
                t.LearningResourceRefId = make([]string, 0)
        }
        t.LearningResourceRefId = append(t.LearningResourceRefId, value)
        return t
}

func (t *LearningResourcesType) AddNew() *LearningResourcesType {
        if t == nil {
                t, _ = LearningResourcesTypePointer(LearningResourcesType{})
        }
        if t.LearningResourceRefId == nil {
                t.LearningResourceRefId = make([]string, 0)
        }
        t.LearningResourceRefId = append(t.LearningResourceRefId, "")
        return t
}

func (t *LearningResourcesType) Last() *string {
  if t.LearningResourceRefId == nil {
    t = t.AddNew()
    }
        return &(t.LearningResourceRefId[len(t.LearningResourceRefId)-1])
}

      func (t *LearningResourcesType) AppendString(value string) *LearningResourcesType {
        return t.Append((string)(value))
        }

  func (t *FinancialAccountRefIdListType) Append(value string) *FinancialAccountRefIdListType {
    
        if t == nil {
                t, _ = FinancialAccountRefIdListTypePointer(FinancialAccountRefIdListType{})
        }
        if t.FinancialAccountRefId == nil {
                t.FinancialAccountRefId = make([]string, 0)
        }
        t.FinancialAccountRefId = append(t.FinancialAccountRefId, value)
        return t
}

func (t *FinancialAccountRefIdListType) AddNew() *FinancialAccountRefIdListType {
        if t == nil {
                t, _ = FinancialAccountRefIdListTypePointer(FinancialAccountRefIdListType{})
        }
        if t.FinancialAccountRefId == nil {
                t.FinancialAccountRefId = make([]string, 0)
        }
        t.FinancialAccountRefId = append(t.FinancialAccountRefId, "")
        return t
}

func (t *FinancialAccountRefIdListType) Last() *string {
  if t.FinancialAccountRefId == nil {
    t = t.AddNew()
    }
        return &(t.FinancialAccountRefId[len(t.FinancialAccountRefId)-1])
}

      func (t *FinancialAccountRefIdListType) AppendString(value string) *FinancialAccountRefIdListType {
        return t.Append((string)(value))
        }

  func (t *OtherCodeListType) Append(value OtherCodeListType_OtherCode) *OtherCodeListType {
    
        if t == nil {
                t, _ = OtherCodeListTypePointer(OtherCodeListType{})
        }
        if t.OtherCode == nil {
                t.OtherCode = make([]OtherCodeListType_OtherCode, 0)
        }
        t.OtherCode = append(t.OtherCode, value)
        return t
}

func (t *OtherCodeListType) AddNew() *OtherCodeListType {
        if t == nil {
                t, _ = OtherCodeListTypePointer(OtherCodeListType{})
        }
        if t.OtherCode == nil {
                t.OtherCode = make([]OtherCodeListType_OtherCode, 0)
        }
        t.OtherCode = append(t.OtherCode, OtherCodeListType_OtherCode{})
        return t
}

func (t *OtherCodeListType) Last() *OtherCodeListType_OtherCode {
  if t.OtherCode == nil {
    t = t.AddNew()
    }
        return &(t.OtherCode[len(t.OtherCode)-1])
}


  func (t *SystemRole_RoleScopeList) Append(value SystemRole_RoleScope) *SystemRole_RoleScopeList {
    
        if t == nil {
                t, _ = SystemRole_RoleScopeListPointer(SystemRole_RoleScopeList{})
        }
        if t.RoleScope == nil {
                t.RoleScope = make([]SystemRole_RoleScope, 0)
        }
        t.RoleScope = append(t.RoleScope, value)
        return t
}

func (t *SystemRole_RoleScopeList) AddNew() *SystemRole_RoleScopeList {
        if t == nil {
                t, _ = SystemRole_RoleScopeListPointer(SystemRole_RoleScopeList{})
        }
        if t.RoleScope == nil {
                t.RoleScope = make([]SystemRole_RoleScope, 0)
        }
        t.RoleScope = append(t.RoleScope, SystemRole_RoleScope{})
        return t
}

func (t *SystemRole_RoleScopeList) Last() *SystemRole_RoleScope {
  if t.RoleScope == nil {
    t = t.AddNew()
    }
        return &(t.RoleScope[len(t.RoleScope)-1])
}


  func (t *LearningStandardsType) Append(value string) *LearningStandardsType {
    
        if t == nil {
                t, _ = LearningStandardsTypePointer(LearningStandardsType{})
        }
        if t.LearningStandardItemRefId == nil {
                t.LearningStandardItemRefId = make([]string, 0)
        }
        t.LearningStandardItemRefId = append(t.LearningStandardItemRefId, value)
        return t
}

func (t *LearningStandardsType) AddNew() *LearningStandardsType {
        if t == nil {
                t, _ = LearningStandardsTypePointer(LearningStandardsType{})
        }
        if t.LearningStandardItemRefId == nil {
                t.LearningStandardItemRefId = make([]string, 0)
        }
        t.LearningStandardItemRefId = append(t.LearningStandardItemRefId, "")
        return t
}

func (t *LearningStandardsType) Last() *string {
  if t.LearningStandardItemRefId == nil {
    t = t.AddNew()
    }
        return &(t.LearningStandardItemRefId[len(t.LearningStandardItemRefId)-1])
}

      func (t *LearningStandardsType) AppendString(value string) *LearningStandardsType {
        return t.Append((string)(value))
        }

  func (t *TimeTableDayListType) Append(value TimeTableDayType) *TimeTableDayListType {
    
        if t == nil {
                t, _ = TimeTableDayListTypePointer(TimeTableDayListType{})
        }
        if t.TimeTableDay == nil {
                t.TimeTableDay = make([]TimeTableDayType, 0)
        }
        t.TimeTableDay = append(t.TimeTableDay, value)
        return t
}

func (t *TimeTableDayListType) AddNew() *TimeTableDayListType {
        if t == nil {
                t, _ = TimeTableDayListTypePointer(TimeTableDayListType{})
        }
        if t.TimeTableDay == nil {
                t.TimeTableDay = make([]TimeTableDayType, 0)
        }
        t.TimeTableDay = append(t.TimeTableDay, TimeTableDayType{})
        return t
}

func (t *TimeTableDayListType) Last() *TimeTableDayType {
  if t.TimeTableDay == nil {
    t = t.AddNew()
    }
        return &(t.TimeTableDay[len(t.TimeTableDay)-1])
}


  func (t *LearningStandardsDocumentType) Append(value string) *LearningStandardsDocumentType {
    
        if t == nil {
                t, _ = LearningStandardsDocumentTypePointer(LearningStandardsDocumentType{})
        }
        if t.LearningStandardDocumentRefId == nil {
                t.LearningStandardDocumentRefId = make([]string, 0)
        }
        t.LearningStandardDocumentRefId = append(t.LearningStandardDocumentRefId, value)
        return t
}

func (t *LearningStandardsDocumentType) AddNew() *LearningStandardsDocumentType {
        if t == nil {
                t, _ = LearningStandardsDocumentTypePointer(LearningStandardsDocumentType{})
        }
        if t.LearningStandardDocumentRefId == nil {
                t.LearningStandardDocumentRefId = make([]string, 0)
        }
        t.LearningStandardDocumentRefId = append(t.LearningStandardDocumentRefId, "")
        return t
}

func (t *LearningStandardsDocumentType) Last() *string {
  if t.LearningStandardDocumentRefId == nil {
    t = t.AddNew()
    }
        return &(t.LearningStandardDocumentRefId[len(t.LearningStandardDocumentRefId)-1])
}

      func (t *LearningStandardsDocumentType) AppendString(value string) *LearningStandardsDocumentType {
        return t.Append((string)(value))
        }

  func (t *IdentityAssertionsType) Append(value IdentityAssertionsType_IdentityAssertion) *IdentityAssertionsType {
    
        if t == nil {
                t, _ = IdentityAssertionsTypePointer(IdentityAssertionsType{})
        }
        if t.IdentityAssertion == nil {
                t.IdentityAssertion = make([]IdentityAssertionsType_IdentityAssertion, 0)
        }
        t.IdentityAssertion = append(t.IdentityAssertion, value)
        return t
}

func (t *IdentityAssertionsType) AddNew() *IdentityAssertionsType {
        if t == nil {
                t, _ = IdentityAssertionsTypePointer(IdentityAssertionsType{})
        }
        if t.IdentityAssertion == nil {
                t.IdentityAssertion = make([]IdentityAssertionsType_IdentityAssertion, 0)
        }
        t.IdentityAssertion = append(t.IdentityAssertion, IdentityAssertionsType_IdentityAssertion{})
        return t
}

func (t *IdentityAssertionsType) Last() *IdentityAssertionsType_IdentityAssertion {
  if t.IdentityAssertion == nil {
    t = t.AddNew()
    }
        return &(t.IdentityAssertion[len(t.IdentityAssertion)-1])
}


  func (t *RecognitionListType) Append(value string) *RecognitionListType {
    
        if t == nil {
                t, _ = RecognitionListTypePointer(RecognitionListType{})
        }
        if t.Recognition == nil {
                t.Recognition = make([]string, 0)
        }
        t.Recognition = append(t.Recognition, value)
        return t
}

func (t *RecognitionListType) AddNew() *RecognitionListType {
        if t == nil {
                t, _ = RecognitionListTypePointer(RecognitionListType{})
        }
        if t.Recognition == nil {
                t.Recognition = make([]string, 0)
        }
        t.Recognition = append(t.Recognition, "")
        return t
}

func (t *RecognitionListType) Last() *string {
  if t.Recognition == nil {
    t = t.AddNew()
    }
        return &(t.Recognition[len(t.Recognition)-1])
}

      func (t *RecognitionListType) AppendString(value string) *RecognitionListType {
        return t.Append((string)(value))
        }

  func (t *CountryList2Type) Append(value CountryType) *CountryList2Type {
    
        if t == nil {
                t, _ = CountryList2TypePointer(CountryList2Type{})
        }
        if t.CountryOfResidency == nil {
                t.CountryOfResidency = make([]CountryType, 0)
        }
        t.CountryOfResidency = append(t.CountryOfResidency, value)
        return t
}

func (t *CountryList2Type) AddNew() *CountryList2Type {
        if t == nil {
                t, _ = CountryList2TypePointer(CountryList2Type{})
        }
        if t.CountryOfResidency == nil {
                t.CountryOfResidency = make([]CountryType, 0)
        }
        t.CountryOfResidency = append(t.CountryOfResidency, "")
        return t
}

func (t *CountryList2Type) Last() *CountryType {
  if t.CountryOfResidency == nil {
    t = t.AddNew()
    }
        return &(t.CountryOfResidency[len(t.CountryOfResidency)-1])
}

      func (t *CountryList2Type) AppendString(value string) *CountryList2Type {
        return t.Append((CountryType)(value))
        }

  func (t *NAPTestItemListType) Append(value NAPTestItem2Type) *NAPTestItemListType {
    
        if t == nil {
                t, _ = NAPTestItemListTypePointer(NAPTestItemListType{})
        }
        if t.TestItem == nil {
                t.TestItem = make([]NAPTestItem2Type, 0)
        }
        t.TestItem = append(t.TestItem, value)
        return t
}

func (t *NAPTestItemListType) AddNew() *NAPTestItemListType {
        if t == nil {
                t, _ = NAPTestItemListTypePointer(NAPTestItemListType{})
        }
        if t.TestItem == nil {
                t.TestItem = make([]NAPTestItem2Type, 0)
        }
        t.TestItem = append(t.TestItem, NAPTestItem2Type{})
        return t
}

func (t *NAPTestItemListType) Last() *NAPTestItem2Type {
  if t.TestItem == nil {
    t = t.AddNew()
    }
        return &(t.TestItem[len(t.TestItem)-1])
}


  func (t *WellbeingEventSubCategoryListType) Append(value string) *WellbeingEventSubCategoryListType {
    
        if t == nil {
                t, _ = WellbeingEventSubCategoryListTypePointer(WellbeingEventSubCategoryListType{})
        }
        if t.WellbeingEventSubCategory == nil {
                t.WellbeingEventSubCategory = make([]string, 0)
        }
        t.WellbeingEventSubCategory = append(t.WellbeingEventSubCategory, value)
        return t
}

func (t *WellbeingEventSubCategoryListType) AddNew() *WellbeingEventSubCategoryListType {
        if t == nil {
                t, _ = WellbeingEventSubCategoryListTypePointer(WellbeingEventSubCategoryListType{})
        }
        if t.WellbeingEventSubCategory == nil {
                t.WellbeingEventSubCategory = make([]string, 0)
        }
        t.WellbeingEventSubCategory = append(t.WellbeingEventSubCategory, "")
        return t
}

func (t *WellbeingEventSubCategoryListType) Last() *string {
  if t.WellbeingEventSubCategory == nil {
    t = t.AddNew()
    }
        return &(t.WellbeingEventSubCategory[len(t.WellbeingEventSubCategory)-1])
}

      func (t *WellbeingEventSubCategoryListType) AppendString(value string) *WellbeingEventSubCategoryListType {
        return t.Append((string)(value))
        }

  func (t *AttendanceTimesType) Append(value AttendanceTimeType) *AttendanceTimesType {
    
        if t == nil {
                t, _ = AttendanceTimesTypePointer(AttendanceTimesType{})
        }
        if t.AttendanceTime == nil {
                t.AttendanceTime = make([]AttendanceTimeType, 0)
        }
        t.AttendanceTime = append(t.AttendanceTime, value)
        return t
}

func (t *AttendanceTimesType) AddNew() *AttendanceTimesType {
        if t == nil {
                t, _ = AttendanceTimesTypePointer(AttendanceTimesType{})
        }
        if t.AttendanceTime == nil {
                t.AttendanceTime = make([]AttendanceTimeType, 0)
        }
        t.AttendanceTime = append(t.AttendanceTime, AttendanceTimeType{})
        return t
}

func (t *AttendanceTimesType) Last() *AttendanceTimeType {
  if t.AttendanceTime == nil {
    t = t.AddNew()
    }
        return &(t.AttendanceTime[len(t.AttendanceTime)-1])
}


  func (t *CharacteristicsType) Append(value string) *CharacteristicsType {
    
        if t == nil {
                t, _ = CharacteristicsTypePointer(CharacteristicsType{})
        }
        if t.AggregateCharacteristicInfoRefId == nil {
                t.AggregateCharacteristicInfoRefId = make([]string, 0)
        }
        t.AggregateCharacteristicInfoRefId = append(t.AggregateCharacteristicInfoRefId, value)
        return t
}

func (t *CharacteristicsType) AddNew() *CharacteristicsType {
        if t == nil {
                t, _ = CharacteristicsTypePointer(CharacteristicsType{})
        }
        if t.AggregateCharacteristicInfoRefId == nil {
                t.AggregateCharacteristicInfoRefId = make([]string, 0)
        }
        t.AggregateCharacteristicInfoRefId = append(t.AggregateCharacteristicInfoRefId, "")
        return t
}

func (t *CharacteristicsType) Last() *string {
  if t.AggregateCharacteristicInfoRefId == nil {
    t = t.AddNew()
    }
        return &(t.AggregateCharacteristicInfoRefId[len(t.AggregateCharacteristicInfoRefId)-1])
}

      func (t *CharacteristicsType) AppendString(value string) *CharacteristicsType {
        return t.Append((string)(value))
        }

  func (t *SchoolFocusListType) Append(value AUCodeSetsSchoolFocusCodeType) *SchoolFocusListType {
    
        if t == nil {
                t, _ = SchoolFocusListTypePointer(SchoolFocusListType{})
        }
        if t.SchoolFocus == nil {
                t.SchoolFocus = make([]AUCodeSetsSchoolFocusCodeType, 0)
        }
        t.SchoolFocus = append(t.SchoolFocus, value)
        return t
}

func (t *SchoolFocusListType) AddNew() *SchoolFocusListType {
        if t == nil {
                t, _ = SchoolFocusListTypePointer(SchoolFocusListType{})
        }
        if t.SchoolFocus == nil {
                t.SchoolFocus = make([]AUCodeSetsSchoolFocusCodeType, 0)
        }
        t.SchoolFocus = append(t.SchoolFocus, "")
        return t
}

func (t *SchoolFocusListType) Last() *AUCodeSetsSchoolFocusCodeType {
  if t.SchoolFocus == nil {
    t = t.AddNew()
    }
        return &(t.SchoolFocus[len(t.SchoolFocus)-1])
}

      func (t *SchoolFocusListType) AppendString(value string) *SchoolFocusListType {
        return t.Append((AUCodeSetsSchoolFocusCodeType)(value))
        }

  func (t *SubjectAreaListType) Append(value SubjectAreaType) *SubjectAreaListType {
    
        if t == nil {
                t, _ = SubjectAreaListTypePointer(SubjectAreaListType{})
        }
        if t.SubjectArea == nil {
                t.SubjectArea = make([]SubjectAreaType, 0)
        }
        t.SubjectArea = append(t.SubjectArea, value)
        return t
}

func (t *SubjectAreaListType) AddNew() *SubjectAreaListType {
        if t == nil {
                t, _ = SubjectAreaListTypePointer(SubjectAreaListType{})
        }
        if t.SubjectArea == nil {
                t.SubjectArea = make([]SubjectAreaType, 0)
        }
        t.SubjectArea = append(t.SubjectArea, SubjectAreaType{})
        return t
}

func (t *SubjectAreaListType) Last() *SubjectAreaType {
  if t.SubjectArea == nil {
    t = t.AddNew()
    }
        return &(t.SubjectArea[len(t.SubjectArea)-1])
}


  func (t *SchoolProgramListType) Append(value SchoolProgramType) *SchoolProgramListType {
    
        if t == nil {
                t, _ = SchoolProgramListTypePointer(SchoolProgramListType{})
        }
        if t.Program == nil {
                t.Program = make([]SchoolProgramType, 0)
        }
        t.Program = append(t.Program, value)
        return t
}

func (t *SchoolProgramListType) AddNew() *SchoolProgramListType {
        if t == nil {
                t, _ = SchoolProgramListTypePointer(SchoolProgramListType{})
        }
        if t.Program == nil {
                t.Program = make([]SchoolProgramType, 0)
        }
        t.Program = append(t.Program, SchoolProgramType{})
        return t
}

func (t *SchoolProgramListType) Last() *SchoolProgramType {
  if t.Program == nil {
    t = t.AddNew()
    }
        return &(t.Program[len(t.Program)-1])
}


  func (t *SourceObjectsType) Append(value SourceObjectsType_SourceObject) *SourceObjectsType {
    
        if t == nil {
                t, _ = SourceObjectsTypePointer(SourceObjectsType{})
        }
        if t.SourceObject == nil {
                t.SourceObject = make([]SourceObjectsType_SourceObject, 0)
        }
        t.SourceObject = append(t.SourceObject, value)
        return t
}

func (t *SourceObjectsType) AddNew() *SourceObjectsType {
        if t == nil {
                t, _ = SourceObjectsTypePointer(SourceObjectsType{})
        }
        if t.SourceObject == nil {
                t.SourceObject = make([]SourceObjectsType_SourceObject, 0)
        }
        t.SourceObject = append(t.SourceObject, SourceObjectsType_SourceObject{})
        return t
}

func (t *SourceObjectsType) Last() *SourceObjectsType_SourceObject {
  if t.SourceObject == nil {
    t = t.AddNew()
    }
        return &(t.SourceObject[len(t.SourceObject)-1])
}


  func (t *StudentListType) Append(value TeachingGroupStudentType) *StudentListType {
    
        if t == nil {
                t, _ = StudentListTypePointer(StudentListType{})
        }
        if t.TeachingGroupStudent == nil {
                t.TeachingGroupStudent = make([]TeachingGroupStudentType, 0)
        }
        t.TeachingGroupStudent = append(t.TeachingGroupStudent, value)
        return t
}

func (t *StudentListType) AddNew() *StudentListType {
        if t == nil {
                t, _ = StudentListTypePointer(StudentListType{})
        }
        if t.TeachingGroupStudent == nil {
                t.TeachingGroupStudent = make([]TeachingGroupStudentType, 0)
        }
        t.TeachingGroupStudent = append(t.TeachingGroupStudent, TeachingGroupStudentType{})
        return t
}

func (t *StudentListType) Last() *TeachingGroupStudentType {
  if t.TeachingGroupStudent == nil {
    t = t.AddNew()
    }
        return &(t.TeachingGroupStudent[len(t.TeachingGroupStudent)-1])
}


  func (t *LifeCycleType_TimeElements) Append(value TimeElementType) *LifeCycleType_TimeElements {
    
        if t == nil {
                t, _ = LifeCycleType_TimeElementsPointer(LifeCycleType_TimeElements{})
        }
        if t.TimeElement == nil {
                t.TimeElement = make([]TimeElementType, 0)
        }
        t.TimeElement = append(t.TimeElement, value)
        return t
}

func (t *LifeCycleType_TimeElements) AddNew() *LifeCycleType_TimeElements {
        if t == nil {
                t, _ = LifeCycleType_TimeElementsPointer(LifeCycleType_TimeElements{})
        }
        if t.TimeElement == nil {
                t.TimeElement = make([]TimeElementType, 0)
        }
        t.TimeElement = append(t.TimeElement, TimeElementType{})
        return t
}

func (t *LifeCycleType_TimeElements) Last() *TimeElementType {
  if t.TimeElement == nil {
    t = t.AddNew()
    }
        return &(t.TimeElement[len(t.TimeElement)-1])
}


  func (t *ExpenseAccountsType) Append(value ExpenseAccountType) *ExpenseAccountsType {
    
        if t == nil {
                t, _ = ExpenseAccountsTypePointer(ExpenseAccountsType{})
        }
        if t.ExpenseAccount == nil {
                t.ExpenseAccount = make([]ExpenseAccountType, 0)
        }
        t.ExpenseAccount = append(t.ExpenseAccount, value)
        return t
}

func (t *ExpenseAccountsType) AddNew() *ExpenseAccountsType {
        if t == nil {
                t, _ = ExpenseAccountsTypePointer(ExpenseAccountsType{})
        }
        if t.ExpenseAccount == nil {
                t.ExpenseAccount = make([]ExpenseAccountType, 0)
        }
        t.ExpenseAccount = append(t.ExpenseAccount, ExpenseAccountType{})
        return t
}

func (t *ExpenseAccountsType) Last() *ExpenseAccountType {
  if t.ExpenseAccount == nil {
    t = t.AddNew()
    }
        return &(t.ExpenseAccount[len(t.ExpenseAccount)-1])
}


  func (t *AddressListType) Append(value AddressType) *AddressListType {
    
        if t == nil {
                t, _ = AddressListTypePointer(AddressListType{})
        }
        if t.Address == nil {
                t.Address = make([]AddressType, 0)
        }
        t.Address = append(t.Address, value)
        return t
}

func (t *AddressListType) AddNew() *AddressListType {
        if t == nil {
                t, _ = AddressListTypePointer(AddressListType{})
        }
        if t.Address == nil {
                t.Address = make([]AddressType, 0)
        }
        t.Address = append(t.Address, AddressType{})
        return t
}

func (t *AddressListType) Last() *AddressType {
  if t.Address == nil {
    t = t.AddNew()
    }
        return &(t.Address[len(t.Address)-1])
}


  func (t *EmailListType) Append(value EmailType) *EmailListType {
    
        if t == nil {
                t, _ = EmailListTypePointer(EmailListType{})
        }
        if t.Email == nil {
                t.Email = make([]EmailType, 0)
        }
        t.Email = append(t.Email, value)
        return t
}

func (t *EmailListType) AddNew() *EmailListType {
        if t == nil {
                t, _ = EmailListTypePointer(EmailListType{})
        }
        if t.Email == nil {
                t.Email = make([]EmailType, 0)
        }
        t.Email = append(t.Email, EmailType{})
        return t
}

func (t *EmailListType) Last() *EmailType {
  if t.Email == nil {
    t = t.AddNew()
    }
        return &(t.Email[len(t.Email)-1])
}


  func (t *LResourcesType) Append(value ResourcesType) *LResourcesType {
    
        if t == nil {
                t, _ = LResourcesTypePointer(LResourcesType{})
        }
        if t.LearningResourceRefId == nil {
                t.LearningResourceRefId = make([]ResourcesType, 0)
        }
        t.LearningResourceRefId = append(t.LearningResourceRefId, value)
        return t
}

func (t *LResourcesType) AddNew() *LResourcesType {
        if t == nil {
                t, _ = LResourcesTypePointer(LResourcesType{})
        }
        if t.LearningResourceRefId == nil {
                t.LearningResourceRefId = make([]ResourcesType, 0)
        }
        t.LearningResourceRefId = append(t.LearningResourceRefId, ResourcesType{})
        return t
}

func (t *LResourcesType) Last() *ResourcesType {
  if t.LearningResourceRefId == nil {
    t = t.AddNew()
    }
        return &(t.LearningResourceRefId[len(t.LearningResourceRefId)-1])
}


  func (t *HoldInfoListType) Append(value HoldInfoType) *HoldInfoListType {
    
        if t == nil {
                t, _ = HoldInfoListTypePointer(HoldInfoListType{})
        }
        if t.HoldInfo == nil {
                t.HoldInfo = make([]HoldInfoType, 0)
        }
        t.HoldInfo = append(t.HoldInfo, value)
        return t
}

func (t *HoldInfoListType) AddNew() *HoldInfoListType {
        if t == nil {
                t, _ = HoldInfoListTypePointer(HoldInfoListType{})
        }
        if t.HoldInfo == nil {
                t.HoldInfo = make([]HoldInfoType, 0)
        }
        t.HoldInfo = append(t.HoldInfo, HoldInfoType{})
        return t
}

func (t *HoldInfoListType) Last() *HoldInfoType {
  if t.HoldInfo == nil {
    t = t.AddNew()
    }
        return &(t.HoldInfo[len(t.HoldInfo)-1])
}


  func (t *PrerequisitesType) Append(value string) *PrerequisitesType {
    
        if t == nil {
                t, _ = PrerequisitesTypePointer(PrerequisitesType{})
        }
        if t.Prerequisite == nil {
                t.Prerequisite = make([]string, 0)
        }
        t.Prerequisite = append(t.Prerequisite, value)
        return t
}

func (t *PrerequisitesType) AddNew() *PrerequisitesType {
        if t == nil {
                t, _ = PrerequisitesTypePointer(PrerequisitesType{})
        }
        if t.Prerequisite == nil {
                t.Prerequisite = make([]string, 0)
        }
        t.Prerequisite = append(t.Prerequisite, "")
        return t
}

func (t *PrerequisitesType) Last() *string {
  if t.Prerequisite == nil {
    t = t.AddNew()
    }
        return &(t.Prerequisite[len(t.Prerequisite)-1])
}

      func (t *PrerequisitesType) AppendString(value string) *PrerequisitesType {
        return t.Append((string)(value))
        }

  func (t *ContactsType) Append(value ContactType) *ContactsType {
    
        if t == nil {
                t, _ = ContactsTypePointer(ContactsType{})
        }
        if t.Contact == nil {
                t.Contact = make([]ContactType, 0)
        }
        t.Contact = append(t.Contact, value)
        return t
}

func (t *ContactsType) AddNew() *ContactsType {
        if t == nil {
                t, _ = ContactsTypePointer(ContactsType{})
        }
        if t.Contact == nil {
                t.Contact = make([]ContactType, 0)
        }
        t.Contact = append(t.Contact, ContactType{})
        return t
}

func (t *ContactsType) Last() *ContactType {
  if t.Contact == nil {
    t = t.AddNew()
    }
        return &(t.Contact[len(t.Contact)-1])
}


  func (t *AssociatedObjectsType) Append(value AssociatedObjectsType_AssociatedObject) *AssociatedObjectsType {
    
        if t == nil {
                t, _ = AssociatedObjectsTypePointer(AssociatedObjectsType{})
        }
        if t.AssociatedObject == nil {
                t.AssociatedObject = make([]AssociatedObjectsType_AssociatedObject, 0)
        }
        t.AssociatedObject = append(t.AssociatedObject, value)
        return t
}

func (t *AssociatedObjectsType) AddNew() *AssociatedObjectsType {
        if t == nil {
                t, _ = AssociatedObjectsTypePointer(AssociatedObjectsType{})
        }
        if t.AssociatedObject == nil {
                t.AssociatedObject = make([]AssociatedObjectsType_AssociatedObject, 0)
        }
        t.AssociatedObject = append(t.AssociatedObject, AssociatedObjectsType_AssociatedObject{})
        return t
}

func (t *AssociatedObjectsType) Last() *AssociatedObjectsType_AssociatedObject {
  if t.AssociatedObject == nil {
    t = t.AddNew()
    }
        return &(t.AssociatedObject[len(t.AssociatedObject)-1])
}


  func (t *StaffSubjectListType) Append(value StaffSubjectType) *StaffSubjectListType {
    
        if t == nil {
                t, _ = StaffSubjectListTypePointer(StaffSubjectListType{})
        }
        if t.StaffSubject == nil {
                t.StaffSubject = make([]StaffSubjectType, 0)
        }
        t.StaffSubject = append(t.StaffSubject, value)
        return t
}

func (t *StaffSubjectListType) AddNew() *StaffSubjectListType {
        if t == nil {
                t, _ = StaffSubjectListTypePointer(StaffSubjectListType{})
        }
        if t.StaffSubject == nil {
                t.StaffSubject = make([]StaffSubjectType, 0)
        }
        t.StaffSubject = append(t.StaffSubject, StaffSubjectType{})
        return t
}

func (t *StaffSubjectListType) Last() *StaffSubjectType {
  if t.StaffSubject == nil {
    t = t.AddNew()
    }
        return &(t.StaffSubject[len(t.StaffSubject)-1])
}


  func (t *WellbeingEventCategoryListType) Append(value WellbeingEventCategoryType) *WellbeingEventCategoryListType {
    
        if t == nil {
                t, _ = WellbeingEventCategoryListTypePointer(WellbeingEventCategoryListType{})
        }
        if t.WellbeingEventCategory == nil {
                t.WellbeingEventCategory = make([]WellbeingEventCategoryType, 0)
        }
        t.WellbeingEventCategory = append(t.WellbeingEventCategory, value)
        return t
}

func (t *WellbeingEventCategoryListType) AddNew() *WellbeingEventCategoryListType {
        if t == nil {
                t, _ = WellbeingEventCategoryListTypePointer(WellbeingEventCategoryListType{})
        }
        if t.WellbeingEventCategory == nil {
                t.WellbeingEventCategory = make([]WellbeingEventCategoryType, 0)
        }
        t.WellbeingEventCategory = append(t.WellbeingEventCategory, WellbeingEventCategoryType{})
        return t
}

func (t *WellbeingEventCategoryListType) Last() *WellbeingEventCategoryType {
  if t.WellbeingEventCategory == nil {
    t = t.AddNew()
    }
        return &(t.WellbeingEventCategory[len(t.WellbeingEventCategory)-1])
}


  func (t *LibraryMessageListType) Append(value LibraryMessageType) *LibraryMessageListType {
    
        if t == nil {
                t, _ = LibraryMessageListTypePointer(LibraryMessageListType{})
        }
        if t.Message == nil {
                t.Message = make([]LibraryMessageType, 0)
        }
        t.Message = append(t.Message, value)
        return t
}

func (t *LibraryMessageListType) AddNew() *LibraryMessageListType {
        if t == nil {
                t, _ = LibraryMessageListTypePointer(LibraryMessageListType{})
        }
        if t.Message == nil {
                t.Message = make([]LibraryMessageType, 0)
        }
        t.Message = append(t.Message, LibraryMessageType{})
        return t
}

func (t *LibraryMessageListType) Last() *LibraryMessageType {
  if t.Message == nil {
    t = t.AddNew()
    }
        return &(t.Message[len(t.Message)-1])
}


  func (t *ProgramFundingSourcesType) Append(value ProgramFundingSourceType) *ProgramFundingSourcesType {
    
        if t == nil {
                t, _ = ProgramFundingSourcesTypePointer(ProgramFundingSourcesType{})
        }
        if t.ProgramFundingSource == nil {
                t.ProgramFundingSource = make([]ProgramFundingSourceType, 0)
        }
        t.ProgramFundingSource = append(t.ProgramFundingSource, value)
        return t
}

func (t *ProgramFundingSourcesType) AddNew() *ProgramFundingSourcesType {
        if t == nil {
                t, _ = ProgramFundingSourcesTypePointer(ProgramFundingSourcesType{})
        }
        if t.ProgramFundingSource == nil {
                t.ProgramFundingSource = make([]ProgramFundingSourceType, 0)
        }
        t.ProgramFundingSource = append(t.ProgramFundingSource, ProgramFundingSourceType{})
        return t
}

func (t *ProgramFundingSourcesType) Last() *ProgramFundingSourceType {
  if t.ProgramFundingSource == nil {
    t = t.AddNew()
    }
        return &(t.ProgramFundingSource[len(t.ProgramFundingSource)-1])
}


  func (t *NAPStudentResponseTestletListType) Append(value NAPTestletResponseType) *NAPStudentResponseTestletListType {
    
        if t == nil {
                t, _ = NAPStudentResponseTestletListTypePointer(NAPStudentResponseTestletListType{})
        }
        if t.Testlet == nil {
                t.Testlet = make([]NAPTestletResponseType, 0)
        }
        t.Testlet = append(t.Testlet, value)
        return t
}

func (t *NAPStudentResponseTestletListType) AddNew() *NAPStudentResponseTestletListType {
        if t == nil {
                t, _ = NAPStudentResponseTestletListTypePointer(NAPStudentResponseTestletListType{})
        }
        if t.Testlet == nil {
                t.Testlet = make([]NAPTestletResponseType, 0)
        }
        t.Testlet = append(t.Testlet, NAPTestletResponseType{})
        return t
}

func (t *NAPStudentResponseTestletListType) Last() *NAPTestletResponseType {
  if t.Testlet == nil {
    t = t.AddNew()
    }
        return &(t.Testlet[len(t.Testlet)-1])
}


  func (t *CensusStaffListType) Append(value CensusStaffType) *CensusStaffListType {
    
        if t == nil {
                t, _ = CensusStaffListTypePointer(CensusStaffListType{})
        }
        if t.CensusStaff == nil {
                t.CensusStaff = make([]CensusStaffType, 0)
        }
        t.CensusStaff = append(t.CensusStaff, value)
        return t
}

func (t *CensusStaffListType) AddNew() *CensusStaffListType {
        if t == nil {
                t, _ = CensusStaffListTypePointer(CensusStaffListType{})
        }
        if t.CensusStaff == nil {
                t.CensusStaff = make([]CensusStaffType, 0)
        }
        t.CensusStaff = append(t.CensusStaff, CensusStaffType{})
        return t
}

func (t *CensusStaffListType) Last() *CensusStaffType {
  if t.CensusStaff == nil {
    t = t.AddNew()
    }
        return &(t.CensusStaff[len(t.CensusStaff)-1])
}


  func (t *ScoreListType) Append(value ScoreType) *ScoreListType {
    
        if t == nil {
                t, _ = ScoreListTypePointer(ScoreListType{})
        }
        if t.Score == nil {
                t.Score = make([]ScoreType, 0)
        }
        t.Score = append(t.Score, value)
        return t
}

func (t *ScoreListType) AddNew() *ScoreListType {
        if t == nil {
                t, _ = ScoreListTypePointer(ScoreListType{})
        }
        if t.Score == nil {
                t.Score = make([]ScoreType, 0)
        }
        t.Score = append(t.Score, ScoreType{})
        return t
}

func (t *ScoreListType) Last() *ScoreType {
  if t.Score == nil {
    t = t.AddNew()
    }
        return &(t.Score[len(t.Score)-1])
}


  func (t *StatementCodesType) Append(value string) *StatementCodesType {
    
        if t == nil {
                t, _ = StatementCodesTypePointer(StatementCodesType{})
        }
        if t.StatementCode == nil {
                t.StatementCode = make([]string, 0)
        }
        t.StatementCode = append(t.StatementCode, value)
        return t
}

func (t *StatementCodesType) AddNew() *StatementCodesType {
        if t == nil {
                t, _ = StatementCodesTypePointer(StatementCodesType{})
        }
        if t.StatementCode == nil {
                t.StatementCode = make([]string, 0)
        }
        t.StatementCode = append(t.StatementCode, "")
        return t
}

func (t *StatementCodesType) Last() *string {
  if t.StatementCode == nil {
    t = t.AddNew()
    }
        return &(t.StatementCode[len(t.StatementCode)-1])
}

      func (t *StatementCodesType) AppendString(value string) *StatementCodesType {
        return t.Append((string)(value))
        }

  func (t *LanguageListType) Append(value LanguageBaseType) *LanguageListType {
    
        if t == nil {
                t, _ = LanguageListTypePointer(LanguageListType{})
        }
        if t.Language == nil {
                t.Language = make([]LanguageBaseType, 0)
        }
        t.Language = append(t.Language, value)
        return t
}

func (t *LanguageListType) AddNew() *LanguageListType {
        if t == nil {
                t, _ = LanguageListTypePointer(LanguageListType{})
        }
        if t.Language == nil {
                t.Language = make([]LanguageBaseType, 0)
        }
        t.Language = append(t.Language, LanguageBaseType{})
        return t
}

func (t *LanguageListType) Last() *LanguageBaseType {
  if t.Language == nil {
    t = t.AddNew()
    }
        return &(t.Language[len(t.Language)-1])
}


  func (t *LifeCycleType_Creators) Append(value LifeCycleType_Creator) *LifeCycleType_Creators {
    
        if t == nil {
                t, _ = LifeCycleType_CreatorsPointer(LifeCycleType_Creators{})
        }
        if t.Creator == nil {
                t.Creator = make([]LifeCycleType_Creator, 0)
        }
        t.Creator = append(t.Creator, value)
        return t
}

func (t *LifeCycleType_Creators) AddNew() *LifeCycleType_Creators {
        if t == nil {
                t, _ = LifeCycleType_CreatorsPointer(LifeCycleType_Creators{})
        }
        if t.Creator == nil {
                t.Creator = make([]LifeCycleType_Creator, 0)
        }
        t.Creator = append(t.Creator, LifeCycleType_Creator{})
        return t
}

func (t *LifeCycleType_Creators) Last() *LifeCycleType_Creator {
  if t.Creator == nil {
    t = t.AddNew()
    }
        return &(t.Creator[len(t.Creator)-1])
}


  func (t *TeachingGroupScheduleListType) Append(value TeachingGroupScheduleType) *TeachingGroupScheduleListType {
    
        if t == nil {
                t, _ = TeachingGroupScheduleListTypePointer(TeachingGroupScheduleListType{})
        }
        if t.TeachingGroupSchedule == nil {
                t.TeachingGroupSchedule = make([]TeachingGroupScheduleType, 0)
        }
        t.TeachingGroupSchedule = append(t.TeachingGroupSchedule, value)
        return t
}

func (t *TeachingGroupScheduleListType) AddNew() *TeachingGroupScheduleListType {
        if t == nil {
                t, _ = TeachingGroupScheduleListTypePointer(TeachingGroupScheduleListType{})
        }
        if t.TeachingGroupSchedule == nil {
                t.TeachingGroupSchedule = make([]TeachingGroupScheduleType, 0)
        }
        t.TeachingGroupSchedule = append(t.TeachingGroupSchedule, TeachingGroupScheduleType{})
        return t
}

func (t *TeachingGroupScheduleListType) Last() *TeachingGroupScheduleType {
  if t.TeachingGroupSchedule == nil {
    t = t.AddNew()
    }
        return &(t.TeachingGroupSchedule[len(t.TeachingGroupSchedule)-1])
}


  func (t *SoftwareRequirementListType) Append(value SoftwareRequirementType) *SoftwareRequirementListType {
    
        if t == nil {
                t, _ = SoftwareRequirementListTypePointer(SoftwareRequirementListType{})
        }
        if t.SoftwareRequirement == nil {
                t.SoftwareRequirement = make([]SoftwareRequirementType, 0)
        }
        t.SoftwareRequirement = append(t.SoftwareRequirement, value)
        return t
}

func (t *SoftwareRequirementListType) AddNew() *SoftwareRequirementListType {
        if t == nil {
                t, _ = SoftwareRequirementListTypePointer(SoftwareRequirementListType{})
        }
        if t.SoftwareRequirement == nil {
                t.SoftwareRequirement = make([]SoftwareRequirementType, 0)
        }
        t.SoftwareRequirement = append(t.SoftwareRequirement, SoftwareRequirementType{})
        return t
}

func (t *SoftwareRequirementListType) Last() *SoftwareRequirementType {
  if t.SoftwareRequirement == nil {
    t = t.AddNew()
    }
        return &(t.SoftwareRequirement[len(t.SoftwareRequirement)-1])
}


  func (t *EssentialMaterialsType) Append(value string) *EssentialMaterialsType {
    
        if t == nil {
                t, _ = EssentialMaterialsTypePointer(EssentialMaterialsType{})
        }
        if t.EssentialMaterial == nil {
                t.EssentialMaterial = make([]string, 0)
        }
        t.EssentialMaterial = append(t.EssentialMaterial, value)
        return t
}

func (t *EssentialMaterialsType) AddNew() *EssentialMaterialsType {
        if t == nil {
                t, _ = EssentialMaterialsTypePointer(EssentialMaterialsType{})
        }
        if t.EssentialMaterial == nil {
                t.EssentialMaterial = make([]string, 0)
        }
        t.EssentialMaterial = append(t.EssentialMaterial, "")
        return t
}

func (t *EssentialMaterialsType) Last() *string {
  if t.EssentialMaterial == nil {
    t = t.AddNew()
    }
        return &(t.EssentialMaterial[len(t.EssentialMaterial)-1])
}

      func (t *EssentialMaterialsType) AppendString(value string) *EssentialMaterialsType {
        return t.Append((string)(value))
        }

  func (t *AuthorsType) Append(value string) *AuthorsType {
    
        if t == nil {
                t, _ = AuthorsTypePointer(AuthorsType{})
        }
        if t.Author == nil {
                t.Author = make([]string, 0)
        }
        t.Author = append(t.Author, value)
        return t
}

func (t *AuthorsType) AddNew() *AuthorsType {
        if t == nil {
                t, _ = AuthorsTypePointer(AuthorsType{})
        }
        if t.Author == nil {
                t.Author = make([]string, 0)
        }
        t.Author = append(t.Author, "")
        return t
}

func (t *AuthorsType) Last() *string {
  if t.Author == nil {
    t = t.AddNew()
    }
        return &(t.Author[len(t.Author)-1])
}

      func (t *AuthorsType) AppendString(value string) *AuthorsType {
        return t.Append((string)(value))
        }

  func (t *StudentsType) Append(value string) *StudentsType {
    
        if t == nil {
                t, _ = StudentsTypePointer(StudentsType{})
        }
        if t.StudentPersonalRefId == nil {
                t.StudentPersonalRefId = make([]string, 0)
        }
        t.StudentPersonalRefId = append(t.StudentPersonalRefId, value)
        return t
}

func (t *StudentsType) AddNew() *StudentsType {
        if t == nil {
                t, _ = StudentsTypePointer(StudentsType{})
        }
        if t.StudentPersonalRefId == nil {
                t.StudentPersonalRefId = make([]string, 0)
        }
        t.StudentPersonalRefId = append(t.StudentPersonalRefId, "")
        return t
}

func (t *StudentsType) Last() *string {
  if t.StudentPersonalRefId == nil {
    t = t.AddNew()
    }
        return &(t.StudentPersonalRefId[len(t.StudentPersonalRefId)-1])
}

      func (t *StudentsType) AppendString(value string) *StudentsType {
        return t.Append((string)(value))
        }

  func (t *SIF_MetadataType_TimeElements) Append(value TimeElementType) *SIF_MetadataType_TimeElements {
    
        if t == nil {
                t, _ = SIF_MetadataType_TimeElementsPointer(SIF_MetadataType_TimeElements{})
        }
        if t.TimeElement == nil {
                t.TimeElement = make([]TimeElementType, 0)
        }
        t.TimeElement = append(t.TimeElement, value)
        return t
}

func (t *SIF_MetadataType_TimeElements) AddNew() *SIF_MetadataType_TimeElements {
        if t == nil {
                t, _ = SIF_MetadataType_TimeElementsPointer(SIF_MetadataType_TimeElements{})
        }
        if t.TimeElement == nil {
                t.TimeElement = make([]TimeElementType, 0)
        }
        t.TimeElement = append(t.TimeElement, TimeElementType{})
        return t
}

func (t *SIF_MetadataType_TimeElements) Last() *TimeElementType {
  if t.TimeElement == nil {
    t = t.AddNew()
    }
        return &(t.TimeElement[len(t.TimeElement)-1])
}


  func (t *YearLevelsType) Append(value YearLevelType) *YearLevelsType {
    
        if t == nil {
                t, _ = YearLevelsTypePointer(YearLevelsType{})
        }
        if t.YearLevel == nil {
                t.YearLevel = make([]YearLevelType, 0)
        }
        t.YearLevel = append(t.YearLevel, value)
        return t
}

func (t *YearLevelsType) AddNew() *YearLevelsType {
        if t == nil {
                t, _ = YearLevelsTypePointer(YearLevelsType{})
        }
        if t.YearLevel == nil {
                t.YearLevel = make([]YearLevelType, 0)
        }
        t.YearLevel = append(t.YearLevel, YearLevelType{})
        return t
}

func (t *YearLevelsType) Last() *YearLevelType {
  if t.YearLevel == nil {
    t = t.AddNew()
    }
        return &(t.YearLevel[len(t.YearLevel)-1])
}


  func (t *NAPCodeFrameTestletListType) Append(value NAPTestletCodeFrameType) *NAPCodeFrameTestletListType {
    
        if t == nil {
                t, _ = NAPCodeFrameTestletListTypePointer(NAPCodeFrameTestletListType{})
        }
        if t.Testlet == nil {
                t.Testlet = make([]NAPTestletCodeFrameType, 0)
        }
        t.Testlet = append(t.Testlet, value)
        return t
}

func (t *NAPCodeFrameTestletListType) AddNew() *NAPCodeFrameTestletListType {
        if t == nil {
                t, _ = NAPCodeFrameTestletListTypePointer(NAPCodeFrameTestletListType{})
        }
        if t.Testlet == nil {
                t.Testlet = make([]NAPTestletCodeFrameType, 0)
        }
        t.Testlet = append(t.Testlet, NAPTestletCodeFrameType{})
        return t
}

func (t *NAPCodeFrameTestletListType) Last() *NAPTestletCodeFrameType {
  if t.Testlet == nil {
    t = t.AddNew()
    }
        return &(t.Testlet[len(t.Testlet)-1])
}


  func (t *TeachingGroupPeriodListType) Append(value TeachingGroupPeriodType) *TeachingGroupPeriodListType {
    
        if t == nil {
                t, _ = TeachingGroupPeriodListTypePointer(TeachingGroupPeriodListType{})
        }
        if t.TeachingGroupPeriod == nil {
                t.TeachingGroupPeriod = make([]TeachingGroupPeriodType, 0)
        }
        t.TeachingGroupPeriod = append(t.TeachingGroupPeriod, value)
        return t
}

func (t *TeachingGroupPeriodListType) AddNew() *TeachingGroupPeriodListType {
        if t == nil {
                t, _ = TeachingGroupPeriodListTypePointer(TeachingGroupPeriodListType{})
        }
        if t.TeachingGroupPeriod == nil {
                t.TeachingGroupPeriod = make([]TeachingGroupPeriodType, 0)
        }
        t.TeachingGroupPeriod = append(t.TeachingGroupPeriod, TeachingGroupPeriodType{})
        return t
}

func (t *TeachingGroupPeriodListType) Last() *TeachingGroupPeriodType {
  if t.TeachingGroupPeriod == nil {
    t = t.AddNew()
    }
        return &(t.TeachingGroupPeriod[len(t.TeachingGroupPeriod)-1])
}


  func (t *TimeTablePeriodListType) Append(value TimeTablePeriodType) *TimeTablePeriodListType {
    
        if t == nil {
                t, _ = TimeTablePeriodListTypePointer(TimeTablePeriodListType{})
        }
        if t.TimeTablePeriod == nil {
                t.TimeTablePeriod = make([]TimeTablePeriodType, 0)
        }
        t.TimeTablePeriod = append(t.TimeTablePeriod, value)
        return t
}

func (t *TimeTablePeriodListType) AddNew() *TimeTablePeriodListType {
        if t == nil {
                t, _ = TimeTablePeriodListTypePointer(TimeTablePeriodListType{})
        }
        if t.TimeTablePeriod == nil {
                t.TimeTablePeriod = make([]TimeTablePeriodType, 0)
        }
        t.TimeTablePeriod = append(t.TimeTablePeriod, TimeTablePeriodType{})
        return t
}

func (t *TimeTablePeriodListType) Last() *TimeTablePeriodType {
  if t.TimeTablePeriod == nil {
    t = t.AddNew()
    }
        return &(t.TimeTablePeriod[len(t.TimeTablePeriod)-1])
}


  func (t *RoomListType) Append(value string) *RoomListType {
    
        if t == nil {
                t, _ = RoomListTypePointer(RoomListType{})
        }
        if t.RoomInfoRefId == nil {
                t.RoomInfoRefId = make([]string, 0)
        }
        t.RoomInfoRefId = append(t.RoomInfoRefId, value)
        return t
}

func (t *RoomListType) AddNew() *RoomListType {
        if t == nil {
                t, _ = RoomListTypePointer(RoomListType{})
        }
        if t.RoomInfoRefId == nil {
                t.RoomInfoRefId = make([]string, 0)
        }
        t.RoomInfoRefId = append(t.RoomInfoRefId, "")
        return t
}

func (t *RoomListType) Last() *string {
  if t.RoomInfoRefId == nil {
    t = t.AddNew()
    }
        return &(t.RoomInfoRefId[len(t.RoomInfoRefId)-1])
}

      func (t *RoomListType) AppendString(value string) *RoomListType {
        return t.Append((string)(value))
        }

  func (t *PersonInvolvementListType) Append(value PersonInvolvementType) *PersonInvolvementListType {
    
        if t == nil {
                t, _ = PersonInvolvementListTypePointer(PersonInvolvementListType{})
        }
        if t.PersonInvolvement == nil {
                t.PersonInvolvement = make([]PersonInvolvementType, 0)
        }
        t.PersonInvolvement = append(t.PersonInvolvement, value)
        return t
}

func (t *PersonInvolvementListType) AddNew() *PersonInvolvementListType {
        if t == nil {
                t, _ = PersonInvolvementListTypePointer(PersonInvolvementListType{})
        }
        if t.PersonInvolvement == nil {
                t.PersonInvolvement = make([]PersonInvolvementType, 0)
        }
        t.PersonInvolvement = append(t.PersonInvolvement, PersonInvolvementType{})
        return t
}

func (t *PersonInvolvementListType) Last() *PersonInvolvementType {
  if t.PersonInvolvement == nil {
    t = t.AddNew()
    }
        return &(t.PersonInvolvement[len(t.PersonInvolvement)-1])
}


  func (t *TeacherListType) Append(value TeachingGroupTeacherType) *TeacherListType {
    
        if t == nil {
                t, _ = TeacherListTypePointer(TeacherListType{})
        }
        if t.TeachingGroupTeacher == nil {
                t.TeachingGroupTeacher = make([]TeachingGroupTeacherType, 0)
        }
        t.TeachingGroupTeacher = append(t.TeachingGroupTeacher, value)
        return t
}

func (t *TeacherListType) AddNew() *TeacherListType {
        if t == nil {
                t, _ = TeacherListTypePointer(TeacherListType{})
        }
        if t.TeachingGroupTeacher == nil {
                t.TeachingGroupTeacher = make([]TeachingGroupTeacherType, 0)
        }
        t.TeachingGroupTeacher = append(t.TeachingGroupTeacher, TeachingGroupTeacherType{})
        return t
}

func (t *TeacherListType) Last() *TeachingGroupTeacherType {
  if t.TeachingGroupTeacher == nil {
    t = t.AddNew()
    }
        return &(t.TeachingGroupTeacher[len(t.TeachingGroupTeacher)-1])
}


  func (t *AlternateIdentificationCodeListType) Append(value string) *AlternateIdentificationCodeListType {
    
        if t == nil {
                t, _ = AlternateIdentificationCodeListTypePointer(AlternateIdentificationCodeListType{})
        }
        if t.AlternateIdentificationCode == nil {
                t.AlternateIdentificationCode = make([]string, 0)
        }
        t.AlternateIdentificationCode = append(t.AlternateIdentificationCode, value)
        return t
}

func (t *AlternateIdentificationCodeListType) AddNew() *AlternateIdentificationCodeListType {
        if t == nil {
                t, _ = AlternateIdentificationCodeListTypePointer(AlternateIdentificationCodeListType{})
        }
        if t.AlternateIdentificationCode == nil {
                t.AlternateIdentificationCode = make([]string, 0)
        }
        t.AlternateIdentificationCode = append(t.AlternateIdentificationCode, "")
        return t
}

func (t *AlternateIdentificationCodeListType) Last() *string {
  if t.AlternateIdentificationCode == nil {
    t = t.AddNew()
    }
        return &(t.AlternateIdentificationCode[len(t.AlternateIdentificationCode)-1])
}

      func (t *AlternateIdentificationCodeListType) AppendString(value string) *AlternateIdentificationCodeListType {
        return t.Append((string)(value))
        }

  func (t *ValidLetterMarkListType) Append(value ValidLetterMarkType) *ValidLetterMarkListType {
    
        if t == nil {
                t, _ = ValidLetterMarkListTypePointer(ValidLetterMarkListType{})
        }
        if t.ValidLetterMark == nil {
                t.ValidLetterMark = make([]ValidLetterMarkType, 0)
        }
        t.ValidLetterMark = append(t.ValidLetterMark, value)
        return t
}

func (t *ValidLetterMarkListType) AddNew() *ValidLetterMarkListType {
        if t == nil {
                t, _ = ValidLetterMarkListTypePointer(ValidLetterMarkListType{})
        }
        if t.ValidLetterMark == nil {
                t.ValidLetterMark = make([]ValidLetterMarkType, 0)
        }
        t.ValidLetterMark = append(t.ValidLetterMark, ValidLetterMarkType{})
        return t
}

func (t *ValidLetterMarkListType) Last() *ValidLetterMarkType {
  if t.ValidLetterMark == nil {
    t = t.AddNew()
    }
        return &(t.ValidLetterMark[len(t.ValidLetterMark)-1])
}


  func (t *MediaTypesType) Append(value string) *MediaTypesType {
    
        if t == nil {
                t, _ = MediaTypesTypePointer(MediaTypesType{})
        }
        if t.MediaType == nil {
                t.MediaType = make([]string, 0)
        }
        t.MediaType = append(t.MediaType, value)
        return t
}

func (t *MediaTypesType) AddNew() *MediaTypesType {
        if t == nil {
                t, _ = MediaTypesTypePointer(MediaTypesType{})
        }
        if t.MediaType == nil {
                t.MediaType = make([]string, 0)
        }
        t.MediaType = append(t.MediaType, "")
        return t
}

func (t *MediaTypesType) Last() *string {
  if t.MediaType == nil {
    t = t.AddNew()
    }
        return &(t.MediaType[len(t.MediaType)-1])
}

      func (t *MediaTypesType) AppendString(value string) *MediaTypesType {
        return t.Append((string)(value))
        }

  func (t *SystemRole_SystemContextList) Append(value SystemRole_SystemContext) *SystemRole_SystemContextList {
    
        if t == nil {
                t, _ = SystemRole_SystemContextListPointer(SystemRole_SystemContextList{})
        }
        if t.SystemContext == nil {
                t.SystemContext = make([]SystemRole_SystemContext, 0)
        }
        t.SystemContext = append(t.SystemContext, value)
        return t
}

func (t *SystemRole_SystemContextList) AddNew() *SystemRole_SystemContextList {
        if t == nil {
                t, _ = SystemRole_SystemContextListPointer(SystemRole_SystemContextList{})
        }
        if t.SystemContext == nil {
                t.SystemContext = make([]SystemRole_SystemContext, 0)
        }
        t.SystemContext = append(t.SystemContext, SystemRole_SystemContext{})
        return t
}

func (t *SystemRole_SystemContextList) Last() *SystemRole_SystemContext {
  if t.SystemContext == nil {
    t = t.AddNew()
    }
        return &(t.SystemContext[len(t.SystemContext)-1])
}


  func (t *AddressCollectionStudentListType) Append(value AddressCollectionStudentType) *AddressCollectionStudentListType {
    
        if t == nil {
                t, _ = AddressCollectionStudentListTypePointer(AddressCollectionStudentListType{})
        }
        if t.AddressCollectionStudent == nil {
                t.AddressCollectionStudent = make([]AddressCollectionStudentType, 0)
        }
        t.AddressCollectionStudent = append(t.AddressCollectionStudent, value)
        return t
}

func (t *AddressCollectionStudentListType) AddNew() *AddressCollectionStudentListType {
        if t == nil {
                t, _ = AddressCollectionStudentListTypePointer(AddressCollectionStudentListType{})
        }
        if t.AddressCollectionStudent == nil {
                t.AddressCollectionStudent = make([]AddressCollectionStudentType, 0)
        }
        t.AddressCollectionStudent = append(t.AddressCollectionStudent, AddressCollectionStudentType{})
        return t
}

func (t *AddressCollectionStudentListType) Last() *AddressCollectionStudentType {
  if t.AddressCollectionStudent == nil {
    t = t.AddNew()
    }
        return &(t.AddressCollectionStudent[len(t.AddressCollectionStudent)-1])
}


  func (t *TestDisruptionListType) Append(value TestDisruptionType) *TestDisruptionListType {
    
        if t == nil {
                t, _ = TestDisruptionListTypePointer(TestDisruptionListType{})
        }
        if t.TestDisruption == nil {
                t.TestDisruption = make([]TestDisruptionType, 0)
        }
        t.TestDisruption = append(t.TestDisruption, value)
        return t
}

func (t *TestDisruptionListType) AddNew() *TestDisruptionListType {
        if t == nil {
                t, _ = TestDisruptionListTypePointer(TestDisruptionListType{})
        }
        if t.TestDisruption == nil {
                t.TestDisruption = make([]TestDisruptionType, 0)
        }
        t.TestDisruption = append(t.TestDisruption, TestDisruptionType{})
        return t
}

func (t *TestDisruptionListType) Last() *TestDisruptionType {
  if t.TestDisruption == nil {
    t = t.AddNew()
    }
        return &(t.TestDisruption[len(t.TestDisruption)-1])
}


  func (t *StatisticalAreasType) Append(value StatisticalAreaType) *StatisticalAreasType {
    
        if t == nil {
                t, _ = StatisticalAreasTypePointer(StatisticalAreasType{})
        }
        if t.StatisticalArea == nil {
                t.StatisticalArea = make([]StatisticalAreaType, 0)
        }
        t.StatisticalArea = append(t.StatisticalArea, value)
        return t
}

func (t *StatisticalAreasType) AddNew() *StatisticalAreasType {
        if t == nil {
                t, _ = StatisticalAreasTypePointer(StatisticalAreasType{})
        }
        if t.StatisticalArea == nil {
                t.StatisticalArea = make([]StatisticalAreaType, 0)
        }
        t.StatisticalArea = append(t.StatisticalArea, StatisticalAreaType{})
        return t
}

func (t *StatisticalAreasType) Last() *StatisticalAreaType {
  if t.StatisticalArea == nil {
    t = t.AddNew()
    }
        return &(t.StatisticalArea[len(t.StatisticalArea)-1])
}


  func (t *CensusReportingListType) Append(value CensusReportingType) *CensusReportingListType {
    
        if t == nil {
                t, _ = CensusReportingListTypePointer(CensusReportingListType{})
        }
        if t.CensusReporting == nil {
                t.CensusReporting = make([]CensusReportingType, 0)
        }
        t.CensusReporting = append(t.CensusReporting, value)
        return t
}

func (t *CensusReportingListType) AddNew() *CensusReportingListType {
        if t == nil {
                t, _ = CensusReportingListTypePointer(CensusReportingListType{})
        }
        if t.CensusReporting == nil {
                t.CensusReporting = make([]CensusReportingType, 0)
        }
        t.CensusReporting = append(t.CensusReporting, CensusReportingType{})
        return t
}

func (t *CensusReportingListType) Last() *CensusReportingType {
  if t.CensusReporting == nil {
    t = t.AddNew()
    }
        return &(t.CensusReporting[len(t.CensusReporting)-1])
}


  func (t *StrategiesType) Append(value string) *StrategiesType {
    
        if t == nil {
                t, _ = StrategiesTypePointer(StrategiesType{})
        }
        if t.Strategy == nil {
                t.Strategy = make([]string, 0)
        }
        t.Strategy = append(t.Strategy, value)
        return t
}

func (t *StrategiesType) AddNew() *StrategiesType {
        if t == nil {
                t, _ = StrategiesTypePointer(StrategiesType{})
        }
        if t.Strategy == nil {
                t.Strategy = make([]string, 0)
        }
        t.Strategy = append(t.Strategy, "")
        return t
}

func (t *StrategiesType) Last() *string {
  if t.Strategy == nil {
    t = t.AddNew()
    }
        return &(t.Strategy[len(t.Strategy)-1])
}

      func (t *StrategiesType) AppendString(value string) *StrategiesType {
        return t.Append((string)(value))
        }

  func (t *CensusStudentListType) Append(value CensusStudentType) *CensusStudentListType {
    
        if t == nil {
                t, _ = CensusStudentListTypePointer(CensusStudentListType{})
        }
        if t.CensusStudent == nil {
                t.CensusStudent = make([]CensusStudentType, 0)
        }
        t.CensusStudent = append(t.CensusStudent, value)
        return t
}

func (t *CensusStudentListType) AddNew() *CensusStudentListType {
        if t == nil {
                t, _ = CensusStudentListTypePointer(CensusStudentListType{})
        }
        if t.CensusStudent == nil {
                t.CensusStudent = make([]CensusStudentType, 0)
        }
        t.CensusStudent = append(t.CensusStudent, CensusStudentType{})
        return t
}

func (t *CensusStudentListType) Last() *CensusStudentType {
  if t.CensusStudent == nil {
    t = t.AddNew()
    }
        return &(t.CensusStudent[len(t.CensusStudent)-1])
}


  func (t *StimulusLocalIdListType) Append(value LocalIdType) *StimulusLocalIdListType {
    
        if t == nil {
                t, _ = StimulusLocalIdListTypePointer(StimulusLocalIdListType{})
        }
        if t.StimulusLocalId == nil {
                t.StimulusLocalId = make([]LocalIdType, 0)
        }
        t.StimulusLocalId = append(t.StimulusLocalId, value)
        return t
}

func (t *StimulusLocalIdListType) AddNew() *StimulusLocalIdListType {
        if t == nil {
                t, _ = StimulusLocalIdListTypePointer(StimulusLocalIdListType{})
        }
        if t.StimulusLocalId == nil {
                t.StimulusLocalId = make([]LocalIdType, 0)
        }
        t.StimulusLocalId = append(t.StimulusLocalId, "")
        return t
}

func (t *StimulusLocalIdListType) Last() *LocalIdType {
  if t.StimulusLocalId == nil {
    t = t.AddNew()
    }
        return &(t.StimulusLocalId[len(t.StimulusLocalId)-1])
}

      func (t *StimulusLocalIdListType) AppendString(value string) *StimulusLocalIdListType {
        return t.Append((LocalIdType)(value))
        }

  func (t *LocalCodeListType) Append(value LocalCodeType) *LocalCodeListType {
    
        if t == nil {
                t, _ = LocalCodeListTypePointer(LocalCodeListType{})
        }
        if t.LocalCode == nil {
                t.LocalCode = make([]LocalCodeType, 0)
        }
        t.LocalCode = append(t.LocalCode, value)
        return t
}

func (t *LocalCodeListType) AddNew() *LocalCodeListType {
        if t == nil {
                t, _ = LocalCodeListTypePointer(LocalCodeListType{})
        }
        if t.LocalCode == nil {
                t.LocalCode = make([]LocalCodeType, 0)
        }
        t.LocalCode = append(t.LocalCode, LocalCodeType{})
        return t
}

func (t *LocalCodeListType) Last() *LocalCodeType {
  if t.LocalCode == nil {
    t = t.AddNew()
    }
        return &(t.LocalCode[len(t.LocalCode)-1])
}


  func (t *StatementsType) Append(value string) *StatementsType {
    
        if t == nil {
                t, _ = StatementsTypePointer(StatementsType{})
        }
        if t.Statement == nil {
                t.Statement = make([]string, 0)
        }
        t.Statement = append(t.Statement, value)
        return t
}

func (t *StatementsType) AddNew() *StatementsType {
        if t == nil {
                t, _ = StatementsTypePointer(StatementsType{})
        }
        if t.Statement == nil {
                t.Statement = make([]string, 0)
        }
        t.Statement = append(t.Statement, "")
        return t
}

func (t *StatementsType) Last() *string {
  if t.Statement == nil {
    t = t.AddNew()
    }
        return &(t.Statement[len(t.Statement)-1])
}

      func (t *StatementsType) AppendString(value string) *StatementsType {
        return t.Append((string)(value))
        }

  func (t *ElectronicIdListType) Append(value ElectronicIdType) *ElectronicIdListType {
    
        if t == nil {
                t, _ = ElectronicIdListTypePointer(ElectronicIdListType{})
        }
        if t.ElectronicId == nil {
                t.ElectronicId = make([]ElectronicIdType, 0)
        }
        t.ElectronicId = append(t.ElectronicId, value)
        return t
}

func (t *ElectronicIdListType) AddNew() *ElectronicIdListType {
        if t == nil {
                t, _ = ElectronicIdListTypePointer(ElectronicIdListType{})
        }
        if t.ElectronicId == nil {
                t.ElectronicId = make([]ElectronicIdType, 0)
        }
        t.ElectronicId = append(t.ElectronicId, ElectronicIdType{})
        return t
}

func (t *ElectronicIdListType) Last() *ElectronicIdType {
  if t.ElectronicId == nil {
    t = t.AddNew()
    }
        return &(t.ElectronicId[len(t.ElectronicId)-1])
}


  func (t *PublishingPermissionListType) Append(value PublishingPermissionType) *PublishingPermissionListType {
    
        if t == nil {
                t, _ = PublishingPermissionListTypePointer(PublishingPermissionListType{})
        }
        if t.PublishingPermission == nil {
                t.PublishingPermission = make([]PublishingPermissionType, 0)
        }
        t.PublishingPermission = append(t.PublishingPermission, value)
        return t
}

func (t *PublishingPermissionListType) AddNew() *PublishingPermissionListType {
        if t == nil {
                t, _ = PublishingPermissionListTypePointer(PublishingPermissionListType{})
        }
        if t.PublishingPermission == nil {
                t.PublishingPermission = make([]PublishingPermissionType, 0)
        }
        t.PublishingPermission = append(t.PublishingPermission, PublishingPermissionType{})
        return t
}

func (t *PublishingPermissionListType) Last() *PublishingPermissionType {
  if t.PublishingPermission == nil {
    t = t.AddNew()
    }
        return &(t.PublishingPermission[len(t.PublishingPermission)-1])
}


  func (t *GradingScoreListType) Append(value AssignmentScoreType) *GradingScoreListType {
    
        if t == nil {
                t, _ = GradingScoreListTypePointer(GradingScoreListType{})
        }
        if t.GradingAssignmentScore == nil {
                t.GradingAssignmentScore = make([]AssignmentScoreType, 0)
        }
        t.GradingAssignmentScore = append(t.GradingAssignmentScore, value)
        return t
}

func (t *GradingScoreListType) AddNew() *GradingScoreListType {
        if t == nil {
                t, _ = GradingScoreListTypePointer(GradingScoreListType{})
        }
        if t.GradingAssignmentScore == nil {
                t.GradingAssignmentScore = make([]AssignmentScoreType, 0)
        }
        t.GradingAssignmentScore = append(t.GradingAssignmentScore, AssignmentScoreType{})
        return t
}

func (t *GradingScoreListType) Last() *AssignmentScoreType {
  if t.GradingAssignmentScore == nil {
    t = t.AddNew()
    }
        return &(t.GradingAssignmentScore[len(t.GradingAssignmentScore)-1])
}


  func (t *SchoolGroupListType) Append(value LocalIdType) *SchoolGroupListType {
    
        if t == nil {
                t, _ = SchoolGroupListTypePointer(SchoolGroupListType{})
        }
        if t.SchoolGroup == nil {
                t.SchoolGroup = make([]LocalIdType, 0)
        }
        t.SchoolGroup = append(t.SchoolGroup, value)
        return t
}

func (t *SchoolGroupListType) AddNew() *SchoolGroupListType {
        if t == nil {
                t, _ = SchoolGroupListTypePointer(SchoolGroupListType{})
        }
        if t.SchoolGroup == nil {
                t.SchoolGroup = make([]LocalIdType, 0)
        }
        t.SchoolGroup = append(t.SchoolGroup, "")
        return t
}

func (t *SchoolGroupListType) Last() *LocalIdType {
  if t.SchoolGroup == nil {
    t = t.AddNew()
    }
        return &(t.SchoolGroup[len(t.SchoolGroup)-1])
}

      func (t *SchoolGroupListType) AppendString(value string) *SchoolGroupListType {
        return t.Append((LocalIdType)(value))
        }

  func (t *YearLevelEnrollmentListType) Append(value YearLevelEnrollmentType) *YearLevelEnrollmentListType {
    
        if t == nil {
                t, _ = YearLevelEnrollmentListTypePointer(YearLevelEnrollmentListType{})
        }
        if t.YearLevelEnrollment == nil {
                t.YearLevelEnrollment = make([]YearLevelEnrollmentType, 0)
        }
        t.YearLevelEnrollment = append(t.YearLevelEnrollment, value)
        return t
}

func (t *YearLevelEnrollmentListType) AddNew() *YearLevelEnrollmentListType {
        if t == nil {
                t, _ = YearLevelEnrollmentListTypePointer(YearLevelEnrollmentListType{})
        }
        if t.YearLevelEnrollment == nil {
                t.YearLevelEnrollment = make([]YearLevelEnrollmentType, 0)
        }
        t.YearLevelEnrollment = append(t.YearLevelEnrollment, YearLevelEnrollmentType{})
        return t
}

func (t *YearLevelEnrollmentListType) Last() *YearLevelEnrollmentType {
  if t.YearLevelEnrollment == nil {
    t = t.AddNew()
    }
        return &(t.YearLevelEnrollment[len(t.YearLevelEnrollment)-1])
}


  func (t *CountryListType) Append(value CountryType) *CountryListType {
    
        if t == nil {
                t, _ = CountryListTypePointer(CountryListType{})
        }
        if t.CountryOfCitizenship == nil {
                t.CountryOfCitizenship = make([]CountryType, 0)
        }
        t.CountryOfCitizenship = append(t.CountryOfCitizenship, value)
        return t
}

func (t *CountryListType) AddNew() *CountryListType {
        if t == nil {
                t, _ = CountryListTypePointer(CountryListType{})
        }
        if t.CountryOfCitizenship == nil {
                t.CountryOfCitizenship = make([]CountryType, 0)
        }
        t.CountryOfCitizenship = append(t.CountryOfCitizenship, "")
        return t
}

func (t *CountryListType) Last() *CountryType {
  if t.CountryOfCitizenship == nil {
    t = t.AddNew()
    }
        return &(t.CountryOfCitizenship[len(t.CountryOfCitizenship)-1])
}

      func (t *CountryListType) AppendString(value string) *CountryListType {
        return t.Append((CountryType)(value))
        }

  func (t *PeriodAttendancesType) Append(value PeriodAttendanceType) *PeriodAttendancesType {
    
        if t == nil {
                t, _ = PeriodAttendancesTypePointer(PeriodAttendancesType{})
        }
        if t.PeriodAttendance == nil {
                t.PeriodAttendance = make([]PeriodAttendanceType, 0)
        }
        t.PeriodAttendance = append(t.PeriodAttendance, value)
        return t
}

func (t *PeriodAttendancesType) AddNew() *PeriodAttendancesType {
        if t == nil {
                t, _ = PeriodAttendancesTypePointer(PeriodAttendancesType{})
        }
        if t.PeriodAttendance == nil {
                t.PeriodAttendance = make([]PeriodAttendanceType, 0)
        }
        t.PeriodAttendance = append(t.PeriodAttendance, PeriodAttendanceType{})
        return t
}

func (t *PeriodAttendancesType) Last() *PeriodAttendanceType {
  if t.PeriodAttendance == nil {
    t = t.AddNew()
    }
        return &(t.PeriodAttendance[len(t.PeriodAttendance)-1])
}


  func (t *EvaluationsType) Append(value EvaluationType) *EvaluationsType {
    
        if t == nil {
                t, _ = EvaluationsTypePointer(EvaluationsType{})
        }
        if t.Evaluation == nil {
                t.Evaluation = make([]EvaluationType, 0)
        }
        t.Evaluation = append(t.Evaluation, value)
        return t
}

func (t *EvaluationsType) AddNew() *EvaluationsType {
        if t == nil {
                t, _ = EvaluationsTypePointer(EvaluationsType{})
        }
        if t.Evaluation == nil {
                t.Evaluation = make([]EvaluationType, 0)
        }
        t.Evaluation = append(t.Evaluation, EvaluationType{})
        return t
}

func (t *EvaluationsType) Last() *EvaluationType {
  if t.Evaluation == nil {
    t = t.AddNew()
    }
        return &(t.Evaluation[len(t.Evaluation)-1])
}


  func (t *SymptomListType) Append(value string) *SymptomListType {
    
        if t == nil {
                t, _ = SymptomListTypePointer(SymptomListType{})
        }
        if t.Symptom == nil {
                t.Symptom = make([]string, 0)
        }
        t.Symptom = append(t.Symptom, value)
        return t
}

func (t *SymptomListType) AddNew() *SymptomListType {
        if t == nil {
                t, _ = SymptomListTypePointer(SymptomListType{})
        }
        if t.Symptom == nil {
                t.Symptom = make([]string, 0)
        }
        t.Symptom = append(t.Symptom, "")
        return t
}

func (t *SymptomListType) Last() *string {
  if t.Symptom == nil {
    t = t.AddNew()
    }
        return &(t.Symptom[len(t.Symptom)-1])
}

      func (t *SymptomListType) AppendString(value string) *SymptomListType {
        return t.Append((string)(value))
        }

  func (t *FineInfoListType) Append(value FineInfoType) *FineInfoListType {
    
        if t == nil {
                t, _ = FineInfoListTypePointer(FineInfoListType{})
        }
        if t.FineInfo == nil {
                t.FineInfo = make([]FineInfoType, 0)
        }
        t.FineInfo = append(t.FineInfo, value)
        return t
}

func (t *FineInfoListType) AddNew() *FineInfoListType {
        if t == nil {
                t, _ = FineInfoListTypePointer(FineInfoListType{})
        }
        if t.FineInfo == nil {
                t.FineInfo = make([]FineInfoType, 0)
        }
        t.FineInfo = append(t.FineInfo, FineInfoType{})
        return t
}

func (t *FineInfoListType) Last() *FineInfoType {
  if t.FineInfo == nil {
    t = t.AddNew()
    }
        return &(t.FineInfo[len(t.FineInfo)-1])
}


  func (t *LearningStandardListType) Append(value LearningStandardType) *LearningStandardListType {
    
        if t == nil {
                t, _ = LearningStandardListTypePointer(LearningStandardListType{})
        }
        if t.LearningStandard == nil {
                t.LearningStandard = make([]LearningStandardType, 0)
        }
        t.LearningStandard = append(t.LearningStandard, value)
        return t
}

func (t *LearningStandardListType) AddNew() *LearningStandardListType {
        if t == nil {
                t, _ = LearningStandardListTypePointer(LearningStandardListType{})
        }
        if t.LearningStandard == nil {
                t.LearningStandard = make([]LearningStandardType, 0)
        }
        t.LearningStandard = append(t.LearningStandard, LearningStandardType{})
        return t
}

func (t *LearningStandardListType) Last() *LearningStandardType {
  if t.LearningStandard == nil {
    t = t.AddNew()
    }
        return &(t.LearningStandard[len(t.LearningStandard)-1])
}


  func (t *OtherIdListType) Append(value OtherIdType) *OtherIdListType {
    
        if t == nil {
                t, _ = OtherIdListTypePointer(OtherIdListType{})
        }
        if t.OtherId == nil {
                t.OtherId = make([]OtherIdType, 0)
        }
        t.OtherId = append(t.OtherId, value)
        return t
}

func (t *OtherIdListType) AddNew() *OtherIdListType {
        if t == nil {
                t, _ = OtherIdListTypePointer(OtherIdListType{})
        }
        if t.OtherId == nil {
                t.OtherId = make([]OtherIdType, 0)
        }
        t.OtherId = append(t.OtherId, OtherIdType{})
        return t
}

func (t *OtherIdListType) Last() *OtherIdType {
  if t.OtherId == nil {
    t = t.AddNew()
    }
        return &(t.OtherId[len(t.OtherId)-1])
}


  func (t *HouseholdListType) Append(value LocalIdType) *HouseholdListType {
    
        if t == nil {
                t, _ = HouseholdListTypePointer(HouseholdListType{})
        }
        if t.Household == nil {
                t.Household = make([]LocalIdType, 0)
        }
        t.Household = append(t.Household, value)
        return t
}

func (t *HouseholdListType) AddNew() *HouseholdListType {
        if t == nil {
                t, _ = HouseholdListTypePointer(HouseholdListType{})
        }
        if t.Household == nil {
                t.Household = make([]LocalIdType, 0)
        }
        t.Household = append(t.Household, "")
        return t
}

func (t *HouseholdListType) Last() *LocalIdType {
  if t.Household == nil {
    t = t.AddNew()
    }
        return &(t.Household[len(t.Household)-1])
}

      func (t *HouseholdListType) AppendString(value string) *HouseholdListType {
        return t.Append((LocalIdType)(value))
        }

  func (t *AGRoundListType) Append(value AGRoundType) *AGRoundListType {
    
        if t == nil {
                t, _ = AGRoundListTypePointer(AGRoundListType{})
        }
        if t.AGRound == nil {
                t.AGRound = make([]AGRoundType, 0)
        }
        t.AGRound = append(t.AGRound, value)
        return t
}

func (t *AGRoundListType) AddNew() *AGRoundListType {
        if t == nil {
                t, _ = AGRoundListTypePointer(AGRoundListType{})
        }
        if t.AGRound == nil {
                t.AGRound = make([]AGRoundType, 0)
        }
        t.AGRound = append(t.AGRound, AGRoundType{})
        return t
}

func (t *AGRoundListType) Last() *AGRoundType {
  if t.AGRound == nil {
    t = t.AddNew()
    }
        return &(t.AGRound[len(t.AGRound)-1])
}


  func (t *LearningObjectivesType) Append(value string) *LearningObjectivesType {
    
        if t == nil {
                t, _ = LearningObjectivesTypePointer(LearningObjectivesType{})
        }
        if t.LearningObjective == nil {
                t.LearningObjective = make([]string, 0)
        }
        t.LearningObjective = append(t.LearningObjective, value)
        return t
}

func (t *LearningObjectivesType) AddNew() *LearningObjectivesType {
        if t == nil {
                t, _ = LearningObjectivesTypePointer(LearningObjectivesType{})
        }
        if t.LearningObjective == nil {
                t.LearningObjective = make([]string, 0)
        }
        t.LearningObjective = append(t.LearningObjective, "")
        return t
}

func (t *LearningObjectivesType) Last() *string {
  if t.LearningObjective == nil {
    t = t.AddNew()
    }
        return &(t.LearningObjective[len(t.LearningObjective)-1])
}

      func (t *LearningObjectivesType) AppendString(value string) *LearningObjectivesType {
        return t.Append((string)(value))
        }

  func (t *FQItemListType) Append(value FQItemType) *FQItemListType {
    
        if t == nil {
                t, _ = FQItemListTypePointer(FQItemListType{})
        }
        if t.FQItem == nil {
                t.FQItem = make([]FQItemType, 0)
        }
        t.FQItem = append(t.FQItem, value)
        return t
}

func (t *FQItemListType) AddNew() *FQItemListType {
        if t == nil {
                t, _ = FQItemListTypePointer(FQItemListType{})
        }
        if t.FQItem == nil {
                t.FQItem = make([]FQItemType, 0)
        }
        t.FQItem = append(t.FQItem, FQItemType{})
        return t
}

func (t *FQItemListType) Last() *FQItemType {
  if t.FQItem == nil {
    t = t.AddNew()
    }
        return &(t.FQItem[len(t.FQItem)-1])
}


  func (t *StatsCohortListType) Append(value StatsCohortType) *StatsCohortListType {
    
        if t == nil {
                t, _ = StatsCohortListTypePointer(StatsCohortListType{})
        }
        if t.StatsCohort == nil {
                t.StatsCohort = make([]StatsCohortType, 0)
        }
        t.StatsCohort = append(t.StatsCohort, value)
        return t
}

func (t *StatsCohortListType) AddNew() *StatsCohortListType {
        if t == nil {
                t, _ = StatsCohortListTypePointer(StatsCohortListType{})
        }
        if t.StatsCohort == nil {
                t.StatsCohort = make([]StatsCohortType, 0)
        }
        t.StatsCohort = append(t.StatsCohort, StatsCohortType{})
        return t
}

func (t *StatsCohortListType) Last() *StatsCohortType {
  if t.StatsCohort == nil {
    t = t.AddNew()
    }
        return &(t.StatsCohort[len(t.StatsCohort)-1])
}


  func (t *JournalAdjustmentListType) Append(value JournalAdjustmentType) *JournalAdjustmentListType {
    
        if t == nil {
                t, _ = JournalAdjustmentListTypePointer(JournalAdjustmentListType{})
        }
        if t.JournalAdjustment == nil {
                t.JournalAdjustment = make([]JournalAdjustmentType, 0)
        }
        t.JournalAdjustment = append(t.JournalAdjustment, value)
        return t
}

func (t *JournalAdjustmentListType) AddNew() *JournalAdjustmentListType {
        if t == nil {
                t, _ = JournalAdjustmentListTypePointer(JournalAdjustmentListType{})
        }
        if t.JournalAdjustment == nil {
                t.JournalAdjustment = make([]JournalAdjustmentType, 0)
        }
        t.JournalAdjustment = append(t.JournalAdjustment, JournalAdjustmentType{})
        return t
}

func (t *JournalAdjustmentListType) Last() *JournalAdjustmentType {
  if t.JournalAdjustment == nil {
    t = t.AddNew()
    }
        return &(t.JournalAdjustment[len(t.JournalAdjustment)-1])
}


  func (t *SIF_ExtendedElementsType) Append(value SIF_ExtendedElementsType_SIF_ExtendedElement) *SIF_ExtendedElementsType {
    
        if t == nil {
                t, _ = SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{})
        }
        if t.SIF_ExtendedElement == nil {
                t.SIF_ExtendedElement = make([]SIF_ExtendedElementsType_SIF_ExtendedElement, 0)
        }
        t.SIF_ExtendedElement = append(t.SIF_ExtendedElement, value)
        return t
}

func (t *SIF_ExtendedElementsType) AddNew() *SIF_ExtendedElementsType {
        if t == nil {
                t, _ = SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{})
        }
        if t.SIF_ExtendedElement == nil {
                t.SIF_ExtendedElement = make([]SIF_ExtendedElementsType_SIF_ExtendedElement, 0)
        }
        t.SIF_ExtendedElement = append(t.SIF_ExtendedElement, SIF_ExtendedElementsType_SIF_ExtendedElement{})
        return t
}

func (t *SIF_ExtendedElementsType) Last() *SIF_ExtendedElementsType_SIF_ExtendedElement {
  if t.SIF_ExtendedElement == nil {
    t = t.AddNew()
    }
        return &(t.SIF_ExtendedElement[len(t.SIF_ExtendedElement)-1])
}


  func (t *ResourceUsage_ResourceReportLineList) Append(value ResourceUsage_ResourceReportLine) *ResourceUsage_ResourceReportLineList {
    
        if t == nil {
                t, _ = ResourceUsage_ResourceReportLineListPointer(ResourceUsage_ResourceReportLineList{})
        }
        if t.ResourceReportLine == nil {
                t.ResourceReportLine = make([]ResourceUsage_ResourceReportLine, 0)
        }
        t.ResourceReportLine = append(t.ResourceReportLine, value)
        return t
}

func (t *ResourceUsage_ResourceReportLineList) AddNew() *ResourceUsage_ResourceReportLineList {
        if t == nil {
                t, _ = ResourceUsage_ResourceReportLineListPointer(ResourceUsage_ResourceReportLineList{})
        }
        if t.ResourceReportLine == nil {
                t.ResourceReportLine = make([]ResourceUsage_ResourceReportLine, 0)
        }
        t.ResourceReportLine = append(t.ResourceReportLine, ResourceUsage_ResourceReportLine{})
        return t
}

func (t *ResourceUsage_ResourceReportLineList) Last() *ResourceUsage_ResourceReportLine {
  if t.ResourceReportLine == nil {
    t = t.AddNew()
    }
        return &(t.ResourceReportLine[len(t.ResourceReportLine)-1])
}


  func (t *TeachingGroupListType) Append(value string) *TeachingGroupListType {
    
        if t == nil {
                t, _ = TeachingGroupListTypePointer(TeachingGroupListType{})
        }
        if t.TeachingGroupRefId == nil {
                t.TeachingGroupRefId = make([]string, 0)
        }
        t.TeachingGroupRefId = append(t.TeachingGroupRefId, value)
        return t
}

func (t *TeachingGroupListType) AddNew() *TeachingGroupListType {
        if t == nil {
                t, _ = TeachingGroupListTypePointer(TeachingGroupListType{})
        }
        if t.TeachingGroupRefId == nil {
                t.TeachingGroupRefId = make([]string, 0)
        }
        t.TeachingGroupRefId = append(t.TeachingGroupRefId, "")
        return t
}

func (t *TeachingGroupListType) Last() *string {
  if t.TeachingGroupRefId == nil {
    t = t.AddNew()
    }
        return &(t.TeachingGroupRefId[len(t.TeachingGroupRefId)-1])
}

      func (t *TeachingGroupListType) AppendString(value string) *TeachingGroupListType {
        return t.Append((string)(value))
        }

  func (t *RelatedLearningStandardItemRefIdListType) Append(value RelatedLearningStandardItemRefIdType) *RelatedLearningStandardItemRefIdListType {
    
        if t == nil {
                t, _ = RelatedLearningStandardItemRefIdListTypePointer(RelatedLearningStandardItemRefIdListType{})
        }
        if t.LearningStandardItemRefId == nil {
                t.LearningStandardItemRefId = make([]RelatedLearningStandardItemRefIdType, 0)
        }
        t.LearningStandardItemRefId = append(t.LearningStandardItemRefId, value)
        return t
}

func (t *RelatedLearningStandardItemRefIdListType) AddNew() *RelatedLearningStandardItemRefIdListType {
        if t == nil {
                t, _ = RelatedLearningStandardItemRefIdListTypePointer(RelatedLearningStandardItemRefIdListType{})
        }
        if t.LearningStandardItemRefId == nil {
                t.LearningStandardItemRefId = make([]RelatedLearningStandardItemRefIdType, 0)
        }
        t.LearningStandardItemRefId = append(t.LearningStandardItemRefId, RelatedLearningStandardItemRefIdType{})
        return t
}

func (t *RelatedLearningStandardItemRefIdListType) Last() *RelatedLearningStandardItemRefIdType {
  if t.LearningStandardItemRefId == nil {
    t = t.AddNew()
    }
        return &(t.LearningStandardItemRefId[len(t.LearningStandardItemRefId)-1])
}


  func (t *PNPCodeListType) Append(value AUCodeSetsPNPCodeType) *PNPCodeListType {
    
        if t == nil {
                t, _ = PNPCodeListTypePointer(PNPCodeListType{})
        }
        if t.PNPCode == nil {
                t.PNPCode = make([]AUCodeSetsPNPCodeType, 0)
        }
        t.PNPCode = append(t.PNPCode, value)
        return t
}

func (t *PNPCodeListType) AddNew() *PNPCodeListType {
        if t == nil {
                t, _ = PNPCodeListTypePointer(PNPCodeListType{})
        }
        if t.PNPCode == nil {
                t.PNPCode = make([]AUCodeSetsPNPCodeType, 0)
        }
        t.PNPCode = append(t.PNPCode, "")
        return t
}

func (t *PNPCodeListType) Last() *AUCodeSetsPNPCodeType {
  if t.PNPCode == nil {
    t = t.AddNew()
    }
        return &(t.PNPCode[len(t.PNPCode)-1])
}

      func (t *PNPCodeListType) AppendString(value string) *PNPCodeListType {
        return t.Append((AUCodeSetsPNPCodeType)(value))
        }

  func (t *AlertMessagesType) Append(value AlertMessageType) *AlertMessagesType {
    
        if t == nil {
                t, _ = AlertMessagesTypePointer(AlertMessagesType{})
        }
        if t.AlertMessage == nil {
                t.AlertMessage = make([]AlertMessageType, 0)
        }
        t.AlertMessage = append(t.AlertMessage, value)
        return t
}

func (t *AlertMessagesType) AddNew() *AlertMessagesType {
        if t == nil {
                t, _ = AlertMessagesTypePointer(AlertMessagesType{})
        }
        if t.AlertMessage == nil {
                t.AlertMessage = make([]AlertMessageType, 0)
        }
        t.AlertMessage = append(t.AlertMessage, AlertMessageType{})
        return t
}

func (t *AlertMessagesType) Last() *AlertMessageType {
  if t.AlertMessage == nil {
    t = t.AddNew()
    }
        return &(t.AlertMessage[len(t.AlertMessage)-1])
}


  func (t *MedicationListType) Append(value MedicationType) *MedicationListType {
    
        if t == nil {
                t, _ = MedicationListTypePointer(MedicationListType{})
        }
        if t.Medication == nil {
                t.Medication = make([]MedicationType, 0)
        }
        t.Medication = append(t.Medication, value)
        return t
}

func (t *MedicationListType) AddNew() *MedicationListType {
        if t == nil {
                t, _ = MedicationListTypePointer(MedicationListType{})
        }
        if t.Medication == nil {
                t.Medication = make([]MedicationType, 0)
        }
        t.Medication = append(t.Medication, MedicationType{})
        return t
}

func (t *MedicationListType) Last() *MedicationType {
  if t.Medication == nil {
    t = t.AddNew()
    }
        return &(t.Medication[len(t.Medication)-1])
}


  func (t *StudentAttendanceCollectionReportingListType) Append(value StudentAttendanceCollectionReportingType) *StudentAttendanceCollectionReportingListType {
    
        if t == nil {
                t, _ = StudentAttendanceCollectionReportingListTypePointer(StudentAttendanceCollectionReportingListType{})
        }
        if t.StudentAttendanceCollectionReporting == nil {
                t.StudentAttendanceCollectionReporting = make([]StudentAttendanceCollectionReportingType, 0)
        }
        t.StudentAttendanceCollectionReporting = append(t.StudentAttendanceCollectionReporting, value)
        return t
}

func (t *StudentAttendanceCollectionReportingListType) AddNew() *StudentAttendanceCollectionReportingListType {
        if t == nil {
                t, _ = StudentAttendanceCollectionReportingListTypePointer(StudentAttendanceCollectionReportingListType{})
        }
        if t.StudentAttendanceCollectionReporting == nil {
                t.StudentAttendanceCollectionReporting = make([]StudentAttendanceCollectionReportingType, 0)
        }
        t.StudentAttendanceCollectionReporting = append(t.StudentAttendanceCollectionReporting, StudentAttendanceCollectionReportingType{})
        return t
}

func (t *StudentAttendanceCollectionReportingListType) Last() *StudentAttendanceCollectionReportingType {
  if t.StudentAttendanceCollectionReporting == nil {
    t = t.AddNew()
    }
        return &(t.StudentAttendanceCollectionReporting[len(t.StudentAttendanceCollectionReporting)-1])
}


  func (t *AssignmentListType) Append(value string) *AssignmentListType {
    
        if t == nil {
                t, _ = AssignmentListTypePointer(AssignmentListType{})
        }
        if t.GradingAssignmentRefId == nil {
                t.GradingAssignmentRefId = make([]string, 0)
        }
        t.GradingAssignmentRefId = append(t.GradingAssignmentRefId, value)
        return t
}

func (t *AssignmentListType) AddNew() *AssignmentListType {
        if t == nil {
                t, _ = AssignmentListTypePointer(AssignmentListType{})
        }
        if t.GradingAssignmentRefId == nil {
                t.GradingAssignmentRefId = make([]string, 0)
        }
        t.GradingAssignmentRefId = append(t.GradingAssignmentRefId, "")
        return t
}

func (t *AssignmentListType) Last() *string {
  if t.GradingAssignmentRefId == nil {
    t = t.AddNew()
    }
        return &(t.GradingAssignmentRefId[len(t.GradingAssignmentRefId)-1])
}

      func (t *AssignmentListType) AppendString(value string) *AssignmentListType {
        return t.Append((string)(value))
        }

  func (t *PaymentReceiptLineListType) Append(value PaymentReceiptLineType) *PaymentReceiptLineListType {
    
        if t == nil {
                t, _ = PaymentReceiptLineListTypePointer(PaymentReceiptLineListType{})
        }
        if t.PaymentReceiptLine == nil {
                t.PaymentReceiptLine = make([]PaymentReceiptLineType, 0)
        }
        t.PaymentReceiptLine = append(t.PaymentReceiptLine, value)
        return t
}

func (t *PaymentReceiptLineListType) AddNew() *PaymentReceiptLineListType {
        if t == nil {
                t, _ = PaymentReceiptLineListTypePointer(PaymentReceiptLineListType{})
        }
        if t.PaymentReceiptLine == nil {
                t.PaymentReceiptLine = make([]PaymentReceiptLineType, 0)
        }
        t.PaymentReceiptLine = append(t.PaymentReceiptLine, PaymentReceiptLineType{})
        return t
}

func (t *PaymentReceiptLineListType) Last() *PaymentReceiptLineType {
  if t.PaymentReceiptLine == nil {
    t = t.AddNew()
    }
        return &(t.PaymentReceiptLine[len(t.PaymentReceiptLine)-1])
}


  func (t *PasswordListType) Append(value PasswordListType_Password) *PasswordListType {
    
        if t == nil {
                t, _ = PasswordListTypePointer(PasswordListType{})
        }
        if t.Password == nil {
                t.Password = make([]PasswordListType_Password, 0)
        }
        t.Password = append(t.Password, value)
        return t
}

func (t *PasswordListType) AddNew() *PasswordListType {
        if t == nil {
                t, _ = PasswordListTypePointer(PasswordListType{})
        }
        if t.Password == nil {
                t.Password = make([]PasswordListType_Password, 0)
        }
        t.Password = append(t.Password, PasswordListType_Password{})
        return t
}

func (t *PasswordListType) Last() *PasswordListType_Password {
  if t.Password == nil {
    t = t.AddNew()
    }
        return &(t.Password[len(t.Password)-1])
}


  func (t *WellbeingDocumentListType) Append(value WellbeingDocumentType) *WellbeingDocumentListType {
    
        if t == nil {
                t, _ = WellbeingDocumentListTypePointer(WellbeingDocumentListType{})
        }
        if t.Document == nil {
                t.Document = make([]WellbeingDocumentType, 0)
        }
        t.Document = append(t.Document, value)
        return t
}

func (t *WellbeingDocumentListType) AddNew() *WellbeingDocumentListType {
        if t == nil {
                t, _ = WellbeingDocumentListTypePointer(WellbeingDocumentListType{})
        }
        if t.Document == nil {
                t.Document = make([]WellbeingDocumentType, 0)
        }
        t.Document = append(t.Document, WellbeingDocumentType{})
        return t
}

func (t *WellbeingDocumentListType) Last() *WellbeingDocumentType {
  if t.Document == nil {
    t = t.AddNew()
    }
        return &(t.Document[len(t.Document)-1])
}


  func (t *PhoneNumberListType) Append(value PhoneNumberType) *PhoneNumberListType {
    
        if t == nil {
                t, _ = PhoneNumberListTypePointer(PhoneNumberListType{})
        }
        if t.PhoneNumber == nil {
                t.PhoneNumber = make([]PhoneNumberType, 0)
        }
        t.PhoneNumber = append(t.PhoneNumber, value)
        return t
}

func (t *PhoneNumberListType) AddNew() *PhoneNumberListType {
        if t == nil {
                t, _ = PhoneNumberListTypePointer(PhoneNumberListType{})
        }
        if t.PhoneNumber == nil {
                t.PhoneNumber = make([]PhoneNumberType, 0)
        }
        t.PhoneNumber = append(t.PhoneNumber, PhoneNumberType{})
        return t
}

func (t *PhoneNumberListType) Last() *PhoneNumberType {
  if t.PhoneNumber == nil {
    t = t.AddNew()
    }
        return &(t.PhoneNumber[len(t.PhoneNumber)-1])
}


  func (t *FQReportingListType) Append(value FQReportingType) *FQReportingListType {
    
        if t == nil {
                t, _ = FQReportingListTypePointer(FQReportingListType{})
        }
        if t.FQReporting == nil {
                t.FQReporting = make([]FQReportingType, 0)
        }
        t.FQReporting = append(t.FQReporting, value)
        return t
}

func (t *FQReportingListType) AddNew() *FQReportingListType {
        if t == nil {
                t, _ = FQReportingListTypePointer(FQReportingListType{})
        }
        if t.FQReporting == nil {
                t.FQReporting = make([]FQReportingType, 0)
        }
        t.FQReporting = append(t.FQReporting, FQReportingType{})
        return t
}

func (t *FQReportingListType) Last() *FQReportingType {
  if t.FQReporting == nil {
    t = t.AddNew()
    }
        return &(t.FQReporting[len(t.FQReporting)-1])
}


  func (t *SubstituteItemListType) Append(value SubstituteItemType) *SubstituteItemListType {
    
        if t == nil {
                t, _ = SubstituteItemListTypePointer(SubstituteItemListType{})
        }
        if t.SubstituteItem == nil {
                t.SubstituteItem = make([]SubstituteItemType, 0)
        }
        t.SubstituteItem = append(t.SubstituteItem, value)
        return t
}

func (t *SubstituteItemListType) AddNew() *SubstituteItemListType {
        if t == nil {
                t, _ = SubstituteItemListTypePointer(SubstituteItemListType{})
        }
        if t.SubstituteItem == nil {
                t.SubstituteItem = make([]SubstituteItemType, 0)
        }
        t.SubstituteItem = append(t.SubstituteItem, SubstituteItemType{})
        return t
}

func (t *SubstituteItemListType) Last() *SubstituteItemType {
  if t.SubstituteItem == nil {
    t = t.AddNew()
    }
        return &(t.SubstituteItem[len(t.SubstituteItem)-1])
}


  func (t *StaffListType) Append(value string) *StaffListType {
    
        if t == nil {
                t, _ = StaffListTypePointer(StaffListType{})
        }
        if t.StaffPersonalRefId == nil {
                t.StaffPersonalRefId = make([]string, 0)
        }
        t.StaffPersonalRefId = append(t.StaffPersonalRefId, value)
        return t
}

func (t *StaffListType) AddNew() *StaffListType {
        if t == nil {
                t, _ = StaffListTypePointer(StaffListType{})
        }
        if t.StaffPersonalRefId == nil {
                t.StaffPersonalRefId = make([]string, 0)
        }
        t.StaffPersonalRefId = append(t.StaffPersonalRefId, "")
        return t
}

func (t *StaffListType) Last() *string {
  if t.StaffPersonalRefId == nil {
    t = t.AddNew()
    }
        return &(t.StaffPersonalRefId[len(t.StaffPersonalRefId)-1])
}

      func (t *StaffListType) AppendString(value string) *StaffListType {
        return t.Append((string)(value))
        }

  func (t *StimulusListType) Append(value StimulusType) *StimulusListType {
    
        if t == nil {
                t, _ = StimulusListTypePointer(StimulusListType{})
        }
        if t.Stimulus == nil {
                t.Stimulus = make([]StimulusType, 0)
        }
        t.Stimulus = append(t.Stimulus, value)
        return t
}

func (t *StimulusListType) AddNew() *StimulusListType {
        if t == nil {
                t, _ = StimulusListTypePointer(StimulusListType{})
        }
        if t.Stimulus == nil {
                t.Stimulus = make([]StimulusType, 0)
        }
        t.Stimulus = append(t.Stimulus, StimulusType{})
        return t
}

func (t *StimulusListType) Last() *StimulusType {
  if t.Stimulus == nil {
    t = t.AddNew()
    }
        return &(t.Stimulus[len(t.Stimulus)-1])
}


  func (t *PurchasingItemsType) Append(value PurchasingItemType) *PurchasingItemsType {
    
        if t == nil {
                t, _ = PurchasingItemsTypePointer(PurchasingItemsType{})
        }
        if t.PurchasingItem == nil {
                t.PurchasingItem = make([]PurchasingItemType, 0)
        }
        t.PurchasingItem = append(t.PurchasingItem, value)
        return t
}

func (t *PurchasingItemsType) AddNew() *PurchasingItemsType {
        if t == nil {
                t, _ = PurchasingItemsTypePointer(PurchasingItemsType{})
        }
        if t.PurchasingItem == nil {
                t.PurchasingItem = make([]PurchasingItemType, 0)
        }
        t.PurchasingItem = append(t.PurchasingItem, PurchasingItemType{})
        return t
}

func (t *PurchasingItemsType) Last() *PurchasingItemType {
  if t.PurchasingItem == nil {
    t = t.AddNew()
    }
        return &(t.PurchasingItem[len(t.PurchasingItem)-1])
}


  func (t *MedicalAlertMessagesType) Append(value MedicalAlertMessageType) *MedicalAlertMessagesType {
    
        if t == nil {
                t, _ = MedicalAlertMessagesTypePointer(MedicalAlertMessagesType{})
        }
        if t.MedicalAlertMessage == nil {
                t.MedicalAlertMessage = make([]MedicalAlertMessageType, 0)
        }
        t.MedicalAlertMessage = append(t.MedicalAlertMessage, value)
        return t
}

func (t *MedicalAlertMessagesType) AddNew() *MedicalAlertMessagesType {
        if t == nil {
                t, _ = MedicalAlertMessagesTypePointer(MedicalAlertMessagesType{})
        }
        if t.MedicalAlertMessage == nil {
                t.MedicalAlertMessage = make([]MedicalAlertMessageType, 0)
        }
        t.MedicalAlertMessage = append(t.MedicalAlertMessage, MedicalAlertMessageType{})
        return t
}

func (t *MedicalAlertMessagesType) Last() *MedicalAlertMessageType {
  if t.MedicalAlertMessage == nil {
    t = t.AddNew()
    }
        return &(t.MedicalAlertMessage[len(t.MedicalAlertMessage)-1])
}


  func (t *NAPTestletItemResponseListType) Append(value NAPTestletResponseItemType) *NAPTestletItemResponseListType {
    
        if t == nil {
                t, _ = NAPTestletItemResponseListTypePointer(NAPTestletItemResponseListType{})
        }
        if t.ItemResponse == nil {
                t.ItemResponse = make([]NAPTestletResponseItemType, 0)
        }
        t.ItemResponse = append(t.ItemResponse, value)
        return t
}

func (t *NAPTestletItemResponseListType) AddNew() *NAPTestletItemResponseListType {
        if t == nil {
                t, _ = NAPTestletItemResponseListTypePointer(NAPTestletItemResponseListType{})
        }
        if t.ItemResponse == nil {
                t.ItemResponse = make([]NAPTestletResponseItemType, 0)
        }
        t.ItemResponse = append(t.ItemResponse, NAPTestletResponseItemType{})
        return t
}

func (t *NAPTestletItemResponseListType) Last() *NAPTestletResponseItemType {
  if t.ItemResponse == nil {
    t = t.AddNew()
    }
        return &(t.ItemResponse[len(t.ItemResponse)-1])
}


  func (t *ExclusionRulesType) Append(value ExclusionRuleType) *ExclusionRulesType {
    
        if t == nil {
                t, _ = ExclusionRulesTypePointer(ExclusionRulesType{})
        }
        if t.ExclusionRule == nil {
                t.ExclusionRule = make([]ExclusionRuleType, 0)
        }
        t.ExclusionRule = append(t.ExclusionRule, value)
        return t
}

func (t *ExclusionRulesType) AddNew() *ExclusionRulesType {
        if t == nil {
                t, _ = ExclusionRulesTypePointer(ExclusionRulesType{})
        }
        if t.ExclusionRule == nil {
                t.ExclusionRule = make([]ExclusionRuleType, 0)
        }
        t.ExclusionRule = append(t.ExclusionRule, ExclusionRuleType{})
        return t
}

func (t *ExclusionRulesType) Last() *ExclusionRuleType {
  if t.ExclusionRule == nil {
    t = t.AddNew()
    }
        return &(t.ExclusionRule[len(t.ExclusionRule)-1])
}


  func (t *NAPWritingRubricListType) Append(value NAPWritingRubricType) *NAPWritingRubricListType {
    
        if t == nil {
                t, _ = NAPWritingRubricListTypePointer(NAPWritingRubricListType{})
        }
        if t.NAPWritingRubric == nil {
                t.NAPWritingRubric = make([]NAPWritingRubricType, 0)
        }
        t.NAPWritingRubric = append(t.NAPWritingRubric, value)
        return t
}

func (t *NAPWritingRubricListType) AddNew() *NAPWritingRubricListType {
        if t == nil {
                t, _ = NAPWritingRubricListTypePointer(NAPWritingRubricListType{})
        }
        if t.NAPWritingRubric == nil {
                t.NAPWritingRubric = make([]NAPWritingRubricType, 0)
        }
        t.NAPWritingRubric = append(t.NAPWritingRubric, NAPWritingRubricType{})
        return t
}

func (t *NAPWritingRubricListType) Last() *NAPWritingRubricType {
  if t.NAPWritingRubric == nil {
    t = t.AddNew()
    }
        return &(t.NAPWritingRubric[len(t.NAPWritingRubric)-1])
}


  func (t *StudentGradeMarkersListType) Append(value MarkerType) *StudentGradeMarkersListType {
    
        if t == nil {
                t, _ = StudentGradeMarkersListTypePointer(StudentGradeMarkersListType{})
        }
        if t.Marker == nil {
                t.Marker = make([]MarkerType, 0)
        }
        t.Marker = append(t.Marker, value)
        return t
}

func (t *StudentGradeMarkersListType) AddNew() *StudentGradeMarkersListType {
        if t == nil {
                t, _ = StudentGradeMarkersListTypePointer(StudentGradeMarkersListType{})
        }
        if t.Marker == nil {
                t.Marker = make([]MarkerType, 0)
        }
        t.Marker = append(t.Marker, MarkerType{})
        return t
}

func (t *StudentGradeMarkersListType) Last() *MarkerType {
  if t.Marker == nil {
    t = t.AddNew()
    }
        return &(t.Marker[len(t.Marker)-1])
}


  func (t *SchoolContactListType) Append(value SchoolContactType) *SchoolContactListType {
    
        if t == nil {
                t, _ = SchoolContactListTypePointer(SchoolContactListType{})
        }
        if t.SchoolContact == nil {
                t.SchoolContact = make([]SchoolContactType, 0)
        }
        t.SchoolContact = append(t.SchoolContact, value)
        return t
}

func (t *SchoolContactListType) AddNew() *SchoolContactListType {
        if t == nil {
                t, _ = SchoolContactListTypePointer(SchoolContactListType{})
        }
        if t.SchoolContact == nil {
                t.SchoolContact = make([]SchoolContactType, 0)
        }
        t.SchoolContact = append(t.SchoolContact, SchoolContactType{})
        return t
}

func (t *SchoolContactListType) Last() *SchoolContactType {
  if t.SchoolContact == nil {
    t = t.AddNew()
    }
        return &(t.SchoolContact[len(t.SchoolContact)-1])
}


  func (t *ScheduledTeacherListType) Append(value TeacherCoverType) *ScheduledTeacherListType {
    
        if t == nil {
                t, _ = ScheduledTeacherListTypePointer(ScheduledTeacherListType{})
        }
        if t.TeacherCover == nil {
                t.TeacherCover = make([]TeacherCoverType, 0)
        }
        t.TeacherCover = append(t.TeacherCover, value)
        return t
}

func (t *ScheduledTeacherListType) AddNew() *ScheduledTeacherListType {
        if t == nil {
                t, _ = ScheduledTeacherListTypePointer(ScheduledTeacherListType{})
        }
        if t.TeacherCover == nil {
                t.TeacherCover = make([]TeacherCoverType, 0)
        }
        t.TeacherCover = append(t.TeacherCover, TeacherCoverType{})
        return t
}

func (t *ScheduledTeacherListType) Last() *TeacherCoverType {
  if t.TeacherCover == nil {
    t = t.AddNew()
    }
        return &(t.TeacherCover[len(t.TeacherCover)-1])
}


  func (t *PlanRequiredListType) Append(value WellbeingPlanType) *PlanRequiredListType {
    
        if t == nil {
                t, _ = PlanRequiredListTypePointer(PlanRequiredListType{})
        }
        if t.Plan == nil {
                t.Plan = make([]WellbeingPlanType, 0)
        }
        t.Plan = append(t.Plan, value)
        return t
}

func (t *PlanRequiredListType) AddNew() *PlanRequiredListType {
        if t == nil {
                t, _ = PlanRequiredListTypePointer(PlanRequiredListType{})
        }
        if t.Plan == nil {
                t.Plan = make([]WellbeingPlanType, 0)
        }
        t.Plan = append(t.Plan, WellbeingPlanType{})
        return t
}

func (t *PlanRequiredListType) Last() *WellbeingPlanType {
  if t.Plan == nil {
    t = t.AddNew()
    }
        return &(t.Plan[len(t.Plan)-1])
}


  func (t *ContentDescriptionListType) Append(value string) *ContentDescriptionListType {
    
        if t == nil {
                t, _ = ContentDescriptionListTypePointer(ContentDescriptionListType{})
        }
        if t.ContentDescription == nil {
                t.ContentDescription = make([]string, 0)
        }
        t.ContentDescription = append(t.ContentDescription, value)
        return t
}

func (t *ContentDescriptionListType) AddNew() *ContentDescriptionListType {
        if t == nil {
                t, _ = ContentDescriptionListTypePointer(ContentDescriptionListType{})
        }
        if t.ContentDescription == nil {
                t.ContentDescription = make([]string, 0)
        }
        t.ContentDescription = append(t.ContentDescription, "")
        return t
}

func (t *ContentDescriptionListType) Last() *string {
  if t.ContentDescription == nil {
    t = t.AddNew()
    }
        return &(t.ContentDescription[len(t.ContentDescription)-1])
}

      func (t *ContentDescriptionListType) AppendString(value string) *ContentDescriptionListType {
        return t.Append((string)(value))
        }

  func (t *TimeTableScheduleCellListType) Append(value TimeTableScheduleCellType) *TimeTableScheduleCellListType {
    
        if t == nil {
                t, _ = TimeTableScheduleCellListTypePointer(TimeTableScheduleCellListType{})
        }
        if t.TimeTableScheduleCell == nil {
                t.TimeTableScheduleCell = make([]TimeTableScheduleCellType, 0)
        }
        t.TimeTableScheduleCell = append(t.TimeTableScheduleCell, value)
        return t
}

func (t *TimeTableScheduleCellListType) AddNew() *TimeTableScheduleCellListType {
        if t == nil {
                t, _ = TimeTableScheduleCellListTypePointer(TimeTableScheduleCellListType{})
        }
        if t.TimeTableScheduleCell == nil {
                t.TimeTableScheduleCell = make([]TimeTableScheduleCellType, 0)
        }
        t.TimeTableScheduleCell = append(t.TimeTableScheduleCell, TimeTableScheduleCellType{})
        return t
}

func (t *TimeTableScheduleCellListType) Last() *TimeTableScheduleCellType {
  if t.TimeTableScheduleCell == nil {
    t = t.AddNew()
    }
        return &(t.TimeTableScheduleCell[len(t.TimeTableScheduleCell)-1])
}


  func (t *ReligiousEventListType) Append(value ReligiousEventType) *ReligiousEventListType {
    
        if t == nil {
                t, _ = ReligiousEventListTypePointer(ReligiousEventListType{})
        }
        if t.ReligiousEvent == nil {
                t.ReligiousEvent = make([]ReligiousEventType, 0)
        }
        t.ReligiousEvent = append(t.ReligiousEvent, value)
        return t
}

func (t *ReligiousEventListType) AddNew() *ReligiousEventListType {
        if t == nil {
                t, _ = ReligiousEventListTypePointer(ReligiousEventListType{})
        }
        if t.ReligiousEvent == nil {
                t.ReligiousEvent = make([]ReligiousEventType, 0)
        }
        t.ReligiousEvent = append(t.ReligiousEvent, ReligiousEventType{})
        return t
}

func (t *ReligiousEventListType) Last() *ReligiousEventType {
  if t.ReligiousEvent == nil {
    t = t.AddNew()
    }
        return &(t.ReligiousEvent[len(t.ReligiousEvent)-1])
}

func (t *AUCodeSetsLanguageTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsLanguageTypeTypePointer(value interface{}) (*AUCodeSetsLanguageTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsLanguageTypeType:
 		return value.(*AUCodeSetsLanguageTypeType), true
        case AUCodeSetsLanguageTypeType:
 		v, _ := value.(AUCodeSetsLanguageTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsLanguageTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsLanguageTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsLanguageTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsNAPTestItemTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPTestItemTypeTypePointer(value interface{}) (*AUCodeSetsNAPTestItemTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPTestItemTypeType:
 		return value.(*AUCodeSetsNAPTestItemTypeType), true
        case AUCodeSetsNAPTestItemTypeType:
 		v, _ := value.(AUCodeSetsNAPTestItemTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPTestItemTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPTestItemTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPTestItemTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsSystemicStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSystemicStatusTypePointer(value interface{}) (*AUCodeSetsSystemicStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSystemicStatusType:
 		return value.(*AUCodeSetsSystemicStatusType), true
        case AUCodeSetsSystemicStatusType:
 		v, _ := value.(AUCodeSetsSystemicStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSystemicStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSystemicStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSystemicStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsFederalElectorateType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsFederalElectorateTypePointer(value interface{}) (*AUCodeSetsFederalElectorateType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsFederalElectorateType:
 		return value.(*AUCodeSetsFederalElectorateType), true
        case AUCodeSetsFederalElectorateType:
 		v, _ := value.(AUCodeSetsFederalElectorateType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsFederalElectorateType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsFederalElectorateType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsFederalElectorateType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsPrePrimaryHoursType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPrePrimaryHoursTypePointer(value interface{}) (*AUCodeSetsPrePrimaryHoursType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPrePrimaryHoursType:
 		return value.(*AUCodeSetsPrePrimaryHoursType), true
        case AUCodeSetsPrePrimaryHoursType:
 		v, _ := value.(AUCodeSetsPrePrimaryHoursType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPrePrimaryHoursType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPrePrimaryHoursType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPrePrimaryHoursType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsDwellingArrangementType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsDwellingArrangementTypePointer(value interface{}) (*AUCodeSetsDwellingArrangementType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsDwellingArrangementType:
 		return value.(*AUCodeSetsDwellingArrangementType), true
        case AUCodeSetsDwellingArrangementType:
 		v, _ := value.(AUCodeSetsDwellingArrangementType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsDwellingArrangementType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsDwellingArrangementType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsDwellingArrangementType\n", t, value)
 	}
 	return nil, false
  }


func (t *ObjectNameType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ObjectNameTypePointer(value interface{}) (*ObjectNameType, bool) {
switch t := value.(type) {
 	case *ObjectNameType:
 		return value.(*ObjectNameType), true
        case ObjectNameType:
 		v, _ := value.(ObjectNameType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ObjectNameType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ObjectNameType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ObjectNameType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsSourceCodeTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSourceCodeTypeTypePointer(value interface{}) (*AUCodeSetsSourceCodeTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSourceCodeTypeType:
 		return value.(*AUCodeSetsSourceCodeTypeType), true
        case AUCodeSetsSourceCodeTypeType:
 		v, _ := value.(AUCodeSetsSourceCodeTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSourceCodeTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSourceCodeTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSourceCodeTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsSchoolLocationType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolLocationTypePointer(value interface{}) (*AUCodeSetsSchoolLocationType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolLocationType:
 		return value.(*AUCodeSetsSchoolLocationType), true
        case AUCodeSetsSchoolLocationType:
 		v, _ := value.(AUCodeSetsSchoolLocationType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolLocationType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolLocationType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolLocationType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsDayValueCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsDayValueCodeTypePointer(value interface{}) (*AUCodeSetsDayValueCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsDayValueCodeType:
 		return value.(*AUCodeSetsDayValueCodeType), true
        case AUCodeSetsDayValueCodeType:
 		v, _ := value.(AUCodeSetsDayValueCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsDayValueCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsDayValueCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsDayValueCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsSchoolSectorCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolSectorCodeTypePointer(value interface{}) (*AUCodeSetsSchoolSectorCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolSectorCodeType:
 		return value.(*AUCodeSetsSchoolSectorCodeType), true
        case AUCodeSetsSchoolSectorCodeType:
 		v, _ := value.(AUCodeSetsSchoolSectorCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolSectorCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolSectorCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolSectorCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAddressTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAddressTypeTypePointer(value interface{}) (*AUCodeSetsAddressTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAddressTypeType:
 		return value.(*AUCodeSetsAddressTypeType), true
        case AUCodeSetsAddressTypeType:
 		v, _ := value.(AUCodeSetsAddressTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAddressTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAddressTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAddressTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsEmploymentTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEmploymentTypeTypePointer(value interface{}) (*AUCodeSetsEmploymentTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEmploymentTypeType:
 		return value.(*AUCodeSetsEmploymentTypeType), true
        case AUCodeSetsEmploymentTypeType:
 		v, _ := value.(AUCodeSetsEmploymentTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEmploymentTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEmploymentTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEmploymentTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsACStrandType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsACStrandTypePointer(value interface{}) (*AUCodeSetsACStrandType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsACStrandType:
 		return value.(*AUCodeSetsACStrandType), true
        case AUCodeSetsACStrandType:
 		v, _ := value.(AUCodeSetsACStrandType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsACStrandType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsACStrandType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsACStrandType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAustralianStandardClassificationOfLanguagesASCLTypePointer(value interface{}) (*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType:
 		return value.(*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType), true
        case AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType:
 		v, _ := value.(AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsSessionTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSessionTypeTypePointer(value interface{}) (*AUCodeSetsSessionTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSessionTypeType:
 		return value.(*AUCodeSetsSessionTypeType), true
        case AUCodeSetsSessionTypeType:
 		v, _ := value.(AUCodeSetsSessionTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSessionTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSessionTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSessionTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsEquipmentTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEquipmentTypeTypePointer(value interface{}) (*AUCodeSetsEquipmentTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEquipmentTypeType:
 		return value.(*AUCodeSetsEquipmentTypeType), true
        case AUCodeSetsEquipmentTypeType:
 		v, _ := value.(AUCodeSetsEquipmentTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEquipmentTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEquipmentTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEquipmentTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsWellbeingAppealStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingAppealStatusTypePointer(value interface{}) (*AUCodeSetsWellbeingAppealStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingAppealStatusType:
 		return value.(*AUCodeSetsWellbeingAppealStatusType), true
        case AUCodeSetsWellbeingAppealStatusType:
 		v, _ := value.(AUCodeSetsWellbeingAppealStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingAppealStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingAppealStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingAppealStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsWellbeingStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingStatusTypePointer(value interface{}) (*AUCodeSetsWellbeingStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingStatusType:
 		return value.(*AUCodeSetsWellbeingStatusType), true
        case AUCodeSetsWellbeingStatusType:
 		v, _ := value.(AUCodeSetsWellbeingStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *ObjectType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ObjectTypePointer(value interface{}) (*ObjectType, bool) {
switch t := value.(type) {
 	case *ObjectType:
 		return value.(*ObjectType), true
        case ObjectType:
 		v, _ := value.(ObjectType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ObjectType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ObjectType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ObjectType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsSexCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSexCodeTypePointer(value interface{}) (*AUCodeSetsSexCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSexCodeType:
 		return value.(*AUCodeSetsSexCodeType), true
        case AUCodeSetsSexCodeType:
 		v, _ := value.(AUCodeSetsSexCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSexCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSexCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSexCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsNameUsageTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNameUsageTypeTypePointer(value interface{}) (*AUCodeSetsNameUsageTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNameUsageTypeType:
 		return value.(*AUCodeSetsNameUsageTypeType), true
        case AUCodeSetsNameUsageTypeType:
 		v, _ := value.(AUCodeSetsNameUsageTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNameUsageTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNameUsageTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNameUsageTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsScheduledActivityTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsScheduledActivityTypeTypePointer(value interface{}) (*AUCodeSetsScheduledActivityTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsScheduledActivityTypeType:
 		return value.(*AUCodeSetsScheduledActivityTypeType), true
        case AUCodeSetsScheduledActivityTypeType:
 		v, _ := value.(AUCodeSetsScheduledActivityTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsScheduledActivityTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsScheduledActivityTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsScheduledActivityTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *Int) Int() int {
  return int((reflect.ValueOf(*t).Interface()).(Int))
  }

func IntPointer(value interface{}) (*Int, bool) {
switch t := value.(type) {
        case *Int:
                return value.(*Int), true
        case Int:
                v, _ := value.(Int)
                return &v, true
        case *int:
 		vstr, _ := value.(*int)
 		v := Int(*vstr)
 		return &v, true
        case int:
                vstr, _ := value.(int)
                v := Int(vstr)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Int\n", t, value)
        }
        return nil, false
  }

func (t *ExtendedContentType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ExtendedContentTypePointer(value interface{}) (*ExtendedContentType, bool) {
switch t := value.(type) {
 	case *ExtendedContentType:
 		return value.(*ExtendedContentType), true
        case ExtendedContentType:
 		v, _ := value.(ExtendedContentType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ExtendedContentType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ExtendedContentType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ExtendedContentType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsNAPTestDomainType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPTestDomainTypePointer(value interface{}) (*AUCodeSetsNAPTestDomainType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPTestDomainType:
 		return value.(*AUCodeSetsNAPTestDomainType), true
        case AUCodeSetsNAPTestDomainType:
 		v, _ := value.(AUCodeSetsNAPTestDomainType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPTestDomainType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPTestDomainType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPTestDomainType\n", t, value)
 	}
 	return nil, false
  }


func (t *StateProvinceIdType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func StateProvinceIdTypePointer(value interface{}) (*StateProvinceIdType, bool) {
switch t := value.(type) {
 	case *StateProvinceIdType:
 		return value.(*StateProvinceIdType), true
        case StateProvinceIdType:
 		v, _ := value.(StateProvinceIdType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := StateProvinceIdType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := StateProvinceIdType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to StateProvinceIdType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsPersonalisedPlanType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPersonalisedPlanTypePointer(value interface{}) (*AUCodeSetsPersonalisedPlanType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPersonalisedPlanType:
 		return value.(*AUCodeSetsPersonalisedPlanType), true
        case AUCodeSetsPersonalisedPlanType:
 		v, _ := value.(AUCodeSetsPersonalisedPlanType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPersonalisedPlanType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPersonalisedPlanType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPersonalisedPlanType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsPublicSchoolCatchmentStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPublicSchoolCatchmentStatusTypePointer(value interface{}) (*AUCodeSetsPublicSchoolCatchmentStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPublicSchoolCatchmentStatusType:
 		return value.(*AUCodeSetsPublicSchoolCatchmentStatusType), true
        case AUCodeSetsPublicSchoolCatchmentStatusType:
 		v, _ := value.(AUCodeSetsPublicSchoolCatchmentStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPublicSchoolCatchmentStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPublicSchoolCatchmentStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPublicSchoolCatchmentStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsActivityInvolvementCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsActivityInvolvementCodeTypePointer(value interface{}) (*AUCodeSetsActivityInvolvementCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsActivityInvolvementCodeType:
 		return value.(*AUCodeSetsActivityInvolvementCodeType), true
        case AUCodeSetsActivityInvolvementCodeType:
 		v, _ := value.(AUCodeSetsActivityInvolvementCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsActivityInvolvementCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsActivityInvolvementCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsActivityInvolvementCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *SchoolYearType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func SchoolYearTypePointer(value interface{}) (*SchoolYearType, bool) {
switch t := value.(type) {
 	case *SchoolYearType:
 		return value.(*SchoolYearType), true
        case SchoolYearType:
 		v, _ := value.(SchoolYearType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := SchoolYearType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := SchoolYearType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to SchoolYearType\n", t, value)
 	}
 	return nil, false
  }


func (t *PartialDateType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func PartialDateTypePointer(value interface{}) (*PartialDateType, bool) {
switch t := value.(type) {
 	case *PartialDateType:
 		return value.(*PartialDateType), true
        case PartialDateType:
 		v, _ := value.(PartialDateType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := PartialDateType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := PartialDateType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to PartialDateType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsTelephoneNumberTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsTelephoneNumberTypeTypePointer(value interface{}) (*AUCodeSetsTelephoneNumberTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsTelephoneNumberTypeType:
 		return value.(*AUCodeSetsTelephoneNumberTypeType), true
        case AUCodeSetsTelephoneNumberTypeType:
 		v, _ := value.(AUCodeSetsTelephoneNumberTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsTelephoneNumberTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsTelephoneNumberTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsTelephoneNumberTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsSchoolSystemType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolSystemTypePointer(value interface{}) (*AUCodeSetsSchoolSystemType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolSystemType:
 		return value.(*AUCodeSetsSchoolSystemType), true
        case AUCodeSetsSchoolSystemType:
 		v, _ := value.(AUCodeSetsSchoolSystemType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolSystemType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolSystemType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolSystemType\n", t, value)
 	}
 	return nil, false
  }


func (t *String) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func StringPointer(value interface{}) (*String, bool) {
switch t := value.(type) {
 	case *String:
 		return value.(*String), true
        case String:
 		v, _ := value.(String)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := String(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := String(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to String\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsYesOrNoCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsYesOrNoCategoryTypePointer(value interface{}) (*AUCodeSetsYesOrNoCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsYesOrNoCategoryType:
 		return value.(*AUCodeSetsYesOrNoCategoryType), true
        case AUCodeSetsYesOrNoCategoryType:
 		v, _ := value.(AUCodeSetsYesOrNoCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsYesOrNoCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsYesOrNoCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsYesOrNoCategoryType\n", t, value)
 	}
 	return nil, false
  }


func (t *StateProvinceType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func StateProvinceTypePointer(value interface{}) (*StateProvinceType, bool) {
switch t := value.(type) {
 	case *StateProvinceType:
 		return value.(*StateProvinceType), true
        case StateProvinceType:
 		v, _ := value.(StateProvinceType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := StateProvinceType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := StateProvinceType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to StateProvinceType\n", t, value)
 	}
 	return nil, false
  }


func (t *Bool) Bool() bool {
  return bool((reflect.ValueOf(*t).Interface()).(Bool))
  }

  func BoolPointer(value interface{}) (*Bool, bool) {
switch t := value.(type) {
        case *Bool:
                return value.(*Bool), true
        case Bool:
                v, _ := value.(Bool)
                return &v, true
        case *bool:
                vstr, _ := value.(*bool)
                v := Bool(*vstr)
                return &v, true
        case bool:
                vstr, _ := value.(bool)
                v := Bool(vstr)
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Bool\n", t, value)
        }
        return nil, false
  }

func (t *AUCodeSetsResourceUsageContentTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsResourceUsageContentTypeTypePointer(value interface{}) (*AUCodeSetsResourceUsageContentTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsResourceUsageContentTypeType:
 		return value.(*AUCodeSetsResourceUsageContentTypeType), true
        case AUCodeSetsResourceUsageContentTypeType:
 		v, _ := value.(AUCodeSetsResourceUsageContentTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsResourceUsageContentTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsResourceUsageContentTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsResourceUsageContentTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsNAPTestItemMarkingTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPTestItemMarkingTypeTypePointer(value interface{}) (*AUCodeSetsNAPTestItemMarkingTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPTestItemMarkingTypeType:
 		return value.(*AUCodeSetsNAPTestItemMarkingTypeType), true
        case AUCodeSetsNAPTestItemMarkingTypeType:
 		v, _ := value.(AUCodeSetsNAPTestItemMarkingTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPTestItemMarkingTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPTestItemMarkingTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPTestItemMarkingTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsEventCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEventCategoryTypePointer(value interface{}) (*AUCodeSetsEventCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEventCategoryType:
 		return value.(*AUCodeSetsEventCategoryType), true
        case AUCodeSetsEventCategoryType:
 		v, _ := value.(AUCodeSetsEventCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEventCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEventCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEventCategoryType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsRelationshipToStudentType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsRelationshipToStudentTypePointer(value interface{}) (*AUCodeSetsRelationshipToStudentType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsRelationshipToStudentType:
 		return value.(*AUCodeSetsRelationshipToStudentType), true
        case AUCodeSetsRelationshipToStudentType:
 		v, _ := value.(AUCodeSetsRelationshipToStudentType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsRelationshipToStudentType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsRelationshipToStudentType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsRelationshipToStudentType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAGContextQuestionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAGContextQuestionTypePointer(value interface{}) (*AUCodeSetsAGContextQuestionType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAGContextQuestionType:
 		return value.(*AUCodeSetsAGContextQuestionType), true
        case AUCodeSetsAGContextQuestionType:
 		v, _ := value.(AUCodeSetsAGContextQuestionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAGContextQuestionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAGContextQuestionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAGContextQuestionType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsExitWithdrawalTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsExitWithdrawalTypeTypePointer(value interface{}) (*AUCodeSetsExitWithdrawalTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsExitWithdrawalTypeType:
 		return value.(*AUCodeSetsExitWithdrawalTypeType), true
        case AUCodeSetsExitWithdrawalTypeType:
 		v, _ := value.(AUCodeSetsExitWithdrawalTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsExitWithdrawalTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsExitWithdrawalTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsExitWithdrawalTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsSchoolEducationLevelTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolEducationLevelTypeTypePointer(value interface{}) (*AUCodeSetsSchoolEducationLevelTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolEducationLevelTypeType:
 		return value.(*AUCodeSetsSchoolEducationLevelTypeType), true
        case AUCodeSetsSchoolEducationLevelTypeType:
 		v, _ := value.(AUCodeSetsSchoolEducationLevelTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolEducationLevelTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolEducationLevelTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolEducationLevelTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *HomeroomNumberType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func HomeroomNumberTypePointer(value interface{}) (*HomeroomNumberType, bool) {
switch t := value.(type) {
 	case *HomeroomNumberType:
 		return value.(*HomeroomNumberType), true
        case HomeroomNumberType:
 		v, _ := value.(HomeroomNumberType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := HomeroomNumberType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := HomeroomNumberType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to HomeroomNumberType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsActivityTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsActivityTypeTypePointer(value interface{}) (*AUCodeSetsActivityTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsActivityTypeType:
 		return value.(*AUCodeSetsActivityTypeType), true
        case AUCodeSetsActivityTypeType:
 		v, _ := value.(AUCodeSetsActivityTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsActivityTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsActivityTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsActivityTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsBoardingType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsBoardingTypePointer(value interface{}) (*AUCodeSetsBoardingType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsBoardingType:
 		return value.(*AUCodeSetsBoardingType), true
        case AUCodeSetsBoardingType:
 		v, _ := value.(AUCodeSetsBoardingType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsBoardingType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsBoardingType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsBoardingType\n", t, value)
 	}
 	return nil, false
  }


func (t *SelectedContentType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func SelectedContentTypePointer(value interface{}) (*SelectedContentType, bool) {
switch t := value.(type) {
 	case *SelectedContentType:
 		return value.(*SelectedContentType), true
        case SelectedContentType:
 		v, _ := value.(SelectedContentType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := SelectedContentType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := SelectedContentType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to SelectedContentType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsEmailTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEmailTypeTypePointer(value interface{}) (*AUCodeSetsEmailTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEmailTypeType:
 		return value.(*AUCodeSetsEmailTypeType), true
        case AUCodeSetsEmailTypeType:
 		v, _ := value.(AUCodeSetsEmailTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEmailTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEmailTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEmailTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsWellbeingCharacteristicCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingCharacteristicCategoryTypePointer(value interface{}) (*AUCodeSetsWellbeingCharacteristicCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingCharacteristicCategoryType:
 		return value.(*AUCodeSetsWellbeingCharacteristicCategoryType), true
        case AUCodeSetsWellbeingCharacteristicCategoryType:
 		v, _ := value.(AUCodeSetsWellbeingCharacteristicCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingCharacteristicCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingCharacteristicCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingCharacteristicCategoryType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsImmunisationCertificateStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsImmunisationCertificateStatusTypePointer(value interface{}) (*AUCodeSetsImmunisationCertificateStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsImmunisationCertificateStatusType:
 		return value.(*AUCodeSetsImmunisationCertificateStatusType), true
        case AUCodeSetsImmunisationCertificateStatusType:
 		v, _ := value.(AUCodeSetsImmunisationCertificateStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsImmunisationCertificateStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsImmunisationCertificateStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsImmunisationCertificateStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsSchoolCoEdStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolCoEdStatusTypePointer(value interface{}) (*AUCodeSetsSchoolCoEdStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolCoEdStatusType:
 		return value.(*AUCodeSetsSchoolCoEdStatusType), true
        case AUCodeSetsSchoolCoEdStatusType:
 		v, _ := value.(AUCodeSetsSchoolCoEdStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolCoEdStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolCoEdStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolCoEdStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *URIOrBinaryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func URIOrBinaryTypePointer(value interface{}) (*URIOrBinaryType, bool) {
switch t := value.(type) {
 	case *URIOrBinaryType:
 		return value.(*URIOrBinaryType), true
        case URIOrBinaryType:
 		v, _ := value.(URIOrBinaryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := URIOrBinaryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := URIOrBinaryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to URIOrBinaryType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsWellbeingCharacteristicSubCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingCharacteristicSubCategoryTypePointer(value interface{}) (*AUCodeSetsWellbeingCharacteristicSubCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingCharacteristicSubCategoryType:
 		return value.(*AUCodeSetsWellbeingCharacteristicSubCategoryType), true
        case AUCodeSetsWellbeingCharacteristicSubCategoryType:
 		v, _ := value.(AUCodeSetsWellbeingCharacteristicSubCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingCharacteristicSubCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingCharacteristicSubCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingCharacteristicSubCategoryType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSets0211ProgramAvailabilityType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSets0211ProgramAvailabilityTypePointer(value interface{}) (*AUCodeSets0211ProgramAvailabilityType, bool) {
switch t := value.(type) {
 	case *AUCodeSets0211ProgramAvailabilityType:
 		return value.(*AUCodeSets0211ProgramAvailabilityType), true
        case AUCodeSets0211ProgramAvailabilityType:
 		v, _ := value.(AUCodeSets0211ProgramAvailabilityType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSets0211ProgramAvailabilityType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSets0211ProgramAvailabilityType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSets0211ProgramAvailabilityType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsExitWithdrawalStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsExitWithdrawalStatusTypePointer(value interface{}) (*AUCodeSetsExitWithdrawalStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsExitWithdrawalStatusType:
 		return value.(*AUCodeSetsExitWithdrawalStatusType), true
        case AUCodeSetsExitWithdrawalStatusType:
 		v, _ := value.(AUCodeSetsExitWithdrawalStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsExitWithdrawalStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsExitWithdrawalStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsExitWithdrawalStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsNonSchoolEducationType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNonSchoolEducationTypePointer(value interface{}) (*AUCodeSetsNonSchoolEducationType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNonSchoolEducationType:
 		return value.(*AUCodeSetsNonSchoolEducationType), true
        case AUCodeSetsNonSchoolEducationType:
 		v, _ := value.(AUCodeSetsNonSchoolEducationType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNonSchoolEducationType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNonSchoolEducationType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNonSchoolEducationType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsStateTerritoryCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsStateTerritoryCodeTypePointer(value interface{}) (*AUCodeSetsStateTerritoryCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsStateTerritoryCodeType:
 		return value.(*AUCodeSetsStateTerritoryCodeType), true
        case AUCodeSetsStateTerritoryCodeType:
 		v, _ := value.(AUCodeSetsStateTerritoryCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsStateTerritoryCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsStateTerritoryCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsStateTerritoryCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *LocalIdType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func LocalIdTypePointer(value interface{}) (*LocalIdType, bool) {
switch t := value.(type) {
 	case *LocalIdType:
 		return value.(*LocalIdType), true
        case LocalIdType:
 		v, _ := value.(LocalIdType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := LocalIdType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := LocalIdType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to LocalIdType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsStaffActivityType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsStaffActivityTypePointer(value interface{}) (*AUCodeSetsStaffActivityType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsStaffActivityType:
 		return value.(*AUCodeSetsStaffActivityType), true
        case AUCodeSetsStaffActivityType:
 		v, _ := value.(AUCodeSetsStaffActivityType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsStaffActivityType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsStaffActivityType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsStaffActivityType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAssessmentReportingMethodType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAssessmentReportingMethodTypePointer(value interface{}) (*AUCodeSetsAssessmentReportingMethodType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAssessmentReportingMethodType:
 		return value.(*AUCodeSetsAssessmentReportingMethodType), true
        case AUCodeSetsAssessmentReportingMethodType:
 		v, _ := value.(AUCodeSetsAssessmentReportingMethodType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAssessmentReportingMethodType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAssessmentReportingMethodType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAssessmentReportingMethodType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsWellbeingEventCategoryClassType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingEventCategoryClassTypePointer(value interface{}) (*AUCodeSetsWellbeingEventCategoryClassType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingEventCategoryClassType:
 		return value.(*AUCodeSetsWellbeingEventCategoryClassType), true
        case AUCodeSetsWellbeingEventCategoryClassType:
 		v, _ := value.(AUCodeSetsWellbeingEventCategoryClassType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingEventCategoryClassType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingEventCategoryClassType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingEventCategoryClassType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsNAPResponseCorrectnessType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPResponseCorrectnessTypePointer(value interface{}) (*AUCodeSetsNAPResponseCorrectnessType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPResponseCorrectnessType:
 		return value.(*AUCodeSetsNAPResponseCorrectnessType), true
        case AUCodeSetsNAPResponseCorrectnessType:
 		v, _ := value.(AUCodeSetsNAPResponseCorrectnessType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPResponseCorrectnessType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPResponseCorrectnessType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPResponseCorrectnessType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsEducationLevelType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEducationLevelTypePointer(value interface{}) (*AUCodeSetsEducationLevelType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEducationLevelType:
 		return value.(*AUCodeSetsEducationLevelType), true
        case AUCodeSetsEducationLevelType:
 		v, _ := value.(AUCodeSetsEducationLevelType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEducationLevelType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEducationLevelType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEducationLevelType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsTeacherCoverCreditType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsTeacherCoverCreditTypePointer(value interface{}) (*AUCodeSetsTeacherCoverCreditType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsTeacherCoverCreditType:
 		return value.(*AUCodeSetsTeacherCoverCreditType), true
        case AUCodeSetsTeacherCoverCreditType:
 		v, _ := value.(AUCodeSetsTeacherCoverCreditType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsTeacherCoverCreditType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsTeacherCoverCreditType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsTeacherCoverCreditType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsEnrollmentTimeFrameType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEnrollmentTimeFrameTypePointer(value interface{}) (*AUCodeSetsEnrollmentTimeFrameType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEnrollmentTimeFrameType:
 		return value.(*AUCodeSetsEnrollmentTimeFrameType), true
        case AUCodeSetsEnrollmentTimeFrameType:
 		v, _ := value.(AUCodeSetsEnrollmentTimeFrameType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEnrollmentTimeFrameType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEnrollmentTimeFrameType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEnrollmentTimeFrameType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAustralianTimeZoneType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAustralianTimeZoneTypePointer(value interface{}) (*AUCodeSetsAustralianTimeZoneType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAustralianTimeZoneType:
 		return value.(*AUCodeSetsAustralianTimeZoneType), true
        case AUCodeSetsAustralianTimeZoneType:
 		v, _ := value.(AUCodeSetsAustralianTimeZoneType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAustralianTimeZoneType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAustralianTimeZoneType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAustralianTimeZoneType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsPermissionCategoryCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPermissionCategoryCodeTypePointer(value interface{}) (*AUCodeSetsPermissionCategoryCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPermissionCategoryCodeType:
 		return value.(*AUCodeSetsPermissionCategoryCodeType), true
        case AUCodeSetsPermissionCategoryCodeType:
 		v, _ := value.(AUCodeSetsPermissionCategoryCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPermissionCategoryCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPermissionCategoryCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPermissionCategoryCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *ProjectedGraduationYearType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ProjectedGraduationYearTypePointer(value interface{}) (*ProjectedGraduationYearType, bool) {
switch t := value.(type) {
 	case *ProjectedGraduationYearType:
 		return value.(*ProjectedGraduationYearType), true
        case ProjectedGraduationYearType:
 		v, _ := value.(ProjectedGraduationYearType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ProjectedGraduationYearType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ProjectedGraduationYearType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ProjectedGraduationYearType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSets0792IdentificationProcedureType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSets0792IdentificationProcedureTypePointer(value interface{}) (*AUCodeSets0792IdentificationProcedureType, bool) {
switch t := value.(type) {
 	case *AUCodeSets0792IdentificationProcedureType:
 		return value.(*AUCodeSets0792IdentificationProcedureType), true
        case AUCodeSets0792IdentificationProcedureType:
 		v, _ := value.(AUCodeSets0792IdentificationProcedureType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSets0792IdentificationProcedureType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSets0792IdentificationProcedureType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSets0792IdentificationProcedureType\n", t, value)
 	}
 	return nil, false
  }


func (t *DefinedProtocolsType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func DefinedProtocolsTypePointer(value interface{}) (*DefinedProtocolsType, bool) {
switch t := value.(type) {
 	case *DefinedProtocolsType:
 		return value.(*DefinedProtocolsType), true
        case DefinedProtocolsType:
 		v, _ := value.(DefinedProtocolsType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := DefinedProtocolsType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := DefinedProtocolsType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to DefinedProtocolsType\n", t, value)
 	}
 	return nil, false
  }


func (t *BirthDateType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func BirthDateTypePointer(value interface{}) (*BirthDateType, bool) {
switch t := value.(type) {
 	case *BirthDateType:
 		return value.(*BirthDateType), true
        case BirthDateType:
 		v, _ := value.(BirthDateType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := BirthDateType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := BirthDateType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to BirthDateType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsSuspensionCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSuspensionCategoryTypePointer(value interface{}) (*AUCodeSetsSuspensionCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSuspensionCategoryType:
 		return value.(*AUCodeSetsSuspensionCategoryType), true
        case AUCodeSetsSuspensionCategoryType:
 		v, _ := value.(AUCodeSetsSuspensionCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSuspensionCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSuspensionCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSuspensionCategoryType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAttendanceStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAttendanceStatusTypePointer(value interface{}) (*AUCodeSetsAttendanceStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAttendanceStatusType:
 		return value.(*AUCodeSetsAttendanceStatusType), true
        case AUCodeSetsAttendanceStatusType:
 		v, _ := value.(AUCodeSetsAttendanceStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAttendanceStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAttendanceStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAttendanceStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAttendanceCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAttendanceCodeTypePointer(value interface{}) (*AUCodeSetsAttendanceCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAttendanceCodeType:
 		return value.(*AUCodeSetsAttendanceCodeType), true
        case AUCodeSetsAttendanceCodeType:
 		v, _ := value.(AUCodeSetsAttendanceCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAttendanceCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAttendanceCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAttendanceCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsGroupCategoryCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsGroupCategoryCodeTypePointer(value interface{}) (*AUCodeSetsGroupCategoryCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsGroupCategoryCodeType:
 		return value.(*AUCodeSetsGroupCategoryCodeType), true
        case AUCodeSetsGroupCategoryCodeType:
 		v, _ := value.(AUCodeSetsGroupCategoryCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsGroupCategoryCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsGroupCategoryCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsGroupCategoryCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsYearLevelCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsYearLevelCodeTypePointer(value interface{}) (*AUCodeSetsYearLevelCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsYearLevelCodeType:
 		return value.(*AUCodeSetsYearLevelCodeType), true
        case AUCodeSetsYearLevelCodeType:
 		v, _ := value.(AUCodeSetsYearLevelCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsYearLevelCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsYearLevelCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsYearLevelCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsStandardAustralianClassificationOfCountriesSACCType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsStandardAustralianClassificationOfCountriesSACCTypePointer(value interface{}) (*AUCodeSetsStandardAustralianClassificationOfCountriesSACCType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsStandardAustralianClassificationOfCountriesSACCType:
 		return value.(*AUCodeSetsStandardAustralianClassificationOfCountriesSACCType), true
        case AUCodeSetsStandardAustralianClassificationOfCountriesSACCType:
 		v, _ := value.(AUCodeSetsStandardAustralianClassificationOfCountriesSACCType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsStandardAustralianClassificationOfCountriesSACCType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsStandardAustralianClassificationOfCountriesSACCType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsStandardAustralianClassificationOfCountriesSACCType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsWellbeingResponseCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingResponseCategoryTypePointer(value interface{}) (*AUCodeSetsWellbeingResponseCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingResponseCategoryType:
 		return value.(*AUCodeSetsWellbeingResponseCategoryType), true
        case AUCodeSetsWellbeingResponseCategoryType:
 		v, _ := value.(AUCodeSetsWellbeingResponseCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingResponseCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingResponseCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingResponseCategoryType\n", t, value)
 	}
 	return nil, false
  }


func (t *OnTimeGraduationYearType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func OnTimeGraduationYearTypePointer(value interface{}) (*OnTimeGraduationYearType, bool) {
switch t := value.(type) {
 	case *OnTimeGraduationYearType:
 		return value.(*OnTimeGraduationYearType), true
        case OnTimeGraduationYearType:
 		v, _ := value.(OnTimeGraduationYearType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := OnTimeGraduationYearType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := OnTimeGraduationYearType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to OnTimeGraduationYearType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAddressRoleType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAddressRoleTypePointer(value interface{}) (*AUCodeSetsAddressRoleType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAddressRoleType:
 		return value.(*AUCodeSetsAddressRoleType), true
        case AUCodeSetsAddressRoleType:
 		v, _ := value.(AUCodeSetsAddressRoleType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAddressRoleType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAddressRoleType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAddressRoleType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsNAPJurisdictionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPJurisdictionTypePointer(value interface{}) (*AUCodeSetsNAPJurisdictionType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPJurisdictionType:
 		return value.(*AUCodeSetsNAPJurisdictionType), true
        case AUCodeSetsNAPJurisdictionType:
 		v, _ := value.(AUCodeSetsNAPJurisdictionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPJurisdictionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPJurisdictionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPJurisdictionType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsCalendarEventType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsCalendarEventTypePointer(value interface{}) (*AUCodeSetsCalendarEventType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsCalendarEventType:
 		return value.(*AUCodeSetsCalendarEventType), true
        case AUCodeSetsCalendarEventType:
 		v, _ := value.(AUCodeSetsCalendarEventType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsCalendarEventType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsCalendarEventType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsCalendarEventType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsProgressLevelType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsProgressLevelTypePointer(value interface{}) (*AUCodeSetsProgressLevelType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsProgressLevelType:
 		return value.(*AUCodeSetsProgressLevelType), true
        case AUCodeSetsProgressLevelType:
 		v, _ := value.(AUCodeSetsProgressLevelType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsProgressLevelType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsProgressLevelType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsProgressLevelType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsStaffStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsStaffStatusTypePointer(value interface{}) (*AUCodeSetsStaffStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsStaffStatusType:
 		return value.(*AUCodeSetsStaffStatusType), true
        case AUCodeSetsStaffStatusType:
 		v, _ := value.(AUCodeSetsStaffStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsStaffStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsStaffStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsStaffStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsStudentFamilyProgramTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsStudentFamilyProgramTypeTypePointer(value interface{}) (*AUCodeSetsStudentFamilyProgramTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsStudentFamilyProgramTypeType:
 		return value.(*AUCodeSetsStudentFamilyProgramTypeType), true
        case AUCodeSetsStudentFamilyProgramTypeType:
 		v, _ := value.(AUCodeSetsStudentFamilyProgramTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsStudentFamilyProgramTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsStudentFamilyProgramTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsStudentFamilyProgramTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *VersionWithWildcardsType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func VersionWithWildcardsTypePointer(value interface{}) (*VersionWithWildcardsType, bool) {
switch t := value.(type) {
 	case *VersionWithWildcardsType:
 		return value.(*VersionWithWildcardsType), true
        case VersionWithWildcardsType:
 		v, _ := value.(VersionWithWildcardsType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := VersionWithWildcardsType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := VersionWithWildcardsType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to VersionWithWildcardsType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGTypePointer(value interface{}) (*AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType:
 		return value.(*AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType), true
        case AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType:
 		v, _ := value.(AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsEducationAgencyTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEducationAgencyTypeTypePointer(value interface{}) (*AUCodeSetsEducationAgencyTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEducationAgencyTypeType:
 		return value.(*AUCodeSetsEducationAgencyTypeType), true
        case AUCodeSetsEducationAgencyTypeType:
 		v, _ := value.(AUCodeSetsEducationAgencyTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEducationAgencyTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEducationAgencyTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEducationAgencyTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsNAPTestTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPTestTypeTypePointer(value interface{}) (*AUCodeSetsNAPTestTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPTestTypeType:
 		return value.(*AUCodeSetsNAPTestTypeType), true
        case AUCodeSetsNAPTestTypeType:
 		v, _ := value.(AUCodeSetsNAPTestTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPTestTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPTestTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPTestTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *RefIdType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func RefIdTypePointer(value interface{}) (*RefIdType, bool) {
switch t := value.(type) {
 	case *RefIdType:
 		return value.(*RefIdType), true
        case RefIdType:
 		v, _ := value.(RefIdType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := RefIdType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := RefIdType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to RefIdType\n", t, value)
 	}
 	return nil, false
  }


func (t *ISO4217CurrencyNamesAndCodeElementsType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ISO4217CurrencyNamesAndCodeElementsTypePointer(value interface{}) (*ISO4217CurrencyNamesAndCodeElementsType, bool) {
switch t := value.(type) {
 	case *ISO4217CurrencyNamesAndCodeElementsType:
 		return value.(*ISO4217CurrencyNamesAndCodeElementsType), true
        case ISO4217CurrencyNamesAndCodeElementsType:
 		v, _ := value.(ISO4217CurrencyNamesAndCodeElementsType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ISO4217CurrencyNamesAndCodeElementsType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ISO4217CurrencyNamesAndCodeElementsType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ISO4217CurrencyNamesAndCodeElementsType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsProgramFundingSourceCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsProgramFundingSourceCodeTypePointer(value interface{}) (*AUCodeSetsProgramFundingSourceCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsProgramFundingSourceCodeType:
 		return value.(*AUCodeSetsProgramFundingSourceCodeType), true
        case AUCodeSetsProgramFundingSourceCodeType:
 		v, _ := value.(AUCodeSetsProgramFundingSourceCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsProgramFundingSourceCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsProgramFundingSourceCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsProgramFundingSourceCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsMediumOfInstructionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsMediumOfInstructionTypePointer(value interface{}) (*AUCodeSetsMediumOfInstructionType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsMediumOfInstructionType:
 		return value.(*AUCodeSetsMediumOfInstructionType), true
        case AUCodeSetsMediumOfInstructionType:
 		v, _ := value.(AUCodeSetsMediumOfInstructionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsMediumOfInstructionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsMediumOfInstructionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsMediumOfInstructionType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsFTPTStatusCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsFTPTStatusCodeTypePointer(value interface{}) (*AUCodeSetsFTPTStatusCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsFTPTStatusCodeType:
 		return value.(*AUCodeSetsFTPTStatusCodeType), true
        case AUCodeSetsFTPTStatusCodeType:
 		v, _ := value.(AUCodeSetsFTPTStatusCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsFTPTStatusCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsFTPTStatusCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsFTPTStatusCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAGSubmissionStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAGSubmissionStatusTypePointer(value interface{}) (*AUCodeSetsAGSubmissionStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAGSubmissionStatusType:
 		return value.(*AUCodeSetsAGSubmissionStatusType), true
        case AUCodeSetsAGSubmissionStatusType:
 		v, _ := value.(AUCodeSetsAGSubmissionStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAGSubmissionStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAGSubmissionStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAGSubmissionStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *ServiceNameType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ServiceNameTypePointer(value interface{}) (*ServiceNameType, bool) {
switch t := value.(type) {
 	case *ServiceNameType:
 		return value.(*ServiceNameType), true
        case ServiceNameType:
 		v, _ := value.(ServiceNameType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ServiceNameType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ServiceNameType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ServiceNameType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsNAPParticipationCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPParticipationCodeTypePointer(value interface{}) (*AUCodeSetsNAPParticipationCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPParticipationCodeType:
 		return value.(*AUCodeSetsNAPParticipationCodeType), true
        case AUCodeSetsNAPParticipationCodeType:
 		v, _ := value.(AUCodeSetsNAPParticipationCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPParticipationCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPParticipationCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPParticipationCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsPermanentResidentStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPermanentResidentStatusTypePointer(value interface{}) (*AUCodeSetsPermanentResidentStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPermanentResidentStatusType:
 		return value.(*AUCodeSetsPermanentResidentStatusType), true
        case AUCodeSetsPermanentResidentStatusType:
 		v, _ := value.(AUCodeSetsPermanentResidentStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPermanentResidentStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPermanentResidentStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPermanentResidentStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsFFPOSStatusCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsFFPOSStatusCodeTypePointer(value interface{}) (*AUCodeSetsFFPOSStatusCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsFFPOSStatusCodeType:
 		return value.(*AUCodeSetsFFPOSStatusCodeType), true
        case AUCodeSetsFFPOSStatusCodeType:
 		v, _ := value.(AUCodeSetsFFPOSStatusCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsFFPOSStatusCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsFFPOSStatusCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsFFPOSStatusCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsPictureSourceType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPictureSourceTypePointer(value interface{}) (*AUCodeSetsPictureSourceType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPictureSourceType:
 		return value.(*AUCodeSetsPictureSourceType), true
        case AUCodeSetsPictureSourceType:
 		v, _ := value.(AUCodeSetsPictureSourceType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPictureSourceType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPictureSourceType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPictureSourceType\n", t, value)
 	}
 	return nil, false
  }


func (t *GUIDType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func GUIDTypePointer(value interface{}) (*GUIDType, bool) {
switch t := value.(type) {
 	case *GUIDType:
 		return value.(*GUIDType), true
        case GUIDType:
 		v, _ := value.(GUIDType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := GUIDType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := GUIDType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to GUIDType\n", t, value)
 	}
 	return nil, false
  }


func (t *Float) Float() float64 {
  return float64((reflect.ValueOf(*t).Interface()).(Float))
  }

   func FloatPointer(value interface{}) (*Float, bool) {
switch t := value.(type) {
        case *Float:
                return value.(*Float), true
        case Float:
                v, _ := value.(Float)
                return &v, true
        case *float64:
                vstr, _ := value.(*float64)
                v := Float(*vstr)
                return &v, true
        case float64:
                vstr, _ := value.(float64)
                v := Float(vstr)
                return &v, true
        case *float32:
                vstr, _ := value.(*float32)
                v := Float(float64(*vstr))
                return &v, true
        case float32:
                vstr, _ := value.(float32)
                v := Float(float64(vstr))
                return &v, true
        default:
                fmt.Printf("Warning: cannot resolve %T (%v) to Float\n", t, value)
        }
        return nil, false
  }
func (t *AUCodeSetsPNPCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsPNPCodeTypePointer(value interface{}) (*AUCodeSetsPNPCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsPNPCodeType:
 		return value.(*AUCodeSetsPNPCodeType), true
        case AUCodeSetsPNPCodeType:
 		v, _ := value.(AUCodeSetsPNPCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsPNPCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsPNPCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsPNPCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAGCollectionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAGCollectionTypePointer(value interface{}) (*AUCodeSetsAGCollectionType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAGCollectionType:
 		return value.(*AUCodeSetsAGCollectionType), true
        case AUCodeSetsAGCollectionType:
 		v, _ := value.(AUCodeSetsAGCollectionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAGCollectionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAGCollectionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAGCollectionType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsSchoolFocusCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolFocusCodeTypePointer(value interface{}) (*AUCodeSetsSchoolFocusCodeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolFocusCodeType:
 		return value.(*AUCodeSetsSchoolFocusCodeType), true
        case AUCodeSetsSchoolFocusCodeType:
 		v, _ := value.(AUCodeSetsSchoolFocusCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolFocusCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolFocusCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolFocusCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsWellbeingEventLocationType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingEventLocationTypePointer(value interface{}) (*AUCodeSetsWellbeingEventLocationType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingEventLocationType:
 		return value.(*AUCodeSetsWellbeingEventLocationType), true
        case AUCodeSetsWellbeingEventLocationType:
 		v, _ := value.(AUCodeSetsWellbeingEventLocationType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingEventLocationType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingEventLocationType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingEventLocationType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsWellbeingAlertCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingAlertCategoryTypePointer(value interface{}) (*AUCodeSetsWellbeingAlertCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingAlertCategoryType:
 		return value.(*AUCodeSetsWellbeingAlertCategoryType), true
        case AUCodeSetsWellbeingAlertCategoryType:
 		v, _ := value.(AUCodeSetsWellbeingAlertCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingAlertCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingAlertCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingAlertCategoryType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsEntryTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEntryTypeTypePointer(value interface{}) (*AUCodeSetsEntryTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEntryTypeType:
 		return value.(*AUCodeSetsEntryTypeType), true
        case AUCodeSetsEntryTypeType:
 		v, _ := value.(AUCodeSetsEntryTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEntryTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEntryTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEntryTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *CountryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func CountryTypePointer(value interface{}) (*CountryType, bool) {
switch t := value.(type) {
 	case *CountryType:
 		return value.(*CountryType), true
        case CountryType:
 		v, _ := value.(CountryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := CountryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := CountryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to CountryType\n", t, value)
 	}
 	return nil, false
  }


func (t *VersionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func VersionTypePointer(value interface{}) (*VersionType, bool) {
switch t := value.(type) {
 	case *VersionType:
 		return value.(*VersionType), true
        case VersionType:
 		v, _ := value.(VersionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := VersionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := VersionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to VersionType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsWellbeingCharacteristicClassificationType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingCharacteristicClassificationTypePointer(value interface{}) (*AUCodeSetsWellbeingCharacteristicClassificationType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingCharacteristicClassificationType:
 		return value.(*AUCodeSetsWellbeingCharacteristicClassificationType), true
        case AUCodeSetsWellbeingCharacteristicClassificationType:
 		v, _ := value.(AUCodeSetsWellbeingCharacteristicClassificationType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingCharacteristicClassificationType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingCharacteristicClassificationType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingCharacteristicClassificationType\n", t, value)
 	}
 	return nil, false
  }


func (t *SchoolURLType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func SchoolURLTypePointer(value interface{}) (*SchoolURLType, bool) {
switch t := value.(type) {
 	case *SchoolURLType:
 		return value.(*SchoolURLType), true
        case SchoolURLType:
 		v, _ := value.(SchoolURLType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := SchoolURLType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := SchoolURLType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to SchoolURLType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsOperationalStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsOperationalStatusTypePointer(value interface{}) (*AUCodeSetsOperationalStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsOperationalStatusType:
 		return value.(*AUCodeSetsOperationalStatusType), true
        case AUCodeSetsOperationalStatusType:
 		v, _ := value.(AUCodeSetsOperationalStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsOperationalStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsOperationalStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsOperationalStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsWellbeingEventTimePeriodType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsWellbeingEventTimePeriodTypePointer(value interface{}) (*AUCodeSetsWellbeingEventTimePeriodType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsWellbeingEventTimePeriodType:
 		return value.(*AUCodeSetsWellbeingEventTimePeriodType), true
        case AUCodeSetsWellbeingEventTimePeriodType:
 		v, _ := value.(AUCodeSetsWellbeingEventTimePeriodType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsWellbeingEventTimePeriodType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsWellbeingEventTimePeriodType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsWellbeingEventTimePeriodType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsSchoolEnrollmentTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolEnrollmentTypeTypePointer(value interface{}) (*AUCodeSetsSchoolEnrollmentTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolEnrollmentTypeType:
 		return value.(*AUCodeSetsSchoolEnrollmentTypeType), true
        case AUCodeSetsSchoolEnrollmentTypeType:
 		v, _ := value.(AUCodeSetsSchoolEnrollmentTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolEnrollmentTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolEnrollmentTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolEnrollmentTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsDetentionCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsDetentionCategoryTypePointer(value interface{}) (*AUCodeSetsDetentionCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsDetentionCategoryType:
 		return value.(*AUCodeSetsDetentionCategoryType), true
        case AUCodeSetsDetentionCategoryType:
 		v, _ := value.(AUCodeSetsDetentionCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsDetentionCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsDetentionCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsDetentionCategoryType\n", t, value)
 	}
 	return nil, false
  }


func (t *MsgIdType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func MsgIdTypePointer(value interface{}) (*MsgIdType, bool) {
switch t := value.(type) {
 	case *MsgIdType:
 		return value.(*MsgIdType), true
        case MsgIdType:
 		v, _ := value.(MsgIdType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := MsgIdType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := MsgIdType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to MsgIdType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAustralianStandardGeographicalClassificationASGCType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAustralianStandardGeographicalClassificationASGCTypePointer(value interface{}) (*AUCodeSetsAustralianStandardGeographicalClassificationASGCType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAustralianStandardGeographicalClassificationASGCType:
 		return value.(*AUCodeSetsAustralianStandardGeographicalClassificationASGCType), true
        case AUCodeSetsAustralianStandardGeographicalClassificationASGCType:
 		v, _ := value.(AUCodeSetsAustralianStandardGeographicalClassificationASGCType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAustralianStandardGeographicalClassificationASGCType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAustralianStandardGeographicalClassificationASGCType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAustralianStandardGeographicalClassificationASGCType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsTeacherCoverSupervisionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsTeacherCoverSupervisionTypePointer(value interface{}) (*AUCodeSetsTeacherCoverSupervisionType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsTeacherCoverSupervisionType:
 		return value.(*AUCodeSetsTeacherCoverSupervisionType), true
        case AUCodeSetsTeacherCoverSupervisionType:
 		v, _ := value.(AUCodeSetsTeacherCoverSupervisionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsTeacherCoverSupervisionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsTeacherCoverSupervisionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsTeacherCoverSupervisionType\n", t, value)
 	}
 	return nil, false
  }


func (t *EducationalLevelType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func EducationalLevelTypePointer(value interface{}) (*EducationalLevelType, bool) {
switch t := value.(type) {
 	case *EducationalLevelType:
 		return value.(*EducationalLevelType), true
        case EducationalLevelType:
 		v, _ := value.(EducationalLevelType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := EducationalLevelType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := EducationalLevelType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to EducationalLevelType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsBirthdateVerificationType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsBirthdateVerificationTypePointer(value interface{}) (*AUCodeSetsBirthdateVerificationType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsBirthdateVerificationType:
 		return value.(*AUCodeSetsBirthdateVerificationType), true
        case AUCodeSetsBirthdateVerificationType:
 		v, _ := value.(AUCodeSetsBirthdateVerificationType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsBirthdateVerificationType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsBirthdateVerificationType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsBirthdateVerificationType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsNAPWritingGenreType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsNAPWritingGenreTypePointer(value interface{}) (*AUCodeSetsNAPWritingGenreType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsNAPWritingGenreType:
 		return value.(*AUCodeSetsNAPWritingGenreType), true
        case AUCodeSetsNAPWritingGenreType:
 		v, _ := value.(AUCodeSetsNAPWritingGenreType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsNAPWritingGenreType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsNAPWritingGenreType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsNAPWritingGenreType\n", t, value)
 	}
 	return nil, false
  }


func (t *OperationalStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func OperationalStatusTypePointer(value interface{}) (*OperationalStatusType, bool) {
switch t := value.(type) {
 	case *OperationalStatusType:
 		return value.(*OperationalStatusType), true
        case OperationalStatusType:
 		v, _ := value.(OperationalStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := OperationalStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := OperationalStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to OperationalStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *VisaSubClassCodeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func VisaSubClassCodeTypePointer(value interface{}) (*VisaSubClassCodeType, bool) {
switch t := value.(type) {
 	case *VisaSubClassCodeType:
 		return value.(*VisaSubClassCodeType), true
        case VisaSubClassCodeType:
 		v, _ := value.(VisaSubClassCodeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := VisaSubClassCodeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := VisaSubClassCodeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to VisaSubClassCodeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGTypePointer(value interface{}) (*AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType:
 		return value.(*AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType), true
        case AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType:
 		v, _ := value.(AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAssessmentTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAssessmentTypeTypePointer(value interface{}) (*AUCodeSetsAssessmentTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAssessmentTypeType:
 		return value.(*AUCodeSetsAssessmentTypeType), true
        case AUCodeSetsAssessmentTypeType:
 		v, _ := value.(AUCodeSetsAssessmentTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAssessmentTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAssessmentTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAssessmentTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *GraduationDateType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func GraduationDateTypePointer(value interface{}) (*GraduationDateType, bool) {
switch t := value.(type) {
 	case *GraduationDateType:
 		return value.(*GraduationDateType), true
        case GraduationDateType:
 		v, _ := value.(GraduationDateType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := GraduationDateType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := GraduationDateType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to GraduationDateType\n", t, value)
 	}
 	return nil, false
  }


func (t *ReportDataObjectType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func ReportDataObjectTypePointer(value interface{}) (*ReportDataObjectType, bool) {
switch t := value.(type) {
 	case *ReportDataObjectType:
 		return value.(*ReportDataObjectType), true
        case ReportDataObjectType:
 		v, _ := value.(ReportDataObjectType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := ReportDataObjectType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := ReportDataObjectType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to ReportDataObjectType\n", t, value)
 	}
 	return nil, false
  }


func (t *PublishInDirectoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func PublishInDirectoryTypePointer(value interface{}) (*PublishInDirectoryType, bool) {
switch t := value.(type) {
 	case *PublishInDirectoryType:
 		return value.(*PublishInDirectoryType), true
        case PublishInDirectoryType:
 		v, _ := value.(PublishInDirectoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := PublishInDirectoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := PublishInDirectoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to PublishInDirectoryType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsLearningStandardItemRelationshipTypesType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsLearningStandardItemRelationshipTypesTypePointer(value interface{}) (*AUCodeSetsLearningStandardItemRelationshipTypesType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsLearningStandardItemRelationshipTypesType:
 		return value.(*AUCodeSetsLearningStandardItemRelationshipTypesType), true
        case AUCodeSetsLearningStandardItemRelationshipTypesType:
 		v, _ := value.(AUCodeSetsLearningStandardItemRelationshipTypesType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsLearningStandardItemRelationshipTypesType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsLearningStandardItemRelationshipTypesType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsLearningStandardItemRelationshipTypesType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsSchoolLevelType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsSchoolLevelTypePointer(value interface{}) (*AUCodeSetsSchoolLevelType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsSchoolLevelType:
 		return value.(*AUCodeSetsSchoolLevelType), true
        case AUCodeSetsSchoolLevelType:
 		v, _ := value.(AUCodeSetsSchoolLevelType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsSchoolLevelType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsSchoolLevelType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsSchoolLevelType\n", t, value)
 	}
 	return nil, false
  }


func (t *IdRefType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func IdRefTypePointer(value interface{}) (*IdRefType, bool) {
switch t := value.(type) {
 	case *IdRefType:
 		return value.(*IdRefType), true
        case IdRefType:
 		v, _ := value.(IdRefType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := IdRefType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := IdRefType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to IdRefType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsElectronicIdTypeType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsElectronicIdTypeTypePointer(value interface{}) (*AUCodeSetsElectronicIdTypeType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsElectronicIdTypeType:
 		return value.(*AUCodeSetsElectronicIdTypeType), true
        case AUCodeSetsElectronicIdTypeType:
 		v, _ := value.(AUCodeSetsElectronicIdTypeType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsElectronicIdTypeType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsElectronicIdTypeType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsElectronicIdTypeType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsAustralianCitizenshipStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsAustralianCitizenshipStatusTypePointer(value interface{}) (*AUCodeSetsAustralianCitizenshipStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsAustralianCitizenshipStatusType:
 		return value.(*AUCodeSetsAustralianCitizenshipStatusType), true
        case AUCodeSetsAustralianCitizenshipStatusType:
 		v, _ := value.(AUCodeSetsAustralianCitizenshipStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsAustralianCitizenshipStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsAustralianCitizenshipStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsAustralianCitizenshipStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsMaritalStatusAIHWType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsMaritalStatusAIHWTypePointer(value interface{}) (*AUCodeSetsMaritalStatusAIHWType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsMaritalStatusAIHWType:
 		return value.(*AUCodeSetsMaritalStatusAIHWType), true
        case AUCodeSetsMaritalStatusAIHWType:
 		v, _ := value.(AUCodeSetsMaritalStatusAIHWType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsMaritalStatusAIHWType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsMaritalStatusAIHWType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsMaritalStatusAIHWType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsEventSubCategoryType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEventSubCategoryTypePointer(value interface{}) (*AUCodeSetsEventSubCategoryType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEventSubCategoryType:
 		return value.(*AUCodeSetsEventSubCategoryType), true
        case AUCodeSetsEventSubCategoryType:
 		v, _ := value.(AUCodeSetsEventSubCategoryType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEventSubCategoryType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEventSubCategoryType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEventSubCategoryType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsEnglishProficiencyType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsEnglishProficiencyTypePointer(value interface{}) (*AUCodeSetsEnglishProficiencyType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsEnglishProficiencyType:
 		return value.(*AUCodeSetsEnglishProficiencyType), true
        case AUCodeSetsEnglishProficiencyType:
 		v, _ := value.(AUCodeSetsEnglishProficiencyType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsEnglishProficiencyType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsEnglishProficiencyType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsEnglishProficiencyType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsReceivingLocationOfInstructionType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsReceivingLocationOfInstructionTypePointer(value interface{}) (*AUCodeSetsReceivingLocationOfInstructionType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsReceivingLocationOfInstructionType:
 		return value.(*AUCodeSetsReceivingLocationOfInstructionType), true
        case AUCodeSetsReceivingLocationOfInstructionType:
 		v, _ := value.(AUCodeSetsReceivingLocationOfInstructionType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsReceivingLocationOfInstructionType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsReceivingLocationOfInstructionType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsReceivingLocationOfInstructionType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsIndigenousStatusType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsIndigenousStatusTypePointer(value interface{}) (*AUCodeSetsIndigenousStatusType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsIndigenousStatusType:
 		return value.(*AUCodeSetsIndigenousStatusType), true
        case AUCodeSetsIndigenousStatusType:
 		v, _ := value.(AUCodeSetsIndigenousStatusType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsIndigenousStatusType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsIndigenousStatusType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsIndigenousStatusType\n", t, value)
 	}
 	return nil, false
  }


func (t *AUCodeSetsVisaSubClassType) String() string {
  return fmt.Sprint(reflect.ValueOf(*t))
  }

func AUCodeSetsVisaSubClassTypePointer(value interface{}) (*AUCodeSetsVisaSubClassType, bool) {
switch t := value.(type) {
 	case *AUCodeSetsVisaSubClassType:
 		return value.(*AUCodeSetsVisaSubClassType), true
        case AUCodeSetsVisaSubClassType:
 		v, _ := value.(AUCodeSetsVisaSubClassType)
 		return &v, true
 	case *string:
 		vstr, _ := value.(*string)
 		v := AUCodeSetsVisaSubClassType(*vstr)
 		return &v, true
 	case string:
 		vstr, _ := value.(string)
 		v := AUCodeSetsVisaSubClassType(vstr)
 		return &v, true
 	default:
 		fmt.Printf("Warning: cannot resolve %T (%v) to AUCodeSetsVisaSubClassType\n", t, value)
 	}
 	return nil, false
  }



func (n *StaffSubjectType) Unset(key string) *StaffSubjectType {
        switch key {
  case "SubjectLocalId":
   n.staffsubjecttype.SubjectLocalId = nil
  case "PreferenceNumber":
   n.staffsubjecttype.PreferenceNumber = nil
  case "TimeTableSubjectRefId":
   n.staffsubjecttype.TimeTableSubjectRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffSubjectType")
        }
        return n
}

func (n *StaffSubjectType) SetProperty(key string, value interface{}) *StaffSubjectType {
        if n == nil {
                n, _ = StaffSubjectTypePointer(StaffSubjectType{})
        }
        switch key {
    case "SubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.staffsubjecttype.SubjectLocalId = ((*LocalIdType)(v))
      }
    case "PreferenceNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.staffsubjecttype.PreferenceNumber = ((*Int)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.staffsubjecttype.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffSubjectType")
        }
        return n
}

  func (s *StaffSubjectType) SubjectLocalId() *LocalIdType {
    if s.staffsubjecttype.SubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffsubjecttype.SubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.staffsubjecttype.SubjectLocalId
    }
  func (s *StaffSubjectType) SubjectLocalId_IsNil() bool {
    return s.SubjectLocalId == nil || s.staffsubjecttype.SubjectLocalId == nil
    }
  func (s *StaffSubjectType) PreferenceNumber() *Int {
    if s.staffsubjecttype.PreferenceNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.staffsubjecttype.PreferenceNumber = ((*Int)(v))
      }
      }
      return s.staffsubjecttype.PreferenceNumber
    }
  func (s *StaffSubjectType) PreferenceNumber_IsNil() bool {
    return s.PreferenceNumber == nil || s.staffsubjecttype.PreferenceNumber == nil
    }
  func (s *StaffSubjectType) TimeTableSubjectRefId() *RefIdType {
    if s.staffsubjecttype.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffsubjecttype.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
      }
      return s.staffsubjecttype.TimeTableSubjectRefId
    }
  func (s *StaffSubjectType) TimeTableSubjectRefId_IsNil() bool {
    return s.TimeTableSubjectRefId == nil || s.staffsubjecttype.TimeTableSubjectRefId == nil
    }

func (n *AbstractContentElementType_Reference) Unset(key string) *AbstractContentElementType_Reference {
        switch key {
  case "URL":
   n.abstractcontentelementtype_reference.URL = nil
  case "Description":
   n.abstractcontentelementtype_reference.Description = nil
  case "MIMEType":
   n.abstractcontentelementtype_reference.MIMEType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_Reference")
        }
        return n
}

func (n *AbstractContentElementType_Reference) SetProperty(key string, value interface{}) *AbstractContentElementType_Reference {
        if n == nil {
                n, _ = AbstractContentElementType_ReferencePointer(AbstractContentElementType_Reference{})
        }
        switch key {
    case "URL":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentelementtype_reference.URL = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentelementtype_reference.Description = ((*String)(v))
      }
    case "MIMEType":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentelementtype_reference.MIMEType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_Reference")
        }
        return n
}

  func (s *AbstractContentElementType_Reference) URL() *String {
    if s.abstractcontentelementtype_reference.URL == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentelementtype_reference.URL = ((*String)(v))
      }
      }
      return s.abstractcontentelementtype_reference.URL
    }
  func (s *AbstractContentElementType_Reference) URL_IsNil() bool {
    return s.URL == nil || s.abstractcontentelementtype_reference.URL == nil
    }
  func (s *AbstractContentElementType_Reference) Description() *String {
    if s.abstractcontentelementtype_reference.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentelementtype_reference.Description = ((*String)(v))
      }
      }
      return s.abstractcontentelementtype_reference.Description
    }
  func (s *AbstractContentElementType_Reference) Description_IsNil() bool {
    return s.Description == nil || s.abstractcontentelementtype_reference.Description == nil
    }
  func (s *AbstractContentElementType_Reference) MIMEType() *String {
    if s.abstractcontentelementtype_reference.MIMEType == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentelementtype_reference.MIMEType = ((*String)(v))
      }
      }
      return s.abstractcontentelementtype_reference.MIMEType
    }
  func (s *AbstractContentElementType_Reference) MIMEType_IsNil() bool {
    return s.MIMEType == nil || s.abstractcontentelementtype_reference.MIMEType == nil
    }

func (n *NAPTestScoreSummary) Unset(key string) *NAPTestScoreSummary {
        switch key {
  case "RefId":
   n.naptestscoresummary.RefId = nil
  case "NAPTestLocalId":
   n.naptestscoresummary.NAPTestLocalId = nil
  case "DomainBottomNational60Percent":
   n.naptestscoresummary.DomainBottomNational60Percent = nil
  case "DomainSchoolAverage":
   n.naptestscoresummary.DomainSchoolAverage = nil
  case "SIF_Metadata":
   n.naptestscoresummary.SIF_Metadata = nil
  case "NAPTestRefId":
   n.naptestscoresummary.NAPTestRefId = nil
  case "DomainTopNational60Percent":
   n.naptestscoresummary.DomainTopNational60Percent = nil
  case "DomainJurisdictionAverage":
   n.naptestscoresummary.DomainJurisdictionAverage = nil
  case "SchoolInfoRefId":
   n.naptestscoresummary.SchoolInfoRefId = nil
  case "DomainNationalAverage":
   n.naptestscoresummary.DomainNationalAverage = nil
  case "SIF_ExtendedElements":
   n.naptestscoresummary.SIF_ExtendedElements = nil
  case "SchoolACARAId":
   n.naptestscoresummary.SchoolACARAId = nil
  case "LocalCodeList":
   n.naptestscoresummary.LocalCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestScoreSummary")
        }
        return n
}

func (n *NAPTestScoreSummary) SetProperty(key string, value interface{}) *NAPTestScoreSummary {
        if n == nil {
                n, _ = NAPTestScoreSummaryPointer(NAPTestScoreSummary{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestscoresummary.RefId = ((*RefIdType)(v))
      }
    case "NAPTestLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestscoresummary.NAPTestLocalId = ((*LocalIdType)(v))
      }
    case "DomainBottomNational60Percent":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestscoresummary.DomainBottomNational60Percent = ((*Float)(v))
      }
    case "DomainSchoolAverage":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestscoresummary.DomainSchoolAverage = ((*Float)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.naptestscoresummary.SIF_Metadata = v
      }
    case "NAPTestRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestscoresummary.NAPTestRefId = ((*String)(v))
      }
    case "DomainTopNational60Percent":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestscoresummary.DomainTopNational60Percent = ((*Float)(v))
      }
    case "DomainJurisdictionAverage":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestscoresummary.DomainJurisdictionAverage = ((*Float)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestscoresummary.SchoolInfoRefId = ((*String)(v))
      }
    case "DomainNationalAverage":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestscoresummary.DomainNationalAverage = ((*Float)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.naptestscoresummary.SIF_ExtendedElements = v
      }
    case "SchoolACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestscoresummary.SchoolACARAId = ((*LocalIdType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.naptestscoresummary.LocalCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestScoreSummary")
        }
        return n
}

  func (s *NAPTestScoreSummary) RefId() *RefIdType {
    if s.naptestscoresummary.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestscoresummary.RefId = ((*RefIdType)(v))
      }
      }
      return s.naptestscoresummary.RefId
    }
  func (s *NAPTestScoreSummary) RefId_IsNil() bool {
    return s.RefId == nil || s.naptestscoresummary.RefId == nil
    }
  func (s *NAPTestScoreSummary) NAPTestLocalId() *LocalIdType {
    if s.naptestscoresummary.NAPTestLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestscoresummary.NAPTestLocalId = ((*LocalIdType)(v))
      }
      }
      return s.naptestscoresummary.NAPTestLocalId
    }
  func (s *NAPTestScoreSummary) NAPTestLocalId_IsNil() bool {
    return s.NAPTestLocalId == nil || s.naptestscoresummary.NAPTestLocalId == nil
    }
  func (s *NAPTestScoreSummary) DomainBottomNational60Percent() *Float {
    if s.naptestscoresummary.DomainBottomNational60Percent == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestscoresummary.DomainBottomNational60Percent = ((*Float)(v))
      }
      }
      return s.naptestscoresummary.DomainBottomNational60Percent
    }
  func (s *NAPTestScoreSummary) DomainBottomNational60Percent_IsNil() bool {
    return s.DomainBottomNational60Percent == nil || s.naptestscoresummary.DomainBottomNational60Percent == nil
    }
  func (s *NAPTestScoreSummary) DomainSchoolAverage() *Float {
    if s.naptestscoresummary.DomainSchoolAverage == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestscoresummary.DomainSchoolAverage = ((*Float)(v))
      }
      }
      return s.naptestscoresummary.DomainSchoolAverage
    }
  func (s *NAPTestScoreSummary) DomainSchoolAverage_IsNil() bool {
    return s.DomainSchoolAverage == nil || s.naptestscoresummary.DomainSchoolAverage == nil
    }
  func (s *NAPTestScoreSummary) SIF_Metadata() *SIF_MetadataType {
    if s.naptestscoresummary.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.naptestscoresummary.SIF_Metadata = v
      }
      }
      return s.naptestscoresummary.SIF_Metadata
    }
  func (s *NAPTestScoreSummary) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.naptestscoresummary.SIF_Metadata == nil
    }
  func (s *NAPTestScoreSummary) NAPTestRefId() *String {
    if s.naptestscoresummary.NAPTestRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestscoresummary.NAPTestRefId = ((*String)(v))
      }
      }
      return s.naptestscoresummary.NAPTestRefId
    }
  func (s *NAPTestScoreSummary) NAPTestRefId_IsNil() bool {
    return s.NAPTestRefId == nil || s.naptestscoresummary.NAPTestRefId == nil
    }
  func (s *NAPTestScoreSummary) DomainTopNational60Percent() *Float {
    if s.naptestscoresummary.DomainTopNational60Percent == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestscoresummary.DomainTopNational60Percent = ((*Float)(v))
      }
      }
      return s.naptestscoresummary.DomainTopNational60Percent
    }
  func (s *NAPTestScoreSummary) DomainTopNational60Percent_IsNil() bool {
    return s.DomainTopNational60Percent == nil || s.naptestscoresummary.DomainTopNational60Percent == nil
    }
  func (s *NAPTestScoreSummary) DomainJurisdictionAverage() *Float {
    if s.naptestscoresummary.DomainJurisdictionAverage == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestscoresummary.DomainJurisdictionAverage = ((*Float)(v))
      }
      }
      return s.naptestscoresummary.DomainJurisdictionAverage
    }
  func (s *NAPTestScoreSummary) DomainJurisdictionAverage_IsNil() bool {
    return s.DomainJurisdictionAverage == nil || s.naptestscoresummary.DomainJurisdictionAverage == nil
    }
  func (s *NAPTestScoreSummary) SchoolInfoRefId() *String {
    if s.naptestscoresummary.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestscoresummary.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.naptestscoresummary.SchoolInfoRefId
    }
  func (s *NAPTestScoreSummary) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.naptestscoresummary.SchoolInfoRefId == nil
    }
  func (s *NAPTestScoreSummary) DomainNationalAverage() *Float {
    if s.naptestscoresummary.DomainNationalAverage == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestscoresummary.DomainNationalAverage = ((*Float)(v))
      }
      }
      return s.naptestscoresummary.DomainNationalAverage
    }
  func (s *NAPTestScoreSummary) DomainNationalAverage_IsNil() bool {
    return s.DomainNationalAverage == nil || s.naptestscoresummary.DomainNationalAverage == nil
    }
  func (s *NAPTestScoreSummary) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.naptestscoresummary.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.naptestscoresummary.SIF_ExtendedElements = v
      }
      }
      return s.naptestscoresummary.SIF_ExtendedElements
    }
  func (s *NAPTestScoreSummary) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.naptestscoresummary.SIF_ExtendedElements == nil
    }
  func (s *NAPTestScoreSummary) SchoolACARAId() *LocalIdType {
    if s.naptestscoresummary.SchoolACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestscoresummary.SchoolACARAId = ((*LocalIdType)(v))
      }
      }
      return s.naptestscoresummary.SchoolACARAId
    }
  func (s *NAPTestScoreSummary) SchoolACARAId_IsNil() bool {
    return s.SchoolACARAId == nil || s.naptestscoresummary.SchoolACARAId == nil
    }
  func (s *NAPTestScoreSummary) LocalCodeList() *LocalCodeListType {
    if s.naptestscoresummary.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.naptestscoresummary.LocalCodeList = v
      }
      }
      return s.naptestscoresummary.LocalCodeList
    }
  func (s *NAPTestScoreSummary) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.naptestscoresummary.LocalCodeList == nil
    }

func (n *LifeCycleType_Creator) Unset(key string) *LifeCycleType_Creator {
        switch key {
  case "Name":
   n.lifecycletype_creator.Name = nil
  case "ID":
   n.lifecycletype_creator.ID = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType_Creator")
        }
        return n
}

func (n *LifeCycleType_Creator) SetProperty(key string, value interface{}) *LifeCycleType_Creator {
        if n == nil {
                n, _ = LifeCycleType_CreatorPointer(LifeCycleType_Creator{})
        }
        switch key {
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.lifecycletype_creator.Name = ((*String)(v))
      }
    case "ID":
    
    if v, ok:= StringPointer(value); ok {
      n.lifecycletype_creator.ID = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType_Creator")
        }
        return n
}

  func (s *LifeCycleType_Creator) Name() *String {
    if s.lifecycletype_creator.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.lifecycletype_creator.Name = ((*String)(v))
      }
      }
      return s.lifecycletype_creator.Name
    }
  func (s *LifeCycleType_Creator) Name_IsNil() bool {
    return s.Name == nil || s.lifecycletype_creator.Name == nil
    }
  func (s *LifeCycleType_Creator) ID() *String {
    if s.lifecycletype_creator.ID == nil {
    if v, ok:= StringPointer(""); ok {
      s.lifecycletype_creator.ID = ((*String)(v))
      }
      }
      return s.lifecycletype_creator.ID
    }
  func (s *LifeCycleType_Creator) ID_IsNil() bool {
    return s.ID == nil || s.lifecycletype_creator.ID == nil
    }

func (n *LanguageOfInstructionType) Unset(key string) *LanguageOfInstructionType {
        switch key {
  case "OtherCodeList":
   n.languageofinstructiontype.OtherCodeList = nil
  case "Code":
   n.languageofinstructiontype.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LanguageOfInstructionType")
        }
        return n
}

func (n *LanguageOfInstructionType) SetProperty(key string, value interface{}) *LanguageOfInstructionType {
        if n == nil {
                n, _ = LanguageOfInstructionTypePointer(LanguageOfInstructionType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.languageofinstructiontype.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.languageofinstructiontype.Code = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LanguageOfInstructionType")
        }
        return n
}

  func (s *LanguageOfInstructionType) OtherCodeList() *OtherCodeListType {
    if s.languageofinstructiontype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.languageofinstructiontype.OtherCodeList = v
      }
      }
      return s.languageofinstructiontype.OtherCodeList
    }
  func (s *LanguageOfInstructionType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.languageofinstructiontype.OtherCodeList == nil
    }
  func (s *LanguageOfInstructionType) Code() *AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType {
    if s.languageofinstructiontype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.languageofinstructiontype.Code = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
      }
      return s.languageofinstructiontype.Code
    }
  func (s *LanguageOfInstructionType) Code_IsNil() bool {
    return s.Code == nil || s.languageofinstructiontype.Code == nil
    }

func (n *SchoolProgramType) Unset(key string) *SchoolProgramType {
        switch key {
  case "Category":
   n.schoolprogramtype.Category = nil
  case "Type":
   n.schoolprogramtype.Type = nil
  case "OtherCodeList":
   n.schoolprogramtype.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolProgramType")
        }
        return n
}

func (n *SchoolProgramType) SetProperty(key string, value interface{}) *SchoolProgramType {
        if n == nil {
                n, _ = SchoolProgramTypePointer(SchoolProgramType{})
        }
        switch key {
    case "Category":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolprogramtype.Category = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolprogramtype.Type = ((*String)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.schoolprogramtype.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolProgramType")
        }
        return n
}

  func (s *SchoolProgramType) Category() *String {
    if s.schoolprogramtype.Category == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolprogramtype.Category = ((*String)(v))
      }
      }
      return s.schoolprogramtype.Category
    }
  func (s *SchoolProgramType) Category_IsNil() bool {
    return s.Category == nil || s.schoolprogramtype.Category == nil
    }
  func (s *SchoolProgramType) Type() *String {
    if s.schoolprogramtype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolprogramtype.Type = ((*String)(v))
      }
      }
      return s.schoolprogramtype.Type
    }
  func (s *SchoolProgramType) Type_IsNil() bool {
    return s.Type == nil || s.schoolprogramtype.Type == nil
    }
  func (s *SchoolProgramType) OtherCodeList() *OtherCodeListType {
    if s.schoolprogramtype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.schoolprogramtype.OtherCodeList = v
      }
      }
      return s.schoolprogramtype.OtherCodeList
    }
  func (s *SchoolProgramType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.schoolprogramtype.OtherCodeList == nil
    }

func (n *StudentActivityParticipation) Unset(key string) *StudentActivityParticipation {
        switch key {
  case "EndDate":
   n.studentactivityparticipation.EndDate = nil
  case "RecognitionList":
   n.studentactivityparticipation.RecognitionList = nil
  case "SchoolYear":
   n.studentactivityparticipation.SchoolYear = nil
  case "SIF_ExtendedElements":
   n.studentactivityparticipation.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.studentactivityparticipation.LocalCodeList = nil
  case "ParticipationComment":
   n.studentactivityparticipation.ParticipationComment = nil
  case "StudentPersonalRefId":
   n.studentactivityparticipation.StudentPersonalRefId = nil
  case "RefId":
   n.studentactivityparticipation.RefId = nil
  case "StudentActivityInfoRefId":
   n.studentactivityparticipation.StudentActivityInfoRefId = nil
  case "StartDate":
   n.studentactivityparticipation.StartDate = nil
  case "SIF_Metadata":
   n.studentactivityparticipation.SIF_Metadata = nil
  case "Role":
   n.studentactivityparticipation.Role = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentActivityParticipation")
        }
        return n
}

func (n *StudentActivityParticipation) SetProperty(key string, value interface{}) *StudentActivityParticipation {
        if n == nil {
                n, _ = StudentActivityParticipationPointer(StudentActivityParticipation{})
        }
        switch key {
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentactivityparticipation.EndDate = ((*String)(v))
      }
    case "RecognitionList":
    if v, ok:= RecognitionListTypePointer(value); ok {
      n.studentactivityparticipation.RecognitionList = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.studentactivityparticipation.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentactivityparticipation.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentactivityparticipation.LocalCodeList = v
      }
    case "ParticipationComment":
    
    if v, ok:= StringPointer(value); ok {
      n.studentactivityparticipation.ParticipationComment = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentactivityparticipation.StudentPersonalRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentactivityparticipation.RefId = ((*RefIdType)(v))
      }
    case "StudentActivityInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentactivityparticipation.StudentActivityInfoRefId = ((*String)(v))
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentactivityparticipation.StartDate = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentactivityparticipation.SIF_Metadata = v
      }
    case "Role":
    
    if v, ok:= StringPointer(value); ok {
      n.studentactivityparticipation.Role = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentActivityParticipation")
        }
        return n
}

  func (s *StudentActivityParticipation) EndDate() *String {
    if s.studentactivityparticipation.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivityparticipation.EndDate = ((*String)(v))
      }
      }
      return s.studentactivityparticipation.EndDate
    }
  func (s *StudentActivityParticipation) EndDate_IsNil() bool {
    return s.EndDate == nil || s.studentactivityparticipation.EndDate == nil
    }
  func (s *StudentActivityParticipation) RecognitionList() *RecognitionListType {
    if s.studentactivityparticipation.RecognitionList == nil {
     if v, ok:= RecognitionListTypePointer(RecognitionListType{}); ok {
      s.studentactivityparticipation.RecognitionList = v
      }
      }
      return s.studentactivityparticipation.RecognitionList
    }
  func (s *StudentActivityParticipation) RecognitionList_IsNil() bool {
    return s.RecognitionList == nil || s.studentactivityparticipation.RecognitionList == nil
    }
  func (s *StudentActivityParticipation) SchoolYear() *SchoolYearType {
    if s.studentactivityparticipation.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivityparticipation.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.studentactivityparticipation.SchoolYear
    }
  func (s *StudentActivityParticipation) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.studentactivityparticipation.SchoolYear == nil
    }
  func (s *StudentActivityParticipation) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentactivityparticipation.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentactivityparticipation.SIF_ExtendedElements = v
      }
      }
      return s.studentactivityparticipation.SIF_ExtendedElements
    }
  func (s *StudentActivityParticipation) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentactivityparticipation.SIF_ExtendedElements == nil
    }
  func (s *StudentActivityParticipation) LocalCodeList() *LocalCodeListType {
    if s.studentactivityparticipation.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentactivityparticipation.LocalCodeList = v
      }
      }
      return s.studentactivityparticipation.LocalCodeList
    }
  func (s *StudentActivityParticipation) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentactivityparticipation.LocalCodeList == nil
    }
  func (s *StudentActivityParticipation) ParticipationComment() *String {
    if s.studentactivityparticipation.ParticipationComment == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivityparticipation.ParticipationComment = ((*String)(v))
      }
      }
      return s.studentactivityparticipation.ParticipationComment
    }
  func (s *StudentActivityParticipation) ParticipationComment_IsNil() bool {
    return s.ParticipationComment == nil || s.studentactivityparticipation.ParticipationComment == nil
    }
  func (s *StudentActivityParticipation) StudentPersonalRefId() *String {
    if s.studentactivityparticipation.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivityparticipation.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.studentactivityparticipation.StudentPersonalRefId
    }
  func (s *StudentActivityParticipation) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.studentactivityparticipation.StudentPersonalRefId == nil
    }
  func (s *StudentActivityParticipation) RefId() *RefIdType {
    if s.studentactivityparticipation.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivityparticipation.RefId = ((*RefIdType)(v))
      }
      }
      return s.studentactivityparticipation.RefId
    }
  func (s *StudentActivityParticipation) RefId_IsNil() bool {
    return s.RefId == nil || s.studentactivityparticipation.RefId == nil
    }
  func (s *StudentActivityParticipation) StudentActivityInfoRefId() *String {
    if s.studentactivityparticipation.StudentActivityInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivityparticipation.StudentActivityInfoRefId = ((*String)(v))
      }
      }
      return s.studentactivityparticipation.StudentActivityInfoRefId
    }
  func (s *StudentActivityParticipation) StudentActivityInfoRefId_IsNil() bool {
    return s.StudentActivityInfoRefId == nil || s.studentactivityparticipation.StudentActivityInfoRefId == nil
    }
  func (s *StudentActivityParticipation) StartDate() *String {
    if s.studentactivityparticipation.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivityparticipation.StartDate = ((*String)(v))
      }
      }
      return s.studentactivityparticipation.StartDate
    }
  func (s *StudentActivityParticipation) StartDate_IsNil() bool {
    return s.StartDate == nil || s.studentactivityparticipation.StartDate == nil
    }
  func (s *StudentActivityParticipation) SIF_Metadata() *SIF_MetadataType {
    if s.studentactivityparticipation.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentactivityparticipation.SIF_Metadata = v
      }
      }
      return s.studentactivityparticipation.SIF_Metadata
    }
  func (s *StudentActivityParticipation) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentactivityparticipation.SIF_Metadata == nil
    }
  func (s *StudentActivityParticipation) Role() *String {
    if s.studentactivityparticipation.Role == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivityparticipation.Role = ((*String)(v))
      }
      }
      return s.studentactivityparticipation.Role
    }
  func (s *StudentActivityParticipation) Role_IsNil() bool {
    return s.Role == nil || s.studentactivityparticipation.Role == nil
    }

func (n *TeachingGroupPeriodType) Unset(key string) *TeachingGroupPeriodType {
        switch key {
  case "TimeTableCellRefId":
   n.teachinggroupperiodtype.TimeTableCellRefId = nil
  case "PeriodId":
   n.teachinggroupperiodtype.PeriodId = nil
  case "RoomNumber":
   n.teachinggroupperiodtype.RoomNumber = nil
  case "StaffLocalId":
   n.teachinggroupperiodtype.StaffLocalId = nil
  case "DayId":
   n.teachinggroupperiodtype.DayId = nil
  case "CellType":
   n.teachinggroupperiodtype.CellType = nil
  case "StartTime":
   n.teachinggroupperiodtype.StartTime = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupPeriodType")
        }
        return n
}

func (n *TeachingGroupPeriodType) SetProperty(key string, value interface{}) *TeachingGroupPeriodType {
        if n == nil {
                n, _ = TeachingGroupPeriodTypePointer(TeachingGroupPeriodType{})
        }
        switch key {
    case "TimeTableCellRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupperiodtype.TimeTableCellRefId = ((*String)(v))
      }
    case "PeriodId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupperiodtype.PeriodId = ((*LocalIdType)(v))
      }
    case "RoomNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupperiodtype.RoomNumber = ((*HomeroomNumberType)(v))
      }
    case "StaffLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupperiodtype.StaffLocalId = ((*LocalIdType)(v))
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupperiodtype.DayId = ((*LocalIdType)(v))
      }
    case "CellType":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupperiodtype.CellType = ((*String)(v))
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupperiodtype.StartTime = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupPeriodType")
        }
        return n
}

  func (s *TeachingGroupPeriodType) TimeTableCellRefId() *String {
    if s.teachinggroupperiodtype.TimeTableCellRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupperiodtype.TimeTableCellRefId = ((*String)(v))
      }
      }
      return s.teachinggroupperiodtype.TimeTableCellRefId
    }
  func (s *TeachingGroupPeriodType) TimeTableCellRefId_IsNil() bool {
    return s.TimeTableCellRefId == nil || s.teachinggroupperiodtype.TimeTableCellRefId == nil
    }
  func (s *TeachingGroupPeriodType) PeriodId() *LocalIdType {
    if s.teachinggroupperiodtype.PeriodId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupperiodtype.PeriodId = ((*LocalIdType)(v))
      }
      }
      return s.teachinggroupperiodtype.PeriodId
    }
  func (s *TeachingGroupPeriodType) PeriodId_IsNil() bool {
    return s.PeriodId == nil || s.teachinggroupperiodtype.PeriodId == nil
    }
  func (s *TeachingGroupPeriodType) RoomNumber() *HomeroomNumberType {
    if s.teachinggroupperiodtype.RoomNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupperiodtype.RoomNumber = ((*HomeroomNumberType)(v))
      }
      }
      return s.teachinggroupperiodtype.RoomNumber
    }
  func (s *TeachingGroupPeriodType) RoomNumber_IsNil() bool {
    return s.RoomNumber == nil || s.teachinggroupperiodtype.RoomNumber == nil
    }
  func (s *TeachingGroupPeriodType) StaffLocalId() *LocalIdType {
    if s.teachinggroupperiodtype.StaffLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupperiodtype.StaffLocalId = ((*LocalIdType)(v))
      }
      }
      return s.teachinggroupperiodtype.StaffLocalId
    }
  func (s *TeachingGroupPeriodType) StaffLocalId_IsNil() bool {
    return s.StaffLocalId == nil || s.teachinggroupperiodtype.StaffLocalId == nil
    }
  func (s *TeachingGroupPeriodType) DayId() *LocalIdType {
    if s.teachinggroupperiodtype.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupperiodtype.DayId = ((*LocalIdType)(v))
      }
      }
      return s.teachinggroupperiodtype.DayId
    }
  func (s *TeachingGroupPeriodType) DayId_IsNil() bool {
    return s.DayId == nil || s.teachinggroupperiodtype.DayId == nil
    }
  func (s *TeachingGroupPeriodType) CellType() *String {
    if s.teachinggroupperiodtype.CellType == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupperiodtype.CellType = ((*String)(v))
      }
      }
      return s.teachinggroupperiodtype.CellType
    }
  func (s *TeachingGroupPeriodType) CellType_IsNil() bool {
    return s.CellType == nil || s.teachinggroupperiodtype.CellType == nil
    }
  func (s *TeachingGroupPeriodType) StartTime() *String {
    if s.teachinggroupperiodtype.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupperiodtype.StartTime = ((*String)(v))
      }
      }
      return s.teachinggroupperiodtype.StartTime
    }
  func (s *TeachingGroupPeriodType) StartTime_IsNil() bool {
    return s.StartTime == nil || s.teachinggroupperiodtype.StartTime == nil
    }

func (n *WithdrawalType) Unset(key string) *WithdrawalType {
        switch key {
  case "TimeTableCellRefId":
   n.withdrawaltype.TimeTableCellRefId = nil
  case "ScheduledActivityRefId":
   n.withdrawaltype.ScheduledActivityRefId = nil
  case "WithdrawalDate":
   n.withdrawaltype.WithdrawalDate = nil
  case "TimeTableSubjectRefId":
   n.withdrawaltype.TimeTableSubjectRefId = nil
  case "WithdrawalEndTime":
   n.withdrawaltype.WithdrawalEndTime = nil
  case "WithdrawalStartTime":
   n.withdrawaltype.WithdrawalStartTime = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WithdrawalType")
        }
        return n
}

func (n *WithdrawalType) SetProperty(key string, value interface{}) *WithdrawalType {
        if n == nil {
                n, _ = WithdrawalTypePointer(WithdrawalType{})
        }
        switch key {
    case "TimeTableCellRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.withdrawaltype.TimeTableCellRefId = ((*String)(v))
      }
    case "ScheduledActivityRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.withdrawaltype.ScheduledActivityRefId = ((*String)(v))
      }
    case "WithdrawalDate":
    
    if v, ok:= StringPointer(value); ok {
      n.withdrawaltype.WithdrawalDate = ((*String)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.withdrawaltype.TimeTableSubjectRefId = ((*String)(v))
      }
    case "WithdrawalEndTime":
    
    if v, ok:= StringPointer(value); ok {
      n.withdrawaltype.WithdrawalEndTime = ((*String)(v))
      }
    case "WithdrawalStartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.withdrawaltype.WithdrawalStartTime = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WithdrawalType")
        }
        return n
}

  func (s *WithdrawalType) TimeTableCellRefId() *String {
    if s.withdrawaltype.TimeTableCellRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.withdrawaltype.TimeTableCellRefId = ((*String)(v))
      }
      }
      return s.withdrawaltype.TimeTableCellRefId
    }
  func (s *WithdrawalType) TimeTableCellRefId_IsNil() bool {
    return s.TimeTableCellRefId == nil || s.withdrawaltype.TimeTableCellRefId == nil
    }
  func (s *WithdrawalType) ScheduledActivityRefId() *String {
    if s.withdrawaltype.ScheduledActivityRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.withdrawaltype.ScheduledActivityRefId = ((*String)(v))
      }
      }
      return s.withdrawaltype.ScheduledActivityRefId
    }
  func (s *WithdrawalType) ScheduledActivityRefId_IsNil() bool {
    return s.ScheduledActivityRefId == nil || s.withdrawaltype.ScheduledActivityRefId == nil
    }
  func (s *WithdrawalType) WithdrawalDate() *String {
    if s.withdrawaltype.WithdrawalDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.withdrawaltype.WithdrawalDate = ((*String)(v))
      }
      }
      return s.withdrawaltype.WithdrawalDate
    }
  func (s *WithdrawalType) WithdrawalDate_IsNil() bool {
    return s.WithdrawalDate == nil || s.withdrawaltype.WithdrawalDate == nil
    }
  func (s *WithdrawalType) TimeTableSubjectRefId() *String {
    if s.withdrawaltype.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.withdrawaltype.TimeTableSubjectRefId = ((*String)(v))
      }
      }
      return s.withdrawaltype.TimeTableSubjectRefId
    }
  func (s *WithdrawalType) TimeTableSubjectRefId_IsNil() bool {
    return s.TimeTableSubjectRefId == nil || s.withdrawaltype.TimeTableSubjectRefId == nil
    }
  func (s *WithdrawalType) WithdrawalEndTime() *String {
    if s.withdrawaltype.WithdrawalEndTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.withdrawaltype.WithdrawalEndTime = ((*String)(v))
      }
      }
      return s.withdrawaltype.WithdrawalEndTime
    }
  func (s *WithdrawalType) WithdrawalEndTime_IsNil() bool {
    return s.WithdrawalEndTime == nil || s.withdrawaltype.WithdrawalEndTime == nil
    }
  func (s *WithdrawalType) WithdrawalStartTime() *String {
    if s.withdrawaltype.WithdrawalStartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.withdrawaltype.WithdrawalStartTime = ((*String)(v))
      }
      }
      return s.withdrawaltype.WithdrawalStartTime
    }
  func (s *WithdrawalType) WithdrawalStartTime_IsNil() bool {
    return s.WithdrawalStartTime == nil || s.withdrawaltype.WithdrawalStartTime == nil
    }

func (n *NAPStudentResponseSet) Unset(key string) *NAPStudentResponseSet {
        switch key {
  case "DomainScore":
   n.napstudentresponseset.DomainScore = nil
  case "CalibrationSampleFlag":
   n.napstudentresponseset.CalibrationSampleFlag = nil
  case "LocalCodeList":
   n.napstudentresponseset.LocalCodeList = nil
  case "TestletList":
   n.napstudentresponseset.TestletList = nil
  case "SIF_ExtendedElements":
   n.napstudentresponseset.SIF_ExtendedElements = nil
  case "ReportExclusionFlag":
   n.napstudentresponseset.ReportExclusionFlag = nil
  case "PathTakenForDomain":
   n.napstudentresponseset.PathTakenForDomain = nil
  case "NAPTestRefId":
   n.napstudentresponseset.NAPTestRefId = nil
  case "PlatformStudentIdentifier":
   n.napstudentresponseset.PlatformStudentIdentifier = nil
  case "SIF_Metadata":
   n.napstudentresponseset.SIF_Metadata = nil
  case "ParallelTest":
   n.napstudentresponseset.ParallelTest = nil
  case "NAPTestLocalId":
   n.napstudentresponseset.NAPTestLocalId = nil
  case "RefId":
   n.napstudentresponseset.RefId = nil
  case "StudentPersonalRefId":
   n.napstudentresponseset.StudentPersonalRefId = nil
  case "EquatingSampleFlag":
   n.napstudentresponseset.EquatingSampleFlag = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPStudentResponseSet")
        }
        return n
}

func (n *NAPStudentResponseSet) SetProperty(key string, value interface{}) *NAPStudentResponseSet {
        if n == nil {
                n, _ = NAPStudentResponseSetPointer(NAPStudentResponseSet{})
        }
        switch key {
    case "DomainScore":
    if v, ok:= DomainScoreTypePointer(value); ok {
      n.napstudentresponseset.DomainScore = v
      }
    case "CalibrationSampleFlag":
    
    if v, ok:= StringPointer(value); ok {
      n.napstudentresponseset.CalibrationSampleFlag = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.napstudentresponseset.LocalCodeList = v
      }
    case "TestletList":
    if v, ok:= NAPStudentResponseTestletListTypePointer(value); ok {
      n.napstudentresponseset.TestletList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.napstudentresponseset.SIF_ExtendedElements = v
      }
    case "ReportExclusionFlag":
    
    if v, ok:= BoolPointer(value); ok {
      n.napstudentresponseset.ReportExclusionFlag = ((*Bool)(v))
      }
    case "PathTakenForDomain":
    
    if v, ok:= StringPointer(value); ok {
      n.napstudentresponseset.PathTakenForDomain = ((*String)(v))
      }
    case "NAPTestRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.napstudentresponseset.NAPTestRefId = ((*String)(v))
      }
    case "PlatformStudentIdentifier":
    
    if v, ok:= StringPointer(value); ok {
      n.napstudentresponseset.PlatformStudentIdentifier = ((*LocalIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.napstudentresponseset.SIF_Metadata = v
      }
    case "ParallelTest":
    
    if v, ok:= StringPointer(value); ok {
      n.napstudentresponseset.ParallelTest = ((*String)(v))
      }
    case "NAPTestLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.napstudentresponseset.NAPTestLocalId = ((*LocalIdType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.napstudentresponseset.RefId = ((*RefIdType)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.napstudentresponseset.StudentPersonalRefId = ((*String)(v))
      }
    case "EquatingSampleFlag":
    
    if v, ok:= StringPointer(value); ok {
      n.napstudentresponseset.EquatingSampleFlag = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPStudentResponseSet")
        }
        return n
}

  func (s *NAPStudentResponseSet) DomainScore() *DomainScoreType {
    if s.napstudentresponseset.DomainScore == nil {
     if v, ok:= DomainScoreTypePointer(DomainScoreType{}); ok {
      s.napstudentresponseset.DomainScore = v
      }
      }
      return s.napstudentresponseset.DomainScore
    }
  func (s *NAPStudentResponseSet) DomainScore_IsNil() bool {
    return s.DomainScore == nil || s.napstudentresponseset.DomainScore == nil
    }
  func (s *NAPStudentResponseSet) CalibrationSampleFlag() *String {
    if s.napstudentresponseset.CalibrationSampleFlag == nil {
    if v, ok:= StringPointer(""); ok {
      s.napstudentresponseset.CalibrationSampleFlag = ((*String)(v))
      }
      }
      return s.napstudentresponseset.CalibrationSampleFlag
    }
  func (s *NAPStudentResponseSet) CalibrationSampleFlag_IsNil() bool {
    return s.CalibrationSampleFlag == nil || s.napstudentresponseset.CalibrationSampleFlag == nil
    }
  func (s *NAPStudentResponseSet) LocalCodeList() *LocalCodeListType {
    if s.napstudentresponseset.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.napstudentresponseset.LocalCodeList = v
      }
      }
      return s.napstudentresponseset.LocalCodeList
    }
  func (s *NAPStudentResponseSet) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.napstudentresponseset.LocalCodeList == nil
    }
  func (s *NAPStudentResponseSet) TestletList() *NAPStudentResponseTestletListType {
    if s.napstudentresponseset.TestletList == nil {
     if v, ok:= NAPStudentResponseTestletListTypePointer(NAPStudentResponseTestletListType{}); ok {
      s.napstudentresponseset.TestletList = v
      }
      }
      return s.napstudentresponseset.TestletList
    }
  func (s *NAPStudentResponseSet) TestletList_IsNil() bool {
    return s.TestletList == nil || s.napstudentresponseset.TestletList == nil
    }
  func (s *NAPStudentResponseSet) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.napstudentresponseset.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.napstudentresponseset.SIF_ExtendedElements = v
      }
      }
      return s.napstudentresponseset.SIF_ExtendedElements
    }
  func (s *NAPStudentResponseSet) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.napstudentresponseset.SIF_ExtendedElements == nil
    }
  func (s *NAPStudentResponseSet) ReportExclusionFlag() *Bool {
    if s.napstudentresponseset.ReportExclusionFlag == nil {
    if v, ok:= BoolPointer(false); ok {
      s.napstudentresponseset.ReportExclusionFlag = ((*Bool)(v))
      }
      }
      return s.napstudentresponseset.ReportExclusionFlag
    }
  func (s *NAPStudentResponseSet) ReportExclusionFlag_IsNil() bool {
    return s.ReportExclusionFlag == nil || s.napstudentresponseset.ReportExclusionFlag == nil
    }
  func (s *NAPStudentResponseSet) PathTakenForDomain() *String {
    if s.napstudentresponseset.PathTakenForDomain == nil {
    if v, ok:= StringPointer(""); ok {
      s.napstudentresponseset.PathTakenForDomain = ((*String)(v))
      }
      }
      return s.napstudentresponseset.PathTakenForDomain
    }
  func (s *NAPStudentResponseSet) PathTakenForDomain_IsNil() bool {
    return s.PathTakenForDomain == nil || s.napstudentresponseset.PathTakenForDomain == nil
    }
  func (s *NAPStudentResponseSet) NAPTestRefId() *String {
    if s.napstudentresponseset.NAPTestRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.napstudentresponseset.NAPTestRefId = ((*String)(v))
      }
      }
      return s.napstudentresponseset.NAPTestRefId
    }
  func (s *NAPStudentResponseSet) NAPTestRefId_IsNil() bool {
    return s.NAPTestRefId == nil || s.napstudentresponseset.NAPTestRefId == nil
    }
  func (s *NAPStudentResponseSet) PlatformStudentIdentifier() *LocalIdType {
    if s.napstudentresponseset.PlatformStudentIdentifier == nil {
    if v, ok:= StringPointer(""); ok {
      s.napstudentresponseset.PlatformStudentIdentifier = ((*LocalIdType)(v))
      }
      }
      return s.napstudentresponseset.PlatformStudentIdentifier
    }
  func (s *NAPStudentResponseSet) PlatformStudentIdentifier_IsNil() bool {
    return s.PlatformStudentIdentifier == nil || s.napstudentresponseset.PlatformStudentIdentifier == nil
    }
  func (s *NAPStudentResponseSet) SIF_Metadata() *SIF_MetadataType {
    if s.napstudentresponseset.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.napstudentresponseset.SIF_Metadata = v
      }
      }
      return s.napstudentresponseset.SIF_Metadata
    }
  func (s *NAPStudentResponseSet) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.napstudentresponseset.SIF_Metadata == nil
    }
  func (s *NAPStudentResponseSet) ParallelTest() *String {
    if s.napstudentresponseset.ParallelTest == nil {
    if v, ok:= StringPointer(""); ok {
      s.napstudentresponseset.ParallelTest = ((*String)(v))
      }
      }
      return s.napstudentresponseset.ParallelTest
    }
  func (s *NAPStudentResponseSet) ParallelTest_IsNil() bool {
    return s.ParallelTest == nil || s.napstudentresponseset.ParallelTest == nil
    }
  func (s *NAPStudentResponseSet) NAPTestLocalId() *LocalIdType {
    if s.napstudentresponseset.NAPTestLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.napstudentresponseset.NAPTestLocalId = ((*LocalIdType)(v))
      }
      }
      return s.napstudentresponseset.NAPTestLocalId
    }
  func (s *NAPStudentResponseSet) NAPTestLocalId_IsNil() bool {
    return s.NAPTestLocalId == nil || s.napstudentresponseset.NAPTestLocalId == nil
    }
  func (s *NAPStudentResponseSet) RefId() *RefIdType {
    if s.napstudentresponseset.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.napstudentresponseset.RefId = ((*RefIdType)(v))
      }
      }
      return s.napstudentresponseset.RefId
    }
  func (s *NAPStudentResponseSet) RefId_IsNil() bool {
    return s.RefId == nil || s.napstudentresponseset.RefId == nil
    }
  func (s *NAPStudentResponseSet) StudentPersonalRefId() *String {
    if s.napstudentresponseset.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.napstudentresponseset.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.napstudentresponseset.StudentPersonalRefId
    }
  func (s *NAPStudentResponseSet) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.napstudentresponseset.StudentPersonalRefId == nil
    }
  func (s *NAPStudentResponseSet) EquatingSampleFlag() *String {
    if s.napstudentresponseset.EquatingSampleFlag == nil {
    if v, ok:= StringPointer(""); ok {
      s.napstudentresponseset.EquatingSampleFlag = ((*String)(v))
      }
      }
      return s.napstudentresponseset.EquatingSampleFlag
    }
  func (s *NAPStudentResponseSet) EquatingSampleFlag_IsNil() bool {
    return s.EquatingSampleFlag == nil || s.napstudentresponseset.EquatingSampleFlag == nil
    }

func (n *AddressStreetType) Unset(key string) *AddressStreetType {
        switch key {
  case "Complex":
   n.addressstreettype.Complex = nil
  case "Line3":
   n.addressstreettype.Line3 = nil
  case "Line2":
   n.addressstreettype.Line2 = nil
  case "Line1":
   n.addressstreettype.Line1 = nil
  case "StreetName":
   n.addressstreettype.StreetName = nil
  case "ApartmentNumberSuffix":
   n.addressstreettype.ApartmentNumberSuffix = nil
  case "StreetPrefix":
   n.addressstreettype.StreetPrefix = nil
  case "ApartmentNumber":
   n.addressstreettype.ApartmentNumber = nil
  case "StreetType":
   n.addressstreettype.StreetType = nil
  case "ApartmentNumberPrefix":
   n.addressstreettype.ApartmentNumberPrefix = nil
  case "StreetSuffix":
   n.addressstreettype.StreetSuffix = nil
  case "StreetNumber":
   n.addressstreettype.StreetNumber = nil
  case "ApartmentType":
   n.addressstreettype.ApartmentType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressStreetType")
        }
        return n
}

func (n *AddressStreetType) SetProperty(key string, value interface{}) *AddressStreetType {
        if n == nil {
                n, _ = AddressStreetTypePointer(AddressStreetType{})
        }
        switch key {
    case "Complex":
    
    if v, ok:= StringPointer(value); ok {
      n.addressstreettype.Complex = ((*String)(v))
      }
    case "Line3":
    
    if v, ok:= StringPointer(value); ok {
      n.addressstreettype.Line3 = ((*String)(v))
      }
    case "Line2":
    
    if v, ok:= StringPointer(value); ok {
      n.addressstreettype.Line2 = ((*String)(v))
      }
    case "Line1":
    
    if v, ok:= StringPointer(value); ok {
      n.addressstreettype.Line1 = ((*String)(v))
      }
    case "StreetName":
    
    if v, ok:= StringPointer(value); ok {
      n.addressstreettype.StreetName = ((*String)(v))
      }
    case "ApartmentNumberSuffix":
    
    if v, ok:= StringPointer(value); ok {
      n.addressstreettype.ApartmentNumberSuffix = ((*String)(v))
      }
    case "StreetPrefix":
    
    if v, ok:= StringPointer(value); ok {
      n.addressstreettype.StreetPrefix = ((*String)(v))
      }
    case "ApartmentNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.addressstreettype.ApartmentNumber = ((*String)(v))
      }
    case "StreetType":
    
    if v, ok:= StringPointer(value); ok {
      n.addressstreettype.StreetType = ((*String)(v))
      }
    case "ApartmentNumberPrefix":
    
    if v, ok:= StringPointer(value); ok {
      n.addressstreettype.ApartmentNumberPrefix = ((*String)(v))
      }
    case "StreetSuffix":
    
    if v, ok:= StringPointer(value); ok {
      n.addressstreettype.StreetSuffix = ((*String)(v))
      }
    case "StreetNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.addressstreettype.StreetNumber = ((*String)(v))
      }
    case "ApartmentType":
    
    if v, ok:= StringPointer(value); ok {
      n.addressstreettype.ApartmentType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressStreetType")
        }
        return n
}

  func (s *AddressStreetType) Complex() *String {
    if s.addressstreettype.Complex == nil {
    if v, ok:= StringPointer(""); ok {
      s.addressstreettype.Complex = ((*String)(v))
      }
      }
      return s.addressstreettype.Complex
    }
  func (s *AddressStreetType) Complex_IsNil() bool {
    return s.Complex == nil || s.addressstreettype.Complex == nil
    }
  func (s *AddressStreetType) Line3() *String {
    if s.addressstreettype.Line3 == nil {
    if v, ok:= StringPointer(""); ok {
      s.addressstreettype.Line3 = ((*String)(v))
      }
      }
      return s.addressstreettype.Line3
    }
  func (s *AddressStreetType) Line3_IsNil() bool {
    return s.Line3 == nil || s.addressstreettype.Line3 == nil
    }
  func (s *AddressStreetType) Line2() *String {
    if s.addressstreettype.Line2 == nil {
    if v, ok:= StringPointer(""); ok {
      s.addressstreettype.Line2 = ((*String)(v))
      }
      }
      return s.addressstreettype.Line2
    }
  func (s *AddressStreetType) Line2_IsNil() bool {
    return s.Line2 == nil || s.addressstreettype.Line2 == nil
    }
  func (s *AddressStreetType) Line1() *String {
    if s.addressstreettype.Line1 == nil {
    if v, ok:= StringPointer(""); ok {
      s.addressstreettype.Line1 = ((*String)(v))
      }
      }
      return s.addressstreettype.Line1
    }
  func (s *AddressStreetType) Line1_IsNil() bool {
    return s.Line1 == nil || s.addressstreettype.Line1 == nil
    }
  func (s *AddressStreetType) StreetName() *String {
    if s.addressstreettype.StreetName == nil {
    if v, ok:= StringPointer(""); ok {
      s.addressstreettype.StreetName = ((*String)(v))
      }
      }
      return s.addressstreettype.StreetName
    }
  func (s *AddressStreetType) StreetName_IsNil() bool {
    return s.StreetName == nil || s.addressstreettype.StreetName == nil
    }
  func (s *AddressStreetType) ApartmentNumberSuffix() *String {
    if s.addressstreettype.ApartmentNumberSuffix == nil {
    if v, ok:= StringPointer(""); ok {
      s.addressstreettype.ApartmentNumberSuffix = ((*String)(v))
      }
      }
      return s.addressstreettype.ApartmentNumberSuffix
    }
  func (s *AddressStreetType) ApartmentNumberSuffix_IsNil() bool {
    return s.ApartmentNumberSuffix == nil || s.addressstreettype.ApartmentNumberSuffix == nil
    }
  func (s *AddressStreetType) StreetPrefix() *String {
    if s.addressstreettype.StreetPrefix == nil {
    if v, ok:= StringPointer(""); ok {
      s.addressstreettype.StreetPrefix = ((*String)(v))
      }
      }
      return s.addressstreettype.StreetPrefix
    }
  func (s *AddressStreetType) StreetPrefix_IsNil() bool {
    return s.StreetPrefix == nil || s.addressstreettype.StreetPrefix == nil
    }
  func (s *AddressStreetType) ApartmentNumber() *String {
    if s.addressstreettype.ApartmentNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.addressstreettype.ApartmentNumber = ((*String)(v))
      }
      }
      return s.addressstreettype.ApartmentNumber
    }
  func (s *AddressStreetType) ApartmentNumber_IsNil() bool {
    return s.ApartmentNumber == nil || s.addressstreettype.ApartmentNumber == nil
    }
  func (s *AddressStreetType) StreetType() *String {
    if s.addressstreettype.StreetType == nil {
    if v, ok:= StringPointer(""); ok {
      s.addressstreettype.StreetType = ((*String)(v))
      }
      }
      return s.addressstreettype.StreetType
    }
  func (s *AddressStreetType) StreetType_IsNil() bool {
    return s.StreetType == nil || s.addressstreettype.StreetType == nil
    }
  func (s *AddressStreetType) ApartmentNumberPrefix() *String {
    if s.addressstreettype.ApartmentNumberPrefix == nil {
    if v, ok:= StringPointer(""); ok {
      s.addressstreettype.ApartmentNumberPrefix = ((*String)(v))
      }
      }
      return s.addressstreettype.ApartmentNumberPrefix
    }
  func (s *AddressStreetType) ApartmentNumberPrefix_IsNil() bool {
    return s.ApartmentNumberPrefix == nil || s.addressstreettype.ApartmentNumberPrefix == nil
    }
  func (s *AddressStreetType) StreetSuffix() *String {
    if s.addressstreettype.StreetSuffix == nil {
    if v, ok:= StringPointer(""); ok {
      s.addressstreettype.StreetSuffix = ((*String)(v))
      }
      }
      return s.addressstreettype.StreetSuffix
    }
  func (s *AddressStreetType) StreetSuffix_IsNil() bool {
    return s.StreetSuffix == nil || s.addressstreettype.StreetSuffix == nil
    }
  func (s *AddressStreetType) StreetNumber() *String {
    if s.addressstreettype.StreetNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.addressstreettype.StreetNumber = ((*String)(v))
      }
      }
      return s.addressstreettype.StreetNumber
    }
  func (s *AddressStreetType) StreetNumber_IsNil() bool {
    return s.StreetNumber == nil || s.addressstreettype.StreetNumber == nil
    }
  func (s *AddressStreetType) ApartmentType() *String {
    if s.addressstreettype.ApartmentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.addressstreettype.ApartmentType = ((*String)(v))
      }
      }
      return s.addressstreettype.ApartmentType
    }
  func (s *AddressStreetType) ApartmentType_IsNil() bool {
    return s.ApartmentType == nil || s.addressstreettype.ApartmentType == nil
    }

func (n *LearningStandardItem) Unset(key string) *LearningStandardItem {
        switch key {
  case "PredecessorItems":
   n.learningstandarditem.PredecessorItems = nil
  case "Level5":
   n.learningstandarditem.Level5 = nil
  case "Statements":
   n.learningstandarditem.Statements = nil
  case "StandardHierarchyLevel":
   n.learningstandarditem.StandardHierarchyLevel = nil
  case "YearLevels":
   n.learningstandarditem.YearLevels = nil
  case "Level4":
   n.learningstandarditem.Level4 = nil
  case "ACStrandSubjectArea":
   n.learningstandarditem.ACStrandSubjectArea = nil
  case "SIF_ExtendedElements":
   n.learningstandarditem.SIF_ExtendedElements = nil
  case "StandardIdentifier":
   n.learningstandarditem.StandardIdentifier = nil
  case "LocalCodeList":
   n.learningstandarditem.LocalCodeList = nil
  case "StandardSettingBody":
   n.learningstandarditem.StandardSettingBody = nil
  case "RefId":
   n.learningstandarditem.RefId = nil
  case "StatementCodes":
   n.learningstandarditem.StatementCodes = nil
  case "LearningStandardDocumentRefId":
   n.learningstandarditem.LearningStandardDocumentRefId = nil
  case "SIF_Metadata":
   n.learningstandarditem.SIF_Metadata = nil
  case "Resources":
   n.learningstandarditem.Resources = nil
  case "RelatedLearningStandardItems":
   n.learningstandarditem.RelatedLearningStandardItems = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningStandardItem")
        }
        return n
}

func (n *LearningStandardItem) SetProperty(key string, value interface{}) *LearningStandardItem {
        if n == nil {
                n, _ = LearningStandardItemPointer(LearningStandardItem{})
        }
        switch key {
    case "PredecessorItems":
    if v, ok:= LearningStandardsTypePointer(value); ok {
      n.learningstandarditem.PredecessorItems = v
      }
    case "Level5":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarditem.Level5 = ((*String)(v))
      }
    case "Statements":
    if v, ok:= StatementsTypePointer(value); ok {
      n.learningstandarditem.Statements = v
      }
    case "StandardHierarchyLevel":
    if v, ok:= StandardHierarchyLevelTypePointer(value); ok {
      n.learningstandarditem.StandardHierarchyLevel = v
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.learningstandarditem.YearLevels = v
      }
    case "Level4":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarditem.Level4 = ((*String)(v))
      }
    case "ACStrandSubjectArea":
    if v, ok:= ACStrandSubjectAreaTypePointer(value); ok {
      n.learningstandarditem.ACStrandSubjectArea = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.learningstandarditem.SIF_ExtendedElements = v
      }
    case "StandardIdentifier":
    if v, ok:= StandardIdentifierTypePointer(value); ok {
      n.learningstandarditem.StandardIdentifier = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.learningstandarditem.LocalCodeList = v
      }
    case "StandardSettingBody":
    if v, ok:= StandardsSettingBodyTypePointer(value); ok {
      n.learningstandarditem.StandardSettingBody = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarditem.RefId = ((*RefIdType)(v))
      }
    case "StatementCodes":
    if v, ok:= StatementCodesTypePointer(value); ok {
      n.learningstandarditem.StatementCodes = v
      }
    case "LearningStandardDocumentRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarditem.LearningStandardDocumentRefId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.learningstandarditem.SIF_Metadata = v
      }
    case "Resources":
    if v, ok:= LResourcesTypePointer(value); ok {
      n.learningstandarditem.Resources = v
      }
    case "RelatedLearningStandardItems":
    if v, ok:= RelatedLearningStandardItemRefIdListTypePointer(value); ok {
      n.learningstandarditem.RelatedLearningStandardItems = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningStandardItem")
        }
        return n
}

  func (s *LearningStandardItem) PredecessorItems() *LearningStandardsType {
    if s.learningstandarditem.PredecessorItems == nil {
     if v, ok:= LearningStandardsTypePointer(LearningStandardsType{}); ok {
      s.learningstandarditem.PredecessorItems = v
      }
      }
      return s.learningstandarditem.PredecessorItems
    }
  func (s *LearningStandardItem) PredecessorItems_IsNil() bool {
    return s.PredecessorItems == nil || s.learningstandarditem.PredecessorItems == nil
    }
  func (s *LearningStandardItem) Level5() *String {
    if s.learningstandarditem.Level5 == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarditem.Level5 = ((*String)(v))
      }
      }
      return s.learningstandarditem.Level5
    }
  func (s *LearningStandardItem) Level5_IsNil() bool {
    return s.Level5 == nil || s.learningstandarditem.Level5 == nil
    }
  func (s *LearningStandardItem) Statements() *StatementsType {
    if s.learningstandarditem.Statements == nil {
     if v, ok:= StatementsTypePointer(StatementsType{}); ok {
      s.learningstandarditem.Statements = v
      }
      }
      return s.learningstandarditem.Statements
    }
  func (s *LearningStandardItem) Statements_IsNil() bool {
    return s.Statements == nil || s.learningstandarditem.Statements == nil
    }
  func (s *LearningStandardItem) StandardHierarchyLevel() *StandardHierarchyLevelType {
    if s.learningstandarditem.StandardHierarchyLevel == nil {
     if v, ok:= StandardHierarchyLevelTypePointer(StandardHierarchyLevelType{}); ok {
      s.learningstandarditem.StandardHierarchyLevel = v
      }
      }
      return s.learningstandarditem.StandardHierarchyLevel
    }
  func (s *LearningStandardItem) StandardHierarchyLevel_IsNil() bool {
    return s.StandardHierarchyLevel == nil || s.learningstandarditem.StandardHierarchyLevel == nil
    }
  func (s *LearningStandardItem) YearLevels() *YearLevelsType {
    if s.learningstandarditem.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.learningstandarditem.YearLevels = v
      }
      }
      return s.learningstandarditem.YearLevels
    }
  func (s *LearningStandardItem) YearLevels_IsNil() bool {
    return s.YearLevels == nil || s.learningstandarditem.YearLevels == nil
    }
  func (s *LearningStandardItem) Level4() *String {
    if s.learningstandarditem.Level4 == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarditem.Level4 = ((*String)(v))
      }
      }
      return s.learningstandarditem.Level4
    }
  func (s *LearningStandardItem) Level4_IsNil() bool {
    return s.Level4 == nil || s.learningstandarditem.Level4 == nil
    }
  func (s *LearningStandardItem) ACStrandSubjectArea() *ACStrandSubjectAreaType {
    if s.learningstandarditem.ACStrandSubjectArea == nil {
     if v, ok:= ACStrandSubjectAreaTypePointer(ACStrandSubjectAreaType{}); ok {
      s.learningstandarditem.ACStrandSubjectArea = v
      }
      }
      return s.learningstandarditem.ACStrandSubjectArea
    }
  func (s *LearningStandardItem) ACStrandSubjectArea_IsNil() bool {
    return s.ACStrandSubjectArea == nil || s.learningstandarditem.ACStrandSubjectArea == nil
    }
  func (s *LearningStandardItem) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.learningstandarditem.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.learningstandarditem.SIF_ExtendedElements = v
      }
      }
      return s.learningstandarditem.SIF_ExtendedElements
    }
  func (s *LearningStandardItem) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.learningstandarditem.SIF_ExtendedElements == nil
    }
  func (s *LearningStandardItem) StandardIdentifier() *StandardIdentifierType {
    if s.learningstandarditem.StandardIdentifier == nil {
     if v, ok:= StandardIdentifierTypePointer(StandardIdentifierType{}); ok {
      s.learningstandarditem.StandardIdentifier = v
      }
      }
      return s.learningstandarditem.StandardIdentifier
    }
  func (s *LearningStandardItem) StandardIdentifier_IsNil() bool {
    return s.StandardIdentifier == nil || s.learningstandarditem.StandardIdentifier == nil
    }
  func (s *LearningStandardItem) LocalCodeList() *LocalCodeListType {
    if s.learningstandarditem.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.learningstandarditem.LocalCodeList = v
      }
      }
      return s.learningstandarditem.LocalCodeList
    }
  func (s *LearningStandardItem) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.learningstandarditem.LocalCodeList == nil
    }
  func (s *LearningStandardItem) StandardSettingBody() *StandardsSettingBodyType {
    if s.learningstandarditem.StandardSettingBody == nil {
     if v, ok:= StandardsSettingBodyTypePointer(StandardsSettingBodyType{}); ok {
      s.learningstandarditem.StandardSettingBody = v
      }
      }
      return s.learningstandarditem.StandardSettingBody
    }
  func (s *LearningStandardItem) StandardSettingBody_IsNil() bool {
    return s.StandardSettingBody == nil || s.learningstandarditem.StandardSettingBody == nil
    }
  func (s *LearningStandardItem) RefId() *RefIdType {
    if s.learningstandarditem.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarditem.RefId = ((*RefIdType)(v))
      }
      }
      return s.learningstandarditem.RefId
    }
  func (s *LearningStandardItem) RefId_IsNil() bool {
    return s.RefId == nil || s.learningstandarditem.RefId == nil
    }
  func (s *LearningStandardItem) StatementCodes() *StatementCodesType {
    if s.learningstandarditem.StatementCodes == nil {
     if v, ok:= StatementCodesTypePointer(StatementCodesType{}); ok {
      s.learningstandarditem.StatementCodes = v
      }
      }
      return s.learningstandarditem.StatementCodes
    }
  func (s *LearningStandardItem) StatementCodes_IsNil() bool {
    return s.StatementCodes == nil || s.learningstandarditem.StatementCodes == nil
    }
  func (s *LearningStandardItem) LearningStandardDocumentRefId() *String {
    if s.learningstandarditem.LearningStandardDocumentRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarditem.LearningStandardDocumentRefId = ((*String)(v))
      }
      }
      return s.learningstandarditem.LearningStandardDocumentRefId
    }
  func (s *LearningStandardItem) LearningStandardDocumentRefId_IsNil() bool {
    return s.LearningStandardDocumentRefId == nil || s.learningstandarditem.LearningStandardDocumentRefId == nil
    }
  func (s *LearningStandardItem) SIF_Metadata() *SIF_MetadataType {
    if s.learningstandarditem.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.learningstandarditem.SIF_Metadata = v
      }
      }
      return s.learningstandarditem.SIF_Metadata
    }
  func (s *LearningStandardItem) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.learningstandarditem.SIF_Metadata == nil
    }
  func (s *LearningStandardItem) Resources() *LResourcesType {
    if s.learningstandarditem.Resources == nil {
     if v, ok:= LResourcesTypePointer(LResourcesType{}); ok {
      s.learningstandarditem.Resources = v
      }
      }
      return s.learningstandarditem.Resources
    }
  func (s *LearningStandardItem) Resources_IsNil() bool {
    return s.Resources == nil || s.learningstandarditem.Resources == nil
    }
  func (s *LearningStandardItem) RelatedLearningStandardItems() *RelatedLearningStandardItemRefIdListType {
    if s.learningstandarditem.RelatedLearningStandardItems == nil {
     if v, ok:= RelatedLearningStandardItemRefIdListTypePointer(RelatedLearningStandardItemRefIdListType{}); ok {
      s.learningstandarditem.RelatedLearningStandardItems = v
      }
      }
      return s.learningstandarditem.RelatedLearningStandardItems
    }
  func (s *LearningStandardItem) RelatedLearningStandardItems_IsNil() bool {
    return s.RelatedLearningStandardItems == nil || s.learningstandarditem.RelatedLearningStandardItems == nil
    }

func (n *ResourcesType) Unset(key string) *ResourcesType {
        switch key {
  case "ResourceType":
   n.resourcestype.ResourceType = nil
  case "Value":
   n.resourcestype.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourcesType")
        }
        return n
}

func (n *ResourcesType) SetProperty(key string, value interface{}) *ResourcesType {
        if n == nil {
                n, _ = ResourcesTypePointer(ResourcesType{})
        }
        switch key {
    case "ResourceType":
    
    if v, ok:= StringPointer(value); ok {
      n.resourcestype.ResourceType = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.resourcestype.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourcesType")
        }
        return n
}

  func (s *ResourcesType) ResourceType() *String {
    if s.resourcestype.ResourceType == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourcestype.ResourceType = ((*String)(v))
      }
      }
      return s.resourcestype.ResourceType
    }
  func (s *ResourcesType) ResourceType_IsNil() bool {
    return s.ResourceType == nil || s.resourcestype.ResourceType == nil
    }
  func (s *ResourcesType) Value() *String {
    if s.resourcestype.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourcestype.Value = ((*String)(v))
      }
      }
      return s.resourcestype.Value
    }
  func (s *ResourcesType) Value_IsNil() bool {
    return s.Value == nil || s.resourcestype.Value == nil
    }

func (n *WellbeingPlanType) Unset(key string) *WellbeingPlanType {
        switch key {
  case "PlanNotes":
   n.wellbeingplantype.PlanNotes = nil
  case "PersonalisedPlanRefId":
   n.wellbeingplantype.PersonalisedPlanRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingPlanType")
        }
        return n
}

func (n *WellbeingPlanType) SetProperty(key string, value interface{}) *WellbeingPlanType {
        if n == nil {
                n, _ = WellbeingPlanTypePointer(WellbeingPlanType{})
        }
        switch key {
    case "PlanNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingplantype.PlanNotes = ((*String)(v))
      }
    case "PersonalisedPlanRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingplantype.PersonalisedPlanRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingPlanType")
        }
        return n
}

  func (s *WellbeingPlanType) PlanNotes() *String {
    if s.wellbeingplantype.PlanNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingplantype.PlanNotes = ((*String)(v))
      }
      }
      return s.wellbeingplantype.PlanNotes
    }
  func (s *WellbeingPlanType) PlanNotes_IsNil() bool {
    return s.PlanNotes == nil || s.wellbeingplantype.PlanNotes == nil
    }
  func (s *WellbeingPlanType) PersonalisedPlanRefId() *String {
    if s.wellbeingplantype.PersonalisedPlanRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingplantype.PersonalisedPlanRefId = ((*String)(v))
      }
      }
      return s.wellbeingplantype.PersonalisedPlanRefId
    }
  func (s *WellbeingPlanType) PersonalisedPlanRefId_IsNil() bool {
    return s.PersonalisedPlanRefId == nil || s.wellbeingplantype.PersonalisedPlanRefId == nil
    }

func (n *PersonPicture_PictureSource) Unset(key string) *PersonPicture_PictureSource {
        switch key {
  case "Value":
   n.personpicture_picturesource.Value = nil
  case "Type":
   n.personpicture_picturesource.Type = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonPicture_PictureSource")
        }
        return n
}

func (n *PersonPicture_PictureSource) SetProperty(key string, value interface{}) *PersonPicture_PictureSource {
        if n == nil {
                n, _ = PersonPicture_PictureSourcePointer(PersonPicture_PictureSource{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.personpicture_picturesource.Value = ((*URIOrBinaryType)(v))
      }
    case "Type":
        if !CodesetContains(AUCodeSetsPictureSourceType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsPictureSourceType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.personpicture_picturesource.Type = ((*AUCodeSetsPictureSourceType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonPicture_PictureSource")
        }
        return n
}

  func (s *PersonPicture_PictureSource) Value() *URIOrBinaryType {
    if s.personpicture_picturesource.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.personpicture_picturesource.Value = ((*URIOrBinaryType)(v))
      }
      }
      return s.personpicture_picturesource.Value
    }
  func (s *PersonPicture_PictureSource) Value_IsNil() bool {
    return s.Value == nil || s.personpicture_picturesource.Value == nil
    }
  func (s *PersonPicture_PictureSource) Type() *AUCodeSetsPictureSourceType {
    if s.personpicture_picturesource.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.personpicture_picturesource.Type = ((*AUCodeSetsPictureSourceType)(v))
      }
      }
      return s.personpicture_picturesource.Type
    }
  func (s *PersonPicture_PictureSource) Type_IsNil() bool {
    return s.Type == nil || s.personpicture_picturesource.Type == nil
    }

func (n *PersonInvolvementType_PersonRefId) Unset(key string) *PersonInvolvementType_PersonRefId {
        switch key {
  case "SIF_RefObject":
   n.personinvolvementtype_personrefid.SIF_RefObject = nil
  case "Value":
   n.personinvolvementtype_personrefid.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonInvolvementType_PersonRefId")
        }
        return n
}

func (n *PersonInvolvementType_PersonRefId) SetProperty(key string, value interface{}) *PersonInvolvementType_PersonRefId {
        if n == nil {
                n, _ = PersonInvolvementType_PersonRefIdPointer(PersonInvolvementType_PersonRefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.personinvolvementtype_personrefid.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.personinvolvementtype_personrefid.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonInvolvementType_PersonRefId")
        }
        return n
}

  func (s *PersonInvolvementType_PersonRefId) SIF_RefObject() *String {
    if s.personinvolvementtype_personrefid.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.personinvolvementtype_personrefid.SIF_RefObject = ((*String)(v))
      }
      }
      return s.personinvolvementtype_personrefid.SIF_RefObject
    }
  func (s *PersonInvolvementType_PersonRefId) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.personinvolvementtype_personrefid.SIF_RefObject == nil
    }
  func (s *PersonInvolvementType_PersonRefId) Value() *String {
    if s.personinvolvementtype_personrefid.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.personinvolvementtype_personrefid.Value = ((*String)(v))
      }
      }
      return s.personinvolvementtype_personrefid.Value
    }
  func (s *PersonInvolvementType_PersonRefId) Value_IsNil() bool {
    return s.Value == nil || s.personinvolvementtype_personrefid.Value == nil
    }

func (n *WellbeingEvent) Unset(key string) *WellbeingEvent {
        switch key {
  case "WellbeingEventTime":
   n.wellbeingevent.WellbeingEventTime = nil
  case "RefId":
   n.wellbeingevent.RefId = nil
  case "WellbeingEventCategoryClass":
   n.wellbeingevent.WellbeingEventCategoryClass = nil
  case "WellbeingEventLocationDetails":
   n.wellbeingevent.WellbeingEventLocationDetails = nil
  case "SIF_Metadata":
   n.wellbeingevent.SIF_Metadata = nil
  case "WellbeingEventCreationTimeStamp":
   n.wellbeingevent.WellbeingEventCreationTimeStamp = nil
  case "SchoolInfoRefId":
   n.wellbeingevent.SchoolInfoRefId = nil
  case "GroupIndicator":
   n.wellbeingevent.GroupIndicator = nil
  case "WellbeingEventDescription":
   n.wellbeingevent.WellbeingEventDescription = nil
  case "FollowUpActionList":
   n.wellbeingevent.FollowUpActionList = nil
  case "ConfidentialFlag":
   n.wellbeingevent.ConfidentialFlag = nil
  case "LocalCodeList":
   n.wellbeingevent.LocalCodeList = nil
  case "DocumentList":
   n.wellbeingevent.DocumentList = nil
  case "StudentPersonalRefId":
   n.wellbeingevent.StudentPersonalRefId = nil
  case "WellbeingEventNotes":
   n.wellbeingevent.WellbeingEventNotes = nil
  case "WellbeingEventTimePeriod":
   n.wellbeingevent.WellbeingEventTimePeriod = nil
  case "WellbeingEventCategoryList":
   n.wellbeingevent.WellbeingEventCategoryList = nil
  case "Status":
   n.wellbeingevent.Status = nil
  case "PersonInvolvementList":
   n.wellbeingevent.PersonInvolvementList = nil
  case "WellbeingEventDate":
   n.wellbeingevent.WellbeingEventDate = nil
  case "EventId":
   n.wellbeingevent.EventId = nil
  case "ReportingStaffRefId":
   n.wellbeingevent.ReportingStaffRefId = nil
  case "SIF_ExtendedElements":
   n.wellbeingevent.SIF_ExtendedElements = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingEvent")
        }
        return n
}

func (n *WellbeingEvent) SetProperty(key string, value interface{}) *WellbeingEvent {
        if n == nil {
                n, _ = WellbeingEventPointer(WellbeingEvent{})
        }
        switch key {
    case "WellbeingEventTime":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.WellbeingEventTime = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.RefId = ((*RefIdType)(v))
      }
    case "WellbeingEventCategoryClass":
        if !CodesetContains(AUCodeSetsWellbeingEventCategoryClassType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingEventCategoryClassType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.WellbeingEventCategoryClass = ((*AUCodeSetsWellbeingEventCategoryClassType)(v))
      }
    case "WellbeingEventLocationDetails":
    if v, ok:= WellbeingEventLocationDetailsTypePointer(value); ok {
      n.wellbeingevent.WellbeingEventLocationDetails = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.wellbeingevent.SIF_Metadata = v
      }
    case "WellbeingEventCreationTimeStamp":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.WellbeingEventCreationTimeStamp = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.SchoolInfoRefId = ((*String)(v))
      }
    case "GroupIndicator":
    
    if v, ok:= BoolPointer(value); ok {
      n.wellbeingevent.GroupIndicator = ((*Bool)(v))
      }
    case "WellbeingEventDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.WellbeingEventDescription = ((*String)(v))
      }
    case "FollowUpActionList":
    if v, ok:= FollowUpActionListTypePointer(value); ok {
      n.wellbeingevent.FollowUpActionList = v
      }
    case "ConfidentialFlag":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.ConfidentialFlag = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.wellbeingevent.LocalCodeList = v
      }
    case "DocumentList":
    if v, ok:= WellbeingDocumentListTypePointer(value); ok {
      n.wellbeingevent.DocumentList = v
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.StudentPersonalRefId = ((*String)(v))
      }
    case "WellbeingEventNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.WellbeingEventNotes = ((*String)(v))
      }
    case "WellbeingEventTimePeriod":
        if !CodesetContains(AUCodeSetsWellbeingEventTimePeriodType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingEventTimePeriodType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.WellbeingEventTimePeriod = ((*AUCodeSetsWellbeingEventTimePeriodType)(v))
      }
    case "WellbeingEventCategoryList":
    if v, ok:= WellbeingEventCategoryListTypePointer(value); ok {
      n.wellbeingevent.WellbeingEventCategoryList = v
      }
    case "Status":
        if !CodesetContains(AUCodeSetsWellbeingStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
    case "PersonInvolvementList":
    if v, ok:= PersonInvolvementListTypePointer(value); ok {
      n.wellbeingevent.PersonInvolvementList = v
      }
    case "WellbeingEventDate":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.WellbeingEventDate = ((*String)(v))
      }
    case "EventId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.EventId = ((*LocalIdType)(v))
      }
    case "ReportingStaffRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingevent.ReportingStaffRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.wellbeingevent.SIF_ExtendedElements = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingEvent")
        }
        return n
}

  func (s *WellbeingEvent) WellbeingEventTime() *String {
    if s.wellbeingevent.WellbeingEventTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.WellbeingEventTime = ((*String)(v))
      }
      }
      return s.wellbeingevent.WellbeingEventTime
    }
  func (s *WellbeingEvent) WellbeingEventTime_IsNil() bool {
    return s.WellbeingEventTime == nil || s.wellbeingevent.WellbeingEventTime == nil
    }
  func (s *WellbeingEvent) RefId() *RefIdType {
    if s.wellbeingevent.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.RefId = ((*RefIdType)(v))
      }
      }
      return s.wellbeingevent.RefId
    }
  func (s *WellbeingEvent) RefId_IsNil() bool {
    return s.RefId == nil || s.wellbeingevent.RefId == nil
    }
  func (s *WellbeingEvent) WellbeingEventCategoryClass() *AUCodeSetsWellbeingEventCategoryClassType {
    if s.wellbeingevent.WellbeingEventCategoryClass == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.WellbeingEventCategoryClass = ((*AUCodeSetsWellbeingEventCategoryClassType)(v))
      }
      }
      return s.wellbeingevent.WellbeingEventCategoryClass
    }
  func (s *WellbeingEvent) WellbeingEventCategoryClass_IsNil() bool {
    return s.WellbeingEventCategoryClass == nil || s.wellbeingevent.WellbeingEventCategoryClass == nil
    }
  func (s *WellbeingEvent) WellbeingEventLocationDetails() *WellbeingEventLocationDetailsType {
    if s.wellbeingevent.WellbeingEventLocationDetails == nil {
     if v, ok:= WellbeingEventLocationDetailsTypePointer(WellbeingEventLocationDetailsType{}); ok {
      s.wellbeingevent.WellbeingEventLocationDetails = v
      }
      }
      return s.wellbeingevent.WellbeingEventLocationDetails
    }
  func (s *WellbeingEvent) WellbeingEventLocationDetails_IsNil() bool {
    return s.WellbeingEventLocationDetails == nil || s.wellbeingevent.WellbeingEventLocationDetails == nil
    }
  func (s *WellbeingEvent) SIF_Metadata() *SIF_MetadataType {
    if s.wellbeingevent.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.wellbeingevent.SIF_Metadata = v
      }
      }
      return s.wellbeingevent.SIF_Metadata
    }
  func (s *WellbeingEvent) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.wellbeingevent.SIF_Metadata == nil
    }
  func (s *WellbeingEvent) WellbeingEventCreationTimeStamp() *String {
    if s.wellbeingevent.WellbeingEventCreationTimeStamp == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.WellbeingEventCreationTimeStamp = ((*String)(v))
      }
      }
      return s.wellbeingevent.WellbeingEventCreationTimeStamp
    }
  func (s *WellbeingEvent) WellbeingEventCreationTimeStamp_IsNil() bool {
    return s.WellbeingEventCreationTimeStamp == nil || s.wellbeingevent.WellbeingEventCreationTimeStamp == nil
    }
  func (s *WellbeingEvent) SchoolInfoRefId() *String {
    if s.wellbeingevent.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.wellbeingevent.SchoolInfoRefId
    }
  func (s *WellbeingEvent) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.wellbeingevent.SchoolInfoRefId == nil
    }
  func (s *WellbeingEvent) GroupIndicator() *Bool {
    if s.wellbeingevent.GroupIndicator == nil {
    if v, ok:= BoolPointer(false); ok {
      s.wellbeingevent.GroupIndicator = ((*Bool)(v))
      }
      }
      return s.wellbeingevent.GroupIndicator
    }
  func (s *WellbeingEvent) GroupIndicator_IsNil() bool {
    return s.GroupIndicator == nil || s.wellbeingevent.GroupIndicator == nil
    }
  func (s *WellbeingEvent) WellbeingEventDescription() *String {
    if s.wellbeingevent.WellbeingEventDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.WellbeingEventDescription = ((*String)(v))
      }
      }
      return s.wellbeingevent.WellbeingEventDescription
    }
  func (s *WellbeingEvent) WellbeingEventDescription_IsNil() bool {
    return s.WellbeingEventDescription == nil || s.wellbeingevent.WellbeingEventDescription == nil
    }
  func (s *WellbeingEvent) FollowUpActionList() *FollowUpActionListType {
    if s.wellbeingevent.FollowUpActionList == nil {
     if v, ok:= FollowUpActionListTypePointer(FollowUpActionListType{}); ok {
      s.wellbeingevent.FollowUpActionList = v
      }
      }
      return s.wellbeingevent.FollowUpActionList
    }
  func (s *WellbeingEvent) FollowUpActionList_IsNil() bool {
    return s.FollowUpActionList == nil || s.wellbeingevent.FollowUpActionList == nil
    }
  func (s *WellbeingEvent) ConfidentialFlag() *AUCodeSetsYesOrNoCategoryType {
    if s.wellbeingevent.ConfidentialFlag == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.ConfidentialFlag = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.wellbeingevent.ConfidentialFlag
    }
  func (s *WellbeingEvent) ConfidentialFlag_IsNil() bool {
    return s.ConfidentialFlag == nil || s.wellbeingevent.ConfidentialFlag == nil
    }
  func (s *WellbeingEvent) LocalCodeList() *LocalCodeListType {
    if s.wellbeingevent.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.wellbeingevent.LocalCodeList = v
      }
      }
      return s.wellbeingevent.LocalCodeList
    }
  func (s *WellbeingEvent) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.wellbeingevent.LocalCodeList == nil
    }
  func (s *WellbeingEvent) DocumentList() *WellbeingDocumentListType {
    if s.wellbeingevent.DocumentList == nil {
     if v, ok:= WellbeingDocumentListTypePointer(WellbeingDocumentListType{}); ok {
      s.wellbeingevent.DocumentList = v
      }
      }
      return s.wellbeingevent.DocumentList
    }
  func (s *WellbeingEvent) DocumentList_IsNil() bool {
    return s.DocumentList == nil || s.wellbeingevent.DocumentList == nil
    }
  func (s *WellbeingEvent) StudentPersonalRefId() *String {
    if s.wellbeingevent.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.wellbeingevent.StudentPersonalRefId
    }
  func (s *WellbeingEvent) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.wellbeingevent.StudentPersonalRefId == nil
    }
  func (s *WellbeingEvent) WellbeingEventNotes() *String {
    if s.wellbeingevent.WellbeingEventNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.WellbeingEventNotes = ((*String)(v))
      }
      }
      return s.wellbeingevent.WellbeingEventNotes
    }
  func (s *WellbeingEvent) WellbeingEventNotes_IsNil() bool {
    return s.WellbeingEventNotes == nil || s.wellbeingevent.WellbeingEventNotes == nil
    }
  func (s *WellbeingEvent) WellbeingEventTimePeriod() *AUCodeSetsWellbeingEventTimePeriodType {
    if s.wellbeingevent.WellbeingEventTimePeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.WellbeingEventTimePeriod = ((*AUCodeSetsWellbeingEventTimePeriodType)(v))
      }
      }
      return s.wellbeingevent.WellbeingEventTimePeriod
    }
  func (s *WellbeingEvent) WellbeingEventTimePeriod_IsNil() bool {
    return s.WellbeingEventTimePeriod == nil || s.wellbeingevent.WellbeingEventTimePeriod == nil
    }
  func (s *WellbeingEvent) WellbeingEventCategoryList() *WellbeingEventCategoryListType {
    if s.wellbeingevent.WellbeingEventCategoryList == nil {
     if v, ok:= WellbeingEventCategoryListTypePointer(WellbeingEventCategoryListType{}); ok {
      s.wellbeingevent.WellbeingEventCategoryList = v
      }
      }
      return s.wellbeingevent.WellbeingEventCategoryList
    }
  func (s *WellbeingEvent) WellbeingEventCategoryList_IsNil() bool {
    return s.WellbeingEventCategoryList == nil || s.wellbeingevent.WellbeingEventCategoryList == nil
    }
  func (s *WellbeingEvent) Status() *AUCodeSetsWellbeingStatusType {
    if s.wellbeingevent.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
      }
      return s.wellbeingevent.Status
    }
  func (s *WellbeingEvent) Status_IsNil() bool {
    return s.Status == nil || s.wellbeingevent.Status == nil
    }
  func (s *WellbeingEvent) PersonInvolvementList() *PersonInvolvementListType {
    if s.wellbeingevent.PersonInvolvementList == nil {
     if v, ok:= PersonInvolvementListTypePointer(PersonInvolvementListType{}); ok {
      s.wellbeingevent.PersonInvolvementList = v
      }
      }
      return s.wellbeingevent.PersonInvolvementList
    }
  func (s *WellbeingEvent) PersonInvolvementList_IsNil() bool {
    return s.PersonInvolvementList == nil || s.wellbeingevent.PersonInvolvementList == nil
    }
  func (s *WellbeingEvent) WellbeingEventDate() *String {
    if s.wellbeingevent.WellbeingEventDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.WellbeingEventDate = ((*String)(v))
      }
      }
      return s.wellbeingevent.WellbeingEventDate
    }
  func (s *WellbeingEvent) WellbeingEventDate_IsNil() bool {
    return s.WellbeingEventDate == nil || s.wellbeingevent.WellbeingEventDate == nil
    }
  func (s *WellbeingEvent) EventId() *LocalIdType {
    if s.wellbeingevent.EventId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.EventId = ((*LocalIdType)(v))
      }
      }
      return s.wellbeingevent.EventId
    }
  func (s *WellbeingEvent) EventId_IsNil() bool {
    return s.EventId == nil || s.wellbeingevent.EventId == nil
    }
  func (s *WellbeingEvent) ReportingStaffRefId() *String {
    if s.wellbeingevent.ReportingStaffRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingevent.ReportingStaffRefId = ((*String)(v))
      }
      }
      return s.wellbeingevent.ReportingStaffRefId
    }
  func (s *WellbeingEvent) ReportingStaffRefId_IsNil() bool {
    return s.ReportingStaffRefId == nil || s.wellbeingevent.ReportingStaffRefId == nil
    }
  func (s *WellbeingEvent) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.wellbeingevent.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.wellbeingevent.SIF_ExtendedElements = v
      }
      }
      return s.wellbeingevent.SIF_ExtendedElements
    }
  func (s *WellbeingEvent) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.wellbeingevent.SIF_ExtendedElements == nil
    }

func (n *Journal_OriginatingTransactionRefId) Unset(key string) *Journal_OriginatingTransactionRefId {
        switch key {
  case "SIF_RefObject":
   n.journal_originatingtransactionrefid.SIF_RefObject = nil
  case "Value":
   n.journal_originatingtransactionrefid.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Journal_OriginatingTransactionRefId")
        }
        return n
}

func (n *Journal_OriginatingTransactionRefId) SetProperty(key string, value interface{}) *Journal_OriginatingTransactionRefId {
        if n == nil {
                n, _ = Journal_OriginatingTransactionRefIdPointer(Journal_OriginatingTransactionRefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.journal_originatingtransactionrefid.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.journal_originatingtransactionrefid.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Journal_OriginatingTransactionRefId")
        }
        return n
}

  func (s *Journal_OriginatingTransactionRefId) SIF_RefObject() *String {
    if s.journal_originatingtransactionrefid.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal_originatingtransactionrefid.SIF_RefObject = ((*String)(v))
      }
      }
      return s.journal_originatingtransactionrefid.SIF_RefObject
    }
  func (s *Journal_OriginatingTransactionRefId) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.journal_originatingtransactionrefid.SIF_RefObject == nil
    }
  func (s *Journal_OriginatingTransactionRefId) Value() *String {
    if s.journal_originatingtransactionrefid.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal_originatingtransactionrefid.Value = ((*String)(v))
      }
      }
      return s.journal_originatingtransactionrefid.Value
    }
  func (s *Journal_OriginatingTransactionRefId) Value_IsNil() bool {
    return s.Value == nil || s.journal_originatingtransactionrefid.Value == nil
    }

func (n *StudentEntryContainerType) Unset(key string) *StudentEntryContainerType {
        switch key {
  case "Code":
   n.studententrycontainertype.Code = nil
  case "OtherCodeList":
   n.studententrycontainertype.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentEntryContainerType")
        }
        return n
}

func (n *StudentEntryContainerType) SetProperty(key string, value interface{}) *StudentEntryContainerType {
        if n == nil {
                n, _ = StudentEntryContainerTypePointer(StudentEntryContainerType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsEntryTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEntryTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studententrycontainertype.Code = ((*AUCodeSetsEntryTypeType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.studententrycontainertype.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentEntryContainerType")
        }
        return n
}

  func (s *StudentEntryContainerType) Code() *AUCodeSetsEntryTypeType {
    if s.studententrycontainertype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.studententrycontainertype.Code = ((*AUCodeSetsEntryTypeType)(v))
      }
      }
      return s.studententrycontainertype.Code
    }
  func (s *StudentEntryContainerType) Code_IsNil() bool {
    return s.Code == nil || s.studententrycontainertype.Code == nil
    }
  func (s *StudentEntryContainerType) OtherCodeList() *OtherCodeListType {
    if s.studententrycontainertype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.studententrycontainertype.OtherCodeList = v
      }
      }
      return s.studententrycontainertype.OtherCodeList
    }
  func (s *StudentEntryContainerType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.studententrycontainertype.OtherCodeList == nil
    }

func (n *EquipmentInfo_SIF_RefId) Unset(key string) *EquipmentInfo_SIF_RefId {
        switch key {
  case "Value":
   n.equipmentinfo_sif_refid.Value = nil
  case "SIF_RefObject":
   n.equipmentinfo_sif_refid.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EquipmentInfo_SIF_RefId")
        }
        return n
}

func (n *EquipmentInfo_SIF_RefId) SetProperty(key string, value interface{}) *EquipmentInfo_SIF_RefId {
        if n == nil {
                n, _ = EquipmentInfo_SIF_RefIdPointer(EquipmentInfo_SIF_RefId{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.equipmentinfo_sif_refid.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.equipmentinfo_sif_refid.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EquipmentInfo_SIF_RefId")
        }
        return n
}

  func (s *EquipmentInfo_SIF_RefId) Value() *String {
    if s.equipmentinfo_sif_refid.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.equipmentinfo_sif_refid.Value = ((*String)(v))
      }
      }
      return s.equipmentinfo_sif_refid.Value
    }
  func (s *EquipmentInfo_SIF_RefId) Value_IsNil() bool {
    return s.Value == nil || s.equipmentinfo_sif_refid.Value == nil
    }
  func (s *EquipmentInfo_SIF_RefId) SIF_RefObject() *String {
    if s.equipmentinfo_sif_refid.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.equipmentinfo_sif_refid.SIF_RefObject = ((*String)(v))
      }
      }
      return s.equipmentinfo_sif_refid.SIF_RefObject
    }
  func (s *EquipmentInfo_SIF_RefId) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.equipmentinfo_sif_refid.SIF_RefObject == nil
    }

func (n *ActivityTimeType) Unset(key string) *ActivityTimeType {
        switch key {
  case "Duration":
   n.activitytimetype.Duration = nil
  case "FinishDate":
   n.activitytimetype.FinishDate = nil
  case "DueDate":
   n.activitytimetype.DueDate = nil
  case "StartDate":
   n.activitytimetype.StartDate = nil
  case "CreationDate":
   n.activitytimetype.CreationDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ActivityTimeType")
        }
        return n
}

func (n *ActivityTimeType) SetProperty(key string, value interface{}) *ActivityTimeType {
        if n == nil {
                n, _ = ActivityTimeTypePointer(ActivityTimeType{})
        }
        switch key {
    case "Duration":
    if v, ok:= ActivityTimeType_DurationPointer(value); ok {
      n.activitytimetype.Duration = v
      }
    case "FinishDate":
    
    if v, ok:= StringPointer(value); ok {
      n.activitytimetype.FinishDate = ((*String)(v))
      }
    case "DueDate":
    
    if v, ok:= StringPointer(value); ok {
      n.activitytimetype.DueDate = ((*String)(v))
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.activitytimetype.StartDate = ((*String)(v))
      }
    case "CreationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.activitytimetype.CreationDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ActivityTimeType")
        }
        return n
}

  func (s *ActivityTimeType) Duration() *ActivityTimeType_Duration {
    if s.activitytimetype.Duration == nil {
     if v, ok:= ActivityTimeType_DurationPointer(ActivityTimeType_Duration{}); ok {
      s.activitytimetype.Duration = v
      }
      }
      return s.activitytimetype.Duration
    }
  func (s *ActivityTimeType) Duration_IsNil() bool {
    return s.Duration == nil || s.activitytimetype.Duration == nil
    }
  func (s *ActivityTimeType) FinishDate() *String {
    if s.activitytimetype.FinishDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.activitytimetype.FinishDate = ((*String)(v))
      }
      }
      return s.activitytimetype.FinishDate
    }
  func (s *ActivityTimeType) FinishDate_IsNil() bool {
    return s.FinishDate == nil || s.activitytimetype.FinishDate == nil
    }
  func (s *ActivityTimeType) DueDate() *String {
    if s.activitytimetype.DueDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.activitytimetype.DueDate = ((*String)(v))
      }
      }
      return s.activitytimetype.DueDate
    }
  func (s *ActivityTimeType) DueDate_IsNil() bool {
    return s.DueDate == nil || s.activitytimetype.DueDate == nil
    }
  func (s *ActivityTimeType) StartDate() *String {
    if s.activitytimetype.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.activitytimetype.StartDate = ((*String)(v))
      }
      }
      return s.activitytimetype.StartDate
    }
  func (s *ActivityTimeType) StartDate_IsNil() bool {
    return s.StartDate == nil || s.activitytimetype.StartDate == nil
    }
  func (s *ActivityTimeType) CreationDate() *String {
    if s.activitytimetype.CreationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.activitytimetype.CreationDate = ((*String)(v))
      }
      }
      return s.activitytimetype.CreationDate
    }
  func (s *ActivityTimeType) CreationDate_IsNil() bool {
    return s.CreationDate == nil || s.activitytimetype.CreationDate == nil
    }

func (n *TeachingGroupScheduleType) Unset(key string) *TeachingGroupScheduleType {
        switch key {
  case "Set":
   n.teachinggroupscheduletype.Set = nil
  case "TeacherList":
   n.teachinggroupscheduletype.TeacherList = nil
  case "MaxClassSize":
   n.teachinggroupscheduletype.MaxClassSize = nil
  case "CurriculumLevel":
   n.teachinggroupscheduletype.CurriculumLevel = nil
  case "StudentList":
   n.teachinggroupscheduletype.StudentList = nil
  case "SchoolInfoRefId":
   n.teachinggroupscheduletype.SchoolInfoRefId = nil
  case "Semester":
   n.teachinggroupscheduletype.Semester = nil
  case "TeachingGroupPeriodList":
   n.teachinggroupscheduletype.TeachingGroupPeriodList = nil
  case "TimeTableSubjectRefId":
   n.teachinggroupscheduletype.TimeTableSubjectRefId = nil
  case "GroupType":
   n.teachinggroupscheduletype.GroupType = nil
  case "SchoolYear":
   n.teachinggroupscheduletype.SchoolYear = nil
  case "Block":
   n.teachinggroupscheduletype.Block = nil
  case "EditorGUID":
   n.teachinggroupscheduletype.EditorGUID = nil
  case "ShortName":
   n.teachinggroupscheduletype.ShortName = nil
  case "SchoolCourseLocalId":
   n.teachinggroupscheduletype.SchoolCourseLocalId = nil
  case "LocalId":
   n.teachinggroupscheduletype.LocalId = nil
  case "TimeTableSubjectLocalId":
   n.teachinggroupscheduletype.TimeTableSubjectLocalId = nil
  case "MinClassSize":
   n.teachinggroupscheduletype.MinClassSize = nil
  case "SchoolCourseInfoRefId":
   n.teachinggroupscheduletype.SchoolCourseInfoRefId = nil
  case "LongName":
   n.teachinggroupscheduletype.LongName = nil
  case "SchoolLocalId":
   n.teachinggroupscheduletype.SchoolLocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupScheduleType")
        }
        return n
}

func (n *TeachingGroupScheduleType) SetProperty(key string, value interface{}) *TeachingGroupScheduleType {
        if n == nil {
                n, _ = TeachingGroupScheduleTypePointer(TeachingGroupScheduleType{})
        }
        switch key {
    case "Set":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.Set = ((*String)(v))
      }
    case "TeacherList":
    if v, ok:= TeacherListTypePointer(value); ok {
      n.teachinggroupscheduletype.TeacherList = v
      }
    case "MaxClassSize":
    
    if v, ok:= IntPointer(value); ok {
      n.teachinggroupscheduletype.MaxClassSize = ((*Int)(v))
      }
    case "CurriculumLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.CurriculumLevel = ((*String)(v))
      }
    case "StudentList":
    if v, ok:= StudentListTypePointer(value); ok {
      n.teachinggroupscheduletype.StudentList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.SchoolInfoRefId = ((*RefIdType)(v))
      }
    case "Semester":
    
    if v, ok:= IntPointer(value); ok {
      n.teachinggroupscheduletype.Semester = ((*Int)(v))
      }
    case "TeachingGroupPeriodList":
    if v, ok:= TeachingGroupPeriodListTypePointer(value); ok {
      n.teachinggroupscheduletype.TeachingGroupPeriodList = v
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
    case "GroupType":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.GroupType = ((*String)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.SchoolYear = ((*SchoolYearType)(v))
      }
    case "Block":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.Block = ((*String)(v))
      }
    case "EditorGUID":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.EditorGUID = ((*RefIdType)(v))
      }
    case "ShortName":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.ShortName = ((*String)(v))
      }
    case "SchoolCourseLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.SchoolCourseLocalId = ((*LocalIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.LocalId = ((*LocalIdType)(v))
      }
    case "TimeTableSubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.TimeTableSubjectLocalId = ((*LocalIdType)(v))
      }
    case "MinClassSize":
    
    if v, ok:= IntPointer(value); ok {
      n.teachinggroupscheduletype.MinClassSize = ((*Int)(v))
      }
    case "SchoolCourseInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.SchoolCourseInfoRefId = ((*RefIdType)(v))
      }
    case "LongName":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.LongName = ((*String)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupscheduletype.SchoolLocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupScheduleType")
        }
        return n
}

  func (s *TeachingGroupScheduleType) Set() *String {
    if s.teachinggroupscheduletype.Set == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.Set = ((*String)(v))
      }
      }
      return s.teachinggroupscheduletype.Set
    }
  func (s *TeachingGroupScheduleType) Set_IsNil() bool {
    return s.Set == nil || s.teachinggroupscheduletype.Set == nil
    }
  func (s *TeachingGroupScheduleType) TeacherList() *TeacherListType {
    if s.teachinggroupscheduletype.TeacherList == nil {
     if v, ok:= TeacherListTypePointer(TeacherListType{}); ok {
      s.teachinggroupscheduletype.TeacherList = v
      }
      }
      return s.teachinggroupscheduletype.TeacherList
    }
  func (s *TeachingGroupScheduleType) TeacherList_IsNil() bool {
    return s.TeacherList == nil || s.teachinggroupscheduletype.TeacherList == nil
    }
  func (s *TeachingGroupScheduleType) MaxClassSize() *Int {
    if s.teachinggroupscheduletype.MaxClassSize == nil {
    if v, ok:= IntPointer(0); ok {
      s.teachinggroupscheduletype.MaxClassSize = ((*Int)(v))
      }
      }
      return s.teachinggroupscheduletype.MaxClassSize
    }
  func (s *TeachingGroupScheduleType) MaxClassSize_IsNil() bool {
    return s.MaxClassSize == nil || s.teachinggroupscheduletype.MaxClassSize == nil
    }
  func (s *TeachingGroupScheduleType) CurriculumLevel() *String {
    if s.teachinggroupscheduletype.CurriculumLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.CurriculumLevel = ((*String)(v))
      }
      }
      return s.teachinggroupscheduletype.CurriculumLevel
    }
  func (s *TeachingGroupScheduleType) CurriculumLevel_IsNil() bool {
    return s.CurriculumLevel == nil || s.teachinggroupscheduletype.CurriculumLevel == nil
    }
  func (s *TeachingGroupScheduleType) StudentList() *StudentListType {
    if s.teachinggroupscheduletype.StudentList == nil {
     if v, ok:= StudentListTypePointer(StudentListType{}); ok {
      s.teachinggroupscheduletype.StudentList = v
      }
      }
      return s.teachinggroupscheduletype.StudentList
    }
  func (s *TeachingGroupScheduleType) StudentList_IsNil() bool {
    return s.StudentList == nil || s.teachinggroupscheduletype.StudentList == nil
    }
  func (s *TeachingGroupScheduleType) SchoolInfoRefId() *RefIdType {
    if s.teachinggroupscheduletype.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.SchoolInfoRefId = ((*RefIdType)(v))
      }
      }
      return s.teachinggroupscheduletype.SchoolInfoRefId
    }
  func (s *TeachingGroupScheduleType) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.teachinggroupscheduletype.SchoolInfoRefId == nil
    }
  func (s *TeachingGroupScheduleType) Semester() *Int {
    if s.teachinggroupscheduletype.Semester == nil {
    if v, ok:= IntPointer(0); ok {
      s.teachinggroupscheduletype.Semester = ((*Int)(v))
      }
      }
      return s.teachinggroupscheduletype.Semester
    }
  func (s *TeachingGroupScheduleType) Semester_IsNil() bool {
    return s.Semester == nil || s.teachinggroupscheduletype.Semester == nil
    }
  func (s *TeachingGroupScheduleType) TeachingGroupPeriodList() *TeachingGroupPeriodListType {
    if s.teachinggroupscheduletype.TeachingGroupPeriodList == nil {
     if v, ok:= TeachingGroupPeriodListTypePointer(TeachingGroupPeriodListType{}); ok {
      s.teachinggroupscheduletype.TeachingGroupPeriodList = v
      }
      }
      return s.teachinggroupscheduletype.TeachingGroupPeriodList
    }
  func (s *TeachingGroupScheduleType) TeachingGroupPeriodList_IsNil() bool {
    return s.TeachingGroupPeriodList == nil || s.teachinggroupscheduletype.TeachingGroupPeriodList == nil
    }
  func (s *TeachingGroupScheduleType) TimeTableSubjectRefId() *RefIdType {
    if s.teachinggroupscheduletype.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
      }
      return s.teachinggroupscheduletype.TimeTableSubjectRefId
    }
  func (s *TeachingGroupScheduleType) TimeTableSubjectRefId_IsNil() bool {
    return s.TimeTableSubjectRefId == nil || s.teachinggroupscheduletype.TimeTableSubjectRefId == nil
    }
  func (s *TeachingGroupScheduleType) GroupType() *String {
    if s.teachinggroupscheduletype.GroupType == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.GroupType = ((*String)(v))
      }
      }
      return s.teachinggroupscheduletype.GroupType
    }
  func (s *TeachingGroupScheduleType) GroupType_IsNil() bool {
    return s.GroupType == nil || s.teachinggroupscheduletype.GroupType == nil
    }
  func (s *TeachingGroupScheduleType) SchoolYear() *SchoolYearType {
    if s.teachinggroupscheduletype.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.teachinggroupscheduletype.SchoolYear
    }
  func (s *TeachingGroupScheduleType) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.teachinggroupscheduletype.SchoolYear == nil
    }
  func (s *TeachingGroupScheduleType) Block() *String {
    if s.teachinggroupscheduletype.Block == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.Block = ((*String)(v))
      }
      }
      return s.teachinggroupscheduletype.Block
    }
  func (s *TeachingGroupScheduleType) Block_IsNil() bool {
    return s.Block == nil || s.teachinggroupscheduletype.Block == nil
    }
  func (s *TeachingGroupScheduleType) EditorGUID() *RefIdType {
    if s.teachinggroupscheduletype.EditorGUID == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.EditorGUID = ((*RefIdType)(v))
      }
      }
      return s.teachinggroupscheduletype.EditorGUID
    }
  func (s *TeachingGroupScheduleType) EditorGUID_IsNil() bool {
    return s.EditorGUID == nil || s.teachinggroupscheduletype.EditorGUID == nil
    }
  func (s *TeachingGroupScheduleType) ShortName() *String {
    if s.teachinggroupscheduletype.ShortName == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.ShortName = ((*String)(v))
      }
      }
      return s.teachinggroupscheduletype.ShortName
    }
  func (s *TeachingGroupScheduleType) ShortName_IsNil() bool {
    return s.ShortName == nil || s.teachinggroupscheduletype.ShortName == nil
    }
  func (s *TeachingGroupScheduleType) SchoolCourseLocalId() *LocalIdType {
    if s.teachinggroupscheduletype.SchoolCourseLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.SchoolCourseLocalId = ((*LocalIdType)(v))
      }
      }
      return s.teachinggroupscheduletype.SchoolCourseLocalId
    }
  func (s *TeachingGroupScheduleType) SchoolCourseLocalId_IsNil() bool {
    return s.SchoolCourseLocalId == nil || s.teachinggroupscheduletype.SchoolCourseLocalId == nil
    }
  func (s *TeachingGroupScheduleType) LocalId() *LocalIdType {
    if s.teachinggroupscheduletype.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.teachinggroupscheduletype.LocalId
    }
  func (s *TeachingGroupScheduleType) LocalId_IsNil() bool {
    return s.LocalId == nil || s.teachinggroupscheduletype.LocalId == nil
    }
  func (s *TeachingGroupScheduleType) TimeTableSubjectLocalId() *LocalIdType {
    if s.teachinggroupscheduletype.TimeTableSubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.TimeTableSubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.teachinggroupscheduletype.TimeTableSubjectLocalId
    }
  func (s *TeachingGroupScheduleType) TimeTableSubjectLocalId_IsNil() bool {
    return s.TimeTableSubjectLocalId == nil || s.teachinggroupscheduletype.TimeTableSubjectLocalId == nil
    }
  func (s *TeachingGroupScheduleType) MinClassSize() *Int {
    if s.teachinggroupscheduletype.MinClassSize == nil {
    if v, ok:= IntPointer(0); ok {
      s.teachinggroupscheduletype.MinClassSize = ((*Int)(v))
      }
      }
      return s.teachinggroupscheduletype.MinClassSize
    }
  func (s *TeachingGroupScheduleType) MinClassSize_IsNil() bool {
    return s.MinClassSize == nil || s.teachinggroupscheduletype.MinClassSize == nil
    }
  func (s *TeachingGroupScheduleType) SchoolCourseInfoRefId() *RefIdType {
    if s.teachinggroupscheduletype.SchoolCourseInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.SchoolCourseInfoRefId = ((*RefIdType)(v))
      }
      }
      return s.teachinggroupscheduletype.SchoolCourseInfoRefId
    }
  func (s *TeachingGroupScheduleType) SchoolCourseInfoRefId_IsNil() bool {
    return s.SchoolCourseInfoRefId == nil || s.teachinggroupscheduletype.SchoolCourseInfoRefId == nil
    }
  func (s *TeachingGroupScheduleType) LongName() *String {
    if s.teachinggroupscheduletype.LongName == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.LongName = ((*String)(v))
      }
      }
      return s.teachinggroupscheduletype.LongName
    }
  func (s *TeachingGroupScheduleType) LongName_IsNil() bool {
    return s.LongName == nil || s.teachinggroupscheduletype.LongName == nil
    }
  func (s *TeachingGroupScheduleType) SchoolLocalId() *LocalIdType {
    if s.teachinggroupscheduletype.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupscheduletype.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.teachinggroupscheduletype.SchoolLocalId
    }
  func (s *TeachingGroupScheduleType) SchoolLocalId_IsNil() bool {
    return s.SchoolLocalId == nil || s.teachinggroupscheduletype.SchoolLocalId == nil
    }

func (n *ProgramStatusType) Unset(key string) *ProgramStatusType {
        switch key {
  case "Code":
   n.programstatustype.Code = nil
  case "OtherCodeList":
   n.programstatustype.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ProgramStatusType")
        }
        return n
}

func (n *ProgramStatusType) SetProperty(key string, value interface{}) *ProgramStatusType {
        if n == nil {
                n, _ = ProgramStatusTypePointer(ProgramStatusType{})
        }
        switch key {
    case "Code":
    
    if v, ok:= StringPointer(value); ok {
      n.programstatustype.Code = ((*String)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.programstatustype.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ProgramStatusType")
        }
        return n
}

  func (s *ProgramStatusType) Code() *String {
    if s.programstatustype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.programstatustype.Code = ((*String)(v))
      }
      }
      return s.programstatustype.Code
    }
  func (s *ProgramStatusType) Code_IsNil() bool {
    return s.Code == nil || s.programstatustype.Code == nil
    }
  func (s *ProgramStatusType) OtherCodeList() *OtherCodeListType {
    if s.programstatustype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.programstatustype.OtherCodeList = v
      }
      }
      return s.programstatustype.OtherCodeList
    }
  func (s *ProgramStatusType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.programstatustype.OtherCodeList == nil
    }

func (n *CatchmentStatusContainerType) Unset(key string) *CatchmentStatusContainerType {
        switch key {
  case "Code":
   n.catchmentstatuscontainertype.Code = nil
  case "OtherCodeList":
   n.catchmentstatuscontainertype.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CatchmentStatusContainerType")
        }
        return n
}

func (n *CatchmentStatusContainerType) SetProperty(key string, value interface{}) *CatchmentStatusContainerType {
        if n == nil {
                n, _ = CatchmentStatusContainerTypePointer(CatchmentStatusContainerType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsPublicSchoolCatchmentStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsPublicSchoolCatchmentStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.catchmentstatuscontainertype.Code = ((*AUCodeSetsPublicSchoolCatchmentStatusType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.catchmentstatuscontainertype.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CatchmentStatusContainerType")
        }
        return n
}

  func (s *CatchmentStatusContainerType) Code() *AUCodeSetsPublicSchoolCatchmentStatusType {
    if s.catchmentstatuscontainertype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.catchmentstatuscontainertype.Code = ((*AUCodeSetsPublicSchoolCatchmentStatusType)(v))
      }
      }
      return s.catchmentstatuscontainertype.Code
    }
  func (s *CatchmentStatusContainerType) Code_IsNil() bool {
    return s.Code == nil || s.catchmentstatuscontainertype.Code == nil
    }
  func (s *CatchmentStatusContainerType) OtherCodeList() *OtherCodeListType {
    if s.catchmentstatuscontainertype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.catchmentstatuscontainertype.OtherCodeList = v
      }
      }
      return s.catchmentstatuscontainertype.OtherCodeList
    }
  func (s *CatchmentStatusContainerType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.catchmentstatuscontainertype.OtherCodeList == nil
    }

func (n *ScheduledActivity) Unset(key string) *ScheduledActivity {
        switch key {
  case "ActivityComment":
   n.scheduledactivity.ActivityComment = nil
  case "ActivityType":
   n.scheduledactivity.ActivityType = nil
  case "AddressList":
   n.scheduledactivity.AddressList = nil
  case "StartTime":
   n.scheduledactivity.StartTime = nil
  case "FinishTime":
   n.scheduledactivity.FinishTime = nil
  case "CellType":
   n.scheduledactivity.CellType = nil
  case "TeacherList":
   n.scheduledactivity.TeacherList = nil
  case "TimeTableCellRefId":
   n.scheduledactivity.TimeTableCellRefId = nil
  case "SIF_ExtendedElements":
   n.scheduledactivity.SIF_ExtendedElements = nil
  case "Override":
   n.scheduledactivity.Override = nil
  case "StudentList":
   n.scheduledactivity.StudentList = nil
  case "TimeTableSubjectRefId":
   n.scheduledactivity.TimeTableSubjectRefId = nil
  case "PeriodId":
   n.scheduledactivity.PeriodId = nil
  case "TeachingGroupList":
   n.scheduledactivity.TeachingGroupList = nil
  case "RefId":
   n.scheduledactivity.RefId = nil
  case "SIF_Metadata":
   n.scheduledactivity.SIF_Metadata = nil
  case "TimeTableRefId":
   n.scheduledactivity.TimeTableRefId = nil
  case "DayId":
   n.scheduledactivity.DayId = nil
  case "RoomList":
   n.scheduledactivity.RoomList = nil
  case "YearLevels":
   n.scheduledactivity.YearLevels = nil
  case "LocalCodeList":
   n.scheduledactivity.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.scheduledactivity.SchoolInfoRefId = nil
  case "ActivityName":
   n.scheduledactivity.ActivityName = nil
  case "ActivityDate":
   n.scheduledactivity.ActivityDate = nil
  case "Location":
   n.scheduledactivity.Location = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScheduledActivity")
        }
        return n
}

func (n *ScheduledActivity) SetProperty(key string, value interface{}) *ScheduledActivity {
        if n == nil {
                n, _ = ScheduledActivityPointer(ScheduledActivity{})
        }
        switch key {
    case "ActivityComment":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.ActivityComment = ((*String)(v))
      }
    case "ActivityType":
        if !CodesetContains(AUCodeSetsScheduledActivityTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsScheduledActivityTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.ActivityType = ((*AUCodeSetsScheduledActivityTypeType)(v))
      }
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.scheduledactivity.AddressList = v
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.StartTime = ((*String)(v))
      }
    case "FinishTime":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.FinishTime = ((*String)(v))
      }
    case "CellType":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.CellType = ((*String)(v))
      }
    case "TeacherList":
    if v, ok:= ScheduledTeacherListTypePointer(value); ok {
      n.scheduledactivity.TeacherList = v
      }
    case "TimeTableCellRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.TimeTableCellRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.scheduledactivity.SIF_ExtendedElements = v
      }
    case "Override":
    if v, ok:= ScheduledActivityOverrideTypePointer(value); ok {
      n.scheduledactivity.Override = v
      }
    case "StudentList":
    if v, ok:= StudentsTypePointer(value); ok {
      n.scheduledactivity.StudentList = v
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.TimeTableSubjectRefId = ((*String)(v))
      }
    case "PeriodId":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.PeriodId = ((*LocalIdType)(v))
      }
    case "TeachingGroupList":
    if v, ok:= TeachingGroupListTypePointer(value); ok {
      n.scheduledactivity.TeachingGroupList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.RefId = ((*RefIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.scheduledactivity.SIF_Metadata = v
      }
    case "TimeTableRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.TimeTableRefId = ((*String)(v))
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.DayId = ((*LocalIdType)(v))
      }
    case "RoomList":
    if v, ok:= RoomListTypePointer(value); ok {
      n.scheduledactivity.RoomList = v
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.scheduledactivity.YearLevels = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.scheduledactivity.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.SchoolInfoRefId = ((*String)(v))
      }
    case "ActivityName":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.ActivityName = ((*String)(v))
      }
    case "ActivityDate":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.ActivityDate = ((*String)(v))
      }
    case "Location":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivity.Location = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScheduledActivity")
        }
        return n
}

  func (s *ScheduledActivity) ActivityComment() *String {
    if s.scheduledactivity.ActivityComment == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.ActivityComment = ((*String)(v))
      }
      }
      return s.scheduledactivity.ActivityComment
    }
  func (s *ScheduledActivity) ActivityComment_IsNil() bool {
    return s.ActivityComment == nil || s.scheduledactivity.ActivityComment == nil
    }
  func (s *ScheduledActivity) ActivityType() *AUCodeSetsScheduledActivityTypeType {
    if s.scheduledactivity.ActivityType == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.ActivityType = ((*AUCodeSetsScheduledActivityTypeType)(v))
      }
      }
      return s.scheduledactivity.ActivityType
    }
  func (s *ScheduledActivity) ActivityType_IsNil() bool {
    return s.ActivityType == nil || s.scheduledactivity.ActivityType == nil
    }
  func (s *ScheduledActivity) AddressList() *AddressListType {
    if s.scheduledactivity.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.scheduledactivity.AddressList = v
      }
      }
      return s.scheduledactivity.AddressList
    }
  func (s *ScheduledActivity) AddressList_IsNil() bool {
    return s.AddressList == nil || s.scheduledactivity.AddressList == nil
    }
  func (s *ScheduledActivity) StartTime() *String {
    if s.scheduledactivity.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.StartTime = ((*String)(v))
      }
      }
      return s.scheduledactivity.StartTime
    }
  func (s *ScheduledActivity) StartTime_IsNil() bool {
    return s.StartTime == nil || s.scheduledactivity.StartTime == nil
    }
  func (s *ScheduledActivity) FinishTime() *String {
    if s.scheduledactivity.FinishTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.FinishTime = ((*String)(v))
      }
      }
      return s.scheduledactivity.FinishTime
    }
  func (s *ScheduledActivity) FinishTime_IsNil() bool {
    return s.FinishTime == nil || s.scheduledactivity.FinishTime == nil
    }
  func (s *ScheduledActivity) CellType() *String {
    if s.scheduledactivity.CellType == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.CellType = ((*String)(v))
      }
      }
      return s.scheduledactivity.CellType
    }
  func (s *ScheduledActivity) CellType_IsNil() bool {
    return s.CellType == nil || s.scheduledactivity.CellType == nil
    }
  func (s *ScheduledActivity) TeacherList() *ScheduledTeacherListType {
    if s.scheduledactivity.TeacherList == nil {
     if v, ok:= ScheduledTeacherListTypePointer(ScheduledTeacherListType{}); ok {
      s.scheduledactivity.TeacherList = v
      }
      }
      return s.scheduledactivity.TeacherList
    }
  func (s *ScheduledActivity) TeacherList_IsNil() bool {
    return s.TeacherList == nil || s.scheduledactivity.TeacherList == nil
    }
  func (s *ScheduledActivity) TimeTableCellRefId() *String {
    if s.scheduledactivity.TimeTableCellRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.TimeTableCellRefId = ((*String)(v))
      }
      }
      return s.scheduledactivity.TimeTableCellRefId
    }
  func (s *ScheduledActivity) TimeTableCellRefId_IsNil() bool {
    return s.TimeTableCellRefId == nil || s.scheduledactivity.TimeTableCellRefId == nil
    }
  func (s *ScheduledActivity) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.scheduledactivity.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.scheduledactivity.SIF_ExtendedElements = v
      }
      }
      return s.scheduledactivity.SIF_ExtendedElements
    }
  func (s *ScheduledActivity) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.scheduledactivity.SIF_ExtendedElements == nil
    }
  func (s *ScheduledActivity) Override() *ScheduledActivityOverrideType {
    if s.scheduledactivity.Override == nil {
     if v, ok:= ScheduledActivityOverrideTypePointer(ScheduledActivityOverrideType{}); ok {
      s.scheduledactivity.Override = v
      }
      }
      return s.scheduledactivity.Override
    }
  func (s *ScheduledActivity) Override_IsNil() bool {
    return s.Override == nil || s.scheduledactivity.Override == nil
    }
  func (s *ScheduledActivity) StudentList() *StudentsType {
    if s.scheduledactivity.StudentList == nil {
     if v, ok:= StudentsTypePointer(StudentsType{}); ok {
      s.scheduledactivity.StudentList = v
      }
      }
      return s.scheduledactivity.StudentList
    }
  func (s *ScheduledActivity) StudentList_IsNil() bool {
    return s.StudentList == nil || s.scheduledactivity.StudentList == nil
    }
  func (s *ScheduledActivity) TimeTableSubjectRefId() *String {
    if s.scheduledactivity.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.TimeTableSubjectRefId = ((*String)(v))
      }
      }
      return s.scheduledactivity.TimeTableSubjectRefId
    }
  func (s *ScheduledActivity) TimeTableSubjectRefId_IsNil() bool {
    return s.TimeTableSubjectRefId == nil || s.scheduledactivity.TimeTableSubjectRefId == nil
    }
  func (s *ScheduledActivity) PeriodId() *LocalIdType {
    if s.scheduledactivity.PeriodId == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.PeriodId = ((*LocalIdType)(v))
      }
      }
      return s.scheduledactivity.PeriodId
    }
  func (s *ScheduledActivity) PeriodId_IsNil() bool {
    return s.PeriodId == nil || s.scheduledactivity.PeriodId == nil
    }
  func (s *ScheduledActivity) TeachingGroupList() *TeachingGroupListType {
    if s.scheduledactivity.TeachingGroupList == nil {
     if v, ok:= TeachingGroupListTypePointer(TeachingGroupListType{}); ok {
      s.scheduledactivity.TeachingGroupList = v
      }
      }
      return s.scheduledactivity.TeachingGroupList
    }
  func (s *ScheduledActivity) TeachingGroupList_IsNil() bool {
    return s.TeachingGroupList == nil || s.scheduledactivity.TeachingGroupList == nil
    }
  func (s *ScheduledActivity) RefId() *RefIdType {
    if s.scheduledactivity.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.RefId = ((*RefIdType)(v))
      }
      }
      return s.scheduledactivity.RefId
    }
  func (s *ScheduledActivity) RefId_IsNil() bool {
    return s.RefId == nil || s.scheduledactivity.RefId == nil
    }
  func (s *ScheduledActivity) SIF_Metadata() *SIF_MetadataType {
    if s.scheduledactivity.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.scheduledactivity.SIF_Metadata = v
      }
      }
      return s.scheduledactivity.SIF_Metadata
    }
  func (s *ScheduledActivity) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.scheduledactivity.SIF_Metadata == nil
    }
  func (s *ScheduledActivity) TimeTableRefId() *String {
    if s.scheduledactivity.TimeTableRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.TimeTableRefId = ((*String)(v))
      }
      }
      return s.scheduledactivity.TimeTableRefId
    }
  func (s *ScheduledActivity) TimeTableRefId_IsNil() bool {
    return s.TimeTableRefId == nil || s.scheduledactivity.TimeTableRefId == nil
    }
  func (s *ScheduledActivity) DayId() *LocalIdType {
    if s.scheduledactivity.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.DayId = ((*LocalIdType)(v))
      }
      }
      return s.scheduledactivity.DayId
    }
  func (s *ScheduledActivity) DayId_IsNil() bool {
    return s.DayId == nil || s.scheduledactivity.DayId == nil
    }
  func (s *ScheduledActivity) RoomList() *RoomListType {
    if s.scheduledactivity.RoomList == nil {
     if v, ok:= RoomListTypePointer(RoomListType{}); ok {
      s.scheduledactivity.RoomList = v
      }
      }
      return s.scheduledactivity.RoomList
    }
  func (s *ScheduledActivity) RoomList_IsNil() bool {
    return s.RoomList == nil || s.scheduledactivity.RoomList == nil
    }
  func (s *ScheduledActivity) YearLevels() *YearLevelsType {
    if s.scheduledactivity.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.scheduledactivity.YearLevels = v
      }
      }
      return s.scheduledactivity.YearLevels
    }
  func (s *ScheduledActivity) YearLevels_IsNil() bool {
    return s.YearLevels == nil || s.scheduledactivity.YearLevels == nil
    }
  func (s *ScheduledActivity) LocalCodeList() *LocalCodeListType {
    if s.scheduledactivity.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.scheduledactivity.LocalCodeList = v
      }
      }
      return s.scheduledactivity.LocalCodeList
    }
  func (s *ScheduledActivity) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.scheduledactivity.LocalCodeList == nil
    }
  func (s *ScheduledActivity) SchoolInfoRefId() *String {
    if s.scheduledactivity.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.scheduledactivity.SchoolInfoRefId
    }
  func (s *ScheduledActivity) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.scheduledactivity.SchoolInfoRefId == nil
    }
  func (s *ScheduledActivity) ActivityName() *String {
    if s.scheduledactivity.ActivityName == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.ActivityName = ((*String)(v))
      }
      }
      return s.scheduledactivity.ActivityName
    }
  func (s *ScheduledActivity) ActivityName_IsNil() bool {
    return s.ActivityName == nil || s.scheduledactivity.ActivityName == nil
    }
  func (s *ScheduledActivity) ActivityDate() *String {
    if s.scheduledactivity.ActivityDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.ActivityDate = ((*String)(v))
      }
      }
      return s.scheduledactivity.ActivityDate
    }
  func (s *ScheduledActivity) ActivityDate_IsNil() bool {
    return s.ActivityDate == nil || s.scheduledactivity.ActivityDate == nil
    }
  func (s *ScheduledActivity) Location() *String {
    if s.scheduledactivity.Location == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivity.Location = ((*String)(v))
      }
      }
      return s.scheduledactivity.Location
    }
  func (s *ScheduledActivity) Location_IsNil() bool {
    return s.Location == nil || s.scheduledactivity.Location == nil
    }

func (n *LifeCycleType_Modified) Unset(key string) *LifeCycleType_Modified {
        switch key {
  case "By":
   n.lifecycletype_modified.By = nil
  case "DateTime":
   n.lifecycletype_modified.DateTime = nil
  case "Description":
   n.lifecycletype_modified.Description = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType_Modified")
        }
        return n
}

func (n *LifeCycleType_Modified) SetProperty(key string, value interface{}) *LifeCycleType_Modified {
        if n == nil {
                n, _ = LifeCycleType_ModifiedPointer(LifeCycleType_Modified{})
        }
        switch key {
    case "By":
    
    if v, ok:= StringPointer(value); ok {
      n.lifecycletype_modified.By = ((*String)(v))
      }
    case "DateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.lifecycletype_modified.DateTime = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.lifecycletype_modified.Description = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType_Modified")
        }
        return n
}

  func (s *LifeCycleType_Modified) By() *String {
    if s.lifecycletype_modified.By == nil {
    if v, ok:= StringPointer(""); ok {
      s.lifecycletype_modified.By = ((*String)(v))
      }
      }
      return s.lifecycletype_modified.By
    }
  func (s *LifeCycleType_Modified) By_IsNil() bool {
    return s.By == nil || s.lifecycletype_modified.By == nil
    }
  func (s *LifeCycleType_Modified) DateTime() *String {
    if s.lifecycletype_modified.DateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.lifecycletype_modified.DateTime = ((*String)(v))
      }
      }
      return s.lifecycletype_modified.DateTime
    }
  func (s *LifeCycleType_Modified) DateTime_IsNil() bool {
    return s.DateTime == nil || s.lifecycletype_modified.DateTime == nil
    }
  func (s *LifeCycleType_Modified) Description() *String {
    if s.lifecycletype_modified.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.lifecycletype_modified.Description = ((*String)(v))
      }
      }
      return s.lifecycletype_modified.Description
    }
  func (s *LifeCycleType_Modified) Description_IsNil() bool {
    return s.Description == nil || s.lifecycletype_modified.Description == nil
    }

func (n *AuditInfoType) Unset(key string) *AuditInfoType {
        switch key {
  case "CreationUser":
   n.auditinfotype.CreationUser = nil
  case "CreationDateTime":
   n.auditinfotype.CreationDateTime = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AuditInfoType")
        }
        return n
}

func (n *AuditInfoType) SetProperty(key string, value interface{}) *AuditInfoType {
        if n == nil {
                n, _ = AuditInfoTypePointer(AuditInfoType{})
        }
        switch key {
    case "CreationUser":
    if v, ok:= CreationUserTypePointer(value); ok {
      n.auditinfotype.CreationUser = v
      }
    case "CreationDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.auditinfotype.CreationDateTime = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AuditInfoType")
        }
        return n
}

  func (s *AuditInfoType) CreationUser() *CreationUserType {
    if s.auditinfotype.CreationUser == nil {
     if v, ok:= CreationUserTypePointer(CreationUserType{}); ok {
      s.auditinfotype.CreationUser = v
      }
      }
      return s.auditinfotype.CreationUser
    }
  func (s *AuditInfoType) CreationUser_IsNil() bool {
    return s.CreationUser == nil || s.auditinfotype.CreationUser == nil
    }
  func (s *AuditInfoType) CreationDateTime() *String {
    if s.auditinfotype.CreationDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.auditinfotype.CreationDateTime = ((*String)(v))
      }
      }
      return s.auditinfotype.CreationDateTime
    }
  func (s *AuditInfoType) CreationDateTime_IsNil() bool {
    return s.CreationDateTime == nil || s.auditinfotype.CreationDateTime == nil
    }

func (n *StudentParticipation_ManagingSchool) Unset(key string) *StudentParticipation_ManagingSchool {
        switch key {
  case "Value":
   n.studentparticipation_managingschool.Value = nil
  case "SIF_RefObject":
   n.studentparticipation_managingschool.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentParticipation_ManagingSchool")
        }
        return n
}

func (n *StudentParticipation_ManagingSchool) SetProperty(key string, value interface{}) *StudentParticipation_ManagingSchool {
        if n == nil {
                n, _ = StudentParticipation_ManagingSchoolPointer(StudentParticipation_ManagingSchool{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation_managingschool.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation_managingschool.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentParticipation_ManagingSchool")
        }
        return n
}

  func (s *StudentParticipation_ManagingSchool) Value() *String {
    if s.studentparticipation_managingschool.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation_managingschool.Value = ((*String)(v))
      }
      }
      return s.studentparticipation_managingschool.Value
    }
  func (s *StudentParticipation_ManagingSchool) Value_IsNil() bool {
    return s.Value == nil || s.studentparticipation_managingschool.Value == nil
    }
  func (s *StudentParticipation_ManagingSchool) SIF_RefObject() *String {
    if s.studentparticipation_managingschool.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation_managingschool.SIF_RefObject = ((*String)(v))
      }
      }
      return s.studentparticipation_managingschool.SIF_RefObject
    }
  func (s *StudentParticipation_ManagingSchool) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.studentparticipation_managingschool.SIF_RefObject == nil
    }

func (n *StudentAttendanceSummary) Unset(key string) *StudentAttendanceSummary {
        switch key {
  case "StudentPersonalRefId":
   n.studentattendancesummary.StudentPersonalRefId = nil
  case "StartDay":
   n.studentattendancesummary.StartDay = nil
  case "DaysTardy":
   n.studentattendancesummary.DaysTardy = nil
  case "ExcusedAbsences":
   n.studentattendancesummary.ExcusedAbsences = nil
  case "SIF_Metadata":
   n.studentattendancesummary.SIF_Metadata = nil
  case "StartDate":
   n.studentattendancesummary.StartDate = nil
  case "StudentAttendanceSummaryRefId":
   n.studentattendancesummary.StudentAttendanceSummaryRefId = nil
  case "EndDate":
   n.studentattendancesummary.EndDate = nil
  case "EndDay":
   n.studentattendancesummary.EndDay = nil
  case "DaysInMembership":
   n.studentattendancesummary.DaysInMembership = nil
  case "LocalCodeList":
   n.studentattendancesummary.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.studentattendancesummary.SIF_ExtendedElements = nil
  case "FTE":
   n.studentattendancesummary.FTE = nil
  case "DaysAttended":
   n.studentattendancesummary.DaysAttended = nil
  case "SchoolYear":
   n.studentattendancesummary.SchoolYear = nil
  case "UnexcusedAbsences":
   n.studentattendancesummary.UnexcusedAbsences = nil
  case "SchoolInfoRefId":
   n.studentattendancesummary.SchoolInfoRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceSummary")
        }
        return n
}

func (n *StudentAttendanceSummary) SetProperty(key string, value interface{}) *StudentAttendanceSummary {
        if n == nil {
                n, _ = StudentAttendanceSummaryPointer(StudentAttendanceSummary{})
        }
        switch key {
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancesummary.StudentPersonalRefId = ((*String)(v))
      }
    case "StartDay":
    
    if v, ok:= IntPointer(value); ok {
      n.studentattendancesummary.StartDay = ((*Int)(v))
      }
    case "DaysTardy":
    
    if v, ok:= FloatPointer(value); ok {
      n.studentattendancesummary.DaysTardy = ((*Float)(v))
      }
    case "ExcusedAbsences":
    
    if v, ok:= FloatPointer(value); ok {
      n.studentattendancesummary.ExcusedAbsences = ((*Float)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentattendancesummary.SIF_Metadata = v
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancesummary.StartDate = ((*String)(v))
      }
    case "StudentAttendanceSummaryRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancesummary.StudentAttendanceSummaryRefId = ((*String)(v))
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancesummary.EndDate = ((*String)(v))
      }
    case "EndDay":
    
    if v, ok:= IntPointer(value); ok {
      n.studentattendancesummary.EndDay = ((*Int)(v))
      }
    case "DaysInMembership":
    
    if v, ok:= FloatPointer(value); ok {
      n.studentattendancesummary.DaysInMembership = ((*Float)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentattendancesummary.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentattendancesummary.SIF_ExtendedElements = v
      }
    case "FTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.studentattendancesummary.FTE = ((*Float)(v))
      }
    case "DaysAttended":
    
    if v, ok:= FloatPointer(value); ok {
      n.studentattendancesummary.DaysAttended = ((*Float)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancesummary.SchoolYear = ((*SchoolYearType)(v))
      }
    case "UnexcusedAbsences":
    
    if v, ok:= FloatPointer(value); ok {
      n.studentattendancesummary.UnexcusedAbsences = ((*Float)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancesummary.SchoolInfoRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceSummary")
        }
        return n
}

  func (s *StudentAttendanceSummary) StudentPersonalRefId() *String {
    if s.studentattendancesummary.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancesummary.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.studentattendancesummary.StudentPersonalRefId
    }
  func (s *StudentAttendanceSummary) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.studentattendancesummary.StudentPersonalRefId == nil
    }
  func (s *StudentAttendanceSummary) StartDay() *Int {
    if s.studentattendancesummary.StartDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.studentattendancesummary.StartDay = ((*Int)(v))
      }
      }
      return s.studentattendancesummary.StartDay
    }
  func (s *StudentAttendanceSummary) StartDay_IsNil() bool {
    return s.StartDay == nil || s.studentattendancesummary.StartDay == nil
    }
  func (s *StudentAttendanceSummary) DaysTardy() *Float {
    if s.studentattendancesummary.DaysTardy == nil {
    if v, ok:= FloatPointer(0); ok {
      s.studentattendancesummary.DaysTardy = ((*Float)(v))
      }
      }
      return s.studentattendancesummary.DaysTardy
    }
  func (s *StudentAttendanceSummary) DaysTardy_IsNil() bool {
    return s.DaysTardy == nil || s.studentattendancesummary.DaysTardy == nil
    }
  func (s *StudentAttendanceSummary) ExcusedAbsences() *Float {
    if s.studentattendancesummary.ExcusedAbsences == nil {
    if v, ok:= FloatPointer(0); ok {
      s.studentattendancesummary.ExcusedAbsences = ((*Float)(v))
      }
      }
      return s.studentattendancesummary.ExcusedAbsences
    }
  func (s *StudentAttendanceSummary) ExcusedAbsences_IsNil() bool {
    return s.ExcusedAbsences == nil || s.studentattendancesummary.ExcusedAbsences == nil
    }
  func (s *StudentAttendanceSummary) SIF_Metadata() *SIF_MetadataType {
    if s.studentattendancesummary.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentattendancesummary.SIF_Metadata = v
      }
      }
      return s.studentattendancesummary.SIF_Metadata
    }
  func (s *StudentAttendanceSummary) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentattendancesummary.SIF_Metadata == nil
    }
  func (s *StudentAttendanceSummary) StartDate() *String {
    if s.studentattendancesummary.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancesummary.StartDate = ((*String)(v))
      }
      }
      return s.studentattendancesummary.StartDate
    }
  func (s *StudentAttendanceSummary) StartDate_IsNil() bool {
    return s.StartDate == nil || s.studentattendancesummary.StartDate == nil
    }
  func (s *StudentAttendanceSummary) StudentAttendanceSummaryRefId() *String {
    if s.studentattendancesummary.StudentAttendanceSummaryRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancesummary.StudentAttendanceSummaryRefId = ((*String)(v))
      }
      }
      return s.studentattendancesummary.StudentAttendanceSummaryRefId
    }
  func (s *StudentAttendanceSummary) StudentAttendanceSummaryRefId_IsNil() bool {
    return s.StudentAttendanceSummaryRefId == nil || s.studentattendancesummary.StudentAttendanceSummaryRefId == nil
    }
  func (s *StudentAttendanceSummary) EndDate() *String {
    if s.studentattendancesummary.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancesummary.EndDate = ((*String)(v))
      }
      }
      return s.studentattendancesummary.EndDate
    }
  func (s *StudentAttendanceSummary) EndDate_IsNil() bool {
    return s.EndDate == nil || s.studentattendancesummary.EndDate == nil
    }
  func (s *StudentAttendanceSummary) EndDay() *Int {
    if s.studentattendancesummary.EndDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.studentattendancesummary.EndDay = ((*Int)(v))
      }
      }
      return s.studentattendancesummary.EndDay
    }
  func (s *StudentAttendanceSummary) EndDay_IsNil() bool {
    return s.EndDay == nil || s.studentattendancesummary.EndDay == nil
    }
  func (s *StudentAttendanceSummary) DaysInMembership() *Float {
    if s.studentattendancesummary.DaysInMembership == nil {
    if v, ok:= FloatPointer(0); ok {
      s.studentattendancesummary.DaysInMembership = ((*Float)(v))
      }
      }
      return s.studentattendancesummary.DaysInMembership
    }
  func (s *StudentAttendanceSummary) DaysInMembership_IsNil() bool {
    return s.DaysInMembership == nil || s.studentattendancesummary.DaysInMembership == nil
    }
  func (s *StudentAttendanceSummary) LocalCodeList() *LocalCodeListType {
    if s.studentattendancesummary.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentattendancesummary.LocalCodeList = v
      }
      }
      return s.studentattendancesummary.LocalCodeList
    }
  func (s *StudentAttendanceSummary) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentattendancesummary.LocalCodeList == nil
    }
  func (s *StudentAttendanceSummary) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentattendancesummary.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentattendancesummary.SIF_ExtendedElements = v
      }
      }
      return s.studentattendancesummary.SIF_ExtendedElements
    }
  func (s *StudentAttendanceSummary) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentattendancesummary.SIF_ExtendedElements == nil
    }
  func (s *StudentAttendanceSummary) FTE() *Float {
    if s.studentattendancesummary.FTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.studentattendancesummary.FTE = ((*Float)(v))
      }
      }
      return s.studentattendancesummary.FTE
    }
  func (s *StudentAttendanceSummary) FTE_IsNil() bool {
    return s.FTE == nil || s.studentattendancesummary.FTE == nil
    }
  func (s *StudentAttendanceSummary) DaysAttended() *Float {
    if s.studentattendancesummary.DaysAttended == nil {
    if v, ok:= FloatPointer(0); ok {
      s.studentattendancesummary.DaysAttended = ((*Float)(v))
      }
      }
      return s.studentattendancesummary.DaysAttended
    }
  func (s *StudentAttendanceSummary) DaysAttended_IsNil() bool {
    return s.DaysAttended == nil || s.studentattendancesummary.DaysAttended == nil
    }
  func (s *StudentAttendanceSummary) SchoolYear() *SchoolYearType {
    if s.studentattendancesummary.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancesummary.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.studentattendancesummary.SchoolYear
    }
  func (s *StudentAttendanceSummary) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.studentattendancesummary.SchoolYear == nil
    }
  func (s *StudentAttendanceSummary) UnexcusedAbsences() *Float {
    if s.studentattendancesummary.UnexcusedAbsences == nil {
    if v, ok:= FloatPointer(0); ok {
      s.studentattendancesummary.UnexcusedAbsences = ((*Float)(v))
      }
      }
      return s.studentattendancesummary.UnexcusedAbsences
    }
  func (s *StudentAttendanceSummary) UnexcusedAbsences_IsNil() bool {
    return s.UnexcusedAbsences == nil || s.studentattendancesummary.UnexcusedAbsences == nil
    }
  func (s *StudentAttendanceSummary) SchoolInfoRefId() *String {
    if s.studentattendancesummary.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancesummary.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.studentattendancesummary.SchoolInfoRefId
    }
  func (s *StudentAttendanceSummary) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.studentattendancesummary.SchoolInfoRefId == nil
    }

func (n *SIF_MetadataType) Unset(key string) *SIF_MetadataType {
        switch key {
  case "TimeElements":
   n.sif_metadatatype.TimeElements = nil
  case "LifeCycle":
   n.sif_metadatatype.LifeCycle = nil
  case "EducationFilter":
   n.sif_metadatatype.EducationFilter = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SIF_MetadataType")
        }
        return n
}

func (n *SIF_MetadataType) SetProperty(key string, value interface{}) *SIF_MetadataType {
        if n == nil {
                n, _ = SIF_MetadataTypePointer(SIF_MetadataType{})
        }
        switch key {
    case "TimeElements":
    if v, ok:= SIF_MetadataType_TimeElementsPointer(value); ok {
      n.sif_metadatatype.TimeElements = v
      }
    case "LifeCycle":
    if v, ok:= LifeCycleTypePointer(value); ok {
      n.sif_metadatatype.LifeCycle = v
      }
    case "EducationFilter":
    if v, ok:= EducationFilterTypePointer(value); ok {
      n.sif_metadatatype.EducationFilter = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SIF_MetadataType")
        }
        return n
}

  func (s *SIF_MetadataType) TimeElements() *SIF_MetadataType_TimeElements {
    if s.sif_metadatatype.TimeElements == nil {
     if v, ok:= SIF_MetadataType_TimeElementsPointer(SIF_MetadataType_TimeElements{}); ok {
      s.sif_metadatatype.TimeElements = v
      }
      }
      return s.sif_metadatatype.TimeElements
    }
  func (s *SIF_MetadataType) TimeElements_IsNil() bool {
    return s.TimeElements == nil || s.sif_metadatatype.TimeElements == nil
    }
  func (s *SIF_MetadataType) LifeCycle() *LifeCycleType {
    if s.sif_metadatatype.LifeCycle == nil {
     if v, ok:= LifeCycleTypePointer(LifeCycleType{}); ok {
      s.sif_metadatatype.LifeCycle = v
      }
      }
      return s.sif_metadatatype.LifeCycle
    }
  func (s *SIF_MetadataType) LifeCycle_IsNil() bool {
    return s.LifeCycle == nil || s.sif_metadatatype.LifeCycle == nil
    }
  func (s *SIF_MetadataType) EducationFilter() *EducationFilterType {
    if s.sif_metadatatype.EducationFilter == nil {
     if v, ok:= EducationFilterTypePointer(EducationFilterType{}); ok {
      s.sif_metadatatype.EducationFilter = v
      }
      }
      return s.sif_metadatatype.EducationFilter
    }
  func (s *SIF_MetadataType) EducationFilter_IsNil() bool {
    return s.EducationFilter == nil || s.sif_metadatatype.EducationFilter == nil
    }

func (n *NAPTestlet) Unset(key string) *NAPTestlet {
        switch key {
  case "SIF_ExtendedElements":
   n.naptestlet.SIF_ExtendedElements = nil
  case "SIF_Metadata":
   n.naptestlet.SIF_Metadata = nil
  case "LocalCodeList":
   n.naptestlet.LocalCodeList = nil
  case "TestletContent":
   n.naptestlet.TestletContent = nil
  case "NAPTestRefId":
   n.naptestlet.NAPTestRefId = nil
  case "RefId":
   n.naptestlet.RefId = nil
  case "NAPTestLocalId":
   n.naptestlet.NAPTestLocalId = nil
  case "TestItemList":
   n.naptestlet.TestItemList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestlet")
        }
        return n
}

func (n *NAPTestlet) SetProperty(key string, value interface{}) *NAPTestlet {
        if n == nil {
                n, _ = NAPTestletPointer(NAPTestlet{})
        }
        switch key {
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.naptestlet.SIF_ExtendedElements = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.naptestlet.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.naptestlet.LocalCodeList = v
      }
    case "TestletContent":
    if v, ok:= NAPTestletContentTypePointer(value); ok {
      n.naptestlet.TestletContent = v
      }
    case "NAPTestRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestlet.NAPTestRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestlet.RefId = ((*RefIdType)(v))
      }
    case "NAPTestLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestlet.NAPTestLocalId = ((*LocalIdType)(v))
      }
    case "TestItemList":
    if v, ok:= NAPTestItemListTypePointer(value); ok {
      n.naptestlet.TestItemList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestlet")
        }
        return n
}

  func (s *NAPTestlet) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.naptestlet.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.naptestlet.SIF_ExtendedElements = v
      }
      }
      return s.naptestlet.SIF_ExtendedElements
    }
  func (s *NAPTestlet) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.naptestlet.SIF_ExtendedElements == nil
    }
  func (s *NAPTestlet) SIF_Metadata() *SIF_MetadataType {
    if s.naptestlet.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.naptestlet.SIF_Metadata = v
      }
      }
      return s.naptestlet.SIF_Metadata
    }
  func (s *NAPTestlet) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.naptestlet.SIF_Metadata == nil
    }
  func (s *NAPTestlet) LocalCodeList() *LocalCodeListType {
    if s.naptestlet.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.naptestlet.LocalCodeList = v
      }
      }
      return s.naptestlet.LocalCodeList
    }
  func (s *NAPTestlet) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.naptestlet.LocalCodeList == nil
    }
  func (s *NAPTestlet) TestletContent() *NAPTestletContentType {
    if s.naptestlet.TestletContent == nil {
     if v, ok:= NAPTestletContentTypePointer(NAPTestletContentType{}); ok {
      s.naptestlet.TestletContent = v
      }
      }
      return s.naptestlet.TestletContent
    }
  func (s *NAPTestlet) TestletContent_IsNil() bool {
    return s.TestletContent == nil || s.naptestlet.TestletContent == nil
    }
  func (s *NAPTestlet) NAPTestRefId() *String {
    if s.naptestlet.NAPTestRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestlet.NAPTestRefId = ((*String)(v))
      }
      }
      return s.naptestlet.NAPTestRefId
    }
  func (s *NAPTestlet) NAPTestRefId_IsNil() bool {
    return s.NAPTestRefId == nil || s.naptestlet.NAPTestRefId == nil
    }
  func (s *NAPTestlet) RefId() *RefIdType {
    if s.naptestlet.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestlet.RefId = ((*RefIdType)(v))
      }
      }
      return s.naptestlet.RefId
    }
  func (s *NAPTestlet) RefId_IsNil() bool {
    return s.RefId == nil || s.naptestlet.RefId == nil
    }
  func (s *NAPTestlet) NAPTestLocalId() *LocalIdType {
    if s.naptestlet.NAPTestLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestlet.NAPTestLocalId = ((*LocalIdType)(v))
      }
      }
      return s.naptestlet.NAPTestLocalId
    }
  func (s *NAPTestlet) NAPTestLocalId_IsNil() bool {
    return s.NAPTestLocalId == nil || s.naptestlet.NAPTestLocalId == nil
    }
  func (s *NAPTestlet) TestItemList() *NAPTestItemListType {
    if s.naptestlet.TestItemList == nil {
     if v, ok:= NAPTestItemListTypePointer(NAPTestItemListType{}); ok {
      s.naptestlet.TestItemList = v
      }
      }
      return s.naptestlet.TestItemList
    }
  func (s *NAPTestlet) TestItemList_IsNil() bool {
    return s.TestItemList == nil || s.naptestlet.TestItemList == nil
    }

func (n *TimeTableDayType) Unset(key string) *TimeTableDayType {
        switch key {
  case "TimeTablePeriodList":
   n.timetabledaytype.TimeTablePeriodList = nil
  case "DayId":
   n.timetabledaytype.DayId = nil
  case "DayTitle":
   n.timetabledaytype.DayTitle = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableDayType")
        }
        return n
}

func (n *TimeTableDayType) SetProperty(key string, value interface{}) *TimeTableDayType {
        if n == nil {
                n, _ = TimeTableDayTypePointer(TimeTableDayType{})
        }
        switch key {
    case "TimeTablePeriodList":
    if v, ok:= TimeTablePeriodListTypePointer(value); ok {
      n.timetabledaytype.TimeTablePeriodList = v
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetabledaytype.DayId = ((*LocalIdType)(v))
      }
    case "DayTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.timetabledaytype.DayTitle = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableDayType")
        }
        return n
}

  func (s *TimeTableDayType) TimeTablePeriodList() *TimeTablePeriodListType {
    if s.timetabledaytype.TimeTablePeriodList == nil {
     if v, ok:= TimeTablePeriodListTypePointer(TimeTablePeriodListType{}); ok {
      s.timetabledaytype.TimeTablePeriodList = v
      }
      }
      return s.timetabledaytype.TimeTablePeriodList
    }
  func (s *TimeTableDayType) TimeTablePeriodList_IsNil() bool {
    return s.TimeTablePeriodList == nil || s.timetabledaytype.TimeTablePeriodList == nil
    }
  func (s *TimeTableDayType) DayId() *LocalIdType {
    if s.timetabledaytype.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetabledaytype.DayId = ((*LocalIdType)(v))
      }
      }
      return s.timetabledaytype.DayId
    }
  func (s *TimeTableDayType) DayId_IsNil() bool {
    return s.DayId == nil || s.timetabledaytype.DayId == nil
    }
  func (s *TimeTableDayType) DayTitle() *String {
    if s.timetabledaytype.DayTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetabledaytype.DayTitle = ((*String)(v))
      }
      }
      return s.timetabledaytype.DayTitle
    }
  func (s *TimeTableDayType) DayTitle_IsNil() bool {
    return s.DayTitle == nil || s.timetabledaytype.DayTitle == nil
    }

func (n *ExclusionRuleType) Unset(key string) *ExclusionRuleType {
        switch key {
  case "Value":
   n.exclusionruletype.Value = nil
  case "Type":
   n.exclusionruletype.Type = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ExclusionRuleType")
        }
        return n
}

func (n *ExclusionRuleType) SetProperty(key string, value interface{}) *ExclusionRuleType {
        if n == nil {
                n, _ = ExclusionRuleTypePointer(ExclusionRuleType{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.exclusionruletype.Value = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.exclusionruletype.Type = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ExclusionRuleType")
        }
        return n
}

  func (s *ExclusionRuleType) Value() *String {
    if s.exclusionruletype.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.exclusionruletype.Value = ((*String)(v))
      }
      }
      return s.exclusionruletype.Value
    }
  func (s *ExclusionRuleType) Value_IsNil() bool {
    return s.Value == nil || s.exclusionruletype.Value == nil
    }
  func (s *ExclusionRuleType) Type() *String {
    if s.exclusionruletype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.exclusionruletype.Type = ((*String)(v))
      }
      }
      return s.exclusionruletype.Type
    }
  func (s *ExclusionRuleType) Type_IsNil() bool {
    return s.Type == nil || s.exclusionruletype.Type == nil
    }

func (n *ApprovalType) Unset(key string) *ApprovalType {
        switch key {
  case "Organization":
   n.approvaltype.Organization = nil
  case "Date":
   n.approvaltype.Date = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ApprovalType")
        }
        return n
}

func (n *ApprovalType) SetProperty(key string, value interface{}) *ApprovalType {
        if n == nil {
                n, _ = ApprovalTypePointer(ApprovalType{})
        }
        switch key {
    case "Organization":
    
    if v, ok:= StringPointer(value); ok {
      n.approvaltype.Organization = ((*String)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.approvaltype.Date = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ApprovalType")
        }
        return n
}

  func (s *ApprovalType) Organization() *String {
    if s.approvaltype.Organization == nil {
    if v, ok:= StringPointer(""); ok {
      s.approvaltype.Organization = ((*String)(v))
      }
      }
      return s.approvaltype.Organization
    }
  func (s *ApprovalType) Organization_IsNil() bool {
    return s.Organization == nil || s.approvaltype.Organization == nil
    }
  func (s *ApprovalType) Date() *String {
    if s.approvaltype.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.approvaltype.Date = ((*String)(v))
      }
      }
      return s.approvaltype.Date
    }
  func (s *ApprovalType) Date_IsNil() bool {
    return s.Date == nil || s.approvaltype.Date == nil
    }

func (n *NAPTestletContentType) Unset(key string) *NAPTestletContentType {
        switch key {
  case "Node":
   n.naptestletcontenttype.Node = nil
  case "NAPTestletLocalId":
   n.naptestletcontenttype.NAPTestletLocalId = nil
  case "TestletMaximumScore":
   n.naptestletcontenttype.TestletMaximumScore = nil
  case "LocationInStage":
   n.naptestletcontenttype.LocationInStage = nil
  case "TestletName":
   n.naptestletcontenttype.TestletName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletContentType")
        }
        return n
}

func (n *NAPTestletContentType) SetProperty(key string, value interface{}) *NAPTestletContentType {
        if n == nil {
                n, _ = NAPTestletContentTypePointer(NAPTestletContentType{})
        }
        switch key {
    case "Node":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestletcontenttype.Node = ((*String)(v))
      }
    case "NAPTestletLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestletcontenttype.NAPTestletLocalId = ((*LocalIdType)(v))
      }
    case "TestletMaximumScore":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestletcontenttype.TestletMaximumScore = ((*Float)(v))
      }
    case "LocationInStage":
    
    if v, ok:= IntPointer(value); ok {
      n.naptestletcontenttype.LocationInStage = ((*Int)(v))
      }
    case "TestletName":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestletcontenttype.TestletName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletContentType")
        }
        return n
}

  func (s *NAPTestletContentType) Node() *String {
    if s.naptestletcontenttype.Node == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestletcontenttype.Node = ((*String)(v))
      }
      }
      return s.naptestletcontenttype.Node
    }
  func (s *NAPTestletContentType) Node_IsNil() bool {
    return s.Node == nil || s.naptestletcontenttype.Node == nil
    }
  func (s *NAPTestletContentType) NAPTestletLocalId() *LocalIdType {
    if s.naptestletcontenttype.NAPTestletLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestletcontenttype.NAPTestletLocalId = ((*LocalIdType)(v))
      }
      }
      return s.naptestletcontenttype.NAPTestletLocalId
    }
  func (s *NAPTestletContentType) NAPTestletLocalId_IsNil() bool {
    return s.NAPTestletLocalId == nil || s.naptestletcontenttype.NAPTestletLocalId == nil
    }
  func (s *NAPTestletContentType) TestletMaximumScore() *Float {
    if s.naptestletcontenttype.TestletMaximumScore == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestletcontenttype.TestletMaximumScore = ((*Float)(v))
      }
      }
      return s.naptestletcontenttype.TestletMaximumScore
    }
  func (s *NAPTestletContentType) TestletMaximumScore_IsNil() bool {
    return s.TestletMaximumScore == nil || s.naptestletcontenttype.TestletMaximumScore == nil
    }
  func (s *NAPTestletContentType) LocationInStage() *Int {
    if s.naptestletcontenttype.LocationInStage == nil {
    if v, ok:= IntPointer(0); ok {
      s.naptestletcontenttype.LocationInStage = ((*Int)(v))
      }
      }
      return s.naptestletcontenttype.LocationInStage
    }
  func (s *NAPTestletContentType) LocationInStage_IsNil() bool {
    return s.LocationInStage == nil || s.naptestletcontenttype.LocationInStage == nil
    }
  func (s *NAPTestletContentType) TestletName() *String {
    if s.naptestletcontenttype.TestletName == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestletcontenttype.TestletName = ((*String)(v))
      }
      }
      return s.naptestletcontenttype.TestletName
    }
  func (s *NAPTestletContentType) TestletName_IsNil() bool {
    return s.TestletName == nil || s.naptestletcontenttype.TestletName == nil
    }

func (n *DemographicsType) Unset(key string) *DemographicsType {
        switch key {
  case "PlaceOfBirth":
   n.demographicstype.PlaceOfBirth = nil
  case "DwellingArrangement":
   n.demographicstype.DwellingArrangement = nil
  case "CountriesOfCitizenship":
   n.demographicstype.CountriesOfCitizenship = nil
  case "ReligiousEventList":
   n.demographicstype.ReligiousEventList = nil
  case "DateOfDeath":
   n.demographicstype.DateOfDeath = nil
  case "ImmunisationCertificateStatus":
   n.demographicstype.ImmunisationCertificateStatus = nil
  case "CulturalBackground":
   n.demographicstype.CulturalBackground = nil
  case "VisaSubClass":
   n.demographicstype.VisaSubClass = nil
  case "StateOfBirth":
   n.demographicstype.StateOfBirth = nil
  case "InterpreterRequired":
   n.demographicstype.InterpreterRequired = nil
  case "CountriesOfResidency":
   n.demographicstype.CountriesOfResidency = nil
  case "PermanentResident":
   n.demographicstype.PermanentResident = nil
  case "IndigenousStatus":
   n.demographicstype.IndigenousStatus = nil
  case "VisaSubClassList":
   n.demographicstype.VisaSubClassList = nil
  case "LanguageList":
   n.demographicstype.LanguageList = nil
  case "MedicareNumber":
   n.demographicstype.MedicareNumber = nil
  case "AustralianCitizenshipStatus":
   n.demographicstype.AustralianCitizenshipStatus = nil
  case "CountryOfBirth":
   n.demographicstype.CountryOfBirth = nil
  case "LBOTE":
   n.demographicstype.LBOTE = nil
  case "Religion":
   n.demographicstype.Religion = nil
  case "EnglishProficiency":
   n.demographicstype.EnglishProficiency = nil
  case "Sex":
   n.demographicstype.Sex = nil
  case "CountryArrivalDate":
   n.demographicstype.CountryArrivalDate = nil
  case "BirthDate":
   n.demographicstype.BirthDate = nil
  case "ReligiousRegion":
   n.demographicstype.ReligiousRegion = nil
  case "MaritalStatus":
   n.demographicstype.MaritalStatus = nil
  case "BirthDateVerification":
   n.demographicstype.BirthDateVerification = nil
  case "VisaExpiryDate":
   n.demographicstype.VisaExpiryDate = nil
  case "VisaStatisticalCode":
   n.demographicstype.VisaStatisticalCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DemographicsType")
        }
        return n
}

func (n *DemographicsType) SetProperty(key string, value interface{}) *DemographicsType {
        if n == nil {
                n, _ = DemographicsTypePointer(DemographicsType{})
        }
        switch key {
    case "PlaceOfBirth":
    
    if v, ok:= StringPointer(value); ok {
      n.demographicstype.PlaceOfBirth = ((*String)(v))
      }
    case "DwellingArrangement":
    if v, ok:= DwellingArrangementTypePointer(value); ok {
      n.demographicstype.DwellingArrangement = v
      }
    case "CountriesOfCitizenship":
    if v, ok:= CountryListTypePointer(value); ok {
      n.demographicstype.CountriesOfCitizenship = v
      }
    case "ReligiousEventList":
    if v, ok:= ReligiousEventListTypePointer(value); ok {
      n.demographicstype.ReligiousEventList = v
      }
    case "DateOfDeath":
    
    if v, ok:= StringPointer(value); ok {
      n.demographicstype.DateOfDeath = ((*String)(v))
      }
    case "ImmunisationCertificateStatus":
        if !CodesetContains(AUCodeSetsImmunisationCertificateStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsImmunisationCertificateStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.demographicstype.ImmunisationCertificateStatus = ((*AUCodeSetsImmunisationCertificateStatusType)(v))
      }
    case "CulturalBackground":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.demographicstype.CulturalBackground = ((*AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType)(v))
      }
    case "VisaSubClass":
    
    if v, ok:= StringPointer(value); ok {
      n.demographicstype.VisaSubClass = ((*VisaSubClassCodeType)(v))
      }
    case "StateOfBirth":
    
    if v, ok:= StringPointer(value); ok {
      n.demographicstype.StateOfBirth = ((*StateProvinceType)(v))
      }
    case "InterpreterRequired":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.demographicstype.InterpreterRequired = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "CountriesOfResidency":
    if v, ok:= CountryList2TypePointer(value); ok {
      n.demographicstype.CountriesOfResidency = v
      }
    case "PermanentResident":
        if !CodesetContains(AUCodeSetsPermanentResidentStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsPermanentResidentStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.demographicstype.PermanentResident = ((*AUCodeSetsPermanentResidentStatusType)(v))
      }
    case "IndigenousStatus":
        if !CodesetContains(AUCodeSetsIndigenousStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsIndigenousStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.demographicstype.IndigenousStatus = ((*AUCodeSetsIndigenousStatusType)(v))
      }
    case "VisaSubClassList":
    if v, ok:= VisaSubClassListTypePointer(value); ok {
      n.demographicstype.VisaSubClassList = v
      }
    case "LanguageList":
    if v, ok:= LanguageListTypePointer(value); ok {
      n.demographicstype.LanguageList = v
      }
    case "MedicareNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.demographicstype.MedicareNumber = ((*String)(v))
      }
    case "AustralianCitizenshipStatus":
        if !CodesetContains(AUCodeSetsAustralianCitizenshipStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianCitizenshipStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.demographicstype.AustralianCitizenshipStatus = ((*AUCodeSetsAustralianCitizenshipStatusType)(v))
      }
    case "CountryOfBirth":
        if !CodesetContains(AUCodeSetsStandardAustralianClassificationOfCountriesSACCType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStandardAustralianClassificationOfCountriesSACCType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.demographicstype.CountryOfBirth = ((*CountryType)(v))
      }
    case "LBOTE":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.demographicstype.LBOTE = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Religion":
    if v, ok:= ReligionTypePointer(value); ok {
      n.demographicstype.Religion = v
      }
    case "EnglishProficiency":
    if v, ok:= EnglishProficiencyTypePointer(value); ok {
      n.demographicstype.EnglishProficiency = v
      }
    case "Sex":
        if !CodesetContains(AUCodeSetsSexCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSexCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.demographicstype.Sex = ((*AUCodeSetsSexCodeType)(v))
      }
    case "CountryArrivalDate":
    
    if v, ok:= StringPointer(value); ok {
      n.demographicstype.CountryArrivalDate = ((*String)(v))
      }
    case "BirthDate":
    
    if v, ok:= StringPointer(value); ok {
      n.demographicstype.BirthDate = ((*BirthDateType)(v))
      }
    case "ReligiousRegion":
    
    if v, ok:= StringPointer(value); ok {
      n.demographicstype.ReligiousRegion = ((*String)(v))
      }
    case "MaritalStatus":
        if !CodesetContains(AUCodeSetsMaritalStatusAIHWType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsMaritalStatusAIHWType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.demographicstype.MaritalStatus = ((*AUCodeSetsMaritalStatusAIHWType)(v))
      }
    case "BirthDateVerification":
        if !CodesetContains(AUCodeSetsBirthdateVerificationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsBirthdateVerificationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.demographicstype.BirthDateVerification = ((*AUCodeSetsBirthdateVerificationType)(v))
      }
    case "VisaExpiryDate":
    
    if v, ok:= StringPointer(value); ok {
      n.demographicstype.VisaExpiryDate = ((*String)(v))
      }
    case "VisaStatisticalCode":
    
    if v, ok:= StringPointer(value); ok {
      n.demographicstype.VisaStatisticalCode = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DemographicsType")
        }
        return n
}

  func (s *DemographicsType) PlaceOfBirth() *String {
    if s.demographicstype.PlaceOfBirth == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.PlaceOfBirth = ((*String)(v))
      }
      }
      return s.demographicstype.PlaceOfBirth
    }
  func (s *DemographicsType) PlaceOfBirth_IsNil() bool {
    return s.PlaceOfBirth == nil || s.demographicstype.PlaceOfBirth == nil
    }
  func (s *DemographicsType) DwellingArrangement() *DwellingArrangementType {
    if s.demographicstype.DwellingArrangement == nil {
     if v, ok:= DwellingArrangementTypePointer(DwellingArrangementType{}); ok {
      s.demographicstype.DwellingArrangement = v
      }
      }
      return s.demographicstype.DwellingArrangement
    }
  func (s *DemographicsType) DwellingArrangement_IsNil() bool {
    return s.DwellingArrangement == nil || s.demographicstype.DwellingArrangement == nil
    }
  func (s *DemographicsType) CountriesOfCitizenship() *CountryListType {
    if s.demographicstype.CountriesOfCitizenship == nil {
     if v, ok:= CountryListTypePointer(CountryListType{}); ok {
      s.demographicstype.CountriesOfCitizenship = v
      }
      }
      return s.demographicstype.CountriesOfCitizenship
    }
  func (s *DemographicsType) CountriesOfCitizenship_IsNil() bool {
    return s.CountriesOfCitizenship == nil || s.demographicstype.CountriesOfCitizenship == nil
    }
  func (s *DemographicsType) ReligiousEventList() *ReligiousEventListType {
    if s.demographicstype.ReligiousEventList == nil {
     if v, ok:= ReligiousEventListTypePointer(ReligiousEventListType{}); ok {
      s.demographicstype.ReligiousEventList = v
      }
      }
      return s.demographicstype.ReligiousEventList
    }
  func (s *DemographicsType) ReligiousEventList_IsNil() bool {
    return s.ReligiousEventList == nil || s.demographicstype.ReligiousEventList == nil
    }
  func (s *DemographicsType) DateOfDeath() *String {
    if s.demographicstype.DateOfDeath == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.DateOfDeath = ((*String)(v))
      }
      }
      return s.demographicstype.DateOfDeath
    }
  func (s *DemographicsType) DateOfDeath_IsNil() bool {
    return s.DateOfDeath == nil || s.demographicstype.DateOfDeath == nil
    }
  func (s *DemographicsType) ImmunisationCertificateStatus() *AUCodeSetsImmunisationCertificateStatusType {
    if s.demographicstype.ImmunisationCertificateStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.ImmunisationCertificateStatus = ((*AUCodeSetsImmunisationCertificateStatusType)(v))
      }
      }
      return s.demographicstype.ImmunisationCertificateStatus
    }
  func (s *DemographicsType) ImmunisationCertificateStatus_IsNil() bool {
    return s.ImmunisationCertificateStatus == nil || s.demographicstype.ImmunisationCertificateStatus == nil
    }
  func (s *DemographicsType) CulturalBackground() *AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType {
    if s.demographicstype.CulturalBackground == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.CulturalBackground = ((*AUCodeSetsAustralianStandardClassificationOfCulturalAndEthnicGroupsASCCEGType)(v))
      }
      }
      return s.demographicstype.CulturalBackground
    }
  func (s *DemographicsType) CulturalBackground_IsNil() bool {
    return s.CulturalBackground == nil || s.demographicstype.CulturalBackground == nil
    }
  func (s *DemographicsType) VisaSubClass() *VisaSubClassCodeType {
    if s.demographicstype.VisaSubClass == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.VisaSubClass = ((*VisaSubClassCodeType)(v))
      }
      }
      return s.demographicstype.VisaSubClass
    }
  func (s *DemographicsType) VisaSubClass_IsNil() bool {
    return s.VisaSubClass == nil || s.demographicstype.VisaSubClass == nil
    }
  func (s *DemographicsType) StateOfBirth() *StateProvinceType {
    if s.demographicstype.StateOfBirth == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.StateOfBirth = ((*StateProvinceType)(v))
      }
      }
      return s.demographicstype.StateOfBirth
    }
  func (s *DemographicsType) StateOfBirth_IsNil() bool {
    return s.StateOfBirth == nil || s.demographicstype.StateOfBirth == nil
    }
  func (s *DemographicsType) InterpreterRequired() *AUCodeSetsYesOrNoCategoryType {
    if s.demographicstype.InterpreterRequired == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.InterpreterRequired = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.demographicstype.InterpreterRequired
    }
  func (s *DemographicsType) InterpreterRequired_IsNil() bool {
    return s.InterpreterRequired == nil || s.demographicstype.InterpreterRequired == nil
    }
  func (s *DemographicsType) CountriesOfResidency() *CountryList2Type {
    if s.demographicstype.CountriesOfResidency == nil {
     if v, ok:= CountryList2TypePointer(CountryList2Type{}); ok {
      s.demographicstype.CountriesOfResidency = v
      }
      }
      return s.demographicstype.CountriesOfResidency
    }
  func (s *DemographicsType) CountriesOfResidency_IsNil() bool {
    return s.CountriesOfResidency == nil || s.demographicstype.CountriesOfResidency == nil
    }
  func (s *DemographicsType) PermanentResident() *AUCodeSetsPermanentResidentStatusType {
    if s.demographicstype.PermanentResident == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.PermanentResident = ((*AUCodeSetsPermanentResidentStatusType)(v))
      }
      }
      return s.demographicstype.PermanentResident
    }
  func (s *DemographicsType) PermanentResident_IsNil() bool {
    return s.PermanentResident == nil || s.demographicstype.PermanentResident == nil
    }
  func (s *DemographicsType) IndigenousStatus() *AUCodeSetsIndigenousStatusType {
    if s.demographicstype.IndigenousStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.IndigenousStatus = ((*AUCodeSetsIndigenousStatusType)(v))
      }
      }
      return s.demographicstype.IndigenousStatus
    }
  func (s *DemographicsType) IndigenousStatus_IsNil() bool {
    return s.IndigenousStatus == nil || s.demographicstype.IndigenousStatus == nil
    }
  func (s *DemographicsType) VisaSubClassList() *VisaSubClassListType {
    if s.demographicstype.VisaSubClassList == nil {
     if v, ok:= VisaSubClassListTypePointer(VisaSubClassListType{}); ok {
      s.demographicstype.VisaSubClassList = v
      }
      }
      return s.demographicstype.VisaSubClassList
    }
  func (s *DemographicsType) VisaSubClassList_IsNil() bool {
    return s.VisaSubClassList == nil || s.demographicstype.VisaSubClassList == nil
    }
  func (s *DemographicsType) LanguageList() *LanguageListType {
    if s.demographicstype.LanguageList == nil {
     if v, ok:= LanguageListTypePointer(LanguageListType{}); ok {
      s.demographicstype.LanguageList = v
      }
      }
      return s.demographicstype.LanguageList
    }
  func (s *DemographicsType) LanguageList_IsNil() bool {
    return s.LanguageList == nil || s.demographicstype.LanguageList == nil
    }
  func (s *DemographicsType) MedicareNumber() *String {
    if s.demographicstype.MedicareNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.MedicareNumber = ((*String)(v))
      }
      }
      return s.demographicstype.MedicareNumber
    }
  func (s *DemographicsType) MedicareNumber_IsNil() bool {
    return s.MedicareNumber == nil || s.demographicstype.MedicareNumber == nil
    }
  func (s *DemographicsType) AustralianCitizenshipStatus() *AUCodeSetsAustralianCitizenshipStatusType {
    if s.demographicstype.AustralianCitizenshipStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.AustralianCitizenshipStatus = ((*AUCodeSetsAustralianCitizenshipStatusType)(v))
      }
      }
      return s.demographicstype.AustralianCitizenshipStatus
    }
  func (s *DemographicsType) AustralianCitizenshipStatus_IsNil() bool {
    return s.AustralianCitizenshipStatus == nil || s.demographicstype.AustralianCitizenshipStatus == nil
    }
  func (s *DemographicsType) CountryOfBirth() *CountryType {
    if s.demographicstype.CountryOfBirth == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.CountryOfBirth = ((*CountryType)(v))
      }
      }
      return s.demographicstype.CountryOfBirth
    }
  func (s *DemographicsType) CountryOfBirth_IsNil() bool {
    return s.CountryOfBirth == nil || s.demographicstype.CountryOfBirth == nil
    }
  func (s *DemographicsType) LBOTE() *AUCodeSetsYesOrNoCategoryType {
    if s.demographicstype.LBOTE == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.LBOTE = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.demographicstype.LBOTE
    }
  func (s *DemographicsType) LBOTE_IsNil() bool {
    return s.LBOTE == nil || s.demographicstype.LBOTE == nil
    }
  func (s *DemographicsType) Religion() *ReligionType {
    if s.demographicstype.Religion == nil {
     if v, ok:= ReligionTypePointer(ReligionType{}); ok {
      s.demographicstype.Religion = v
      }
      }
      return s.demographicstype.Religion
    }
  func (s *DemographicsType) Religion_IsNil() bool {
    return s.Religion == nil || s.demographicstype.Religion == nil
    }
  func (s *DemographicsType) EnglishProficiency() *EnglishProficiencyType {
    if s.demographicstype.EnglishProficiency == nil {
     if v, ok:= EnglishProficiencyTypePointer(EnglishProficiencyType{}); ok {
      s.demographicstype.EnglishProficiency = v
      }
      }
      return s.demographicstype.EnglishProficiency
    }
  func (s *DemographicsType) EnglishProficiency_IsNil() bool {
    return s.EnglishProficiency == nil || s.demographicstype.EnglishProficiency == nil
    }
  func (s *DemographicsType) Sex() *AUCodeSetsSexCodeType {
    if s.demographicstype.Sex == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.Sex = ((*AUCodeSetsSexCodeType)(v))
      }
      }
      return s.demographicstype.Sex
    }
  func (s *DemographicsType) Sex_IsNil() bool {
    return s.Sex == nil || s.demographicstype.Sex == nil
    }
  func (s *DemographicsType) CountryArrivalDate() *String {
    if s.demographicstype.CountryArrivalDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.CountryArrivalDate = ((*String)(v))
      }
      }
      return s.demographicstype.CountryArrivalDate
    }
  func (s *DemographicsType) CountryArrivalDate_IsNil() bool {
    return s.CountryArrivalDate == nil || s.demographicstype.CountryArrivalDate == nil
    }
  func (s *DemographicsType) BirthDate() *BirthDateType {
    if s.demographicstype.BirthDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.BirthDate = ((*BirthDateType)(v))
      }
      }
      return s.demographicstype.BirthDate
    }
  func (s *DemographicsType) BirthDate_IsNil() bool {
    return s.BirthDate == nil || s.demographicstype.BirthDate == nil
    }
  func (s *DemographicsType) ReligiousRegion() *String {
    if s.demographicstype.ReligiousRegion == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.ReligiousRegion = ((*String)(v))
      }
      }
      return s.demographicstype.ReligiousRegion
    }
  func (s *DemographicsType) ReligiousRegion_IsNil() bool {
    return s.ReligiousRegion == nil || s.demographicstype.ReligiousRegion == nil
    }
  func (s *DemographicsType) MaritalStatus() *AUCodeSetsMaritalStatusAIHWType {
    if s.demographicstype.MaritalStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.MaritalStatus = ((*AUCodeSetsMaritalStatusAIHWType)(v))
      }
      }
      return s.demographicstype.MaritalStatus
    }
  func (s *DemographicsType) MaritalStatus_IsNil() bool {
    return s.MaritalStatus == nil || s.demographicstype.MaritalStatus == nil
    }
  func (s *DemographicsType) BirthDateVerification() *AUCodeSetsBirthdateVerificationType {
    if s.demographicstype.BirthDateVerification == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.BirthDateVerification = ((*AUCodeSetsBirthdateVerificationType)(v))
      }
      }
      return s.demographicstype.BirthDateVerification
    }
  func (s *DemographicsType) BirthDateVerification_IsNil() bool {
    return s.BirthDateVerification == nil || s.demographicstype.BirthDateVerification == nil
    }
  func (s *DemographicsType) VisaExpiryDate() *String {
    if s.demographicstype.VisaExpiryDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.VisaExpiryDate = ((*String)(v))
      }
      }
      return s.demographicstype.VisaExpiryDate
    }
  func (s *DemographicsType) VisaExpiryDate_IsNil() bool {
    return s.VisaExpiryDate == nil || s.demographicstype.VisaExpiryDate == nil
    }
  func (s *DemographicsType) VisaStatisticalCode() *String {
    if s.demographicstype.VisaStatisticalCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.demographicstype.VisaStatisticalCode = ((*String)(v))
      }
      }
      return s.demographicstype.VisaStatisticalCode
    }
  func (s *DemographicsType) VisaStatisticalCode_IsNil() bool {
    return s.VisaStatisticalCode == nil || s.demographicstype.VisaStatisticalCode == nil
    }

func (n *PlanRequiredContainerType) Unset(key string) *PlanRequiredContainerType {
        switch key {
  case "Status":
   n.planrequiredcontainertype.Status = nil
  case "PlanRequiredList":
   n.planrequiredcontainertype.PlanRequiredList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PlanRequiredContainerType")
        }
        return n
}

func (n *PlanRequiredContainerType) SetProperty(key string, value interface{}) *PlanRequiredContainerType {
        if n == nil {
                n, _ = PlanRequiredContainerTypePointer(PlanRequiredContainerType{})
        }
        switch key {
    case "Status":
        if !CodesetContains(AUCodeSetsWellbeingStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.planrequiredcontainertype.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
    case "PlanRequiredList":
    if v, ok:= PlanRequiredListTypePointer(value); ok {
      n.planrequiredcontainertype.PlanRequiredList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PlanRequiredContainerType")
        }
        return n
}

  func (s *PlanRequiredContainerType) Status() *AUCodeSetsWellbeingStatusType {
    if s.planrequiredcontainertype.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.planrequiredcontainertype.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
      }
      return s.planrequiredcontainertype.Status
    }
  func (s *PlanRequiredContainerType) Status_IsNil() bool {
    return s.Status == nil || s.planrequiredcontainertype.Status == nil
    }
  func (s *PlanRequiredContainerType) PlanRequiredList() *PlanRequiredListType {
    if s.planrequiredcontainertype.PlanRequiredList == nil {
     if v, ok:= PlanRequiredListTypePointer(PlanRequiredListType{}); ok {
      s.planrequiredcontainertype.PlanRequiredList = v
      }
      }
      return s.planrequiredcontainertype.PlanRequiredList
    }
  func (s *PlanRequiredContainerType) PlanRequiredList_IsNil() bool {
    return s.PlanRequiredList == nil || s.planrequiredcontainertype.PlanRequiredList == nil
    }

func (n *NAPTestContentType) Unset(key string) *NAPTestContentType {
        switch key {
  case "DomainProficiency":
   n.naptestcontenttype.DomainProficiency = nil
  case "NAPTestLocalId":
   n.naptestcontenttype.NAPTestLocalId = nil
  case "DomainBands":
   n.naptestcontenttype.DomainBands = nil
  case "TestType":
   n.naptestcontenttype.TestType = nil
  case "Domain":
   n.naptestcontenttype.Domain = nil
  case "TestName":
   n.naptestcontenttype.TestName = nil
  case "TestLevel":
   n.naptestcontenttype.TestLevel = nil
  case "StagesCount":
   n.naptestcontenttype.StagesCount = nil
  case "TestYear":
   n.naptestcontenttype.TestYear = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestContentType")
        }
        return n
}

func (n *NAPTestContentType) SetProperty(key string, value interface{}) *NAPTestContentType {
        if n == nil {
                n, _ = NAPTestContentTypePointer(NAPTestContentType{})
        }
        switch key {
    case "DomainProficiency":
    if v, ok:= DomainProficiencyContainerTypePointer(value); ok {
      n.naptestcontenttype.DomainProficiency = v
      }
    case "NAPTestLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestcontenttype.NAPTestLocalId = ((*LocalIdType)(v))
      }
    case "DomainBands":
    if v, ok:= DomainBandsContainerTypePointer(value); ok {
      n.naptestcontenttype.DomainBands = v
      }
    case "TestType":
        if !CodesetContains(AUCodeSetsNAPTestTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPTestTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.naptestcontenttype.TestType = ((*AUCodeSetsNAPTestTypeType)(v))
      }
    case "Domain":
        if !CodesetContains(AUCodeSetsNAPTestDomainType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPTestDomainType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.naptestcontenttype.Domain = ((*AUCodeSetsNAPTestDomainType)(v))
      }
    case "TestName":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestcontenttype.TestName = ((*String)(v))
      }
    case "TestLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.naptestcontenttype.TestLevel = v
      }
    case "StagesCount":
    
    if v, ok:= IntPointer(value); ok {
      n.naptestcontenttype.StagesCount = ((*Int)(v))
      }
    case "TestYear":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestcontenttype.TestYear = ((*SchoolYearType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestContentType")
        }
        return n
}

  func (s *NAPTestContentType) DomainProficiency() *DomainProficiencyContainerType {
    if s.naptestcontenttype.DomainProficiency == nil {
     if v, ok:= DomainProficiencyContainerTypePointer(DomainProficiencyContainerType{}); ok {
      s.naptestcontenttype.DomainProficiency = v
      }
      }
      return s.naptestcontenttype.DomainProficiency
    }
  func (s *NAPTestContentType) DomainProficiency_IsNil() bool {
    return s.DomainProficiency == nil || s.naptestcontenttype.DomainProficiency == nil
    }
  func (s *NAPTestContentType) NAPTestLocalId() *LocalIdType {
    if s.naptestcontenttype.NAPTestLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestcontenttype.NAPTestLocalId = ((*LocalIdType)(v))
      }
      }
      return s.naptestcontenttype.NAPTestLocalId
    }
  func (s *NAPTestContentType) NAPTestLocalId_IsNil() bool {
    return s.NAPTestLocalId == nil || s.naptestcontenttype.NAPTestLocalId == nil
    }
  func (s *NAPTestContentType) DomainBands() *DomainBandsContainerType {
    if s.naptestcontenttype.DomainBands == nil {
     if v, ok:= DomainBandsContainerTypePointer(DomainBandsContainerType{}); ok {
      s.naptestcontenttype.DomainBands = v
      }
      }
      return s.naptestcontenttype.DomainBands
    }
  func (s *NAPTestContentType) DomainBands_IsNil() bool {
    return s.DomainBands == nil || s.naptestcontenttype.DomainBands == nil
    }
  func (s *NAPTestContentType) TestType() *AUCodeSetsNAPTestTypeType {
    if s.naptestcontenttype.TestType == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestcontenttype.TestType = ((*AUCodeSetsNAPTestTypeType)(v))
      }
      }
      return s.naptestcontenttype.TestType
    }
  func (s *NAPTestContentType) TestType_IsNil() bool {
    return s.TestType == nil || s.naptestcontenttype.TestType == nil
    }
  func (s *NAPTestContentType) Domain() *AUCodeSetsNAPTestDomainType {
    if s.naptestcontenttype.Domain == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestcontenttype.Domain = ((*AUCodeSetsNAPTestDomainType)(v))
      }
      }
      return s.naptestcontenttype.Domain
    }
  func (s *NAPTestContentType) Domain_IsNil() bool {
    return s.Domain == nil || s.naptestcontenttype.Domain == nil
    }
  func (s *NAPTestContentType) TestName() *String {
    if s.naptestcontenttype.TestName == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestcontenttype.TestName = ((*String)(v))
      }
      }
      return s.naptestcontenttype.TestName
    }
  func (s *NAPTestContentType) TestName_IsNil() bool {
    return s.TestName == nil || s.naptestcontenttype.TestName == nil
    }
  func (s *NAPTestContentType) TestLevel() *YearLevelType {
    if s.naptestcontenttype.TestLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.naptestcontenttype.TestLevel = v
      }
      }
      return s.naptestcontenttype.TestLevel
    }
  func (s *NAPTestContentType) TestLevel_IsNil() bool {
    return s.TestLevel == nil || s.naptestcontenttype.TestLevel == nil
    }
  func (s *NAPTestContentType) StagesCount() *Int {
    if s.naptestcontenttype.StagesCount == nil {
    if v, ok:= IntPointer(0); ok {
      s.naptestcontenttype.StagesCount = ((*Int)(v))
      }
      }
      return s.naptestcontenttype.StagesCount
    }
  func (s *NAPTestContentType) StagesCount_IsNil() bool {
    return s.StagesCount == nil || s.naptestcontenttype.StagesCount == nil
    }
  func (s *NAPTestContentType) TestYear() *SchoolYearType {
    if s.naptestcontenttype.TestYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestcontenttype.TestYear = ((*SchoolYearType)(v))
      }
      }
      return s.naptestcontenttype.TestYear
    }
  func (s *NAPTestContentType) TestYear_IsNil() bool {
    return s.TestYear == nil || s.naptestcontenttype.TestYear == nil
    }

func (n *NAPTest) Unset(key string) *NAPTest {
        switch key {
  case "RefId":
   n.naptest.RefId = nil
  case "SIF_ExtendedElements":
   n.naptest.SIF_ExtendedElements = nil
  case "TestContent":
   n.naptest.TestContent = nil
  case "SIF_Metadata":
   n.naptest.SIF_Metadata = nil
  case "LocalCodeList":
   n.naptest.LocalCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTest")
        }
        return n
}

func (n *NAPTest) SetProperty(key string, value interface{}) *NAPTest {
        if n == nil {
                n, _ = NAPTestPointer(NAPTest{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptest.RefId = ((*RefIdType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.naptest.SIF_ExtendedElements = v
      }
    case "TestContent":
    if v, ok:= NAPTestContentTypePointer(value); ok {
      n.naptest.TestContent = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.naptest.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.naptest.LocalCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTest")
        }
        return n
}

  func (s *NAPTest) RefId() *RefIdType {
    if s.naptest.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptest.RefId = ((*RefIdType)(v))
      }
      }
      return s.naptest.RefId
    }
  func (s *NAPTest) RefId_IsNil() bool {
    return s.RefId == nil || s.naptest.RefId == nil
    }
  func (s *NAPTest) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.naptest.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.naptest.SIF_ExtendedElements = v
      }
      }
      return s.naptest.SIF_ExtendedElements
    }
  func (s *NAPTest) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.naptest.SIF_ExtendedElements == nil
    }
  func (s *NAPTest) TestContent() *NAPTestContentType {
    if s.naptest.TestContent == nil {
     if v, ok:= NAPTestContentTypePointer(NAPTestContentType{}); ok {
      s.naptest.TestContent = v
      }
      }
      return s.naptest.TestContent
    }
  func (s *NAPTest) TestContent_IsNil() bool {
    return s.TestContent == nil || s.naptest.TestContent == nil
    }
  func (s *NAPTest) SIF_Metadata() *SIF_MetadataType {
    if s.naptest.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.naptest.SIF_Metadata = v
      }
      }
      return s.naptest.SIF_Metadata
    }
  func (s *NAPTest) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.naptest.SIF_Metadata == nil
    }
  func (s *NAPTest) LocalCodeList() *LocalCodeListType {
    if s.naptest.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.naptest.LocalCodeList = v
      }
      }
      return s.naptest.LocalCodeList
    }
  func (s *NAPTest) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.naptest.LocalCodeList == nil
    }

func (n *AbstractContentPackageType_XMLData) Unset(key string) *AbstractContentPackageType_XMLData {
        switch key {
  case "Value":
   n.abstractcontentpackagetype_xmldata.Value = nil
  case "Description":
   n.abstractcontentpackagetype_xmldata.Description = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_XMLData")
        }
        return n
}

func (n *AbstractContentPackageType_XMLData) SetProperty(key string, value interface{}) *AbstractContentPackageType_XMLData {
        if n == nil {
                n, _ = AbstractContentPackageType_XMLDataPointer(AbstractContentPackageType_XMLData{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype_xmldata.Value = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype_xmldata.Description = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_XMLData")
        }
        return n
}

  func (s *AbstractContentPackageType_XMLData) Value() *String {
    if s.abstractcontentpackagetype_xmldata.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype_xmldata.Value = ((*String)(v))
      }
      }
      return s.abstractcontentpackagetype_xmldata.Value
    }
  func (s *AbstractContentPackageType_XMLData) Value_IsNil() bool {
    return s.Value == nil || s.abstractcontentpackagetype_xmldata.Value == nil
    }
  func (s *AbstractContentPackageType_XMLData) Description() *String {
    if s.abstractcontentpackagetype_xmldata.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype_xmldata.Description = ((*String)(v))
      }
      }
      return s.abstractcontentpackagetype_xmldata.Description
    }
  func (s *AbstractContentPackageType_XMLData) Description_IsNil() bool {
    return s.Description == nil || s.abstractcontentpackagetype_xmldata.Description == nil
    }

func (n *WellbeingPersonLink_PersonRefId) Unset(key string) *WellbeingPersonLink_PersonRefId {
        switch key {
  case "SIF_RefObject":
   n.wellbeingpersonlink_personrefid.SIF_RefObject = nil
  case "Value":
   n.wellbeingpersonlink_personrefid.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingPersonLink_PersonRefId")
        }
        return n
}

func (n *WellbeingPersonLink_PersonRefId) SetProperty(key string, value interface{}) *WellbeingPersonLink_PersonRefId {
        if n == nil {
                n, _ = WellbeingPersonLink_PersonRefIdPointer(WellbeingPersonLink_PersonRefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingpersonlink_personrefid.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingpersonlink_personrefid.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingPersonLink_PersonRefId")
        }
        return n
}

  func (s *WellbeingPersonLink_PersonRefId) SIF_RefObject() *String {
    if s.wellbeingpersonlink_personrefid.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingpersonlink_personrefid.SIF_RefObject = ((*String)(v))
      }
      }
      return s.wellbeingpersonlink_personrefid.SIF_RefObject
    }
  func (s *WellbeingPersonLink_PersonRefId) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.wellbeingpersonlink_personrefid.SIF_RefObject == nil
    }
  func (s *WellbeingPersonLink_PersonRefId) Value() *String {
    if s.wellbeingpersonlink_personrefid.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingpersonlink_personrefid.Value = ((*String)(v))
      }
      }
      return s.wellbeingpersonlink_personrefid.Value
    }
  func (s *WellbeingPersonLink_PersonRefId) Value_IsNil() bool {
    return s.Value == nil || s.wellbeingpersonlink_personrefid.Value == nil
    }

func (n *ResourceUsage) Unset(key string) *ResourceUsage {
        switch key {
  case "SIF_Metadata":
   n.resourceusage.SIF_Metadata = nil
  case "LocalCodeList":
   n.resourceusage.LocalCodeList = nil
  case "ResourceUsageContentType":
   n.resourceusage.ResourceUsageContentType = nil
  case "ResourceReportColumnList":
   n.resourceusage.ResourceReportColumnList = nil
  case "SIF_ExtendedElements":
   n.resourceusage.SIF_ExtendedElements = nil
  case "ResourceReportLineList":
   n.resourceusage.ResourceReportLineList = nil
  case "SchoolInfoRefId":
   n.resourceusage.SchoolInfoRefId = nil
  case "RefId":
   n.resourceusage.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage")
        }
        return n
}

func (n *ResourceUsage) SetProperty(key string, value interface{}) *ResourceUsage {
        if n == nil {
                n, _ = ResourceUsagePointer(ResourceUsage{})
        }
        switch key {
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.resourceusage.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.resourceusage.LocalCodeList = v
      }
    case "ResourceUsageContentType":
    if v, ok:= ResourceUsage_ResourceUsageContentTypePointer(value); ok {
      n.resourceusage.ResourceUsageContentType = v
      }
    case "ResourceReportColumnList":
    if v, ok:= ResourceUsage_ResourceReportColumnListPointer(value); ok {
      n.resourceusage.ResourceReportColumnList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.resourceusage.SIF_ExtendedElements = v
      }
    case "ResourceReportLineList":
    if v, ok:= ResourceUsage_ResourceReportLineListPointer(value); ok {
      n.resourceusage.ResourceReportLineList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.resourceusage.SchoolInfoRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.resourceusage.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage")
        }
        return n
}

  func (s *ResourceUsage) SIF_Metadata() *SIF_MetadataType {
    if s.resourceusage.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.resourceusage.SIF_Metadata = v
      }
      }
      return s.resourceusage.SIF_Metadata
    }
  func (s *ResourceUsage) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.resourceusage.SIF_Metadata == nil
    }
  func (s *ResourceUsage) LocalCodeList() *LocalCodeListType {
    if s.resourceusage.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.resourceusage.LocalCodeList = v
      }
      }
      return s.resourceusage.LocalCodeList
    }
  func (s *ResourceUsage) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.resourceusage.LocalCodeList == nil
    }
  func (s *ResourceUsage) ResourceUsageContentType() *ResourceUsage_ResourceUsageContentType {
    if s.resourceusage.ResourceUsageContentType == nil {
     if v, ok:= ResourceUsage_ResourceUsageContentTypePointer(ResourceUsage_ResourceUsageContentType{}); ok {
      s.resourceusage.ResourceUsageContentType = v
      }
      }
      return s.resourceusage.ResourceUsageContentType
    }
  func (s *ResourceUsage) ResourceUsageContentType_IsNil() bool {
    return s.ResourceUsageContentType == nil || s.resourceusage.ResourceUsageContentType == nil
    }
  func (s *ResourceUsage) ResourceReportColumnList() *ResourceUsage_ResourceReportColumnList {
    if s.resourceusage.ResourceReportColumnList == nil {
     if v, ok:= ResourceUsage_ResourceReportColumnListPointer(ResourceUsage_ResourceReportColumnList{}); ok {
      s.resourceusage.ResourceReportColumnList = v
      }
      }
      return s.resourceusage.ResourceReportColumnList
    }
  func (s *ResourceUsage) ResourceReportColumnList_IsNil() bool {
    return s.ResourceReportColumnList == nil || s.resourceusage.ResourceReportColumnList == nil
    }
  func (s *ResourceUsage) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.resourceusage.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.resourceusage.SIF_ExtendedElements = v
      }
      }
      return s.resourceusage.SIF_ExtendedElements
    }
  func (s *ResourceUsage) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.resourceusage.SIF_ExtendedElements == nil
    }
  func (s *ResourceUsage) ResourceReportLineList() *ResourceUsage_ResourceReportLineList {
    if s.resourceusage.ResourceReportLineList == nil {
     if v, ok:= ResourceUsage_ResourceReportLineListPointer(ResourceUsage_ResourceReportLineList{}); ok {
      s.resourceusage.ResourceReportLineList = v
      }
      }
      return s.resourceusage.ResourceReportLineList
    }
  func (s *ResourceUsage) ResourceReportLineList_IsNil() bool {
    return s.ResourceReportLineList == nil || s.resourceusage.ResourceReportLineList == nil
    }
  func (s *ResourceUsage) SchoolInfoRefId() *String {
    if s.resourceusage.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourceusage.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.resourceusage.SchoolInfoRefId
    }
  func (s *ResourceUsage) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.resourceusage.SchoolInfoRefId == nil
    }
  func (s *ResourceUsage) RefId() *RefIdType {
    if s.resourceusage.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourceusage.RefId = ((*RefIdType)(v))
      }
      }
      return s.resourceusage.RefId
    }
  func (s *ResourceUsage) RefId_IsNil() bool {
    return s.RefId == nil || s.resourceusage.RefId == nil
    }

func (n *LEAContactType) Unset(key string) *LEAContactType {
        switch key {
  case "ContactInfo":
   n.leacontacttype.ContactInfo = nil
  case "PublishInDirectory":
   n.leacontacttype.PublishInDirectory = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LEAContactType")
        }
        return n
}

func (n *LEAContactType) SetProperty(key string, value interface{}) *LEAContactType {
        if n == nil {
                n, _ = LEAContactTypePointer(LEAContactType{})
        }
        switch key {
    case "ContactInfo":
    if v, ok:= ContactInfoTypePointer(value); ok {
      n.leacontacttype.ContactInfo = v
      }
    case "PublishInDirectory":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.leacontacttype.PublishInDirectory = ((*PublishInDirectoryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LEAContactType")
        }
        return n
}

  func (s *LEAContactType) ContactInfo() *ContactInfoType {
    if s.leacontacttype.ContactInfo == nil {
     if v, ok:= ContactInfoTypePointer(ContactInfoType{}); ok {
      s.leacontacttype.ContactInfo = v
      }
      }
      return s.leacontacttype.ContactInfo
    }
  func (s *LEAContactType) ContactInfo_IsNil() bool {
    return s.ContactInfo == nil || s.leacontacttype.ContactInfo == nil
    }
  func (s *LEAContactType) PublishInDirectory() *PublishInDirectoryType {
    if s.leacontacttype.PublishInDirectory == nil {
    if v, ok:= StringPointer(""); ok {
      s.leacontacttype.PublishInDirectory = ((*PublishInDirectoryType)(v))
      }
      }
      return s.leacontacttype.PublishInDirectory
    }
  func (s *LEAContactType) PublishInDirectory_IsNil() bool {
    return s.PublishInDirectory == nil || s.leacontacttype.PublishInDirectory == nil
    }

func (n *ResourceBooking) Unset(key string) *ResourceBooking {
        switch key {
  case "ResourceRefId":
   n.resourcebooking.ResourceRefId = nil
  case "ResourceLocalId":
   n.resourcebooking.ResourceLocalId = nil
  case "StartDateTime":
   n.resourcebooking.StartDateTime = nil
  case "KeepOld":
   n.resourcebooking.KeepOld = nil
  case "LocalCodeList":
   n.resourcebooking.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.resourcebooking.SIF_ExtendedElements = nil
  case "Booker":
   n.resourcebooking.Booker = nil
  case "ToPeriod":
   n.resourcebooking.ToPeriod = nil
  case "FinishDateTime":
   n.resourcebooking.FinishDateTime = nil
  case "RefId":
   n.resourcebooking.RefId = nil
  case "Reason":
   n.resourcebooking.Reason = nil
  case "FromPeriod":
   n.resourcebooking.FromPeriod = nil
  case "SIF_Metadata":
   n.resourcebooking.SIF_Metadata = nil
  case "ScheduledActivityRefId":
   n.resourcebooking.ScheduledActivityRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceBooking")
        }
        return n
}

func (n *ResourceBooking) SetProperty(key string, value interface{}) *ResourceBooking {
        if n == nil {
                n, _ = ResourceBookingPointer(ResourceBooking{})
        }
        switch key {
    case "ResourceRefId":
    if v, ok:= ResourceBooking_ResourceRefIdPointer(value); ok {
      n.resourcebooking.ResourceRefId = v
      }
    case "ResourceLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.resourcebooking.ResourceLocalId = ((*LocalIdType)(v))
      }
    case "StartDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.resourcebooking.StartDateTime = ((*String)(v))
      }
    case "KeepOld":
    
    if v, ok:= BoolPointer(value); ok {
      n.resourcebooking.KeepOld = ((*Bool)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.resourcebooking.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.resourcebooking.SIF_ExtendedElements = v
      }
    case "Booker":
    
    if v, ok:= StringPointer(value); ok {
      n.resourcebooking.Booker = ((*String)(v))
      }
    case "ToPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.resourcebooking.ToPeriod = ((*LocalIdType)(v))
      }
    case "FinishDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.resourcebooking.FinishDateTime = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.resourcebooking.RefId = ((*RefIdType)(v))
      }
    case "Reason":
    
    if v, ok:= StringPointer(value); ok {
      n.resourcebooking.Reason = ((*String)(v))
      }
    case "FromPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.resourcebooking.FromPeriod = ((*LocalIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.resourcebooking.SIF_Metadata = v
      }
    case "ScheduledActivityRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.resourcebooking.ScheduledActivityRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceBooking")
        }
        return n
}

  func (s *ResourceBooking) ResourceRefId() *ResourceBooking_ResourceRefId {
    if s.resourcebooking.ResourceRefId == nil {
     if v, ok:= ResourceBooking_ResourceRefIdPointer(ResourceBooking_ResourceRefId{}); ok {
      s.resourcebooking.ResourceRefId = v
      }
      }
      return s.resourcebooking.ResourceRefId
    }
  func (s *ResourceBooking) ResourceRefId_IsNil() bool {
    return s.ResourceRefId == nil || s.resourcebooking.ResourceRefId == nil
    }
  func (s *ResourceBooking) ResourceLocalId() *LocalIdType {
    if s.resourcebooking.ResourceLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourcebooking.ResourceLocalId = ((*LocalIdType)(v))
      }
      }
      return s.resourcebooking.ResourceLocalId
    }
  func (s *ResourceBooking) ResourceLocalId_IsNil() bool {
    return s.ResourceLocalId == nil || s.resourcebooking.ResourceLocalId == nil
    }
  func (s *ResourceBooking) StartDateTime() *String {
    if s.resourcebooking.StartDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourcebooking.StartDateTime = ((*String)(v))
      }
      }
      return s.resourcebooking.StartDateTime
    }
  func (s *ResourceBooking) StartDateTime_IsNil() bool {
    return s.StartDateTime == nil || s.resourcebooking.StartDateTime == nil
    }
  func (s *ResourceBooking) KeepOld() *Bool {
    if s.resourcebooking.KeepOld == nil {
    if v, ok:= BoolPointer(false); ok {
      s.resourcebooking.KeepOld = ((*Bool)(v))
      }
      }
      return s.resourcebooking.KeepOld
    }
  func (s *ResourceBooking) KeepOld_IsNil() bool {
    return s.KeepOld == nil || s.resourcebooking.KeepOld == nil
    }
  func (s *ResourceBooking) LocalCodeList() *LocalCodeListType {
    if s.resourcebooking.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.resourcebooking.LocalCodeList = v
      }
      }
      return s.resourcebooking.LocalCodeList
    }
  func (s *ResourceBooking) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.resourcebooking.LocalCodeList == nil
    }
  func (s *ResourceBooking) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.resourcebooking.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.resourcebooking.SIF_ExtendedElements = v
      }
      }
      return s.resourcebooking.SIF_ExtendedElements
    }
  func (s *ResourceBooking) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.resourcebooking.SIF_ExtendedElements == nil
    }
  func (s *ResourceBooking) Booker() *String {
    if s.resourcebooking.Booker == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourcebooking.Booker = ((*String)(v))
      }
      }
      return s.resourcebooking.Booker
    }
  func (s *ResourceBooking) Booker_IsNil() bool {
    return s.Booker == nil || s.resourcebooking.Booker == nil
    }
  func (s *ResourceBooking) ToPeriod() *LocalIdType {
    if s.resourcebooking.ToPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourcebooking.ToPeriod = ((*LocalIdType)(v))
      }
      }
      return s.resourcebooking.ToPeriod
    }
  func (s *ResourceBooking) ToPeriod_IsNil() bool {
    return s.ToPeriod == nil || s.resourcebooking.ToPeriod == nil
    }
  func (s *ResourceBooking) FinishDateTime() *String {
    if s.resourcebooking.FinishDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourcebooking.FinishDateTime = ((*String)(v))
      }
      }
      return s.resourcebooking.FinishDateTime
    }
  func (s *ResourceBooking) FinishDateTime_IsNil() bool {
    return s.FinishDateTime == nil || s.resourcebooking.FinishDateTime == nil
    }
  func (s *ResourceBooking) RefId() *RefIdType {
    if s.resourcebooking.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourcebooking.RefId = ((*RefIdType)(v))
      }
      }
      return s.resourcebooking.RefId
    }
  func (s *ResourceBooking) RefId_IsNil() bool {
    return s.RefId == nil || s.resourcebooking.RefId == nil
    }
  func (s *ResourceBooking) Reason() *String {
    if s.resourcebooking.Reason == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourcebooking.Reason = ((*String)(v))
      }
      }
      return s.resourcebooking.Reason
    }
  func (s *ResourceBooking) Reason_IsNil() bool {
    return s.Reason == nil || s.resourcebooking.Reason == nil
    }
  func (s *ResourceBooking) FromPeriod() *LocalIdType {
    if s.resourcebooking.FromPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourcebooking.FromPeriod = ((*LocalIdType)(v))
      }
      }
      return s.resourcebooking.FromPeriod
    }
  func (s *ResourceBooking) FromPeriod_IsNil() bool {
    return s.FromPeriod == nil || s.resourcebooking.FromPeriod == nil
    }
  func (s *ResourceBooking) SIF_Metadata() *SIF_MetadataType {
    if s.resourcebooking.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.resourcebooking.SIF_Metadata = v
      }
      }
      return s.resourcebooking.SIF_Metadata
    }
  func (s *ResourceBooking) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.resourcebooking.SIF_Metadata == nil
    }
  func (s *ResourceBooking) ScheduledActivityRefId() *String {
    if s.resourcebooking.ScheduledActivityRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourcebooking.ScheduledActivityRefId = ((*String)(v))
      }
      }
      return s.resourcebooking.ScheduledActivityRefId
    }
  func (s *ResourceBooking) ScheduledActivityRefId_IsNil() bool {
    return s.ScheduledActivityRefId == nil || s.resourcebooking.ScheduledActivityRefId == nil
    }

func (n *AddressCollectionStudentType) Unset(key string) *AddressCollectionStudentType {
        switch key {
  case "BoardingStatus":
   n.addresscollectionstudenttype.BoardingStatus = nil
  case "Parent1":
   n.addresscollectionstudenttype.Parent1 = nil
  case "EducationLevel":
   n.addresscollectionstudenttype.EducationLevel = nil
  case "StudentAddress":
   n.addresscollectionstudenttype.StudentAddress = nil
  case "LocalId":
   n.addresscollectionstudenttype.LocalId = nil
  case "ReportingParent2":
   n.addresscollectionstudenttype.ReportingParent2 = nil
  case "Parent2":
   n.addresscollectionstudenttype.Parent2 = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressCollectionStudentType")
        }
        return n
}

func (n *AddressCollectionStudentType) SetProperty(key string, value interface{}) *AddressCollectionStudentType {
        if n == nil {
                n, _ = AddressCollectionStudentTypePointer(AddressCollectionStudentType{})
        }
        switch key {
    case "BoardingStatus":
        if !CodesetContains(AUCodeSetsBoardingType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsBoardingType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.addresscollectionstudenttype.BoardingStatus = ((*AUCodeSetsBoardingType)(v))
      }
    case "Parent1":
    if v, ok:= AGParentTypePointer(value); ok {
      n.addresscollectionstudenttype.Parent1 = v
      }
    case "EducationLevel":
        if !CodesetContains(AUCodeSetsEducationLevelType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEducationLevelType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.addresscollectionstudenttype.EducationLevel = ((*AUCodeSetsEducationLevelType)(v))
      }
    case "StudentAddress":
    if v, ok:= AddressTypePointer(value); ok {
      n.addresscollectionstudenttype.StudentAddress = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.addresscollectionstudenttype.LocalId = ((*LocalIdType)(v))
      }
    case "ReportingParent2":
    
    if v, ok:= StringPointer(value); ok {
      n.addresscollectionstudenttype.ReportingParent2 = ((*String)(v))
      }
    case "Parent2":
    if v, ok:= AGParentTypePointer(value); ok {
      n.addresscollectionstudenttype.Parent2 = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressCollectionStudentType")
        }
        return n
}

  func (s *AddressCollectionStudentType) BoardingStatus() *AUCodeSetsBoardingType {
    if s.addresscollectionstudenttype.BoardingStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollectionstudenttype.BoardingStatus = ((*AUCodeSetsBoardingType)(v))
      }
      }
      return s.addresscollectionstudenttype.BoardingStatus
    }
  func (s *AddressCollectionStudentType) BoardingStatus_IsNil() bool {
    return s.BoardingStatus == nil || s.addresscollectionstudenttype.BoardingStatus == nil
    }
  func (s *AddressCollectionStudentType) Parent1() *AGParentType {
    if s.addresscollectionstudenttype.Parent1 == nil {
     if v, ok:= AGParentTypePointer(AGParentType{}); ok {
      s.addresscollectionstudenttype.Parent1 = v
      }
      }
      return s.addresscollectionstudenttype.Parent1
    }
  func (s *AddressCollectionStudentType) Parent1_IsNil() bool {
    return s.Parent1 == nil || s.addresscollectionstudenttype.Parent1 == nil
    }
  func (s *AddressCollectionStudentType) EducationLevel() *AUCodeSetsEducationLevelType {
    if s.addresscollectionstudenttype.EducationLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollectionstudenttype.EducationLevel = ((*AUCodeSetsEducationLevelType)(v))
      }
      }
      return s.addresscollectionstudenttype.EducationLevel
    }
  func (s *AddressCollectionStudentType) EducationLevel_IsNil() bool {
    return s.EducationLevel == nil || s.addresscollectionstudenttype.EducationLevel == nil
    }
  func (s *AddressCollectionStudentType) StudentAddress() *AddressType {
    if s.addresscollectionstudenttype.StudentAddress == nil {
     if v, ok:= AddressTypePointer(AddressType{}); ok {
      s.addresscollectionstudenttype.StudentAddress = v
      }
      }
      return s.addresscollectionstudenttype.StudentAddress
    }
  func (s *AddressCollectionStudentType) StudentAddress_IsNil() bool {
    return s.StudentAddress == nil || s.addresscollectionstudenttype.StudentAddress == nil
    }
  func (s *AddressCollectionStudentType) LocalId() *LocalIdType {
    if s.addresscollectionstudenttype.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollectionstudenttype.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.addresscollectionstudenttype.LocalId
    }
  func (s *AddressCollectionStudentType) LocalId_IsNil() bool {
    return s.LocalId == nil || s.addresscollectionstudenttype.LocalId == nil
    }
  func (s *AddressCollectionStudentType) ReportingParent2() *String {
    if s.addresscollectionstudenttype.ReportingParent2 == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollectionstudenttype.ReportingParent2 = ((*String)(v))
      }
      }
      return s.addresscollectionstudenttype.ReportingParent2
    }
  func (s *AddressCollectionStudentType) ReportingParent2_IsNil() bool {
    return s.ReportingParent2 == nil || s.addresscollectionstudenttype.ReportingParent2 == nil
    }
  func (s *AddressCollectionStudentType) Parent2() *AGParentType {
    if s.addresscollectionstudenttype.Parent2 == nil {
     if v, ok:= AGParentTypePointer(AGParentType{}); ok {
      s.addresscollectionstudenttype.Parent2 = v
      }
      }
      return s.addresscollectionstudenttype.Parent2
    }
  func (s *AddressCollectionStudentType) Parent2_IsNil() bool {
    return s.Parent2 == nil || s.addresscollectionstudenttype.Parent2 == nil
    }

func (n *EducationFilterType) Unset(key string) *EducationFilterType {
        switch key {
  case "LearningStandardItems":
   n.educationfiltertype.LearningStandardItems = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EducationFilterType")
        }
        return n
}

func (n *EducationFilterType) SetProperty(key string, value interface{}) *EducationFilterType {
        if n == nil {
                n, _ = EducationFilterTypePointer(EducationFilterType{})
        }
        switch key {
    case "LearningStandardItems":
    if v, ok:= LearningStandardsTypePointer(value); ok {
      n.educationfiltertype.LearningStandardItems = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EducationFilterType")
        }
        return n
}

  func (s *EducationFilterType) LearningStandardItems() *LearningStandardsType {
    if s.educationfiltertype.LearningStandardItems == nil {
     if v, ok:= LearningStandardsTypePointer(LearningStandardsType{}); ok {
      s.educationfiltertype.LearningStandardItems = v
      }
      }
      return s.educationfiltertype.LearningStandardItems
    }
  func (s *EducationFilterType) LearningStandardItems_IsNil() bool {
    return s.LearningStandardItems == nil || s.educationfiltertype.LearningStandardItems == nil
    }

func (n *AbstractContentElementType_BinaryData) Unset(key string) *AbstractContentElementType_BinaryData {
        switch key {
  case "FileName":
   n.abstractcontentelementtype_binarydata.FileName = nil
  case "Value":
   n.abstractcontentelementtype_binarydata.Value = nil
  case "MIMEType":
   n.abstractcontentelementtype_binarydata.MIMEType = nil
  case "Description":
   n.abstractcontentelementtype_binarydata.Description = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_BinaryData")
        }
        return n
}

func (n *AbstractContentElementType_BinaryData) SetProperty(key string, value interface{}) *AbstractContentElementType_BinaryData {
        if n == nil {
                n, _ = AbstractContentElementType_BinaryDataPointer(AbstractContentElementType_BinaryData{})
        }
        switch key {
    case "FileName":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentelementtype_binarydata.FileName = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentelementtype_binarydata.Value = ((*String)(v))
      }
    case "MIMEType":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentelementtype_binarydata.MIMEType = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentelementtype_binarydata.Description = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_BinaryData")
        }
        return n
}

  func (s *AbstractContentElementType_BinaryData) FileName() *String {
    if s.abstractcontentelementtype_binarydata.FileName == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentelementtype_binarydata.FileName = ((*String)(v))
      }
      }
      return s.abstractcontentelementtype_binarydata.FileName
    }
  func (s *AbstractContentElementType_BinaryData) FileName_IsNil() bool {
    return s.FileName == nil || s.abstractcontentelementtype_binarydata.FileName == nil
    }
  func (s *AbstractContentElementType_BinaryData) Value() *String {
    if s.abstractcontentelementtype_binarydata.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentelementtype_binarydata.Value = ((*String)(v))
      }
      }
      return s.abstractcontentelementtype_binarydata.Value
    }
  func (s *AbstractContentElementType_BinaryData) Value_IsNil() bool {
    return s.Value == nil || s.abstractcontentelementtype_binarydata.Value == nil
    }
  func (s *AbstractContentElementType_BinaryData) MIMEType() *String {
    if s.abstractcontentelementtype_binarydata.MIMEType == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentelementtype_binarydata.MIMEType = ((*String)(v))
      }
      }
      return s.abstractcontentelementtype_binarydata.MIMEType
    }
  func (s *AbstractContentElementType_BinaryData) MIMEType_IsNil() bool {
    return s.MIMEType == nil || s.abstractcontentelementtype_binarydata.MIMEType == nil
    }
  func (s *AbstractContentElementType_BinaryData) Description() *String {
    if s.abstractcontentelementtype_binarydata.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentelementtype_binarydata.Description = ((*String)(v))
      }
      }
      return s.abstractcontentelementtype_binarydata.Description
    }
  func (s *AbstractContentElementType_BinaryData) Description_IsNil() bool {
    return s.Description == nil || s.abstractcontentelementtype_binarydata.Description == nil
    }

func (n *StudentSchoolEnrollment_Homeroom) Unset(key string) *StudentSchoolEnrollment_Homeroom {
        switch key {
  case "SIF_RefObject":
   n.studentschoolenrollment_homeroom.SIF_RefObject = nil
  case "Value":
   n.studentschoolenrollment_homeroom.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Homeroom")
        }
        return n
}

func (n *StudentSchoolEnrollment_Homeroom) SetProperty(key string, value interface{}) *StudentSchoolEnrollment_Homeroom {
        if n == nil {
                n, _ = StudentSchoolEnrollment_HomeroomPointer(StudentSchoolEnrollment_Homeroom{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment_homeroom.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment_homeroom.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Homeroom")
        }
        return n
}

  func (s *StudentSchoolEnrollment_Homeroom) SIF_RefObject() *String {
    if s.studentschoolenrollment_homeroom.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment_homeroom.SIF_RefObject = ((*String)(v))
      }
      }
      return s.studentschoolenrollment_homeroom.SIF_RefObject
    }
  func (s *StudentSchoolEnrollment_Homeroom) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.studentschoolenrollment_homeroom.SIF_RefObject == nil
    }
  func (s *StudentSchoolEnrollment_Homeroom) Value() *String {
    if s.studentschoolenrollment_homeroom.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment_homeroom.Value = ((*String)(v))
      }
      }
      return s.studentschoolenrollment_homeroom.Value
    }
  func (s *StudentSchoolEnrollment_Homeroom) Value_IsNil() bool {
    return s.Value == nil || s.studentschoolenrollment_homeroom.Value == nil
    }

func (n *ResourceUsage_ResourceUsageContentType) Unset(key string) *ResourceUsage_ResourceUsageContentType {
        switch key {
  case "Code":
   n.resourceusage_resourceusagecontenttype.Code = nil
  case "LocalDescription":
   n.resourceusage_resourceusagecontenttype.LocalDescription = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_ResourceUsageContentType")
        }
        return n
}

func (n *ResourceUsage_ResourceUsageContentType) SetProperty(key string, value interface{}) *ResourceUsage_ResourceUsageContentType {
        if n == nil {
                n, _ = ResourceUsage_ResourceUsageContentTypePointer(ResourceUsage_ResourceUsageContentType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsResourceUsageContentTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsResourceUsageContentTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.resourceusage_resourceusagecontenttype.Code = ((*AUCodeSetsResourceUsageContentTypeType)(v))
      }
    case "LocalDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.resourceusage_resourceusagecontenttype.LocalDescription = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_ResourceUsageContentType")
        }
        return n
}

  func (s *ResourceUsage_ResourceUsageContentType) Code() *AUCodeSetsResourceUsageContentTypeType {
    if s.resourceusage_resourceusagecontenttype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourceusage_resourceusagecontenttype.Code = ((*AUCodeSetsResourceUsageContentTypeType)(v))
      }
      }
      return s.resourceusage_resourceusagecontenttype.Code
    }
  func (s *ResourceUsage_ResourceUsageContentType) Code_IsNil() bool {
    return s.Code == nil || s.resourceusage_resourceusagecontenttype.Code == nil
    }
  func (s *ResourceUsage_ResourceUsageContentType) LocalDescription() *String {
    if s.resourceusage_resourceusagecontenttype.LocalDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourceusage_resourceusagecontenttype.LocalDescription = ((*String)(v))
      }
      }
      return s.resourceusage_resourceusagecontenttype.LocalDescription
    }
  func (s *ResourceUsage_ResourceUsageContentType) LocalDescription_IsNil() bool {
    return s.LocalDescription == nil || s.resourceusage_resourceusagecontenttype.LocalDescription == nil
    }

func (n *ProgramAvailabilityType) Unset(key string) *ProgramAvailabilityType {
        switch key {
  case "OtherCodeList":
   n.programavailabilitytype.OtherCodeList = nil
  case "Code":
   n.programavailabilitytype.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ProgramAvailabilityType")
        }
        return n
}

func (n *ProgramAvailabilityType) SetProperty(key string, value interface{}) *ProgramAvailabilityType {
        if n == nil {
                n, _ = ProgramAvailabilityTypePointer(ProgramAvailabilityType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.programavailabilitytype.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSets0211ProgramAvailabilityType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSets0211ProgramAvailabilityType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.programavailabilitytype.Code = ((*AUCodeSets0211ProgramAvailabilityType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ProgramAvailabilityType")
        }
        return n
}

  func (s *ProgramAvailabilityType) OtherCodeList() *OtherCodeListType {
    if s.programavailabilitytype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.programavailabilitytype.OtherCodeList = v
      }
      }
      return s.programavailabilitytype.OtherCodeList
    }
  func (s *ProgramAvailabilityType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.programavailabilitytype.OtherCodeList == nil
    }
  func (s *ProgramAvailabilityType) Code() *AUCodeSets0211ProgramAvailabilityType {
    if s.programavailabilitytype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.programavailabilitytype.Code = ((*AUCodeSets0211ProgramAvailabilityType)(v))
      }
      }
      return s.programavailabilitytype.Code
    }
  func (s *ProgramAvailabilityType) Code_IsNil() bool {
    return s.Code == nil || s.programavailabilitytype.Code == nil
    }

func (n *LEAInfo) Unset(key string) *LEAInfo {
        switch key {
  case "SIF_ExtendedElements":
   n.leainfo.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.leainfo.LocalCodeList = nil
  case "StateProvinceId":
   n.leainfo.StateProvinceId = nil
  case "EducationAgencyType":
   n.leainfo.EducationAgencyType = nil
  case "LEAName":
   n.leainfo.LEAName = nil
  case "PhoneNumberList":
   n.leainfo.PhoneNumberList = nil
  case "OperationalStatus":
   n.leainfo.OperationalStatus = nil
  case "LEAContactList":
   n.leainfo.LEAContactList = nil
  case "SIF_Metadata":
   n.leainfo.SIF_Metadata = nil
  case "LEAURL":
   n.leainfo.LEAURL = nil
  case "CommonwealthId":
   n.leainfo.CommonwealthId = nil
  case "AddressList":
   n.leainfo.AddressList = nil
  case "RefId":
   n.leainfo.RefId = nil
  case "LocalId":
   n.leainfo.LocalId = nil
  case "SLA":
   n.leainfo.SLA = nil
  case "JurisdictionLowerHouse":
   n.leainfo.JurisdictionLowerHouse = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LEAInfo")
        }
        return n
}

func (n *LEAInfo) SetProperty(key string, value interface{}) *LEAInfo {
        if n == nil {
                n, _ = LEAInfoPointer(LEAInfo{})
        }
        switch key {
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.leainfo.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.leainfo.LocalCodeList = v
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.leainfo.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "EducationAgencyType":
    if v, ok:= AgencyTypePointer(value); ok {
      n.leainfo.EducationAgencyType = v
      }
    case "LEAName":
    
    if v, ok:= StringPointer(value); ok {
      n.leainfo.LEAName = ((*String)(v))
      }
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.leainfo.PhoneNumberList = v
      }
    case "OperationalStatus":
        if !CodesetContains(AUCodeSetsOperationalStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsOperationalStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.leainfo.OperationalStatus = ((*OperationalStatusType)(v))
      }
    case "LEAContactList":
    if v, ok:= LEAContactListTypePointer(value); ok {
      n.leainfo.LEAContactList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.leainfo.SIF_Metadata = v
      }
    case "LEAURL":
    
    if v, ok:= StringPointer(value); ok {
      n.leainfo.LEAURL = ((*String)(v))
      }
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.leainfo.CommonwealthId = ((*String)(v))
      }
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.leainfo.AddressList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.leainfo.RefId = ((*RefIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.leainfo.LocalId = ((*LocalIdType)(v))
      }
    case "SLA":
        if !CodesetContains(AUCodeSetsAustralianStandardGeographicalClassificationASGCType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardGeographicalClassificationASGCType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.leainfo.SLA = ((*AUCodeSetsAustralianStandardGeographicalClassificationASGCType)(v))
      }
    case "JurisdictionLowerHouse":
    
    if v, ok:= StringPointer(value); ok {
      n.leainfo.JurisdictionLowerHouse = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LEAInfo")
        }
        return n
}

  func (s *LEAInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.leainfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.leainfo.SIF_ExtendedElements = v
      }
      }
      return s.leainfo.SIF_ExtendedElements
    }
  func (s *LEAInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.leainfo.SIF_ExtendedElements == nil
    }
  func (s *LEAInfo) LocalCodeList() *LocalCodeListType {
    if s.leainfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.leainfo.LocalCodeList = v
      }
      }
      return s.leainfo.LocalCodeList
    }
  func (s *LEAInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.leainfo.LocalCodeList == nil
    }
  func (s *LEAInfo) StateProvinceId() *StateProvinceIdType {
    if s.leainfo.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.leainfo.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.leainfo.StateProvinceId
    }
  func (s *LEAInfo) StateProvinceId_IsNil() bool {
    return s.StateProvinceId == nil || s.leainfo.StateProvinceId == nil
    }
  func (s *LEAInfo) EducationAgencyType() *AgencyType {
    if s.leainfo.EducationAgencyType == nil {
     if v, ok:= AgencyTypePointer(AgencyType{}); ok {
      s.leainfo.EducationAgencyType = v
      }
      }
      return s.leainfo.EducationAgencyType
    }
  func (s *LEAInfo) EducationAgencyType_IsNil() bool {
    return s.EducationAgencyType == nil || s.leainfo.EducationAgencyType == nil
    }
  func (s *LEAInfo) LEAName() *String {
    if s.leainfo.LEAName == nil {
    if v, ok:= StringPointer(""); ok {
      s.leainfo.LEAName = ((*String)(v))
      }
      }
      return s.leainfo.LEAName
    }
  func (s *LEAInfo) LEAName_IsNil() bool {
    return s.LEAName == nil || s.leainfo.LEAName == nil
    }
  func (s *LEAInfo) PhoneNumberList() *PhoneNumberListType {
    if s.leainfo.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.leainfo.PhoneNumberList = v
      }
      }
      return s.leainfo.PhoneNumberList
    }
  func (s *LEAInfo) PhoneNumberList_IsNil() bool {
    return s.PhoneNumberList == nil || s.leainfo.PhoneNumberList == nil
    }
  func (s *LEAInfo) OperationalStatus() *OperationalStatusType {
    if s.leainfo.OperationalStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.leainfo.OperationalStatus = ((*OperationalStatusType)(v))
      }
      }
      return s.leainfo.OperationalStatus
    }
  func (s *LEAInfo) OperationalStatus_IsNil() bool {
    return s.OperationalStatus == nil || s.leainfo.OperationalStatus == nil
    }
  func (s *LEAInfo) LEAContactList() *LEAContactListType {
    if s.leainfo.LEAContactList == nil {
     if v, ok:= LEAContactListTypePointer(LEAContactListType{}); ok {
      s.leainfo.LEAContactList = v
      }
      }
      return s.leainfo.LEAContactList
    }
  func (s *LEAInfo) LEAContactList_IsNil() bool {
    return s.LEAContactList == nil || s.leainfo.LEAContactList == nil
    }
  func (s *LEAInfo) SIF_Metadata() *SIF_MetadataType {
    if s.leainfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.leainfo.SIF_Metadata = v
      }
      }
      return s.leainfo.SIF_Metadata
    }
  func (s *LEAInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.leainfo.SIF_Metadata == nil
    }
  func (s *LEAInfo) LEAURL() *String {
    if s.leainfo.LEAURL == nil {
    if v, ok:= StringPointer(""); ok {
      s.leainfo.LEAURL = ((*String)(v))
      }
      }
      return s.leainfo.LEAURL
    }
  func (s *LEAInfo) LEAURL_IsNil() bool {
    return s.LEAURL == nil || s.leainfo.LEAURL == nil
    }
  func (s *LEAInfo) CommonwealthId() *String {
    if s.leainfo.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.leainfo.CommonwealthId = ((*String)(v))
      }
      }
      return s.leainfo.CommonwealthId
    }
  func (s *LEAInfo) CommonwealthId_IsNil() bool {
    return s.CommonwealthId == nil || s.leainfo.CommonwealthId == nil
    }
  func (s *LEAInfo) AddressList() *AddressListType {
    if s.leainfo.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.leainfo.AddressList = v
      }
      }
      return s.leainfo.AddressList
    }
  func (s *LEAInfo) AddressList_IsNil() bool {
    return s.AddressList == nil || s.leainfo.AddressList == nil
    }
  func (s *LEAInfo) RefId() *RefIdType {
    if s.leainfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.leainfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.leainfo.RefId
    }
  func (s *LEAInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.leainfo.RefId == nil
    }
  func (s *LEAInfo) LocalId() *LocalIdType {
    if s.leainfo.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.leainfo.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.leainfo.LocalId
    }
  func (s *LEAInfo) LocalId_IsNil() bool {
    return s.LocalId == nil || s.leainfo.LocalId == nil
    }
  func (s *LEAInfo) SLA() *AUCodeSetsAustralianStandardGeographicalClassificationASGCType {
    if s.leainfo.SLA == nil {
    if v, ok:= StringPointer(""); ok {
      s.leainfo.SLA = ((*AUCodeSetsAustralianStandardGeographicalClassificationASGCType)(v))
      }
      }
      return s.leainfo.SLA
    }
  func (s *LEAInfo) SLA_IsNil() bool {
    return s.SLA == nil || s.leainfo.SLA == nil
    }
  func (s *LEAInfo) JurisdictionLowerHouse() *String {
    if s.leainfo.JurisdictionLowerHouse == nil {
    if v, ok:= StringPointer(""); ok {
      s.leainfo.JurisdictionLowerHouse = ((*String)(v))
      }
      }
      return s.leainfo.JurisdictionLowerHouse
    }
  func (s *LEAInfo) JurisdictionLowerHouse_IsNil() bool {
    return s.JurisdictionLowerHouse == nil || s.leainfo.JurisdictionLowerHouse == nil
    }

func (n *SubjectAreaType) Unset(key string) *SubjectAreaType {
        switch key {
  case "OtherCodeList":
   n.subjectareatype.OtherCodeList = nil
  case "Code":
   n.subjectareatype.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SubjectAreaType")
        }
        return n
}

func (n *SubjectAreaType) SetProperty(key string, value interface{}) *SubjectAreaType {
        if n == nil {
                n, _ = SubjectAreaTypePointer(SubjectAreaType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.subjectareatype.OtherCodeList = v
      }
    case "Code":
    
    if v, ok:= StringPointer(value); ok {
      n.subjectareatype.Code = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SubjectAreaType")
        }
        return n
}

  func (s *SubjectAreaType) OtherCodeList() *OtherCodeListType {
    if s.subjectareatype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.subjectareatype.OtherCodeList = v
      }
      }
      return s.subjectareatype.OtherCodeList
    }
  func (s *SubjectAreaType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.subjectareatype.OtherCodeList == nil
    }
  func (s *SubjectAreaType) Code() *String {
    if s.subjectareatype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.subjectareatype.Code = ((*String)(v))
      }
      }
      return s.subjectareatype.Code
    }
  func (s *SubjectAreaType) Code_IsNil() bool {
    return s.Code == nil || s.subjectareatype.Code == nil
    }

func (n *StudentMostRecentContainerType) Unset(key string) *StudentMostRecentContainerType {
        switch key {
  case "LocalCampusId":
   n.studentmostrecentcontainertype.LocalCampusId = nil
  case "Parent1Language":
   n.studentmostrecentcontainertype.Parent1Language = nil
  case "Parent1EmploymentType":
   n.studentmostrecentcontainertype.Parent1EmploymentType = nil
  case "ReportingSchoolId":
   n.studentmostrecentcontainertype.ReportingSchoolId = nil
  case "OtherEnrollmentSchoolACARAId":
   n.studentmostrecentcontainertype.OtherEnrollmentSchoolACARAId = nil
  case "BoardingStatus":
   n.studentmostrecentcontainertype.BoardingStatus = nil
  case "FTE":
   n.studentmostrecentcontainertype.FTE = nil
  case "DisabilityLevelOfAdjustment":
   n.studentmostrecentcontainertype.DisabilityLevelOfAdjustment = nil
  case "SchoolACARAId":
   n.studentmostrecentcontainertype.SchoolACARAId = nil
  case "CensusAge":
   n.studentmostrecentcontainertype.CensusAge = nil
  case "Parent2Language":
   n.studentmostrecentcontainertype.Parent2Language = nil
  case "YearLevel":
   n.studentmostrecentcontainertype.YearLevel = nil
  case "Parent2EmploymentType":
   n.studentmostrecentcontainertype.Parent2EmploymentType = nil
  case "Homegroup":
   n.studentmostrecentcontainertype.Homegroup = nil
  case "MembershipType":
   n.studentmostrecentcontainertype.MembershipType = nil
  case "Parent1NonSchoolEducation":
   n.studentmostrecentcontainertype.Parent1NonSchoolEducation = nil
  case "DisabilityCategory":
   n.studentmostrecentcontainertype.DisabilityCategory = nil
  case "Parent2SchoolEducationLevel":
   n.studentmostrecentcontainertype.Parent2SchoolEducationLevel = nil
  case "ClassCode":
   n.studentmostrecentcontainertype.ClassCode = nil
  case "HomeroomLocalId":
   n.studentmostrecentcontainertype.HomeroomLocalId = nil
  case "Parent1SchoolEducationLevel":
   n.studentmostrecentcontainertype.Parent1SchoolEducationLevel = nil
  case "OtherSchoolName":
   n.studentmostrecentcontainertype.OtherSchoolName = nil
  case "FFPOS":
   n.studentmostrecentcontainertype.FFPOS = nil
  case "TestLevel":
   n.studentmostrecentcontainertype.TestLevel = nil
  case "DistanceEducationStudent":
   n.studentmostrecentcontainertype.DistanceEducationStudent = nil
  case "Parent2NonSchoolEducation":
   n.studentmostrecentcontainertype.Parent2NonSchoolEducation = nil
  case "SchoolLocalId":
   n.studentmostrecentcontainertype.SchoolLocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentMostRecentContainerType")
        }
        return n
}

func (n *StudentMostRecentContainerType) SetProperty(key string, value interface{}) *StudentMostRecentContainerType {
        if n == nil {
                n, _ = StudentMostRecentContainerTypePointer(StudentMostRecentContainerType{})
        }
        switch key {
    case "LocalCampusId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.LocalCampusId = ((*LocalIdType)(v))
      }
    case "Parent1Language":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.Parent1Language = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
    case "Parent1EmploymentType":
        if !CodesetContains(AUCodeSetsEmploymentTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEmploymentTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.Parent1EmploymentType = ((*AUCodeSetsEmploymentTypeType)(v))
      }
    case "ReportingSchoolId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.ReportingSchoolId = ((*LocalIdType)(v))
      }
    case "OtherEnrollmentSchoolACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.OtherEnrollmentSchoolACARAId = ((*LocalIdType)(v))
      }
    case "BoardingStatus":
        if !CodesetContains(AUCodeSetsBoardingType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsBoardingType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.BoardingStatus = ((*AUCodeSetsBoardingType)(v))
      }
    case "FTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.studentmostrecentcontainertype.FTE = ((*Float)(v))
      }
    case "DisabilityLevelOfAdjustment":
    
    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.DisabilityLevelOfAdjustment = ((*String)(v))
      }
    case "SchoolACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.SchoolACARAId = ((*LocalIdType)(v))
      }
    case "CensusAge":
    
    if v, ok:= IntPointer(value); ok {
      n.studentmostrecentcontainertype.CensusAge = ((*Int)(v))
      }
    case "Parent2Language":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.Parent2Language = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
    case "YearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.studentmostrecentcontainertype.YearLevel = v
      }
    case "Parent2EmploymentType":
        if !CodesetContains(AUCodeSetsEmploymentTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEmploymentTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.Parent2EmploymentType = ((*AUCodeSetsEmploymentTypeType)(v))
      }
    case "Homegroup":
    
    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.Homegroup = ((*String)(v))
      }
    case "MembershipType":
        if !CodesetContains(AUCodeSetsSchoolEnrollmentTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolEnrollmentTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.MembershipType = ((*AUCodeSetsSchoolEnrollmentTypeType)(v))
      }
    case "Parent1NonSchoolEducation":
        if !CodesetContains(AUCodeSetsNonSchoolEducationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNonSchoolEducationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.Parent1NonSchoolEducation = ((*AUCodeSetsNonSchoolEducationType)(v))
      }
    case "DisabilityCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.DisabilityCategory = ((*String)(v))
      }
    case "Parent2SchoolEducationLevel":
        if !CodesetContains(AUCodeSetsSchoolEducationLevelTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolEducationLevelTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.Parent2SchoolEducationLevel = ((*AUCodeSetsSchoolEducationLevelTypeType)(v))
      }
    case "ClassCode":
    
    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.ClassCode = ((*String)(v))
      }
    case "HomeroomLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.HomeroomLocalId = ((*LocalIdType)(v))
      }
    case "Parent1SchoolEducationLevel":
        if !CodesetContains(AUCodeSetsSchoolEducationLevelTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolEducationLevelTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.Parent1SchoolEducationLevel = ((*AUCodeSetsSchoolEducationLevelTypeType)(v))
      }
    case "OtherSchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.OtherSchoolName = ((*String)(v))
      }
    case "FFPOS":
        if !CodesetContains(AUCodeSetsFFPOSStatusCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsFFPOSStatusCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.FFPOS = ((*AUCodeSetsFFPOSStatusCodeType)(v))
      }
    case "TestLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.studentmostrecentcontainertype.TestLevel = v
      }
    case "DistanceEducationStudent":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.DistanceEducationStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Parent2NonSchoolEducation":
        if !CodesetContains(AUCodeSetsNonSchoolEducationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNonSchoolEducationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.Parent2NonSchoolEducation = ((*AUCodeSetsNonSchoolEducationType)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentmostrecentcontainertype.SchoolLocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentMostRecentContainerType")
        }
        return n
}

  func (s *StudentMostRecentContainerType) LocalCampusId() *LocalIdType {
    if s.studentmostrecentcontainertype.LocalCampusId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.LocalCampusId = ((*LocalIdType)(v))
      }
      }
      return s.studentmostrecentcontainertype.LocalCampusId
    }
  func (s *StudentMostRecentContainerType) LocalCampusId_IsNil() bool {
    return s.LocalCampusId == nil || s.studentmostrecentcontainertype.LocalCampusId == nil
    }
  func (s *StudentMostRecentContainerType) Parent1Language() *AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType {
    if s.studentmostrecentcontainertype.Parent1Language == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.Parent1Language = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
      }
      return s.studentmostrecentcontainertype.Parent1Language
    }
  func (s *StudentMostRecentContainerType) Parent1Language_IsNil() bool {
    return s.Parent1Language == nil || s.studentmostrecentcontainertype.Parent1Language == nil
    }
  func (s *StudentMostRecentContainerType) Parent1EmploymentType() *AUCodeSetsEmploymentTypeType {
    if s.studentmostrecentcontainertype.Parent1EmploymentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.Parent1EmploymentType = ((*AUCodeSetsEmploymentTypeType)(v))
      }
      }
      return s.studentmostrecentcontainertype.Parent1EmploymentType
    }
  func (s *StudentMostRecentContainerType) Parent1EmploymentType_IsNil() bool {
    return s.Parent1EmploymentType == nil || s.studentmostrecentcontainertype.Parent1EmploymentType == nil
    }
  func (s *StudentMostRecentContainerType) ReportingSchoolId() *LocalIdType {
    if s.studentmostrecentcontainertype.ReportingSchoolId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.ReportingSchoolId = ((*LocalIdType)(v))
      }
      }
      return s.studentmostrecentcontainertype.ReportingSchoolId
    }
  func (s *StudentMostRecentContainerType) ReportingSchoolId_IsNil() bool {
    return s.ReportingSchoolId == nil || s.studentmostrecentcontainertype.ReportingSchoolId == nil
    }
  func (s *StudentMostRecentContainerType) OtherEnrollmentSchoolACARAId() *LocalIdType {
    if s.studentmostrecentcontainertype.OtherEnrollmentSchoolACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.OtherEnrollmentSchoolACARAId = ((*LocalIdType)(v))
      }
      }
      return s.studentmostrecentcontainertype.OtherEnrollmentSchoolACARAId
    }
  func (s *StudentMostRecentContainerType) OtherEnrollmentSchoolACARAId_IsNil() bool {
    return s.OtherEnrollmentSchoolACARAId == nil || s.studentmostrecentcontainertype.OtherEnrollmentSchoolACARAId == nil
    }
  func (s *StudentMostRecentContainerType) BoardingStatus() *AUCodeSetsBoardingType {
    if s.studentmostrecentcontainertype.BoardingStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.BoardingStatus = ((*AUCodeSetsBoardingType)(v))
      }
      }
      return s.studentmostrecentcontainertype.BoardingStatus
    }
  func (s *StudentMostRecentContainerType) BoardingStatus_IsNil() bool {
    return s.BoardingStatus == nil || s.studentmostrecentcontainertype.BoardingStatus == nil
    }
  func (s *StudentMostRecentContainerType) FTE() *Float {
    if s.studentmostrecentcontainertype.FTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.studentmostrecentcontainertype.FTE = ((*Float)(v))
      }
      }
      return s.studentmostrecentcontainertype.FTE
    }
  func (s *StudentMostRecentContainerType) FTE_IsNil() bool {
    return s.FTE == nil || s.studentmostrecentcontainertype.FTE == nil
    }
  func (s *StudentMostRecentContainerType) DisabilityLevelOfAdjustment() *String {
    if s.studentmostrecentcontainertype.DisabilityLevelOfAdjustment == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.DisabilityLevelOfAdjustment = ((*String)(v))
      }
      }
      return s.studentmostrecentcontainertype.DisabilityLevelOfAdjustment
    }
  func (s *StudentMostRecentContainerType) DisabilityLevelOfAdjustment_IsNil() bool {
    return s.DisabilityLevelOfAdjustment == nil || s.studentmostrecentcontainertype.DisabilityLevelOfAdjustment == nil
    }
  func (s *StudentMostRecentContainerType) SchoolACARAId() *LocalIdType {
    if s.studentmostrecentcontainertype.SchoolACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.SchoolACARAId = ((*LocalIdType)(v))
      }
      }
      return s.studentmostrecentcontainertype.SchoolACARAId
    }
  func (s *StudentMostRecentContainerType) SchoolACARAId_IsNil() bool {
    return s.SchoolACARAId == nil || s.studentmostrecentcontainertype.SchoolACARAId == nil
    }
  func (s *StudentMostRecentContainerType) CensusAge() *Int {
    if s.studentmostrecentcontainertype.CensusAge == nil {
    if v, ok:= IntPointer(0); ok {
      s.studentmostrecentcontainertype.CensusAge = ((*Int)(v))
      }
      }
      return s.studentmostrecentcontainertype.CensusAge
    }
  func (s *StudentMostRecentContainerType) CensusAge_IsNil() bool {
    return s.CensusAge == nil || s.studentmostrecentcontainertype.CensusAge == nil
    }
  func (s *StudentMostRecentContainerType) Parent2Language() *AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType {
    if s.studentmostrecentcontainertype.Parent2Language == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.Parent2Language = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
      }
      return s.studentmostrecentcontainertype.Parent2Language
    }
  func (s *StudentMostRecentContainerType) Parent2Language_IsNil() bool {
    return s.Parent2Language == nil || s.studentmostrecentcontainertype.Parent2Language == nil
    }
  func (s *StudentMostRecentContainerType) YearLevel() *YearLevelType {
    if s.studentmostrecentcontainertype.YearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.studentmostrecentcontainertype.YearLevel = v
      }
      }
      return s.studentmostrecentcontainertype.YearLevel
    }
  func (s *StudentMostRecentContainerType) YearLevel_IsNil() bool {
    return s.YearLevel == nil || s.studentmostrecentcontainertype.YearLevel == nil
    }
  func (s *StudentMostRecentContainerType) Parent2EmploymentType() *AUCodeSetsEmploymentTypeType {
    if s.studentmostrecentcontainertype.Parent2EmploymentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.Parent2EmploymentType = ((*AUCodeSetsEmploymentTypeType)(v))
      }
      }
      return s.studentmostrecentcontainertype.Parent2EmploymentType
    }
  func (s *StudentMostRecentContainerType) Parent2EmploymentType_IsNil() bool {
    return s.Parent2EmploymentType == nil || s.studentmostrecentcontainertype.Parent2EmploymentType == nil
    }
  func (s *StudentMostRecentContainerType) Homegroup() *String {
    if s.studentmostrecentcontainertype.Homegroup == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.Homegroup = ((*String)(v))
      }
      }
      return s.studentmostrecentcontainertype.Homegroup
    }
  func (s *StudentMostRecentContainerType) Homegroup_IsNil() bool {
    return s.Homegroup == nil || s.studentmostrecentcontainertype.Homegroup == nil
    }
  func (s *StudentMostRecentContainerType) MembershipType() *AUCodeSetsSchoolEnrollmentTypeType {
    if s.studentmostrecentcontainertype.MembershipType == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.MembershipType = ((*AUCodeSetsSchoolEnrollmentTypeType)(v))
      }
      }
      return s.studentmostrecentcontainertype.MembershipType
    }
  func (s *StudentMostRecentContainerType) MembershipType_IsNil() bool {
    return s.MembershipType == nil || s.studentmostrecentcontainertype.MembershipType == nil
    }
  func (s *StudentMostRecentContainerType) Parent1NonSchoolEducation() *AUCodeSetsNonSchoolEducationType {
    if s.studentmostrecentcontainertype.Parent1NonSchoolEducation == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.Parent1NonSchoolEducation = ((*AUCodeSetsNonSchoolEducationType)(v))
      }
      }
      return s.studentmostrecentcontainertype.Parent1NonSchoolEducation
    }
  func (s *StudentMostRecentContainerType) Parent1NonSchoolEducation_IsNil() bool {
    return s.Parent1NonSchoolEducation == nil || s.studentmostrecentcontainertype.Parent1NonSchoolEducation == nil
    }
  func (s *StudentMostRecentContainerType) DisabilityCategory() *String {
    if s.studentmostrecentcontainertype.DisabilityCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.DisabilityCategory = ((*String)(v))
      }
      }
      return s.studentmostrecentcontainertype.DisabilityCategory
    }
  func (s *StudentMostRecentContainerType) DisabilityCategory_IsNil() bool {
    return s.DisabilityCategory == nil || s.studentmostrecentcontainertype.DisabilityCategory == nil
    }
  func (s *StudentMostRecentContainerType) Parent2SchoolEducationLevel() *AUCodeSetsSchoolEducationLevelTypeType {
    if s.studentmostrecentcontainertype.Parent2SchoolEducationLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.Parent2SchoolEducationLevel = ((*AUCodeSetsSchoolEducationLevelTypeType)(v))
      }
      }
      return s.studentmostrecentcontainertype.Parent2SchoolEducationLevel
    }
  func (s *StudentMostRecentContainerType) Parent2SchoolEducationLevel_IsNil() bool {
    return s.Parent2SchoolEducationLevel == nil || s.studentmostrecentcontainertype.Parent2SchoolEducationLevel == nil
    }
  func (s *StudentMostRecentContainerType) ClassCode() *String {
    if s.studentmostrecentcontainertype.ClassCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.ClassCode = ((*String)(v))
      }
      }
      return s.studentmostrecentcontainertype.ClassCode
    }
  func (s *StudentMostRecentContainerType) ClassCode_IsNil() bool {
    return s.ClassCode == nil || s.studentmostrecentcontainertype.ClassCode == nil
    }
  func (s *StudentMostRecentContainerType) HomeroomLocalId() *LocalIdType {
    if s.studentmostrecentcontainertype.HomeroomLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.HomeroomLocalId = ((*LocalIdType)(v))
      }
      }
      return s.studentmostrecentcontainertype.HomeroomLocalId
    }
  func (s *StudentMostRecentContainerType) HomeroomLocalId_IsNil() bool {
    return s.HomeroomLocalId == nil || s.studentmostrecentcontainertype.HomeroomLocalId == nil
    }
  func (s *StudentMostRecentContainerType) Parent1SchoolEducationLevel() *AUCodeSetsSchoolEducationLevelTypeType {
    if s.studentmostrecentcontainertype.Parent1SchoolEducationLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.Parent1SchoolEducationLevel = ((*AUCodeSetsSchoolEducationLevelTypeType)(v))
      }
      }
      return s.studentmostrecentcontainertype.Parent1SchoolEducationLevel
    }
  func (s *StudentMostRecentContainerType) Parent1SchoolEducationLevel_IsNil() bool {
    return s.Parent1SchoolEducationLevel == nil || s.studentmostrecentcontainertype.Parent1SchoolEducationLevel == nil
    }
  func (s *StudentMostRecentContainerType) OtherSchoolName() *String {
    if s.studentmostrecentcontainertype.OtherSchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.OtherSchoolName = ((*String)(v))
      }
      }
      return s.studentmostrecentcontainertype.OtherSchoolName
    }
  func (s *StudentMostRecentContainerType) OtherSchoolName_IsNil() bool {
    return s.OtherSchoolName == nil || s.studentmostrecentcontainertype.OtherSchoolName == nil
    }
  func (s *StudentMostRecentContainerType) FFPOS() *AUCodeSetsFFPOSStatusCodeType {
    if s.studentmostrecentcontainertype.FFPOS == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.FFPOS = ((*AUCodeSetsFFPOSStatusCodeType)(v))
      }
      }
      return s.studentmostrecentcontainertype.FFPOS
    }
  func (s *StudentMostRecentContainerType) FFPOS_IsNil() bool {
    return s.FFPOS == nil || s.studentmostrecentcontainertype.FFPOS == nil
    }
  func (s *StudentMostRecentContainerType) TestLevel() *YearLevelType {
    if s.studentmostrecentcontainertype.TestLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.studentmostrecentcontainertype.TestLevel = v
      }
      }
      return s.studentmostrecentcontainertype.TestLevel
    }
  func (s *StudentMostRecentContainerType) TestLevel_IsNil() bool {
    return s.TestLevel == nil || s.studentmostrecentcontainertype.TestLevel == nil
    }
  func (s *StudentMostRecentContainerType) DistanceEducationStudent() *AUCodeSetsYesOrNoCategoryType {
    if s.studentmostrecentcontainertype.DistanceEducationStudent == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.DistanceEducationStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentmostrecentcontainertype.DistanceEducationStudent
    }
  func (s *StudentMostRecentContainerType) DistanceEducationStudent_IsNil() bool {
    return s.DistanceEducationStudent == nil || s.studentmostrecentcontainertype.DistanceEducationStudent == nil
    }
  func (s *StudentMostRecentContainerType) Parent2NonSchoolEducation() *AUCodeSetsNonSchoolEducationType {
    if s.studentmostrecentcontainertype.Parent2NonSchoolEducation == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.Parent2NonSchoolEducation = ((*AUCodeSetsNonSchoolEducationType)(v))
      }
      }
      return s.studentmostrecentcontainertype.Parent2NonSchoolEducation
    }
  func (s *StudentMostRecentContainerType) Parent2NonSchoolEducation_IsNil() bool {
    return s.Parent2NonSchoolEducation == nil || s.studentmostrecentcontainertype.Parent2NonSchoolEducation == nil
    }
  func (s *StudentMostRecentContainerType) SchoolLocalId() *LocalIdType {
    if s.studentmostrecentcontainertype.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentmostrecentcontainertype.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.studentmostrecentcontainertype.SchoolLocalId
    }
  func (s *StudentMostRecentContainerType) SchoolLocalId_IsNil() bool {
    return s.SchoolLocalId == nil || s.studentmostrecentcontainertype.SchoolLocalId == nil
    }

func (n *GradeType) Unset(key string) *GradeType {
        switch key {
  case "Narrative":
   n.gradetype.Narrative = nil
  case "Percentage":
   n.gradetype.Percentage = nil
  case "Numeric":
   n.gradetype.Numeric = nil
  case "MarkInfoRefId":
   n.gradetype.MarkInfoRefId = nil
  case "Letter":
   n.gradetype.Letter = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GradeType")
        }
        return n
}

func (n *GradeType) SetProperty(key string, value interface{}) *GradeType {
        if n == nil {
                n, _ = GradeTypePointer(GradeType{})
        }
        switch key {
    case "Narrative":
    
    if v, ok:= StringPointer(value); ok {
      n.gradetype.Narrative = ((*String)(v))
      }
    case "Percentage":
    
    if v, ok:= FloatPointer(value); ok {
      n.gradetype.Percentage = ((*Float)(v))
      }
    case "Numeric":
    
    if v, ok:= FloatPointer(value); ok {
      n.gradetype.Numeric = ((*Float)(v))
      }
    case "MarkInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.gradetype.MarkInfoRefId = ((*String)(v))
      }
    case "Letter":
    
    if v, ok:= StringPointer(value); ok {
      n.gradetype.Letter = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GradeType")
        }
        return n
}

  func (s *GradeType) Narrative() *String {
    if s.gradetype.Narrative == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradetype.Narrative = ((*String)(v))
      }
      }
      return s.gradetype.Narrative
    }
  func (s *GradeType) Narrative_IsNil() bool {
    return s.Narrative == nil || s.gradetype.Narrative == nil
    }
  func (s *GradeType) Percentage() *Float {
    if s.gradetype.Percentage == nil {
    if v, ok:= FloatPointer(0); ok {
      s.gradetype.Percentage = ((*Float)(v))
      }
      }
      return s.gradetype.Percentage
    }
  func (s *GradeType) Percentage_IsNil() bool {
    return s.Percentage == nil || s.gradetype.Percentage == nil
    }
  func (s *GradeType) Numeric() *Float {
    if s.gradetype.Numeric == nil {
    if v, ok:= FloatPointer(0); ok {
      s.gradetype.Numeric = ((*Float)(v))
      }
      }
      return s.gradetype.Numeric
    }
  func (s *GradeType) Numeric_IsNil() bool {
    return s.Numeric == nil || s.gradetype.Numeric == nil
    }
  func (s *GradeType) MarkInfoRefId() *String {
    if s.gradetype.MarkInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradetype.MarkInfoRefId = ((*String)(v))
      }
      }
      return s.gradetype.MarkInfoRefId
    }
  func (s *GradeType) MarkInfoRefId_IsNil() bool {
    return s.MarkInfoRefId == nil || s.gradetype.MarkInfoRefId == nil
    }
  func (s *GradeType) Letter() *String {
    if s.gradetype.Letter == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradetype.Letter = ((*String)(v))
      }
      }
      return s.gradetype.Letter
    }
  func (s *GradeType) Letter_IsNil() bool {
    return s.Letter == nil || s.gradetype.Letter == nil
    }

func (n *AGContextualQuestionType) Unset(key string) *AGContextualQuestionType {
        switch key {
  case "AGContextCode":
   n.agcontextualquestiontype.AGContextCode = nil
  case "AGAnswer":
   n.agcontextualquestiontype.AGAnswer = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGContextualQuestionType")
        }
        return n
}

func (n *AGContextualQuestionType) SetProperty(key string, value interface{}) *AGContextualQuestionType {
        if n == nil {
                n, _ = AGContextualQuestionTypePointer(AGContextualQuestionType{})
        }
        switch key {
    case "AGContextCode":
        if !CodesetContains(AUCodeSetsAGContextQuestionType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAGContextQuestionType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.agcontextualquestiontype.AGContextCode = ((*AUCodeSetsAGContextQuestionType)(v))
      }
    case "AGAnswer":
    
    if v, ok:= StringPointer(value); ok {
      n.agcontextualquestiontype.AGAnswer = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGContextualQuestionType")
        }
        return n
}

  func (s *AGContextualQuestionType) AGContextCode() *AUCodeSetsAGContextQuestionType {
    if s.agcontextualquestiontype.AGContextCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.agcontextualquestiontype.AGContextCode = ((*AUCodeSetsAGContextQuestionType)(v))
      }
      }
      return s.agcontextualquestiontype.AGContextCode
    }
  func (s *AGContextualQuestionType) AGContextCode_IsNil() bool {
    return s.AGContextCode == nil || s.agcontextualquestiontype.AGContextCode == nil
    }
  func (s *AGContextualQuestionType) AGAnswer() *String {
    if s.agcontextualquestiontype.AGAnswer == nil {
    if v, ok:= StringPointer(""); ok {
      s.agcontextualquestiontype.AGAnswer = ((*String)(v))
      }
      }
      return s.agcontextualquestiontype.AGAnswer
    }
  func (s *AGContextualQuestionType) AGAnswer_IsNil() bool {
    return s.AGAnswer == nil || s.agcontextualquestiontype.AGAnswer == nil
    }

func (n *JournalAdjustmentType) Unset(key string) *JournalAdjustmentType {
        switch key {
  case "DebitFinancialAccountRefId":
   n.journaladjustmenttype.DebitFinancialAccountRefId = nil
  case "GSTCodeReplacement":
   n.journaladjustmenttype.GSTCodeReplacement = nil
  case "LineAdjustmentAmount":
   n.journaladjustmenttype.LineAdjustmentAmount = nil
  case "GSTCodeOriginal":
   n.journaladjustmenttype.GSTCodeOriginal = nil
  case "CreditFinancialAccountRefId":
   n.journaladjustmenttype.CreditFinancialAccountRefId = nil
  case "DebitAccountCode":
   n.journaladjustmenttype.DebitAccountCode = nil
  case "CreditAccountCode":
   n.journaladjustmenttype.CreditAccountCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "JournalAdjustmentType")
        }
        return n
}

func (n *JournalAdjustmentType) SetProperty(key string, value interface{}) *JournalAdjustmentType {
        if n == nil {
                n, _ = JournalAdjustmentTypePointer(JournalAdjustmentType{})
        }
        switch key {
    case "DebitFinancialAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.journaladjustmenttype.DebitFinancialAccountRefId = ((*String)(v))
      }
    case "GSTCodeReplacement":
    
    if v, ok:= StringPointer(value); ok {
      n.journaladjustmenttype.GSTCodeReplacement = ((*String)(v))
      }
    case "LineAdjustmentAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.journaladjustmenttype.LineAdjustmentAmount = v
      }
    case "GSTCodeOriginal":
    
    if v, ok:= StringPointer(value); ok {
      n.journaladjustmenttype.GSTCodeOriginal = ((*String)(v))
      }
    case "CreditFinancialAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.journaladjustmenttype.CreditFinancialAccountRefId = ((*String)(v))
      }
    case "DebitAccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.journaladjustmenttype.DebitAccountCode = ((*String)(v))
      }
    case "CreditAccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.journaladjustmenttype.CreditAccountCode = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "JournalAdjustmentType")
        }
        return n
}

  func (s *JournalAdjustmentType) DebitFinancialAccountRefId() *String {
    if s.journaladjustmenttype.DebitFinancialAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.journaladjustmenttype.DebitFinancialAccountRefId = ((*String)(v))
      }
      }
      return s.journaladjustmenttype.DebitFinancialAccountRefId
    }
  func (s *JournalAdjustmentType) DebitFinancialAccountRefId_IsNil() bool {
    return s.DebitFinancialAccountRefId == nil || s.journaladjustmenttype.DebitFinancialAccountRefId == nil
    }
  func (s *JournalAdjustmentType) GSTCodeReplacement() *String {
    if s.journaladjustmenttype.GSTCodeReplacement == nil {
    if v, ok:= StringPointer(""); ok {
      s.journaladjustmenttype.GSTCodeReplacement = ((*String)(v))
      }
      }
      return s.journaladjustmenttype.GSTCodeReplacement
    }
  func (s *JournalAdjustmentType) GSTCodeReplacement_IsNil() bool {
    return s.GSTCodeReplacement == nil || s.journaladjustmenttype.GSTCodeReplacement == nil
    }
  func (s *JournalAdjustmentType) LineAdjustmentAmount() *MonetaryAmountType {
    if s.journaladjustmenttype.LineAdjustmentAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.journaladjustmenttype.LineAdjustmentAmount = v
      }
      }
      return s.journaladjustmenttype.LineAdjustmentAmount
    }
  func (s *JournalAdjustmentType) LineAdjustmentAmount_IsNil() bool {
    return s.LineAdjustmentAmount == nil || s.journaladjustmenttype.LineAdjustmentAmount == nil
    }
  func (s *JournalAdjustmentType) GSTCodeOriginal() *String {
    if s.journaladjustmenttype.GSTCodeOriginal == nil {
    if v, ok:= StringPointer(""); ok {
      s.journaladjustmenttype.GSTCodeOriginal = ((*String)(v))
      }
      }
      return s.journaladjustmenttype.GSTCodeOriginal
    }
  func (s *JournalAdjustmentType) GSTCodeOriginal_IsNil() bool {
    return s.GSTCodeOriginal == nil || s.journaladjustmenttype.GSTCodeOriginal == nil
    }
  func (s *JournalAdjustmentType) CreditFinancialAccountRefId() *String {
    if s.journaladjustmenttype.CreditFinancialAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.journaladjustmenttype.CreditFinancialAccountRefId = ((*String)(v))
      }
      }
      return s.journaladjustmenttype.CreditFinancialAccountRefId
    }
  func (s *JournalAdjustmentType) CreditFinancialAccountRefId_IsNil() bool {
    return s.CreditFinancialAccountRefId == nil || s.journaladjustmenttype.CreditFinancialAccountRefId == nil
    }
  func (s *JournalAdjustmentType) DebitAccountCode() *String {
    if s.journaladjustmenttype.DebitAccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.journaladjustmenttype.DebitAccountCode = ((*String)(v))
      }
      }
      return s.journaladjustmenttype.DebitAccountCode
    }
  func (s *JournalAdjustmentType) DebitAccountCode_IsNil() bool {
    return s.DebitAccountCode == nil || s.journaladjustmenttype.DebitAccountCode == nil
    }
  func (s *JournalAdjustmentType) CreditAccountCode() *String {
    if s.journaladjustmenttype.CreditAccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.journaladjustmenttype.CreditAccountCode = ((*String)(v))
      }
      }
      return s.journaladjustmenttype.CreditAccountCode
    }
  func (s *JournalAdjustmentType) CreditAccountCode_IsNil() bool {
    return s.CreditAccountCode == nil || s.journaladjustmenttype.CreditAccountCode == nil
    }

func (n *StandardHierarchyLevelType) Unset(key string) *StandardHierarchyLevelType {
        switch key {
  case "Number":
   n.standardhierarchyleveltype.Number = nil
  case "Description":
   n.standardhierarchyleveltype.Description = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StandardHierarchyLevelType")
        }
        return n
}

func (n *StandardHierarchyLevelType) SetProperty(key string, value interface{}) *StandardHierarchyLevelType {
        if n == nil {
                n, _ = StandardHierarchyLevelTypePointer(StandardHierarchyLevelType{})
        }
        switch key {
    case "Number":
    
    if v, ok:= IntPointer(value); ok {
      n.standardhierarchyleveltype.Number = ((*Int)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.standardhierarchyleveltype.Description = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StandardHierarchyLevelType")
        }
        return n
}

  func (s *StandardHierarchyLevelType) Number() *Int {
    if s.standardhierarchyleveltype.Number == nil {
    if v, ok:= IntPointer(0); ok {
      s.standardhierarchyleveltype.Number = ((*Int)(v))
      }
      }
      return s.standardhierarchyleveltype.Number
    }
  func (s *StandardHierarchyLevelType) Number_IsNil() bool {
    return s.Number == nil || s.standardhierarchyleveltype.Number == nil
    }
  func (s *StandardHierarchyLevelType) Description() *String {
    if s.standardhierarchyleveltype.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.standardhierarchyleveltype.Description = ((*String)(v))
      }
      }
      return s.standardhierarchyleveltype.Description
    }
  func (s *StandardHierarchyLevelType) Description_IsNil() bool {
    return s.Description == nil || s.standardhierarchyleveltype.Description == nil
    }

func (n *SessionInfo) Unset(key string) *SessionInfo {
        switch key {
  case "SchoolInfoRefId":
   n.sessioninfo.SchoolInfoRefId = nil
  case "PeriodId":
   n.sessioninfo.PeriodId = nil
  case "RoomNumber":
   n.sessioninfo.RoomNumber = nil
  case "LocalCodeList":
   n.sessioninfo.LocalCodeList = nil
  case "TimeTableCellRefId":
   n.sessioninfo.TimeTableCellRefId = nil
  case "SIF_ExtendedElements":
   n.sessioninfo.SIF_ExtendedElements = nil
  case "SchoolYear":
   n.sessioninfo.SchoolYear = nil
  case "DayId":
   n.sessioninfo.DayId = nil
  case "SIF_Metadata":
   n.sessioninfo.SIF_Metadata = nil
  case "StaffPersonalLocalId":
   n.sessioninfo.StaffPersonalLocalId = nil
  case "FinishTime":
   n.sessioninfo.FinishTime = nil
  case "SchoolLocalId":
   n.sessioninfo.SchoolLocalId = nil
  case "SessionDate":
   n.sessioninfo.SessionDate = nil
  case "StartTime":
   n.sessioninfo.StartTime = nil
  case "TimeTableSubjectLocalId":
   n.sessioninfo.TimeTableSubjectLocalId = nil
  case "LocalId":
   n.sessioninfo.LocalId = nil
  case "TeachingGroupLocalId":
   n.sessioninfo.TeachingGroupLocalId = nil
  case "RefId":
   n.sessioninfo.RefId = nil
  case "RollMarked":
   n.sessioninfo.RollMarked = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SessionInfo")
        }
        return n
}

func (n *SessionInfo) SetProperty(key string, value interface{}) *SessionInfo {
        if n == nil {
                n, _ = SessionInfoPointer(SessionInfo{})
        }
        switch key {
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.SchoolInfoRefId = ((*String)(v))
      }
    case "PeriodId":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.PeriodId = ((*LocalIdType)(v))
      }
    case "RoomNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.RoomNumber = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.sessioninfo.LocalCodeList = v
      }
    case "TimeTableCellRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.TimeTableCellRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.sessioninfo.SIF_ExtendedElements = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.SchoolYear = ((*SchoolYearType)(v))
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.DayId = ((*LocalIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.sessioninfo.SIF_Metadata = v
      }
    case "StaffPersonalLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.StaffPersonalLocalId = ((*LocalIdType)(v))
      }
    case "FinishTime":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.FinishTime = ((*String)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "SessionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.SessionDate = ((*String)(v))
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.StartTime = ((*String)(v))
      }
    case "TimeTableSubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.TimeTableSubjectLocalId = ((*LocalIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.LocalId = ((*LocalIdType)(v))
      }
    case "TeachingGroupLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.TeachingGroupLocalId = ((*LocalIdType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.RefId = ((*RefIdType)(v))
      }
    case "RollMarked":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.sessioninfo.RollMarked = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SessionInfo")
        }
        return n
}

  func (s *SessionInfo) SchoolInfoRefId() *String {
    if s.sessioninfo.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.sessioninfo.SchoolInfoRefId
    }
  func (s *SessionInfo) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.sessioninfo.SchoolInfoRefId == nil
    }
  func (s *SessionInfo) PeriodId() *LocalIdType {
    if s.sessioninfo.PeriodId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.PeriodId = ((*LocalIdType)(v))
      }
      }
      return s.sessioninfo.PeriodId
    }
  func (s *SessionInfo) PeriodId_IsNil() bool {
    return s.PeriodId == nil || s.sessioninfo.PeriodId == nil
    }
  func (s *SessionInfo) RoomNumber() *String {
    if s.sessioninfo.RoomNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.RoomNumber = ((*String)(v))
      }
      }
      return s.sessioninfo.RoomNumber
    }
  func (s *SessionInfo) RoomNumber_IsNil() bool {
    return s.RoomNumber == nil || s.sessioninfo.RoomNumber == nil
    }
  func (s *SessionInfo) LocalCodeList() *LocalCodeListType {
    if s.sessioninfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.sessioninfo.LocalCodeList = v
      }
      }
      return s.sessioninfo.LocalCodeList
    }
  func (s *SessionInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.sessioninfo.LocalCodeList == nil
    }
  func (s *SessionInfo) TimeTableCellRefId() *String {
    if s.sessioninfo.TimeTableCellRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.TimeTableCellRefId = ((*String)(v))
      }
      }
      return s.sessioninfo.TimeTableCellRefId
    }
  func (s *SessionInfo) TimeTableCellRefId_IsNil() bool {
    return s.TimeTableCellRefId == nil || s.sessioninfo.TimeTableCellRefId == nil
    }
  func (s *SessionInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.sessioninfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.sessioninfo.SIF_ExtendedElements = v
      }
      }
      return s.sessioninfo.SIF_ExtendedElements
    }
  func (s *SessionInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.sessioninfo.SIF_ExtendedElements == nil
    }
  func (s *SessionInfo) SchoolYear() *SchoolYearType {
    if s.sessioninfo.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.sessioninfo.SchoolYear
    }
  func (s *SessionInfo) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.sessioninfo.SchoolYear == nil
    }
  func (s *SessionInfo) DayId() *LocalIdType {
    if s.sessioninfo.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.DayId = ((*LocalIdType)(v))
      }
      }
      return s.sessioninfo.DayId
    }
  func (s *SessionInfo) DayId_IsNil() bool {
    return s.DayId == nil || s.sessioninfo.DayId == nil
    }
  func (s *SessionInfo) SIF_Metadata() *SIF_MetadataType {
    if s.sessioninfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.sessioninfo.SIF_Metadata = v
      }
      }
      return s.sessioninfo.SIF_Metadata
    }
  func (s *SessionInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.sessioninfo.SIF_Metadata == nil
    }
  func (s *SessionInfo) StaffPersonalLocalId() *LocalIdType {
    if s.sessioninfo.StaffPersonalLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.StaffPersonalLocalId = ((*LocalIdType)(v))
      }
      }
      return s.sessioninfo.StaffPersonalLocalId
    }
  func (s *SessionInfo) StaffPersonalLocalId_IsNil() bool {
    return s.StaffPersonalLocalId == nil || s.sessioninfo.StaffPersonalLocalId == nil
    }
  func (s *SessionInfo) FinishTime() *String {
    if s.sessioninfo.FinishTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.FinishTime = ((*String)(v))
      }
      }
      return s.sessioninfo.FinishTime
    }
  func (s *SessionInfo) FinishTime_IsNil() bool {
    return s.FinishTime == nil || s.sessioninfo.FinishTime == nil
    }
  func (s *SessionInfo) SchoolLocalId() *LocalIdType {
    if s.sessioninfo.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.sessioninfo.SchoolLocalId
    }
  func (s *SessionInfo) SchoolLocalId_IsNil() bool {
    return s.SchoolLocalId == nil || s.sessioninfo.SchoolLocalId == nil
    }
  func (s *SessionInfo) SessionDate() *String {
    if s.sessioninfo.SessionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.SessionDate = ((*String)(v))
      }
      }
      return s.sessioninfo.SessionDate
    }
  func (s *SessionInfo) SessionDate_IsNil() bool {
    return s.SessionDate == nil || s.sessioninfo.SessionDate == nil
    }
  func (s *SessionInfo) StartTime() *String {
    if s.sessioninfo.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.StartTime = ((*String)(v))
      }
      }
      return s.sessioninfo.StartTime
    }
  func (s *SessionInfo) StartTime_IsNil() bool {
    return s.StartTime == nil || s.sessioninfo.StartTime == nil
    }
  func (s *SessionInfo) TimeTableSubjectLocalId() *LocalIdType {
    if s.sessioninfo.TimeTableSubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.TimeTableSubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.sessioninfo.TimeTableSubjectLocalId
    }
  func (s *SessionInfo) TimeTableSubjectLocalId_IsNil() bool {
    return s.TimeTableSubjectLocalId == nil || s.sessioninfo.TimeTableSubjectLocalId == nil
    }
  func (s *SessionInfo) LocalId() *LocalIdType {
    if s.sessioninfo.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.sessioninfo.LocalId
    }
  func (s *SessionInfo) LocalId_IsNil() bool {
    return s.LocalId == nil || s.sessioninfo.LocalId == nil
    }
  func (s *SessionInfo) TeachingGroupLocalId() *LocalIdType {
    if s.sessioninfo.TeachingGroupLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.TeachingGroupLocalId = ((*LocalIdType)(v))
      }
      }
      return s.sessioninfo.TeachingGroupLocalId
    }
  func (s *SessionInfo) TeachingGroupLocalId_IsNil() bool {
    return s.TeachingGroupLocalId == nil || s.sessioninfo.TeachingGroupLocalId == nil
    }
  func (s *SessionInfo) RefId() *RefIdType {
    if s.sessioninfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.sessioninfo.RefId
    }
  func (s *SessionInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.sessioninfo.RefId == nil
    }
  func (s *SessionInfo) RollMarked() *AUCodeSetsYesOrNoCategoryType {
    if s.sessioninfo.RollMarked == nil {
    if v, ok:= StringPointer(""); ok {
      s.sessioninfo.RollMarked = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.sessioninfo.RollMarked
    }
  func (s *SessionInfo) RollMarked_IsNil() bool {
    return s.RollMarked == nil || s.sessioninfo.RollMarked == nil
    }

func (n *TimeTableSubject) Unset(key string) *TimeTableSubject {
        switch key {
  case "SubjectLongName":
   n.timetablesubject.SubjectLongName = nil
  case "OtherCodeList":
   n.timetablesubject.OtherCodeList = nil
  case "AcademicYearRange":
   n.timetablesubject.AcademicYearRange = nil
  case "SubjectShortName":
   n.timetablesubject.SubjectShortName = nil
  case "LocalCodeList":
   n.timetablesubject.LocalCodeList = nil
  case "SchoolYear":
   n.timetablesubject.SchoolYear = nil
  case "SIF_ExtendedElements":
   n.timetablesubject.SIF_ExtendedElements = nil
  case "Semester":
   n.timetablesubject.Semester = nil
  case "SchoolInfoRefId":
   n.timetablesubject.SchoolInfoRefId = nil
  case "Faculty":
   n.timetablesubject.Faculty = nil
  case "RefId":
   n.timetablesubject.RefId = nil
  case "AcademicYear":
   n.timetablesubject.AcademicYear = nil
  case "SubjectType":
   n.timetablesubject.SubjectType = nil
  case "SIF_Metadata":
   n.timetablesubject.SIF_Metadata = nil
  case "SubjectLocalId":
   n.timetablesubject.SubjectLocalId = nil
  case "SchoolLocalId":
   n.timetablesubject.SchoolLocalId = nil
  case "CourseLocalId":
   n.timetablesubject.CourseLocalId = nil
  case "ProposedMaxClassSize":
   n.timetablesubject.ProposedMaxClassSize = nil
  case "SchoolCourseInfoRefId":
   n.timetablesubject.SchoolCourseInfoRefId = nil
  case "ProposedMinClassSize":
   n.timetablesubject.ProposedMinClassSize = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableSubject")
        }
        return n
}

func (n *TimeTableSubject) SetProperty(key string, value interface{}) *TimeTableSubject {
        if n == nil {
                n, _ = TimeTableSubjectPointer(TimeTableSubject{})
        }
        switch key {
    case "SubjectLongName":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablesubject.SubjectLongName = ((*String)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.timetablesubject.OtherCodeList = v
      }
    case "AcademicYearRange":
    if v, ok:= YearRangeTypePointer(value); ok {
      n.timetablesubject.AcademicYearRange = v
      }
    case "SubjectShortName":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablesubject.SubjectShortName = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.timetablesubject.LocalCodeList = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablesubject.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.timetablesubject.SIF_ExtendedElements = v
      }
    case "Semester":
    
    if v, ok:= IntPointer(value); ok {
      n.timetablesubject.Semester = ((*Int)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablesubject.SchoolInfoRefId = ((*String)(v))
      }
    case "Faculty":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablesubject.Faculty = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablesubject.RefId = ((*RefIdType)(v))
      }
    case "AcademicYear":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.timetablesubject.AcademicYear = v
      }
    case "SubjectType":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablesubject.SubjectType = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.timetablesubject.SIF_Metadata = v
      }
    case "SubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablesubject.SubjectLocalId = ((*LocalIdType)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablesubject.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "CourseLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablesubject.CourseLocalId = ((*LocalIdType)(v))
      }
    case "ProposedMaxClassSize":
    
    if v, ok:= FloatPointer(value); ok {
      n.timetablesubject.ProposedMaxClassSize = ((*Float)(v))
      }
    case "SchoolCourseInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablesubject.SchoolCourseInfoRefId = ((*RefIdType)(v))
      }
    case "ProposedMinClassSize":
    
    if v, ok:= FloatPointer(value); ok {
      n.timetablesubject.ProposedMinClassSize = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableSubject")
        }
        return n
}

  func (s *TimeTableSubject) SubjectLongName() *String {
    if s.timetablesubject.SubjectLongName == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablesubject.SubjectLongName = ((*String)(v))
      }
      }
      return s.timetablesubject.SubjectLongName
    }
  func (s *TimeTableSubject) SubjectLongName_IsNil() bool {
    return s.SubjectLongName == nil || s.timetablesubject.SubjectLongName == nil
    }
  func (s *TimeTableSubject) OtherCodeList() *OtherCodeListType {
    if s.timetablesubject.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.timetablesubject.OtherCodeList = v
      }
      }
      return s.timetablesubject.OtherCodeList
    }
  func (s *TimeTableSubject) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.timetablesubject.OtherCodeList == nil
    }
  func (s *TimeTableSubject) AcademicYearRange() *YearRangeType {
    if s.timetablesubject.AcademicYearRange == nil {
     if v, ok:= YearRangeTypePointer(YearRangeType{}); ok {
      s.timetablesubject.AcademicYearRange = v
      }
      }
      return s.timetablesubject.AcademicYearRange
    }
  func (s *TimeTableSubject) AcademicYearRange_IsNil() bool {
    return s.AcademicYearRange == nil || s.timetablesubject.AcademicYearRange == nil
    }
  func (s *TimeTableSubject) SubjectShortName() *String {
    if s.timetablesubject.SubjectShortName == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablesubject.SubjectShortName = ((*String)(v))
      }
      }
      return s.timetablesubject.SubjectShortName
    }
  func (s *TimeTableSubject) SubjectShortName_IsNil() bool {
    return s.SubjectShortName == nil || s.timetablesubject.SubjectShortName == nil
    }
  func (s *TimeTableSubject) LocalCodeList() *LocalCodeListType {
    if s.timetablesubject.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.timetablesubject.LocalCodeList = v
      }
      }
      return s.timetablesubject.LocalCodeList
    }
  func (s *TimeTableSubject) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.timetablesubject.LocalCodeList == nil
    }
  func (s *TimeTableSubject) SchoolYear() *SchoolYearType {
    if s.timetablesubject.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablesubject.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.timetablesubject.SchoolYear
    }
  func (s *TimeTableSubject) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.timetablesubject.SchoolYear == nil
    }
  func (s *TimeTableSubject) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.timetablesubject.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.timetablesubject.SIF_ExtendedElements = v
      }
      }
      return s.timetablesubject.SIF_ExtendedElements
    }
  func (s *TimeTableSubject) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.timetablesubject.SIF_ExtendedElements == nil
    }
  func (s *TimeTableSubject) Semester() *Int {
    if s.timetablesubject.Semester == nil {
    if v, ok:= IntPointer(0); ok {
      s.timetablesubject.Semester = ((*Int)(v))
      }
      }
      return s.timetablesubject.Semester
    }
  func (s *TimeTableSubject) Semester_IsNil() bool {
    return s.Semester == nil || s.timetablesubject.Semester == nil
    }
  func (s *TimeTableSubject) SchoolInfoRefId() *String {
    if s.timetablesubject.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablesubject.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.timetablesubject.SchoolInfoRefId
    }
  func (s *TimeTableSubject) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.timetablesubject.SchoolInfoRefId == nil
    }
  func (s *TimeTableSubject) Faculty() *String {
    if s.timetablesubject.Faculty == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablesubject.Faculty = ((*String)(v))
      }
      }
      return s.timetablesubject.Faculty
    }
  func (s *TimeTableSubject) Faculty_IsNil() bool {
    return s.Faculty == nil || s.timetablesubject.Faculty == nil
    }
  func (s *TimeTableSubject) RefId() *RefIdType {
    if s.timetablesubject.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablesubject.RefId = ((*RefIdType)(v))
      }
      }
      return s.timetablesubject.RefId
    }
  func (s *TimeTableSubject) RefId_IsNil() bool {
    return s.RefId == nil || s.timetablesubject.RefId == nil
    }
  func (s *TimeTableSubject) AcademicYear() *YearLevelType {
    if s.timetablesubject.AcademicYear == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.timetablesubject.AcademicYear = v
      }
      }
      return s.timetablesubject.AcademicYear
    }
  func (s *TimeTableSubject) AcademicYear_IsNil() bool {
    return s.AcademicYear == nil || s.timetablesubject.AcademicYear == nil
    }
  func (s *TimeTableSubject) SubjectType() *String {
    if s.timetablesubject.SubjectType == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablesubject.SubjectType = ((*String)(v))
      }
      }
      return s.timetablesubject.SubjectType
    }
  func (s *TimeTableSubject) SubjectType_IsNil() bool {
    return s.SubjectType == nil || s.timetablesubject.SubjectType == nil
    }
  func (s *TimeTableSubject) SIF_Metadata() *SIF_MetadataType {
    if s.timetablesubject.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.timetablesubject.SIF_Metadata = v
      }
      }
      return s.timetablesubject.SIF_Metadata
    }
  func (s *TimeTableSubject) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.timetablesubject.SIF_Metadata == nil
    }
  func (s *TimeTableSubject) SubjectLocalId() *LocalIdType {
    if s.timetablesubject.SubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablesubject.SubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetablesubject.SubjectLocalId
    }
  func (s *TimeTableSubject) SubjectLocalId_IsNil() bool {
    return s.SubjectLocalId == nil || s.timetablesubject.SubjectLocalId == nil
    }
  func (s *TimeTableSubject) SchoolLocalId() *LocalIdType {
    if s.timetablesubject.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablesubject.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetablesubject.SchoolLocalId
    }
  func (s *TimeTableSubject) SchoolLocalId_IsNil() bool {
    return s.SchoolLocalId == nil || s.timetablesubject.SchoolLocalId == nil
    }
  func (s *TimeTableSubject) CourseLocalId() *LocalIdType {
    if s.timetablesubject.CourseLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablesubject.CourseLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetablesubject.CourseLocalId
    }
  func (s *TimeTableSubject) CourseLocalId_IsNil() bool {
    return s.CourseLocalId == nil || s.timetablesubject.CourseLocalId == nil
    }
  func (s *TimeTableSubject) ProposedMaxClassSize() *Float {
    if s.timetablesubject.ProposedMaxClassSize == nil {
    if v, ok:= FloatPointer(0); ok {
      s.timetablesubject.ProposedMaxClassSize = ((*Float)(v))
      }
      }
      return s.timetablesubject.ProposedMaxClassSize
    }
  func (s *TimeTableSubject) ProposedMaxClassSize_IsNil() bool {
    return s.ProposedMaxClassSize == nil || s.timetablesubject.ProposedMaxClassSize == nil
    }
  func (s *TimeTableSubject) SchoolCourseInfoRefId() *RefIdType {
    if s.timetablesubject.SchoolCourseInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablesubject.SchoolCourseInfoRefId = ((*RefIdType)(v))
      }
      }
      return s.timetablesubject.SchoolCourseInfoRefId
    }
  func (s *TimeTableSubject) SchoolCourseInfoRefId_IsNil() bool {
    return s.SchoolCourseInfoRefId == nil || s.timetablesubject.SchoolCourseInfoRefId == nil
    }
  func (s *TimeTableSubject) ProposedMinClassSize() *Float {
    if s.timetablesubject.ProposedMinClassSize == nil {
    if v, ok:= FloatPointer(0); ok {
      s.timetablesubject.ProposedMinClassSize = ((*Float)(v))
      }
      }
      return s.timetablesubject.ProposedMinClassSize
    }
  func (s *TimeTableSubject) ProposedMinClassSize_IsNil() bool {
    return s.ProposedMinClassSize == nil || s.timetablesubject.ProposedMinClassSize == nil
    }

func (n *WellbeingPersonLink) Unset(key string) *WellbeingPersonLink {
        switch key {
  case "ShortName":
   n.wellbeingpersonlink.ShortName = nil
  case "LocalId":
   n.wellbeingpersonlink.LocalId = nil
  case "PersonRole":
   n.wellbeingpersonlink.PersonRole = nil
  case "RefId":
   n.wellbeingpersonlink.RefId = nil
  case "WellbeingResponseRefId":
   n.wellbeingpersonlink.WellbeingResponseRefId = nil
  case "WellbeingEventRefId":
   n.wellbeingpersonlink.WellbeingEventRefId = nil
  case "SIF_Metadata":
   n.wellbeingpersonlink.SIF_Metadata = nil
  case "OtherPersonContactDetails":
   n.wellbeingpersonlink.OtherPersonContactDetails = nil
  case "GroupId":
   n.wellbeingpersonlink.GroupId = nil
  case "HowInvolved":
   n.wellbeingpersonlink.HowInvolved = nil
  case "OtherPersonId":
   n.wellbeingpersonlink.OtherPersonId = nil
  case "PersonRefId":
   n.wellbeingpersonlink.PersonRefId = nil
  case "LocalCodeList":
   n.wellbeingpersonlink.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.wellbeingpersonlink.SIF_ExtendedElements = nil
  case "FollowUpActionList":
   n.wellbeingpersonlink.FollowUpActionList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingPersonLink")
        }
        return n
}

func (n *WellbeingPersonLink) SetProperty(key string, value interface{}) *WellbeingPersonLink {
        if n == nil {
                n, _ = WellbeingPersonLinkPointer(WellbeingPersonLink{})
        }
        switch key {
    case "ShortName":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingpersonlink.ShortName = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingpersonlink.LocalId = ((*LocalIdType)(v))
      }
    case "PersonRole":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingpersonlink.PersonRole = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingpersonlink.RefId = ((*RefIdType)(v))
      }
    case "WellbeingResponseRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingpersonlink.WellbeingResponseRefId = ((*String)(v))
      }
    case "WellbeingEventRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingpersonlink.WellbeingEventRefId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.wellbeingpersonlink.SIF_Metadata = v
      }
    case "OtherPersonContactDetails":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingpersonlink.OtherPersonContactDetails = ((*String)(v))
      }
    case "GroupId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingpersonlink.GroupId = ((*LocalIdType)(v))
      }
    case "HowInvolved":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingpersonlink.HowInvolved = ((*String)(v))
      }
    case "OtherPersonId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingpersonlink.OtherPersonId = ((*LocalIdType)(v))
      }
    case "PersonRefId":
    if v, ok:= WellbeingPersonLink_PersonRefIdPointer(value); ok {
      n.wellbeingpersonlink.PersonRefId = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.wellbeingpersonlink.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.wellbeingpersonlink.SIF_ExtendedElements = v
      }
    case "FollowUpActionList":
    if v, ok:= FollowUpActionListTypePointer(value); ok {
      n.wellbeingpersonlink.FollowUpActionList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingPersonLink")
        }
        return n
}

  func (s *WellbeingPersonLink) ShortName() *String {
    if s.wellbeingpersonlink.ShortName == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingpersonlink.ShortName = ((*String)(v))
      }
      }
      return s.wellbeingpersonlink.ShortName
    }
  func (s *WellbeingPersonLink) ShortName_IsNil() bool {
    return s.ShortName == nil || s.wellbeingpersonlink.ShortName == nil
    }
  func (s *WellbeingPersonLink) LocalId() *LocalIdType {
    if s.wellbeingpersonlink.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingpersonlink.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.wellbeingpersonlink.LocalId
    }
  func (s *WellbeingPersonLink) LocalId_IsNil() bool {
    return s.LocalId == nil || s.wellbeingpersonlink.LocalId == nil
    }
  func (s *WellbeingPersonLink) PersonRole() *String {
    if s.wellbeingpersonlink.PersonRole == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingpersonlink.PersonRole = ((*String)(v))
      }
      }
      return s.wellbeingpersonlink.PersonRole
    }
  func (s *WellbeingPersonLink) PersonRole_IsNil() bool {
    return s.PersonRole == nil || s.wellbeingpersonlink.PersonRole == nil
    }
  func (s *WellbeingPersonLink) RefId() *RefIdType {
    if s.wellbeingpersonlink.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingpersonlink.RefId = ((*RefIdType)(v))
      }
      }
      return s.wellbeingpersonlink.RefId
    }
  func (s *WellbeingPersonLink) RefId_IsNil() bool {
    return s.RefId == nil || s.wellbeingpersonlink.RefId == nil
    }
  func (s *WellbeingPersonLink) WellbeingResponseRefId() *String {
    if s.wellbeingpersonlink.WellbeingResponseRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingpersonlink.WellbeingResponseRefId = ((*String)(v))
      }
      }
      return s.wellbeingpersonlink.WellbeingResponseRefId
    }
  func (s *WellbeingPersonLink) WellbeingResponseRefId_IsNil() bool {
    return s.WellbeingResponseRefId == nil || s.wellbeingpersonlink.WellbeingResponseRefId == nil
    }
  func (s *WellbeingPersonLink) WellbeingEventRefId() *String {
    if s.wellbeingpersonlink.WellbeingEventRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingpersonlink.WellbeingEventRefId = ((*String)(v))
      }
      }
      return s.wellbeingpersonlink.WellbeingEventRefId
    }
  func (s *WellbeingPersonLink) WellbeingEventRefId_IsNil() bool {
    return s.WellbeingEventRefId == nil || s.wellbeingpersonlink.WellbeingEventRefId == nil
    }
  func (s *WellbeingPersonLink) SIF_Metadata() *SIF_MetadataType {
    if s.wellbeingpersonlink.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.wellbeingpersonlink.SIF_Metadata = v
      }
      }
      return s.wellbeingpersonlink.SIF_Metadata
    }
  func (s *WellbeingPersonLink) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.wellbeingpersonlink.SIF_Metadata == nil
    }
  func (s *WellbeingPersonLink) OtherPersonContactDetails() *String {
    if s.wellbeingpersonlink.OtherPersonContactDetails == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingpersonlink.OtherPersonContactDetails = ((*String)(v))
      }
      }
      return s.wellbeingpersonlink.OtherPersonContactDetails
    }
  func (s *WellbeingPersonLink) OtherPersonContactDetails_IsNil() bool {
    return s.OtherPersonContactDetails == nil || s.wellbeingpersonlink.OtherPersonContactDetails == nil
    }
  func (s *WellbeingPersonLink) GroupId() *LocalIdType {
    if s.wellbeingpersonlink.GroupId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingpersonlink.GroupId = ((*LocalIdType)(v))
      }
      }
      return s.wellbeingpersonlink.GroupId
    }
  func (s *WellbeingPersonLink) GroupId_IsNil() bool {
    return s.GroupId == nil || s.wellbeingpersonlink.GroupId == nil
    }
  func (s *WellbeingPersonLink) HowInvolved() *String {
    if s.wellbeingpersonlink.HowInvolved == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingpersonlink.HowInvolved = ((*String)(v))
      }
      }
      return s.wellbeingpersonlink.HowInvolved
    }
  func (s *WellbeingPersonLink) HowInvolved_IsNil() bool {
    return s.HowInvolved == nil || s.wellbeingpersonlink.HowInvolved == nil
    }
  func (s *WellbeingPersonLink) OtherPersonId() *LocalIdType {
    if s.wellbeingpersonlink.OtherPersonId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingpersonlink.OtherPersonId = ((*LocalIdType)(v))
      }
      }
      return s.wellbeingpersonlink.OtherPersonId
    }
  func (s *WellbeingPersonLink) OtherPersonId_IsNil() bool {
    return s.OtherPersonId == nil || s.wellbeingpersonlink.OtherPersonId == nil
    }
  func (s *WellbeingPersonLink) PersonRefId() *WellbeingPersonLink_PersonRefId {
    if s.wellbeingpersonlink.PersonRefId == nil {
     if v, ok:= WellbeingPersonLink_PersonRefIdPointer(WellbeingPersonLink_PersonRefId{}); ok {
      s.wellbeingpersonlink.PersonRefId = v
      }
      }
      return s.wellbeingpersonlink.PersonRefId
    }
  func (s *WellbeingPersonLink) PersonRefId_IsNil() bool {
    return s.PersonRefId == nil || s.wellbeingpersonlink.PersonRefId == nil
    }
  func (s *WellbeingPersonLink) LocalCodeList() *LocalCodeListType {
    if s.wellbeingpersonlink.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.wellbeingpersonlink.LocalCodeList = v
      }
      }
      return s.wellbeingpersonlink.LocalCodeList
    }
  func (s *WellbeingPersonLink) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.wellbeingpersonlink.LocalCodeList == nil
    }
  func (s *WellbeingPersonLink) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.wellbeingpersonlink.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.wellbeingpersonlink.SIF_ExtendedElements = v
      }
      }
      return s.wellbeingpersonlink.SIF_ExtendedElements
    }
  func (s *WellbeingPersonLink) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.wellbeingpersonlink.SIF_ExtendedElements == nil
    }
  func (s *WellbeingPersonLink) FollowUpActionList() *FollowUpActionListType {
    if s.wellbeingpersonlink.FollowUpActionList == nil {
     if v, ok:= FollowUpActionListTypePointer(FollowUpActionListType{}); ok {
      s.wellbeingpersonlink.FollowUpActionList = v
      }
      }
      return s.wellbeingpersonlink.FollowUpActionList
    }
  func (s *WellbeingPersonLink) FollowUpActionList_IsNil() bool {
    return s.FollowUpActionList == nil || s.wellbeingpersonlink.FollowUpActionList == nil
    }

func (n *MedicalAlertMessageType) Unset(key string) *MedicalAlertMessageType {
        switch key {
  case "Severity":
   n.medicalalertmessagetype.Severity = nil
  case "Value":
   n.medicalalertmessagetype.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MedicalAlertMessageType")
        }
        return n
}

func (n *MedicalAlertMessageType) SetProperty(key string, value interface{}) *MedicalAlertMessageType {
        if n == nil {
                n, _ = MedicalAlertMessageTypePointer(MedicalAlertMessageType{})
        }
        switch key {
    case "Severity":
    
    if v, ok:= StringPointer(value); ok {
      n.medicalalertmessagetype.Severity = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.medicalalertmessagetype.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MedicalAlertMessageType")
        }
        return n
}

  func (s *MedicalAlertMessageType) Severity() *String {
    if s.medicalalertmessagetype.Severity == nil {
    if v, ok:= StringPointer(""); ok {
      s.medicalalertmessagetype.Severity = ((*String)(v))
      }
      }
      return s.medicalalertmessagetype.Severity
    }
  func (s *MedicalAlertMessageType) Severity_IsNil() bool {
    return s.Severity == nil || s.medicalalertmessagetype.Severity == nil
    }
  func (s *MedicalAlertMessageType) Value() *String {
    if s.medicalalertmessagetype.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.medicalalertmessagetype.Value = ((*String)(v))
      }
      }
      return s.medicalalertmessagetype.Value
    }
  func (s *MedicalAlertMessageType) Value_IsNil() bool {
    return s.Value == nil || s.medicalalertmessagetype.Value == nil
    }

func (n *TeachingGroupTeacherType) Unset(key string) *TeachingGroupTeacherType {
        switch key {
  case "StaffPersonalRefId":
   n.teachinggroupteachertype.StaffPersonalRefId = nil
  case "Name":
   n.teachinggroupteachertype.Name = nil
  case "Association":
   n.teachinggroupteachertype.Association = nil
  case "StaffLocalId":
   n.teachinggroupteachertype.StaffLocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupTeacherType")
        }
        return n
}

func (n *TeachingGroupTeacherType) SetProperty(key string, value interface{}) *TeachingGroupTeacherType {
        if n == nil {
                n, _ = TeachingGroupTeacherTypePointer(TeachingGroupTeacherType{})
        }
        switch key {
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupteachertype.StaffPersonalRefId = ((*String)(v))
      }
    case "Name":
    if v, ok:= NameOfRecordTypePointer(value); ok {
      n.teachinggroupteachertype.Name = v
      }
    case "Association":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupteachertype.Association = ((*String)(v))
      }
    case "StaffLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupteachertype.StaffLocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupTeacherType")
        }
        return n
}

  func (s *TeachingGroupTeacherType) StaffPersonalRefId() *String {
    if s.teachinggroupteachertype.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupteachertype.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.teachinggroupteachertype.StaffPersonalRefId
    }
  func (s *TeachingGroupTeacherType) StaffPersonalRefId_IsNil() bool {
    return s.StaffPersonalRefId == nil || s.teachinggroupteachertype.StaffPersonalRefId == nil
    }
  func (s *TeachingGroupTeacherType) Name() *NameOfRecordType {
    if s.teachinggroupteachertype.Name == nil {
     if v, ok:= NameOfRecordTypePointer(NameOfRecordType{}); ok {
      s.teachinggroupteachertype.Name = v
      }
      }
      return s.teachinggroupteachertype.Name
    }
  func (s *TeachingGroupTeacherType) Name_IsNil() bool {
    return s.Name == nil || s.teachinggroupteachertype.Name == nil
    }
  func (s *TeachingGroupTeacherType) Association() *String {
    if s.teachinggroupteachertype.Association == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupteachertype.Association = ((*String)(v))
      }
      }
      return s.teachinggroupteachertype.Association
    }
  func (s *TeachingGroupTeacherType) Association_IsNil() bool {
    return s.Association == nil || s.teachinggroupteachertype.Association == nil
    }
  func (s *TeachingGroupTeacherType) StaffLocalId() *LocalIdType {
    if s.teachinggroupteachertype.StaffLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupteachertype.StaffLocalId = ((*LocalIdType)(v))
      }
      }
      return s.teachinggroupteachertype.StaffLocalId
    }
  func (s *TeachingGroupTeacherType) StaffLocalId_IsNil() bool {
    return s.StaffLocalId == nil || s.teachinggroupteachertype.StaffLocalId == nil
    }

func (n *WellbeingEventLocationDetailsType) Unset(key string) *WellbeingEventLocationDetailsType {
        switch key {
  case "FurtherLocationNotes":
   n.wellbeingeventlocationdetailstype.FurtherLocationNotes = nil
  case "Class":
   n.wellbeingeventlocationdetailstype.Class = nil
  case "EventLocation":
   n.wellbeingeventlocationdetailstype.EventLocation = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingEventLocationDetailsType")
        }
        return n
}

func (n *WellbeingEventLocationDetailsType) SetProperty(key string, value interface{}) *WellbeingEventLocationDetailsType {
        if n == nil {
                n, _ = WellbeingEventLocationDetailsTypePointer(WellbeingEventLocationDetailsType{})
        }
        switch key {
    case "FurtherLocationNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingeventlocationdetailstype.FurtherLocationNotes = ((*String)(v))
      }
    case "Class":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingeventlocationdetailstype.Class = ((*String)(v))
      }
    case "EventLocation":
        if !CodesetContains(AUCodeSetsWellbeingEventLocationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingEventLocationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.wellbeingeventlocationdetailstype.EventLocation = ((*AUCodeSetsWellbeingEventLocationType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingEventLocationDetailsType")
        }
        return n
}

  func (s *WellbeingEventLocationDetailsType) FurtherLocationNotes() *String {
    if s.wellbeingeventlocationdetailstype.FurtherLocationNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingeventlocationdetailstype.FurtherLocationNotes = ((*String)(v))
      }
      }
      return s.wellbeingeventlocationdetailstype.FurtherLocationNotes
    }
  func (s *WellbeingEventLocationDetailsType) FurtherLocationNotes_IsNil() bool {
    return s.FurtherLocationNotes == nil || s.wellbeingeventlocationdetailstype.FurtherLocationNotes == nil
    }
  func (s *WellbeingEventLocationDetailsType) Class() *String {
    if s.wellbeingeventlocationdetailstype.Class == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingeventlocationdetailstype.Class = ((*String)(v))
      }
      }
      return s.wellbeingeventlocationdetailstype.Class
    }
  func (s *WellbeingEventLocationDetailsType) Class_IsNil() bool {
    return s.Class == nil || s.wellbeingeventlocationdetailstype.Class == nil
    }
  func (s *WellbeingEventLocationDetailsType) EventLocation() *AUCodeSetsWellbeingEventLocationType {
    if s.wellbeingeventlocationdetailstype.EventLocation == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingeventlocationdetailstype.EventLocation = ((*AUCodeSetsWellbeingEventLocationType)(v))
      }
      }
      return s.wellbeingeventlocationdetailstype.EventLocation
    }
  func (s *WellbeingEventLocationDetailsType) EventLocation_IsNil() bool {
    return s.EventLocation == nil || s.wellbeingeventlocationdetailstype.EventLocation == nil
    }

func (n *SchoolCourseInfoOverrideType) Unset(key string) *SchoolCourseInfoOverrideType {
        switch key {
  case "DistrictCourseCode":
   n.schoolcourseinfooverridetype.DistrictCourseCode = nil
  case "InstructionalLevel":
   n.schoolcourseinfooverridetype.InstructionalLevel = nil
  case "Override":
   n.schoolcourseinfooverridetype.Override = nil
  case "SubjectArea":
   n.schoolcourseinfooverridetype.SubjectArea = nil
  case "CourseCode":
   n.schoolcourseinfooverridetype.CourseCode = nil
  case "StateCourseCode":
   n.schoolcourseinfooverridetype.StateCourseCode = nil
  case "CourseCredits":
   n.schoolcourseinfooverridetype.CourseCredits = nil
  case "CourseTitle":
   n.schoolcourseinfooverridetype.CourseTitle = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolCourseInfoOverrideType")
        }
        return n
}

func (n *SchoolCourseInfoOverrideType) SetProperty(key string, value interface{}) *SchoolCourseInfoOverrideType {
        if n == nil {
                n, _ = SchoolCourseInfoOverrideTypePointer(SchoolCourseInfoOverrideType{})
        }
        switch key {
    case "DistrictCourseCode":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfooverridetype.DistrictCourseCode = ((*String)(v))
      }
    case "InstructionalLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfooverridetype.InstructionalLevel = ((*String)(v))
      }
    case "Override":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfooverridetype.Override = ((*String)(v))
      }
    case "SubjectArea":
    if v, ok:= SubjectAreaTypePointer(value); ok {
      n.schoolcourseinfooverridetype.SubjectArea = v
      }
    case "CourseCode":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfooverridetype.CourseCode = ((*String)(v))
      }
    case "StateCourseCode":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfooverridetype.StateCourseCode = ((*String)(v))
      }
    case "CourseCredits":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfooverridetype.CourseCredits = ((*String)(v))
      }
    case "CourseTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfooverridetype.CourseTitle = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolCourseInfoOverrideType")
        }
        return n
}

  func (s *SchoolCourseInfoOverrideType) DistrictCourseCode() *String {
    if s.schoolcourseinfooverridetype.DistrictCourseCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfooverridetype.DistrictCourseCode = ((*String)(v))
      }
      }
      return s.schoolcourseinfooverridetype.DistrictCourseCode
    }
  func (s *SchoolCourseInfoOverrideType) DistrictCourseCode_IsNil() bool {
    return s.DistrictCourseCode == nil || s.schoolcourseinfooverridetype.DistrictCourseCode == nil
    }
  func (s *SchoolCourseInfoOverrideType) InstructionalLevel() *String {
    if s.schoolcourseinfooverridetype.InstructionalLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfooverridetype.InstructionalLevel = ((*String)(v))
      }
      }
      return s.schoolcourseinfooverridetype.InstructionalLevel
    }
  func (s *SchoolCourseInfoOverrideType) InstructionalLevel_IsNil() bool {
    return s.InstructionalLevel == nil || s.schoolcourseinfooverridetype.InstructionalLevel == nil
    }
  func (s *SchoolCourseInfoOverrideType) Override() *String {
    if s.schoolcourseinfooverridetype.Override == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfooverridetype.Override = ((*String)(v))
      }
      }
      return s.schoolcourseinfooverridetype.Override
    }
  func (s *SchoolCourseInfoOverrideType) Override_IsNil() bool {
    return s.Override == nil || s.schoolcourseinfooverridetype.Override == nil
    }
  func (s *SchoolCourseInfoOverrideType) SubjectArea() *SubjectAreaType {
    if s.schoolcourseinfooverridetype.SubjectArea == nil {
     if v, ok:= SubjectAreaTypePointer(SubjectAreaType{}); ok {
      s.schoolcourseinfooverridetype.SubjectArea = v
      }
      }
      return s.schoolcourseinfooverridetype.SubjectArea
    }
  func (s *SchoolCourseInfoOverrideType) SubjectArea_IsNil() bool {
    return s.SubjectArea == nil || s.schoolcourseinfooverridetype.SubjectArea == nil
    }
  func (s *SchoolCourseInfoOverrideType) CourseCode() *String {
    if s.schoolcourseinfooverridetype.CourseCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfooverridetype.CourseCode = ((*String)(v))
      }
      }
      return s.schoolcourseinfooverridetype.CourseCode
    }
  func (s *SchoolCourseInfoOverrideType) CourseCode_IsNil() bool {
    return s.CourseCode == nil || s.schoolcourseinfooverridetype.CourseCode == nil
    }
  func (s *SchoolCourseInfoOverrideType) StateCourseCode() *String {
    if s.schoolcourseinfooverridetype.StateCourseCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfooverridetype.StateCourseCode = ((*String)(v))
      }
      }
      return s.schoolcourseinfooverridetype.StateCourseCode
    }
  func (s *SchoolCourseInfoOverrideType) StateCourseCode_IsNil() bool {
    return s.StateCourseCode == nil || s.schoolcourseinfooverridetype.StateCourseCode == nil
    }
  func (s *SchoolCourseInfoOverrideType) CourseCredits() *String {
    if s.schoolcourseinfooverridetype.CourseCredits == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfooverridetype.CourseCredits = ((*String)(v))
      }
      }
      return s.schoolcourseinfooverridetype.CourseCredits
    }
  func (s *SchoolCourseInfoOverrideType) CourseCredits_IsNil() bool {
    return s.CourseCredits == nil || s.schoolcourseinfooverridetype.CourseCredits == nil
    }
  func (s *SchoolCourseInfoOverrideType) CourseTitle() *String {
    if s.schoolcourseinfooverridetype.CourseTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfooverridetype.CourseTitle = ((*String)(v))
      }
      }
      return s.schoolcourseinfooverridetype.CourseTitle
    }
  func (s *SchoolCourseInfoOverrideType) CourseTitle_IsNil() bool {
    return s.CourseTitle == nil || s.schoolcourseinfooverridetype.CourseTitle == nil
    }

func (n *LearningStandardDocument) Unset(key string) *LearningStandardDocument {
        switch key {
  case "LocalCodeList":
   n.learningstandarddocument.LocalCodeList = nil
  case "LocalArchiveDate":
   n.learningstandarddocument.LocalArchiveDate = nil
  case "Title":
   n.learningstandarddocument.Title = nil
  case "SIF_ExtendedElements":
   n.learningstandarddocument.SIF_ExtendedElements = nil
  case "Authors":
   n.learningstandarddocument.Authors = nil
  case "Copyright":
   n.learningstandarddocument.Copyright = nil
  case "RelatedLearningStandards":
   n.learningstandarddocument.RelatedLearningStandards = nil
  case "EndOfLifeDate":
   n.learningstandarddocument.EndOfLifeDate = nil
  case "Description":
   n.learningstandarddocument.Description = nil
  case "DocumentDate":
   n.learningstandarddocument.DocumentDate = nil
  case "RepositoryDate":
   n.learningstandarddocument.RepositoryDate = nil
  case "YearLevels":
   n.learningstandarddocument.YearLevels = nil
  case "LearningStandardItemRefId":
   n.learningstandarddocument.LearningStandardItemRefId = nil
  case "Source":
   n.learningstandarddocument.Source = nil
  case "DocumentStatus":
   n.learningstandarddocument.DocumentStatus = nil
  case "SIF_Metadata":
   n.learningstandarddocument.SIF_Metadata = nil
  case "OrganizationContactPoint":
   n.learningstandarddocument.OrganizationContactPoint = nil
  case "Organizations":
   n.learningstandarddocument.Organizations = nil
  case "LocalAdoptionDate":
   n.learningstandarddocument.LocalAdoptionDate = nil
  case "RefId":
   n.learningstandarddocument.RefId = nil
  case "RichDescription":
   n.learningstandarddocument.RichDescription = nil
  case "SubjectAreas":
   n.learningstandarddocument.SubjectAreas = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningStandardDocument")
        }
        return n
}

func (n *LearningStandardDocument) SetProperty(key string, value interface{}) *LearningStandardDocument {
        if n == nil {
                n, _ = LearningStandardDocumentPointer(LearningStandardDocument{})
        }
        switch key {
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.learningstandarddocument.LocalCodeList = v
      }
    case "LocalArchiveDate":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarddocument.LocalArchiveDate = ((*String)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarddocument.Title = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.learningstandarddocument.SIF_ExtendedElements = v
      }
    case "Authors":
    if v, ok:= AuthorsTypePointer(value); ok {
      n.learningstandarddocument.Authors = v
      }
    case "Copyright":
    if v, ok:= CopyRightContainerTypePointer(value); ok {
      n.learningstandarddocument.Copyright = v
      }
    case "RelatedLearningStandards":
    if v, ok:= LearningStandardsDocumentTypePointer(value); ok {
      n.learningstandarddocument.RelatedLearningStandards = v
      }
    case "EndOfLifeDate":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarddocument.EndOfLifeDate = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarddocument.Description = ((*String)(v))
      }
    case "DocumentDate":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarddocument.DocumentDate = ((*String)(v))
      }
    case "RepositoryDate":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarddocument.RepositoryDate = ((*String)(v))
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.learningstandarddocument.YearLevels = v
      }
    case "LearningStandardItemRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarddocument.LearningStandardItemRefId = ((*String)(v))
      }
    case "Source":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarddocument.Source = ((*String)(v))
      }
    case "DocumentStatus":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarddocument.DocumentStatus = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.learningstandarddocument.SIF_Metadata = v
      }
    case "OrganizationContactPoint":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarddocument.OrganizationContactPoint = ((*String)(v))
      }
    case "Organizations":
    if v, ok:= OrganizationsTypePointer(value); ok {
      n.learningstandarddocument.Organizations = v
      }
    case "LocalAdoptionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarddocument.LocalAdoptionDate = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandarddocument.RefId = ((*RefIdType)(v))
      }
    case "RichDescription":
    if v, ok:= AbstractContentElementTypePointer(value); ok {
      n.learningstandarddocument.RichDescription = v
      }
    case "SubjectAreas":
    if v, ok:= ACStrandAreaListTypePointer(value); ok {
      n.learningstandarddocument.SubjectAreas = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningStandardDocument")
        }
        return n
}

  func (s *LearningStandardDocument) LocalCodeList() *LocalCodeListType {
    if s.learningstandarddocument.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.learningstandarddocument.LocalCodeList = v
      }
      }
      return s.learningstandarddocument.LocalCodeList
    }
  func (s *LearningStandardDocument) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.learningstandarddocument.LocalCodeList == nil
    }
  func (s *LearningStandardDocument) LocalArchiveDate() *String {
    if s.learningstandarddocument.LocalArchiveDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarddocument.LocalArchiveDate = ((*String)(v))
      }
      }
      return s.learningstandarddocument.LocalArchiveDate
    }
  func (s *LearningStandardDocument) LocalArchiveDate_IsNil() bool {
    return s.LocalArchiveDate == nil || s.learningstandarddocument.LocalArchiveDate == nil
    }
  func (s *LearningStandardDocument) Title() *String {
    if s.learningstandarddocument.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarddocument.Title = ((*String)(v))
      }
      }
      return s.learningstandarddocument.Title
    }
  func (s *LearningStandardDocument) Title_IsNil() bool {
    return s.Title == nil || s.learningstandarddocument.Title == nil
    }
  func (s *LearningStandardDocument) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.learningstandarddocument.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.learningstandarddocument.SIF_ExtendedElements = v
      }
      }
      return s.learningstandarddocument.SIF_ExtendedElements
    }
  func (s *LearningStandardDocument) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.learningstandarddocument.SIF_ExtendedElements == nil
    }
  func (s *LearningStandardDocument) Authors() *AuthorsType {
    if s.learningstandarddocument.Authors == nil {
     if v, ok:= AuthorsTypePointer(AuthorsType{}); ok {
      s.learningstandarddocument.Authors = v
      }
      }
      return s.learningstandarddocument.Authors
    }
  func (s *LearningStandardDocument) Authors_IsNil() bool {
    return s.Authors == nil || s.learningstandarddocument.Authors == nil
    }
  func (s *LearningStandardDocument) Copyright() *CopyRightContainerType {
    if s.learningstandarddocument.Copyright == nil {
     if v, ok:= CopyRightContainerTypePointer(CopyRightContainerType{}); ok {
      s.learningstandarddocument.Copyright = v
      }
      }
      return s.learningstandarddocument.Copyright
    }
  func (s *LearningStandardDocument) Copyright_IsNil() bool {
    return s.Copyright == nil || s.learningstandarddocument.Copyright == nil
    }
  func (s *LearningStandardDocument) RelatedLearningStandards() *LearningStandardsDocumentType {
    if s.learningstandarddocument.RelatedLearningStandards == nil {
     if v, ok:= LearningStandardsDocumentTypePointer(LearningStandardsDocumentType{}); ok {
      s.learningstandarddocument.RelatedLearningStandards = v
      }
      }
      return s.learningstandarddocument.RelatedLearningStandards
    }
  func (s *LearningStandardDocument) RelatedLearningStandards_IsNil() bool {
    return s.RelatedLearningStandards == nil || s.learningstandarddocument.RelatedLearningStandards == nil
    }
  func (s *LearningStandardDocument) EndOfLifeDate() *String {
    if s.learningstandarddocument.EndOfLifeDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarddocument.EndOfLifeDate = ((*String)(v))
      }
      }
      return s.learningstandarddocument.EndOfLifeDate
    }
  func (s *LearningStandardDocument) EndOfLifeDate_IsNil() bool {
    return s.EndOfLifeDate == nil || s.learningstandarddocument.EndOfLifeDate == nil
    }
  func (s *LearningStandardDocument) Description() *String {
    if s.learningstandarddocument.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarddocument.Description = ((*String)(v))
      }
      }
      return s.learningstandarddocument.Description
    }
  func (s *LearningStandardDocument) Description_IsNil() bool {
    return s.Description == nil || s.learningstandarddocument.Description == nil
    }
  func (s *LearningStandardDocument) DocumentDate() *String {
    if s.learningstandarddocument.DocumentDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarddocument.DocumentDate = ((*String)(v))
      }
      }
      return s.learningstandarddocument.DocumentDate
    }
  func (s *LearningStandardDocument) DocumentDate_IsNil() bool {
    return s.DocumentDate == nil || s.learningstandarddocument.DocumentDate == nil
    }
  func (s *LearningStandardDocument) RepositoryDate() *String {
    if s.learningstandarddocument.RepositoryDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarddocument.RepositoryDate = ((*String)(v))
      }
      }
      return s.learningstandarddocument.RepositoryDate
    }
  func (s *LearningStandardDocument) RepositoryDate_IsNil() bool {
    return s.RepositoryDate == nil || s.learningstandarddocument.RepositoryDate == nil
    }
  func (s *LearningStandardDocument) YearLevels() *YearLevelsType {
    if s.learningstandarddocument.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.learningstandarddocument.YearLevels = v
      }
      }
      return s.learningstandarddocument.YearLevels
    }
  func (s *LearningStandardDocument) YearLevels_IsNil() bool {
    return s.YearLevels == nil || s.learningstandarddocument.YearLevels == nil
    }
  func (s *LearningStandardDocument) LearningStandardItemRefId() *String {
    if s.learningstandarddocument.LearningStandardItemRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarddocument.LearningStandardItemRefId = ((*String)(v))
      }
      }
      return s.learningstandarddocument.LearningStandardItemRefId
    }
  func (s *LearningStandardDocument) LearningStandardItemRefId_IsNil() bool {
    return s.LearningStandardItemRefId == nil || s.learningstandarddocument.LearningStandardItemRefId == nil
    }
  func (s *LearningStandardDocument) Source() *String {
    if s.learningstandarddocument.Source == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarddocument.Source = ((*String)(v))
      }
      }
      return s.learningstandarddocument.Source
    }
  func (s *LearningStandardDocument) Source_IsNil() bool {
    return s.Source == nil || s.learningstandarddocument.Source == nil
    }
  func (s *LearningStandardDocument) DocumentStatus() *String {
    if s.learningstandarddocument.DocumentStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarddocument.DocumentStatus = ((*String)(v))
      }
      }
      return s.learningstandarddocument.DocumentStatus
    }
  func (s *LearningStandardDocument) DocumentStatus_IsNil() bool {
    return s.DocumentStatus == nil || s.learningstandarddocument.DocumentStatus == nil
    }
  func (s *LearningStandardDocument) SIF_Metadata() *SIF_MetadataType {
    if s.learningstandarddocument.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.learningstandarddocument.SIF_Metadata = v
      }
      }
      return s.learningstandarddocument.SIF_Metadata
    }
  func (s *LearningStandardDocument) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.learningstandarddocument.SIF_Metadata == nil
    }
  func (s *LearningStandardDocument) OrganizationContactPoint() *String {
    if s.learningstandarddocument.OrganizationContactPoint == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarddocument.OrganizationContactPoint = ((*String)(v))
      }
      }
      return s.learningstandarddocument.OrganizationContactPoint
    }
  func (s *LearningStandardDocument) OrganizationContactPoint_IsNil() bool {
    return s.OrganizationContactPoint == nil || s.learningstandarddocument.OrganizationContactPoint == nil
    }
  func (s *LearningStandardDocument) Organizations() *OrganizationsType {
    if s.learningstandarddocument.Organizations == nil {
     if v, ok:= OrganizationsTypePointer(OrganizationsType{}); ok {
      s.learningstandarddocument.Organizations = v
      }
      }
      return s.learningstandarddocument.Organizations
    }
  func (s *LearningStandardDocument) Organizations_IsNil() bool {
    return s.Organizations == nil || s.learningstandarddocument.Organizations == nil
    }
  func (s *LearningStandardDocument) LocalAdoptionDate() *String {
    if s.learningstandarddocument.LocalAdoptionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarddocument.LocalAdoptionDate = ((*String)(v))
      }
      }
      return s.learningstandarddocument.LocalAdoptionDate
    }
  func (s *LearningStandardDocument) LocalAdoptionDate_IsNil() bool {
    return s.LocalAdoptionDate == nil || s.learningstandarddocument.LocalAdoptionDate == nil
    }
  func (s *LearningStandardDocument) RefId() *RefIdType {
    if s.learningstandarddocument.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandarddocument.RefId = ((*RefIdType)(v))
      }
      }
      return s.learningstandarddocument.RefId
    }
  func (s *LearningStandardDocument) RefId_IsNil() bool {
    return s.RefId == nil || s.learningstandarddocument.RefId == nil
    }
  func (s *LearningStandardDocument) RichDescription() *AbstractContentElementType {
    if s.learningstandarddocument.RichDescription == nil {
     if v, ok:= AbstractContentElementTypePointer(AbstractContentElementType{}); ok {
      s.learningstandarddocument.RichDescription = v
      }
      }
      return s.learningstandarddocument.RichDescription
    }
  func (s *LearningStandardDocument) RichDescription_IsNil() bool {
    return s.RichDescription == nil || s.learningstandarddocument.RichDescription == nil
    }
  func (s *LearningStandardDocument) SubjectAreas() *ACStrandAreaListType {
    if s.learningstandarddocument.SubjectAreas == nil {
     if v, ok:= ACStrandAreaListTypePointer(ACStrandAreaListType{}); ok {
      s.learningstandarddocument.SubjectAreas = v
      }
      }
      return s.learningstandarddocument.SubjectAreas
    }
  func (s *LearningStandardDocument) SubjectAreas_IsNil() bool {
    return s.SubjectAreas == nil || s.learningstandarddocument.SubjectAreas == nil
    }

func (n *NAPWritingRubricType) Unset(key string) *NAPWritingRubricType {
        switch key {
  case "RubricType":
   n.napwritingrubrictype.RubricType = nil
  case "ScoreList":
   n.napwritingrubrictype.ScoreList = nil
  case "Descriptor":
   n.napwritingrubrictype.Descriptor = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPWritingRubricType")
        }
        return n
}

func (n *NAPWritingRubricType) SetProperty(key string, value interface{}) *NAPWritingRubricType {
        if n == nil {
                n, _ = NAPWritingRubricTypePointer(NAPWritingRubricType{})
        }
        switch key {
    case "RubricType":
    
    if v, ok:= StringPointer(value); ok {
      n.napwritingrubrictype.RubricType = ((*String)(v))
      }
    case "ScoreList":
    if v, ok:= ScoreListTypePointer(value); ok {
      n.napwritingrubrictype.ScoreList = v
      }
    case "Descriptor":
    
    if v, ok:= StringPointer(value); ok {
      n.napwritingrubrictype.Descriptor = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPWritingRubricType")
        }
        return n
}

  func (s *NAPWritingRubricType) RubricType() *String {
    if s.napwritingrubrictype.RubricType == nil {
    if v, ok:= StringPointer(""); ok {
      s.napwritingrubrictype.RubricType = ((*String)(v))
      }
      }
      return s.napwritingrubrictype.RubricType
    }
  func (s *NAPWritingRubricType) RubricType_IsNil() bool {
    return s.RubricType == nil || s.napwritingrubrictype.RubricType == nil
    }
  func (s *NAPWritingRubricType) ScoreList() *ScoreListType {
    if s.napwritingrubrictype.ScoreList == nil {
     if v, ok:= ScoreListTypePointer(ScoreListType{}); ok {
      s.napwritingrubrictype.ScoreList = v
      }
      }
      return s.napwritingrubrictype.ScoreList
    }
  func (s *NAPWritingRubricType) ScoreList_IsNil() bool {
    return s.ScoreList == nil || s.napwritingrubrictype.ScoreList == nil
    }
  func (s *NAPWritingRubricType) Descriptor() *String {
    if s.napwritingrubrictype.Descriptor == nil {
    if v, ok:= StringPointer(""); ok {
      s.napwritingrubrictype.Descriptor = ((*String)(v))
      }
      }
      return s.napwritingrubrictype.Descriptor
    }
  func (s *NAPWritingRubricType) Descriptor_IsNil() bool {
    return s.Descriptor == nil || s.napwritingrubrictype.Descriptor == nil
    }

func (n *ResourceUsage_ResourceReportColumn) Unset(key string) *ResourceUsage_ResourceReportColumn {
        switch key {
  case "ColumnName":
   n.resourceusage_resourcereportcolumn.ColumnName = nil
  case "ColumnDescription":
   n.resourceusage_resourcereportcolumn.ColumnDescription = nil
  case "ColumnDelimiter":
   n.resourceusage_resourcereportcolumn.ColumnDelimiter = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_ResourceReportColumn")
        }
        return n
}

func (n *ResourceUsage_ResourceReportColumn) SetProperty(key string, value interface{}) *ResourceUsage_ResourceReportColumn {
        if n == nil {
                n, _ = ResourceUsage_ResourceReportColumnPointer(ResourceUsage_ResourceReportColumn{})
        }
        switch key {
    case "ColumnName":
    
    if v, ok:= StringPointer(value); ok {
      n.resourceusage_resourcereportcolumn.ColumnName = ((*String)(v))
      }
    case "ColumnDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.resourceusage_resourcereportcolumn.ColumnDescription = ((*String)(v))
      }
    case "ColumnDelimiter":
    
    if v, ok:= StringPointer(value); ok {
      n.resourceusage_resourcereportcolumn.ColumnDelimiter = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_ResourceReportColumn")
        }
        return n
}

  func (s *ResourceUsage_ResourceReportColumn) ColumnName() *String {
    if s.resourceusage_resourcereportcolumn.ColumnName == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourceusage_resourcereportcolumn.ColumnName = ((*String)(v))
      }
      }
      return s.resourceusage_resourcereportcolumn.ColumnName
    }
  func (s *ResourceUsage_ResourceReportColumn) ColumnName_IsNil() bool {
    return s.ColumnName == nil || s.resourceusage_resourcereportcolumn.ColumnName == nil
    }
  func (s *ResourceUsage_ResourceReportColumn) ColumnDescription() *String {
    if s.resourceusage_resourcereportcolumn.ColumnDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourceusage_resourcereportcolumn.ColumnDescription = ((*String)(v))
      }
      }
      return s.resourceusage_resourcereportcolumn.ColumnDescription
    }
  func (s *ResourceUsage_ResourceReportColumn) ColumnDescription_IsNil() bool {
    return s.ColumnDescription == nil || s.resourceusage_resourcereportcolumn.ColumnDescription == nil
    }
  func (s *ResourceUsage_ResourceReportColumn) ColumnDelimiter() *String {
    if s.resourceusage_resourcereportcolumn.ColumnDelimiter == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourceusage_resourcereportcolumn.ColumnDelimiter = ((*String)(v))
      }
      }
      return s.resourceusage_resourcereportcolumn.ColumnDelimiter
    }
  func (s *ResourceUsage_ResourceReportColumn) ColumnDelimiter_IsNil() bool {
    return s.ColumnDelimiter == nil || s.resourceusage_resourcereportcolumn.ColumnDelimiter == nil
    }

func (n *AttendanceTimeType) Unset(key string) *AttendanceTimeType {
        switch key {
  case "AttendanceType":
   n.attendancetimetype.AttendanceType = nil
  case "StartTime":
   n.attendancetimetype.StartTime = nil
  case "AttendanceStatus":
   n.attendancetimetype.AttendanceStatus = nil
  case "AttendanceCode":
   n.attendancetimetype.AttendanceCode = nil
  case "EndTime":
   n.attendancetimetype.EndTime = nil
  case "DurationValue":
   n.attendancetimetype.DurationValue = nil
  case "AttendanceNote":
   n.attendancetimetype.AttendanceNote = nil
  case "TimeTableSubjectRefId":
   n.attendancetimetype.TimeTableSubjectRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AttendanceTimeType")
        }
        return n
}

func (n *AttendanceTimeType) SetProperty(key string, value interface{}) *AttendanceTimeType {
        if n == nil {
                n, _ = AttendanceTimeTypePointer(AttendanceTimeType{})
        }
        switch key {
    case "AttendanceType":
    
    if v, ok:= StringPointer(value); ok {
      n.attendancetimetype.AttendanceType = ((*String)(v))
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.attendancetimetype.StartTime = ((*String)(v))
      }
    case "AttendanceStatus":
        if !CodesetContains(AUCodeSetsAttendanceStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAttendanceStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.attendancetimetype.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
    case "AttendanceCode":
    if v, ok:= AttendanceCodeTypePointer(value); ok {
      n.attendancetimetype.AttendanceCode = v
      }
    case "EndTime":
    
    if v, ok:= StringPointer(value); ok {
      n.attendancetimetype.EndTime = ((*String)(v))
      }
    case "DurationValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.attendancetimetype.DurationValue = ((*Float)(v))
      }
    case "AttendanceNote":
    
    if v, ok:= StringPointer(value); ok {
      n.attendancetimetype.AttendanceNote = ((*String)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.attendancetimetype.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AttendanceTimeType")
        }
        return n
}

  func (s *AttendanceTimeType) AttendanceType() *String {
    if s.attendancetimetype.AttendanceType == nil {
    if v, ok:= StringPointer(""); ok {
      s.attendancetimetype.AttendanceType = ((*String)(v))
      }
      }
      return s.attendancetimetype.AttendanceType
    }
  func (s *AttendanceTimeType) AttendanceType_IsNil() bool {
    return s.AttendanceType == nil || s.attendancetimetype.AttendanceType == nil
    }
  func (s *AttendanceTimeType) StartTime() *String {
    if s.attendancetimetype.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.attendancetimetype.StartTime = ((*String)(v))
      }
      }
      return s.attendancetimetype.StartTime
    }
  func (s *AttendanceTimeType) StartTime_IsNil() bool {
    return s.StartTime == nil || s.attendancetimetype.StartTime == nil
    }
  func (s *AttendanceTimeType) AttendanceStatus() *AUCodeSetsAttendanceStatusType {
    if s.attendancetimetype.AttendanceStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.attendancetimetype.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
      }
      return s.attendancetimetype.AttendanceStatus
    }
  func (s *AttendanceTimeType) AttendanceStatus_IsNil() bool {
    return s.AttendanceStatus == nil || s.attendancetimetype.AttendanceStatus == nil
    }
  func (s *AttendanceTimeType) AttendanceCode() *AttendanceCodeType {
    if s.attendancetimetype.AttendanceCode == nil {
     if v, ok:= AttendanceCodeTypePointer(AttendanceCodeType{}); ok {
      s.attendancetimetype.AttendanceCode = v
      }
      }
      return s.attendancetimetype.AttendanceCode
    }
  func (s *AttendanceTimeType) AttendanceCode_IsNil() bool {
    return s.AttendanceCode == nil || s.attendancetimetype.AttendanceCode == nil
    }
  func (s *AttendanceTimeType) EndTime() *String {
    if s.attendancetimetype.EndTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.attendancetimetype.EndTime = ((*String)(v))
      }
      }
      return s.attendancetimetype.EndTime
    }
  func (s *AttendanceTimeType) EndTime_IsNil() bool {
    return s.EndTime == nil || s.attendancetimetype.EndTime == nil
    }
  func (s *AttendanceTimeType) DurationValue() *Float {
    if s.attendancetimetype.DurationValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.attendancetimetype.DurationValue = ((*Float)(v))
      }
      }
      return s.attendancetimetype.DurationValue
    }
  func (s *AttendanceTimeType) DurationValue_IsNil() bool {
    return s.DurationValue == nil || s.attendancetimetype.DurationValue == nil
    }
  func (s *AttendanceTimeType) AttendanceNote() *String {
    if s.attendancetimetype.AttendanceNote == nil {
    if v, ok:= StringPointer(""); ok {
      s.attendancetimetype.AttendanceNote = ((*String)(v))
      }
      }
      return s.attendancetimetype.AttendanceNote
    }
  func (s *AttendanceTimeType) AttendanceNote_IsNil() bool {
    return s.AttendanceNote == nil || s.attendancetimetype.AttendanceNote == nil
    }
  func (s *AttendanceTimeType) TimeTableSubjectRefId() *RefIdType {
    if s.attendancetimetype.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.attendancetimetype.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
      }
      return s.attendancetimetype.TimeTableSubjectRefId
    }
  func (s *AttendanceTimeType) TimeTableSubjectRefId_IsNil() bool {
    return s.TimeTableSubjectRefId == nil || s.attendancetimetype.TimeTableSubjectRefId == nil
    }

func (n *CollectionStatus) Unset(key string) *CollectionStatus {
        switch key {
  case "RefId":
   n.collectionstatus.RefId = nil
  case "AGReportingObjectResponseList":
   n.collectionstatus.AGReportingObjectResponseList = nil
  case "SIF_Metadata":
   n.collectionstatus.SIF_Metadata = nil
  case "ReportingAuthoritySystem":
   n.collectionstatus.ReportingAuthoritySystem = nil
  case "ReportingAuthorityCommonwealthId":
   n.collectionstatus.ReportingAuthorityCommonwealthId = nil
  case "RoundCode":
   n.collectionstatus.RoundCode = nil
  case "SubmittedBy":
   n.collectionstatus.SubmittedBy = nil
  case "ReportingAuthority":
   n.collectionstatus.ReportingAuthority = nil
  case "LocalCodeList":
   n.collectionstatus.LocalCodeList = nil
  case "SubmissionTimestamp":
   n.collectionstatus.SubmissionTimestamp = nil
  case "SIF_ExtendedElements":
   n.collectionstatus.SIF_ExtendedElements = nil
  case "CollectionYear":
   n.collectionstatus.CollectionYear = nil
  case "AGCollection":
   n.collectionstatus.AGCollection = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CollectionStatus")
        }
        return n
}

func (n *CollectionStatus) SetProperty(key string, value interface{}) *CollectionStatus {
        if n == nil {
                n, _ = CollectionStatusPointer(CollectionStatus{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.collectionstatus.RefId = ((*RefIdType)(v))
      }
    case "AGReportingObjectResponseList":
    if v, ok:= AGReportingObjectResponseListTypePointer(value); ok {
      n.collectionstatus.AGReportingObjectResponseList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.collectionstatus.SIF_Metadata = v
      }
    case "ReportingAuthoritySystem":
    
    if v, ok:= StringPointer(value); ok {
      n.collectionstatus.ReportingAuthoritySystem = ((*String)(v))
      }
    case "ReportingAuthorityCommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.collectionstatus.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
    case "RoundCode":
    
    if v, ok:= StringPointer(value); ok {
      n.collectionstatus.RoundCode = ((*String)(v))
      }
    case "SubmittedBy":
    
    if v, ok:= StringPointer(value); ok {
      n.collectionstatus.SubmittedBy = ((*String)(v))
      }
    case "ReportingAuthority":
    
    if v, ok:= StringPointer(value); ok {
      n.collectionstatus.ReportingAuthority = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.collectionstatus.LocalCodeList = v
      }
    case "SubmissionTimestamp":
    
    if v, ok:= StringPointer(value); ok {
      n.collectionstatus.SubmissionTimestamp = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.collectionstatus.SIF_ExtendedElements = v
      }
    case "CollectionYear":
    
    if v, ok:= StringPointer(value); ok {
      n.collectionstatus.CollectionYear = ((*SchoolYearType)(v))
      }
    case "AGCollection":
    
    if v, ok:= StringPointer(value); ok {
      n.collectionstatus.AGCollection = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CollectionStatus")
        }
        return n
}

  func (s *CollectionStatus) RefId() *RefIdType {
    if s.collectionstatus.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.collectionstatus.RefId = ((*RefIdType)(v))
      }
      }
      return s.collectionstatus.RefId
    }
  func (s *CollectionStatus) RefId_IsNil() bool {
    return s.RefId == nil || s.collectionstatus.RefId == nil
    }
  func (s *CollectionStatus) AGReportingObjectResponseList() *AGReportingObjectResponseListType {
    if s.collectionstatus.AGReportingObjectResponseList == nil {
     if v, ok:= AGReportingObjectResponseListTypePointer(AGReportingObjectResponseListType{}); ok {
      s.collectionstatus.AGReportingObjectResponseList = v
      }
      }
      return s.collectionstatus.AGReportingObjectResponseList
    }
  func (s *CollectionStatus) AGReportingObjectResponseList_IsNil() bool {
    return s.AGReportingObjectResponseList == nil || s.collectionstatus.AGReportingObjectResponseList == nil
    }
  func (s *CollectionStatus) SIF_Metadata() *SIF_MetadataType {
    if s.collectionstatus.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.collectionstatus.SIF_Metadata = v
      }
      }
      return s.collectionstatus.SIF_Metadata
    }
  func (s *CollectionStatus) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.collectionstatus.SIF_Metadata == nil
    }
  func (s *CollectionStatus) ReportingAuthoritySystem() *String {
    if s.collectionstatus.ReportingAuthoritySystem == nil {
    if v, ok:= StringPointer(""); ok {
      s.collectionstatus.ReportingAuthoritySystem = ((*String)(v))
      }
      }
      return s.collectionstatus.ReportingAuthoritySystem
    }
  func (s *CollectionStatus) ReportingAuthoritySystem_IsNil() bool {
    return s.ReportingAuthoritySystem == nil || s.collectionstatus.ReportingAuthoritySystem == nil
    }
  func (s *CollectionStatus) ReportingAuthorityCommonwealthId() *String {
    if s.collectionstatus.ReportingAuthorityCommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.collectionstatus.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
      }
      return s.collectionstatus.ReportingAuthorityCommonwealthId
    }
  func (s *CollectionStatus) ReportingAuthorityCommonwealthId_IsNil() bool {
    return s.ReportingAuthorityCommonwealthId == nil || s.collectionstatus.ReportingAuthorityCommonwealthId == nil
    }
  func (s *CollectionStatus) RoundCode() *String {
    if s.collectionstatus.RoundCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.collectionstatus.RoundCode = ((*String)(v))
      }
      }
      return s.collectionstatus.RoundCode
    }
  func (s *CollectionStatus) RoundCode_IsNil() bool {
    return s.RoundCode == nil || s.collectionstatus.RoundCode == nil
    }
  func (s *CollectionStatus) SubmittedBy() *String {
    if s.collectionstatus.SubmittedBy == nil {
    if v, ok:= StringPointer(""); ok {
      s.collectionstatus.SubmittedBy = ((*String)(v))
      }
      }
      return s.collectionstatus.SubmittedBy
    }
  func (s *CollectionStatus) SubmittedBy_IsNil() bool {
    return s.SubmittedBy == nil || s.collectionstatus.SubmittedBy == nil
    }
  func (s *CollectionStatus) ReportingAuthority() *String {
    if s.collectionstatus.ReportingAuthority == nil {
    if v, ok:= StringPointer(""); ok {
      s.collectionstatus.ReportingAuthority = ((*String)(v))
      }
      }
      return s.collectionstatus.ReportingAuthority
    }
  func (s *CollectionStatus) ReportingAuthority_IsNil() bool {
    return s.ReportingAuthority == nil || s.collectionstatus.ReportingAuthority == nil
    }
  func (s *CollectionStatus) LocalCodeList() *LocalCodeListType {
    if s.collectionstatus.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.collectionstatus.LocalCodeList = v
      }
      }
      return s.collectionstatus.LocalCodeList
    }
  func (s *CollectionStatus) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.collectionstatus.LocalCodeList == nil
    }
  func (s *CollectionStatus) SubmissionTimestamp() *String {
    if s.collectionstatus.SubmissionTimestamp == nil {
    if v, ok:= StringPointer(""); ok {
      s.collectionstatus.SubmissionTimestamp = ((*String)(v))
      }
      }
      return s.collectionstatus.SubmissionTimestamp
    }
  func (s *CollectionStatus) SubmissionTimestamp_IsNil() bool {
    return s.SubmissionTimestamp == nil || s.collectionstatus.SubmissionTimestamp == nil
    }
  func (s *CollectionStatus) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.collectionstatus.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.collectionstatus.SIF_ExtendedElements = v
      }
      }
      return s.collectionstatus.SIF_ExtendedElements
    }
  func (s *CollectionStatus) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.collectionstatus.SIF_ExtendedElements == nil
    }
  func (s *CollectionStatus) CollectionYear() *SchoolYearType {
    if s.collectionstatus.CollectionYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.collectionstatus.CollectionYear = ((*SchoolYearType)(v))
      }
      }
      return s.collectionstatus.CollectionYear
    }
  func (s *CollectionStatus) CollectionYear_IsNil() bool {
    return s.CollectionYear == nil || s.collectionstatus.CollectionYear == nil
    }
  func (s *CollectionStatus) AGCollection() *String {
    if s.collectionstatus.AGCollection == nil {
    if v, ok:= StringPointer(""); ok {
      s.collectionstatus.AGCollection = ((*String)(v))
      }
      }
      return s.collectionstatus.AGCollection
    }
  func (s *CollectionStatus) AGCollection_IsNil() bool {
    return s.AGCollection == nil || s.collectionstatus.AGCollection == nil
    }

func (n *StaffActivityExtensionType) Unset(key string) *StaffActivityExtensionType {
        switch key {
  case "OtherCodeList":
   n.staffactivityextensiontype.OtherCodeList = nil
  case "Code":
   n.staffactivityextensiontype.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffActivityExtensionType")
        }
        return n
}

func (n *StaffActivityExtensionType) SetProperty(key string, value interface{}) *StaffActivityExtensionType {
        if n == nil {
                n, _ = StaffActivityExtensionTypePointer(StaffActivityExtensionType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.staffactivityextensiontype.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsStaffActivityType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStaffActivityType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.staffactivityextensiontype.Code = ((*AUCodeSetsStaffActivityType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffActivityExtensionType")
        }
        return n
}

  func (s *StaffActivityExtensionType) OtherCodeList() *OtherCodeListType {
    if s.staffactivityextensiontype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.staffactivityextensiontype.OtherCodeList = v
      }
      }
      return s.staffactivityextensiontype.OtherCodeList
    }
  func (s *StaffActivityExtensionType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.staffactivityextensiontype.OtherCodeList == nil
    }
  func (s *StaffActivityExtensionType) Code() *AUCodeSetsStaffActivityType {
    if s.staffactivityextensiontype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffactivityextensiontype.Code = ((*AUCodeSetsStaffActivityType)(v))
      }
      }
      return s.staffactivityextensiontype.Code
    }
  func (s *StaffActivityExtensionType) Code_IsNil() bool {
    return s.Code == nil || s.staffactivityextensiontype.Code == nil
    }

func (n *AGRoundType) Unset(key string) *AGRoundType {
        switch key {
  case "RoundName":
   n.agroundtype.RoundName = nil
  case "StartDate":
   n.agroundtype.StartDate = nil
  case "RoundCode":
   n.agroundtype.RoundCode = nil
  case "DueDate":
   n.agroundtype.DueDate = nil
  case "EndDate":
   n.agroundtype.EndDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGRoundType")
        }
        return n
}

func (n *AGRoundType) SetProperty(key string, value interface{}) *AGRoundType {
        if n == nil {
                n, _ = AGRoundTypePointer(AGRoundType{})
        }
        switch key {
    case "RoundName":
    
    if v, ok:= StringPointer(value); ok {
      n.agroundtype.RoundName = ((*String)(v))
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.agroundtype.StartDate = ((*String)(v))
      }
    case "RoundCode":
    
    if v, ok:= StringPointer(value); ok {
      n.agroundtype.RoundCode = ((*String)(v))
      }
    case "DueDate":
    
    if v, ok:= StringPointer(value); ok {
      n.agroundtype.DueDate = ((*String)(v))
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.agroundtype.EndDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGRoundType")
        }
        return n
}

  func (s *AGRoundType) RoundName() *String {
    if s.agroundtype.RoundName == nil {
    if v, ok:= StringPointer(""); ok {
      s.agroundtype.RoundName = ((*String)(v))
      }
      }
      return s.agroundtype.RoundName
    }
  func (s *AGRoundType) RoundName_IsNil() bool {
    return s.RoundName == nil || s.agroundtype.RoundName == nil
    }
  func (s *AGRoundType) StartDate() *String {
    if s.agroundtype.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.agroundtype.StartDate = ((*String)(v))
      }
      }
      return s.agroundtype.StartDate
    }
  func (s *AGRoundType) StartDate_IsNil() bool {
    return s.StartDate == nil || s.agroundtype.StartDate == nil
    }
  func (s *AGRoundType) RoundCode() *String {
    if s.agroundtype.RoundCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.agroundtype.RoundCode = ((*String)(v))
      }
      }
      return s.agroundtype.RoundCode
    }
  func (s *AGRoundType) RoundCode_IsNil() bool {
    return s.RoundCode == nil || s.agroundtype.RoundCode == nil
    }
  func (s *AGRoundType) DueDate() *String {
    if s.agroundtype.DueDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.agroundtype.DueDate = ((*String)(v))
      }
      }
      return s.agroundtype.DueDate
    }
  func (s *AGRoundType) DueDate_IsNil() bool {
    return s.DueDate == nil || s.agroundtype.DueDate == nil
    }
  func (s *AGRoundType) EndDate() *String {
    if s.agroundtype.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.agroundtype.EndDate = ((*String)(v))
      }
      }
      return s.agroundtype.EndDate
    }
  func (s *AGRoundType) EndDate_IsNil() bool {
    return s.EndDate == nil || s.agroundtype.EndDate == nil
    }

func (n *MarkerType) Unset(key string) *MarkerType {
        switch key {
  case "Role":
   n.markertype.Role = nil
  case "StaffPersonalRefId":
   n.markertype.StaffPersonalRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MarkerType")
        }
        return n
}

func (n *MarkerType) SetProperty(key string, value interface{}) *MarkerType {
        if n == nil {
                n, _ = MarkerTypePointer(MarkerType{})
        }
        switch key {
    case "Role":
    
    if v, ok:= StringPointer(value); ok {
      n.markertype.Role = ((*String)(v))
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.markertype.StaffPersonalRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MarkerType")
        }
        return n
}

  func (s *MarkerType) Role() *String {
    if s.markertype.Role == nil {
    if v, ok:= StringPointer(""); ok {
      s.markertype.Role = ((*String)(v))
      }
      }
      return s.markertype.Role
    }
  func (s *MarkerType) Role_IsNil() bool {
    return s.Role == nil || s.markertype.Role == nil
    }
  func (s *MarkerType) StaffPersonalRefId() *String {
    if s.markertype.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.markertype.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.markertype.StaffPersonalRefId
    }
  func (s *MarkerType) StaffPersonalRefId_IsNil() bool {
    return s.StaffPersonalRefId == nil || s.markertype.StaffPersonalRefId == nil
    }

func (n *Debtor_BilledEntity) Unset(key string) *Debtor_BilledEntity {
        switch key {
  case "SIF_RefObject":
   n.debtor_billedentity.SIF_RefObject = nil
  case "Value":
   n.debtor_billedentity.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Debtor_BilledEntity")
        }
        return n
}

func (n *Debtor_BilledEntity) SetProperty(key string, value interface{}) *Debtor_BilledEntity {
        if n == nil {
                n, _ = Debtor_BilledEntityPointer(Debtor_BilledEntity{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.debtor_billedentity.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.debtor_billedentity.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Debtor_BilledEntity")
        }
        return n
}

  func (s *Debtor_BilledEntity) SIF_RefObject() *String {
    if s.debtor_billedentity.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.debtor_billedentity.SIF_RefObject = ((*String)(v))
      }
      }
      return s.debtor_billedentity.SIF_RefObject
    }
  func (s *Debtor_BilledEntity) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.debtor_billedentity.SIF_RefObject == nil
    }
  func (s *Debtor_BilledEntity) Value() *String {
    if s.debtor_billedentity.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.debtor_billedentity.Value = ((*String)(v))
      }
      }
      return s.debtor_billedentity.Value
    }
  func (s *Debtor_BilledEntity) Value_IsNil() bool {
    return s.Value == nil || s.debtor_billedentity.Value == nil
    }

func (n *PersonPicture_ParentObjectRefId) Unset(key string) *PersonPicture_ParentObjectRefId {
        switch key {
  case "Value":
   n.personpicture_parentobjectrefid.Value = nil
  case "SIF_RefObject":
   n.personpicture_parentobjectrefid.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonPicture_ParentObjectRefId")
        }
        return n
}

func (n *PersonPicture_ParentObjectRefId) SetProperty(key string, value interface{}) *PersonPicture_ParentObjectRefId {
        if n == nil {
                n, _ = PersonPicture_ParentObjectRefIdPointer(PersonPicture_ParentObjectRefId{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.personpicture_parentobjectrefid.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.personpicture_parentobjectrefid.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonPicture_ParentObjectRefId")
        }
        return n
}

  func (s *PersonPicture_ParentObjectRefId) Value() *String {
    if s.personpicture_parentobjectrefid.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.personpicture_parentobjectrefid.Value = ((*String)(v))
      }
      }
      return s.personpicture_parentobjectrefid.Value
    }
  func (s *PersonPicture_ParentObjectRefId) Value_IsNil() bool {
    return s.Value == nil || s.personpicture_parentobjectrefid.Value == nil
    }
  func (s *PersonPicture_ParentObjectRefId) SIF_RefObject() *String {
    if s.personpicture_parentobjectrefid.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.personpicture_parentobjectrefid.SIF_RefObject = ((*String)(v))
      }
      }
      return s.personpicture_parentobjectrefid.SIF_RefObject
    }
  func (s *PersonPicture_ParentObjectRefId) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.personpicture_parentobjectrefid.SIF_RefObject == nil
    }

func (n *WellbeingCharacteristic) Unset(key string) *WellbeingCharacteristic {
        switch key {
  case "Alert":
   n.wellbeingcharacteristic.Alert = nil
  case "StudentPersonalRefId":
   n.wellbeingcharacteristic.StudentPersonalRefId = nil
  case "LocalId":
   n.wellbeingcharacteristic.LocalId = nil
  case "EmergencyResponsePlan":
   n.wellbeingcharacteristic.EmergencyResponsePlan = nil
  case "WellbeingCharacteristicReviewDate":
   n.wellbeingcharacteristic.WellbeingCharacteristicReviewDate = nil
  case "WellbeingCharacteristicCategory":
   n.wellbeingcharacteristic.WellbeingCharacteristicCategory = nil
  case "WellbeingCharacteristicStartDate":
   n.wellbeingcharacteristic.WellbeingCharacteristicStartDate = nil
  case "SIF_ExtendedElements":
   n.wellbeingcharacteristic.SIF_ExtendedElements = nil
  case "RefId":
   n.wellbeingcharacteristic.RefId = nil
  case "WellbeingCharacteristicClassification":
   n.wellbeingcharacteristic.WellbeingCharacteristicClassification = nil
  case "LocalCharacteristicCode":
   n.wellbeingcharacteristic.LocalCharacteristicCode = nil
  case "Trigger":
   n.wellbeingcharacteristic.Trigger = nil
  case "CharacteristicSeverity":
   n.wellbeingcharacteristic.CharacteristicSeverity = nil
  case "EmergencyManagement":
   n.wellbeingcharacteristic.EmergencyManagement = nil
  case "SIF_Metadata":
   n.wellbeingcharacteristic.SIF_Metadata = nil
  case "MedicationList":
   n.wellbeingcharacteristic.MedicationList = nil
  case "DailyManagement":
   n.wellbeingcharacteristic.DailyManagement = nil
  case "WellbeingCharacteristicNotes":
   n.wellbeingcharacteristic.WellbeingCharacteristicNotes = nil
  case "SchoolInfoRefId":
   n.wellbeingcharacteristic.SchoolInfoRefId = nil
  case "ConfidentialFlag":
   n.wellbeingcharacteristic.ConfidentialFlag = nil
  case "DocumentList":
   n.wellbeingcharacteristic.DocumentList = nil
  case "LocalCodeList":
   n.wellbeingcharacteristic.LocalCodeList = nil
  case "WellbeingCharacteristicSubCategory":
   n.wellbeingcharacteristic.WellbeingCharacteristicSubCategory = nil
  case "WellbeingCharacteristicEndDate":
   n.wellbeingcharacteristic.WellbeingCharacteristicEndDate = nil
  case "SymptomList":
   n.wellbeingcharacteristic.SymptomList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingCharacteristic")
        }
        return n
}

func (n *WellbeingCharacteristic) SetProperty(key string, value interface{}) *WellbeingCharacteristic {
        if n == nil {
                n, _ = WellbeingCharacteristicPointer(WellbeingCharacteristic{})
        }
        switch key {
    case "Alert":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.Alert = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.StudentPersonalRefId = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.LocalId = ((*LocalIdType)(v))
      }
    case "EmergencyResponsePlan":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.EmergencyResponsePlan = ((*String)(v))
      }
    case "WellbeingCharacteristicReviewDate":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.WellbeingCharacteristicReviewDate = ((*String)(v))
      }
    case "WellbeingCharacteristicCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.WellbeingCharacteristicCategory = ((*String)(v))
      }
    case "WellbeingCharacteristicStartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.WellbeingCharacteristicStartDate = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.wellbeingcharacteristic.SIF_ExtendedElements = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.RefId = ((*RefIdType)(v))
      }
    case "WellbeingCharacteristicClassification":
        if !CodesetContains(AUCodeSetsWellbeingCharacteristicClassificationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingCharacteristicClassificationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.WellbeingCharacteristicClassification = ((*AUCodeSetsWellbeingCharacteristicClassificationType)(v))
      }
    case "LocalCharacteristicCode":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.LocalCharacteristicCode = ((*LocalIdType)(v))
      }
    case "Trigger":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.Trigger = ((*String)(v))
      }
    case "CharacteristicSeverity":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.CharacteristicSeverity = ((*String)(v))
      }
    case "EmergencyManagement":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.EmergencyManagement = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.wellbeingcharacteristic.SIF_Metadata = v
      }
    case "MedicationList":
    if v, ok:= MedicationListTypePointer(value); ok {
      n.wellbeingcharacteristic.MedicationList = v
      }
    case "DailyManagement":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.DailyManagement = ((*String)(v))
      }
    case "WellbeingCharacteristicNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.WellbeingCharacteristicNotes = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.SchoolInfoRefId = ((*String)(v))
      }
    case "ConfidentialFlag":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.ConfidentialFlag = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "DocumentList":
    if v, ok:= WellbeingDocumentListTypePointer(value); ok {
      n.wellbeingcharacteristic.DocumentList = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.wellbeingcharacteristic.LocalCodeList = v
      }
    case "WellbeingCharacteristicSubCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.WellbeingCharacteristicSubCategory = ((*String)(v))
      }
    case "WellbeingCharacteristicEndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingcharacteristic.WellbeingCharacteristicEndDate = ((*String)(v))
      }
    case "SymptomList":
    if v, ok:= SymptomListTypePointer(value); ok {
      n.wellbeingcharacteristic.SymptomList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingCharacteristic")
        }
        return n
}

  func (s *WellbeingCharacteristic) Alert() *AUCodeSetsYesOrNoCategoryType {
    if s.wellbeingcharacteristic.Alert == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.Alert = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.wellbeingcharacteristic.Alert
    }
  func (s *WellbeingCharacteristic) Alert_IsNil() bool {
    return s.Alert == nil || s.wellbeingcharacteristic.Alert == nil
    }
  func (s *WellbeingCharacteristic) StudentPersonalRefId() *String {
    if s.wellbeingcharacteristic.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.wellbeingcharacteristic.StudentPersonalRefId
    }
  func (s *WellbeingCharacteristic) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.wellbeingcharacteristic.StudentPersonalRefId == nil
    }
  func (s *WellbeingCharacteristic) LocalId() *LocalIdType {
    if s.wellbeingcharacteristic.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.wellbeingcharacteristic.LocalId
    }
  func (s *WellbeingCharacteristic) LocalId_IsNil() bool {
    return s.LocalId == nil || s.wellbeingcharacteristic.LocalId == nil
    }
  func (s *WellbeingCharacteristic) EmergencyResponsePlan() *String {
    if s.wellbeingcharacteristic.EmergencyResponsePlan == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.EmergencyResponsePlan = ((*String)(v))
      }
      }
      return s.wellbeingcharacteristic.EmergencyResponsePlan
    }
  func (s *WellbeingCharacteristic) EmergencyResponsePlan_IsNil() bool {
    return s.EmergencyResponsePlan == nil || s.wellbeingcharacteristic.EmergencyResponsePlan == nil
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicReviewDate() *String {
    if s.wellbeingcharacteristic.WellbeingCharacteristicReviewDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.WellbeingCharacteristicReviewDate = ((*String)(v))
      }
      }
      return s.wellbeingcharacteristic.WellbeingCharacteristicReviewDate
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicReviewDate_IsNil() bool {
    return s.WellbeingCharacteristicReviewDate == nil || s.wellbeingcharacteristic.WellbeingCharacteristicReviewDate == nil
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicCategory() *String {
    if s.wellbeingcharacteristic.WellbeingCharacteristicCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.WellbeingCharacteristicCategory = ((*String)(v))
      }
      }
      return s.wellbeingcharacteristic.WellbeingCharacteristicCategory
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicCategory_IsNil() bool {
    return s.WellbeingCharacteristicCategory == nil || s.wellbeingcharacteristic.WellbeingCharacteristicCategory == nil
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicStartDate() *String {
    if s.wellbeingcharacteristic.WellbeingCharacteristicStartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.WellbeingCharacteristicStartDate = ((*String)(v))
      }
      }
      return s.wellbeingcharacteristic.WellbeingCharacteristicStartDate
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicStartDate_IsNil() bool {
    return s.WellbeingCharacteristicStartDate == nil || s.wellbeingcharacteristic.WellbeingCharacteristicStartDate == nil
    }
  func (s *WellbeingCharacteristic) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.wellbeingcharacteristic.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.wellbeingcharacteristic.SIF_ExtendedElements = v
      }
      }
      return s.wellbeingcharacteristic.SIF_ExtendedElements
    }
  func (s *WellbeingCharacteristic) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.wellbeingcharacteristic.SIF_ExtendedElements == nil
    }
  func (s *WellbeingCharacteristic) RefId() *RefIdType {
    if s.wellbeingcharacteristic.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.RefId = ((*RefIdType)(v))
      }
      }
      return s.wellbeingcharacteristic.RefId
    }
  func (s *WellbeingCharacteristic) RefId_IsNil() bool {
    return s.RefId == nil || s.wellbeingcharacteristic.RefId == nil
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicClassification() *AUCodeSetsWellbeingCharacteristicClassificationType {
    if s.wellbeingcharacteristic.WellbeingCharacteristicClassification == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.WellbeingCharacteristicClassification = ((*AUCodeSetsWellbeingCharacteristicClassificationType)(v))
      }
      }
      return s.wellbeingcharacteristic.WellbeingCharacteristicClassification
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicClassification_IsNil() bool {
    return s.WellbeingCharacteristicClassification == nil || s.wellbeingcharacteristic.WellbeingCharacteristicClassification == nil
    }
  func (s *WellbeingCharacteristic) LocalCharacteristicCode() *LocalIdType {
    if s.wellbeingcharacteristic.LocalCharacteristicCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.LocalCharacteristicCode = ((*LocalIdType)(v))
      }
      }
      return s.wellbeingcharacteristic.LocalCharacteristicCode
    }
  func (s *WellbeingCharacteristic) LocalCharacteristicCode_IsNil() bool {
    return s.LocalCharacteristicCode == nil || s.wellbeingcharacteristic.LocalCharacteristicCode == nil
    }
  func (s *WellbeingCharacteristic) Trigger() *String {
    if s.wellbeingcharacteristic.Trigger == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.Trigger = ((*String)(v))
      }
      }
      return s.wellbeingcharacteristic.Trigger
    }
  func (s *WellbeingCharacteristic) Trigger_IsNil() bool {
    return s.Trigger == nil || s.wellbeingcharacteristic.Trigger == nil
    }
  func (s *WellbeingCharacteristic) CharacteristicSeverity() *String {
    if s.wellbeingcharacteristic.CharacteristicSeverity == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.CharacteristicSeverity = ((*String)(v))
      }
      }
      return s.wellbeingcharacteristic.CharacteristicSeverity
    }
  func (s *WellbeingCharacteristic) CharacteristicSeverity_IsNil() bool {
    return s.CharacteristicSeverity == nil || s.wellbeingcharacteristic.CharacteristicSeverity == nil
    }
  func (s *WellbeingCharacteristic) EmergencyManagement() *String {
    if s.wellbeingcharacteristic.EmergencyManagement == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.EmergencyManagement = ((*String)(v))
      }
      }
      return s.wellbeingcharacteristic.EmergencyManagement
    }
  func (s *WellbeingCharacteristic) EmergencyManagement_IsNil() bool {
    return s.EmergencyManagement == nil || s.wellbeingcharacteristic.EmergencyManagement == nil
    }
  func (s *WellbeingCharacteristic) SIF_Metadata() *SIF_MetadataType {
    if s.wellbeingcharacteristic.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.wellbeingcharacteristic.SIF_Metadata = v
      }
      }
      return s.wellbeingcharacteristic.SIF_Metadata
    }
  func (s *WellbeingCharacteristic) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.wellbeingcharacteristic.SIF_Metadata == nil
    }
  func (s *WellbeingCharacteristic) MedicationList() *MedicationListType {
    if s.wellbeingcharacteristic.MedicationList == nil {
     if v, ok:= MedicationListTypePointer(MedicationListType{}); ok {
      s.wellbeingcharacteristic.MedicationList = v
      }
      }
      return s.wellbeingcharacteristic.MedicationList
    }
  func (s *WellbeingCharacteristic) MedicationList_IsNil() bool {
    return s.MedicationList == nil || s.wellbeingcharacteristic.MedicationList == nil
    }
  func (s *WellbeingCharacteristic) DailyManagement() *String {
    if s.wellbeingcharacteristic.DailyManagement == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.DailyManagement = ((*String)(v))
      }
      }
      return s.wellbeingcharacteristic.DailyManagement
    }
  func (s *WellbeingCharacteristic) DailyManagement_IsNil() bool {
    return s.DailyManagement == nil || s.wellbeingcharacteristic.DailyManagement == nil
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicNotes() *String {
    if s.wellbeingcharacteristic.WellbeingCharacteristicNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.WellbeingCharacteristicNotes = ((*String)(v))
      }
      }
      return s.wellbeingcharacteristic.WellbeingCharacteristicNotes
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicNotes_IsNil() bool {
    return s.WellbeingCharacteristicNotes == nil || s.wellbeingcharacteristic.WellbeingCharacteristicNotes == nil
    }
  func (s *WellbeingCharacteristic) SchoolInfoRefId() *String {
    if s.wellbeingcharacteristic.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.wellbeingcharacteristic.SchoolInfoRefId
    }
  func (s *WellbeingCharacteristic) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.wellbeingcharacteristic.SchoolInfoRefId == nil
    }
  func (s *WellbeingCharacteristic) ConfidentialFlag() *AUCodeSetsYesOrNoCategoryType {
    if s.wellbeingcharacteristic.ConfidentialFlag == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.ConfidentialFlag = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.wellbeingcharacteristic.ConfidentialFlag
    }
  func (s *WellbeingCharacteristic) ConfidentialFlag_IsNil() bool {
    return s.ConfidentialFlag == nil || s.wellbeingcharacteristic.ConfidentialFlag == nil
    }
  func (s *WellbeingCharacteristic) DocumentList() *WellbeingDocumentListType {
    if s.wellbeingcharacteristic.DocumentList == nil {
     if v, ok:= WellbeingDocumentListTypePointer(WellbeingDocumentListType{}); ok {
      s.wellbeingcharacteristic.DocumentList = v
      }
      }
      return s.wellbeingcharacteristic.DocumentList
    }
  func (s *WellbeingCharacteristic) DocumentList_IsNil() bool {
    return s.DocumentList == nil || s.wellbeingcharacteristic.DocumentList == nil
    }
  func (s *WellbeingCharacteristic) LocalCodeList() *LocalCodeListType {
    if s.wellbeingcharacteristic.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.wellbeingcharacteristic.LocalCodeList = v
      }
      }
      return s.wellbeingcharacteristic.LocalCodeList
    }
  func (s *WellbeingCharacteristic) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.wellbeingcharacteristic.LocalCodeList == nil
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicSubCategory() *String {
    if s.wellbeingcharacteristic.WellbeingCharacteristicSubCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.WellbeingCharacteristicSubCategory = ((*String)(v))
      }
      }
      return s.wellbeingcharacteristic.WellbeingCharacteristicSubCategory
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicSubCategory_IsNil() bool {
    return s.WellbeingCharacteristicSubCategory == nil || s.wellbeingcharacteristic.WellbeingCharacteristicSubCategory == nil
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicEndDate() *String {
    if s.wellbeingcharacteristic.WellbeingCharacteristicEndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingcharacteristic.WellbeingCharacteristicEndDate = ((*String)(v))
      }
      }
      return s.wellbeingcharacteristic.WellbeingCharacteristicEndDate
    }
  func (s *WellbeingCharacteristic) WellbeingCharacteristicEndDate_IsNil() bool {
    return s.WellbeingCharacteristicEndDate == nil || s.wellbeingcharacteristic.WellbeingCharacteristicEndDate == nil
    }
  func (s *WellbeingCharacteristic) SymptomList() *SymptomListType {
    if s.wellbeingcharacteristic.SymptomList == nil {
     if v, ok:= SymptomListTypePointer(SymptomListType{}); ok {
      s.wellbeingcharacteristic.SymptomList = v
      }
      }
      return s.wellbeingcharacteristic.SymptomList
    }
  func (s *WellbeingCharacteristic) SymptomList_IsNil() bool {
    return s.SymptomList == nil || s.wellbeingcharacteristic.SymptomList == nil
    }

func (n *StimulusType) Unset(key string) *StimulusType {
        switch key {
  case "TextDescriptor":
   n.stimulustype.TextDescriptor = nil
  case "TextGenre":
   n.stimulustype.TextGenre = nil
  case "StimulusLocalId":
   n.stimulustype.StimulusLocalId = nil
  case "TextType":
   n.stimulustype.TextType = nil
  case "WordCount":
   n.stimulustype.WordCount = nil
  case "Content":
   n.stimulustype.Content = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StimulusType")
        }
        return n
}

func (n *StimulusType) SetProperty(key string, value interface{}) *StimulusType {
        if n == nil {
                n, _ = StimulusTypePointer(StimulusType{})
        }
        switch key {
    case "TextDescriptor":
    
    if v, ok:= StringPointer(value); ok {
      n.stimulustype.TextDescriptor = ((*String)(v))
      }
    case "TextGenre":
    
    if v, ok:= StringPointer(value); ok {
      n.stimulustype.TextGenre = ((*String)(v))
      }
    case "StimulusLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.stimulustype.StimulusLocalId = ((*LocalIdType)(v))
      }
    case "TextType":
    
    if v, ok:= StringPointer(value); ok {
      n.stimulustype.TextType = ((*String)(v))
      }
    case "WordCount":
    
    if v, ok:= IntPointer(value); ok {
      n.stimulustype.WordCount = ((*Int)(v))
      }
    case "Content":
    
    if v, ok:= StringPointer(value); ok {
      n.stimulustype.Content = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StimulusType")
        }
        return n
}

  func (s *StimulusType) TextDescriptor() *String {
    if s.stimulustype.TextDescriptor == nil {
    if v, ok:= StringPointer(""); ok {
      s.stimulustype.TextDescriptor = ((*String)(v))
      }
      }
      return s.stimulustype.TextDescriptor
    }
  func (s *StimulusType) TextDescriptor_IsNil() bool {
    return s.TextDescriptor == nil || s.stimulustype.TextDescriptor == nil
    }
  func (s *StimulusType) TextGenre() *String {
    if s.stimulustype.TextGenre == nil {
    if v, ok:= StringPointer(""); ok {
      s.stimulustype.TextGenre = ((*String)(v))
      }
      }
      return s.stimulustype.TextGenre
    }
  func (s *StimulusType) TextGenre_IsNil() bool {
    return s.TextGenre == nil || s.stimulustype.TextGenre == nil
    }
  func (s *StimulusType) StimulusLocalId() *LocalIdType {
    if s.stimulustype.StimulusLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.stimulustype.StimulusLocalId = ((*LocalIdType)(v))
      }
      }
      return s.stimulustype.StimulusLocalId
    }
  func (s *StimulusType) StimulusLocalId_IsNil() bool {
    return s.StimulusLocalId == nil || s.stimulustype.StimulusLocalId == nil
    }
  func (s *StimulusType) TextType() *String {
    if s.stimulustype.TextType == nil {
    if v, ok:= StringPointer(""); ok {
      s.stimulustype.TextType = ((*String)(v))
      }
      }
      return s.stimulustype.TextType
    }
  func (s *StimulusType) TextType_IsNil() bool {
    return s.TextType == nil || s.stimulustype.TextType == nil
    }
  func (s *StimulusType) WordCount() *Int {
    if s.stimulustype.WordCount == nil {
    if v, ok:= IntPointer(0); ok {
      s.stimulustype.WordCount = ((*Int)(v))
      }
      }
      return s.stimulustype.WordCount
    }
  func (s *StimulusType) WordCount_IsNil() bool {
    return s.WordCount == nil || s.stimulustype.WordCount == nil
    }
  func (s *StimulusType) Content() *String {
    if s.stimulustype.Content == nil {
    if v, ok:= StringPointer(""); ok {
      s.stimulustype.Content = ((*String)(v))
      }
      }
      return s.stimulustype.Content
    }
  func (s *StimulusType) Content_IsNil() bool {
    return s.Content == nil || s.stimulustype.Content == nil
    }

func (n *ACStrandSubjectAreaType) Unset(key string) *ACStrandSubjectAreaType {
        switch key {
  case "ACStrand":
   n.acstrandsubjectareatype.ACStrand = nil
  case "SubjectArea":
   n.acstrandsubjectareatype.SubjectArea = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ACStrandSubjectAreaType")
        }
        return n
}

func (n *ACStrandSubjectAreaType) SetProperty(key string, value interface{}) *ACStrandSubjectAreaType {
        if n == nil {
                n, _ = ACStrandSubjectAreaTypePointer(ACStrandSubjectAreaType{})
        }
        switch key {
    case "ACStrand":
        if !CodesetContains(AUCodeSetsACStrandType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsACStrandType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.acstrandsubjectareatype.ACStrand = ((*AUCodeSetsACStrandType)(v))
      }
    case "SubjectArea":
    if v, ok:= SubjectAreaTypePointer(value); ok {
      n.acstrandsubjectareatype.SubjectArea = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ACStrandSubjectAreaType")
        }
        return n
}

  func (s *ACStrandSubjectAreaType) ACStrand() *AUCodeSetsACStrandType {
    if s.acstrandsubjectareatype.ACStrand == nil {
    if v, ok:= StringPointer(""); ok {
      s.acstrandsubjectareatype.ACStrand = ((*AUCodeSetsACStrandType)(v))
      }
      }
      return s.acstrandsubjectareatype.ACStrand
    }
  func (s *ACStrandSubjectAreaType) ACStrand_IsNil() bool {
    return s.ACStrand == nil || s.acstrandsubjectareatype.ACStrand == nil
    }
  func (s *ACStrandSubjectAreaType) SubjectArea() *SubjectAreaType {
    if s.acstrandsubjectareatype.SubjectArea == nil {
     if v, ok:= SubjectAreaTypePointer(SubjectAreaType{}); ok {
      s.acstrandsubjectareatype.SubjectArea = v
      }
      }
      return s.acstrandsubjectareatype.SubjectArea
    }
  func (s *ACStrandSubjectAreaType) SubjectArea_IsNil() bool {
    return s.SubjectArea == nil || s.acstrandsubjectareatype.SubjectArea == nil
    }

func (n *StaffPersonal) Unset(key string) *StaffPersonal {
        switch key {
  case "EmploymentStatus":
   n.staffpersonal.EmploymentStatus = nil
  case "MostRecent":
   n.staffpersonal.MostRecent = nil
  case "SIF_ExtendedElements":
   n.staffpersonal.SIF_ExtendedElements = nil
  case "StateProvinceId":
   n.staffpersonal.StateProvinceId = nil
  case "Title":
   n.staffpersonal.Title = nil
  case "LocalCodeList":
   n.staffpersonal.LocalCodeList = nil
  case "PersonInfo":
   n.staffpersonal.PersonInfo = nil
  case "SIF_Metadata":
   n.staffpersonal.SIF_Metadata = nil
  case "ElectronicIdList":
   n.staffpersonal.ElectronicIdList = nil
  case "RefId":
   n.staffpersonal.RefId = nil
  case "OtherIdList":
   n.staffpersonal.OtherIdList = nil
  case "LocalId":
   n.staffpersonal.LocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffPersonal")
        }
        return n
}

func (n *StaffPersonal) SetProperty(key string, value interface{}) *StaffPersonal {
        if n == nil {
                n, _ = StaffPersonalPointer(StaffPersonal{})
        }
        switch key {
    case "EmploymentStatus":
        if !CodesetContains(AUCodeSetsStaffStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStaffStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.staffpersonal.EmploymentStatus = ((*AUCodeSetsStaffStatusType)(v))
      }
    case "MostRecent":
    if v, ok:= StaffMostRecentContainerTypePointer(value); ok {
      n.staffpersonal.MostRecent = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.staffpersonal.SIF_ExtendedElements = v
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.staffpersonal.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.staffpersonal.Title = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.staffpersonal.LocalCodeList = v
      }
    case "PersonInfo":
    if v, ok:= PersonInfoTypePointer(value); ok {
      n.staffpersonal.PersonInfo = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.staffpersonal.SIF_Metadata = v
      }
    case "ElectronicIdList":
    if v, ok:= ElectronicIdListTypePointer(value); ok {
      n.staffpersonal.ElectronicIdList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.staffpersonal.RefId = ((*RefIdType)(v))
      }
    case "OtherIdList":
    if v, ok:= OtherIdListTypePointer(value); ok {
      n.staffpersonal.OtherIdList = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.staffpersonal.LocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffPersonal")
        }
        return n
}

  func (s *StaffPersonal) EmploymentStatus() *AUCodeSetsStaffStatusType {
    if s.staffpersonal.EmploymentStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffpersonal.EmploymentStatus = ((*AUCodeSetsStaffStatusType)(v))
      }
      }
      return s.staffpersonal.EmploymentStatus
    }
  func (s *StaffPersonal) EmploymentStatus_IsNil() bool {
    return s.EmploymentStatus == nil || s.staffpersonal.EmploymentStatus == nil
    }
  func (s *StaffPersonal) MostRecent() *StaffMostRecentContainerType {
    if s.staffpersonal.MostRecent == nil {
     if v, ok:= StaffMostRecentContainerTypePointer(StaffMostRecentContainerType{}); ok {
      s.staffpersonal.MostRecent = v
      }
      }
      return s.staffpersonal.MostRecent
    }
  func (s *StaffPersonal) MostRecent_IsNil() bool {
    return s.MostRecent == nil || s.staffpersonal.MostRecent == nil
    }
  func (s *StaffPersonal) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.staffpersonal.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.staffpersonal.SIF_ExtendedElements = v
      }
      }
      return s.staffpersonal.SIF_ExtendedElements
    }
  func (s *StaffPersonal) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.staffpersonal.SIF_ExtendedElements == nil
    }
  func (s *StaffPersonal) StateProvinceId() *StateProvinceIdType {
    if s.staffpersonal.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffpersonal.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.staffpersonal.StateProvinceId
    }
  func (s *StaffPersonal) StateProvinceId_IsNil() bool {
    return s.StateProvinceId == nil || s.staffpersonal.StateProvinceId == nil
    }
  func (s *StaffPersonal) Title() *String {
    if s.staffpersonal.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffpersonal.Title = ((*String)(v))
      }
      }
      return s.staffpersonal.Title
    }
  func (s *StaffPersonal) Title_IsNil() bool {
    return s.Title == nil || s.staffpersonal.Title == nil
    }
  func (s *StaffPersonal) LocalCodeList() *LocalCodeListType {
    if s.staffpersonal.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.staffpersonal.LocalCodeList = v
      }
      }
      return s.staffpersonal.LocalCodeList
    }
  func (s *StaffPersonal) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.staffpersonal.LocalCodeList == nil
    }
  func (s *StaffPersonal) PersonInfo() *PersonInfoType {
    if s.staffpersonal.PersonInfo == nil {
     if v, ok:= PersonInfoTypePointer(PersonInfoType{}); ok {
      s.staffpersonal.PersonInfo = v
      }
      }
      return s.staffpersonal.PersonInfo
    }
  func (s *StaffPersonal) PersonInfo_IsNil() bool {
    return s.PersonInfo == nil || s.staffpersonal.PersonInfo == nil
    }
  func (s *StaffPersonal) SIF_Metadata() *SIF_MetadataType {
    if s.staffpersonal.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.staffpersonal.SIF_Metadata = v
      }
      }
      return s.staffpersonal.SIF_Metadata
    }
  func (s *StaffPersonal) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.staffpersonal.SIF_Metadata == nil
    }
  func (s *StaffPersonal) ElectronicIdList() *ElectronicIdListType {
    if s.staffpersonal.ElectronicIdList == nil {
     if v, ok:= ElectronicIdListTypePointer(ElectronicIdListType{}); ok {
      s.staffpersonal.ElectronicIdList = v
      }
      }
      return s.staffpersonal.ElectronicIdList
    }
  func (s *StaffPersonal) ElectronicIdList_IsNil() bool {
    return s.ElectronicIdList == nil || s.staffpersonal.ElectronicIdList == nil
    }
  func (s *StaffPersonal) RefId() *RefIdType {
    if s.staffpersonal.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffpersonal.RefId = ((*RefIdType)(v))
      }
      }
      return s.staffpersonal.RefId
    }
  func (s *StaffPersonal) RefId_IsNil() bool {
    return s.RefId == nil || s.staffpersonal.RefId == nil
    }
  func (s *StaffPersonal) OtherIdList() *OtherIdListType {
    if s.staffpersonal.OtherIdList == nil {
     if v, ok:= OtherIdListTypePointer(OtherIdListType{}); ok {
      s.staffpersonal.OtherIdList = v
      }
      }
      return s.staffpersonal.OtherIdList
    }
  func (s *StaffPersonal) OtherIdList_IsNil() bool {
    return s.OtherIdList == nil || s.staffpersonal.OtherIdList == nil
    }
  func (s *StaffPersonal) LocalId() *LocalIdType {
    if s.staffpersonal.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffpersonal.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.staffpersonal.LocalId
    }
  func (s *StaffPersonal) LocalId_IsNil() bool {
    return s.LocalId == nil || s.staffpersonal.LocalId == nil
    }

func (n *StudentSectionEnrollment) Unset(key string) *StudentSectionEnrollment {
        switch key {
  case "SchoolYear":
   n.studentsectionenrollment.SchoolYear = nil
  case "SIF_ExtendedElements":
   n.studentsectionenrollment.SIF_ExtendedElements = nil
  case "SectionInfoRefId":
   n.studentsectionenrollment.SectionInfoRefId = nil
  case "LocalCodeList":
   n.studentsectionenrollment.LocalCodeList = nil
  case "SIF_Metadata":
   n.studentsectionenrollment.SIF_Metadata = nil
  case "ExitDate":
   n.studentsectionenrollment.ExitDate = nil
  case "EntryDate":
   n.studentsectionenrollment.EntryDate = nil
  case "StudentPersonalRefId":
   n.studentsectionenrollment.StudentPersonalRefId = nil
  case "RefId":
   n.studentsectionenrollment.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSectionEnrollment")
        }
        return n
}

func (n *StudentSectionEnrollment) SetProperty(key string, value interface{}) *StudentSectionEnrollment {
        if n == nil {
                n, _ = StudentSectionEnrollmentPointer(StudentSectionEnrollment{})
        }
        switch key {
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.studentsectionenrollment.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentsectionenrollment.SIF_ExtendedElements = v
      }
    case "SectionInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentsectionenrollment.SectionInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentsectionenrollment.LocalCodeList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentsectionenrollment.SIF_Metadata = v
      }
    case "ExitDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentsectionenrollment.ExitDate = ((*String)(v))
      }
    case "EntryDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentsectionenrollment.EntryDate = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentsectionenrollment.StudentPersonalRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentsectionenrollment.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSectionEnrollment")
        }
        return n
}

  func (s *StudentSectionEnrollment) SchoolYear() *SchoolYearType {
    if s.studentsectionenrollment.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentsectionenrollment.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.studentsectionenrollment.SchoolYear
    }
  func (s *StudentSectionEnrollment) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.studentsectionenrollment.SchoolYear == nil
    }
  func (s *StudentSectionEnrollment) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentsectionenrollment.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentsectionenrollment.SIF_ExtendedElements = v
      }
      }
      return s.studentsectionenrollment.SIF_ExtendedElements
    }
  func (s *StudentSectionEnrollment) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentsectionenrollment.SIF_ExtendedElements == nil
    }
  func (s *StudentSectionEnrollment) SectionInfoRefId() *String {
    if s.studentsectionenrollment.SectionInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentsectionenrollment.SectionInfoRefId = ((*String)(v))
      }
      }
      return s.studentsectionenrollment.SectionInfoRefId
    }
  func (s *StudentSectionEnrollment) SectionInfoRefId_IsNil() bool {
    return s.SectionInfoRefId == nil || s.studentsectionenrollment.SectionInfoRefId == nil
    }
  func (s *StudentSectionEnrollment) LocalCodeList() *LocalCodeListType {
    if s.studentsectionenrollment.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentsectionenrollment.LocalCodeList = v
      }
      }
      return s.studentsectionenrollment.LocalCodeList
    }
  func (s *StudentSectionEnrollment) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentsectionenrollment.LocalCodeList == nil
    }
  func (s *StudentSectionEnrollment) SIF_Metadata() *SIF_MetadataType {
    if s.studentsectionenrollment.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentsectionenrollment.SIF_Metadata = v
      }
      }
      return s.studentsectionenrollment.SIF_Metadata
    }
  func (s *StudentSectionEnrollment) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentsectionenrollment.SIF_Metadata == nil
    }
  func (s *StudentSectionEnrollment) ExitDate() *String {
    if s.studentsectionenrollment.ExitDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentsectionenrollment.ExitDate = ((*String)(v))
      }
      }
      return s.studentsectionenrollment.ExitDate
    }
  func (s *StudentSectionEnrollment) ExitDate_IsNil() bool {
    return s.ExitDate == nil || s.studentsectionenrollment.ExitDate == nil
    }
  func (s *StudentSectionEnrollment) EntryDate() *String {
    if s.studentsectionenrollment.EntryDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentsectionenrollment.EntryDate = ((*String)(v))
      }
      }
      return s.studentsectionenrollment.EntryDate
    }
  func (s *StudentSectionEnrollment) EntryDate_IsNil() bool {
    return s.EntryDate == nil || s.studentsectionenrollment.EntryDate == nil
    }
  func (s *StudentSectionEnrollment) StudentPersonalRefId() *String {
    if s.studentsectionenrollment.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentsectionenrollment.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.studentsectionenrollment.StudentPersonalRefId
    }
  func (s *StudentSectionEnrollment) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.studentsectionenrollment.StudentPersonalRefId == nil
    }
  func (s *StudentSectionEnrollment) RefId() *RefIdType {
    if s.studentsectionenrollment.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentsectionenrollment.RefId = ((*RefIdType)(v))
      }
      }
      return s.studentsectionenrollment.RefId
    }
  func (s *StudentSectionEnrollment) RefId_IsNil() bool {
    return s.RefId == nil || s.studentsectionenrollment.RefId == nil
    }

func (n *DetentionContainerType) Unset(key string) *DetentionContainerType {
        switch key {
  case "DetentionDate":
   n.detentioncontainertype.DetentionDate = nil
  case "DetentionCategory":
   n.detentioncontainertype.DetentionCategory = nil
  case "Status":
   n.detentioncontainertype.Status = nil
  case "DetentionNotes":
   n.detentioncontainertype.DetentionNotes = nil
  case "DetentionLocation":
   n.detentioncontainertype.DetentionLocation = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DetentionContainerType")
        }
        return n
}

func (n *DetentionContainerType) SetProperty(key string, value interface{}) *DetentionContainerType {
        if n == nil {
                n, _ = DetentionContainerTypePointer(DetentionContainerType{})
        }
        switch key {
    case "DetentionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.detentioncontainertype.DetentionDate = ((*String)(v))
      }
    case "DetentionCategory":
        if !CodesetContains(AUCodeSetsDetentionCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsDetentionCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.detentioncontainertype.DetentionCategory = ((*AUCodeSetsDetentionCategoryType)(v))
      }
    case "Status":
        if !CodesetContains(AUCodeSetsWellbeingStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.detentioncontainertype.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
    case "DetentionNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.detentioncontainertype.DetentionNotes = ((*String)(v))
      }
    case "DetentionLocation":
    
    if v, ok:= StringPointer(value); ok {
      n.detentioncontainertype.DetentionLocation = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DetentionContainerType")
        }
        return n
}

  func (s *DetentionContainerType) DetentionDate() *String {
    if s.detentioncontainertype.DetentionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.detentioncontainertype.DetentionDate = ((*String)(v))
      }
      }
      return s.detentioncontainertype.DetentionDate
    }
  func (s *DetentionContainerType) DetentionDate_IsNil() bool {
    return s.DetentionDate == nil || s.detentioncontainertype.DetentionDate == nil
    }
  func (s *DetentionContainerType) DetentionCategory() *AUCodeSetsDetentionCategoryType {
    if s.detentioncontainertype.DetentionCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.detentioncontainertype.DetentionCategory = ((*AUCodeSetsDetentionCategoryType)(v))
      }
      }
      return s.detentioncontainertype.DetentionCategory
    }
  func (s *DetentionContainerType) DetentionCategory_IsNil() bool {
    return s.DetentionCategory == nil || s.detentioncontainertype.DetentionCategory == nil
    }
  func (s *DetentionContainerType) Status() *AUCodeSetsWellbeingStatusType {
    if s.detentioncontainertype.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.detentioncontainertype.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
      }
      return s.detentioncontainertype.Status
    }
  func (s *DetentionContainerType) Status_IsNil() bool {
    return s.Status == nil || s.detentioncontainertype.Status == nil
    }
  func (s *DetentionContainerType) DetentionNotes() *String {
    if s.detentioncontainertype.DetentionNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.detentioncontainertype.DetentionNotes = ((*String)(v))
      }
      }
      return s.detentioncontainertype.DetentionNotes
    }
  func (s *DetentionContainerType) DetentionNotes_IsNil() bool {
    return s.DetentionNotes == nil || s.detentioncontainertype.DetentionNotes == nil
    }
  func (s *DetentionContainerType) DetentionLocation() *String {
    if s.detentioncontainertype.DetentionLocation == nil {
    if v, ok:= StringPointer(""); ok {
      s.detentioncontainertype.DetentionLocation = ((*String)(v))
      }
      }
      return s.detentioncontainertype.DetentionLocation
    }
  func (s *DetentionContainerType) DetentionLocation_IsNil() bool {
    return s.DetentionLocation == nil || s.detentioncontainertype.DetentionLocation == nil
    }

func (n *StandardIdentifierType) Unset(key string) *StandardIdentifierType {
        switch key {
  case "IndicatorNumber":
   n.standardidentifiertype.IndicatorNumber = nil
  case "YearLevels":
   n.standardidentifiertype.YearLevels = nil
  case "Benchmark":
   n.standardidentifiertype.Benchmark = nil
  case "Organization":
   n.standardidentifiertype.Organization = nil
  case "YearLevel":
   n.standardidentifiertype.YearLevel = nil
  case "StandardNumber":
   n.standardidentifiertype.StandardNumber = nil
  case "ACStrandSubjectArea":
   n.standardidentifiertype.ACStrandSubjectArea = nil
  case "AlternateIdentificationCodes":
   n.standardidentifiertype.AlternateIdentificationCodes = nil
  case "YearCreated":
   n.standardidentifiertype.YearCreated = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StandardIdentifierType")
        }
        return n
}

func (n *StandardIdentifierType) SetProperty(key string, value interface{}) *StandardIdentifierType {
        if n == nil {
                n, _ = StandardIdentifierTypePointer(StandardIdentifierType{})
        }
        switch key {
    case "IndicatorNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.standardidentifiertype.IndicatorNumber = ((*String)(v))
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.standardidentifiertype.YearLevels = v
      }
    case "Benchmark":
    
    if v, ok:= StringPointer(value); ok {
      n.standardidentifiertype.Benchmark = ((*String)(v))
      }
    case "Organization":
    
    if v, ok:= StringPointer(value); ok {
      n.standardidentifiertype.Organization = ((*String)(v))
      }
    case "YearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.standardidentifiertype.YearLevel = v
      }
    case "StandardNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.standardidentifiertype.StandardNumber = ((*String)(v))
      }
    case "ACStrandSubjectArea":
    if v, ok:= ACStrandSubjectAreaTypePointer(value); ok {
      n.standardidentifiertype.ACStrandSubjectArea = v
      }
    case "AlternateIdentificationCodes":
    if v, ok:= AlternateIdentificationCodeListTypePointer(value); ok {
      n.standardidentifiertype.AlternateIdentificationCodes = v
      }
    case "YearCreated":
    
    if v, ok:= StringPointer(value); ok {
      n.standardidentifiertype.YearCreated = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StandardIdentifierType")
        }
        return n
}

  func (s *StandardIdentifierType) IndicatorNumber() *String {
    if s.standardidentifiertype.IndicatorNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.standardidentifiertype.IndicatorNumber = ((*String)(v))
      }
      }
      return s.standardidentifiertype.IndicatorNumber
    }
  func (s *StandardIdentifierType) IndicatorNumber_IsNil() bool {
    return s.IndicatorNumber == nil || s.standardidentifiertype.IndicatorNumber == nil
    }
  func (s *StandardIdentifierType) YearLevels() *YearLevelsType {
    if s.standardidentifiertype.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.standardidentifiertype.YearLevels = v
      }
      }
      return s.standardidentifiertype.YearLevels
    }
  func (s *StandardIdentifierType) YearLevels_IsNil() bool {
    return s.YearLevels == nil || s.standardidentifiertype.YearLevels == nil
    }
  func (s *StandardIdentifierType) Benchmark() *String {
    if s.standardidentifiertype.Benchmark == nil {
    if v, ok:= StringPointer(""); ok {
      s.standardidentifiertype.Benchmark = ((*String)(v))
      }
      }
      return s.standardidentifiertype.Benchmark
    }
  func (s *StandardIdentifierType) Benchmark_IsNil() bool {
    return s.Benchmark == nil || s.standardidentifiertype.Benchmark == nil
    }
  func (s *StandardIdentifierType) Organization() *String {
    if s.standardidentifiertype.Organization == nil {
    if v, ok:= StringPointer(""); ok {
      s.standardidentifiertype.Organization = ((*String)(v))
      }
      }
      return s.standardidentifiertype.Organization
    }
  func (s *StandardIdentifierType) Organization_IsNil() bool {
    return s.Organization == nil || s.standardidentifiertype.Organization == nil
    }
  func (s *StandardIdentifierType) YearLevel() *YearLevelType {
    if s.standardidentifiertype.YearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.standardidentifiertype.YearLevel = v
      }
      }
      return s.standardidentifiertype.YearLevel
    }
  func (s *StandardIdentifierType) YearLevel_IsNil() bool {
    return s.YearLevel == nil || s.standardidentifiertype.YearLevel == nil
    }
  func (s *StandardIdentifierType) StandardNumber() *String {
    if s.standardidentifiertype.StandardNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.standardidentifiertype.StandardNumber = ((*String)(v))
      }
      }
      return s.standardidentifiertype.StandardNumber
    }
  func (s *StandardIdentifierType) StandardNumber_IsNil() bool {
    return s.StandardNumber == nil || s.standardidentifiertype.StandardNumber == nil
    }
  func (s *StandardIdentifierType) ACStrandSubjectArea() *ACStrandSubjectAreaType {
    if s.standardidentifiertype.ACStrandSubjectArea == nil {
     if v, ok:= ACStrandSubjectAreaTypePointer(ACStrandSubjectAreaType{}); ok {
      s.standardidentifiertype.ACStrandSubjectArea = v
      }
      }
      return s.standardidentifiertype.ACStrandSubjectArea
    }
  func (s *StandardIdentifierType) ACStrandSubjectArea_IsNil() bool {
    return s.ACStrandSubjectArea == nil || s.standardidentifiertype.ACStrandSubjectArea == nil
    }
  func (s *StandardIdentifierType) AlternateIdentificationCodes() *AlternateIdentificationCodeListType {
    if s.standardidentifiertype.AlternateIdentificationCodes == nil {
     if v, ok:= AlternateIdentificationCodeListTypePointer(AlternateIdentificationCodeListType{}); ok {
      s.standardidentifiertype.AlternateIdentificationCodes = v
      }
      }
      return s.standardidentifiertype.AlternateIdentificationCodes
    }
  func (s *StandardIdentifierType) AlternateIdentificationCodes_IsNil() bool {
    return s.AlternateIdentificationCodes == nil || s.standardidentifiertype.AlternateIdentificationCodes == nil
    }
  func (s *StandardIdentifierType) YearCreated() *String {
    if s.standardidentifiertype.YearCreated == nil {
    if v, ok:= StringPointer(""); ok {
      s.standardidentifiertype.YearCreated = ((*String)(v))
      }
      }
      return s.standardidentifiertype.YearCreated
    }
  func (s *StandardIdentifierType) YearCreated_IsNil() bool {
    return s.YearCreated == nil || s.standardidentifiertype.YearCreated == nil
    }

func (n *GridLocationType) Unset(key string) *GridLocationType {
        switch key {
  case "Longitude":
   n.gridlocationtype.Longitude = nil
  case "Latitude":
   n.gridlocationtype.Latitude = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GridLocationType")
        }
        return n
}

func (n *GridLocationType) SetProperty(key string, value interface{}) *GridLocationType {
        if n == nil {
                n, _ = GridLocationTypePointer(GridLocationType{})
        }
        switch key {
    case "Longitude":
    
    if v, ok:= FloatPointer(value); ok {
      n.gridlocationtype.Longitude = ((*Float)(v))
      }
    case "Latitude":
    
    if v, ok:= FloatPointer(value); ok {
      n.gridlocationtype.Latitude = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GridLocationType")
        }
        return n
}

  func (s *GridLocationType) Longitude() *Float {
    if s.gridlocationtype.Longitude == nil {
    if v, ok:= FloatPointer(0); ok {
      s.gridlocationtype.Longitude = ((*Float)(v))
      }
      }
      return s.gridlocationtype.Longitude
    }
  func (s *GridLocationType) Longitude_IsNil() bool {
    return s.Longitude == nil || s.gridlocationtype.Longitude == nil
    }
  func (s *GridLocationType) Latitude() *Float {
    if s.gridlocationtype.Latitude == nil {
    if v, ok:= FloatPointer(0); ok {
      s.gridlocationtype.Latitude = ((*Float)(v))
      }
      }
      return s.gridlocationtype.Latitude
    }
  func (s *GridLocationType) Latitude_IsNil() bool {
    return s.Latitude == nil || s.gridlocationtype.Latitude == nil
    }

func (n *StudentParticipation) Unset(key string) *StudentParticipation {
        switch key {
  case "ProgramType":
   n.studentparticipation.ProgramType = nil
  case "ProgramPlanEffectiveDate":
   n.studentparticipation.ProgramPlanEffectiveDate = nil
  case "ExtendedDay":
   n.studentparticipation.ExtendedDay = nil
  case "ParticipationContact":
   n.studentparticipation.ParticipationContact = nil
  case "StudentSpecialEducationFTE":
   n.studentparticipation.StudentSpecialEducationFTE = nil
  case "LocalCodeList":
   n.studentparticipation.LocalCodeList = nil
  case "PlacementParentalConsentDate":
   n.studentparticipation.PlacementParentalConsentDate = nil
  case "ProgramPlanDate":
   n.studentparticipation.ProgramPlanDate = nil
  case "ReevaluationDate":
   n.studentparticipation.ReevaluationDate = nil
  case "ExtendedSchoolYear":
   n.studentparticipation.ExtendedSchoolYear = nil
  case "EvaluationExtensionDate":
   n.studentparticipation.EvaluationExtensionDate = nil
  case "EvaluationDate":
   n.studentparticipation.EvaluationDate = nil
  case "RefId":
   n.studentparticipation.RefId = nil
  case "ManagingSchool":
   n.studentparticipation.ManagingSchool = nil
  case "EvaluationParentalConsentDate":
   n.studentparticipation.EvaluationParentalConsentDate = nil
  case "SIF_Metadata":
   n.studentparticipation.SIF_Metadata = nil
  case "ReferralSource":
   n.studentparticipation.ReferralSource = nil
  case "EntryPerson":
   n.studentparticipation.EntryPerson = nil
  case "ProgramPlacementDate":
   n.studentparticipation.ProgramPlacementDate = nil
  case "ExtensionComments":
   n.studentparticipation.ExtensionComments = nil
  case "SIF_ExtendedElements":
   n.studentparticipation.SIF_ExtendedElements = nil
  case "StudentParticipationAsOfDate":
   n.studentparticipation.StudentParticipationAsOfDate = nil
  case "GiftedEligibilityCriteria":
   n.studentparticipation.GiftedEligibilityCriteria = nil
  case "NOREPDate":
   n.studentparticipation.NOREPDate = nil
  case "ReferralDate":
   n.studentparticipation.ReferralDate = nil
  case "ProgramStatus":
   n.studentparticipation.ProgramStatus = nil
  case "StudentPersonalRefId":
   n.studentparticipation.StudentPersonalRefId = nil
  case "ProgramEligibilityDate":
   n.studentparticipation.ProgramEligibilityDate = nil
  case "ProgramAvailability":
   n.studentparticipation.ProgramAvailability = nil
  case "ProgramFundingSources":
   n.studentparticipation.ProgramFundingSources = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentParticipation")
        }
        return n
}

func (n *StudentParticipation) SetProperty(key string, value interface{}) *StudentParticipation {
        if n == nil {
                n, _ = StudentParticipationPointer(StudentParticipation{})
        }
        switch key {
    case "ProgramType":
        if !CodesetContains(AUCodeSetsStudentFamilyProgramTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStudentFamilyProgramTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.ProgramType = ((*AUCodeSetsStudentFamilyProgramTypeType)(v))
      }
    case "ProgramPlanEffectiveDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.ProgramPlanEffectiveDate = ((*String)(v))
      }
    case "ExtendedDay":
    
    if v, ok:= BoolPointer(value); ok {
      n.studentparticipation.ExtendedDay = ((*Bool)(v))
      }
    case "ParticipationContact":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.ParticipationContact = ((*String)(v))
      }
    case "StudentSpecialEducationFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.studentparticipation.StudentSpecialEducationFTE = ((*Float)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentparticipation.LocalCodeList = v
      }
    case "PlacementParentalConsentDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.PlacementParentalConsentDate = ((*String)(v))
      }
    case "ProgramPlanDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.ProgramPlanDate = ((*String)(v))
      }
    case "ReevaluationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.ReevaluationDate = ((*String)(v))
      }
    case "ExtendedSchoolYear":
    
    if v, ok:= BoolPointer(value); ok {
      n.studentparticipation.ExtendedSchoolYear = ((*Bool)(v))
      }
    case "EvaluationExtensionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.EvaluationExtensionDate = ((*String)(v))
      }
    case "EvaluationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.EvaluationDate = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.RefId = ((*RefIdType)(v))
      }
    case "ManagingSchool":
    if v, ok:= StudentParticipation_ManagingSchoolPointer(value); ok {
      n.studentparticipation.ManagingSchool = v
      }
    case "EvaluationParentalConsentDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.EvaluationParentalConsentDate = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentparticipation.SIF_Metadata = v
      }
    case "ReferralSource":
    if v, ok:= ReferralSourceTypePointer(value); ok {
      n.studentparticipation.ReferralSource = v
      }
    case "EntryPerson":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.EntryPerson = ((*String)(v))
      }
    case "ProgramPlacementDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.ProgramPlacementDate = ((*String)(v))
      }
    case "ExtensionComments":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.ExtensionComments = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentparticipation.SIF_ExtendedElements = v
      }
    case "StudentParticipationAsOfDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.StudentParticipationAsOfDate = ((*String)(v))
      }
    case "GiftedEligibilityCriteria":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.GiftedEligibilityCriteria = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "NOREPDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.NOREPDate = ((*String)(v))
      }
    case "ReferralDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.ReferralDate = ((*String)(v))
      }
    case "ProgramStatus":
    if v, ok:= ProgramStatusTypePointer(value); ok {
      n.studentparticipation.ProgramStatus = v
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.StudentPersonalRefId = ((*String)(v))
      }
    case "ProgramEligibilityDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentparticipation.ProgramEligibilityDate = ((*String)(v))
      }
    case "ProgramAvailability":
    if v, ok:= ProgramAvailabilityTypePointer(value); ok {
      n.studentparticipation.ProgramAvailability = v
      }
    case "ProgramFundingSources":
    if v, ok:= ProgramFundingSourcesTypePointer(value); ok {
      n.studentparticipation.ProgramFundingSources = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentParticipation")
        }
        return n
}

  func (s *StudentParticipation) ProgramType() *AUCodeSetsStudentFamilyProgramTypeType {
    if s.studentparticipation.ProgramType == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.ProgramType = ((*AUCodeSetsStudentFamilyProgramTypeType)(v))
      }
      }
      return s.studentparticipation.ProgramType
    }
  func (s *StudentParticipation) ProgramType_IsNil() bool {
    return s.ProgramType == nil || s.studentparticipation.ProgramType == nil
    }
  func (s *StudentParticipation) ProgramPlanEffectiveDate() *String {
    if s.studentparticipation.ProgramPlanEffectiveDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.ProgramPlanEffectiveDate = ((*String)(v))
      }
      }
      return s.studentparticipation.ProgramPlanEffectiveDate
    }
  func (s *StudentParticipation) ProgramPlanEffectiveDate_IsNil() bool {
    return s.ProgramPlanEffectiveDate == nil || s.studentparticipation.ProgramPlanEffectiveDate == nil
    }
  func (s *StudentParticipation) ExtendedDay() *Bool {
    if s.studentparticipation.ExtendedDay == nil {
    if v, ok:= BoolPointer(false); ok {
      s.studentparticipation.ExtendedDay = ((*Bool)(v))
      }
      }
      return s.studentparticipation.ExtendedDay
    }
  func (s *StudentParticipation) ExtendedDay_IsNil() bool {
    return s.ExtendedDay == nil || s.studentparticipation.ExtendedDay == nil
    }
  func (s *StudentParticipation) ParticipationContact() *String {
    if s.studentparticipation.ParticipationContact == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.ParticipationContact = ((*String)(v))
      }
      }
      return s.studentparticipation.ParticipationContact
    }
  func (s *StudentParticipation) ParticipationContact_IsNil() bool {
    return s.ParticipationContact == nil || s.studentparticipation.ParticipationContact == nil
    }
  func (s *StudentParticipation) StudentSpecialEducationFTE() *Float {
    if s.studentparticipation.StudentSpecialEducationFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.studentparticipation.StudentSpecialEducationFTE = ((*Float)(v))
      }
      }
      return s.studentparticipation.StudentSpecialEducationFTE
    }
  func (s *StudentParticipation) StudentSpecialEducationFTE_IsNil() bool {
    return s.StudentSpecialEducationFTE == nil || s.studentparticipation.StudentSpecialEducationFTE == nil
    }
  func (s *StudentParticipation) LocalCodeList() *LocalCodeListType {
    if s.studentparticipation.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentparticipation.LocalCodeList = v
      }
      }
      return s.studentparticipation.LocalCodeList
    }
  func (s *StudentParticipation) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentparticipation.LocalCodeList == nil
    }
  func (s *StudentParticipation) PlacementParentalConsentDate() *String {
    if s.studentparticipation.PlacementParentalConsentDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.PlacementParentalConsentDate = ((*String)(v))
      }
      }
      return s.studentparticipation.PlacementParentalConsentDate
    }
  func (s *StudentParticipation) PlacementParentalConsentDate_IsNil() bool {
    return s.PlacementParentalConsentDate == nil || s.studentparticipation.PlacementParentalConsentDate == nil
    }
  func (s *StudentParticipation) ProgramPlanDate() *String {
    if s.studentparticipation.ProgramPlanDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.ProgramPlanDate = ((*String)(v))
      }
      }
      return s.studentparticipation.ProgramPlanDate
    }
  func (s *StudentParticipation) ProgramPlanDate_IsNil() bool {
    return s.ProgramPlanDate == nil || s.studentparticipation.ProgramPlanDate == nil
    }
  func (s *StudentParticipation) ReevaluationDate() *String {
    if s.studentparticipation.ReevaluationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.ReevaluationDate = ((*String)(v))
      }
      }
      return s.studentparticipation.ReevaluationDate
    }
  func (s *StudentParticipation) ReevaluationDate_IsNil() bool {
    return s.ReevaluationDate == nil || s.studentparticipation.ReevaluationDate == nil
    }
  func (s *StudentParticipation) ExtendedSchoolYear() *Bool {
    if s.studentparticipation.ExtendedSchoolYear == nil {
    if v, ok:= BoolPointer(false); ok {
      s.studentparticipation.ExtendedSchoolYear = ((*Bool)(v))
      }
      }
      return s.studentparticipation.ExtendedSchoolYear
    }
  func (s *StudentParticipation) ExtendedSchoolYear_IsNil() bool {
    return s.ExtendedSchoolYear == nil || s.studentparticipation.ExtendedSchoolYear == nil
    }
  func (s *StudentParticipation) EvaluationExtensionDate() *String {
    if s.studentparticipation.EvaluationExtensionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.EvaluationExtensionDate = ((*String)(v))
      }
      }
      return s.studentparticipation.EvaluationExtensionDate
    }
  func (s *StudentParticipation) EvaluationExtensionDate_IsNil() bool {
    return s.EvaluationExtensionDate == nil || s.studentparticipation.EvaluationExtensionDate == nil
    }
  func (s *StudentParticipation) EvaluationDate() *String {
    if s.studentparticipation.EvaluationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.EvaluationDate = ((*String)(v))
      }
      }
      return s.studentparticipation.EvaluationDate
    }
  func (s *StudentParticipation) EvaluationDate_IsNil() bool {
    return s.EvaluationDate == nil || s.studentparticipation.EvaluationDate == nil
    }
  func (s *StudentParticipation) RefId() *RefIdType {
    if s.studentparticipation.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.RefId = ((*RefIdType)(v))
      }
      }
      return s.studentparticipation.RefId
    }
  func (s *StudentParticipation) RefId_IsNil() bool {
    return s.RefId == nil || s.studentparticipation.RefId == nil
    }
  func (s *StudentParticipation) ManagingSchool() *StudentParticipation_ManagingSchool {
    if s.studentparticipation.ManagingSchool == nil {
     if v, ok:= StudentParticipation_ManagingSchoolPointer(StudentParticipation_ManagingSchool{}); ok {
      s.studentparticipation.ManagingSchool = v
      }
      }
      return s.studentparticipation.ManagingSchool
    }
  func (s *StudentParticipation) ManagingSchool_IsNil() bool {
    return s.ManagingSchool == nil || s.studentparticipation.ManagingSchool == nil
    }
  func (s *StudentParticipation) EvaluationParentalConsentDate() *String {
    if s.studentparticipation.EvaluationParentalConsentDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.EvaluationParentalConsentDate = ((*String)(v))
      }
      }
      return s.studentparticipation.EvaluationParentalConsentDate
    }
  func (s *StudentParticipation) EvaluationParentalConsentDate_IsNil() bool {
    return s.EvaluationParentalConsentDate == nil || s.studentparticipation.EvaluationParentalConsentDate == nil
    }
  func (s *StudentParticipation) SIF_Metadata() *SIF_MetadataType {
    if s.studentparticipation.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentparticipation.SIF_Metadata = v
      }
      }
      return s.studentparticipation.SIF_Metadata
    }
  func (s *StudentParticipation) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentparticipation.SIF_Metadata == nil
    }
  func (s *StudentParticipation) ReferralSource() *ReferralSourceType {
    if s.studentparticipation.ReferralSource == nil {
     if v, ok:= ReferralSourceTypePointer(ReferralSourceType{}); ok {
      s.studentparticipation.ReferralSource = v
      }
      }
      return s.studentparticipation.ReferralSource
    }
  func (s *StudentParticipation) ReferralSource_IsNil() bool {
    return s.ReferralSource == nil || s.studentparticipation.ReferralSource == nil
    }
  func (s *StudentParticipation) EntryPerson() *String {
    if s.studentparticipation.EntryPerson == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.EntryPerson = ((*String)(v))
      }
      }
      return s.studentparticipation.EntryPerson
    }
  func (s *StudentParticipation) EntryPerson_IsNil() bool {
    return s.EntryPerson == nil || s.studentparticipation.EntryPerson == nil
    }
  func (s *StudentParticipation) ProgramPlacementDate() *String {
    if s.studentparticipation.ProgramPlacementDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.ProgramPlacementDate = ((*String)(v))
      }
      }
      return s.studentparticipation.ProgramPlacementDate
    }
  func (s *StudentParticipation) ProgramPlacementDate_IsNil() bool {
    return s.ProgramPlacementDate == nil || s.studentparticipation.ProgramPlacementDate == nil
    }
  func (s *StudentParticipation) ExtensionComments() *String {
    if s.studentparticipation.ExtensionComments == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.ExtensionComments = ((*String)(v))
      }
      }
      return s.studentparticipation.ExtensionComments
    }
  func (s *StudentParticipation) ExtensionComments_IsNil() bool {
    return s.ExtensionComments == nil || s.studentparticipation.ExtensionComments == nil
    }
  func (s *StudentParticipation) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentparticipation.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentparticipation.SIF_ExtendedElements = v
      }
      }
      return s.studentparticipation.SIF_ExtendedElements
    }
  func (s *StudentParticipation) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentparticipation.SIF_ExtendedElements == nil
    }
  func (s *StudentParticipation) StudentParticipationAsOfDate() *String {
    if s.studentparticipation.StudentParticipationAsOfDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.StudentParticipationAsOfDate = ((*String)(v))
      }
      }
      return s.studentparticipation.StudentParticipationAsOfDate
    }
  func (s *StudentParticipation) StudentParticipationAsOfDate_IsNil() bool {
    return s.StudentParticipationAsOfDate == nil || s.studentparticipation.StudentParticipationAsOfDate == nil
    }
  func (s *StudentParticipation) GiftedEligibilityCriteria() *AUCodeSetsYesOrNoCategoryType {
    if s.studentparticipation.GiftedEligibilityCriteria == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.GiftedEligibilityCriteria = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentparticipation.GiftedEligibilityCriteria
    }
  func (s *StudentParticipation) GiftedEligibilityCriteria_IsNil() bool {
    return s.GiftedEligibilityCriteria == nil || s.studentparticipation.GiftedEligibilityCriteria == nil
    }
  func (s *StudentParticipation) NOREPDate() *String {
    if s.studentparticipation.NOREPDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.NOREPDate = ((*String)(v))
      }
      }
      return s.studentparticipation.NOREPDate
    }
  func (s *StudentParticipation) NOREPDate_IsNil() bool {
    return s.NOREPDate == nil || s.studentparticipation.NOREPDate == nil
    }
  func (s *StudentParticipation) ReferralDate() *String {
    if s.studentparticipation.ReferralDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.ReferralDate = ((*String)(v))
      }
      }
      return s.studentparticipation.ReferralDate
    }
  func (s *StudentParticipation) ReferralDate_IsNil() bool {
    return s.ReferralDate == nil || s.studentparticipation.ReferralDate == nil
    }
  func (s *StudentParticipation) ProgramStatus() *ProgramStatusType {
    if s.studentparticipation.ProgramStatus == nil {
     if v, ok:= ProgramStatusTypePointer(ProgramStatusType{}); ok {
      s.studentparticipation.ProgramStatus = v
      }
      }
      return s.studentparticipation.ProgramStatus
    }
  func (s *StudentParticipation) ProgramStatus_IsNil() bool {
    return s.ProgramStatus == nil || s.studentparticipation.ProgramStatus == nil
    }
  func (s *StudentParticipation) StudentPersonalRefId() *String {
    if s.studentparticipation.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.studentparticipation.StudentPersonalRefId
    }
  func (s *StudentParticipation) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.studentparticipation.StudentPersonalRefId == nil
    }
  func (s *StudentParticipation) ProgramEligibilityDate() *String {
    if s.studentparticipation.ProgramEligibilityDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentparticipation.ProgramEligibilityDate = ((*String)(v))
      }
      }
      return s.studentparticipation.ProgramEligibilityDate
    }
  func (s *StudentParticipation) ProgramEligibilityDate_IsNil() bool {
    return s.ProgramEligibilityDate == nil || s.studentparticipation.ProgramEligibilityDate == nil
    }
  func (s *StudentParticipation) ProgramAvailability() *ProgramAvailabilityType {
    if s.studentparticipation.ProgramAvailability == nil {
     if v, ok:= ProgramAvailabilityTypePointer(ProgramAvailabilityType{}); ok {
      s.studentparticipation.ProgramAvailability = v
      }
      }
      return s.studentparticipation.ProgramAvailability
    }
  func (s *StudentParticipation) ProgramAvailability_IsNil() bool {
    return s.ProgramAvailability == nil || s.studentparticipation.ProgramAvailability == nil
    }
  func (s *StudentParticipation) ProgramFundingSources() *ProgramFundingSourcesType {
    if s.studentparticipation.ProgramFundingSources == nil {
     if v, ok:= ProgramFundingSourcesTypePointer(ProgramFundingSourcesType{}); ok {
      s.studentparticipation.ProgramFundingSources = v
      }
      }
      return s.studentparticipation.ProgramFundingSources
    }
  func (s *StudentParticipation) ProgramFundingSources_IsNil() bool {
    return s.ProgramFundingSources == nil || s.studentparticipation.ProgramFundingSources == nil
    }

func (n *FQContextualQuestionType) Unset(key string) *FQContextualQuestionType {
        switch key {
  case "FQContext":
   n.fqcontextualquestiontype.FQContext = nil
  case "FQAnswer":
   n.fqcontextualquestiontype.FQAnswer = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FQContextualQuestionType")
        }
        return n
}

func (n *FQContextualQuestionType) SetProperty(key string, value interface{}) *FQContextualQuestionType {
        if n == nil {
                n, _ = FQContextualQuestionTypePointer(FQContextualQuestionType{})
        }
        switch key {
    case "FQContext":
    
    if v, ok:= StringPointer(value); ok {
      n.fqcontextualquestiontype.FQContext = ((*String)(v))
      }
    case "FQAnswer":
    
    if v, ok:= StringPointer(value); ok {
      n.fqcontextualquestiontype.FQAnswer = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FQContextualQuestionType")
        }
        return n
}

  func (s *FQContextualQuestionType) FQContext() *String {
    if s.fqcontextualquestiontype.FQContext == nil {
    if v, ok:= StringPointer(""); ok {
      s.fqcontextualquestiontype.FQContext = ((*String)(v))
      }
      }
      return s.fqcontextualquestiontype.FQContext
    }
  func (s *FQContextualQuestionType) FQContext_IsNil() bool {
    return s.FQContext == nil || s.fqcontextualquestiontype.FQContext == nil
    }
  func (s *FQContextualQuestionType) FQAnswer() *String {
    if s.fqcontextualquestiontype.FQAnswer == nil {
    if v, ok:= StringPointer(""); ok {
      s.fqcontextualquestiontype.FQAnswer = ((*String)(v))
      }
      }
      return s.fqcontextualquestiontype.FQAnswer
    }
  func (s *FQContextualQuestionType) FQAnswer_IsNil() bool {
    return s.FQAnswer == nil || s.fqcontextualquestiontype.FQAnswer == nil
    }

func (n *ScoreDescriptionType) Unset(key string) *ScoreDescriptionType {
        switch key {
  case "ScoreValue":
   n.scoredescriptiontype.ScoreValue = nil
  case "Descriptor":
   n.scoredescriptiontype.Descriptor = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScoreDescriptionType")
        }
        return n
}

func (n *ScoreDescriptionType) SetProperty(key string, value interface{}) *ScoreDescriptionType {
        if n == nil {
                n, _ = ScoreDescriptionTypePointer(ScoreDescriptionType{})
        }
        switch key {
    case "ScoreValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.scoredescriptiontype.ScoreValue = ((*Float)(v))
      }
    case "Descriptor":
    
    if v, ok:= StringPointer(value); ok {
      n.scoredescriptiontype.Descriptor = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScoreDescriptionType")
        }
        return n
}

  func (s *ScoreDescriptionType) ScoreValue() *Float {
    if s.scoredescriptiontype.ScoreValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.scoredescriptiontype.ScoreValue = ((*Float)(v))
      }
      }
      return s.scoredescriptiontype.ScoreValue
    }
  func (s *ScoreDescriptionType) ScoreValue_IsNil() bool {
    return s.ScoreValue == nil || s.scoredescriptiontype.ScoreValue == nil
    }
  func (s *ScoreDescriptionType) Descriptor() *String {
    if s.scoredescriptiontype.Descriptor == nil {
    if v, ok:= StringPointer(""); ok {
      s.scoredescriptiontype.Descriptor = ((*String)(v))
      }
      }
      return s.scoredescriptiontype.Descriptor
    }
  func (s *ScoreDescriptionType) Descriptor_IsNil() bool {
    return s.Descriptor == nil || s.scoredescriptiontype.Descriptor == nil
    }

func (n *PeriodAttendanceType) Unset(key string) *PeriodAttendanceType {
        switch key {
  case "AttendanceCode":
   n.periodattendancetype.AttendanceCode = nil
  case "Date":
   n.periodattendancetype.Date = nil
  case "TimeIn":
   n.periodattendancetype.TimeIn = nil
  case "TeacherList":
   n.periodattendancetype.TeacherList = nil
  case "TimetablePeriod":
   n.periodattendancetype.TimetablePeriod = nil
  case "TimeTableSubjectRefId":
   n.periodattendancetype.TimeTableSubjectRefId = nil
  case "TimeOut":
   n.periodattendancetype.TimeOut = nil
  case "AttendanceNote":
   n.periodattendancetype.AttendanceNote = nil
  case "SessionInfoRefId":
   n.periodattendancetype.SessionInfoRefId = nil
  case "TimeTableCellRefId":
   n.periodattendancetype.TimeTableCellRefId = nil
  case "EndTime":
   n.periodattendancetype.EndTime = nil
  case "StartTime":
   n.periodattendancetype.StartTime = nil
  case "AttendanceStatus":
   n.periodattendancetype.AttendanceStatus = nil
  case "AttendanceType":
   n.periodattendancetype.AttendanceType = nil
  case "DayId":
   n.periodattendancetype.DayId = nil
  case "RoomList":
   n.periodattendancetype.RoomList = nil
  case "ScheduledActivityRefId":
   n.periodattendancetype.ScheduledActivityRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PeriodAttendanceType")
        }
        return n
}

func (n *PeriodAttendanceType) SetProperty(key string, value interface{}) *PeriodAttendanceType {
        if n == nil {
                n, _ = PeriodAttendanceTypePointer(PeriodAttendanceType{})
        }
        switch key {
    case "AttendanceCode":
    if v, ok:= AttendanceCodeTypePointer(value); ok {
      n.periodattendancetype.AttendanceCode = v
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.Date = ((*String)(v))
      }
    case "TimeIn":
    
    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.TimeIn = ((*String)(v))
      }
    case "TeacherList":
    if v, ok:= ScheduledTeacherListTypePointer(value); ok {
      n.periodattendancetype.TeacherList = v
      }
    case "TimetablePeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.TimetablePeriod = ((*String)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
    case "TimeOut":
    
    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.TimeOut = ((*String)(v))
      }
    case "AttendanceNote":
    
    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.AttendanceNote = ((*String)(v))
      }
    case "SessionInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.SessionInfoRefId = ((*String)(v))
      }
    case "TimeTableCellRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.TimeTableCellRefId = ((*String)(v))
      }
    case "EndTime":
    
    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.EndTime = ((*String)(v))
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.StartTime = ((*String)(v))
      }
    case "AttendanceStatus":
        if !CodesetContains(AUCodeSetsAttendanceStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAttendanceStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
    case "AttendanceType":
    
    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.AttendanceType = ((*String)(v))
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.DayId = ((*LocalIdType)(v))
      }
    case "RoomList":
    if v, ok:= RoomListTypePointer(value); ok {
      n.periodattendancetype.RoomList = v
      }
    case "ScheduledActivityRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.periodattendancetype.ScheduledActivityRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PeriodAttendanceType")
        }
        return n
}

  func (s *PeriodAttendanceType) AttendanceCode() *AttendanceCodeType {
    if s.periodattendancetype.AttendanceCode == nil {
     if v, ok:= AttendanceCodeTypePointer(AttendanceCodeType{}); ok {
      s.periodattendancetype.AttendanceCode = v
      }
      }
      return s.periodattendancetype.AttendanceCode
    }
  func (s *PeriodAttendanceType) AttendanceCode_IsNil() bool {
    return s.AttendanceCode == nil || s.periodattendancetype.AttendanceCode == nil
    }
  func (s *PeriodAttendanceType) Date() *String {
    if s.periodattendancetype.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.Date = ((*String)(v))
      }
      }
      return s.periodattendancetype.Date
    }
  func (s *PeriodAttendanceType) Date_IsNil() bool {
    return s.Date == nil || s.periodattendancetype.Date == nil
    }
  func (s *PeriodAttendanceType) TimeIn() *String {
    if s.periodattendancetype.TimeIn == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.TimeIn = ((*String)(v))
      }
      }
      return s.periodattendancetype.TimeIn
    }
  func (s *PeriodAttendanceType) TimeIn_IsNil() bool {
    return s.TimeIn == nil || s.periodattendancetype.TimeIn == nil
    }
  func (s *PeriodAttendanceType) TeacherList() *ScheduledTeacherListType {
    if s.periodattendancetype.TeacherList == nil {
     if v, ok:= ScheduledTeacherListTypePointer(ScheduledTeacherListType{}); ok {
      s.periodattendancetype.TeacherList = v
      }
      }
      return s.periodattendancetype.TeacherList
    }
  func (s *PeriodAttendanceType) TeacherList_IsNil() bool {
    return s.TeacherList == nil || s.periodattendancetype.TeacherList == nil
    }
  func (s *PeriodAttendanceType) TimetablePeriod() *String {
    if s.periodattendancetype.TimetablePeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.TimetablePeriod = ((*String)(v))
      }
      }
      return s.periodattendancetype.TimetablePeriod
    }
  func (s *PeriodAttendanceType) TimetablePeriod_IsNil() bool {
    return s.TimetablePeriod == nil || s.periodattendancetype.TimetablePeriod == nil
    }
  func (s *PeriodAttendanceType) TimeTableSubjectRefId() *RefIdType {
    if s.periodattendancetype.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
      }
      return s.periodattendancetype.TimeTableSubjectRefId
    }
  func (s *PeriodAttendanceType) TimeTableSubjectRefId_IsNil() bool {
    return s.TimeTableSubjectRefId == nil || s.periodattendancetype.TimeTableSubjectRefId == nil
    }
  func (s *PeriodAttendanceType) TimeOut() *String {
    if s.periodattendancetype.TimeOut == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.TimeOut = ((*String)(v))
      }
      }
      return s.periodattendancetype.TimeOut
    }
  func (s *PeriodAttendanceType) TimeOut_IsNil() bool {
    return s.TimeOut == nil || s.periodattendancetype.TimeOut == nil
    }
  func (s *PeriodAttendanceType) AttendanceNote() *String {
    if s.periodattendancetype.AttendanceNote == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.AttendanceNote = ((*String)(v))
      }
      }
      return s.periodattendancetype.AttendanceNote
    }
  func (s *PeriodAttendanceType) AttendanceNote_IsNil() bool {
    return s.AttendanceNote == nil || s.periodattendancetype.AttendanceNote == nil
    }
  func (s *PeriodAttendanceType) SessionInfoRefId() *String {
    if s.periodattendancetype.SessionInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.SessionInfoRefId = ((*String)(v))
      }
      }
      return s.periodattendancetype.SessionInfoRefId
    }
  func (s *PeriodAttendanceType) SessionInfoRefId_IsNil() bool {
    return s.SessionInfoRefId == nil || s.periodattendancetype.SessionInfoRefId == nil
    }
  func (s *PeriodAttendanceType) TimeTableCellRefId() *String {
    if s.periodattendancetype.TimeTableCellRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.TimeTableCellRefId = ((*String)(v))
      }
      }
      return s.periodattendancetype.TimeTableCellRefId
    }
  func (s *PeriodAttendanceType) TimeTableCellRefId_IsNil() bool {
    return s.TimeTableCellRefId == nil || s.periodattendancetype.TimeTableCellRefId == nil
    }
  func (s *PeriodAttendanceType) EndTime() *String {
    if s.periodattendancetype.EndTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.EndTime = ((*String)(v))
      }
      }
      return s.periodattendancetype.EndTime
    }
  func (s *PeriodAttendanceType) EndTime_IsNil() bool {
    return s.EndTime == nil || s.periodattendancetype.EndTime == nil
    }
  func (s *PeriodAttendanceType) StartTime() *String {
    if s.periodattendancetype.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.StartTime = ((*String)(v))
      }
      }
      return s.periodattendancetype.StartTime
    }
  func (s *PeriodAttendanceType) StartTime_IsNil() bool {
    return s.StartTime == nil || s.periodattendancetype.StartTime == nil
    }
  func (s *PeriodAttendanceType) AttendanceStatus() *AUCodeSetsAttendanceStatusType {
    if s.periodattendancetype.AttendanceStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
      }
      return s.periodattendancetype.AttendanceStatus
    }
  func (s *PeriodAttendanceType) AttendanceStatus_IsNil() bool {
    return s.AttendanceStatus == nil || s.periodattendancetype.AttendanceStatus == nil
    }
  func (s *PeriodAttendanceType) AttendanceType() *String {
    if s.periodattendancetype.AttendanceType == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.AttendanceType = ((*String)(v))
      }
      }
      return s.periodattendancetype.AttendanceType
    }
  func (s *PeriodAttendanceType) AttendanceType_IsNil() bool {
    return s.AttendanceType == nil || s.periodattendancetype.AttendanceType == nil
    }
  func (s *PeriodAttendanceType) DayId() *LocalIdType {
    if s.periodattendancetype.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.DayId = ((*LocalIdType)(v))
      }
      }
      return s.periodattendancetype.DayId
    }
  func (s *PeriodAttendanceType) DayId_IsNil() bool {
    return s.DayId == nil || s.periodattendancetype.DayId == nil
    }
  func (s *PeriodAttendanceType) RoomList() *RoomListType {
    if s.periodattendancetype.RoomList == nil {
     if v, ok:= RoomListTypePointer(RoomListType{}); ok {
      s.periodattendancetype.RoomList = v
      }
      }
      return s.periodattendancetype.RoomList
    }
  func (s *PeriodAttendanceType) RoomList_IsNil() bool {
    return s.RoomList == nil || s.periodattendancetype.RoomList == nil
    }
  func (s *PeriodAttendanceType) ScheduledActivityRefId() *String {
    if s.periodattendancetype.ScheduledActivityRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.periodattendancetype.ScheduledActivityRefId = ((*String)(v))
      }
      }
      return s.periodattendancetype.ScheduledActivityRefId
    }
  func (s *PeriodAttendanceType) ScheduledActivityRefId_IsNil() bool {
    return s.ScheduledActivityRefId == nil || s.periodattendancetype.ScheduledActivityRefId == nil
    }

func (n *StudentPeriodAttendance) Unset(key string) *StudentPeriodAttendance {
        switch key {
  case "AuditInfo":
   n.studentperiodattendance.AuditInfo = nil
  case "AttendanceCode":
   n.studentperiodattendance.AttendanceCode = nil
  case "Date":
   n.studentperiodattendance.Date = nil
  case "TimeIn":
   n.studentperiodattendance.TimeIn = nil
  case "TimetablePeriod":
   n.studentperiodattendance.TimetablePeriod = nil
  case "SchoolInfoRefId":
   n.studentperiodattendance.SchoolInfoRefId = nil
  case "TimeOut":
   n.studentperiodattendance.TimeOut = nil
  case "LocalCodeList":
   n.studentperiodattendance.LocalCodeList = nil
  case "SessionInfoRefId":
   n.studentperiodattendance.SessionInfoRefId = nil
  case "SIF_ExtendedElements":
   n.studentperiodattendance.SIF_ExtendedElements = nil
  case "SchoolYear":
   n.studentperiodattendance.SchoolYear = nil
  case "AttendanceStatus":
   n.studentperiodattendance.AttendanceStatus = nil
  case "StudentPersonalRefId":
   n.studentperiodattendance.StudentPersonalRefId = nil
  case "RefId":
   n.studentperiodattendance.RefId = nil
  case "AttendanceComment":
   n.studentperiodattendance.AttendanceComment = nil
  case "SIF_Metadata":
   n.studentperiodattendance.SIF_Metadata = nil
  case "ScheduledActivityRefId":
   n.studentperiodattendance.ScheduledActivityRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentPeriodAttendance")
        }
        return n
}

func (n *StudentPeriodAttendance) SetProperty(key string, value interface{}) *StudentPeriodAttendance {
        if n == nil {
                n, _ = StudentPeriodAttendancePointer(StudentPeriodAttendance{})
        }
        switch key {
    case "AuditInfo":
    if v, ok:= AuditInfoTypePointer(value); ok {
      n.studentperiodattendance.AuditInfo = v
      }
    case "AttendanceCode":
    if v, ok:= AttendanceCodeTypePointer(value); ok {
      n.studentperiodattendance.AttendanceCode = v
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.studentperiodattendance.Date = ((*String)(v))
      }
    case "TimeIn":
    
    if v, ok:= StringPointer(value); ok {
      n.studentperiodattendance.TimeIn = ((*String)(v))
      }
    case "TimetablePeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.studentperiodattendance.TimetablePeriod = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentperiodattendance.SchoolInfoRefId = ((*String)(v))
      }
    case "TimeOut":
    
    if v, ok:= StringPointer(value); ok {
      n.studentperiodattendance.TimeOut = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentperiodattendance.LocalCodeList = v
      }
    case "SessionInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentperiodattendance.SessionInfoRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentperiodattendance.SIF_ExtendedElements = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.studentperiodattendance.SchoolYear = ((*SchoolYearType)(v))
      }
    case "AttendanceStatus":
        if !CodesetContains(AUCodeSetsAttendanceStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAttendanceStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentperiodattendance.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentperiodattendance.StudentPersonalRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentperiodattendance.RefId = ((*RefIdType)(v))
      }
    case "AttendanceComment":
    
    if v, ok:= StringPointer(value); ok {
      n.studentperiodattendance.AttendanceComment = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentperiodattendance.SIF_Metadata = v
      }
    case "ScheduledActivityRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentperiodattendance.ScheduledActivityRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentPeriodAttendance")
        }
        return n
}

  func (s *StudentPeriodAttendance) AuditInfo() *AuditInfoType {
    if s.studentperiodattendance.AuditInfo == nil {
     if v, ok:= AuditInfoTypePointer(AuditInfoType{}); ok {
      s.studentperiodattendance.AuditInfo = v
      }
      }
      return s.studentperiodattendance.AuditInfo
    }
  func (s *StudentPeriodAttendance) AuditInfo_IsNil() bool {
    return s.AuditInfo == nil || s.studentperiodattendance.AuditInfo == nil
    }
  func (s *StudentPeriodAttendance) AttendanceCode() *AttendanceCodeType {
    if s.studentperiodattendance.AttendanceCode == nil {
     if v, ok:= AttendanceCodeTypePointer(AttendanceCodeType{}); ok {
      s.studentperiodattendance.AttendanceCode = v
      }
      }
      return s.studentperiodattendance.AttendanceCode
    }
  func (s *StudentPeriodAttendance) AttendanceCode_IsNil() bool {
    return s.AttendanceCode == nil || s.studentperiodattendance.AttendanceCode == nil
    }
  func (s *StudentPeriodAttendance) Date() *String {
    if s.studentperiodattendance.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentperiodattendance.Date = ((*String)(v))
      }
      }
      return s.studentperiodattendance.Date
    }
  func (s *StudentPeriodAttendance) Date_IsNil() bool {
    return s.Date == nil || s.studentperiodattendance.Date == nil
    }
  func (s *StudentPeriodAttendance) TimeIn() *String {
    if s.studentperiodattendance.TimeIn == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentperiodattendance.TimeIn = ((*String)(v))
      }
      }
      return s.studentperiodattendance.TimeIn
    }
  func (s *StudentPeriodAttendance) TimeIn_IsNil() bool {
    return s.TimeIn == nil || s.studentperiodattendance.TimeIn == nil
    }
  func (s *StudentPeriodAttendance) TimetablePeriod() *String {
    if s.studentperiodattendance.TimetablePeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentperiodattendance.TimetablePeriod = ((*String)(v))
      }
      }
      return s.studentperiodattendance.TimetablePeriod
    }
  func (s *StudentPeriodAttendance) TimetablePeriod_IsNil() bool {
    return s.TimetablePeriod == nil || s.studentperiodattendance.TimetablePeriod == nil
    }
  func (s *StudentPeriodAttendance) SchoolInfoRefId() *String {
    if s.studentperiodattendance.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentperiodattendance.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.studentperiodattendance.SchoolInfoRefId
    }
  func (s *StudentPeriodAttendance) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.studentperiodattendance.SchoolInfoRefId == nil
    }
  func (s *StudentPeriodAttendance) TimeOut() *String {
    if s.studentperiodattendance.TimeOut == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentperiodattendance.TimeOut = ((*String)(v))
      }
      }
      return s.studentperiodattendance.TimeOut
    }
  func (s *StudentPeriodAttendance) TimeOut_IsNil() bool {
    return s.TimeOut == nil || s.studentperiodattendance.TimeOut == nil
    }
  func (s *StudentPeriodAttendance) LocalCodeList() *LocalCodeListType {
    if s.studentperiodattendance.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentperiodattendance.LocalCodeList = v
      }
      }
      return s.studentperiodattendance.LocalCodeList
    }
  func (s *StudentPeriodAttendance) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentperiodattendance.LocalCodeList == nil
    }
  func (s *StudentPeriodAttendance) SessionInfoRefId() *String {
    if s.studentperiodattendance.SessionInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentperiodattendance.SessionInfoRefId = ((*String)(v))
      }
      }
      return s.studentperiodattendance.SessionInfoRefId
    }
  func (s *StudentPeriodAttendance) SessionInfoRefId_IsNil() bool {
    return s.SessionInfoRefId == nil || s.studentperiodattendance.SessionInfoRefId == nil
    }
  func (s *StudentPeriodAttendance) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentperiodattendance.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentperiodattendance.SIF_ExtendedElements = v
      }
      }
      return s.studentperiodattendance.SIF_ExtendedElements
    }
  func (s *StudentPeriodAttendance) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentperiodattendance.SIF_ExtendedElements == nil
    }
  func (s *StudentPeriodAttendance) SchoolYear() *SchoolYearType {
    if s.studentperiodattendance.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentperiodattendance.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.studentperiodattendance.SchoolYear
    }
  func (s *StudentPeriodAttendance) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.studentperiodattendance.SchoolYear == nil
    }
  func (s *StudentPeriodAttendance) AttendanceStatus() *AUCodeSetsAttendanceStatusType {
    if s.studentperiodattendance.AttendanceStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentperiodattendance.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
      }
      return s.studentperiodattendance.AttendanceStatus
    }
  func (s *StudentPeriodAttendance) AttendanceStatus_IsNil() bool {
    return s.AttendanceStatus == nil || s.studentperiodattendance.AttendanceStatus == nil
    }
  func (s *StudentPeriodAttendance) StudentPersonalRefId() *String {
    if s.studentperiodattendance.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentperiodattendance.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.studentperiodattendance.StudentPersonalRefId
    }
  func (s *StudentPeriodAttendance) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.studentperiodattendance.StudentPersonalRefId == nil
    }
  func (s *StudentPeriodAttendance) RefId() *RefIdType {
    if s.studentperiodattendance.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentperiodattendance.RefId = ((*RefIdType)(v))
      }
      }
      return s.studentperiodattendance.RefId
    }
  func (s *StudentPeriodAttendance) RefId_IsNil() bool {
    return s.RefId == nil || s.studentperiodattendance.RefId == nil
    }
  func (s *StudentPeriodAttendance) AttendanceComment() *String {
    if s.studentperiodattendance.AttendanceComment == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentperiodattendance.AttendanceComment = ((*String)(v))
      }
      }
      return s.studentperiodattendance.AttendanceComment
    }
  func (s *StudentPeriodAttendance) AttendanceComment_IsNil() bool {
    return s.AttendanceComment == nil || s.studentperiodattendance.AttendanceComment == nil
    }
  func (s *StudentPeriodAttendance) SIF_Metadata() *SIF_MetadataType {
    if s.studentperiodattendance.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentperiodattendance.SIF_Metadata = v
      }
      }
      return s.studentperiodattendance.SIF_Metadata
    }
  func (s *StudentPeriodAttendance) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentperiodattendance.SIF_Metadata == nil
    }
  func (s *StudentPeriodAttendance) ScheduledActivityRefId() *String {
    if s.studentperiodattendance.ScheduledActivityRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentperiodattendance.ScheduledActivityRefId = ((*String)(v))
      }
      }
      return s.studentperiodattendance.ScheduledActivityRefId
    }
  func (s *StudentPeriodAttendance) ScheduledActivityRefId_IsNil() bool {
    return s.ScheduledActivityRefId == nil || s.studentperiodattendance.ScheduledActivityRefId == nil
    }

func (n *RoomInfo) Unset(key string) *RoomInfo {
        switch key {
  case "Capacity":
   n.roominfo.Capacity = nil
  case "HomeroomNumber":
   n.roominfo.HomeroomNumber = nil
  case "PhoneNumber":
   n.roominfo.PhoneNumber = nil
  case "Building":
   n.roominfo.Building = nil
  case "Description":
   n.roominfo.Description = nil
  case "RoomNumber":
   n.roominfo.RoomNumber = nil
  case "SchoolInfoRefId":
   n.roominfo.SchoolInfoRefId = nil
  case "SIF_ExtendedElements":
   n.roominfo.SIF_ExtendedElements = nil
  case "RoomType":
   n.roominfo.RoomType = nil
  case "LocalCodeList":
   n.roominfo.LocalCodeList = nil
  case "RefId":
   n.roominfo.RefId = nil
  case "Size":
   n.roominfo.Size = nil
  case "LocalId":
   n.roominfo.LocalId = nil
  case "AvailableForTimetable":
   n.roominfo.AvailableForTimetable = nil
  case "StaffList":
   n.roominfo.StaffList = nil
  case "SIF_Metadata":
   n.roominfo.SIF_Metadata = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "RoomInfo")
        }
        return n
}

func (n *RoomInfo) SetProperty(key string, value interface{}) *RoomInfo {
        if n == nil {
                n, _ = RoomInfoPointer(RoomInfo{})
        }
        switch key {
    case "Capacity":
    
    if v, ok:= IntPointer(value); ok {
      n.roominfo.Capacity = ((*Int)(v))
      }
    case "HomeroomNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.roominfo.HomeroomNumber = ((*String)(v))
      }
    case "PhoneNumber":
    if v, ok:= PhoneNumberTypePointer(value); ok {
      n.roominfo.PhoneNumber = v
      }
    case "Building":
    
    if v, ok:= StringPointer(value); ok {
      n.roominfo.Building = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.roominfo.Description = ((*String)(v))
      }
    case "RoomNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.roominfo.RoomNumber = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.roominfo.SchoolInfoRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.roominfo.SIF_ExtendedElements = v
      }
    case "RoomType":
    
    if v, ok:= StringPointer(value); ok {
      n.roominfo.RoomType = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.roominfo.LocalCodeList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.roominfo.RefId = ((*RefIdType)(v))
      }
    case "Size":
    
    if v, ok:= FloatPointer(value); ok {
      n.roominfo.Size = ((*Float)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.roominfo.LocalId = ((*LocalIdType)(v))
      }
    case "AvailableForTimetable":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.roominfo.AvailableForTimetable = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "StaffList":
    if v, ok:= StaffListTypePointer(value); ok {
      n.roominfo.StaffList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.roominfo.SIF_Metadata = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "RoomInfo")
        }
        return n
}

  func (s *RoomInfo) Capacity() *Int {
    if s.roominfo.Capacity == nil {
    if v, ok:= IntPointer(0); ok {
      s.roominfo.Capacity = ((*Int)(v))
      }
      }
      return s.roominfo.Capacity
    }
  func (s *RoomInfo) Capacity_IsNil() bool {
    return s.Capacity == nil || s.roominfo.Capacity == nil
    }
  func (s *RoomInfo) HomeroomNumber() *String {
    if s.roominfo.HomeroomNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.roominfo.HomeroomNumber = ((*String)(v))
      }
      }
      return s.roominfo.HomeroomNumber
    }
  func (s *RoomInfo) HomeroomNumber_IsNil() bool {
    return s.HomeroomNumber == nil || s.roominfo.HomeroomNumber == nil
    }
  func (s *RoomInfo) PhoneNumber() *PhoneNumberType {
    if s.roominfo.PhoneNumber == nil {
     if v, ok:= PhoneNumberTypePointer(PhoneNumberType{}); ok {
      s.roominfo.PhoneNumber = v
      }
      }
      return s.roominfo.PhoneNumber
    }
  func (s *RoomInfo) PhoneNumber_IsNil() bool {
    return s.PhoneNumber == nil || s.roominfo.PhoneNumber == nil
    }
  func (s *RoomInfo) Building() *String {
    if s.roominfo.Building == nil {
    if v, ok:= StringPointer(""); ok {
      s.roominfo.Building = ((*String)(v))
      }
      }
      return s.roominfo.Building
    }
  func (s *RoomInfo) Building_IsNil() bool {
    return s.Building == nil || s.roominfo.Building == nil
    }
  func (s *RoomInfo) Description() *String {
    if s.roominfo.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.roominfo.Description = ((*String)(v))
      }
      }
      return s.roominfo.Description
    }
  func (s *RoomInfo) Description_IsNil() bool {
    return s.Description == nil || s.roominfo.Description == nil
    }
  func (s *RoomInfo) RoomNumber() *String {
    if s.roominfo.RoomNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.roominfo.RoomNumber = ((*String)(v))
      }
      }
      return s.roominfo.RoomNumber
    }
  func (s *RoomInfo) RoomNumber_IsNil() bool {
    return s.RoomNumber == nil || s.roominfo.RoomNumber == nil
    }
  func (s *RoomInfo) SchoolInfoRefId() *String {
    if s.roominfo.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.roominfo.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.roominfo.SchoolInfoRefId
    }
  func (s *RoomInfo) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.roominfo.SchoolInfoRefId == nil
    }
  func (s *RoomInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.roominfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.roominfo.SIF_ExtendedElements = v
      }
      }
      return s.roominfo.SIF_ExtendedElements
    }
  func (s *RoomInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.roominfo.SIF_ExtendedElements == nil
    }
  func (s *RoomInfo) RoomType() *String {
    if s.roominfo.RoomType == nil {
    if v, ok:= StringPointer(""); ok {
      s.roominfo.RoomType = ((*String)(v))
      }
      }
      return s.roominfo.RoomType
    }
  func (s *RoomInfo) RoomType_IsNil() bool {
    return s.RoomType == nil || s.roominfo.RoomType == nil
    }
  func (s *RoomInfo) LocalCodeList() *LocalCodeListType {
    if s.roominfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.roominfo.LocalCodeList = v
      }
      }
      return s.roominfo.LocalCodeList
    }
  func (s *RoomInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.roominfo.LocalCodeList == nil
    }
  func (s *RoomInfo) RefId() *RefIdType {
    if s.roominfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.roominfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.roominfo.RefId
    }
  func (s *RoomInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.roominfo.RefId == nil
    }
  func (s *RoomInfo) Size() *Float {
    if s.roominfo.Size == nil {
    if v, ok:= FloatPointer(0); ok {
      s.roominfo.Size = ((*Float)(v))
      }
      }
      return s.roominfo.Size
    }
  func (s *RoomInfo) Size_IsNil() bool {
    return s.Size == nil || s.roominfo.Size == nil
    }
  func (s *RoomInfo) LocalId() *LocalIdType {
    if s.roominfo.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.roominfo.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.roominfo.LocalId
    }
  func (s *RoomInfo) LocalId_IsNil() bool {
    return s.LocalId == nil || s.roominfo.LocalId == nil
    }
  func (s *RoomInfo) AvailableForTimetable() *AUCodeSetsYesOrNoCategoryType {
    if s.roominfo.AvailableForTimetable == nil {
    if v, ok:= StringPointer(""); ok {
      s.roominfo.AvailableForTimetable = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.roominfo.AvailableForTimetable
    }
  func (s *RoomInfo) AvailableForTimetable_IsNil() bool {
    return s.AvailableForTimetable == nil || s.roominfo.AvailableForTimetable == nil
    }
  func (s *RoomInfo) StaffList() *StaffListType {
    if s.roominfo.StaffList == nil {
     if v, ok:= StaffListTypePointer(StaffListType{}); ok {
      s.roominfo.StaffList = v
      }
      }
      return s.roominfo.StaffList
    }
  func (s *RoomInfo) StaffList_IsNil() bool {
    return s.StaffList == nil || s.roominfo.StaffList == nil
    }
  func (s *RoomInfo) SIF_Metadata() *SIF_MetadataType {
    if s.roominfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.roominfo.SIF_Metadata = v
      }
      }
      return s.roominfo.SIF_Metadata
    }
  func (s *RoomInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.roominfo.SIF_Metadata == nil
    }

func (n *MonetaryAmountType) Unset(key string) *MonetaryAmountType {
        switch key {
  case "Currency":
   n.monetaryamounttype.Currency = nil
  case "Value":
   n.monetaryamounttype.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MonetaryAmountType")
        }
        return n
}

func (n *MonetaryAmountType) SetProperty(key string, value interface{}) *MonetaryAmountType {
        if n == nil {
                n, _ = MonetaryAmountTypePointer(MonetaryAmountType{})
        }
        switch key {
    case "Currency":
        if !CodesetContains(ISO4217CurrencyNamesAndCodeElementsType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "ISO4217CurrencyNamesAndCodeElementsType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.monetaryamounttype.Currency = ((*ISO4217CurrencyNamesAndCodeElementsType)(v))
      }
    case "Value":
    
    if v, ok:= FloatPointer(value); ok {
      n.monetaryamounttype.Value = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MonetaryAmountType")
        }
        return n
}

  func (s *MonetaryAmountType) Currency() *ISO4217CurrencyNamesAndCodeElementsType {
    if s.monetaryamounttype.Currency == nil {
    if v, ok:= StringPointer(""); ok {
      s.monetaryamounttype.Currency = ((*ISO4217CurrencyNamesAndCodeElementsType)(v))
      }
      }
      return s.monetaryamounttype.Currency
    }
  func (s *MonetaryAmountType) Currency_IsNil() bool {
    return s.Currency == nil || s.monetaryamounttype.Currency == nil
    }
  func (s *MonetaryAmountType) Value() *Float {
    if s.monetaryamounttype.Value == nil {
    if v, ok:= FloatPointer(0); ok {
      s.monetaryamounttype.Value = ((*Float)(v))
      }
      }
      return s.monetaryamounttype.Value
    }
  func (s *MonetaryAmountType) Value_IsNil() bool {
    return s.Value == nil || s.monetaryamounttype.Value == nil
    }

func (n *AddressCollectionReportingType) Unset(key string) *AddressCollectionReportingType {
        switch key {
  case "EntityContact":
   n.addresscollectionreportingtype.EntityContact = nil
  case "ACARAId":
   n.addresscollectionreportingtype.ACARAId = nil
  case "LocalId":
   n.addresscollectionreportingtype.LocalId = nil
  case "AddressCollectionStudentList":
   n.addresscollectionreportingtype.AddressCollectionStudentList = nil
  case "SchoolInfoRefId":
   n.addresscollectionreportingtype.SchoolInfoRefId = nil
  case "EntityLevel":
   n.addresscollectionreportingtype.EntityLevel = nil
  case "CommonwealthId":
   n.addresscollectionreportingtype.CommonwealthId = nil
  case "AGContextualQuestionList":
   n.addresscollectionreportingtype.AGContextualQuestionList = nil
  case "StateProvinceId":
   n.addresscollectionreportingtype.StateProvinceId = nil
  case "EntityName":
   n.addresscollectionreportingtype.EntityName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressCollectionReportingType")
        }
        return n
}

func (n *AddressCollectionReportingType) SetProperty(key string, value interface{}) *AddressCollectionReportingType {
        if n == nil {
                n, _ = AddressCollectionReportingTypePointer(AddressCollectionReportingType{})
        }
        switch key {
    case "EntityContact":
    if v, ok:= EntityContactInfoTypePointer(value); ok {
      n.addresscollectionreportingtype.EntityContact = v
      }
    case "ACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.addresscollectionreportingtype.ACARAId = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.addresscollectionreportingtype.LocalId = ((*LocalIdType)(v))
      }
    case "AddressCollectionStudentList":
    if v, ok:= AddressCollectionStudentListTypePointer(value); ok {
      n.addresscollectionreportingtype.AddressCollectionStudentList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.addresscollectionreportingtype.SchoolInfoRefId = ((*String)(v))
      }
    case "EntityLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.addresscollectionreportingtype.EntityLevel = ((*String)(v))
      }
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.addresscollectionreportingtype.CommonwealthId = ((*String)(v))
      }
    case "AGContextualQuestionList":
    if v, ok:= AGContextualQuestionListTypePointer(value); ok {
      n.addresscollectionreportingtype.AGContextualQuestionList = v
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.addresscollectionreportingtype.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "EntityName":
    
    if v, ok:= StringPointer(value); ok {
      n.addresscollectionreportingtype.EntityName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressCollectionReportingType")
        }
        return n
}

  func (s *AddressCollectionReportingType) EntityContact() *EntityContactInfoType {
    if s.addresscollectionreportingtype.EntityContact == nil {
     if v, ok:= EntityContactInfoTypePointer(EntityContactInfoType{}); ok {
      s.addresscollectionreportingtype.EntityContact = v
      }
      }
      return s.addresscollectionreportingtype.EntityContact
    }
  func (s *AddressCollectionReportingType) EntityContact_IsNil() bool {
    return s.EntityContact == nil || s.addresscollectionreportingtype.EntityContact == nil
    }
  func (s *AddressCollectionReportingType) ACARAId() *String {
    if s.addresscollectionreportingtype.ACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollectionreportingtype.ACARAId = ((*String)(v))
      }
      }
      return s.addresscollectionreportingtype.ACARAId
    }
  func (s *AddressCollectionReportingType) ACARAId_IsNil() bool {
    return s.ACARAId == nil || s.addresscollectionreportingtype.ACARAId == nil
    }
  func (s *AddressCollectionReportingType) LocalId() *LocalIdType {
    if s.addresscollectionreportingtype.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollectionreportingtype.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.addresscollectionreportingtype.LocalId
    }
  func (s *AddressCollectionReportingType) LocalId_IsNil() bool {
    return s.LocalId == nil || s.addresscollectionreportingtype.LocalId == nil
    }
  func (s *AddressCollectionReportingType) AddressCollectionStudentList() *AddressCollectionStudentListType {
    if s.addresscollectionreportingtype.AddressCollectionStudentList == nil {
     if v, ok:= AddressCollectionStudentListTypePointer(AddressCollectionStudentListType{}); ok {
      s.addresscollectionreportingtype.AddressCollectionStudentList = v
      }
      }
      return s.addresscollectionreportingtype.AddressCollectionStudentList
    }
  func (s *AddressCollectionReportingType) AddressCollectionStudentList_IsNil() bool {
    return s.AddressCollectionStudentList == nil || s.addresscollectionreportingtype.AddressCollectionStudentList == nil
    }
  func (s *AddressCollectionReportingType) SchoolInfoRefId() *String {
    if s.addresscollectionreportingtype.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollectionreportingtype.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.addresscollectionreportingtype.SchoolInfoRefId
    }
  func (s *AddressCollectionReportingType) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.addresscollectionreportingtype.SchoolInfoRefId == nil
    }
  func (s *AddressCollectionReportingType) EntityLevel() *String {
    if s.addresscollectionreportingtype.EntityLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollectionreportingtype.EntityLevel = ((*String)(v))
      }
      }
      return s.addresscollectionreportingtype.EntityLevel
    }
  func (s *AddressCollectionReportingType) EntityLevel_IsNil() bool {
    return s.EntityLevel == nil || s.addresscollectionreportingtype.EntityLevel == nil
    }
  func (s *AddressCollectionReportingType) CommonwealthId() *String {
    if s.addresscollectionreportingtype.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollectionreportingtype.CommonwealthId = ((*String)(v))
      }
      }
      return s.addresscollectionreportingtype.CommonwealthId
    }
  func (s *AddressCollectionReportingType) CommonwealthId_IsNil() bool {
    return s.CommonwealthId == nil || s.addresscollectionreportingtype.CommonwealthId == nil
    }
  func (s *AddressCollectionReportingType) AGContextualQuestionList() *AGContextualQuestionListType {
    if s.addresscollectionreportingtype.AGContextualQuestionList == nil {
     if v, ok:= AGContextualQuestionListTypePointer(AGContextualQuestionListType{}); ok {
      s.addresscollectionreportingtype.AGContextualQuestionList = v
      }
      }
      return s.addresscollectionreportingtype.AGContextualQuestionList
    }
  func (s *AddressCollectionReportingType) AGContextualQuestionList_IsNil() bool {
    return s.AGContextualQuestionList == nil || s.addresscollectionreportingtype.AGContextualQuestionList == nil
    }
  func (s *AddressCollectionReportingType) StateProvinceId() *StateProvinceIdType {
    if s.addresscollectionreportingtype.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollectionreportingtype.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.addresscollectionreportingtype.StateProvinceId
    }
  func (s *AddressCollectionReportingType) StateProvinceId_IsNil() bool {
    return s.StateProvinceId == nil || s.addresscollectionreportingtype.StateProvinceId == nil
    }
  func (s *AddressCollectionReportingType) EntityName() *String {
    if s.addresscollectionreportingtype.EntityName == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollectionreportingtype.EntityName = ((*String)(v))
      }
      }
      return s.addresscollectionreportingtype.EntityName
    }
  func (s *AddressCollectionReportingType) EntityName_IsNil() bool {
    return s.EntityName == nil || s.addresscollectionreportingtype.EntityName == nil
    }

func (n *AbstractContentPackageType_BinaryData) Unset(key string) *AbstractContentPackageType_BinaryData {
        switch key {
  case "Description":
   n.abstractcontentpackagetype_binarydata.Description = nil
  case "Value":
   n.abstractcontentpackagetype_binarydata.Value = nil
  case "MIMEType":
   n.abstractcontentpackagetype_binarydata.MIMEType = nil
  case "FileName":
   n.abstractcontentpackagetype_binarydata.FileName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_BinaryData")
        }
        return n
}

func (n *AbstractContentPackageType_BinaryData) SetProperty(key string, value interface{}) *AbstractContentPackageType_BinaryData {
        if n == nil {
                n, _ = AbstractContentPackageType_BinaryDataPointer(AbstractContentPackageType_BinaryData{})
        }
        switch key {
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype_binarydata.Description = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype_binarydata.Value = ((*String)(v))
      }
    case "MIMEType":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype_binarydata.MIMEType = ((*String)(v))
      }
    case "FileName":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype_binarydata.FileName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_BinaryData")
        }
        return n
}

  func (s *AbstractContentPackageType_BinaryData) Description() *String {
    if s.abstractcontentpackagetype_binarydata.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype_binarydata.Description = ((*String)(v))
      }
      }
      return s.abstractcontentpackagetype_binarydata.Description
    }
  func (s *AbstractContentPackageType_BinaryData) Description_IsNil() bool {
    return s.Description == nil || s.abstractcontentpackagetype_binarydata.Description == nil
    }
  func (s *AbstractContentPackageType_BinaryData) Value() *String {
    if s.abstractcontentpackagetype_binarydata.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype_binarydata.Value = ((*String)(v))
      }
      }
      return s.abstractcontentpackagetype_binarydata.Value
    }
  func (s *AbstractContentPackageType_BinaryData) Value_IsNil() bool {
    return s.Value == nil || s.abstractcontentpackagetype_binarydata.Value == nil
    }
  func (s *AbstractContentPackageType_BinaryData) MIMEType() *String {
    if s.abstractcontentpackagetype_binarydata.MIMEType == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype_binarydata.MIMEType = ((*String)(v))
      }
      }
      return s.abstractcontentpackagetype_binarydata.MIMEType
    }
  func (s *AbstractContentPackageType_BinaryData) MIMEType_IsNil() bool {
    return s.MIMEType == nil || s.abstractcontentpackagetype_binarydata.MIMEType == nil
    }
  func (s *AbstractContentPackageType_BinaryData) FileName() *String {
    if s.abstractcontentpackagetype_binarydata.FileName == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype_binarydata.FileName = ((*String)(v))
      }
      }
      return s.abstractcontentpackagetype_binarydata.FileName
    }
  func (s *AbstractContentPackageType_BinaryData) FileName_IsNil() bool {
    return s.FileName == nil || s.abstractcontentpackagetype_binarydata.FileName == nil
    }

func (n *AGRuleType) Unset(key string) *AGRuleType {
        switch key {
  case "AGRuleResponse":
   n.agruletype.AGRuleResponse = nil
  case "AGRuleStatus":
   n.agruletype.AGRuleStatus = nil
  case "AGRuleComment":
   n.agruletype.AGRuleComment = nil
  case "AGRuleCode":
   n.agruletype.AGRuleCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGRuleType")
        }
        return n
}

func (n *AGRuleType) SetProperty(key string, value interface{}) *AGRuleType {
        if n == nil {
                n, _ = AGRuleTypePointer(AGRuleType{})
        }
        switch key {
    case "AGRuleResponse":
    
    if v, ok:= StringPointer(value); ok {
      n.agruletype.AGRuleResponse = ((*String)(v))
      }
    case "AGRuleStatus":
    
    if v, ok:= StringPointer(value); ok {
      n.agruletype.AGRuleStatus = ((*String)(v))
      }
    case "AGRuleComment":
    
    if v, ok:= StringPointer(value); ok {
      n.agruletype.AGRuleComment = ((*String)(v))
      }
    case "AGRuleCode":
    
    if v, ok:= StringPointer(value); ok {
      n.agruletype.AGRuleCode = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGRuleType")
        }
        return n
}

  func (s *AGRuleType) AGRuleResponse() *String {
    if s.agruletype.AGRuleResponse == nil {
    if v, ok:= StringPointer(""); ok {
      s.agruletype.AGRuleResponse = ((*String)(v))
      }
      }
      return s.agruletype.AGRuleResponse
    }
  func (s *AGRuleType) AGRuleResponse_IsNil() bool {
    return s.AGRuleResponse == nil || s.agruletype.AGRuleResponse == nil
    }
  func (s *AGRuleType) AGRuleStatus() *String {
    if s.agruletype.AGRuleStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.agruletype.AGRuleStatus = ((*String)(v))
      }
      }
      return s.agruletype.AGRuleStatus
    }
  func (s *AGRuleType) AGRuleStatus_IsNil() bool {
    return s.AGRuleStatus == nil || s.agruletype.AGRuleStatus == nil
    }
  func (s *AGRuleType) AGRuleComment() *String {
    if s.agruletype.AGRuleComment == nil {
    if v, ok:= StringPointer(""); ok {
      s.agruletype.AGRuleComment = ((*String)(v))
      }
      }
      return s.agruletype.AGRuleComment
    }
  func (s *AGRuleType) AGRuleComment_IsNil() bool {
    return s.AGRuleComment == nil || s.agruletype.AGRuleComment == nil
    }
  func (s *AGRuleType) AGRuleCode() *String {
    if s.agruletype.AGRuleCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.agruletype.AGRuleCode = ((*String)(v))
      }
      }
      return s.agruletype.AGRuleCode
    }
  func (s *AGRuleType) AGRuleCode_IsNil() bool {
    return s.AGRuleCode == nil || s.agruletype.AGRuleCode == nil
    }

func (n *ActivityTimeType_Duration) Unset(key string) *ActivityTimeType_Duration {
        switch key {
  case "Units":
   n.activitytimetype_duration.Units = nil
  case "Value":
   n.activitytimetype_duration.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ActivityTimeType_Duration")
        }
        return n
}

func (n *ActivityTimeType_Duration) SetProperty(key string, value interface{}) *ActivityTimeType_Duration {
        if n == nil {
                n, _ = ActivityTimeType_DurationPointer(ActivityTimeType_Duration{})
        }
        switch key {
    case "Units":
    
    if v, ok:= StringPointer(value); ok {
      n.activitytimetype_duration.Units = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= IntPointer(value); ok {
      n.activitytimetype_duration.Value = ((*Int)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ActivityTimeType_Duration")
        }
        return n
}

  func (s *ActivityTimeType_Duration) Units() *String {
    if s.activitytimetype_duration.Units == nil {
    if v, ok:= StringPointer(""); ok {
      s.activitytimetype_duration.Units = ((*String)(v))
      }
      }
      return s.activitytimetype_duration.Units
    }
  func (s *ActivityTimeType_Duration) Units_IsNil() bool {
    return s.Units == nil || s.activitytimetype_duration.Units == nil
    }
  func (s *ActivityTimeType_Duration) Value() *Int {
    if s.activitytimetype_duration.Value == nil {
    if v, ok:= IntPointer(0); ok {
      s.activitytimetype_duration.Value = ((*Int)(v))
      }
      }
      return s.activitytimetype_duration.Value
    }
  func (s *ActivityTimeType_Duration) Value_IsNil() bool {
    return s.Value == nil || s.activitytimetype_duration.Value == nil
    }

func (n *MedicationType) Unset(key string) *MedicationType {
        switch key {
  case "AdministrationInformation":
   n.medicationtype.AdministrationInformation = nil
  case "MedicationName":
   n.medicationtype.MedicationName = nil
  case "Frequency":
   n.medicationtype.Frequency = nil
  case "Method":
   n.medicationtype.Method = nil
  case "Dosage":
   n.medicationtype.Dosage = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MedicationType")
        }
        return n
}

func (n *MedicationType) SetProperty(key string, value interface{}) *MedicationType {
        if n == nil {
                n, _ = MedicationTypePointer(MedicationType{})
        }
        switch key {
    case "AdministrationInformation":
    
    if v, ok:= StringPointer(value); ok {
      n.medicationtype.AdministrationInformation = ((*String)(v))
      }
    case "MedicationName":
    
    if v, ok:= StringPointer(value); ok {
      n.medicationtype.MedicationName = ((*String)(v))
      }
    case "Frequency":
    
    if v, ok:= StringPointer(value); ok {
      n.medicationtype.Frequency = ((*String)(v))
      }
    case "Method":
    
    if v, ok:= StringPointer(value); ok {
      n.medicationtype.Method = ((*String)(v))
      }
    case "Dosage":
    
    if v, ok:= StringPointer(value); ok {
      n.medicationtype.Dosage = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MedicationType")
        }
        return n
}

  func (s *MedicationType) AdministrationInformation() *String {
    if s.medicationtype.AdministrationInformation == nil {
    if v, ok:= StringPointer(""); ok {
      s.medicationtype.AdministrationInformation = ((*String)(v))
      }
      }
      return s.medicationtype.AdministrationInformation
    }
  func (s *MedicationType) AdministrationInformation_IsNil() bool {
    return s.AdministrationInformation == nil || s.medicationtype.AdministrationInformation == nil
    }
  func (s *MedicationType) MedicationName() *String {
    if s.medicationtype.MedicationName == nil {
    if v, ok:= StringPointer(""); ok {
      s.medicationtype.MedicationName = ((*String)(v))
      }
      }
      return s.medicationtype.MedicationName
    }
  func (s *MedicationType) MedicationName_IsNil() bool {
    return s.MedicationName == nil || s.medicationtype.MedicationName == nil
    }
  func (s *MedicationType) Frequency() *String {
    if s.medicationtype.Frequency == nil {
    if v, ok:= StringPointer(""); ok {
      s.medicationtype.Frequency = ((*String)(v))
      }
      }
      return s.medicationtype.Frequency
    }
  func (s *MedicationType) Frequency_IsNil() bool {
    return s.Frequency == nil || s.medicationtype.Frequency == nil
    }
  func (s *MedicationType) Method() *String {
    if s.medicationtype.Method == nil {
    if v, ok:= StringPointer(""); ok {
      s.medicationtype.Method = ((*String)(v))
      }
      }
      return s.medicationtype.Method
    }
  func (s *MedicationType) Method_IsNil() bool {
    return s.Method == nil || s.medicationtype.Method == nil
    }
  func (s *MedicationType) Dosage() *String {
    if s.medicationtype.Dosage == nil {
    if v, ok:= StringPointer(""); ok {
      s.medicationtype.Dosage = ((*String)(v))
      }
      }
      return s.medicationtype.Dosage
    }
  func (s *MedicationType) Dosage_IsNil() bool {
    return s.Dosage == nil || s.medicationtype.Dosage == nil
    }

func (n *StaffMostRecentContainerType) Unset(key string) *StaffMostRecentContainerType {
        switch key {
  case "SchoolACARAId":
   n.staffmostrecentcontainertype.SchoolACARAId = nil
  case "SchoolLocalId":
   n.staffmostrecentcontainertype.SchoolLocalId = nil
  case "HomeGroup":
   n.staffmostrecentcontainertype.HomeGroup = nil
  case "LocalCampusId":
   n.staffmostrecentcontainertype.LocalCampusId = nil
  case "NAPLANClassList":
   n.staffmostrecentcontainertype.NAPLANClassList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffMostRecentContainerType")
        }
        return n
}

func (n *StaffMostRecentContainerType) SetProperty(key string, value interface{}) *StaffMostRecentContainerType {
        if n == nil {
                n, _ = StaffMostRecentContainerTypePointer(StaffMostRecentContainerType{})
        }
        switch key {
    case "SchoolACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.staffmostrecentcontainertype.SchoolACARAId = ((*LocalIdType)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.staffmostrecentcontainertype.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "HomeGroup":
    
    if v, ok:= StringPointer(value); ok {
      n.staffmostrecentcontainertype.HomeGroup = ((*String)(v))
      }
    case "LocalCampusId":
    
    if v, ok:= StringPointer(value); ok {
      n.staffmostrecentcontainertype.LocalCampusId = ((*LocalIdType)(v))
      }
    case "NAPLANClassList":
    if v, ok:= NAPLANClassListTypePointer(value); ok {
      n.staffmostrecentcontainertype.NAPLANClassList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffMostRecentContainerType")
        }
        return n
}

  func (s *StaffMostRecentContainerType) SchoolACARAId() *LocalIdType {
    if s.staffmostrecentcontainertype.SchoolACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffmostrecentcontainertype.SchoolACARAId = ((*LocalIdType)(v))
      }
      }
      return s.staffmostrecentcontainertype.SchoolACARAId
    }
  func (s *StaffMostRecentContainerType) SchoolACARAId_IsNil() bool {
    return s.SchoolACARAId == nil || s.staffmostrecentcontainertype.SchoolACARAId == nil
    }
  func (s *StaffMostRecentContainerType) SchoolLocalId() *LocalIdType {
    if s.staffmostrecentcontainertype.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffmostrecentcontainertype.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.staffmostrecentcontainertype.SchoolLocalId
    }
  func (s *StaffMostRecentContainerType) SchoolLocalId_IsNil() bool {
    return s.SchoolLocalId == nil || s.staffmostrecentcontainertype.SchoolLocalId == nil
    }
  func (s *StaffMostRecentContainerType) HomeGroup() *String {
    if s.staffmostrecentcontainertype.HomeGroup == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffmostrecentcontainertype.HomeGroup = ((*String)(v))
      }
      }
      return s.staffmostrecentcontainertype.HomeGroup
    }
  func (s *StaffMostRecentContainerType) HomeGroup_IsNil() bool {
    return s.HomeGroup == nil || s.staffmostrecentcontainertype.HomeGroup == nil
    }
  func (s *StaffMostRecentContainerType) LocalCampusId() *LocalIdType {
    if s.staffmostrecentcontainertype.LocalCampusId == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffmostrecentcontainertype.LocalCampusId = ((*LocalIdType)(v))
      }
      }
      return s.staffmostrecentcontainertype.LocalCampusId
    }
  func (s *StaffMostRecentContainerType) LocalCampusId_IsNil() bool {
    return s.LocalCampusId == nil || s.staffmostrecentcontainertype.LocalCampusId == nil
    }
  func (s *StaffMostRecentContainerType) NAPLANClassList() *NAPLANClassListType {
    if s.staffmostrecentcontainertype.NAPLANClassList == nil {
     if v, ok:= NAPLANClassListTypePointer(NAPLANClassListType{}); ok {
      s.staffmostrecentcontainertype.NAPLANClassList = v
      }
      }
      return s.staffmostrecentcontainertype.NAPLANClassList
    }
  func (s *StaffMostRecentContainerType) NAPLANClassList_IsNil() bool {
    return s.NAPLANClassList == nil || s.staffmostrecentcontainertype.NAPLANClassList == nil
    }

func (n *ContactFlagsType) Unset(key string) *ContactFlagsType {
        switch key {
  case "LivesWith":
   n.contactflagstype.LivesWith = nil
  case "FamilyMail":
   n.contactflagstype.FamilyMail = nil
  case "AccessToRecords":
   n.contactflagstype.AccessToRecords = nil
  case "PickupRights":
   n.contactflagstype.PickupRights = nil
  case "ReceivesAssessmentReport":
   n.contactflagstype.ReceivesAssessmentReport = nil
  case "DisciplinaryContact":
   n.contactflagstype.DisciplinaryContact = nil
  case "PrimaryCareProvider":
   n.contactflagstype.PrimaryCareProvider = nil
  case "FeesBilling":
   n.contactflagstype.FeesBilling = nil
  case "HasCustody":
   n.contactflagstype.HasCustody = nil
  case "AttendanceContact":
   n.contactflagstype.AttendanceContact = nil
  case "EmergencyContact":
   n.contactflagstype.EmergencyContact = nil
  case "InterventionOrder":
   n.contactflagstype.InterventionOrder = nil
  case "ParentLegalGuardian":
   n.contactflagstype.ParentLegalGuardian = nil
  case "FeesAccess":
   n.contactflagstype.FeesAccess = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ContactFlagsType")
        }
        return n
}

func (n *ContactFlagsType) SetProperty(key string, value interface{}) *ContactFlagsType {
        if n == nil {
                n, _ = ContactFlagsTypePointer(ContactFlagsType{})
        }
        switch key {
    case "LivesWith":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.LivesWith = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "FamilyMail":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.FamilyMail = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "AccessToRecords":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.AccessToRecords = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "PickupRights":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.PickupRights = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ReceivesAssessmentReport":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.ReceivesAssessmentReport = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "DisciplinaryContact":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.DisciplinaryContact = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "PrimaryCareProvider":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.PrimaryCareProvider = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "FeesBilling":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.FeesBilling = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "HasCustody":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.HasCustody = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "AttendanceContact":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.AttendanceContact = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "EmergencyContact":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.EmergencyContact = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "InterventionOrder":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.InterventionOrder = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ParentLegalGuardian":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.ParentLegalGuardian = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "FeesAccess":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.contactflagstype.FeesAccess = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ContactFlagsType")
        }
        return n
}

  func (s *ContactFlagsType) LivesWith() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.LivesWith == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.LivesWith = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.LivesWith
    }
  func (s *ContactFlagsType) LivesWith_IsNil() bool {
    return s.LivesWith == nil || s.contactflagstype.LivesWith == nil
    }
  func (s *ContactFlagsType) FamilyMail() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.FamilyMail == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.FamilyMail = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.FamilyMail
    }
  func (s *ContactFlagsType) FamilyMail_IsNil() bool {
    return s.FamilyMail == nil || s.contactflagstype.FamilyMail == nil
    }
  func (s *ContactFlagsType) AccessToRecords() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.AccessToRecords == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.AccessToRecords = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.AccessToRecords
    }
  func (s *ContactFlagsType) AccessToRecords_IsNil() bool {
    return s.AccessToRecords == nil || s.contactflagstype.AccessToRecords == nil
    }
  func (s *ContactFlagsType) PickupRights() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.PickupRights == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.PickupRights = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.PickupRights
    }
  func (s *ContactFlagsType) PickupRights_IsNil() bool {
    return s.PickupRights == nil || s.contactflagstype.PickupRights == nil
    }
  func (s *ContactFlagsType) ReceivesAssessmentReport() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.ReceivesAssessmentReport == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.ReceivesAssessmentReport = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.ReceivesAssessmentReport
    }
  func (s *ContactFlagsType) ReceivesAssessmentReport_IsNil() bool {
    return s.ReceivesAssessmentReport == nil || s.contactflagstype.ReceivesAssessmentReport == nil
    }
  func (s *ContactFlagsType) DisciplinaryContact() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.DisciplinaryContact == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.DisciplinaryContact = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.DisciplinaryContact
    }
  func (s *ContactFlagsType) DisciplinaryContact_IsNil() bool {
    return s.DisciplinaryContact == nil || s.contactflagstype.DisciplinaryContact == nil
    }
  func (s *ContactFlagsType) PrimaryCareProvider() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.PrimaryCareProvider == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.PrimaryCareProvider = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.PrimaryCareProvider
    }
  func (s *ContactFlagsType) PrimaryCareProvider_IsNil() bool {
    return s.PrimaryCareProvider == nil || s.contactflagstype.PrimaryCareProvider == nil
    }
  func (s *ContactFlagsType) FeesBilling() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.FeesBilling == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.FeesBilling = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.FeesBilling
    }
  func (s *ContactFlagsType) FeesBilling_IsNil() bool {
    return s.FeesBilling == nil || s.contactflagstype.FeesBilling == nil
    }
  func (s *ContactFlagsType) HasCustody() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.HasCustody == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.HasCustody = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.HasCustody
    }
  func (s *ContactFlagsType) HasCustody_IsNil() bool {
    return s.HasCustody == nil || s.contactflagstype.HasCustody == nil
    }
  func (s *ContactFlagsType) AttendanceContact() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.AttendanceContact == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.AttendanceContact = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.AttendanceContact
    }
  func (s *ContactFlagsType) AttendanceContact_IsNil() bool {
    return s.AttendanceContact == nil || s.contactflagstype.AttendanceContact == nil
    }
  func (s *ContactFlagsType) EmergencyContact() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.EmergencyContact == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.EmergencyContact = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.EmergencyContact
    }
  func (s *ContactFlagsType) EmergencyContact_IsNil() bool {
    return s.EmergencyContact == nil || s.contactflagstype.EmergencyContact == nil
    }
  func (s *ContactFlagsType) InterventionOrder() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.InterventionOrder == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.InterventionOrder = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.InterventionOrder
    }
  func (s *ContactFlagsType) InterventionOrder_IsNil() bool {
    return s.InterventionOrder == nil || s.contactflagstype.InterventionOrder == nil
    }
  func (s *ContactFlagsType) ParentLegalGuardian() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.ParentLegalGuardian == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.ParentLegalGuardian = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.ParentLegalGuardian
    }
  func (s *ContactFlagsType) ParentLegalGuardian_IsNil() bool {
    return s.ParentLegalGuardian == nil || s.contactflagstype.ParentLegalGuardian == nil
    }
  func (s *ContactFlagsType) FeesAccess() *AUCodeSetsYesOrNoCategoryType {
    if s.contactflagstype.FeesAccess == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactflagstype.FeesAccess = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.contactflagstype.FeesAccess
    }
  func (s *ContactFlagsType) FeesAccess_IsNil() bool {
    return s.FeesAccess == nil || s.contactflagstype.FeesAccess == nil
    }

func (n *CreationUserType) Unset(key string) *CreationUserType {
        switch key {
  case "Type":
   n.creationusertype.Type = nil
  case "UserId":
   n.creationusertype.UserId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CreationUserType")
        }
        return n
}

func (n *CreationUserType) SetProperty(key string, value interface{}) *CreationUserType {
        if n == nil {
                n, _ = CreationUserTypePointer(CreationUserType{})
        }
        switch key {
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.creationusertype.Type = ((*String)(v))
      }
    case "UserId":
    
    if v, ok:= StringPointer(value); ok {
      n.creationusertype.UserId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CreationUserType")
        }
        return n
}

  func (s *CreationUserType) Type() *String {
    if s.creationusertype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.creationusertype.Type = ((*String)(v))
      }
      }
      return s.creationusertype.Type
    }
  func (s *CreationUserType) Type_IsNil() bool {
    return s.Type == nil || s.creationusertype.Type == nil
    }
  func (s *CreationUserType) UserId() *String {
    if s.creationusertype.UserId == nil {
    if v, ok:= StringPointer(""); ok {
      s.creationusertype.UserId = ((*String)(v))
      }
      }
      return s.creationusertype.UserId
    }
  func (s *CreationUserType) UserId_IsNil() bool {
    return s.UserId == nil || s.creationusertype.UserId == nil
    }

func (n *NAPTestItem) Unset(key string) *NAPTestItem {
        switch key {
  case "LocalCodeList":
   n.naptestitem.LocalCodeList = nil
  case "SIF_Metadata":
   n.naptestitem.SIF_Metadata = nil
  case "RefId":
   n.naptestitem.RefId = nil
  case "TestItemContent":
   n.naptestitem.TestItemContent = nil
  case "SIF_ExtendedElements":
   n.naptestitem.SIF_ExtendedElements = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestItem")
        }
        return n
}

func (n *NAPTestItem) SetProperty(key string, value interface{}) *NAPTestItem {
        if n == nil {
                n, _ = NAPTestItemPointer(NAPTestItem{})
        }
        switch key {
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.naptestitem.LocalCodeList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.naptestitem.SIF_Metadata = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestitem.RefId = ((*RefIdType)(v))
      }
    case "TestItemContent":
    if v, ok:= NAPTestItemContentTypePointer(value); ok {
      n.naptestitem.TestItemContent = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.naptestitem.SIF_ExtendedElements = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestItem")
        }
        return n
}

  func (s *NAPTestItem) LocalCodeList() *LocalCodeListType {
    if s.naptestitem.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.naptestitem.LocalCodeList = v
      }
      }
      return s.naptestitem.LocalCodeList
    }
  func (s *NAPTestItem) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.naptestitem.LocalCodeList == nil
    }
  func (s *NAPTestItem) SIF_Metadata() *SIF_MetadataType {
    if s.naptestitem.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.naptestitem.SIF_Metadata = v
      }
      }
      return s.naptestitem.SIF_Metadata
    }
  func (s *NAPTestItem) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.naptestitem.SIF_Metadata == nil
    }
  func (s *NAPTestItem) RefId() *RefIdType {
    if s.naptestitem.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestitem.RefId = ((*RefIdType)(v))
      }
      }
      return s.naptestitem.RefId
    }
  func (s *NAPTestItem) RefId_IsNil() bool {
    return s.RefId == nil || s.naptestitem.RefId == nil
    }
  func (s *NAPTestItem) TestItemContent() *NAPTestItemContentType {
    if s.naptestitem.TestItemContent == nil {
     if v, ok:= NAPTestItemContentTypePointer(NAPTestItemContentType{}); ok {
      s.naptestitem.TestItemContent = v
      }
      }
      return s.naptestitem.TestItemContent
    }
  func (s *NAPTestItem) TestItemContent_IsNil() bool {
    return s.TestItemContent == nil || s.naptestitem.TestItemContent == nil
    }
  func (s *NAPTestItem) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.naptestitem.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.naptestitem.SIF_ExtendedElements = v
      }
      }
      return s.naptestitem.SIF_ExtendedElements
    }
  func (s *NAPTestItem) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.naptestitem.SIF_ExtendedElements == nil
    }

func (n *SystemRole_RoleScopeRefId) Unset(key string) *SystemRole_RoleScopeRefId {
        switch key {
  case "Value":
   n.systemrole_rolescoperefid.Value = nil
  case "SIF_RefObject":
   n.systemrole_rolescoperefid.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_RoleScopeRefId")
        }
        return n
}

func (n *SystemRole_RoleScopeRefId) SetProperty(key string, value interface{}) *SystemRole_RoleScopeRefId {
        if n == nil {
                n, _ = SystemRole_RoleScopeRefIdPointer(SystemRole_RoleScopeRefId{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.systemrole_rolescoperefid.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.systemrole_rolescoperefid.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_RoleScopeRefId")
        }
        return n
}

  func (s *SystemRole_RoleScopeRefId) Value() *String {
    if s.systemrole_rolescoperefid.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.systemrole_rolescoperefid.Value = ((*String)(v))
      }
      }
      return s.systemrole_rolescoperefid.Value
    }
  func (s *SystemRole_RoleScopeRefId) Value_IsNil() bool {
    return s.Value == nil || s.systemrole_rolescoperefid.Value == nil
    }
  func (s *SystemRole_RoleScopeRefId) SIF_RefObject() *String {
    if s.systemrole_rolescoperefid.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.systemrole_rolescoperefid.SIF_RefObject = ((*String)(v))
      }
      }
      return s.systemrole_rolescoperefid.SIF_RefObject
    }
  func (s *SystemRole_RoleScopeRefId) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.systemrole_rolescoperefid.SIF_RefObject == nil
    }

func (n *AbstractContentElementType_XMLData) Unset(key string) *AbstractContentElementType_XMLData {
        switch key {
  case "Description":
   n.abstractcontentelementtype_xmldata.Description = nil
  case "Value":
   n.abstractcontentelementtype_xmldata.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_XMLData")
        }
        return n
}

func (n *AbstractContentElementType_XMLData) SetProperty(key string, value interface{}) *AbstractContentElementType_XMLData {
        if n == nil {
                n, _ = AbstractContentElementType_XMLDataPointer(AbstractContentElementType_XMLData{})
        }
        switch key {
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentelementtype_xmldata.Description = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentelementtype_xmldata.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_XMLData")
        }
        return n
}

  func (s *AbstractContentElementType_XMLData) Description() *String {
    if s.abstractcontentelementtype_xmldata.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentelementtype_xmldata.Description = ((*String)(v))
      }
      }
      return s.abstractcontentelementtype_xmldata.Description
    }
  func (s *AbstractContentElementType_XMLData) Description_IsNil() bool {
    return s.Description == nil || s.abstractcontentelementtype_xmldata.Description == nil
    }
  func (s *AbstractContentElementType_XMLData) Value() *String {
    if s.abstractcontentelementtype_xmldata.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentelementtype_xmldata.Value = ((*String)(v))
      }
      }
      return s.abstractcontentelementtype_xmldata.Value
    }
  func (s *AbstractContentElementType_XMLData) Value_IsNil() bool {
    return s.Value == nil || s.abstractcontentelementtype_xmldata.Value == nil
    }

func (n *AggregateStatisticInfo) Unset(key string) *AggregateStatisticInfo {
        switch key {
  case "EffectiveDate":
   n.aggregatestatisticinfo.EffectiveDate = nil
  case "RefId":
   n.aggregatestatisticinfo.RefId = nil
  case "SIF_Metadata":
   n.aggregatestatisticinfo.SIF_Metadata = nil
  case "ExclusionRules":
   n.aggregatestatisticinfo.ExclusionRules = nil
  case "Source":
   n.aggregatestatisticinfo.Source = nil
  case "Measure":
   n.aggregatestatisticinfo.Measure = nil
  case "ExpirationDate":
   n.aggregatestatisticinfo.ExpirationDate = nil
  case "StatisticName":
   n.aggregatestatisticinfo.StatisticName = nil
  case "Location":
   n.aggregatestatisticinfo.Location = nil
  case "DiscontinueDate":
   n.aggregatestatisticinfo.DiscontinueDate = nil
  case "SIF_ExtendedElements":
   n.aggregatestatisticinfo.SIF_ExtendedElements = nil
  case "CalculationRule":
   n.aggregatestatisticinfo.CalculationRule = nil
  case "LocalCodeList":
   n.aggregatestatisticinfo.LocalCodeList = nil
  case "ApprovalDate":
   n.aggregatestatisticinfo.ApprovalDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateStatisticInfo")
        }
        return n
}

func (n *AggregateStatisticInfo) SetProperty(key string, value interface{}) *AggregateStatisticInfo {
        if n == nil {
                n, _ = AggregateStatisticInfoPointer(AggregateStatisticInfo{})
        }
        switch key {
    case "EffectiveDate":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatestatisticinfo.EffectiveDate = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatestatisticinfo.RefId = ((*RefIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.aggregatestatisticinfo.SIF_Metadata = v
      }
    case "ExclusionRules":
    if v, ok:= ExclusionRulesTypePointer(value); ok {
      n.aggregatestatisticinfo.ExclusionRules = v
      }
    case "Source":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatestatisticinfo.Source = ((*String)(v))
      }
    case "Measure":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatestatisticinfo.Measure = ((*String)(v))
      }
    case "ExpirationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatestatisticinfo.ExpirationDate = ((*String)(v))
      }
    case "StatisticName":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatestatisticinfo.StatisticName = ((*String)(v))
      }
    case "Location":
    if v, ok:= LocationTypePointer(value); ok {
      n.aggregatestatisticinfo.Location = v
      }
    case "DiscontinueDate":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatestatisticinfo.DiscontinueDate = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.aggregatestatisticinfo.SIF_ExtendedElements = v
      }
    case "CalculationRule":
    if v, ok:= AggregateStatisticInfo_CalculationRulePointer(value); ok {
      n.aggregatestatisticinfo.CalculationRule = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.aggregatestatisticinfo.LocalCodeList = v
      }
    case "ApprovalDate":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatestatisticinfo.ApprovalDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateStatisticInfo")
        }
        return n
}

  func (s *AggregateStatisticInfo) EffectiveDate() *String {
    if s.aggregatestatisticinfo.EffectiveDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatestatisticinfo.EffectiveDate = ((*String)(v))
      }
      }
      return s.aggregatestatisticinfo.EffectiveDate
    }
  func (s *AggregateStatisticInfo) EffectiveDate_IsNil() bool {
    return s.EffectiveDate == nil || s.aggregatestatisticinfo.EffectiveDate == nil
    }
  func (s *AggregateStatisticInfo) RefId() *RefIdType {
    if s.aggregatestatisticinfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatestatisticinfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.aggregatestatisticinfo.RefId
    }
  func (s *AggregateStatisticInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.aggregatestatisticinfo.RefId == nil
    }
  func (s *AggregateStatisticInfo) SIF_Metadata() *SIF_MetadataType {
    if s.aggregatestatisticinfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.aggregatestatisticinfo.SIF_Metadata = v
      }
      }
      return s.aggregatestatisticinfo.SIF_Metadata
    }
  func (s *AggregateStatisticInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.aggregatestatisticinfo.SIF_Metadata == nil
    }
  func (s *AggregateStatisticInfo) ExclusionRules() *ExclusionRulesType {
    if s.aggregatestatisticinfo.ExclusionRules == nil {
     if v, ok:= ExclusionRulesTypePointer(ExclusionRulesType{}); ok {
      s.aggregatestatisticinfo.ExclusionRules = v
      }
      }
      return s.aggregatestatisticinfo.ExclusionRules
    }
  func (s *AggregateStatisticInfo) ExclusionRules_IsNil() bool {
    return s.ExclusionRules == nil || s.aggregatestatisticinfo.ExclusionRules == nil
    }
  func (s *AggregateStatisticInfo) Source() *String {
    if s.aggregatestatisticinfo.Source == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatestatisticinfo.Source = ((*String)(v))
      }
      }
      return s.aggregatestatisticinfo.Source
    }
  func (s *AggregateStatisticInfo) Source_IsNil() bool {
    return s.Source == nil || s.aggregatestatisticinfo.Source == nil
    }
  func (s *AggregateStatisticInfo) Measure() *String {
    if s.aggregatestatisticinfo.Measure == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatestatisticinfo.Measure = ((*String)(v))
      }
      }
      return s.aggregatestatisticinfo.Measure
    }
  func (s *AggregateStatisticInfo) Measure_IsNil() bool {
    return s.Measure == nil || s.aggregatestatisticinfo.Measure == nil
    }
  func (s *AggregateStatisticInfo) ExpirationDate() *String {
    if s.aggregatestatisticinfo.ExpirationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatestatisticinfo.ExpirationDate = ((*String)(v))
      }
      }
      return s.aggregatestatisticinfo.ExpirationDate
    }
  func (s *AggregateStatisticInfo) ExpirationDate_IsNil() bool {
    return s.ExpirationDate == nil || s.aggregatestatisticinfo.ExpirationDate == nil
    }
  func (s *AggregateStatisticInfo) StatisticName() *String {
    if s.aggregatestatisticinfo.StatisticName == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatestatisticinfo.StatisticName = ((*String)(v))
      }
      }
      return s.aggregatestatisticinfo.StatisticName
    }
  func (s *AggregateStatisticInfo) StatisticName_IsNil() bool {
    return s.StatisticName == nil || s.aggregatestatisticinfo.StatisticName == nil
    }
  func (s *AggregateStatisticInfo) Location() *LocationType {
    if s.aggregatestatisticinfo.Location == nil {
     if v, ok:= LocationTypePointer(LocationType{}); ok {
      s.aggregatestatisticinfo.Location = v
      }
      }
      return s.aggregatestatisticinfo.Location
    }
  func (s *AggregateStatisticInfo) Location_IsNil() bool {
    return s.Location == nil || s.aggregatestatisticinfo.Location == nil
    }
  func (s *AggregateStatisticInfo) DiscontinueDate() *String {
    if s.aggregatestatisticinfo.DiscontinueDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatestatisticinfo.DiscontinueDate = ((*String)(v))
      }
      }
      return s.aggregatestatisticinfo.DiscontinueDate
    }
  func (s *AggregateStatisticInfo) DiscontinueDate_IsNil() bool {
    return s.DiscontinueDate == nil || s.aggregatestatisticinfo.DiscontinueDate == nil
    }
  func (s *AggregateStatisticInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.aggregatestatisticinfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.aggregatestatisticinfo.SIF_ExtendedElements = v
      }
      }
      return s.aggregatestatisticinfo.SIF_ExtendedElements
    }
  func (s *AggregateStatisticInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.aggregatestatisticinfo.SIF_ExtendedElements == nil
    }
  func (s *AggregateStatisticInfo) CalculationRule() *AggregateStatisticInfo_CalculationRule {
    if s.aggregatestatisticinfo.CalculationRule == nil {
     if v, ok:= AggregateStatisticInfo_CalculationRulePointer(AggregateStatisticInfo_CalculationRule{}); ok {
      s.aggregatestatisticinfo.CalculationRule = v
      }
      }
      return s.aggregatestatisticinfo.CalculationRule
    }
  func (s *AggregateStatisticInfo) CalculationRule_IsNil() bool {
    return s.CalculationRule == nil || s.aggregatestatisticinfo.CalculationRule == nil
    }
  func (s *AggregateStatisticInfo) LocalCodeList() *LocalCodeListType {
    if s.aggregatestatisticinfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.aggregatestatisticinfo.LocalCodeList = v
      }
      }
      return s.aggregatestatisticinfo.LocalCodeList
    }
  func (s *AggregateStatisticInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.aggregatestatisticinfo.LocalCodeList == nil
    }
  func (s *AggregateStatisticInfo) ApprovalDate() *String {
    if s.aggregatestatisticinfo.ApprovalDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatestatisticinfo.ApprovalDate = ((*String)(v))
      }
      }
      return s.aggregatestatisticinfo.ApprovalDate
    }
  func (s *AggregateStatisticInfo) ApprovalDate_IsNil() bool {
    return s.ApprovalDate == nil || s.aggregatestatisticinfo.ApprovalDate == nil
    }

func (n *LifeCycleType_Created) Unset(key string) *LifeCycleType_Created {
        switch key {
  case "DateTime":
   n.lifecycletype_created.DateTime = nil
  case "Creators":
   n.lifecycletype_created.Creators = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType_Created")
        }
        return n
}

func (n *LifeCycleType_Created) SetProperty(key string, value interface{}) *LifeCycleType_Created {
        if n == nil {
                n, _ = LifeCycleType_CreatedPointer(LifeCycleType_Created{})
        }
        switch key {
    case "DateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.lifecycletype_created.DateTime = ((*String)(v))
      }
    case "Creators":
    if v, ok:= LifeCycleType_CreatorsPointer(value); ok {
      n.lifecycletype_created.Creators = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType_Created")
        }
        return n
}

  func (s *LifeCycleType_Created) DateTime() *String {
    if s.lifecycletype_created.DateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.lifecycletype_created.DateTime = ((*String)(v))
      }
      }
      return s.lifecycletype_created.DateTime
    }
  func (s *LifeCycleType_Created) DateTime_IsNil() bool {
    return s.DateTime == nil || s.lifecycletype_created.DateTime == nil
    }
  func (s *LifeCycleType_Created) Creators() *LifeCycleType_Creators {
    if s.lifecycletype_created.Creators == nil {
     if v, ok:= LifeCycleType_CreatorsPointer(LifeCycleType_Creators{}); ok {
      s.lifecycletype_created.Creators = v
      }
      }
      return s.lifecycletype_created.Creators
    }
  func (s *LifeCycleType_Created) Creators_IsNil() bool {
    return s.Creators == nil || s.lifecycletype_created.Creators == nil
    }

func (n *NameOfRecordType) Unset(key string) *NameOfRecordType {
        switch key {
  case "Type":
   n.nameofrecordtype.Type = nil
  case "PreferredGivenName":
   n.nameofrecordtype.PreferredGivenName = nil
  case "GivenName":
   n.nameofrecordtype.GivenName = nil
  case "FamilyName":
   n.nameofrecordtype.FamilyName = nil
  case "Title":
   n.nameofrecordtype.Title = nil
  case "FullName":
   n.nameofrecordtype.FullName = nil
  case "MiddleName":
   n.nameofrecordtype.MiddleName = nil
  case "PreferredFamilyName":
   n.nameofrecordtype.PreferredFamilyName = nil
  case "PreferredFamilyNameFirst":
   n.nameofrecordtype.PreferredFamilyNameFirst = nil
  case "FamilyNameFirst":
   n.nameofrecordtype.FamilyNameFirst = nil
  case "Suffix":
   n.nameofrecordtype.Suffix = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NameOfRecordType")
        }
        return n
}

func (n *NameOfRecordType) SetProperty(key string, value interface{}) *NameOfRecordType {
        if n == nil {
                n, _ = NameOfRecordTypePointer(NameOfRecordType{})
        }
        switch key {
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.nameofrecordtype.Type = ((*String)(v))
      }
    case "PreferredGivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.nameofrecordtype.PreferredGivenName = ((*String)(v))
      }
    case "GivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.nameofrecordtype.GivenName = ((*String)(v))
      }
    case "FamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.nameofrecordtype.FamilyName = ((*String)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.nameofrecordtype.Title = ((*String)(v))
      }
    case "FullName":
    
    if v, ok:= StringPointer(value); ok {
      n.nameofrecordtype.FullName = ((*String)(v))
      }
    case "MiddleName":
    
    if v, ok:= StringPointer(value); ok {
      n.nameofrecordtype.MiddleName = ((*String)(v))
      }
    case "PreferredFamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.nameofrecordtype.PreferredFamilyName = ((*String)(v))
      }
    case "PreferredFamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.nameofrecordtype.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "FamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.nameofrecordtype.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Suffix":
    
    if v, ok:= StringPointer(value); ok {
      n.nameofrecordtype.Suffix = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NameOfRecordType")
        }
        return n
}

  func (s *NameOfRecordType) Type() *String {
    if s.nameofrecordtype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.nameofrecordtype.Type = ((*String)(v))
      }
      }
      return s.nameofrecordtype.Type
    }
  func (s *NameOfRecordType) Type_IsNil() bool {
    return s.Type == nil || s.nameofrecordtype.Type == nil
    }
  func (s *NameOfRecordType) PreferredGivenName() *String {
    if s.nameofrecordtype.PreferredGivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.nameofrecordtype.PreferredGivenName = ((*String)(v))
      }
      }
      return s.nameofrecordtype.PreferredGivenName
    }
  func (s *NameOfRecordType) PreferredGivenName_IsNil() bool {
    return s.PreferredGivenName == nil || s.nameofrecordtype.PreferredGivenName == nil
    }
  func (s *NameOfRecordType) GivenName() *String {
    if s.nameofrecordtype.GivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.nameofrecordtype.GivenName = ((*String)(v))
      }
      }
      return s.nameofrecordtype.GivenName
    }
  func (s *NameOfRecordType) GivenName_IsNil() bool {
    return s.GivenName == nil || s.nameofrecordtype.GivenName == nil
    }
  func (s *NameOfRecordType) FamilyName() *String {
    if s.nameofrecordtype.FamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.nameofrecordtype.FamilyName = ((*String)(v))
      }
      }
      return s.nameofrecordtype.FamilyName
    }
  func (s *NameOfRecordType) FamilyName_IsNil() bool {
    return s.FamilyName == nil || s.nameofrecordtype.FamilyName == nil
    }
  func (s *NameOfRecordType) Title() *String {
    if s.nameofrecordtype.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.nameofrecordtype.Title = ((*String)(v))
      }
      }
      return s.nameofrecordtype.Title
    }
  func (s *NameOfRecordType) Title_IsNil() bool {
    return s.Title == nil || s.nameofrecordtype.Title == nil
    }
  func (s *NameOfRecordType) FullName() *String {
    if s.nameofrecordtype.FullName == nil {
    if v, ok:= StringPointer(""); ok {
      s.nameofrecordtype.FullName = ((*String)(v))
      }
      }
      return s.nameofrecordtype.FullName
    }
  func (s *NameOfRecordType) FullName_IsNil() bool {
    return s.FullName == nil || s.nameofrecordtype.FullName == nil
    }
  func (s *NameOfRecordType) MiddleName() *String {
    if s.nameofrecordtype.MiddleName == nil {
    if v, ok:= StringPointer(""); ok {
      s.nameofrecordtype.MiddleName = ((*String)(v))
      }
      }
      return s.nameofrecordtype.MiddleName
    }
  func (s *NameOfRecordType) MiddleName_IsNil() bool {
    return s.MiddleName == nil || s.nameofrecordtype.MiddleName == nil
    }
  func (s *NameOfRecordType) PreferredFamilyName() *String {
    if s.nameofrecordtype.PreferredFamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.nameofrecordtype.PreferredFamilyName = ((*String)(v))
      }
      }
      return s.nameofrecordtype.PreferredFamilyName
    }
  func (s *NameOfRecordType) PreferredFamilyName_IsNil() bool {
    return s.PreferredFamilyName == nil || s.nameofrecordtype.PreferredFamilyName == nil
    }
  func (s *NameOfRecordType) PreferredFamilyNameFirst() *AUCodeSetsYesOrNoCategoryType {
    if s.nameofrecordtype.PreferredFamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.nameofrecordtype.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.nameofrecordtype.PreferredFamilyNameFirst
    }
  func (s *NameOfRecordType) PreferredFamilyNameFirst_IsNil() bool {
    return s.PreferredFamilyNameFirst == nil || s.nameofrecordtype.PreferredFamilyNameFirst == nil
    }
  func (s *NameOfRecordType) FamilyNameFirst() *AUCodeSetsYesOrNoCategoryType {
    if s.nameofrecordtype.FamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.nameofrecordtype.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.nameofrecordtype.FamilyNameFirst
    }
  func (s *NameOfRecordType) FamilyNameFirst_IsNil() bool {
    return s.FamilyNameFirst == nil || s.nameofrecordtype.FamilyNameFirst == nil
    }
  func (s *NameOfRecordType) Suffix() *String {
    if s.nameofrecordtype.Suffix == nil {
    if v, ok:= StringPointer(""); ok {
      s.nameofrecordtype.Suffix = ((*String)(v))
      }
      }
      return s.nameofrecordtype.Suffix
    }
  func (s *NameOfRecordType) Suffix_IsNil() bool {
    return s.Suffix == nil || s.nameofrecordtype.Suffix == nil
    }

func (n *TimeElementType_SpanGap) Unset(key string) *TimeElementType_SpanGap {
        switch key {
  case "Type":
   n.timeelementtype_spangap.Type = nil
  case "StartDateTime":
   n.timeelementtype_spangap.StartDateTime = nil
  case "Code":
   n.timeelementtype_spangap.Code = nil
  case "Value":
   n.timeelementtype_spangap.Value = nil
  case "Name":
   n.timeelementtype_spangap.Name = nil
  case "EndDateTime":
   n.timeelementtype_spangap.EndDateTime = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeElementType_SpanGap")
        }
        return n
}

func (n *TimeElementType_SpanGap) SetProperty(key string, value interface{}) *TimeElementType_SpanGap {
        if n == nil {
                n, _ = TimeElementType_SpanGapPointer(TimeElementType_SpanGap{})
        }
        switch key {
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.timeelementtype_spangap.Type = ((*String)(v))
      }
    case "StartDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.timeelementtype_spangap.StartDateTime = ((*String)(v))
      }
    case "Code":
    
    if v, ok:= StringPointer(value); ok {
      n.timeelementtype_spangap.Code = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.timeelementtype_spangap.Value = ((*String)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.timeelementtype_spangap.Name = ((*String)(v))
      }
    case "EndDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.timeelementtype_spangap.EndDateTime = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeElementType_SpanGap")
        }
        return n
}

  func (s *TimeElementType_SpanGap) Type() *String {
    if s.timeelementtype_spangap.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.timeelementtype_spangap.Type = ((*String)(v))
      }
      }
      return s.timeelementtype_spangap.Type
    }
  func (s *TimeElementType_SpanGap) Type_IsNil() bool {
    return s.Type == nil || s.timeelementtype_spangap.Type == nil
    }
  func (s *TimeElementType_SpanGap) StartDateTime() *String {
    if s.timeelementtype_spangap.StartDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.timeelementtype_spangap.StartDateTime = ((*String)(v))
      }
      }
      return s.timeelementtype_spangap.StartDateTime
    }
  func (s *TimeElementType_SpanGap) StartDateTime_IsNil() bool {
    return s.StartDateTime == nil || s.timeelementtype_spangap.StartDateTime == nil
    }
  func (s *TimeElementType_SpanGap) Code() *String {
    if s.timeelementtype_spangap.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.timeelementtype_spangap.Code = ((*String)(v))
      }
      }
      return s.timeelementtype_spangap.Code
    }
  func (s *TimeElementType_SpanGap) Code_IsNil() bool {
    return s.Code == nil || s.timeelementtype_spangap.Code == nil
    }
  func (s *TimeElementType_SpanGap) Value() *String {
    if s.timeelementtype_spangap.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.timeelementtype_spangap.Value = ((*String)(v))
      }
      }
      return s.timeelementtype_spangap.Value
    }
  func (s *TimeElementType_SpanGap) Value_IsNil() bool {
    return s.Value == nil || s.timeelementtype_spangap.Value == nil
    }
  func (s *TimeElementType_SpanGap) Name() *String {
    if s.timeelementtype_spangap.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.timeelementtype_spangap.Name = ((*String)(v))
      }
      }
      return s.timeelementtype_spangap.Name
    }
  func (s *TimeElementType_SpanGap) Name_IsNil() bool {
    return s.Name == nil || s.timeelementtype_spangap.Name == nil
    }
  func (s *TimeElementType_SpanGap) EndDateTime() *String {
    if s.timeelementtype_spangap.EndDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.timeelementtype_spangap.EndDateTime = ((*String)(v))
      }
      }
      return s.timeelementtype_spangap.EndDateTime
    }
  func (s *TimeElementType_SpanGap) EndDateTime_IsNil() bool {
    return s.EndDateTime == nil || s.timeelementtype_spangap.EndDateTime == nil
    }

func (n *LocationType) Unset(key string) *LocationType {
        switch key {
  case "LocationName":
   n.locationtype.LocationName = nil
  case "Type":
   n.locationtype.Type = nil
  case "LocationRefId":
   n.locationtype.LocationRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocationType")
        }
        return n
}

func (n *LocationType) SetProperty(key string, value interface{}) *LocationType {
        if n == nil {
                n, _ = LocationTypePointer(LocationType{})
        }
        switch key {
    case "LocationName":
    
    if v, ok:= StringPointer(value); ok {
      n.locationtype.LocationName = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.locationtype.Type = ((*String)(v))
      }
    case "LocationRefId":
    if v, ok:= LocationType_LocationRefIdPointer(value); ok {
      n.locationtype.LocationRefId = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocationType")
        }
        return n
}

  func (s *LocationType) LocationName() *String {
    if s.locationtype.LocationName == nil {
    if v, ok:= StringPointer(""); ok {
      s.locationtype.LocationName = ((*String)(v))
      }
      }
      return s.locationtype.LocationName
    }
  func (s *LocationType) LocationName_IsNil() bool {
    return s.LocationName == nil || s.locationtype.LocationName == nil
    }
  func (s *LocationType) Type() *String {
    if s.locationtype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.locationtype.Type = ((*String)(v))
      }
      }
      return s.locationtype.Type
    }
  func (s *LocationType) Type_IsNil() bool {
    return s.Type == nil || s.locationtype.Type == nil
    }
  func (s *LocationType) LocationRefId() *LocationType_LocationRefId {
    if s.locationtype.LocationRefId == nil {
     if v, ok:= LocationType_LocationRefIdPointer(LocationType_LocationRefId{}); ok {
      s.locationtype.LocationRefId = v
      }
      }
      return s.locationtype.LocationRefId
    }
  func (s *LocationType) LocationRefId_IsNil() bool {
    return s.LocationRefId == nil || s.locationtype.LocationRefId == nil
    }

func (n *CheckoutInfoType) Unset(key string) *CheckoutInfoType {
        switch key {
  case "CheckedOutOn":
   n.checkoutinfotype.CheckedOutOn = nil
  case "ReturnBy":
   n.checkoutinfotype.ReturnBy = nil
  case "RenewalCount":
   n.checkoutinfotype.RenewalCount = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CheckoutInfoType")
        }
        return n
}

func (n *CheckoutInfoType) SetProperty(key string, value interface{}) *CheckoutInfoType {
        if n == nil {
                n, _ = CheckoutInfoTypePointer(CheckoutInfoType{})
        }
        switch key {
    case "CheckedOutOn":
    
    if v, ok:= StringPointer(value); ok {
      n.checkoutinfotype.CheckedOutOn = ((*String)(v))
      }
    case "ReturnBy":
    
    if v, ok:= StringPointer(value); ok {
      n.checkoutinfotype.ReturnBy = ((*String)(v))
      }
    case "RenewalCount":
    
    if v, ok:= IntPointer(value); ok {
      n.checkoutinfotype.RenewalCount = ((*Int)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CheckoutInfoType")
        }
        return n
}

  func (s *CheckoutInfoType) CheckedOutOn() *String {
    if s.checkoutinfotype.CheckedOutOn == nil {
    if v, ok:= StringPointer(""); ok {
      s.checkoutinfotype.CheckedOutOn = ((*String)(v))
      }
      }
      return s.checkoutinfotype.CheckedOutOn
    }
  func (s *CheckoutInfoType) CheckedOutOn_IsNil() bool {
    return s.CheckedOutOn == nil || s.checkoutinfotype.CheckedOutOn == nil
    }
  func (s *CheckoutInfoType) ReturnBy() *String {
    if s.checkoutinfotype.ReturnBy == nil {
    if v, ok:= StringPointer(""); ok {
      s.checkoutinfotype.ReturnBy = ((*String)(v))
      }
      }
      return s.checkoutinfotype.ReturnBy
    }
  func (s *CheckoutInfoType) ReturnBy_IsNil() bool {
    return s.ReturnBy == nil || s.checkoutinfotype.ReturnBy == nil
    }
  func (s *CheckoutInfoType) RenewalCount() *Int {
    if s.checkoutinfotype.RenewalCount == nil {
    if v, ok:= IntPointer(0); ok {
      s.checkoutinfotype.RenewalCount = ((*Int)(v))
      }
      }
      return s.checkoutinfotype.RenewalCount
    }
  func (s *CheckoutInfoType) RenewalCount_IsNil() bool {
    return s.RenewalCount == nil || s.checkoutinfotype.RenewalCount == nil
    }

func (n *NAPTestletResponseType) Unset(key string) *NAPTestletResponseType {
        switch key {
  case "NAPTestletRefId":
   n.naptestletresponsetype.NAPTestletRefId = nil
  case "NAPTestletLocalId":
   n.naptestletresponsetype.NAPTestletLocalId = nil
  case "ItemResponseList":
   n.naptestletresponsetype.ItemResponseList = nil
  case "TestletSubScore":
   n.naptestletresponsetype.TestletSubScore = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletResponseType")
        }
        return n
}

func (n *NAPTestletResponseType) SetProperty(key string, value interface{}) *NAPTestletResponseType {
        if n == nil {
                n, _ = NAPTestletResponseTypePointer(NAPTestletResponseType{})
        }
        switch key {
    case "NAPTestletRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestletresponsetype.NAPTestletRefId = ((*String)(v))
      }
    case "NAPTestletLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestletresponsetype.NAPTestletLocalId = ((*LocalIdType)(v))
      }
    case "ItemResponseList":
    if v, ok:= NAPTestletItemResponseListTypePointer(value); ok {
      n.naptestletresponsetype.ItemResponseList = v
      }
    case "TestletSubScore":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestletresponsetype.TestletSubScore = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletResponseType")
        }
        return n
}

  func (s *NAPTestletResponseType) NAPTestletRefId() *String {
    if s.naptestletresponsetype.NAPTestletRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestletresponsetype.NAPTestletRefId = ((*String)(v))
      }
      }
      return s.naptestletresponsetype.NAPTestletRefId
    }
  func (s *NAPTestletResponseType) NAPTestletRefId_IsNil() bool {
    return s.NAPTestletRefId == nil || s.naptestletresponsetype.NAPTestletRefId == nil
    }
  func (s *NAPTestletResponseType) NAPTestletLocalId() *LocalIdType {
    if s.naptestletresponsetype.NAPTestletLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestletresponsetype.NAPTestletLocalId = ((*LocalIdType)(v))
      }
      }
      return s.naptestletresponsetype.NAPTestletLocalId
    }
  func (s *NAPTestletResponseType) NAPTestletLocalId_IsNil() bool {
    return s.NAPTestletLocalId == nil || s.naptestletresponsetype.NAPTestletLocalId == nil
    }
  func (s *NAPTestletResponseType) ItemResponseList() *NAPTestletItemResponseListType {
    if s.naptestletresponsetype.ItemResponseList == nil {
     if v, ok:= NAPTestletItemResponseListTypePointer(NAPTestletItemResponseListType{}); ok {
      s.naptestletresponsetype.ItemResponseList = v
      }
      }
      return s.naptestletresponsetype.ItemResponseList
    }
  func (s *NAPTestletResponseType) ItemResponseList_IsNil() bool {
    return s.ItemResponseList == nil || s.naptestletresponsetype.ItemResponseList == nil
    }
  func (s *NAPTestletResponseType) TestletSubScore() *Float {
    if s.naptestletresponsetype.TestletSubScore == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestletresponsetype.TestletSubScore = ((*Float)(v))
      }
      }
      return s.naptestletresponsetype.TestletSubScore
    }
  func (s *NAPTestletResponseType) TestletSubScore_IsNil() bool {
    return s.TestletSubScore == nil || s.naptestletresponsetype.TestletSubScore == nil
    }

func (n *DomainBandsContainerType) Unset(key string) *DomainBandsContainerType {
        switch key {
  case "Band7Lower":
   n.domainbandscontainertype.Band7Lower = nil
  case "Band8Lower":
   n.domainbandscontainertype.Band8Lower = nil
  case "Band10Lower":
   n.domainbandscontainertype.Band10Lower = nil
  case "Band5Lower":
   n.domainbandscontainertype.Band5Lower = nil
  case "Band4Lower":
   n.domainbandscontainertype.Band4Lower = nil
  case "Band10Upper":
   n.domainbandscontainertype.Band10Upper = nil
  case "Band1Upper":
   n.domainbandscontainertype.Band1Upper = nil
  case "Band6Lower":
   n.domainbandscontainertype.Band6Lower = nil
  case "Band3Upper":
   n.domainbandscontainertype.Band3Upper = nil
  case "Band9Upper":
   n.domainbandscontainertype.Band9Upper = nil
  case "Band2Upper":
   n.domainbandscontainertype.Band2Upper = nil
  case "Band7Upper":
   n.domainbandscontainertype.Band7Upper = nil
  case "Band8Upper":
   n.domainbandscontainertype.Band8Upper = nil
  case "Band2Lower":
   n.domainbandscontainertype.Band2Lower = nil
  case "Band9Lower":
   n.domainbandscontainertype.Band9Lower = nil
  case "Band3Lower":
   n.domainbandscontainertype.Band3Lower = nil
  case "Band5Upper":
   n.domainbandscontainertype.Band5Upper = nil
  case "Band4Upper":
   n.domainbandscontainertype.Band4Upper = nil
  case "Band1Lower":
   n.domainbandscontainertype.Band1Lower = nil
  case "Band6Upper":
   n.domainbandscontainertype.Band6Upper = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DomainBandsContainerType")
        }
        return n
}

func (n *DomainBandsContainerType) SetProperty(key string, value interface{}) *DomainBandsContainerType {
        if n == nil {
                n, _ = DomainBandsContainerTypePointer(DomainBandsContainerType{})
        }
        switch key {
    case "Band7Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band7Lower = ((*Float)(v))
      }
    case "Band8Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band8Lower = ((*Float)(v))
      }
    case "Band10Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band10Lower = ((*Float)(v))
      }
    case "Band5Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band5Lower = ((*Float)(v))
      }
    case "Band4Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band4Lower = ((*Float)(v))
      }
    case "Band10Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band10Upper = ((*Float)(v))
      }
    case "Band1Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band1Upper = ((*Float)(v))
      }
    case "Band6Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band6Lower = ((*Float)(v))
      }
    case "Band3Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band3Upper = ((*Float)(v))
      }
    case "Band9Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band9Upper = ((*Float)(v))
      }
    case "Band2Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band2Upper = ((*Float)(v))
      }
    case "Band7Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band7Upper = ((*Float)(v))
      }
    case "Band8Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band8Upper = ((*Float)(v))
      }
    case "Band2Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band2Lower = ((*Float)(v))
      }
    case "Band9Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band9Lower = ((*Float)(v))
      }
    case "Band3Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band3Lower = ((*Float)(v))
      }
    case "Band5Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band5Upper = ((*Float)(v))
      }
    case "Band4Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band4Upper = ((*Float)(v))
      }
    case "Band1Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band1Lower = ((*Float)(v))
      }
    case "Band6Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainbandscontainertype.Band6Upper = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DomainBandsContainerType")
        }
        return n
}

  func (s *DomainBandsContainerType) Band7Lower() *Float {
    if s.domainbandscontainertype.Band7Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band7Lower = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band7Lower
    }
  func (s *DomainBandsContainerType) Band7Lower_IsNil() bool {
    return s.Band7Lower == nil || s.domainbandscontainertype.Band7Lower == nil
    }
  func (s *DomainBandsContainerType) Band8Lower() *Float {
    if s.domainbandscontainertype.Band8Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band8Lower = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band8Lower
    }
  func (s *DomainBandsContainerType) Band8Lower_IsNil() bool {
    return s.Band8Lower == nil || s.domainbandscontainertype.Band8Lower == nil
    }
  func (s *DomainBandsContainerType) Band10Lower() *Float {
    if s.domainbandscontainertype.Band10Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band10Lower = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band10Lower
    }
  func (s *DomainBandsContainerType) Band10Lower_IsNil() bool {
    return s.Band10Lower == nil || s.domainbandscontainertype.Band10Lower == nil
    }
  func (s *DomainBandsContainerType) Band5Lower() *Float {
    if s.domainbandscontainertype.Band5Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band5Lower = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band5Lower
    }
  func (s *DomainBandsContainerType) Band5Lower_IsNil() bool {
    return s.Band5Lower == nil || s.domainbandscontainertype.Band5Lower == nil
    }
  func (s *DomainBandsContainerType) Band4Lower() *Float {
    if s.domainbandscontainertype.Band4Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band4Lower = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band4Lower
    }
  func (s *DomainBandsContainerType) Band4Lower_IsNil() bool {
    return s.Band4Lower == nil || s.domainbandscontainertype.Band4Lower == nil
    }
  func (s *DomainBandsContainerType) Band10Upper() *Float {
    if s.domainbandscontainertype.Band10Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band10Upper = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band10Upper
    }
  func (s *DomainBandsContainerType) Band10Upper_IsNil() bool {
    return s.Band10Upper == nil || s.domainbandscontainertype.Band10Upper == nil
    }
  func (s *DomainBandsContainerType) Band1Upper() *Float {
    if s.domainbandscontainertype.Band1Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band1Upper = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band1Upper
    }
  func (s *DomainBandsContainerType) Band1Upper_IsNil() bool {
    return s.Band1Upper == nil || s.domainbandscontainertype.Band1Upper == nil
    }
  func (s *DomainBandsContainerType) Band6Lower() *Float {
    if s.domainbandscontainertype.Band6Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band6Lower = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band6Lower
    }
  func (s *DomainBandsContainerType) Band6Lower_IsNil() bool {
    return s.Band6Lower == nil || s.domainbandscontainertype.Band6Lower == nil
    }
  func (s *DomainBandsContainerType) Band3Upper() *Float {
    if s.domainbandscontainertype.Band3Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band3Upper = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band3Upper
    }
  func (s *DomainBandsContainerType) Band3Upper_IsNil() bool {
    return s.Band3Upper == nil || s.domainbandscontainertype.Band3Upper == nil
    }
  func (s *DomainBandsContainerType) Band9Upper() *Float {
    if s.domainbandscontainertype.Band9Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band9Upper = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band9Upper
    }
  func (s *DomainBandsContainerType) Band9Upper_IsNil() bool {
    return s.Band9Upper == nil || s.domainbandscontainertype.Band9Upper == nil
    }
  func (s *DomainBandsContainerType) Band2Upper() *Float {
    if s.domainbandscontainertype.Band2Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band2Upper = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band2Upper
    }
  func (s *DomainBandsContainerType) Band2Upper_IsNil() bool {
    return s.Band2Upper == nil || s.domainbandscontainertype.Band2Upper == nil
    }
  func (s *DomainBandsContainerType) Band7Upper() *Float {
    if s.domainbandscontainertype.Band7Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band7Upper = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band7Upper
    }
  func (s *DomainBandsContainerType) Band7Upper_IsNil() bool {
    return s.Band7Upper == nil || s.domainbandscontainertype.Band7Upper == nil
    }
  func (s *DomainBandsContainerType) Band8Upper() *Float {
    if s.domainbandscontainertype.Band8Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band8Upper = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band8Upper
    }
  func (s *DomainBandsContainerType) Band8Upper_IsNil() bool {
    return s.Band8Upper == nil || s.domainbandscontainertype.Band8Upper == nil
    }
  func (s *DomainBandsContainerType) Band2Lower() *Float {
    if s.domainbandscontainertype.Band2Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band2Lower = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band2Lower
    }
  func (s *DomainBandsContainerType) Band2Lower_IsNil() bool {
    return s.Band2Lower == nil || s.domainbandscontainertype.Band2Lower == nil
    }
  func (s *DomainBandsContainerType) Band9Lower() *Float {
    if s.domainbandscontainertype.Band9Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band9Lower = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band9Lower
    }
  func (s *DomainBandsContainerType) Band9Lower_IsNil() bool {
    return s.Band9Lower == nil || s.domainbandscontainertype.Band9Lower == nil
    }
  func (s *DomainBandsContainerType) Band3Lower() *Float {
    if s.domainbandscontainertype.Band3Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band3Lower = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band3Lower
    }
  func (s *DomainBandsContainerType) Band3Lower_IsNil() bool {
    return s.Band3Lower == nil || s.domainbandscontainertype.Band3Lower == nil
    }
  func (s *DomainBandsContainerType) Band5Upper() *Float {
    if s.domainbandscontainertype.Band5Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band5Upper = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band5Upper
    }
  func (s *DomainBandsContainerType) Band5Upper_IsNil() bool {
    return s.Band5Upper == nil || s.domainbandscontainertype.Band5Upper == nil
    }
  func (s *DomainBandsContainerType) Band4Upper() *Float {
    if s.domainbandscontainertype.Band4Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band4Upper = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band4Upper
    }
  func (s *DomainBandsContainerType) Band4Upper_IsNil() bool {
    return s.Band4Upper == nil || s.domainbandscontainertype.Band4Upper == nil
    }
  func (s *DomainBandsContainerType) Band1Lower() *Float {
    if s.domainbandscontainertype.Band1Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band1Lower = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band1Lower
    }
  func (s *DomainBandsContainerType) Band1Lower_IsNil() bool {
    return s.Band1Lower == nil || s.domainbandscontainertype.Band1Lower == nil
    }
  func (s *DomainBandsContainerType) Band6Upper() *Float {
    if s.domainbandscontainertype.Band6Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainbandscontainertype.Band6Upper = ((*Float)(v))
      }
      }
      return s.domainbandscontainertype.Band6Upper
    }
  func (s *DomainBandsContainerType) Band6Upper_IsNil() bool {
    return s.Band6Upper == nil || s.domainbandscontainertype.Band6Upper == nil
    }

func (n *FinancialAccount) Unset(key string) *FinancialAccount {
        switch key {
  case "SIF_Metadata":
   n.financialaccount.SIF_Metadata = nil
  case "AccountCode":
   n.financialaccount.AccountCode = nil
  case "ClassType":
   n.financialaccount.ClassType = nil
  case "RefId":
   n.financialaccount.RefId = nil
  case "LocalId":
   n.financialaccount.LocalId = nil
  case "ChargedLocationInfoRefId":
   n.financialaccount.ChargedLocationInfoRefId = nil
  case "Name":
   n.financialaccount.Name = nil
  case "CreationDate":
   n.financialaccount.CreationDate = nil
  case "SIF_ExtendedElements":
   n.financialaccount.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.financialaccount.LocalCodeList = nil
  case "ParentAccountRefId":
   n.financialaccount.ParentAccountRefId = nil
  case "CreationTime":
   n.financialaccount.CreationTime = nil
  case "AccountNumber":
   n.financialaccount.AccountNumber = nil
  case "Description":
   n.financialaccount.Description = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FinancialAccount")
        }
        return n
}

func (n *FinancialAccount) SetProperty(key string, value interface{}) *FinancialAccount {
        if n == nil {
                n, _ = FinancialAccountPointer(FinancialAccount{})
        }
        switch key {
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.financialaccount.SIF_Metadata = v
      }
    case "AccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.financialaccount.AccountCode = ((*String)(v))
      }
    case "ClassType":
    
    if v, ok:= StringPointer(value); ok {
      n.financialaccount.ClassType = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.financialaccount.RefId = ((*RefIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.financialaccount.LocalId = ((*LocalIdType)(v))
      }
    case "ChargedLocationInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.financialaccount.ChargedLocationInfoRefId = ((*String)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.financialaccount.Name = ((*String)(v))
      }
    case "CreationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.financialaccount.CreationDate = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.financialaccount.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.financialaccount.LocalCodeList = v
      }
    case "ParentAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.financialaccount.ParentAccountRefId = ((*String)(v))
      }
    case "CreationTime":
    
    if v, ok:= StringPointer(value); ok {
      n.financialaccount.CreationTime = ((*String)(v))
      }
    case "AccountNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.financialaccount.AccountNumber = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.financialaccount.Description = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FinancialAccount")
        }
        return n
}

  func (s *FinancialAccount) SIF_Metadata() *SIF_MetadataType {
    if s.financialaccount.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.financialaccount.SIF_Metadata = v
      }
      }
      return s.financialaccount.SIF_Metadata
    }
  func (s *FinancialAccount) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.financialaccount.SIF_Metadata == nil
    }
  func (s *FinancialAccount) AccountCode() *String {
    if s.financialaccount.AccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialaccount.AccountCode = ((*String)(v))
      }
      }
      return s.financialaccount.AccountCode
    }
  func (s *FinancialAccount) AccountCode_IsNil() bool {
    return s.AccountCode == nil || s.financialaccount.AccountCode == nil
    }
  func (s *FinancialAccount) ClassType() *String {
    if s.financialaccount.ClassType == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialaccount.ClassType = ((*String)(v))
      }
      }
      return s.financialaccount.ClassType
    }
  func (s *FinancialAccount) ClassType_IsNil() bool {
    return s.ClassType == nil || s.financialaccount.ClassType == nil
    }
  func (s *FinancialAccount) RefId() *RefIdType {
    if s.financialaccount.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialaccount.RefId = ((*RefIdType)(v))
      }
      }
      return s.financialaccount.RefId
    }
  func (s *FinancialAccount) RefId_IsNil() bool {
    return s.RefId == nil || s.financialaccount.RefId == nil
    }
  func (s *FinancialAccount) LocalId() *LocalIdType {
    if s.financialaccount.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialaccount.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.financialaccount.LocalId
    }
  func (s *FinancialAccount) LocalId_IsNil() bool {
    return s.LocalId == nil || s.financialaccount.LocalId == nil
    }
  func (s *FinancialAccount) ChargedLocationInfoRefId() *String {
    if s.financialaccount.ChargedLocationInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialaccount.ChargedLocationInfoRefId = ((*String)(v))
      }
      }
      return s.financialaccount.ChargedLocationInfoRefId
    }
  func (s *FinancialAccount) ChargedLocationInfoRefId_IsNil() bool {
    return s.ChargedLocationInfoRefId == nil || s.financialaccount.ChargedLocationInfoRefId == nil
    }
  func (s *FinancialAccount) Name() *String {
    if s.financialaccount.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialaccount.Name = ((*String)(v))
      }
      }
      return s.financialaccount.Name
    }
  func (s *FinancialAccount) Name_IsNil() bool {
    return s.Name == nil || s.financialaccount.Name == nil
    }
  func (s *FinancialAccount) CreationDate() *String {
    if s.financialaccount.CreationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialaccount.CreationDate = ((*String)(v))
      }
      }
      return s.financialaccount.CreationDate
    }
  func (s *FinancialAccount) CreationDate_IsNil() bool {
    return s.CreationDate == nil || s.financialaccount.CreationDate == nil
    }
  func (s *FinancialAccount) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.financialaccount.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.financialaccount.SIF_ExtendedElements = v
      }
      }
      return s.financialaccount.SIF_ExtendedElements
    }
  func (s *FinancialAccount) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.financialaccount.SIF_ExtendedElements == nil
    }
  func (s *FinancialAccount) LocalCodeList() *LocalCodeListType {
    if s.financialaccount.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.financialaccount.LocalCodeList = v
      }
      }
      return s.financialaccount.LocalCodeList
    }
  func (s *FinancialAccount) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.financialaccount.LocalCodeList == nil
    }
  func (s *FinancialAccount) ParentAccountRefId() *String {
    if s.financialaccount.ParentAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialaccount.ParentAccountRefId = ((*String)(v))
      }
      }
      return s.financialaccount.ParentAccountRefId
    }
  func (s *FinancialAccount) ParentAccountRefId_IsNil() bool {
    return s.ParentAccountRefId == nil || s.financialaccount.ParentAccountRefId == nil
    }
  func (s *FinancialAccount) CreationTime() *String {
    if s.financialaccount.CreationTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialaccount.CreationTime = ((*String)(v))
      }
      }
      return s.financialaccount.CreationTime
    }
  func (s *FinancialAccount) CreationTime_IsNil() bool {
    return s.CreationTime == nil || s.financialaccount.CreationTime == nil
    }
  func (s *FinancialAccount) AccountNumber() *String {
    if s.financialaccount.AccountNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialaccount.AccountNumber = ((*String)(v))
      }
      }
      return s.financialaccount.AccountNumber
    }
  func (s *FinancialAccount) AccountNumber_IsNil() bool {
    return s.AccountNumber == nil || s.financialaccount.AccountNumber == nil
    }
  func (s *FinancialAccount) Description() *String {
    if s.financialaccount.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialaccount.Description = ((*String)(v))
      }
      }
      return s.financialaccount.Description
    }
  func (s *FinancialAccount) Description_IsNil() bool {
    return s.Description == nil || s.financialaccount.Description == nil
    }

func (n *WellbeingEventCategoryType) Unset(key string) *WellbeingEventCategoryType {
        switch key {
  case "WellbeingEventSubCategoryList":
   n.wellbeingeventcategorytype.WellbeingEventSubCategoryList = nil
  case "EventCategory":
   n.wellbeingeventcategorytype.EventCategory = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingEventCategoryType")
        }
        return n
}

func (n *WellbeingEventCategoryType) SetProperty(key string, value interface{}) *WellbeingEventCategoryType {
        if n == nil {
                n, _ = WellbeingEventCategoryTypePointer(WellbeingEventCategoryType{})
        }
        switch key {
    case "WellbeingEventSubCategoryList":
    if v, ok:= WellbeingEventSubCategoryListTypePointer(value); ok {
      n.wellbeingeventcategorytype.WellbeingEventSubCategoryList = v
      }
    case "EventCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingeventcategorytype.EventCategory = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingEventCategoryType")
        }
        return n
}

  func (s *WellbeingEventCategoryType) WellbeingEventSubCategoryList() *WellbeingEventSubCategoryListType {
    if s.wellbeingeventcategorytype.WellbeingEventSubCategoryList == nil {
     if v, ok:= WellbeingEventSubCategoryListTypePointer(WellbeingEventSubCategoryListType{}); ok {
      s.wellbeingeventcategorytype.WellbeingEventSubCategoryList = v
      }
      }
      return s.wellbeingeventcategorytype.WellbeingEventSubCategoryList
    }
  func (s *WellbeingEventCategoryType) WellbeingEventSubCategoryList_IsNil() bool {
    return s.WellbeingEventSubCategoryList == nil || s.wellbeingeventcategorytype.WellbeingEventSubCategoryList == nil
    }
  func (s *WellbeingEventCategoryType) EventCategory() *String {
    if s.wellbeingeventcategorytype.EventCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingeventcategorytype.EventCategory = ((*String)(v))
      }
      }
      return s.wellbeingeventcategorytype.EventCategory
    }
  func (s *WellbeingEventCategoryType) EventCategory_IsNil() bool {
    return s.EventCategory == nil || s.wellbeingeventcategorytype.EventCategory == nil
    }

func (n *CensusCollection) Unset(key string) *CensusCollection {
        switch key {
  case "SIF_ExtendedElements":
   n.censuscollection.SIF_ExtendedElements = nil
  case "RefId":
   n.censuscollection.RefId = nil
  case "ReportingAuthorityCommonwealthId":
   n.censuscollection.ReportingAuthorityCommonwealthId = nil
  case "SIF_Metadata":
   n.censuscollection.SIF_Metadata = nil
  case "CensusYear":
   n.censuscollection.CensusYear = nil
  case "SoftwareVendorInfo":
   n.censuscollection.SoftwareVendorInfo = nil
  case "RoundCode":
   n.censuscollection.RoundCode = nil
  case "CensusReportingList":
   n.censuscollection.CensusReportingList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusCollection")
        }
        return n
}

func (n *CensusCollection) SetProperty(key string, value interface{}) *CensusCollection {
        if n == nil {
                n, _ = CensusCollectionPointer(CensusCollection{})
        }
        switch key {
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.censuscollection.SIF_ExtendedElements = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.censuscollection.RefId = ((*RefIdType)(v))
      }
    case "ReportingAuthorityCommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.censuscollection.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.censuscollection.SIF_Metadata = v
      }
    case "CensusYear":
    
    if v, ok:= StringPointer(value); ok {
      n.censuscollection.CensusYear = ((*SchoolYearType)(v))
      }
    case "SoftwareVendorInfo":
    if v, ok:= SoftwareVendorInfoContainerTypePointer(value); ok {
      n.censuscollection.SoftwareVendorInfo = v
      }
    case "RoundCode":
    
    if v, ok:= StringPointer(value); ok {
      n.censuscollection.RoundCode = ((*String)(v))
      }
    case "CensusReportingList":
    if v, ok:= CensusReportingListTypePointer(value); ok {
      n.censuscollection.CensusReportingList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusCollection")
        }
        return n
}

  func (s *CensusCollection) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.censuscollection.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.censuscollection.SIF_ExtendedElements = v
      }
      }
      return s.censuscollection.SIF_ExtendedElements
    }
  func (s *CensusCollection) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.censuscollection.SIF_ExtendedElements == nil
    }
  func (s *CensusCollection) RefId() *RefIdType {
    if s.censuscollection.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.censuscollection.RefId = ((*RefIdType)(v))
      }
      }
      return s.censuscollection.RefId
    }
  func (s *CensusCollection) RefId_IsNil() bool {
    return s.RefId == nil || s.censuscollection.RefId == nil
    }
  func (s *CensusCollection) ReportingAuthorityCommonwealthId() *String {
    if s.censuscollection.ReportingAuthorityCommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.censuscollection.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
      }
      return s.censuscollection.ReportingAuthorityCommonwealthId
    }
  func (s *CensusCollection) ReportingAuthorityCommonwealthId_IsNil() bool {
    return s.ReportingAuthorityCommonwealthId == nil || s.censuscollection.ReportingAuthorityCommonwealthId == nil
    }
  func (s *CensusCollection) SIF_Metadata() *SIF_MetadataType {
    if s.censuscollection.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.censuscollection.SIF_Metadata = v
      }
      }
      return s.censuscollection.SIF_Metadata
    }
  func (s *CensusCollection) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.censuscollection.SIF_Metadata == nil
    }
  func (s *CensusCollection) CensusYear() *SchoolYearType {
    if s.censuscollection.CensusYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.censuscollection.CensusYear = ((*SchoolYearType)(v))
      }
      }
      return s.censuscollection.CensusYear
    }
  func (s *CensusCollection) CensusYear_IsNil() bool {
    return s.CensusYear == nil || s.censuscollection.CensusYear == nil
    }
  func (s *CensusCollection) SoftwareVendorInfo() *SoftwareVendorInfoContainerType {
    if s.censuscollection.SoftwareVendorInfo == nil {
     if v, ok:= SoftwareVendorInfoContainerTypePointer(SoftwareVendorInfoContainerType{}); ok {
      s.censuscollection.SoftwareVendorInfo = v
      }
      }
      return s.censuscollection.SoftwareVendorInfo
    }
  func (s *CensusCollection) SoftwareVendorInfo_IsNil() bool {
    return s.SoftwareVendorInfo == nil || s.censuscollection.SoftwareVendorInfo == nil
    }
  func (s *CensusCollection) RoundCode() *String {
    if s.censuscollection.RoundCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.censuscollection.RoundCode = ((*String)(v))
      }
      }
      return s.censuscollection.RoundCode
    }
  func (s *CensusCollection) RoundCode_IsNil() bool {
    return s.RoundCode == nil || s.censuscollection.RoundCode == nil
    }
  func (s *CensusCollection) CensusReportingList() *CensusReportingListType {
    if s.censuscollection.CensusReportingList == nil {
     if v, ok:= CensusReportingListTypePointer(CensusReportingListType{}); ok {
      s.censuscollection.CensusReportingList = v
      }
      }
      return s.censuscollection.CensusReportingList
    }
  func (s *CensusCollection) CensusReportingList_IsNil() bool {
    return s.CensusReportingList == nil || s.censuscollection.CensusReportingList == nil
    }

func (n *PaymentReceipt) Unset(key string) *PaymentReceipt {
        switch key {
  case "TransactionType":
   n.paymentreceipt.TransactionType = nil
  case "SIF_Metadata":
   n.paymentreceipt.SIF_Metadata = nil
  case "TaxRate":
   n.paymentreceipt.TaxRate = nil
  case "AccountCodeList":
   n.paymentreceipt.AccountCodeList = nil
  case "ReceivedTransactionId":
   n.paymentreceipt.ReceivedTransactionId = nil
  case "TransactionDate":
   n.paymentreceipt.TransactionDate = nil
  case "VendorInfoRefId":
   n.paymentreceipt.VendorInfoRefId = nil
  case "PaymentReceiptLineList":
   n.paymentreceipt.PaymentReceiptLineList = nil
  case "LocalId":
   n.paymentreceipt.LocalId = nil
  case "TaxAmount":
   n.paymentreceipt.TaxAmount = nil
  case "ChequeNumber":
   n.paymentreceipt.ChequeNumber = nil
  case "RefId":
   n.paymentreceipt.RefId = nil
  case "InvoiceRefId":
   n.paymentreceipt.InvoiceRefId = nil
  case "TransactionNote":
   n.paymentreceipt.TransactionNote = nil
  case "FinancialAccountRefIdList":
   n.paymentreceipt.FinancialAccountRefIdList = nil
  case "LocalCodeList":
   n.paymentreceipt.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.paymentreceipt.SIF_ExtendedElements = nil
  case "TransactionMethod":
   n.paymentreceipt.TransactionMethod = nil
  case "ChargedLocationInfoRefId":
   n.paymentreceipt.ChargedLocationInfoRefId = nil
  case "TransactionAmount":
   n.paymentreceipt.TransactionAmount = nil
  case "TransactionDescription":
   n.paymentreceipt.TransactionDescription = nil
  case "DebtorRefId":
   n.paymentreceipt.DebtorRefId = nil
  case "AccountingPeriod":
   n.paymentreceipt.AccountingPeriod = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PaymentReceipt")
        }
        return n
}

func (n *PaymentReceipt) SetProperty(key string, value interface{}) *PaymentReceipt {
        if n == nil {
                n, _ = PaymentReceiptPointer(PaymentReceipt{})
        }
        switch key {
    case "TransactionType":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.TransactionType = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.paymentreceipt.SIF_Metadata = v
      }
    case "TaxRate":
    
    if v, ok:= FloatPointer(value); ok {
      n.paymentreceipt.TaxRate = ((*Float)(v))
      }
    case "AccountCodeList":
    if v, ok:= AccountCodeListTypePointer(value); ok {
      n.paymentreceipt.AccountCodeList = v
      }
    case "ReceivedTransactionId":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.ReceivedTransactionId = ((*String)(v))
      }
    case "TransactionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.TransactionDate = ((*String)(v))
      }
    case "VendorInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.VendorInfoRefId = ((*String)(v))
      }
    case "PaymentReceiptLineList":
    if v, ok:= PaymentReceiptLineListTypePointer(value); ok {
      n.paymentreceipt.PaymentReceiptLineList = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.LocalId = ((*LocalIdType)(v))
      }
    case "TaxAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.paymentreceipt.TaxAmount = v
      }
    case "ChequeNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.ChequeNumber = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.RefId = ((*RefIdType)(v))
      }
    case "InvoiceRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.InvoiceRefId = ((*String)(v))
      }
    case "TransactionNote":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.TransactionNote = ((*String)(v))
      }
    case "FinancialAccountRefIdList":
    if v, ok:= FinancialAccountRefIdListTypePointer(value); ok {
      n.paymentreceipt.FinancialAccountRefIdList = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.paymentreceipt.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.paymentreceipt.SIF_ExtendedElements = v
      }
    case "TransactionMethod":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.TransactionMethod = ((*String)(v))
      }
    case "ChargedLocationInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.ChargedLocationInfoRefId = ((*String)(v))
      }
    case "TransactionAmount":
    if v, ok:= DebitOrCreditAmountTypePointer(value); ok {
      n.paymentreceipt.TransactionAmount = v
      }
    case "TransactionDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.TransactionDescription = ((*String)(v))
      }
    case "DebtorRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.DebtorRefId = ((*String)(v))
      }
    case "AccountingPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceipt.AccountingPeriod = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PaymentReceipt")
        }
        return n
}

  func (s *PaymentReceipt) TransactionType() *String {
    if s.paymentreceipt.TransactionType == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.TransactionType = ((*String)(v))
      }
      }
      return s.paymentreceipt.TransactionType
    }
  func (s *PaymentReceipt) TransactionType_IsNil() bool {
    return s.TransactionType == nil || s.paymentreceipt.TransactionType == nil
    }
  func (s *PaymentReceipt) SIF_Metadata() *SIF_MetadataType {
    if s.paymentreceipt.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.paymentreceipt.SIF_Metadata = v
      }
      }
      return s.paymentreceipt.SIF_Metadata
    }
  func (s *PaymentReceipt) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.paymentreceipt.SIF_Metadata == nil
    }
  func (s *PaymentReceipt) TaxRate() *Float {
    if s.paymentreceipt.TaxRate == nil {
    if v, ok:= FloatPointer(0); ok {
      s.paymentreceipt.TaxRate = ((*Float)(v))
      }
      }
      return s.paymentreceipt.TaxRate
    }
  func (s *PaymentReceipt) TaxRate_IsNil() bool {
    return s.TaxRate == nil || s.paymentreceipt.TaxRate == nil
    }
  func (s *PaymentReceipt) AccountCodeList() *AccountCodeListType {
    if s.paymentreceipt.AccountCodeList == nil {
     if v, ok:= AccountCodeListTypePointer(AccountCodeListType{}); ok {
      s.paymentreceipt.AccountCodeList = v
      }
      }
      return s.paymentreceipt.AccountCodeList
    }
  func (s *PaymentReceipt) AccountCodeList_IsNil() bool {
    return s.AccountCodeList == nil || s.paymentreceipt.AccountCodeList == nil
    }
  func (s *PaymentReceipt) ReceivedTransactionId() *String {
    if s.paymentreceipt.ReceivedTransactionId == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.ReceivedTransactionId = ((*String)(v))
      }
      }
      return s.paymentreceipt.ReceivedTransactionId
    }
  func (s *PaymentReceipt) ReceivedTransactionId_IsNil() bool {
    return s.ReceivedTransactionId == nil || s.paymentreceipt.ReceivedTransactionId == nil
    }
  func (s *PaymentReceipt) TransactionDate() *String {
    if s.paymentreceipt.TransactionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.TransactionDate = ((*String)(v))
      }
      }
      return s.paymentreceipt.TransactionDate
    }
  func (s *PaymentReceipt) TransactionDate_IsNil() bool {
    return s.TransactionDate == nil || s.paymentreceipt.TransactionDate == nil
    }
  func (s *PaymentReceipt) VendorInfoRefId() *String {
    if s.paymentreceipt.VendorInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.VendorInfoRefId = ((*String)(v))
      }
      }
      return s.paymentreceipt.VendorInfoRefId
    }
  func (s *PaymentReceipt) VendorInfoRefId_IsNil() bool {
    return s.VendorInfoRefId == nil || s.paymentreceipt.VendorInfoRefId == nil
    }
  func (s *PaymentReceipt) PaymentReceiptLineList() *PaymentReceiptLineListType {
    if s.paymentreceipt.PaymentReceiptLineList == nil {
     if v, ok:= PaymentReceiptLineListTypePointer(PaymentReceiptLineListType{}); ok {
      s.paymentreceipt.PaymentReceiptLineList = v
      }
      }
      return s.paymentreceipt.PaymentReceiptLineList
    }
  func (s *PaymentReceipt) PaymentReceiptLineList_IsNil() bool {
    return s.PaymentReceiptLineList == nil || s.paymentreceipt.PaymentReceiptLineList == nil
    }
  func (s *PaymentReceipt) LocalId() *LocalIdType {
    if s.paymentreceipt.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.paymentreceipt.LocalId
    }
  func (s *PaymentReceipt) LocalId_IsNil() bool {
    return s.LocalId == nil || s.paymentreceipt.LocalId == nil
    }
  func (s *PaymentReceipt) TaxAmount() *MonetaryAmountType {
    if s.paymentreceipt.TaxAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.paymentreceipt.TaxAmount = v
      }
      }
      return s.paymentreceipt.TaxAmount
    }
  func (s *PaymentReceipt) TaxAmount_IsNil() bool {
    return s.TaxAmount == nil || s.paymentreceipt.TaxAmount == nil
    }
  func (s *PaymentReceipt) ChequeNumber() *String {
    if s.paymentreceipt.ChequeNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.ChequeNumber = ((*String)(v))
      }
      }
      return s.paymentreceipt.ChequeNumber
    }
  func (s *PaymentReceipt) ChequeNumber_IsNil() bool {
    return s.ChequeNumber == nil || s.paymentreceipt.ChequeNumber == nil
    }
  func (s *PaymentReceipt) RefId() *RefIdType {
    if s.paymentreceipt.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.RefId = ((*RefIdType)(v))
      }
      }
      return s.paymentreceipt.RefId
    }
  func (s *PaymentReceipt) RefId_IsNil() bool {
    return s.RefId == nil || s.paymentreceipt.RefId == nil
    }
  func (s *PaymentReceipt) InvoiceRefId() *String {
    if s.paymentreceipt.InvoiceRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.InvoiceRefId = ((*String)(v))
      }
      }
      return s.paymentreceipt.InvoiceRefId
    }
  func (s *PaymentReceipt) InvoiceRefId_IsNil() bool {
    return s.InvoiceRefId == nil || s.paymentreceipt.InvoiceRefId == nil
    }
  func (s *PaymentReceipt) TransactionNote() *String {
    if s.paymentreceipt.TransactionNote == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.TransactionNote = ((*String)(v))
      }
      }
      return s.paymentreceipt.TransactionNote
    }
  func (s *PaymentReceipt) TransactionNote_IsNil() bool {
    return s.TransactionNote == nil || s.paymentreceipt.TransactionNote == nil
    }
  func (s *PaymentReceipt) FinancialAccountRefIdList() *FinancialAccountRefIdListType {
    if s.paymentreceipt.FinancialAccountRefIdList == nil {
     if v, ok:= FinancialAccountRefIdListTypePointer(FinancialAccountRefIdListType{}); ok {
      s.paymentreceipt.FinancialAccountRefIdList = v
      }
      }
      return s.paymentreceipt.FinancialAccountRefIdList
    }
  func (s *PaymentReceipt) FinancialAccountRefIdList_IsNil() bool {
    return s.FinancialAccountRefIdList == nil || s.paymentreceipt.FinancialAccountRefIdList == nil
    }
  func (s *PaymentReceipt) LocalCodeList() *LocalCodeListType {
    if s.paymentreceipt.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.paymentreceipt.LocalCodeList = v
      }
      }
      return s.paymentreceipt.LocalCodeList
    }
  func (s *PaymentReceipt) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.paymentreceipt.LocalCodeList == nil
    }
  func (s *PaymentReceipt) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.paymentreceipt.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.paymentreceipt.SIF_ExtendedElements = v
      }
      }
      return s.paymentreceipt.SIF_ExtendedElements
    }
  func (s *PaymentReceipt) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.paymentreceipt.SIF_ExtendedElements == nil
    }
  func (s *PaymentReceipt) TransactionMethod() *String {
    if s.paymentreceipt.TransactionMethod == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.TransactionMethod = ((*String)(v))
      }
      }
      return s.paymentreceipt.TransactionMethod
    }
  func (s *PaymentReceipt) TransactionMethod_IsNil() bool {
    return s.TransactionMethod == nil || s.paymentreceipt.TransactionMethod == nil
    }
  func (s *PaymentReceipt) ChargedLocationInfoRefId() *String {
    if s.paymentreceipt.ChargedLocationInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.ChargedLocationInfoRefId = ((*String)(v))
      }
      }
      return s.paymentreceipt.ChargedLocationInfoRefId
    }
  func (s *PaymentReceipt) ChargedLocationInfoRefId_IsNil() bool {
    return s.ChargedLocationInfoRefId == nil || s.paymentreceipt.ChargedLocationInfoRefId == nil
    }
  func (s *PaymentReceipt) TransactionAmount() *DebitOrCreditAmountType {
    if s.paymentreceipt.TransactionAmount == nil {
     if v, ok:= DebitOrCreditAmountTypePointer(DebitOrCreditAmountType{}); ok {
      s.paymentreceipt.TransactionAmount = v
      }
      }
      return s.paymentreceipt.TransactionAmount
    }
  func (s *PaymentReceipt) TransactionAmount_IsNil() bool {
    return s.TransactionAmount == nil || s.paymentreceipt.TransactionAmount == nil
    }
  func (s *PaymentReceipt) TransactionDescription() *String {
    if s.paymentreceipt.TransactionDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.TransactionDescription = ((*String)(v))
      }
      }
      return s.paymentreceipt.TransactionDescription
    }
  func (s *PaymentReceipt) TransactionDescription_IsNil() bool {
    return s.TransactionDescription == nil || s.paymentreceipt.TransactionDescription == nil
    }
  func (s *PaymentReceipt) DebtorRefId() *String {
    if s.paymentreceipt.DebtorRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.DebtorRefId = ((*String)(v))
      }
      }
      return s.paymentreceipt.DebtorRefId
    }
  func (s *PaymentReceipt) DebtorRefId_IsNil() bool {
    return s.DebtorRefId == nil || s.paymentreceipt.DebtorRefId == nil
    }
  func (s *PaymentReceipt) AccountingPeriod() *LocalIdType {
    if s.paymentreceipt.AccountingPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceipt.AccountingPeriod = ((*LocalIdType)(v))
      }
      }
      return s.paymentreceipt.AccountingPeriod
    }
  func (s *PaymentReceipt) AccountingPeriod_IsNil() bool {
    return s.AccountingPeriod == nil || s.paymentreceipt.AccountingPeriod == nil
    }

func (n *BaseNameType) Unset(key string) *BaseNameType {
        switch key {
  case "PreferredGivenName":
   n.basenametype.PreferredGivenName = nil
  case "GivenName":
   n.basenametype.GivenName = nil
  case "FamilyName":
   n.basenametype.FamilyName = nil
  case "Title":
   n.basenametype.Title = nil
  case "FullName":
   n.basenametype.FullName = nil
  case "MiddleName":
   n.basenametype.MiddleName = nil
  case "PreferredFamilyName":
   n.basenametype.PreferredFamilyName = nil
  case "PreferredFamilyNameFirst":
   n.basenametype.PreferredFamilyNameFirst = nil
  case "FamilyNameFirst":
   n.basenametype.FamilyNameFirst = nil
  case "Suffix":
   n.basenametype.Suffix = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "BaseNameType")
        }
        return n
}

func (n *BaseNameType) SetProperty(key string, value interface{}) *BaseNameType {
        if n == nil {
                n, _ = BaseNameTypePointer(BaseNameType{})
        }
        switch key {
    case "PreferredGivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.basenametype.PreferredGivenName = ((*String)(v))
      }
    case "GivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.basenametype.GivenName = ((*String)(v))
      }
    case "FamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.basenametype.FamilyName = ((*String)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.basenametype.Title = ((*String)(v))
      }
    case "FullName":
    
    if v, ok:= StringPointer(value); ok {
      n.basenametype.FullName = ((*String)(v))
      }
    case "MiddleName":
    
    if v, ok:= StringPointer(value); ok {
      n.basenametype.MiddleName = ((*String)(v))
      }
    case "PreferredFamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.basenametype.PreferredFamilyName = ((*String)(v))
      }
    case "PreferredFamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.basenametype.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "FamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.basenametype.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Suffix":
    
    if v, ok:= StringPointer(value); ok {
      n.basenametype.Suffix = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "BaseNameType")
        }
        return n
}

  func (s *BaseNameType) PreferredGivenName() *String {
    if s.basenametype.PreferredGivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.basenametype.PreferredGivenName = ((*String)(v))
      }
      }
      return s.basenametype.PreferredGivenName
    }
  func (s *BaseNameType) PreferredGivenName_IsNil() bool {
    return s.PreferredGivenName == nil || s.basenametype.PreferredGivenName == nil
    }
  func (s *BaseNameType) GivenName() *String {
    if s.basenametype.GivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.basenametype.GivenName = ((*String)(v))
      }
      }
      return s.basenametype.GivenName
    }
  func (s *BaseNameType) GivenName_IsNil() bool {
    return s.GivenName == nil || s.basenametype.GivenName == nil
    }
  func (s *BaseNameType) FamilyName() *String {
    if s.basenametype.FamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.basenametype.FamilyName = ((*String)(v))
      }
      }
      return s.basenametype.FamilyName
    }
  func (s *BaseNameType) FamilyName_IsNil() bool {
    return s.FamilyName == nil || s.basenametype.FamilyName == nil
    }
  func (s *BaseNameType) Title() *String {
    if s.basenametype.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.basenametype.Title = ((*String)(v))
      }
      }
      return s.basenametype.Title
    }
  func (s *BaseNameType) Title_IsNil() bool {
    return s.Title == nil || s.basenametype.Title == nil
    }
  func (s *BaseNameType) FullName() *String {
    if s.basenametype.FullName == nil {
    if v, ok:= StringPointer(""); ok {
      s.basenametype.FullName = ((*String)(v))
      }
      }
      return s.basenametype.FullName
    }
  func (s *BaseNameType) FullName_IsNil() bool {
    return s.FullName == nil || s.basenametype.FullName == nil
    }
  func (s *BaseNameType) MiddleName() *String {
    if s.basenametype.MiddleName == nil {
    if v, ok:= StringPointer(""); ok {
      s.basenametype.MiddleName = ((*String)(v))
      }
      }
      return s.basenametype.MiddleName
    }
  func (s *BaseNameType) MiddleName_IsNil() bool {
    return s.MiddleName == nil || s.basenametype.MiddleName == nil
    }
  func (s *BaseNameType) PreferredFamilyName() *String {
    if s.basenametype.PreferredFamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.basenametype.PreferredFamilyName = ((*String)(v))
      }
      }
      return s.basenametype.PreferredFamilyName
    }
  func (s *BaseNameType) PreferredFamilyName_IsNil() bool {
    return s.PreferredFamilyName == nil || s.basenametype.PreferredFamilyName == nil
    }
  func (s *BaseNameType) PreferredFamilyNameFirst() *AUCodeSetsYesOrNoCategoryType {
    if s.basenametype.PreferredFamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.basenametype.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.basenametype.PreferredFamilyNameFirst
    }
  func (s *BaseNameType) PreferredFamilyNameFirst_IsNil() bool {
    return s.PreferredFamilyNameFirst == nil || s.basenametype.PreferredFamilyNameFirst == nil
    }
  func (s *BaseNameType) FamilyNameFirst() *AUCodeSetsYesOrNoCategoryType {
    if s.basenametype.FamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.basenametype.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.basenametype.FamilyNameFirst
    }
  func (s *BaseNameType) FamilyNameFirst_IsNil() bool {
    return s.FamilyNameFirst == nil || s.basenametype.FamilyNameFirst == nil
    }
  func (s *BaseNameType) Suffix() *String {
    if s.basenametype.Suffix == nil {
    if v, ok:= StringPointer(""); ok {
      s.basenametype.Suffix = ((*String)(v))
      }
      }
      return s.basenametype.Suffix
    }
  func (s *BaseNameType) Suffix_IsNil() bool {
    return s.Suffix == nil || s.basenametype.Suffix == nil
    }

func (n *DomainScoreType) Unset(key string) *DomainScoreType {
        switch key {
  case "StudentProficiency":
   n.domainscoretype.StudentProficiency = nil
  case "RawScore":
   n.domainscoretype.RawScore = nil
  case "ScaledScoreLogitStandardError":
   n.domainscoretype.ScaledScoreLogitStandardError = nil
  case "PlausibleScaledValueList":
   n.domainscoretype.PlausibleScaledValueList = nil
  case "ScaledScoreValue":
   n.domainscoretype.ScaledScoreValue = nil
  case "ScaledScoreLogitValue":
   n.domainscoretype.ScaledScoreLogitValue = nil
  case "ScaledScoreStandardError":
   n.domainscoretype.ScaledScoreStandardError = nil
  case "StudentDomainBand":
   n.domainscoretype.StudentDomainBand = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DomainScoreType")
        }
        return n
}

func (n *DomainScoreType) SetProperty(key string, value interface{}) *DomainScoreType {
        if n == nil {
                n, _ = DomainScoreTypePointer(DomainScoreType{})
        }
        switch key {
    case "StudentProficiency":
    
    if v, ok:= StringPointer(value); ok {
      n.domainscoretype.StudentProficiency = ((*String)(v))
      }
    case "RawScore":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainscoretype.RawScore = ((*Float)(v))
      }
    case "ScaledScoreLogitStandardError":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainscoretype.ScaledScoreLogitStandardError = ((*Float)(v))
      }
    case "PlausibleScaledValueList":
    if v, ok:= PlausibleScaledValueListTypePointer(value); ok {
      n.domainscoretype.PlausibleScaledValueList = v
      }
    case "ScaledScoreValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainscoretype.ScaledScoreValue = ((*Float)(v))
      }
    case "ScaledScoreLogitValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainscoretype.ScaledScoreLogitValue = ((*Float)(v))
      }
    case "ScaledScoreStandardError":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainscoretype.ScaledScoreStandardError = ((*Float)(v))
      }
    case "StudentDomainBand":
    
    if v, ok:= IntPointer(value); ok {
      n.domainscoretype.StudentDomainBand = ((*Int)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DomainScoreType")
        }
        return n
}

  func (s *DomainScoreType) StudentProficiency() *String {
    if s.domainscoretype.StudentProficiency == nil {
    if v, ok:= StringPointer(""); ok {
      s.domainscoretype.StudentProficiency = ((*String)(v))
      }
      }
      return s.domainscoretype.StudentProficiency
    }
  func (s *DomainScoreType) StudentProficiency_IsNil() bool {
    return s.StudentProficiency == nil || s.domainscoretype.StudentProficiency == nil
    }
  func (s *DomainScoreType) RawScore() *Float {
    if s.domainscoretype.RawScore == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainscoretype.RawScore = ((*Float)(v))
      }
      }
      return s.domainscoretype.RawScore
    }
  func (s *DomainScoreType) RawScore_IsNil() bool {
    return s.RawScore == nil || s.domainscoretype.RawScore == nil
    }
  func (s *DomainScoreType) ScaledScoreLogitStandardError() *Float {
    if s.domainscoretype.ScaledScoreLogitStandardError == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainscoretype.ScaledScoreLogitStandardError = ((*Float)(v))
      }
      }
      return s.domainscoretype.ScaledScoreLogitStandardError
    }
  func (s *DomainScoreType) ScaledScoreLogitStandardError_IsNil() bool {
    return s.ScaledScoreLogitStandardError == nil || s.domainscoretype.ScaledScoreLogitStandardError == nil
    }
  func (s *DomainScoreType) PlausibleScaledValueList() *PlausibleScaledValueListType {
    if s.domainscoretype.PlausibleScaledValueList == nil {
     if v, ok:= PlausibleScaledValueListTypePointer(PlausibleScaledValueListType{}); ok {
      s.domainscoretype.PlausibleScaledValueList = v
      }
      }
      return s.domainscoretype.PlausibleScaledValueList
    }
  func (s *DomainScoreType) PlausibleScaledValueList_IsNil() bool {
    return s.PlausibleScaledValueList == nil || s.domainscoretype.PlausibleScaledValueList == nil
    }
  func (s *DomainScoreType) ScaledScoreValue() *Float {
    if s.domainscoretype.ScaledScoreValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainscoretype.ScaledScoreValue = ((*Float)(v))
      }
      }
      return s.domainscoretype.ScaledScoreValue
    }
  func (s *DomainScoreType) ScaledScoreValue_IsNil() bool {
    return s.ScaledScoreValue == nil || s.domainscoretype.ScaledScoreValue == nil
    }
  func (s *DomainScoreType) ScaledScoreLogitValue() *Float {
    if s.domainscoretype.ScaledScoreLogitValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainscoretype.ScaledScoreLogitValue = ((*Float)(v))
      }
      }
      return s.domainscoretype.ScaledScoreLogitValue
    }
  func (s *DomainScoreType) ScaledScoreLogitValue_IsNil() bool {
    return s.ScaledScoreLogitValue == nil || s.domainscoretype.ScaledScoreLogitValue == nil
    }
  func (s *DomainScoreType) ScaledScoreStandardError() *Float {
    if s.domainscoretype.ScaledScoreStandardError == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainscoretype.ScaledScoreStandardError = ((*Float)(v))
      }
      }
      return s.domainscoretype.ScaledScoreStandardError
    }
  func (s *DomainScoreType) ScaledScoreStandardError_IsNil() bool {
    return s.ScaledScoreStandardError == nil || s.domainscoretype.ScaledScoreStandardError == nil
    }
  func (s *DomainScoreType) StudentDomainBand() *Int {
    if s.domainscoretype.StudentDomainBand == nil {
    if v, ok:= IntPointer(0); ok {
      s.domainscoretype.StudentDomainBand = ((*Int)(v))
      }
      }
      return s.domainscoretype.StudentDomainBand
    }
  func (s *DomainScoreType) StudentDomainBand_IsNil() bool {
    return s.StudentDomainBand == nil || s.domainscoretype.StudentDomainBand == nil
    }

func (n *CalendarDateInfoType) Unset(key string) *CalendarDateInfoType {
        switch key {
  case "OtherCodeList":
   n.calendardateinfotype.OtherCodeList = nil
  case "Code":
   n.calendardateinfotype.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CalendarDateInfoType")
        }
        return n
}

func (n *CalendarDateInfoType) SetProperty(key string, value interface{}) *CalendarDateInfoType {
        if n == nil {
                n, _ = CalendarDateInfoTypePointer(CalendarDateInfoType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.calendardateinfotype.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsCalendarEventType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsCalendarEventType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.calendardateinfotype.Code = ((*AUCodeSetsCalendarEventType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CalendarDateInfoType")
        }
        return n
}

  func (s *CalendarDateInfoType) OtherCodeList() *OtherCodeListType {
    if s.calendardateinfotype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.calendardateinfotype.OtherCodeList = v
      }
      }
      return s.calendardateinfotype.OtherCodeList
    }
  func (s *CalendarDateInfoType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.calendardateinfotype.OtherCodeList == nil
    }
  func (s *CalendarDateInfoType) Code() *AUCodeSetsCalendarEventType {
    if s.calendardateinfotype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendardateinfotype.Code = ((*AUCodeSetsCalendarEventType)(v))
      }
      }
      return s.calendardateinfotype.Code
    }
  func (s *CalendarDateInfoType) Code_IsNil() bool {
    return s.Code == nil || s.calendardateinfotype.Code == nil
    }

func (n *StudentActivityInfo) Unset(key string) *StudentActivityInfo {
        switch key {
  case "CurricularStatus":
   n.studentactivityinfo.CurricularStatus = nil
  case "Title":
   n.studentactivityinfo.Title = nil
  case "SIF_Metadata":
   n.studentactivityinfo.SIF_Metadata = nil
  case "LocalCodeList":
   n.studentactivityinfo.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.studentactivityinfo.SIF_ExtendedElements = nil
  case "Location":
   n.studentactivityinfo.Location = nil
  case "Description":
   n.studentactivityinfo.Description = nil
  case "StudentActivityType":
   n.studentactivityinfo.StudentActivityType = nil
  case "RefId":
   n.studentactivityinfo.RefId = nil
  case "StudentActivityLevel":
   n.studentactivityinfo.StudentActivityLevel = nil
  case "YearLevels":
   n.studentactivityinfo.YearLevels = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentActivityInfo")
        }
        return n
}

func (n *StudentActivityInfo) SetProperty(key string, value interface{}) *StudentActivityInfo {
        if n == nil {
                n, _ = StudentActivityInfoPointer(StudentActivityInfo{})
        }
        switch key {
    case "CurricularStatus":
        if !CodesetContains(AUCodeSetsActivityTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsActivityTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentactivityinfo.CurricularStatus = ((*AUCodeSetsActivityTypeType)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.studentactivityinfo.Title = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentactivityinfo.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentactivityinfo.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentactivityinfo.SIF_ExtendedElements = v
      }
    case "Location":
    if v, ok:= LocationTypePointer(value); ok {
      n.studentactivityinfo.Location = v
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.studentactivityinfo.Description = ((*String)(v))
      }
    case "StudentActivityType":
    if v, ok:= StudentActivityTypePointer(value); ok {
      n.studentactivityinfo.StudentActivityType = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentactivityinfo.RefId = ((*RefIdType)(v))
      }
    case "StudentActivityLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.studentactivityinfo.StudentActivityLevel = ((*String)(v))
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.studentactivityinfo.YearLevels = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentActivityInfo")
        }
        return n
}

  func (s *StudentActivityInfo) CurricularStatus() *AUCodeSetsActivityTypeType {
    if s.studentactivityinfo.CurricularStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivityinfo.CurricularStatus = ((*AUCodeSetsActivityTypeType)(v))
      }
      }
      return s.studentactivityinfo.CurricularStatus
    }
  func (s *StudentActivityInfo) CurricularStatus_IsNil() bool {
    return s.CurricularStatus == nil || s.studentactivityinfo.CurricularStatus == nil
    }
  func (s *StudentActivityInfo) Title() *String {
    if s.studentactivityinfo.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivityinfo.Title = ((*String)(v))
      }
      }
      return s.studentactivityinfo.Title
    }
  func (s *StudentActivityInfo) Title_IsNil() bool {
    return s.Title == nil || s.studentactivityinfo.Title == nil
    }
  func (s *StudentActivityInfo) SIF_Metadata() *SIF_MetadataType {
    if s.studentactivityinfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentactivityinfo.SIF_Metadata = v
      }
      }
      return s.studentactivityinfo.SIF_Metadata
    }
  func (s *StudentActivityInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentactivityinfo.SIF_Metadata == nil
    }
  func (s *StudentActivityInfo) LocalCodeList() *LocalCodeListType {
    if s.studentactivityinfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentactivityinfo.LocalCodeList = v
      }
      }
      return s.studentactivityinfo.LocalCodeList
    }
  func (s *StudentActivityInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentactivityinfo.LocalCodeList == nil
    }
  func (s *StudentActivityInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentactivityinfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentactivityinfo.SIF_ExtendedElements = v
      }
      }
      return s.studentactivityinfo.SIF_ExtendedElements
    }
  func (s *StudentActivityInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentactivityinfo.SIF_ExtendedElements == nil
    }
  func (s *StudentActivityInfo) Location() *LocationType {
    if s.studentactivityinfo.Location == nil {
     if v, ok:= LocationTypePointer(LocationType{}); ok {
      s.studentactivityinfo.Location = v
      }
      }
      return s.studentactivityinfo.Location
    }
  func (s *StudentActivityInfo) Location_IsNil() bool {
    return s.Location == nil || s.studentactivityinfo.Location == nil
    }
  func (s *StudentActivityInfo) Description() *String {
    if s.studentactivityinfo.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivityinfo.Description = ((*String)(v))
      }
      }
      return s.studentactivityinfo.Description
    }
  func (s *StudentActivityInfo) Description_IsNil() bool {
    return s.Description == nil || s.studentactivityinfo.Description == nil
    }
  func (s *StudentActivityInfo) StudentActivityType() *StudentActivityType {
    if s.studentactivityinfo.StudentActivityType == nil {
     if v, ok:= StudentActivityTypePointer(StudentActivityType{}); ok {
      s.studentactivityinfo.StudentActivityType = v
      }
      }
      return s.studentactivityinfo.StudentActivityType
    }
  func (s *StudentActivityInfo) StudentActivityType_IsNil() bool {
    return s.StudentActivityType == nil || s.studentactivityinfo.StudentActivityType == nil
    }
  func (s *StudentActivityInfo) RefId() *RefIdType {
    if s.studentactivityinfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivityinfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.studentactivityinfo.RefId
    }
  func (s *StudentActivityInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.studentactivityinfo.RefId == nil
    }
  func (s *StudentActivityInfo) StudentActivityLevel() *String {
    if s.studentactivityinfo.StudentActivityLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivityinfo.StudentActivityLevel = ((*String)(v))
      }
      }
      return s.studentactivityinfo.StudentActivityLevel
    }
  func (s *StudentActivityInfo) StudentActivityLevel_IsNil() bool {
    return s.StudentActivityLevel == nil || s.studentactivityinfo.StudentActivityLevel == nil
    }
  func (s *StudentActivityInfo) YearLevels() *YearLevelsType {
    if s.studentactivityinfo.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.studentactivityinfo.YearLevels = v
      }
      }
      return s.studentactivityinfo.YearLevels
    }
  func (s *StudentActivityInfo) YearLevels_IsNil() bool {
    return s.YearLevels == nil || s.studentactivityinfo.YearLevels == nil
    }

func (n *Invoice) Unset(key string) *Invoice {
        switch key {
  case "LocalCodeList":
   n.invoice.LocalCodeList = nil
  case "CreatedBy":
   n.invoice.CreatedBy = nil
  case "FormNumber":
   n.invoice.FormNumber = nil
  case "TransactionDescription":
   n.invoice.TransactionDescription = nil
  case "InvoicedEntity":
   n.invoice.InvoicedEntity = nil
  case "NetAmount":
   n.invoice.NetAmount = nil
  case "BilledAmount":
   n.invoice.BilledAmount = nil
  case "SIF_Metadata":
   n.invoice.SIF_Metadata = nil
  case "Voluntary":
   n.invoice.Voluntary = nil
  case "PurchasingItems":
   n.invoice.PurchasingItems = nil
  case "AccountCodeList":
   n.invoice.AccountCodeList = nil
  case "BillingDate":
   n.invoice.BillingDate = nil
  case "RelatedPurchaseOrderRefId":
   n.invoice.RelatedPurchaseOrderRefId = nil
  case "DueDate":
   n.invoice.DueDate = nil
  case "ItemDetail":
   n.invoice.ItemDetail = nil
  case "RefId":
   n.invoice.RefId = nil
  case "FinancialAccountRefIdList":
   n.invoice.FinancialAccountRefIdList = nil
  case "SIF_ExtendedElements":
   n.invoice.SIF_ExtendedElements = nil
  case "ChargedLocationInfoRefId":
   n.invoice.ChargedLocationInfoRefId = nil
  case "Ledger":
   n.invoice.Ledger = nil
  case "AccountingPeriod":
   n.invoice.AccountingPeriod = nil
  case "TaxRate":
   n.invoice.TaxRate = nil
  case "ApprovedBy":
   n.invoice.ApprovedBy = nil
  case "LocalId":
   n.invoice.LocalId = nil
  case "TaxAmount":
   n.invoice.TaxAmount = nil
  case "TaxType":
   n.invoice.TaxType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Invoice")
        }
        return n
}

func (n *Invoice) SetProperty(key string, value interface{}) *Invoice {
        if n == nil {
                n, _ = InvoicePointer(Invoice{})
        }
        switch key {
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.invoice.LocalCodeList = v
      }
    case "CreatedBy":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.CreatedBy = ((*String)(v))
      }
    case "FormNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.FormNumber = ((*LocalIdType)(v))
      }
    case "TransactionDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.TransactionDescription = ((*String)(v))
      }
    case "InvoicedEntity":
    if v, ok:= Invoice_InvoicedEntityPointer(value); ok {
      n.invoice.InvoicedEntity = v
      }
    case "NetAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.invoice.NetAmount = v
      }
    case "BilledAmount":
    if v, ok:= DebitOrCreditAmountTypePointer(value); ok {
      n.invoice.BilledAmount = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.invoice.SIF_Metadata = v
      }
    case "Voluntary":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.invoice.Voluntary = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "PurchasingItems":
    if v, ok:= PurchasingItemsTypePointer(value); ok {
      n.invoice.PurchasingItems = v
      }
    case "AccountCodeList":
    if v, ok:= AccountCodeListTypePointer(value); ok {
      n.invoice.AccountCodeList = v
      }
    case "BillingDate":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.BillingDate = ((*String)(v))
      }
    case "RelatedPurchaseOrderRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.RelatedPurchaseOrderRefId = ((*String)(v))
      }
    case "DueDate":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.DueDate = ((*String)(v))
      }
    case "ItemDetail":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.ItemDetail = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.RefId = ((*RefIdType)(v))
      }
    case "FinancialAccountRefIdList":
    if v, ok:= FinancialAccountRefIdListTypePointer(value); ok {
      n.invoice.FinancialAccountRefIdList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.invoice.SIF_ExtendedElements = v
      }
    case "ChargedLocationInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.ChargedLocationInfoRefId = ((*String)(v))
      }
    case "Ledger":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.Ledger = ((*String)(v))
      }
    case "AccountingPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.AccountingPeriod = ((*LocalIdType)(v))
      }
    case "TaxRate":
    
    if v, ok:= FloatPointer(value); ok {
      n.invoice.TaxRate = ((*Float)(v))
      }
    case "ApprovedBy":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.ApprovedBy = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.LocalId = ((*LocalIdType)(v))
      }
    case "TaxAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.invoice.TaxAmount = v
      }
    case "TaxType":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice.TaxType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Invoice")
        }
        return n
}

  func (s *Invoice) LocalCodeList() *LocalCodeListType {
    if s.invoice.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.invoice.LocalCodeList = v
      }
      }
      return s.invoice.LocalCodeList
    }
  func (s *Invoice) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.invoice.LocalCodeList == nil
    }
  func (s *Invoice) CreatedBy() *String {
    if s.invoice.CreatedBy == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.CreatedBy = ((*String)(v))
      }
      }
      return s.invoice.CreatedBy
    }
  func (s *Invoice) CreatedBy_IsNil() bool {
    return s.CreatedBy == nil || s.invoice.CreatedBy == nil
    }
  func (s *Invoice) FormNumber() *LocalIdType {
    if s.invoice.FormNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.FormNumber = ((*LocalIdType)(v))
      }
      }
      return s.invoice.FormNumber
    }
  func (s *Invoice) FormNumber_IsNil() bool {
    return s.FormNumber == nil || s.invoice.FormNumber == nil
    }
  func (s *Invoice) TransactionDescription() *String {
    if s.invoice.TransactionDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.TransactionDescription = ((*String)(v))
      }
      }
      return s.invoice.TransactionDescription
    }
  func (s *Invoice) TransactionDescription_IsNil() bool {
    return s.TransactionDescription == nil || s.invoice.TransactionDescription == nil
    }
  func (s *Invoice) InvoicedEntity() *Invoice_InvoicedEntity {
    if s.invoice.InvoicedEntity == nil {
     if v, ok:= Invoice_InvoicedEntityPointer(Invoice_InvoicedEntity{}); ok {
      s.invoice.InvoicedEntity = v
      }
      }
      return s.invoice.InvoicedEntity
    }
  func (s *Invoice) InvoicedEntity_IsNil() bool {
    return s.InvoicedEntity == nil || s.invoice.InvoicedEntity == nil
    }
  func (s *Invoice) NetAmount() *MonetaryAmountType {
    if s.invoice.NetAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.invoice.NetAmount = v
      }
      }
      return s.invoice.NetAmount
    }
  func (s *Invoice) NetAmount_IsNil() bool {
    return s.NetAmount == nil || s.invoice.NetAmount == nil
    }
  func (s *Invoice) BilledAmount() *DebitOrCreditAmountType {
    if s.invoice.BilledAmount == nil {
     if v, ok:= DebitOrCreditAmountTypePointer(DebitOrCreditAmountType{}); ok {
      s.invoice.BilledAmount = v
      }
      }
      return s.invoice.BilledAmount
    }
  func (s *Invoice) BilledAmount_IsNil() bool {
    return s.BilledAmount == nil || s.invoice.BilledAmount == nil
    }
  func (s *Invoice) SIF_Metadata() *SIF_MetadataType {
    if s.invoice.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.invoice.SIF_Metadata = v
      }
      }
      return s.invoice.SIF_Metadata
    }
  func (s *Invoice) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.invoice.SIF_Metadata == nil
    }
  func (s *Invoice) Voluntary() *AUCodeSetsYesOrNoCategoryType {
    if s.invoice.Voluntary == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.Voluntary = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.invoice.Voluntary
    }
  func (s *Invoice) Voluntary_IsNil() bool {
    return s.Voluntary == nil || s.invoice.Voluntary == nil
    }
  func (s *Invoice) PurchasingItems() *PurchasingItemsType {
    if s.invoice.PurchasingItems == nil {
     if v, ok:= PurchasingItemsTypePointer(PurchasingItemsType{}); ok {
      s.invoice.PurchasingItems = v
      }
      }
      return s.invoice.PurchasingItems
    }
  func (s *Invoice) PurchasingItems_IsNil() bool {
    return s.PurchasingItems == nil || s.invoice.PurchasingItems == nil
    }
  func (s *Invoice) AccountCodeList() *AccountCodeListType {
    if s.invoice.AccountCodeList == nil {
     if v, ok:= AccountCodeListTypePointer(AccountCodeListType{}); ok {
      s.invoice.AccountCodeList = v
      }
      }
      return s.invoice.AccountCodeList
    }
  func (s *Invoice) AccountCodeList_IsNil() bool {
    return s.AccountCodeList == nil || s.invoice.AccountCodeList == nil
    }
  func (s *Invoice) BillingDate() *String {
    if s.invoice.BillingDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.BillingDate = ((*String)(v))
      }
      }
      return s.invoice.BillingDate
    }
  func (s *Invoice) BillingDate_IsNil() bool {
    return s.BillingDate == nil || s.invoice.BillingDate == nil
    }
  func (s *Invoice) RelatedPurchaseOrderRefId() *String {
    if s.invoice.RelatedPurchaseOrderRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.RelatedPurchaseOrderRefId = ((*String)(v))
      }
      }
      return s.invoice.RelatedPurchaseOrderRefId
    }
  func (s *Invoice) RelatedPurchaseOrderRefId_IsNil() bool {
    return s.RelatedPurchaseOrderRefId == nil || s.invoice.RelatedPurchaseOrderRefId == nil
    }
  func (s *Invoice) DueDate() *String {
    if s.invoice.DueDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.DueDate = ((*String)(v))
      }
      }
      return s.invoice.DueDate
    }
  func (s *Invoice) DueDate_IsNil() bool {
    return s.DueDate == nil || s.invoice.DueDate == nil
    }
  func (s *Invoice) ItemDetail() *String {
    if s.invoice.ItemDetail == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.ItemDetail = ((*String)(v))
      }
      }
      return s.invoice.ItemDetail
    }
  func (s *Invoice) ItemDetail_IsNil() bool {
    return s.ItemDetail == nil || s.invoice.ItemDetail == nil
    }
  func (s *Invoice) RefId() *RefIdType {
    if s.invoice.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.RefId = ((*RefIdType)(v))
      }
      }
      return s.invoice.RefId
    }
  func (s *Invoice) RefId_IsNil() bool {
    return s.RefId == nil || s.invoice.RefId == nil
    }
  func (s *Invoice) FinancialAccountRefIdList() *FinancialAccountRefIdListType {
    if s.invoice.FinancialAccountRefIdList == nil {
     if v, ok:= FinancialAccountRefIdListTypePointer(FinancialAccountRefIdListType{}); ok {
      s.invoice.FinancialAccountRefIdList = v
      }
      }
      return s.invoice.FinancialAccountRefIdList
    }
  func (s *Invoice) FinancialAccountRefIdList_IsNil() bool {
    return s.FinancialAccountRefIdList == nil || s.invoice.FinancialAccountRefIdList == nil
    }
  func (s *Invoice) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.invoice.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.invoice.SIF_ExtendedElements = v
      }
      }
      return s.invoice.SIF_ExtendedElements
    }
  func (s *Invoice) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.invoice.SIF_ExtendedElements == nil
    }
  func (s *Invoice) ChargedLocationInfoRefId() *String {
    if s.invoice.ChargedLocationInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.ChargedLocationInfoRefId = ((*String)(v))
      }
      }
      return s.invoice.ChargedLocationInfoRefId
    }
  func (s *Invoice) ChargedLocationInfoRefId_IsNil() bool {
    return s.ChargedLocationInfoRefId == nil || s.invoice.ChargedLocationInfoRefId == nil
    }
  func (s *Invoice) Ledger() *String {
    if s.invoice.Ledger == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.Ledger = ((*String)(v))
      }
      }
      return s.invoice.Ledger
    }
  func (s *Invoice) Ledger_IsNil() bool {
    return s.Ledger == nil || s.invoice.Ledger == nil
    }
  func (s *Invoice) AccountingPeriod() *LocalIdType {
    if s.invoice.AccountingPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.AccountingPeriod = ((*LocalIdType)(v))
      }
      }
      return s.invoice.AccountingPeriod
    }
  func (s *Invoice) AccountingPeriod_IsNil() bool {
    return s.AccountingPeriod == nil || s.invoice.AccountingPeriod == nil
    }
  func (s *Invoice) TaxRate() *Float {
    if s.invoice.TaxRate == nil {
    if v, ok:= FloatPointer(0); ok {
      s.invoice.TaxRate = ((*Float)(v))
      }
      }
      return s.invoice.TaxRate
    }
  func (s *Invoice) TaxRate_IsNil() bool {
    return s.TaxRate == nil || s.invoice.TaxRate == nil
    }
  func (s *Invoice) ApprovedBy() *String {
    if s.invoice.ApprovedBy == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.ApprovedBy = ((*String)(v))
      }
      }
      return s.invoice.ApprovedBy
    }
  func (s *Invoice) ApprovedBy_IsNil() bool {
    return s.ApprovedBy == nil || s.invoice.ApprovedBy == nil
    }
  func (s *Invoice) LocalId() *LocalIdType {
    if s.invoice.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.invoice.LocalId
    }
  func (s *Invoice) LocalId_IsNil() bool {
    return s.LocalId == nil || s.invoice.LocalId == nil
    }
  func (s *Invoice) TaxAmount() *MonetaryAmountType {
    if s.invoice.TaxAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.invoice.TaxAmount = v
      }
      }
      return s.invoice.TaxAmount
    }
  func (s *Invoice) TaxAmount_IsNil() bool {
    return s.TaxAmount == nil || s.invoice.TaxAmount == nil
    }
  func (s *Invoice) TaxType() *String {
    if s.invoice.TaxType == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice.TaxType = ((*String)(v))
      }
      }
      return s.invoice.TaxType
    }
  func (s *Invoice) TaxType_IsNil() bool {
    return s.TaxType == nil || s.invoice.TaxType == nil
    }

func (n *CopyRightContainerType) Unset(key string) *CopyRightContainerType {
        switch key {
  case "Holder":
   n.copyrightcontainertype.Holder = nil
  case "Date":
   n.copyrightcontainertype.Date = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CopyRightContainerType")
        }
        return n
}

func (n *CopyRightContainerType) SetProperty(key string, value interface{}) *CopyRightContainerType {
        if n == nil {
                n, _ = CopyRightContainerTypePointer(CopyRightContainerType{})
        }
        switch key {
    case "Holder":
    
    if v, ok:= StringPointer(value); ok {
      n.copyrightcontainertype.Holder = ((*String)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.copyrightcontainertype.Date = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CopyRightContainerType")
        }
        return n
}

  func (s *CopyRightContainerType) Holder() *String {
    if s.copyrightcontainertype.Holder == nil {
    if v, ok:= StringPointer(""); ok {
      s.copyrightcontainertype.Holder = ((*String)(v))
      }
      }
      return s.copyrightcontainertype.Holder
    }
  func (s *CopyRightContainerType) Holder_IsNil() bool {
    return s.Holder == nil || s.copyrightcontainertype.Holder == nil
    }
  func (s *CopyRightContainerType) Date() *String {
    if s.copyrightcontainertype.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.copyrightcontainertype.Date = ((*String)(v))
      }
      }
      return s.copyrightcontainertype.Date
    }
  func (s *CopyRightContainerType) Date_IsNil() bool {
    return s.Date == nil || s.copyrightcontainertype.Date == nil
    }

func (n *CensusStudentType) Unset(key string) *CensusStudentType {
        switch key {
  case "YearLevel":
   n.censusstudenttype.YearLevel = nil
  case "CohortGender":
   n.censusstudenttype.CohortGender = nil
  case "EducationMode":
   n.censusstudenttype.EducationMode = nil
  case "StudentCohortId":
   n.censusstudenttype.StudentCohortId = nil
  case "CensusAge":
   n.censusstudenttype.CensusAge = nil
  case "StudentOnVisa":
   n.censusstudenttype.StudentOnVisa = nil
  case "FTE":
   n.censusstudenttype.FTE = nil
  case "DisabilityCategory":
   n.censusstudenttype.DisabilityCategory = nil
  case "DisabilityLevelOfAdjustment":
   n.censusstudenttype.DisabilityLevelOfAdjustment = nil
  case "CohortIndigenousType":
   n.censusstudenttype.CohortIndigenousType = nil
  case "Headcount":
   n.censusstudenttype.Headcount = nil
  case "OverseasStudent":
   n.censusstudenttype.OverseasStudent = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusStudentType")
        }
        return n
}

func (n *CensusStudentType) SetProperty(key string, value interface{}) *CensusStudentType {
        if n == nil {
                n, _ = CensusStudentTypePointer(CensusStudentType{})
        }
        switch key {
    case "YearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.censusstudenttype.YearLevel = v
      }
    case "CohortGender":
    
    if v, ok:= StringPointer(value); ok {
      n.censusstudenttype.CohortGender = ((*String)(v))
      }
    case "EducationMode":
    
    if v, ok:= StringPointer(value); ok {
      n.censusstudenttype.EducationMode = ((*String)(v))
      }
    case "StudentCohortId":
    
    if v, ok:= StringPointer(value); ok {
      n.censusstudenttype.StudentCohortId = ((*LocalIdType)(v))
      }
    case "CensusAge":
    
    if v, ok:= IntPointer(value); ok {
      n.censusstudenttype.CensusAge = ((*Int)(v))
      }
    case "StudentOnVisa":
    
    if v, ok:= StringPointer(value); ok {
      n.censusstudenttype.StudentOnVisa = ((*String)(v))
      }
    case "FTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.censusstudenttype.FTE = ((*Float)(v))
      }
    case "DisabilityCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.censusstudenttype.DisabilityCategory = ((*String)(v))
      }
    case "DisabilityLevelOfAdjustment":
    
    if v, ok:= StringPointer(value); ok {
      n.censusstudenttype.DisabilityLevelOfAdjustment = ((*String)(v))
      }
    case "CohortIndigenousType":
    
    if v, ok:= StringPointer(value); ok {
      n.censusstudenttype.CohortIndigenousType = ((*String)(v))
      }
    case "Headcount":
    
    if v, ok:= IntPointer(value); ok {
      n.censusstudenttype.Headcount = ((*Int)(v))
      }
    case "OverseasStudent":
    
    if v, ok:= StringPointer(value); ok {
      n.censusstudenttype.OverseasStudent = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusStudentType")
        }
        return n
}

  func (s *CensusStudentType) YearLevel() *YearLevelType {
    if s.censusstudenttype.YearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.censusstudenttype.YearLevel = v
      }
      }
      return s.censusstudenttype.YearLevel
    }
  func (s *CensusStudentType) YearLevel_IsNil() bool {
    return s.YearLevel == nil || s.censusstudenttype.YearLevel == nil
    }
  func (s *CensusStudentType) CohortGender() *String {
    if s.censusstudenttype.CohortGender == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusstudenttype.CohortGender = ((*String)(v))
      }
      }
      return s.censusstudenttype.CohortGender
    }
  func (s *CensusStudentType) CohortGender_IsNil() bool {
    return s.CohortGender == nil || s.censusstudenttype.CohortGender == nil
    }
  func (s *CensusStudentType) EducationMode() *String {
    if s.censusstudenttype.EducationMode == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusstudenttype.EducationMode = ((*String)(v))
      }
      }
      return s.censusstudenttype.EducationMode
    }
  func (s *CensusStudentType) EducationMode_IsNil() bool {
    return s.EducationMode == nil || s.censusstudenttype.EducationMode == nil
    }
  func (s *CensusStudentType) StudentCohortId() *LocalIdType {
    if s.censusstudenttype.StudentCohortId == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusstudenttype.StudentCohortId = ((*LocalIdType)(v))
      }
      }
      return s.censusstudenttype.StudentCohortId
    }
  func (s *CensusStudentType) StudentCohortId_IsNil() bool {
    return s.StudentCohortId == nil || s.censusstudenttype.StudentCohortId == nil
    }
  func (s *CensusStudentType) CensusAge() *Int {
    if s.censusstudenttype.CensusAge == nil {
    if v, ok:= IntPointer(0); ok {
      s.censusstudenttype.CensusAge = ((*Int)(v))
      }
      }
      return s.censusstudenttype.CensusAge
    }
  func (s *CensusStudentType) CensusAge_IsNil() bool {
    return s.CensusAge == nil || s.censusstudenttype.CensusAge == nil
    }
  func (s *CensusStudentType) StudentOnVisa() *String {
    if s.censusstudenttype.StudentOnVisa == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusstudenttype.StudentOnVisa = ((*String)(v))
      }
      }
      return s.censusstudenttype.StudentOnVisa
    }
  func (s *CensusStudentType) StudentOnVisa_IsNil() bool {
    return s.StudentOnVisa == nil || s.censusstudenttype.StudentOnVisa == nil
    }
  func (s *CensusStudentType) FTE() *Float {
    if s.censusstudenttype.FTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.censusstudenttype.FTE = ((*Float)(v))
      }
      }
      return s.censusstudenttype.FTE
    }
  func (s *CensusStudentType) FTE_IsNil() bool {
    return s.FTE == nil || s.censusstudenttype.FTE == nil
    }
  func (s *CensusStudentType) DisabilityCategory() *String {
    if s.censusstudenttype.DisabilityCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusstudenttype.DisabilityCategory = ((*String)(v))
      }
      }
      return s.censusstudenttype.DisabilityCategory
    }
  func (s *CensusStudentType) DisabilityCategory_IsNil() bool {
    return s.DisabilityCategory == nil || s.censusstudenttype.DisabilityCategory == nil
    }
  func (s *CensusStudentType) DisabilityLevelOfAdjustment() *String {
    if s.censusstudenttype.DisabilityLevelOfAdjustment == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusstudenttype.DisabilityLevelOfAdjustment = ((*String)(v))
      }
      }
      return s.censusstudenttype.DisabilityLevelOfAdjustment
    }
  func (s *CensusStudentType) DisabilityLevelOfAdjustment_IsNil() bool {
    return s.DisabilityLevelOfAdjustment == nil || s.censusstudenttype.DisabilityLevelOfAdjustment == nil
    }
  func (s *CensusStudentType) CohortIndigenousType() *String {
    if s.censusstudenttype.CohortIndigenousType == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusstudenttype.CohortIndigenousType = ((*String)(v))
      }
      }
      return s.censusstudenttype.CohortIndigenousType
    }
  func (s *CensusStudentType) CohortIndigenousType_IsNil() bool {
    return s.CohortIndigenousType == nil || s.censusstudenttype.CohortIndigenousType == nil
    }
  func (s *CensusStudentType) Headcount() *Int {
    if s.censusstudenttype.Headcount == nil {
    if v, ok:= IntPointer(0); ok {
      s.censusstudenttype.Headcount = ((*Int)(v))
      }
      }
      return s.censusstudenttype.Headcount
    }
  func (s *CensusStudentType) Headcount_IsNil() bool {
    return s.Headcount == nil || s.censusstudenttype.Headcount == nil
    }
  func (s *CensusStudentType) OverseasStudent() *String {
    if s.censusstudenttype.OverseasStudent == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusstudenttype.OverseasStudent = ((*String)(v))
      }
      }
      return s.censusstudenttype.OverseasStudent
    }
  func (s *CensusStudentType) OverseasStudent_IsNil() bool {
    return s.OverseasStudent == nil || s.censusstudenttype.OverseasStudent == nil
    }

func (n *ChargedLocationInfo) Unset(key string) *ChargedLocationInfo {
        switch key {
  case "PhoneNumberList":
   n.chargedlocationinfo.PhoneNumberList = nil
  case "ParentChargedLocationInfoRefId":
   n.chargedlocationinfo.ParentChargedLocationInfoRefId = nil
  case "Description":
   n.chargedlocationinfo.Description = nil
  case "Name":
   n.chargedlocationinfo.Name = nil
  case "SchoolInfoRefId":
   n.chargedlocationinfo.SchoolInfoRefId = nil
  case "LocationType":
   n.chargedlocationinfo.LocationType = nil
  case "SIF_ExtendedElements":
   n.chargedlocationinfo.SIF_ExtendedElements = nil
  case "StateProvinceId":
   n.chargedlocationinfo.StateProvinceId = nil
  case "LocalCodeList":
   n.chargedlocationinfo.LocalCodeList = nil
  case "SiteCategory":
   n.chargedlocationinfo.SiteCategory = nil
  case "RefId":
   n.chargedlocationinfo.RefId = nil
  case "AddressList":
   n.chargedlocationinfo.AddressList = nil
  case "LocalId":
   n.chargedlocationinfo.LocalId = nil
  case "SIF_Metadata":
   n.chargedlocationinfo.SIF_Metadata = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ChargedLocationInfo")
        }
        return n
}

func (n *ChargedLocationInfo) SetProperty(key string, value interface{}) *ChargedLocationInfo {
        if n == nil {
                n, _ = ChargedLocationInfoPointer(ChargedLocationInfo{})
        }
        switch key {
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.chargedlocationinfo.PhoneNumberList = v
      }
    case "ParentChargedLocationInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.chargedlocationinfo.ParentChargedLocationInfoRefId = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.chargedlocationinfo.Description = ((*String)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.chargedlocationinfo.Name = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.chargedlocationinfo.SchoolInfoRefId = ((*String)(v))
      }
    case "LocationType":
    
    if v, ok:= StringPointer(value); ok {
      n.chargedlocationinfo.LocationType = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.chargedlocationinfo.SIF_ExtendedElements = v
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.chargedlocationinfo.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.chargedlocationinfo.LocalCodeList = v
      }
    case "SiteCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.chargedlocationinfo.SiteCategory = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.chargedlocationinfo.RefId = ((*RefIdType)(v))
      }
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.chargedlocationinfo.AddressList = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.chargedlocationinfo.LocalId = ((*LocalIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.chargedlocationinfo.SIF_Metadata = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ChargedLocationInfo")
        }
        return n
}

  func (s *ChargedLocationInfo) PhoneNumberList() *PhoneNumberListType {
    if s.chargedlocationinfo.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.chargedlocationinfo.PhoneNumberList = v
      }
      }
      return s.chargedlocationinfo.PhoneNumberList
    }
  func (s *ChargedLocationInfo) PhoneNumberList_IsNil() bool {
    return s.PhoneNumberList == nil || s.chargedlocationinfo.PhoneNumberList == nil
    }
  func (s *ChargedLocationInfo) ParentChargedLocationInfoRefId() *String {
    if s.chargedlocationinfo.ParentChargedLocationInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.chargedlocationinfo.ParentChargedLocationInfoRefId = ((*String)(v))
      }
      }
      return s.chargedlocationinfo.ParentChargedLocationInfoRefId
    }
  func (s *ChargedLocationInfo) ParentChargedLocationInfoRefId_IsNil() bool {
    return s.ParentChargedLocationInfoRefId == nil || s.chargedlocationinfo.ParentChargedLocationInfoRefId == nil
    }
  func (s *ChargedLocationInfo) Description() *String {
    if s.chargedlocationinfo.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.chargedlocationinfo.Description = ((*String)(v))
      }
      }
      return s.chargedlocationinfo.Description
    }
  func (s *ChargedLocationInfo) Description_IsNil() bool {
    return s.Description == nil || s.chargedlocationinfo.Description == nil
    }
  func (s *ChargedLocationInfo) Name() *String {
    if s.chargedlocationinfo.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.chargedlocationinfo.Name = ((*String)(v))
      }
      }
      return s.chargedlocationinfo.Name
    }
  func (s *ChargedLocationInfo) Name_IsNil() bool {
    return s.Name == nil || s.chargedlocationinfo.Name == nil
    }
  func (s *ChargedLocationInfo) SchoolInfoRefId() *String {
    if s.chargedlocationinfo.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.chargedlocationinfo.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.chargedlocationinfo.SchoolInfoRefId
    }
  func (s *ChargedLocationInfo) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.chargedlocationinfo.SchoolInfoRefId == nil
    }
  func (s *ChargedLocationInfo) LocationType() *String {
    if s.chargedlocationinfo.LocationType == nil {
    if v, ok:= StringPointer(""); ok {
      s.chargedlocationinfo.LocationType = ((*String)(v))
      }
      }
      return s.chargedlocationinfo.LocationType
    }
  func (s *ChargedLocationInfo) LocationType_IsNil() bool {
    return s.LocationType == nil || s.chargedlocationinfo.LocationType == nil
    }
  func (s *ChargedLocationInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.chargedlocationinfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.chargedlocationinfo.SIF_ExtendedElements = v
      }
      }
      return s.chargedlocationinfo.SIF_ExtendedElements
    }
  func (s *ChargedLocationInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.chargedlocationinfo.SIF_ExtendedElements == nil
    }
  func (s *ChargedLocationInfo) StateProvinceId() *StateProvinceIdType {
    if s.chargedlocationinfo.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.chargedlocationinfo.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.chargedlocationinfo.StateProvinceId
    }
  func (s *ChargedLocationInfo) StateProvinceId_IsNil() bool {
    return s.StateProvinceId == nil || s.chargedlocationinfo.StateProvinceId == nil
    }
  func (s *ChargedLocationInfo) LocalCodeList() *LocalCodeListType {
    if s.chargedlocationinfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.chargedlocationinfo.LocalCodeList = v
      }
      }
      return s.chargedlocationinfo.LocalCodeList
    }
  func (s *ChargedLocationInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.chargedlocationinfo.LocalCodeList == nil
    }
  func (s *ChargedLocationInfo) SiteCategory() *String {
    if s.chargedlocationinfo.SiteCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.chargedlocationinfo.SiteCategory = ((*String)(v))
      }
      }
      return s.chargedlocationinfo.SiteCategory
    }
  func (s *ChargedLocationInfo) SiteCategory_IsNil() bool {
    return s.SiteCategory == nil || s.chargedlocationinfo.SiteCategory == nil
    }
  func (s *ChargedLocationInfo) RefId() *RefIdType {
    if s.chargedlocationinfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.chargedlocationinfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.chargedlocationinfo.RefId
    }
  func (s *ChargedLocationInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.chargedlocationinfo.RefId == nil
    }
  func (s *ChargedLocationInfo) AddressList() *AddressListType {
    if s.chargedlocationinfo.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.chargedlocationinfo.AddressList = v
      }
      }
      return s.chargedlocationinfo.AddressList
    }
  func (s *ChargedLocationInfo) AddressList_IsNil() bool {
    return s.AddressList == nil || s.chargedlocationinfo.AddressList == nil
    }
  func (s *ChargedLocationInfo) LocalId() *LocalIdType {
    if s.chargedlocationinfo.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.chargedlocationinfo.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.chargedlocationinfo.LocalId
    }
  func (s *ChargedLocationInfo) LocalId_IsNil() bool {
    return s.LocalId == nil || s.chargedlocationinfo.LocalId == nil
    }
  func (s *ChargedLocationInfo) SIF_Metadata() *SIF_MetadataType {
    if s.chargedlocationinfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.chargedlocationinfo.SIF_Metadata = v
      }
      }
      return s.chargedlocationinfo.SIF_Metadata
    }
  func (s *ChargedLocationInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.chargedlocationinfo.SIF_Metadata == nil
    }

func (n *StudentDailyAttendance) Unset(key string) *StudentDailyAttendance {
        switch key {
  case "RefId":
   n.studentdailyattendance.RefId = nil
  case "StudentPersonalRefId":
   n.studentdailyattendance.StudentPersonalRefId = nil
  case "AttendanceStatus":
   n.studentdailyattendance.AttendanceStatus = nil
  case "SIF_Metadata":
   n.studentdailyattendance.SIF_Metadata = nil
  case "AbsenceValue":
   n.studentdailyattendance.AbsenceValue = nil
  case "AttendanceCode":
   n.studentdailyattendance.AttendanceCode = nil
  case "Date":
   n.studentdailyattendance.Date = nil
  case "TimeIn":
   n.studentdailyattendance.TimeIn = nil
  case "AttendanceNote":
   n.studentdailyattendance.AttendanceNote = nil
  case "LocalCodeList":
   n.studentdailyattendance.LocalCodeList = nil
  case "DayValue":
   n.studentdailyattendance.DayValue = nil
  case "SIF_ExtendedElements":
   n.studentdailyattendance.SIF_ExtendedElements = nil
  case "SchoolYear":
   n.studentdailyattendance.SchoolYear = nil
  case "SchoolInfoRefId":
   n.studentdailyattendance.SchoolInfoRefId = nil
  case "TimeOut":
   n.studentdailyattendance.TimeOut = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentDailyAttendance")
        }
        return n
}

func (n *StudentDailyAttendance) SetProperty(key string, value interface{}) *StudentDailyAttendance {
        if n == nil {
                n, _ = StudentDailyAttendancePointer(StudentDailyAttendance{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentdailyattendance.RefId = ((*RefIdType)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentdailyattendance.StudentPersonalRefId = ((*String)(v))
      }
    case "AttendanceStatus":
        if !CodesetContains(AUCodeSetsAttendanceStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAttendanceStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentdailyattendance.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentdailyattendance.SIF_Metadata = v
      }
    case "AbsenceValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.studentdailyattendance.AbsenceValue = ((*Float)(v))
      }
    case "AttendanceCode":
    if v, ok:= AttendanceCodeTypePointer(value); ok {
      n.studentdailyattendance.AttendanceCode = v
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.studentdailyattendance.Date = ((*String)(v))
      }
    case "TimeIn":
    
    if v, ok:= StringPointer(value); ok {
      n.studentdailyattendance.TimeIn = ((*String)(v))
      }
    case "AttendanceNote":
    
    if v, ok:= StringPointer(value); ok {
      n.studentdailyattendance.AttendanceNote = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentdailyattendance.LocalCodeList = v
      }
    case "DayValue":
        if !CodesetContains(AUCodeSetsDayValueCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsDayValueCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentdailyattendance.DayValue = ((*AUCodeSetsDayValueCodeType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentdailyattendance.SIF_ExtendedElements = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.studentdailyattendance.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentdailyattendance.SchoolInfoRefId = ((*String)(v))
      }
    case "TimeOut":
    
    if v, ok:= StringPointer(value); ok {
      n.studentdailyattendance.TimeOut = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentDailyAttendance")
        }
        return n
}

  func (s *StudentDailyAttendance) RefId() *RefIdType {
    if s.studentdailyattendance.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentdailyattendance.RefId = ((*RefIdType)(v))
      }
      }
      return s.studentdailyattendance.RefId
    }
  func (s *StudentDailyAttendance) RefId_IsNil() bool {
    return s.RefId == nil || s.studentdailyattendance.RefId == nil
    }
  func (s *StudentDailyAttendance) StudentPersonalRefId() *String {
    if s.studentdailyattendance.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentdailyattendance.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.studentdailyattendance.StudentPersonalRefId
    }
  func (s *StudentDailyAttendance) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.studentdailyattendance.StudentPersonalRefId == nil
    }
  func (s *StudentDailyAttendance) AttendanceStatus() *AUCodeSetsAttendanceStatusType {
    if s.studentdailyattendance.AttendanceStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentdailyattendance.AttendanceStatus = ((*AUCodeSetsAttendanceStatusType)(v))
      }
      }
      return s.studentdailyattendance.AttendanceStatus
    }
  func (s *StudentDailyAttendance) AttendanceStatus_IsNil() bool {
    return s.AttendanceStatus == nil || s.studentdailyattendance.AttendanceStatus == nil
    }
  func (s *StudentDailyAttendance) SIF_Metadata() *SIF_MetadataType {
    if s.studentdailyattendance.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentdailyattendance.SIF_Metadata = v
      }
      }
      return s.studentdailyattendance.SIF_Metadata
    }
  func (s *StudentDailyAttendance) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentdailyattendance.SIF_Metadata == nil
    }
  func (s *StudentDailyAttendance) AbsenceValue() *Float {
    if s.studentdailyattendance.AbsenceValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.studentdailyattendance.AbsenceValue = ((*Float)(v))
      }
      }
      return s.studentdailyattendance.AbsenceValue
    }
  func (s *StudentDailyAttendance) AbsenceValue_IsNil() bool {
    return s.AbsenceValue == nil || s.studentdailyattendance.AbsenceValue == nil
    }
  func (s *StudentDailyAttendance) AttendanceCode() *AttendanceCodeType {
    if s.studentdailyattendance.AttendanceCode == nil {
     if v, ok:= AttendanceCodeTypePointer(AttendanceCodeType{}); ok {
      s.studentdailyattendance.AttendanceCode = v
      }
      }
      return s.studentdailyattendance.AttendanceCode
    }
  func (s *StudentDailyAttendance) AttendanceCode_IsNil() bool {
    return s.AttendanceCode == nil || s.studentdailyattendance.AttendanceCode == nil
    }
  func (s *StudentDailyAttendance) Date() *String {
    if s.studentdailyattendance.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentdailyattendance.Date = ((*String)(v))
      }
      }
      return s.studentdailyattendance.Date
    }
  func (s *StudentDailyAttendance) Date_IsNil() bool {
    return s.Date == nil || s.studentdailyattendance.Date == nil
    }
  func (s *StudentDailyAttendance) TimeIn() *String {
    if s.studentdailyattendance.TimeIn == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentdailyattendance.TimeIn = ((*String)(v))
      }
      }
      return s.studentdailyattendance.TimeIn
    }
  func (s *StudentDailyAttendance) TimeIn_IsNil() bool {
    return s.TimeIn == nil || s.studentdailyattendance.TimeIn == nil
    }
  func (s *StudentDailyAttendance) AttendanceNote() *String {
    if s.studentdailyattendance.AttendanceNote == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentdailyattendance.AttendanceNote = ((*String)(v))
      }
      }
      return s.studentdailyattendance.AttendanceNote
    }
  func (s *StudentDailyAttendance) AttendanceNote_IsNil() bool {
    return s.AttendanceNote == nil || s.studentdailyattendance.AttendanceNote == nil
    }
  func (s *StudentDailyAttendance) LocalCodeList() *LocalCodeListType {
    if s.studentdailyattendance.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentdailyattendance.LocalCodeList = v
      }
      }
      return s.studentdailyattendance.LocalCodeList
    }
  func (s *StudentDailyAttendance) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentdailyattendance.LocalCodeList == nil
    }
  func (s *StudentDailyAttendance) DayValue() *AUCodeSetsDayValueCodeType {
    if s.studentdailyattendance.DayValue == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentdailyattendance.DayValue = ((*AUCodeSetsDayValueCodeType)(v))
      }
      }
      return s.studentdailyattendance.DayValue
    }
  func (s *StudentDailyAttendance) DayValue_IsNil() bool {
    return s.DayValue == nil || s.studentdailyattendance.DayValue == nil
    }
  func (s *StudentDailyAttendance) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentdailyattendance.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentdailyattendance.SIF_ExtendedElements = v
      }
      }
      return s.studentdailyattendance.SIF_ExtendedElements
    }
  func (s *StudentDailyAttendance) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentdailyattendance.SIF_ExtendedElements == nil
    }
  func (s *StudentDailyAttendance) SchoolYear() *SchoolYearType {
    if s.studentdailyattendance.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentdailyattendance.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.studentdailyattendance.SchoolYear
    }
  func (s *StudentDailyAttendance) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.studentdailyattendance.SchoolYear == nil
    }
  func (s *StudentDailyAttendance) SchoolInfoRefId() *String {
    if s.studentdailyattendance.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentdailyattendance.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.studentdailyattendance.SchoolInfoRefId
    }
  func (s *StudentDailyAttendance) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.studentdailyattendance.SchoolInfoRefId == nil
    }
  func (s *StudentDailyAttendance) TimeOut() *String {
    if s.studentdailyattendance.TimeOut == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentdailyattendance.TimeOut = ((*String)(v))
      }
      }
      return s.studentdailyattendance.TimeOut
    }
  func (s *StudentDailyAttendance) TimeOut_IsNil() bool {
    return s.TimeOut == nil || s.studentdailyattendance.TimeOut == nil
    }

func (n *StudentExitStatusContainerType) Unset(key string) *StudentExitStatusContainerType {
        switch key {
  case "Code":
   n.studentexitstatuscontainertype.Code = nil
  case "OtherCodeList":
   n.studentexitstatuscontainertype.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentExitStatusContainerType")
        }
        return n
}

func (n *StudentExitStatusContainerType) SetProperty(key string, value interface{}) *StudentExitStatusContainerType {
        if n == nil {
                n, _ = StudentExitStatusContainerTypePointer(StudentExitStatusContainerType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsExitWithdrawalStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsExitWithdrawalStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentexitstatuscontainertype.Code = ((*AUCodeSetsExitWithdrawalStatusType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.studentexitstatuscontainertype.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentExitStatusContainerType")
        }
        return n
}

  func (s *StudentExitStatusContainerType) Code() *AUCodeSetsExitWithdrawalStatusType {
    if s.studentexitstatuscontainertype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentexitstatuscontainertype.Code = ((*AUCodeSetsExitWithdrawalStatusType)(v))
      }
      }
      return s.studentexitstatuscontainertype.Code
    }
  func (s *StudentExitStatusContainerType) Code_IsNil() bool {
    return s.Code == nil || s.studentexitstatuscontainertype.Code == nil
    }
  func (s *StudentExitStatusContainerType) OtherCodeList() *OtherCodeListType {
    if s.studentexitstatuscontainertype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.studentexitstatuscontainertype.OtherCodeList = v
      }
      }
      return s.studentexitstatuscontainertype.OtherCodeList
    }
  func (s *StudentExitStatusContainerType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.studentexitstatuscontainertype.OtherCodeList == nil
    }

func (n *DwellingArrangementType) Unset(key string) *DwellingArrangementType {
        switch key {
  case "Code":
   n.dwellingarrangementtype.Code = nil
  case "OtherCodeList":
   n.dwellingarrangementtype.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DwellingArrangementType")
        }
        return n
}

func (n *DwellingArrangementType) SetProperty(key string, value interface{}) *DwellingArrangementType {
        if n == nil {
                n, _ = DwellingArrangementTypePointer(DwellingArrangementType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsDwellingArrangementType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsDwellingArrangementType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.dwellingarrangementtype.Code = ((*AUCodeSetsDwellingArrangementType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.dwellingarrangementtype.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DwellingArrangementType")
        }
        return n
}

  func (s *DwellingArrangementType) Code() *AUCodeSetsDwellingArrangementType {
    if s.dwellingarrangementtype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.dwellingarrangementtype.Code = ((*AUCodeSetsDwellingArrangementType)(v))
      }
      }
      return s.dwellingarrangementtype.Code
    }
  func (s *DwellingArrangementType) Code_IsNil() bool {
    return s.Code == nil || s.dwellingarrangementtype.Code == nil
    }
  func (s *DwellingArrangementType) OtherCodeList() *OtherCodeListType {
    if s.dwellingarrangementtype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.dwellingarrangementtype.OtherCodeList = v
      }
      }
      return s.dwellingarrangementtype.OtherCodeList
    }
  func (s *DwellingArrangementType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.dwellingarrangementtype.OtherCodeList == nil
    }

func (n *AbstractContentElementType) Unset(key string) *AbstractContentElementType {
        switch key {
  case "Reference":
   n.abstractcontentelementtype.Reference = nil
  case "BinaryData":
   n.abstractcontentelementtype.BinaryData = nil
  case "XMLData":
   n.abstractcontentelementtype.XMLData = nil
  case "TextData":
   n.abstractcontentelementtype.TextData = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType")
        }
        return n
}

func (n *AbstractContentElementType) SetProperty(key string, value interface{}) *AbstractContentElementType {
        if n == nil {
                n, _ = AbstractContentElementTypePointer(AbstractContentElementType{})
        }
        switch key {
    case "Reference":
    if v, ok:= AbstractContentElementType_ReferencePointer(value); ok {
      n.abstractcontentelementtype.Reference = v
      }
    case "BinaryData":
    if v, ok:= AbstractContentElementType_BinaryDataPointer(value); ok {
      n.abstractcontentelementtype.BinaryData = v
      }
    case "XMLData":
    if v, ok:= AbstractContentElementType_XMLDataPointer(value); ok {
      n.abstractcontentelementtype.XMLData = v
      }
    case "TextData":
    if v, ok:= AbstractContentElementType_TextDataPointer(value); ok {
      n.abstractcontentelementtype.TextData = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType")
        }
        return n
}

  func (s *AbstractContentElementType) Reference() *AbstractContentElementType_Reference {
    if s.abstractcontentelementtype.Reference == nil {
     if v, ok:= AbstractContentElementType_ReferencePointer(AbstractContentElementType_Reference{}); ok {
      s.abstractcontentelementtype.Reference = v
      }
      }
      return s.abstractcontentelementtype.Reference
    }
  func (s *AbstractContentElementType) Reference_IsNil() bool {
    return s.Reference == nil || s.abstractcontentelementtype.Reference == nil
    }
  func (s *AbstractContentElementType) BinaryData() *AbstractContentElementType_BinaryData {
    if s.abstractcontentelementtype.BinaryData == nil {
     if v, ok:= AbstractContentElementType_BinaryDataPointer(AbstractContentElementType_BinaryData{}); ok {
      s.abstractcontentelementtype.BinaryData = v
      }
      }
      return s.abstractcontentelementtype.BinaryData
    }
  func (s *AbstractContentElementType) BinaryData_IsNil() bool {
    return s.BinaryData == nil || s.abstractcontentelementtype.BinaryData == nil
    }
  func (s *AbstractContentElementType) XMLData() *AbstractContentElementType_XMLData {
    if s.abstractcontentelementtype.XMLData == nil {
     if v, ok:= AbstractContentElementType_XMLDataPointer(AbstractContentElementType_XMLData{}); ok {
      s.abstractcontentelementtype.XMLData = v
      }
      }
      return s.abstractcontentelementtype.XMLData
    }
  func (s *AbstractContentElementType) XMLData_IsNil() bool {
    return s.XMLData == nil || s.abstractcontentelementtype.XMLData == nil
    }
  func (s *AbstractContentElementType) TextData() *AbstractContentElementType_TextData {
    if s.abstractcontentelementtype.TextData == nil {
     if v, ok:= AbstractContentElementType_TextDataPointer(AbstractContentElementType_TextData{}); ok {
      s.abstractcontentelementtype.TextData = v
      }
      }
      return s.abstractcontentelementtype.TextData
    }
  func (s *AbstractContentElementType) TextData_IsNil() bool {
    return s.TextData == nil || s.abstractcontentelementtype.TextData == nil
    }

func (n *AddressCollection) Unset(key string) *AddressCollection {
        switch key {
  case "SoftwareVendorInfo":
   n.addresscollection.SoftwareVendorInfo = nil
  case "SIF_Metadata":
   n.addresscollection.SIF_Metadata = nil
  case "LocalCodeList":
   n.addresscollection.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.addresscollection.SIF_ExtendedElements = nil
  case "ReportingAuthorityCommonwealthId":
   n.addresscollection.ReportingAuthorityCommonwealthId = nil
  case "RoundCode":
   n.addresscollection.RoundCode = nil
  case "AddressCollectionYear":
   n.addresscollection.AddressCollectionYear = nil
  case "AddressCollectionReportingList":
   n.addresscollection.AddressCollectionReportingList = nil
  case "RefId":
   n.addresscollection.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressCollection")
        }
        return n
}

func (n *AddressCollection) SetProperty(key string, value interface{}) *AddressCollection {
        if n == nil {
                n, _ = AddressCollectionPointer(AddressCollection{})
        }
        switch key {
    case "SoftwareVendorInfo":
    if v, ok:= SoftwareVendorInfoContainerTypePointer(value); ok {
      n.addresscollection.SoftwareVendorInfo = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.addresscollection.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.addresscollection.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.addresscollection.SIF_ExtendedElements = v
      }
    case "ReportingAuthorityCommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.addresscollection.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
    case "RoundCode":
    
    if v, ok:= StringPointer(value); ok {
      n.addresscollection.RoundCode = ((*String)(v))
      }
    case "AddressCollectionYear":
    
    if v, ok:= StringPointer(value); ok {
      n.addresscollection.AddressCollectionYear = ((*SchoolYearType)(v))
      }
    case "AddressCollectionReportingList":
    if v, ok:= AddressCollectionReportingListTypePointer(value); ok {
      n.addresscollection.AddressCollectionReportingList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.addresscollection.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressCollection")
        }
        return n
}

  func (s *AddressCollection) SoftwareVendorInfo() *SoftwareVendorInfoContainerType {
    if s.addresscollection.SoftwareVendorInfo == nil {
     if v, ok:= SoftwareVendorInfoContainerTypePointer(SoftwareVendorInfoContainerType{}); ok {
      s.addresscollection.SoftwareVendorInfo = v
      }
      }
      return s.addresscollection.SoftwareVendorInfo
    }
  func (s *AddressCollection) SoftwareVendorInfo_IsNil() bool {
    return s.SoftwareVendorInfo == nil || s.addresscollection.SoftwareVendorInfo == nil
    }
  func (s *AddressCollection) SIF_Metadata() *SIF_MetadataType {
    if s.addresscollection.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.addresscollection.SIF_Metadata = v
      }
      }
      return s.addresscollection.SIF_Metadata
    }
  func (s *AddressCollection) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.addresscollection.SIF_Metadata == nil
    }
  func (s *AddressCollection) LocalCodeList() *LocalCodeListType {
    if s.addresscollection.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.addresscollection.LocalCodeList = v
      }
      }
      return s.addresscollection.LocalCodeList
    }
  func (s *AddressCollection) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.addresscollection.LocalCodeList == nil
    }
  func (s *AddressCollection) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.addresscollection.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.addresscollection.SIF_ExtendedElements = v
      }
      }
      return s.addresscollection.SIF_ExtendedElements
    }
  func (s *AddressCollection) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.addresscollection.SIF_ExtendedElements == nil
    }
  func (s *AddressCollection) ReportingAuthorityCommonwealthId() *String {
    if s.addresscollection.ReportingAuthorityCommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollection.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
      }
      return s.addresscollection.ReportingAuthorityCommonwealthId
    }
  func (s *AddressCollection) ReportingAuthorityCommonwealthId_IsNil() bool {
    return s.ReportingAuthorityCommonwealthId == nil || s.addresscollection.ReportingAuthorityCommonwealthId == nil
    }
  func (s *AddressCollection) RoundCode() *String {
    if s.addresscollection.RoundCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollection.RoundCode = ((*String)(v))
      }
      }
      return s.addresscollection.RoundCode
    }
  func (s *AddressCollection) RoundCode_IsNil() bool {
    return s.RoundCode == nil || s.addresscollection.RoundCode == nil
    }
  func (s *AddressCollection) AddressCollectionYear() *SchoolYearType {
    if s.addresscollection.AddressCollectionYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollection.AddressCollectionYear = ((*SchoolYearType)(v))
      }
      }
      return s.addresscollection.AddressCollectionYear
    }
  func (s *AddressCollection) AddressCollectionYear_IsNil() bool {
    return s.AddressCollectionYear == nil || s.addresscollection.AddressCollectionYear == nil
    }
  func (s *AddressCollection) AddressCollectionReportingList() *AddressCollectionReportingListType {
    if s.addresscollection.AddressCollectionReportingList == nil {
     if v, ok:= AddressCollectionReportingListTypePointer(AddressCollectionReportingListType{}); ok {
      s.addresscollection.AddressCollectionReportingList = v
      }
      }
      return s.addresscollection.AddressCollectionReportingList
    }
  func (s *AddressCollection) AddressCollectionReportingList_IsNil() bool {
    return s.AddressCollectionReportingList == nil || s.addresscollection.AddressCollectionReportingList == nil
    }
  func (s *AddressCollection) RefId() *RefIdType {
    if s.addresscollection.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresscollection.RefId = ((*RefIdType)(v))
      }
      }
      return s.addresscollection.RefId
    }
  func (s *AddressCollection) RefId_IsNil() bool {
    return s.RefId == nil || s.addresscollection.RefId == nil
    }

func (n *AggregateCharacteristicInfo) Unset(key string) *AggregateCharacteristicInfo {
        switch key {
  case "SIF_ExtendedElements":
   n.aggregatecharacteristicinfo.SIF_ExtendedElements = nil
  case "Definition":
   n.aggregatecharacteristicinfo.Definition = nil
  case "LocalCodeList":
   n.aggregatecharacteristicinfo.LocalCodeList = nil
  case "SIF_Metadata":
   n.aggregatecharacteristicinfo.SIF_Metadata = nil
  case "RefId":
   n.aggregatecharacteristicinfo.RefId = nil
  case "Description":
   n.aggregatecharacteristicinfo.Description = nil
  case "ElementName":
   n.aggregatecharacteristicinfo.ElementName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateCharacteristicInfo")
        }
        return n
}

func (n *AggregateCharacteristicInfo) SetProperty(key string, value interface{}) *AggregateCharacteristicInfo {
        if n == nil {
                n, _ = AggregateCharacteristicInfoPointer(AggregateCharacteristicInfo{})
        }
        switch key {
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.aggregatecharacteristicinfo.SIF_ExtendedElements = v
      }
    case "Definition":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatecharacteristicinfo.Definition = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.aggregatecharacteristicinfo.LocalCodeList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.aggregatecharacteristicinfo.SIF_Metadata = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatecharacteristicinfo.RefId = ((*RefIdType)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatecharacteristicinfo.Description = ((*String)(v))
      }
    case "ElementName":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatecharacteristicinfo.ElementName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateCharacteristicInfo")
        }
        return n
}

  func (s *AggregateCharacteristicInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.aggregatecharacteristicinfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.aggregatecharacteristicinfo.SIF_ExtendedElements = v
      }
      }
      return s.aggregatecharacteristicinfo.SIF_ExtendedElements
    }
  func (s *AggregateCharacteristicInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.aggregatecharacteristicinfo.SIF_ExtendedElements == nil
    }
  func (s *AggregateCharacteristicInfo) Definition() *String {
    if s.aggregatecharacteristicinfo.Definition == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatecharacteristicinfo.Definition = ((*String)(v))
      }
      }
      return s.aggregatecharacteristicinfo.Definition
    }
  func (s *AggregateCharacteristicInfo) Definition_IsNil() bool {
    return s.Definition == nil || s.aggregatecharacteristicinfo.Definition == nil
    }
  func (s *AggregateCharacteristicInfo) LocalCodeList() *LocalCodeListType {
    if s.aggregatecharacteristicinfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.aggregatecharacteristicinfo.LocalCodeList = v
      }
      }
      return s.aggregatecharacteristicinfo.LocalCodeList
    }
  func (s *AggregateCharacteristicInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.aggregatecharacteristicinfo.LocalCodeList == nil
    }
  func (s *AggregateCharacteristicInfo) SIF_Metadata() *SIF_MetadataType {
    if s.aggregatecharacteristicinfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.aggregatecharacteristicinfo.SIF_Metadata = v
      }
      }
      return s.aggregatecharacteristicinfo.SIF_Metadata
    }
  func (s *AggregateCharacteristicInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.aggregatecharacteristicinfo.SIF_Metadata == nil
    }
  func (s *AggregateCharacteristicInfo) RefId() *RefIdType {
    if s.aggregatecharacteristicinfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatecharacteristicinfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.aggregatecharacteristicinfo.RefId
    }
  func (s *AggregateCharacteristicInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.aggregatecharacteristicinfo.RefId == nil
    }
  func (s *AggregateCharacteristicInfo) Description() *String {
    if s.aggregatecharacteristicinfo.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatecharacteristicinfo.Description = ((*String)(v))
      }
      }
      return s.aggregatecharacteristicinfo.Description
    }
  func (s *AggregateCharacteristicInfo) Description_IsNil() bool {
    return s.Description == nil || s.aggregatecharacteristicinfo.Description == nil
    }
  func (s *AggregateCharacteristicInfo) ElementName() *String {
    if s.aggregatecharacteristicinfo.ElementName == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatecharacteristicinfo.ElementName = ((*String)(v))
      }
      }
      return s.aggregatecharacteristicinfo.ElementName
    }
  func (s *AggregateCharacteristicInfo) ElementName_IsNil() bool {
    return s.ElementName == nil || s.aggregatecharacteristicinfo.ElementName == nil
    }

func (n *CalendarSummary) Unset(key string) *CalendarSummary {
        switch key {
  case "LocalCodeList":
   n.calendarsummary.LocalCodeList = nil
  case "SchoolYear":
   n.calendarsummary.SchoolYear = nil
  case "SIF_ExtendedElements":
   n.calendarsummary.SIF_ExtendedElements = nil
  case "SchoolInfoRefId":
   n.calendarsummary.SchoolInfoRefId = nil
  case "Description":
   n.calendarsummary.Description = nil
  case "FirstInstructionDate":
   n.calendarsummary.FirstInstructionDate = nil
  case "LastInstructionDate":
   n.calendarsummary.LastInstructionDate = nil
  case "MinutesPerDay":
   n.calendarsummary.MinutesPerDay = nil
  case "YearLevels":
   n.calendarsummary.YearLevels = nil
  case "DaysInSession":
   n.calendarsummary.DaysInSession = nil
  case "GraduationDate":
   n.calendarsummary.GraduationDate = nil
  case "EndDate":
   n.calendarsummary.EndDate = nil
  case "SIF_Metadata":
   n.calendarsummary.SIF_Metadata = nil
  case "StartDate":
   n.calendarsummary.StartDate = nil
  case "InstructionalMinutes":
   n.calendarsummary.InstructionalMinutes = nil
  case "LocalId":
   n.calendarsummary.LocalId = nil
  case "RefId":
   n.calendarsummary.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CalendarSummary")
        }
        return n
}

func (n *CalendarSummary) SetProperty(key string, value interface{}) *CalendarSummary {
        if n == nil {
                n, _ = CalendarSummaryPointer(CalendarSummary{})
        }
        switch key {
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.calendarsummary.LocalCodeList = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.calendarsummary.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.calendarsummary.SIF_ExtendedElements = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.calendarsummary.SchoolInfoRefId = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.calendarsummary.Description = ((*String)(v))
      }
    case "FirstInstructionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.calendarsummary.FirstInstructionDate = ((*String)(v))
      }
    case "LastInstructionDate":
    
    if v, ok:= StringPointer(value); ok {
      n.calendarsummary.LastInstructionDate = ((*String)(v))
      }
    case "MinutesPerDay":
    
    if v, ok:= IntPointer(value); ok {
      n.calendarsummary.MinutesPerDay = ((*Int)(v))
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.calendarsummary.YearLevels = v
      }
    case "DaysInSession":
    
    if v, ok:= IntPointer(value); ok {
      n.calendarsummary.DaysInSession = ((*Int)(v))
      }
    case "GraduationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.calendarsummary.GraduationDate = ((*GraduationDateType)(v))
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.calendarsummary.EndDate = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.calendarsummary.SIF_Metadata = v
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.calendarsummary.StartDate = ((*String)(v))
      }
    case "InstructionalMinutes":
    
    if v, ok:= IntPointer(value); ok {
      n.calendarsummary.InstructionalMinutes = ((*Int)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.calendarsummary.LocalId = ((*LocalIdType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.calendarsummary.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CalendarSummary")
        }
        return n
}

  func (s *CalendarSummary) LocalCodeList() *LocalCodeListType {
    if s.calendarsummary.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.calendarsummary.LocalCodeList = v
      }
      }
      return s.calendarsummary.LocalCodeList
    }
  func (s *CalendarSummary) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.calendarsummary.LocalCodeList == nil
    }
  func (s *CalendarSummary) SchoolYear() *SchoolYearType {
    if s.calendarsummary.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendarsummary.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.calendarsummary.SchoolYear
    }
  func (s *CalendarSummary) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.calendarsummary.SchoolYear == nil
    }
  func (s *CalendarSummary) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.calendarsummary.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.calendarsummary.SIF_ExtendedElements = v
      }
      }
      return s.calendarsummary.SIF_ExtendedElements
    }
  func (s *CalendarSummary) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.calendarsummary.SIF_ExtendedElements == nil
    }
  func (s *CalendarSummary) SchoolInfoRefId() *String {
    if s.calendarsummary.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendarsummary.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.calendarsummary.SchoolInfoRefId
    }
  func (s *CalendarSummary) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.calendarsummary.SchoolInfoRefId == nil
    }
  func (s *CalendarSummary) Description() *String {
    if s.calendarsummary.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendarsummary.Description = ((*String)(v))
      }
      }
      return s.calendarsummary.Description
    }
  func (s *CalendarSummary) Description_IsNil() bool {
    return s.Description == nil || s.calendarsummary.Description == nil
    }
  func (s *CalendarSummary) FirstInstructionDate() *String {
    if s.calendarsummary.FirstInstructionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendarsummary.FirstInstructionDate = ((*String)(v))
      }
      }
      return s.calendarsummary.FirstInstructionDate
    }
  func (s *CalendarSummary) FirstInstructionDate_IsNil() bool {
    return s.FirstInstructionDate == nil || s.calendarsummary.FirstInstructionDate == nil
    }
  func (s *CalendarSummary) LastInstructionDate() *String {
    if s.calendarsummary.LastInstructionDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendarsummary.LastInstructionDate = ((*String)(v))
      }
      }
      return s.calendarsummary.LastInstructionDate
    }
  func (s *CalendarSummary) LastInstructionDate_IsNil() bool {
    return s.LastInstructionDate == nil || s.calendarsummary.LastInstructionDate == nil
    }
  func (s *CalendarSummary) MinutesPerDay() *Int {
    if s.calendarsummary.MinutesPerDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.calendarsummary.MinutesPerDay = ((*Int)(v))
      }
      }
      return s.calendarsummary.MinutesPerDay
    }
  func (s *CalendarSummary) MinutesPerDay_IsNil() bool {
    return s.MinutesPerDay == nil || s.calendarsummary.MinutesPerDay == nil
    }
  func (s *CalendarSummary) YearLevels() *YearLevelsType {
    if s.calendarsummary.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.calendarsummary.YearLevels = v
      }
      }
      return s.calendarsummary.YearLevels
    }
  func (s *CalendarSummary) YearLevels_IsNil() bool {
    return s.YearLevels == nil || s.calendarsummary.YearLevels == nil
    }
  func (s *CalendarSummary) DaysInSession() *Int {
    if s.calendarsummary.DaysInSession == nil {
    if v, ok:= IntPointer(0); ok {
      s.calendarsummary.DaysInSession = ((*Int)(v))
      }
      }
      return s.calendarsummary.DaysInSession
    }
  func (s *CalendarSummary) DaysInSession_IsNil() bool {
    return s.DaysInSession == nil || s.calendarsummary.DaysInSession == nil
    }
  func (s *CalendarSummary) GraduationDate() *GraduationDateType {
    if s.calendarsummary.GraduationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendarsummary.GraduationDate = ((*GraduationDateType)(v))
      }
      }
      return s.calendarsummary.GraduationDate
    }
  func (s *CalendarSummary) GraduationDate_IsNil() bool {
    return s.GraduationDate == nil || s.calendarsummary.GraduationDate == nil
    }
  func (s *CalendarSummary) EndDate() *String {
    if s.calendarsummary.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendarsummary.EndDate = ((*String)(v))
      }
      }
      return s.calendarsummary.EndDate
    }
  func (s *CalendarSummary) EndDate_IsNil() bool {
    return s.EndDate == nil || s.calendarsummary.EndDate == nil
    }
  func (s *CalendarSummary) SIF_Metadata() *SIF_MetadataType {
    if s.calendarsummary.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.calendarsummary.SIF_Metadata = v
      }
      }
      return s.calendarsummary.SIF_Metadata
    }
  func (s *CalendarSummary) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.calendarsummary.SIF_Metadata == nil
    }
  func (s *CalendarSummary) StartDate() *String {
    if s.calendarsummary.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendarsummary.StartDate = ((*String)(v))
      }
      }
      return s.calendarsummary.StartDate
    }
  func (s *CalendarSummary) StartDate_IsNil() bool {
    return s.StartDate == nil || s.calendarsummary.StartDate == nil
    }
  func (s *CalendarSummary) InstructionalMinutes() *Int {
    if s.calendarsummary.InstructionalMinutes == nil {
    if v, ok:= IntPointer(0); ok {
      s.calendarsummary.InstructionalMinutes = ((*Int)(v))
      }
      }
      return s.calendarsummary.InstructionalMinutes
    }
  func (s *CalendarSummary) InstructionalMinutes_IsNil() bool {
    return s.InstructionalMinutes == nil || s.calendarsummary.InstructionalMinutes == nil
    }
  func (s *CalendarSummary) LocalId() *LocalIdType {
    if s.calendarsummary.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendarsummary.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.calendarsummary.LocalId
    }
  func (s *CalendarSummary) LocalId_IsNil() bool {
    return s.LocalId == nil || s.calendarsummary.LocalId == nil
    }
  func (s *CalendarSummary) RefId() *RefIdType {
    if s.calendarsummary.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendarsummary.RefId = ((*RefIdType)(v))
      }
      }
      return s.calendarsummary.RefId
    }
  func (s *CalendarSummary) RefId_IsNil() bool {
    return s.RefId == nil || s.calendarsummary.RefId == nil
    }

func (n *SectionInfo) Unset(key string) *SectionInfo {
        switch key {
  case "RefId":
   n.sectioninfo.RefId = nil
  case "LocalId":
   n.sectioninfo.LocalId = nil
  case "LanguageOfInstruction":
   n.sectioninfo.LanguageOfInstruction = nil
  case "CountForAttendance":
   n.sectioninfo.CountForAttendance = nil
  case "SIF_Metadata":
   n.sectioninfo.SIF_Metadata = nil
  case "SummerSchool":
   n.sectioninfo.SummerSchool = nil
  case "LocationOfInstruction":
   n.sectioninfo.LocationOfInstruction = nil
  case "SchoolCourseInfoRefId":
   n.sectioninfo.SchoolCourseInfoRefId = nil
  case "SectionCode":
   n.sectioninfo.SectionCode = nil
  case "SchoolCourseInfoOverride":
   n.sectioninfo.SchoolCourseInfoOverride = nil
  case "Description":
   n.sectioninfo.Description = nil
  case "SIF_ExtendedElements":
   n.sectioninfo.SIF_ExtendedElements = nil
  case "SchoolYear":
   n.sectioninfo.SchoolYear = nil
  case "TermInfoRefId":
   n.sectioninfo.TermInfoRefId = nil
  case "LocalCodeList":
   n.sectioninfo.LocalCodeList = nil
  case "MediumOfInstruction":
   n.sectioninfo.MediumOfInstruction = nil
  case "CourseSectionCode":
   n.sectioninfo.CourseSectionCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SectionInfo")
        }
        return n
}

func (n *SectionInfo) SetProperty(key string, value interface{}) *SectionInfo {
        if n == nil {
                n, _ = SectionInfoPointer(SectionInfo{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.sectioninfo.RefId = ((*RefIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.sectioninfo.LocalId = ((*LocalIdType)(v))
      }
    case "LanguageOfInstruction":
    if v, ok:= LanguageOfInstructionTypePointer(value); ok {
      n.sectioninfo.LanguageOfInstruction = v
      }
    case "CountForAttendance":
    
    if v, ok:= StringPointer(value); ok {
      n.sectioninfo.CountForAttendance = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.sectioninfo.SIF_Metadata = v
      }
    case "SummerSchool":
    
    if v, ok:= StringPointer(value); ok {
      n.sectioninfo.SummerSchool = ((*String)(v))
      }
    case "LocationOfInstruction":
    if v, ok:= LocationOfInstructionTypePointer(value); ok {
      n.sectioninfo.LocationOfInstruction = v
      }
    case "SchoolCourseInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.sectioninfo.SchoolCourseInfoRefId = ((*String)(v))
      }
    case "SectionCode":
    
    if v, ok:= StringPointer(value); ok {
      n.sectioninfo.SectionCode = ((*String)(v))
      }
    case "SchoolCourseInfoOverride":
    if v, ok:= SchoolCourseInfoOverrideTypePointer(value); ok {
      n.sectioninfo.SchoolCourseInfoOverride = v
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.sectioninfo.Description = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.sectioninfo.SIF_ExtendedElements = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.sectioninfo.SchoolYear = ((*SchoolYearType)(v))
      }
    case "TermInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.sectioninfo.TermInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.sectioninfo.LocalCodeList = v
      }
    case "MediumOfInstruction":
    if v, ok:= MediumOfInstructionTypePointer(value); ok {
      n.sectioninfo.MediumOfInstruction = v
      }
    case "CourseSectionCode":
    
    if v, ok:= StringPointer(value); ok {
      n.sectioninfo.CourseSectionCode = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SectionInfo")
        }
        return n
}

  func (s *SectionInfo) RefId() *RefIdType {
    if s.sectioninfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sectioninfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.sectioninfo.RefId
    }
  func (s *SectionInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.sectioninfo.RefId == nil
    }
  func (s *SectionInfo) LocalId() *LocalIdType {
    if s.sectioninfo.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sectioninfo.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.sectioninfo.LocalId
    }
  func (s *SectionInfo) LocalId_IsNil() bool {
    return s.LocalId == nil || s.sectioninfo.LocalId == nil
    }
  func (s *SectionInfo) LanguageOfInstruction() *LanguageOfInstructionType {
    if s.sectioninfo.LanguageOfInstruction == nil {
     if v, ok:= LanguageOfInstructionTypePointer(LanguageOfInstructionType{}); ok {
      s.sectioninfo.LanguageOfInstruction = v
      }
      }
      return s.sectioninfo.LanguageOfInstruction
    }
  func (s *SectionInfo) LanguageOfInstruction_IsNil() bool {
    return s.LanguageOfInstruction == nil || s.sectioninfo.LanguageOfInstruction == nil
    }
  func (s *SectionInfo) CountForAttendance() *String {
    if s.sectioninfo.CountForAttendance == nil {
    if v, ok:= StringPointer(""); ok {
      s.sectioninfo.CountForAttendance = ((*String)(v))
      }
      }
      return s.sectioninfo.CountForAttendance
    }
  func (s *SectionInfo) CountForAttendance_IsNil() bool {
    return s.CountForAttendance == nil || s.sectioninfo.CountForAttendance == nil
    }
  func (s *SectionInfo) SIF_Metadata() *SIF_MetadataType {
    if s.sectioninfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.sectioninfo.SIF_Metadata = v
      }
      }
      return s.sectioninfo.SIF_Metadata
    }
  func (s *SectionInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.sectioninfo.SIF_Metadata == nil
    }
  func (s *SectionInfo) SummerSchool() *String {
    if s.sectioninfo.SummerSchool == nil {
    if v, ok:= StringPointer(""); ok {
      s.sectioninfo.SummerSchool = ((*String)(v))
      }
      }
      return s.sectioninfo.SummerSchool
    }
  func (s *SectionInfo) SummerSchool_IsNil() bool {
    return s.SummerSchool == nil || s.sectioninfo.SummerSchool == nil
    }
  func (s *SectionInfo) LocationOfInstruction() *LocationOfInstructionType {
    if s.sectioninfo.LocationOfInstruction == nil {
     if v, ok:= LocationOfInstructionTypePointer(LocationOfInstructionType{}); ok {
      s.sectioninfo.LocationOfInstruction = v
      }
      }
      return s.sectioninfo.LocationOfInstruction
    }
  func (s *SectionInfo) LocationOfInstruction_IsNil() bool {
    return s.LocationOfInstruction == nil || s.sectioninfo.LocationOfInstruction == nil
    }
  func (s *SectionInfo) SchoolCourseInfoRefId() *String {
    if s.sectioninfo.SchoolCourseInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sectioninfo.SchoolCourseInfoRefId = ((*String)(v))
      }
      }
      return s.sectioninfo.SchoolCourseInfoRefId
    }
  func (s *SectionInfo) SchoolCourseInfoRefId_IsNil() bool {
    return s.SchoolCourseInfoRefId == nil || s.sectioninfo.SchoolCourseInfoRefId == nil
    }
  func (s *SectionInfo) SectionCode() *String {
    if s.sectioninfo.SectionCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.sectioninfo.SectionCode = ((*String)(v))
      }
      }
      return s.sectioninfo.SectionCode
    }
  func (s *SectionInfo) SectionCode_IsNil() bool {
    return s.SectionCode == nil || s.sectioninfo.SectionCode == nil
    }
  func (s *SectionInfo) SchoolCourseInfoOverride() *SchoolCourseInfoOverrideType {
    if s.sectioninfo.SchoolCourseInfoOverride == nil {
     if v, ok:= SchoolCourseInfoOverrideTypePointer(SchoolCourseInfoOverrideType{}); ok {
      s.sectioninfo.SchoolCourseInfoOverride = v
      }
      }
      return s.sectioninfo.SchoolCourseInfoOverride
    }
  func (s *SectionInfo) SchoolCourseInfoOverride_IsNil() bool {
    return s.SchoolCourseInfoOverride == nil || s.sectioninfo.SchoolCourseInfoOverride == nil
    }
  func (s *SectionInfo) Description() *String {
    if s.sectioninfo.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.sectioninfo.Description = ((*String)(v))
      }
      }
      return s.sectioninfo.Description
    }
  func (s *SectionInfo) Description_IsNil() bool {
    return s.Description == nil || s.sectioninfo.Description == nil
    }
  func (s *SectionInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.sectioninfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.sectioninfo.SIF_ExtendedElements = v
      }
      }
      return s.sectioninfo.SIF_ExtendedElements
    }
  func (s *SectionInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.sectioninfo.SIF_ExtendedElements == nil
    }
  func (s *SectionInfo) SchoolYear() *SchoolYearType {
    if s.sectioninfo.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.sectioninfo.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.sectioninfo.SchoolYear
    }
  func (s *SectionInfo) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.sectioninfo.SchoolYear == nil
    }
  func (s *SectionInfo) TermInfoRefId() *String {
    if s.sectioninfo.TermInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.sectioninfo.TermInfoRefId = ((*String)(v))
      }
      }
      return s.sectioninfo.TermInfoRefId
    }
  func (s *SectionInfo) TermInfoRefId_IsNil() bool {
    return s.TermInfoRefId == nil || s.sectioninfo.TermInfoRefId == nil
    }
  func (s *SectionInfo) LocalCodeList() *LocalCodeListType {
    if s.sectioninfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.sectioninfo.LocalCodeList = v
      }
      }
      return s.sectioninfo.LocalCodeList
    }
  func (s *SectionInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.sectioninfo.LocalCodeList == nil
    }
  func (s *SectionInfo) MediumOfInstruction() *MediumOfInstructionType {
    if s.sectioninfo.MediumOfInstruction == nil {
     if v, ok:= MediumOfInstructionTypePointer(MediumOfInstructionType{}); ok {
      s.sectioninfo.MediumOfInstruction = v
      }
      }
      return s.sectioninfo.MediumOfInstruction
    }
  func (s *SectionInfo) MediumOfInstruction_IsNil() bool {
    return s.MediumOfInstruction == nil || s.sectioninfo.MediumOfInstruction == nil
    }
  func (s *SectionInfo) CourseSectionCode() *String {
    if s.sectioninfo.CourseSectionCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.sectioninfo.CourseSectionCode = ((*String)(v))
      }
      }
      return s.sectioninfo.CourseSectionCode
    }
  func (s *SectionInfo) CourseSectionCode_IsNil() bool {
    return s.CourseSectionCode == nil || s.sectioninfo.CourseSectionCode == nil
    }

func (n *FinancialQuestionnaireCollection) Unset(key string) *FinancialQuestionnaireCollection {
        switch key {
  case "LocalCodeList":
   n.financialquestionnairecollection.LocalCodeList = nil
  case "SIF_Metadata":
   n.financialquestionnairecollection.SIF_Metadata = nil
  case "SIF_ExtendedElements":
   n.financialquestionnairecollection.SIF_ExtendedElements = nil
  case "ReportingAuthorityCommonwealthId":
   n.financialquestionnairecollection.ReportingAuthorityCommonwealthId = nil
  case "SoftwareVendorInfo":
   n.financialquestionnairecollection.SoftwareVendorInfo = nil
  case "FQYear":
   n.financialquestionnairecollection.FQYear = nil
  case "RefId":
   n.financialquestionnairecollection.RefId = nil
  case "FQReportingList":
   n.financialquestionnairecollection.FQReportingList = nil
  case "RoundCode":
   n.financialquestionnairecollection.RoundCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FinancialQuestionnaireCollection")
        }
        return n
}

func (n *FinancialQuestionnaireCollection) SetProperty(key string, value interface{}) *FinancialQuestionnaireCollection {
        if n == nil {
                n, _ = FinancialQuestionnaireCollectionPointer(FinancialQuestionnaireCollection{})
        }
        switch key {
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.financialquestionnairecollection.LocalCodeList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.financialquestionnairecollection.SIF_Metadata = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.financialquestionnairecollection.SIF_ExtendedElements = v
      }
    case "ReportingAuthorityCommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.financialquestionnairecollection.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
    case "SoftwareVendorInfo":
    if v, ok:= SoftwareVendorInfoContainerTypePointer(value); ok {
      n.financialquestionnairecollection.SoftwareVendorInfo = v
      }
    case "FQYear":
    
    if v, ok:= StringPointer(value); ok {
      n.financialquestionnairecollection.FQYear = ((*SchoolYearType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.financialquestionnairecollection.RefId = ((*RefIdType)(v))
      }
    case "FQReportingList":
    if v, ok:= FQReportingListTypePointer(value); ok {
      n.financialquestionnairecollection.FQReportingList = v
      }
    case "RoundCode":
    
    if v, ok:= StringPointer(value); ok {
      n.financialquestionnairecollection.RoundCode = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FinancialQuestionnaireCollection")
        }
        return n
}

  func (s *FinancialQuestionnaireCollection) LocalCodeList() *LocalCodeListType {
    if s.financialquestionnairecollection.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.financialquestionnairecollection.LocalCodeList = v
      }
      }
      return s.financialquestionnairecollection.LocalCodeList
    }
  func (s *FinancialQuestionnaireCollection) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.financialquestionnairecollection.LocalCodeList == nil
    }
  func (s *FinancialQuestionnaireCollection) SIF_Metadata() *SIF_MetadataType {
    if s.financialquestionnairecollection.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.financialquestionnairecollection.SIF_Metadata = v
      }
      }
      return s.financialquestionnairecollection.SIF_Metadata
    }
  func (s *FinancialQuestionnaireCollection) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.financialquestionnairecollection.SIF_Metadata == nil
    }
  func (s *FinancialQuestionnaireCollection) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.financialquestionnairecollection.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.financialquestionnairecollection.SIF_ExtendedElements = v
      }
      }
      return s.financialquestionnairecollection.SIF_ExtendedElements
    }
  func (s *FinancialQuestionnaireCollection) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.financialquestionnairecollection.SIF_ExtendedElements == nil
    }
  func (s *FinancialQuestionnaireCollection) ReportingAuthorityCommonwealthId() *String {
    if s.financialquestionnairecollection.ReportingAuthorityCommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialquestionnairecollection.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
      }
      return s.financialquestionnairecollection.ReportingAuthorityCommonwealthId
    }
  func (s *FinancialQuestionnaireCollection) ReportingAuthorityCommonwealthId_IsNil() bool {
    return s.ReportingAuthorityCommonwealthId == nil || s.financialquestionnairecollection.ReportingAuthorityCommonwealthId == nil
    }
  func (s *FinancialQuestionnaireCollection) SoftwareVendorInfo() *SoftwareVendorInfoContainerType {
    if s.financialquestionnairecollection.SoftwareVendorInfo == nil {
     if v, ok:= SoftwareVendorInfoContainerTypePointer(SoftwareVendorInfoContainerType{}); ok {
      s.financialquestionnairecollection.SoftwareVendorInfo = v
      }
      }
      return s.financialquestionnairecollection.SoftwareVendorInfo
    }
  func (s *FinancialQuestionnaireCollection) SoftwareVendorInfo_IsNil() bool {
    return s.SoftwareVendorInfo == nil || s.financialquestionnairecollection.SoftwareVendorInfo == nil
    }
  func (s *FinancialQuestionnaireCollection) FQYear() *SchoolYearType {
    if s.financialquestionnairecollection.FQYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialquestionnairecollection.FQYear = ((*SchoolYearType)(v))
      }
      }
      return s.financialquestionnairecollection.FQYear
    }
  func (s *FinancialQuestionnaireCollection) FQYear_IsNil() bool {
    return s.FQYear == nil || s.financialquestionnairecollection.FQYear == nil
    }
  func (s *FinancialQuestionnaireCollection) RefId() *RefIdType {
    if s.financialquestionnairecollection.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialquestionnairecollection.RefId = ((*RefIdType)(v))
      }
      }
      return s.financialquestionnairecollection.RefId
    }
  func (s *FinancialQuestionnaireCollection) RefId_IsNil() bool {
    return s.RefId == nil || s.financialquestionnairecollection.RefId == nil
    }
  func (s *FinancialQuestionnaireCollection) FQReportingList() *FQReportingListType {
    if s.financialquestionnairecollection.FQReportingList == nil {
     if v, ok:= FQReportingListTypePointer(FQReportingListType{}); ok {
      s.financialquestionnairecollection.FQReportingList = v
      }
      }
      return s.financialquestionnairecollection.FQReportingList
    }
  func (s *FinancialQuestionnaireCollection) FQReportingList_IsNil() bool {
    return s.FQReportingList == nil || s.financialquestionnairecollection.FQReportingList == nil
    }
  func (s *FinancialQuestionnaireCollection) RoundCode() *String {
    if s.financialquestionnairecollection.RoundCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.financialquestionnairecollection.RoundCode = ((*String)(v))
      }
      }
      return s.financialquestionnairecollection.RoundCode
    }
  func (s *FinancialQuestionnaireCollection) RoundCode_IsNil() bool {
    return s.RoundCode == nil || s.financialquestionnairecollection.RoundCode == nil
    }

func (n *AddressType) Unset(key string) *AddressType {
        switch key {
  case "Country":
   n.addresstype.Country = nil
  case "City":
   n.addresstype.City = nil
  case "AddressGlobalUID":
   n.addresstype.AddressGlobalUID = nil
  case "StateProvince":
   n.addresstype.StateProvince = nil
  case "StatisticalAreas":
   n.addresstype.StatisticalAreas = nil
  case "EffectiveToDate":
   n.addresstype.EffectiveToDate = nil
  case "Role":
   n.addresstype.Role = nil
  case "EffectiveFromDate":
   n.addresstype.EffectiveFromDate = nil
  case "PostalCode":
   n.addresstype.PostalCode = nil
  case "LocalId":
   n.addresstype.LocalId = nil
  case "MapReference":
   n.addresstype.MapReference = nil
  case "Community":
   n.addresstype.Community = nil
  case "Type":
   n.addresstype.Type = nil
  case "Street":
   n.addresstype.Street = nil
  case "GridLocation":
   n.addresstype.GridLocation = nil
  case "RadioContact":
   n.addresstype.RadioContact = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressType")
        }
        return n
}

func (n *AddressType) SetProperty(key string, value interface{}) *AddressType {
        if n == nil {
                n, _ = AddressTypePointer(AddressType{})
        }
        switch key {
    case "Country":
        if !CodesetContains(AUCodeSetsStandardAustralianClassificationOfCountriesSACCType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStandardAustralianClassificationOfCountriesSACCType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.addresstype.Country = ((*CountryType)(v))
      }
    case "City":
    
    if v, ok:= StringPointer(value); ok {
      n.addresstype.City = ((*String)(v))
      }
    case "AddressGlobalUID":
    
    if v, ok:= StringPointer(value); ok {
      n.addresstype.AddressGlobalUID = ((*GUIDType)(v))
      }
    case "StateProvince":
    
    if v, ok:= StringPointer(value); ok {
      n.addresstype.StateProvince = ((*StateProvinceType)(v))
      }
    case "StatisticalAreas":
    if v, ok:= StatisticalAreasTypePointer(value); ok {
      n.addresstype.StatisticalAreas = v
      }
    case "EffectiveToDate":
    
    if v, ok:= StringPointer(value); ok {
      n.addresstype.EffectiveToDate = ((*String)(v))
      }
    case "Role":
        if !CodesetContains(AUCodeSetsAddressRoleType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAddressRoleType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.addresstype.Role = ((*AUCodeSetsAddressRoleType)(v))
      }
    case "EffectiveFromDate":
    
    if v, ok:= StringPointer(value); ok {
      n.addresstype.EffectiveFromDate = ((*String)(v))
      }
    case "PostalCode":
    
    if v, ok:= StringPointer(value); ok {
      n.addresstype.PostalCode = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.addresstype.LocalId = ((*LocalIdType)(v))
      }
    case "MapReference":
    if v, ok:= MapReferenceTypePointer(value); ok {
      n.addresstype.MapReference = v
      }
    case "Community":
    
    if v, ok:= StringPointer(value); ok {
      n.addresstype.Community = ((*String)(v))
      }
    case "Type":
        if !CodesetContains(AUCodeSetsAddressTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAddressTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.addresstype.Type = ((*AUCodeSetsAddressTypeType)(v))
      }
    case "Street":
    if v, ok:= AddressStreetTypePointer(value); ok {
      n.addresstype.Street = v
      }
    case "GridLocation":
    if v, ok:= GridLocationTypePointer(value); ok {
      n.addresstype.GridLocation = v
      }
    case "RadioContact":
    
    if v, ok:= StringPointer(value); ok {
      n.addresstype.RadioContact = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AddressType")
        }
        return n
}

  func (s *AddressType) Country() *CountryType {
    if s.addresstype.Country == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresstype.Country = ((*CountryType)(v))
      }
      }
      return s.addresstype.Country
    }
  func (s *AddressType) Country_IsNil() bool {
    return s.Country == nil || s.addresstype.Country == nil
    }
  func (s *AddressType) City() *String {
    if s.addresstype.City == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresstype.City = ((*String)(v))
      }
      }
      return s.addresstype.City
    }
  func (s *AddressType) City_IsNil() bool {
    return s.City == nil || s.addresstype.City == nil
    }
  func (s *AddressType) AddressGlobalUID() *GUIDType {
    if s.addresstype.AddressGlobalUID == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresstype.AddressGlobalUID = ((*GUIDType)(v))
      }
      }
      return s.addresstype.AddressGlobalUID
    }
  func (s *AddressType) AddressGlobalUID_IsNil() bool {
    return s.AddressGlobalUID == nil || s.addresstype.AddressGlobalUID == nil
    }
  func (s *AddressType) StateProvince() *StateProvinceType {
    if s.addresstype.StateProvince == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresstype.StateProvince = ((*StateProvinceType)(v))
      }
      }
      return s.addresstype.StateProvince
    }
  func (s *AddressType) StateProvince_IsNil() bool {
    return s.StateProvince == nil || s.addresstype.StateProvince == nil
    }
  func (s *AddressType) StatisticalAreas() *StatisticalAreasType {
    if s.addresstype.StatisticalAreas == nil {
     if v, ok:= StatisticalAreasTypePointer(StatisticalAreasType{}); ok {
      s.addresstype.StatisticalAreas = v
      }
      }
      return s.addresstype.StatisticalAreas
    }
  func (s *AddressType) StatisticalAreas_IsNil() bool {
    return s.StatisticalAreas == nil || s.addresstype.StatisticalAreas == nil
    }
  func (s *AddressType) EffectiveToDate() *String {
    if s.addresstype.EffectiveToDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresstype.EffectiveToDate = ((*String)(v))
      }
      }
      return s.addresstype.EffectiveToDate
    }
  func (s *AddressType) EffectiveToDate_IsNil() bool {
    return s.EffectiveToDate == nil || s.addresstype.EffectiveToDate == nil
    }
  func (s *AddressType) Role() *AUCodeSetsAddressRoleType {
    if s.addresstype.Role == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresstype.Role = ((*AUCodeSetsAddressRoleType)(v))
      }
      }
      return s.addresstype.Role
    }
  func (s *AddressType) Role_IsNil() bool {
    return s.Role == nil || s.addresstype.Role == nil
    }
  func (s *AddressType) EffectiveFromDate() *String {
    if s.addresstype.EffectiveFromDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresstype.EffectiveFromDate = ((*String)(v))
      }
      }
      return s.addresstype.EffectiveFromDate
    }
  func (s *AddressType) EffectiveFromDate_IsNil() bool {
    return s.EffectiveFromDate == nil || s.addresstype.EffectiveFromDate == nil
    }
  func (s *AddressType) PostalCode() *String {
    if s.addresstype.PostalCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresstype.PostalCode = ((*String)(v))
      }
      }
      return s.addresstype.PostalCode
    }
  func (s *AddressType) PostalCode_IsNil() bool {
    return s.PostalCode == nil || s.addresstype.PostalCode == nil
    }
  func (s *AddressType) LocalId() *LocalIdType {
    if s.addresstype.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresstype.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.addresstype.LocalId
    }
  func (s *AddressType) LocalId_IsNil() bool {
    return s.LocalId == nil || s.addresstype.LocalId == nil
    }
  func (s *AddressType) MapReference() *MapReferenceType {
    if s.addresstype.MapReference == nil {
     if v, ok:= MapReferenceTypePointer(MapReferenceType{}); ok {
      s.addresstype.MapReference = v
      }
      }
      return s.addresstype.MapReference
    }
  func (s *AddressType) MapReference_IsNil() bool {
    return s.MapReference == nil || s.addresstype.MapReference == nil
    }
  func (s *AddressType) Community() *String {
    if s.addresstype.Community == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresstype.Community = ((*String)(v))
      }
      }
      return s.addresstype.Community
    }
  func (s *AddressType) Community_IsNil() bool {
    return s.Community == nil || s.addresstype.Community == nil
    }
  func (s *AddressType) Type() *AUCodeSetsAddressTypeType {
    if s.addresstype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresstype.Type = ((*AUCodeSetsAddressTypeType)(v))
      }
      }
      return s.addresstype.Type
    }
  func (s *AddressType) Type_IsNil() bool {
    return s.Type == nil || s.addresstype.Type == nil
    }
  func (s *AddressType) Street() *AddressStreetType {
    if s.addresstype.Street == nil {
     if v, ok:= AddressStreetTypePointer(AddressStreetType{}); ok {
      s.addresstype.Street = v
      }
      }
      return s.addresstype.Street
    }
  func (s *AddressType) Street_IsNil() bool {
    return s.Street == nil || s.addresstype.Street == nil
    }
  func (s *AddressType) GridLocation() *GridLocationType {
    if s.addresstype.GridLocation == nil {
     if v, ok:= GridLocationTypePointer(GridLocationType{}); ok {
      s.addresstype.GridLocation = v
      }
      }
      return s.addresstype.GridLocation
    }
  func (s *AddressType) GridLocation_IsNil() bool {
    return s.GridLocation == nil || s.addresstype.GridLocation == nil
    }
  func (s *AddressType) RadioContact() *String {
    if s.addresstype.RadioContact == nil {
    if v, ok:= StringPointer(""); ok {
      s.addresstype.RadioContact = ((*String)(v))
      }
      }
      return s.addresstype.RadioContact
    }
  func (s *AddressType) RadioContact_IsNil() bool {
    return s.RadioContact == nil || s.addresstype.RadioContact == nil
    }

func (n *LanguageBaseType) Unset(key string) *LanguageBaseType {
        switch key {
  case "LanguageType":
   n.languagebasetype.LanguageType = nil
  case "OtherCodeList":
   n.languagebasetype.OtherCodeList = nil
  case "Dialect":
   n.languagebasetype.Dialect = nil
  case "Code":
   n.languagebasetype.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LanguageBaseType")
        }
        return n
}

func (n *LanguageBaseType) SetProperty(key string, value interface{}) *LanguageBaseType {
        if n == nil {
                n, _ = LanguageBaseTypePointer(LanguageBaseType{})
        }
        switch key {
    case "LanguageType":
        if !CodesetContains(AUCodeSetsLanguageTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsLanguageTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.languagebasetype.LanguageType = ((*AUCodeSetsLanguageTypeType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.languagebasetype.OtherCodeList = v
      }
    case "Dialect":
    
    if v, ok:= StringPointer(value); ok {
      n.languagebasetype.Dialect = ((*String)(v))
      }
    case "Code":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.languagebasetype.Code = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LanguageBaseType")
        }
        return n
}

  func (s *LanguageBaseType) LanguageType() *AUCodeSetsLanguageTypeType {
    if s.languagebasetype.LanguageType == nil {
    if v, ok:= StringPointer(""); ok {
      s.languagebasetype.LanguageType = ((*AUCodeSetsLanguageTypeType)(v))
      }
      }
      return s.languagebasetype.LanguageType
    }
  func (s *LanguageBaseType) LanguageType_IsNil() bool {
    return s.LanguageType == nil || s.languagebasetype.LanguageType == nil
    }
  func (s *LanguageBaseType) OtherCodeList() *OtherCodeListType {
    if s.languagebasetype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.languagebasetype.OtherCodeList = v
      }
      }
      return s.languagebasetype.OtherCodeList
    }
  func (s *LanguageBaseType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.languagebasetype.OtherCodeList == nil
    }
  func (s *LanguageBaseType) Dialect() *String {
    if s.languagebasetype.Dialect == nil {
    if v, ok:= StringPointer(""); ok {
      s.languagebasetype.Dialect = ((*String)(v))
      }
      }
      return s.languagebasetype.Dialect
    }
  func (s *LanguageBaseType) Dialect_IsNil() bool {
    return s.Dialect == nil || s.languagebasetype.Dialect == nil
    }
  func (s *LanguageBaseType) Code() *AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType {
    if s.languagebasetype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.languagebasetype.Code = ((*AUCodeSetsAustralianStandardClassificationOfLanguagesASCLType)(v))
      }
      }
      return s.languagebasetype.Code
    }
  func (s *LanguageBaseType) Code_IsNil() bool {
    return s.Code == nil || s.languagebasetype.Code == nil
    }

func (n *TimeTableContainer) Unset(key string) *TimeTableContainer {
        switch key {
  case "LocalCodeList":
   n.timetablecontainer.LocalCodeList = nil
  case "SIF_Metadata":
   n.timetablecontainer.SIF_Metadata = nil
  case "SIF_ExtendedElements":
   n.timetablecontainer.SIF_ExtendedElements = nil
  case "TeachingGroupScheduleList":
   n.timetablecontainer.TeachingGroupScheduleList = nil
  case "TimeTableSchedule":
   n.timetablecontainer.TimeTableSchedule = nil
  case "RefId":
   n.timetablecontainer.RefId = nil
  case "TimeTableScheduleCellList":
   n.timetablecontainer.TimeTableScheduleCellList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableContainer")
        }
        return n
}

func (n *TimeTableContainer) SetProperty(key string, value interface{}) *TimeTableContainer {
        if n == nil {
                n, _ = TimeTableContainerPointer(TimeTableContainer{})
        }
        switch key {
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.timetablecontainer.LocalCodeList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.timetablecontainer.SIF_Metadata = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.timetablecontainer.SIF_ExtendedElements = v
      }
    case "TeachingGroupScheduleList":
    if v, ok:= TeachingGroupScheduleTypePointer(value); ok {
      n.timetablecontainer.TeachingGroupScheduleList = v
      }
    case "TimeTableSchedule":
    if v, ok:= TimeTableScheduleTypePointer(value); ok {
      n.timetablecontainer.TimeTableSchedule = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecontainer.RefId = ((*RefIdType)(v))
      }
    case "TimeTableScheduleCellList":
    if v, ok:= TimeTableScheduleCellListTypePointer(value); ok {
      n.timetablecontainer.TimeTableScheduleCellList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableContainer")
        }
        return n
}

  func (s *TimeTableContainer) LocalCodeList() *LocalCodeListType {
    if s.timetablecontainer.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.timetablecontainer.LocalCodeList = v
      }
      }
      return s.timetablecontainer.LocalCodeList
    }
  func (s *TimeTableContainer) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.timetablecontainer.LocalCodeList == nil
    }
  func (s *TimeTableContainer) SIF_Metadata() *SIF_MetadataType {
    if s.timetablecontainer.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.timetablecontainer.SIF_Metadata = v
      }
      }
      return s.timetablecontainer.SIF_Metadata
    }
  func (s *TimeTableContainer) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.timetablecontainer.SIF_Metadata == nil
    }
  func (s *TimeTableContainer) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.timetablecontainer.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.timetablecontainer.SIF_ExtendedElements = v
      }
      }
      return s.timetablecontainer.SIF_ExtendedElements
    }
  func (s *TimeTableContainer) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.timetablecontainer.SIF_ExtendedElements == nil
    }
  func (s *TimeTableContainer) TeachingGroupScheduleList() *TeachingGroupScheduleType {
    if s.timetablecontainer.TeachingGroupScheduleList == nil {
     if v, ok:= TeachingGroupScheduleTypePointer(TeachingGroupScheduleType{}); ok {
      s.timetablecontainer.TeachingGroupScheduleList = v
      }
      }
      return s.timetablecontainer.TeachingGroupScheduleList
    }
  func (s *TimeTableContainer) TeachingGroupScheduleList_IsNil() bool {
    return s.TeachingGroupScheduleList == nil || s.timetablecontainer.TeachingGroupScheduleList == nil
    }
  func (s *TimeTableContainer) TimeTableSchedule() *TimeTableScheduleType {
    if s.timetablecontainer.TimeTableSchedule == nil {
     if v, ok:= TimeTableScheduleTypePointer(TimeTableScheduleType{}); ok {
      s.timetablecontainer.TimeTableSchedule = v
      }
      }
      return s.timetablecontainer.TimeTableSchedule
    }
  func (s *TimeTableContainer) TimeTableSchedule_IsNil() bool {
    return s.TimeTableSchedule == nil || s.timetablecontainer.TimeTableSchedule == nil
    }
  func (s *TimeTableContainer) RefId() *RefIdType {
    if s.timetablecontainer.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecontainer.RefId = ((*RefIdType)(v))
      }
      }
      return s.timetablecontainer.RefId
    }
  func (s *TimeTableContainer) RefId_IsNil() bool {
    return s.RefId == nil || s.timetablecontainer.RefId == nil
    }
  func (s *TimeTableContainer) TimeTableScheduleCellList() *TimeTableScheduleCellListType {
    if s.timetablecontainer.TimeTableScheduleCellList == nil {
     if v, ok:= TimeTableScheduleCellListTypePointer(TimeTableScheduleCellListType{}); ok {
      s.timetablecontainer.TimeTableScheduleCellList = v
      }
      }
      return s.timetablecontainer.TimeTableScheduleCellList
    }
  func (s *TimeTableContainer) TimeTableScheduleCellList_IsNil() bool {
    return s.TimeTableScheduleCellList == nil || s.timetablecontainer.TimeTableScheduleCellList == nil
    }

func (n *LibraryMessageType) Unset(key string) *LibraryMessageType {
        switch key {
  case "Text":
   n.librarymessagetype.Text = nil
  case "PriorityCodeset":
   n.librarymessagetype.PriorityCodeset = nil
  case "Sent":
   n.librarymessagetype.Sent = nil
  case "Priority":
   n.librarymessagetype.Priority = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryMessageType")
        }
        return n
}

func (n *LibraryMessageType) SetProperty(key string, value interface{}) *LibraryMessageType {
        if n == nil {
                n, _ = LibraryMessageTypePointer(LibraryMessageType{})
        }
        switch key {
    case "Text":
    
    if v, ok:= StringPointer(value); ok {
      n.librarymessagetype.Text = ((*String)(v))
      }
    case "PriorityCodeset":
    
    if v, ok:= StringPointer(value); ok {
      n.librarymessagetype.PriorityCodeset = ((*String)(v))
      }
    case "Sent":
    
    if v, ok:= StringPointer(value); ok {
      n.librarymessagetype.Sent = ((*String)(v))
      }
    case "Priority":
    
    if v, ok:= StringPointer(value); ok {
      n.librarymessagetype.Priority = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryMessageType")
        }
        return n
}

  func (s *LibraryMessageType) Text() *String {
    if s.librarymessagetype.Text == nil {
    if v, ok:= StringPointer(""); ok {
      s.librarymessagetype.Text = ((*String)(v))
      }
      }
      return s.librarymessagetype.Text
    }
  func (s *LibraryMessageType) Text_IsNil() bool {
    return s.Text == nil || s.librarymessagetype.Text == nil
    }
  func (s *LibraryMessageType) PriorityCodeset() *String {
    if s.librarymessagetype.PriorityCodeset == nil {
    if v, ok:= StringPointer(""); ok {
      s.librarymessagetype.PriorityCodeset = ((*String)(v))
      }
      }
      return s.librarymessagetype.PriorityCodeset
    }
  func (s *LibraryMessageType) PriorityCodeset_IsNil() bool {
    return s.PriorityCodeset == nil || s.librarymessagetype.PriorityCodeset == nil
    }
  func (s *LibraryMessageType) Sent() *String {
    if s.librarymessagetype.Sent == nil {
    if v, ok:= StringPointer(""); ok {
      s.librarymessagetype.Sent = ((*String)(v))
      }
      }
      return s.librarymessagetype.Sent
    }
  func (s *LibraryMessageType) Sent_IsNil() bool {
    return s.Sent == nil || s.librarymessagetype.Sent == nil
    }
  func (s *LibraryMessageType) Priority() *String {
    if s.librarymessagetype.Priority == nil {
    if v, ok:= StringPointer(""); ok {
      s.librarymessagetype.Priority = ((*String)(v))
      }
      }
      return s.librarymessagetype.Priority
    }
  func (s *LibraryMessageType) Priority_IsNil() bool {
    return s.Priority == nil || s.librarymessagetype.Priority == nil
    }

func (n *SuspensionContainerType) Unset(key string) *SuspensionContainerType {
        switch key {
  case "ResolutionNotes":
   n.suspensioncontainertype.ResolutionNotes = nil
  case "AdvisementDate":
   n.suspensioncontainertype.AdvisementDate = nil
  case "EarlyReturnDate":
   n.suspensioncontainertype.EarlyReturnDate = nil
  case "WithdrawalTimeList":
   n.suspensioncontainertype.WithdrawalTimeList = nil
  case "SuspensionNotes":
   n.suspensioncontainertype.SuspensionNotes = nil
  case "Status":
   n.suspensioncontainertype.Status = nil
  case "ResolutionMeetingTime":
   n.suspensioncontainertype.ResolutionMeetingTime = nil
  case "Duration":
   n.suspensioncontainertype.Duration = nil
  case "SuspensionCategory":
   n.suspensioncontainertype.SuspensionCategory = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SuspensionContainerType")
        }
        return n
}

func (n *SuspensionContainerType) SetProperty(key string, value interface{}) *SuspensionContainerType {
        if n == nil {
                n, _ = SuspensionContainerTypePointer(SuspensionContainerType{})
        }
        switch key {
    case "ResolutionNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.suspensioncontainertype.ResolutionNotes = ((*String)(v))
      }
    case "AdvisementDate":
    
    if v, ok:= StringPointer(value); ok {
      n.suspensioncontainertype.AdvisementDate = ((*String)(v))
      }
    case "EarlyReturnDate":
    
    if v, ok:= StringPointer(value); ok {
      n.suspensioncontainertype.EarlyReturnDate = ((*String)(v))
      }
    case "WithdrawalTimeList":
    if v, ok:= WithdrawalTimeListTypePointer(value); ok {
      n.suspensioncontainertype.WithdrawalTimeList = v
      }
    case "SuspensionNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.suspensioncontainertype.SuspensionNotes = ((*String)(v))
      }
    case "Status":
        if !CodesetContains(AUCodeSetsWellbeingStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.suspensioncontainertype.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
    case "ResolutionMeetingTime":
    
    if v, ok:= StringPointer(value); ok {
      n.suspensioncontainertype.ResolutionMeetingTime = ((*String)(v))
      }
    case "Duration":
    
    if v, ok:= FloatPointer(value); ok {
      n.suspensioncontainertype.Duration = ((*Float)(v))
      }
    case "SuspensionCategory":
        if !CodesetContains(AUCodeSetsSuspensionCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSuspensionCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.suspensioncontainertype.SuspensionCategory = ((*AUCodeSetsSuspensionCategoryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SuspensionContainerType")
        }
        return n
}

  func (s *SuspensionContainerType) ResolutionNotes() *String {
    if s.suspensioncontainertype.ResolutionNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.suspensioncontainertype.ResolutionNotes = ((*String)(v))
      }
      }
      return s.suspensioncontainertype.ResolutionNotes
    }
  func (s *SuspensionContainerType) ResolutionNotes_IsNil() bool {
    return s.ResolutionNotes == nil || s.suspensioncontainertype.ResolutionNotes == nil
    }
  func (s *SuspensionContainerType) AdvisementDate() *String {
    if s.suspensioncontainertype.AdvisementDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.suspensioncontainertype.AdvisementDate = ((*String)(v))
      }
      }
      return s.suspensioncontainertype.AdvisementDate
    }
  func (s *SuspensionContainerType) AdvisementDate_IsNil() bool {
    return s.AdvisementDate == nil || s.suspensioncontainertype.AdvisementDate == nil
    }
  func (s *SuspensionContainerType) EarlyReturnDate() *String {
    if s.suspensioncontainertype.EarlyReturnDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.suspensioncontainertype.EarlyReturnDate = ((*String)(v))
      }
      }
      return s.suspensioncontainertype.EarlyReturnDate
    }
  func (s *SuspensionContainerType) EarlyReturnDate_IsNil() bool {
    return s.EarlyReturnDate == nil || s.suspensioncontainertype.EarlyReturnDate == nil
    }
  func (s *SuspensionContainerType) WithdrawalTimeList() *WithdrawalTimeListType {
    if s.suspensioncontainertype.WithdrawalTimeList == nil {
     if v, ok:= WithdrawalTimeListTypePointer(WithdrawalTimeListType{}); ok {
      s.suspensioncontainertype.WithdrawalTimeList = v
      }
      }
      return s.suspensioncontainertype.WithdrawalTimeList
    }
  func (s *SuspensionContainerType) WithdrawalTimeList_IsNil() bool {
    return s.WithdrawalTimeList == nil || s.suspensioncontainertype.WithdrawalTimeList == nil
    }
  func (s *SuspensionContainerType) SuspensionNotes() *String {
    if s.suspensioncontainertype.SuspensionNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.suspensioncontainertype.SuspensionNotes = ((*String)(v))
      }
      }
      return s.suspensioncontainertype.SuspensionNotes
    }
  func (s *SuspensionContainerType) SuspensionNotes_IsNil() bool {
    return s.SuspensionNotes == nil || s.suspensioncontainertype.SuspensionNotes == nil
    }
  func (s *SuspensionContainerType) Status() *AUCodeSetsWellbeingStatusType {
    if s.suspensioncontainertype.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.suspensioncontainertype.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
      }
      return s.suspensioncontainertype.Status
    }
  func (s *SuspensionContainerType) Status_IsNil() bool {
    return s.Status == nil || s.suspensioncontainertype.Status == nil
    }
  func (s *SuspensionContainerType) ResolutionMeetingTime() *String {
    if s.suspensioncontainertype.ResolutionMeetingTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.suspensioncontainertype.ResolutionMeetingTime = ((*String)(v))
      }
      }
      return s.suspensioncontainertype.ResolutionMeetingTime
    }
  func (s *SuspensionContainerType) ResolutionMeetingTime_IsNil() bool {
    return s.ResolutionMeetingTime == nil || s.suspensioncontainertype.ResolutionMeetingTime == nil
    }
  func (s *SuspensionContainerType) Duration() *Float {
    if s.suspensioncontainertype.Duration == nil {
    if v, ok:= FloatPointer(0); ok {
      s.suspensioncontainertype.Duration = ((*Float)(v))
      }
      }
      return s.suspensioncontainertype.Duration
    }
  func (s *SuspensionContainerType) Duration_IsNil() bool {
    return s.Duration == nil || s.suspensioncontainertype.Duration == nil
    }
  func (s *SuspensionContainerType) SuspensionCategory() *AUCodeSetsSuspensionCategoryType {
    if s.suspensioncontainertype.SuspensionCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.suspensioncontainertype.SuspensionCategory = ((*AUCodeSetsSuspensionCategoryType)(v))
      }
      }
      return s.suspensioncontainertype.SuspensionCategory
    }
  func (s *SuspensionContainerType) SuspensionCategory_IsNil() bool {
    return s.SuspensionCategory == nil || s.suspensioncontainertype.SuspensionCategory == nil
    }

func (n *StaffAssignmentMostRecentContainerType) Unset(key string) *StaffAssignmentMostRecentContainerType {
        switch key {
  case "SecondaryFTE":
   n.staffassignmentmostrecentcontainertype.SecondaryFTE = nil
  case "PrimaryFTE":
   n.staffassignmentmostrecentcontainertype.PrimaryFTE = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffAssignmentMostRecentContainerType")
        }
        return n
}

func (n *StaffAssignmentMostRecentContainerType) SetProperty(key string, value interface{}) *StaffAssignmentMostRecentContainerType {
        if n == nil {
                n, _ = StaffAssignmentMostRecentContainerTypePointer(StaffAssignmentMostRecentContainerType{})
        }
        switch key {
    case "SecondaryFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.staffassignmentmostrecentcontainertype.SecondaryFTE = ((*Float)(v))
      }
    case "PrimaryFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.staffassignmentmostrecentcontainertype.PrimaryFTE = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffAssignmentMostRecentContainerType")
        }
        return n
}

  func (s *StaffAssignmentMostRecentContainerType) SecondaryFTE() *Float {
    if s.staffassignmentmostrecentcontainertype.SecondaryFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.staffassignmentmostrecentcontainertype.SecondaryFTE = ((*Float)(v))
      }
      }
      return s.staffassignmentmostrecentcontainertype.SecondaryFTE
    }
  func (s *StaffAssignmentMostRecentContainerType) SecondaryFTE_IsNil() bool {
    return s.SecondaryFTE == nil || s.staffassignmentmostrecentcontainertype.SecondaryFTE == nil
    }
  func (s *StaffAssignmentMostRecentContainerType) PrimaryFTE() *Float {
    if s.staffassignmentmostrecentcontainertype.PrimaryFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.staffassignmentmostrecentcontainertype.PrimaryFTE = ((*Float)(v))
      }
      }
      return s.staffassignmentmostrecentcontainertype.PrimaryFTE
    }
  func (s *StaffAssignmentMostRecentContainerType) PrimaryFTE_IsNil() bool {
    return s.PrimaryFTE == nil || s.staffassignmentmostrecentcontainertype.PrimaryFTE == nil
    }

func (n *TimeTableScheduleType) Unset(key string) *TimeTableScheduleType {
        switch key {
  case "TimeTableDayList":
   n.timetablescheduletype.TimeTableDayList = nil
  case "DaysPerCycle":
   n.timetablescheduletype.DaysPerCycle = nil
  case "LocalId":
   n.timetablescheduletype.LocalId = nil
  case "SchoolName":
   n.timetablescheduletype.SchoolName = nil
  case "PeriodsPerDay":
   n.timetablescheduletype.PeriodsPerDay = nil
  case "TimeTableCreationDate":
   n.timetablescheduletype.TimeTableCreationDate = nil
  case "StartDate":
   n.timetablescheduletype.StartDate = nil
  case "SchoolLocalId":
   n.timetablescheduletype.SchoolLocalId = nil
  case "TeachingPeriodsPerDay":
   n.timetablescheduletype.TeachingPeriodsPerDay = nil
  case "EndDate":
   n.timetablescheduletype.EndDate = nil
  case "SchoolInfoRefId":
   n.timetablescheduletype.SchoolInfoRefId = nil
  case "Title":
   n.timetablescheduletype.Title = nil
  case "SchoolYear":
   n.timetablescheduletype.SchoolYear = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableScheduleType")
        }
        return n
}

func (n *TimeTableScheduleType) SetProperty(key string, value interface{}) *TimeTableScheduleType {
        if n == nil {
                n, _ = TimeTableScheduleTypePointer(TimeTableScheduleType{})
        }
        switch key {
    case "TimeTableDayList":
    if v, ok:= TimeTableDayListTypePointer(value); ok {
      n.timetablescheduletype.TimeTableDayList = v
      }
    case "DaysPerCycle":
    
    if v, ok:= IntPointer(value); ok {
      n.timetablescheduletype.DaysPerCycle = ((*Int)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablescheduletype.LocalId = ((*LocalIdType)(v))
      }
    case "SchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablescheduletype.SchoolName = ((*String)(v))
      }
    case "PeriodsPerDay":
    
    if v, ok:= IntPointer(value); ok {
      n.timetablescheduletype.PeriodsPerDay = ((*Int)(v))
      }
    case "TimeTableCreationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablescheduletype.TimeTableCreationDate = ((*String)(v))
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablescheduletype.StartDate = ((*String)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablescheduletype.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "TeachingPeriodsPerDay":
    
    if v, ok:= IntPointer(value); ok {
      n.timetablescheduletype.TeachingPeriodsPerDay = ((*Int)(v))
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablescheduletype.EndDate = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablescheduletype.SchoolInfoRefId = ((*String)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablescheduletype.Title = ((*String)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablescheduletype.SchoolYear = ((*SchoolYearType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableScheduleType")
        }
        return n
}

  func (s *TimeTableScheduleType) TimeTableDayList() *TimeTableDayListType {
    if s.timetablescheduletype.TimeTableDayList == nil {
     if v, ok:= TimeTableDayListTypePointer(TimeTableDayListType{}); ok {
      s.timetablescheduletype.TimeTableDayList = v
      }
      }
      return s.timetablescheduletype.TimeTableDayList
    }
  func (s *TimeTableScheduleType) TimeTableDayList_IsNil() bool {
    return s.TimeTableDayList == nil || s.timetablescheduletype.TimeTableDayList == nil
    }
  func (s *TimeTableScheduleType) DaysPerCycle() *Int {
    if s.timetablescheduletype.DaysPerCycle == nil {
    if v, ok:= IntPointer(0); ok {
      s.timetablescheduletype.DaysPerCycle = ((*Int)(v))
      }
      }
      return s.timetablescheduletype.DaysPerCycle
    }
  func (s *TimeTableScheduleType) DaysPerCycle_IsNil() bool {
    return s.DaysPerCycle == nil || s.timetablescheduletype.DaysPerCycle == nil
    }
  func (s *TimeTableScheduleType) LocalId() *LocalIdType {
    if s.timetablescheduletype.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablescheduletype.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetablescheduletype.LocalId
    }
  func (s *TimeTableScheduleType) LocalId_IsNil() bool {
    return s.LocalId == nil || s.timetablescheduletype.LocalId == nil
    }
  func (s *TimeTableScheduleType) SchoolName() *String {
    if s.timetablescheduletype.SchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablescheduletype.SchoolName = ((*String)(v))
      }
      }
      return s.timetablescheduletype.SchoolName
    }
  func (s *TimeTableScheduleType) SchoolName_IsNil() bool {
    return s.SchoolName == nil || s.timetablescheduletype.SchoolName == nil
    }
  func (s *TimeTableScheduleType) PeriodsPerDay() *Int {
    if s.timetablescheduletype.PeriodsPerDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.timetablescheduletype.PeriodsPerDay = ((*Int)(v))
      }
      }
      return s.timetablescheduletype.PeriodsPerDay
    }
  func (s *TimeTableScheduleType) PeriodsPerDay_IsNil() bool {
    return s.PeriodsPerDay == nil || s.timetablescheduletype.PeriodsPerDay == nil
    }
  func (s *TimeTableScheduleType) TimeTableCreationDate() *String {
    if s.timetablescheduletype.TimeTableCreationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablescheduletype.TimeTableCreationDate = ((*String)(v))
      }
      }
      return s.timetablescheduletype.TimeTableCreationDate
    }
  func (s *TimeTableScheduleType) TimeTableCreationDate_IsNil() bool {
    return s.TimeTableCreationDate == nil || s.timetablescheduletype.TimeTableCreationDate == nil
    }
  func (s *TimeTableScheduleType) StartDate() *String {
    if s.timetablescheduletype.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablescheduletype.StartDate = ((*String)(v))
      }
      }
      return s.timetablescheduletype.StartDate
    }
  func (s *TimeTableScheduleType) StartDate_IsNil() bool {
    return s.StartDate == nil || s.timetablescheduletype.StartDate == nil
    }
  func (s *TimeTableScheduleType) SchoolLocalId() *LocalIdType {
    if s.timetablescheduletype.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablescheduletype.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetablescheduletype.SchoolLocalId
    }
  func (s *TimeTableScheduleType) SchoolLocalId_IsNil() bool {
    return s.SchoolLocalId == nil || s.timetablescheduletype.SchoolLocalId == nil
    }
  func (s *TimeTableScheduleType) TeachingPeriodsPerDay() *Int {
    if s.timetablescheduletype.TeachingPeriodsPerDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.timetablescheduletype.TeachingPeriodsPerDay = ((*Int)(v))
      }
      }
      return s.timetablescheduletype.TeachingPeriodsPerDay
    }
  func (s *TimeTableScheduleType) TeachingPeriodsPerDay_IsNil() bool {
    return s.TeachingPeriodsPerDay == nil || s.timetablescheduletype.TeachingPeriodsPerDay == nil
    }
  func (s *TimeTableScheduleType) EndDate() *String {
    if s.timetablescheduletype.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablescheduletype.EndDate = ((*String)(v))
      }
      }
      return s.timetablescheduletype.EndDate
    }
  func (s *TimeTableScheduleType) EndDate_IsNil() bool {
    return s.EndDate == nil || s.timetablescheduletype.EndDate == nil
    }
  func (s *TimeTableScheduleType) SchoolInfoRefId() *String {
    if s.timetablescheduletype.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablescheduletype.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.timetablescheduletype.SchoolInfoRefId
    }
  func (s *TimeTableScheduleType) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.timetablescheduletype.SchoolInfoRefId == nil
    }
  func (s *TimeTableScheduleType) Title() *String {
    if s.timetablescheduletype.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablescheduletype.Title = ((*String)(v))
      }
      }
      return s.timetablescheduletype.Title
    }
  func (s *TimeTableScheduleType) Title_IsNil() bool {
    return s.Title == nil || s.timetablescheduletype.Title == nil
    }
  func (s *TimeTableScheduleType) SchoolYear() *SchoolYearType {
    if s.timetablescheduletype.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablescheduletype.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.timetablescheduletype.SchoolYear
    }
  func (s *TimeTableScheduleType) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.timetablescheduletype.SchoolYear == nil
    }

func (n *AlertMessageType) Unset(key string) *AlertMessageType {
        switch key {
  case "Type":
   n.alertmessagetype.Type = nil
  case "Value":
   n.alertmessagetype.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AlertMessageType")
        }
        return n
}

func (n *AlertMessageType) SetProperty(key string, value interface{}) *AlertMessageType {
        if n == nil {
                n, _ = AlertMessageTypePointer(AlertMessageType{})
        }
        switch key {
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.alertmessagetype.Type = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.alertmessagetype.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AlertMessageType")
        }
        return n
}

  func (s *AlertMessageType) Type() *String {
    if s.alertmessagetype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.alertmessagetype.Type = ((*String)(v))
      }
      }
      return s.alertmessagetype.Type
    }
  func (s *AlertMessageType) Type_IsNil() bool {
    return s.Type == nil || s.alertmessagetype.Type == nil
    }
  func (s *AlertMessageType) Value() *String {
    if s.alertmessagetype.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.alertmessagetype.Value = ((*String)(v))
      }
      }
      return s.alertmessagetype.Value
    }
  func (s *AlertMessageType) Value_IsNil() bool {
    return s.Value == nil || s.alertmessagetype.Value == nil
    }

func (n *HouseholdContactInfoType) Unset(key string) *HouseholdContactInfoType {
        switch key {
  case "EmailList":
   n.householdcontactinfotype.EmailList = nil
  case "HouseholdContactId":
   n.householdcontactinfotype.HouseholdContactId = nil
  case "HouseholdSalutation":
   n.householdcontactinfotype.HouseholdSalutation = nil
  case "PreferenceNumber":
   n.householdcontactinfotype.PreferenceNumber = nil
  case "PhoneNumberList":
   n.householdcontactinfotype.PhoneNumberList = nil
  case "AddressList":
   n.householdcontactinfotype.AddressList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "HouseholdContactInfoType")
        }
        return n
}

func (n *HouseholdContactInfoType) SetProperty(key string, value interface{}) *HouseholdContactInfoType {
        if n == nil {
                n, _ = HouseholdContactInfoTypePointer(HouseholdContactInfoType{})
        }
        switch key {
    case "EmailList":
    if v, ok:= EmailListTypePointer(value); ok {
      n.householdcontactinfotype.EmailList = v
      }
    case "HouseholdContactId":
    
    if v, ok:= StringPointer(value); ok {
      n.householdcontactinfotype.HouseholdContactId = ((*LocalIdType)(v))
      }
    case "HouseholdSalutation":
    
    if v, ok:= StringPointer(value); ok {
      n.householdcontactinfotype.HouseholdSalutation = ((*String)(v))
      }
    case "PreferenceNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.householdcontactinfotype.PreferenceNumber = ((*Int)(v))
      }
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.householdcontactinfotype.PhoneNumberList = v
      }
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.householdcontactinfotype.AddressList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "HouseholdContactInfoType")
        }
        return n
}

  func (s *HouseholdContactInfoType) EmailList() *EmailListType {
    if s.householdcontactinfotype.EmailList == nil {
     if v, ok:= EmailListTypePointer(EmailListType{}); ok {
      s.householdcontactinfotype.EmailList = v
      }
      }
      return s.householdcontactinfotype.EmailList
    }
  func (s *HouseholdContactInfoType) EmailList_IsNil() bool {
    return s.EmailList == nil || s.householdcontactinfotype.EmailList == nil
    }
  func (s *HouseholdContactInfoType) HouseholdContactId() *LocalIdType {
    if s.householdcontactinfotype.HouseholdContactId == nil {
    if v, ok:= StringPointer(""); ok {
      s.householdcontactinfotype.HouseholdContactId = ((*LocalIdType)(v))
      }
      }
      return s.householdcontactinfotype.HouseholdContactId
    }
  func (s *HouseholdContactInfoType) HouseholdContactId_IsNil() bool {
    return s.HouseholdContactId == nil || s.householdcontactinfotype.HouseholdContactId == nil
    }
  func (s *HouseholdContactInfoType) HouseholdSalutation() *String {
    if s.householdcontactinfotype.HouseholdSalutation == nil {
    if v, ok:= StringPointer(""); ok {
      s.householdcontactinfotype.HouseholdSalutation = ((*String)(v))
      }
      }
      return s.householdcontactinfotype.HouseholdSalutation
    }
  func (s *HouseholdContactInfoType) HouseholdSalutation_IsNil() bool {
    return s.HouseholdSalutation == nil || s.householdcontactinfotype.HouseholdSalutation == nil
    }
  func (s *HouseholdContactInfoType) PreferenceNumber() *Int {
    if s.householdcontactinfotype.PreferenceNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.householdcontactinfotype.PreferenceNumber = ((*Int)(v))
      }
      }
      return s.householdcontactinfotype.PreferenceNumber
    }
  func (s *HouseholdContactInfoType) PreferenceNumber_IsNil() bool {
    return s.PreferenceNumber == nil || s.householdcontactinfotype.PreferenceNumber == nil
    }
  func (s *HouseholdContactInfoType) PhoneNumberList() *PhoneNumberListType {
    if s.householdcontactinfotype.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.householdcontactinfotype.PhoneNumberList = v
      }
      }
      return s.householdcontactinfotype.PhoneNumberList
    }
  func (s *HouseholdContactInfoType) PhoneNumberList_IsNil() bool {
    return s.PhoneNumberList == nil || s.householdcontactinfotype.PhoneNumberList == nil
    }
  func (s *HouseholdContactInfoType) AddressList() *AddressListType {
    if s.householdcontactinfotype.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.householdcontactinfotype.AddressList = v
      }
      }
      return s.householdcontactinfotype.AddressList
    }
  func (s *HouseholdContactInfoType) AddressList_IsNil() bool {
    return s.AddressList == nil || s.householdcontactinfotype.AddressList == nil
    }

func (n *TeacherCoverType) Unset(key string) *TeacherCoverType {
        switch key {
  case "FinishTime":
   n.teachercovertype.FinishTime = nil
  case "Supervision":
   n.teachercovertype.Supervision = nil
  case "StaffLocalId":
   n.teachercovertype.StaffLocalId = nil
  case "Credit":
   n.teachercovertype.Credit = nil
  case "StaffPersonalRefId":
   n.teachercovertype.StaffPersonalRefId = nil
  case "Weighting":
   n.teachercovertype.Weighting = nil
  case "StartTime":
   n.teachercovertype.StartTime = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeacherCoverType")
        }
        return n
}

func (n *TeacherCoverType) SetProperty(key string, value interface{}) *TeacherCoverType {
        if n == nil {
                n, _ = TeacherCoverTypePointer(TeacherCoverType{})
        }
        switch key {
    case "FinishTime":
    
    if v, ok:= StringPointer(value); ok {
      n.teachercovertype.FinishTime = ((*String)(v))
      }
    case "Supervision":
        if !CodesetContains(AUCodeSetsTeacherCoverSupervisionType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsTeacherCoverSupervisionType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.teachercovertype.Supervision = ((*AUCodeSetsTeacherCoverSupervisionType)(v))
      }
    case "StaffLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachercovertype.StaffLocalId = ((*LocalIdType)(v))
      }
    case "Credit":
        if !CodesetContains(AUCodeSetsTeacherCoverCreditType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsTeacherCoverCreditType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.teachercovertype.Credit = ((*AUCodeSetsTeacherCoverCreditType)(v))
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachercovertype.StaffPersonalRefId = ((*String)(v))
      }
    case "Weighting":
    
    if v, ok:= FloatPointer(value); ok {
      n.teachercovertype.Weighting = ((*Float)(v))
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.teachercovertype.StartTime = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeacherCoverType")
        }
        return n
}

  func (s *TeacherCoverType) FinishTime() *String {
    if s.teachercovertype.FinishTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachercovertype.FinishTime = ((*String)(v))
      }
      }
      return s.teachercovertype.FinishTime
    }
  func (s *TeacherCoverType) FinishTime_IsNil() bool {
    return s.FinishTime == nil || s.teachercovertype.FinishTime == nil
    }
  func (s *TeacherCoverType) Supervision() *AUCodeSetsTeacherCoverSupervisionType {
    if s.teachercovertype.Supervision == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachercovertype.Supervision = ((*AUCodeSetsTeacherCoverSupervisionType)(v))
      }
      }
      return s.teachercovertype.Supervision
    }
  func (s *TeacherCoverType) Supervision_IsNil() bool {
    return s.Supervision == nil || s.teachercovertype.Supervision == nil
    }
  func (s *TeacherCoverType) StaffLocalId() *LocalIdType {
    if s.teachercovertype.StaffLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachercovertype.StaffLocalId = ((*LocalIdType)(v))
      }
      }
      return s.teachercovertype.StaffLocalId
    }
  func (s *TeacherCoverType) StaffLocalId_IsNil() bool {
    return s.StaffLocalId == nil || s.teachercovertype.StaffLocalId == nil
    }
  func (s *TeacherCoverType) Credit() *AUCodeSetsTeacherCoverCreditType {
    if s.teachercovertype.Credit == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachercovertype.Credit = ((*AUCodeSetsTeacherCoverCreditType)(v))
      }
      }
      return s.teachercovertype.Credit
    }
  func (s *TeacherCoverType) Credit_IsNil() bool {
    return s.Credit == nil || s.teachercovertype.Credit == nil
    }
  func (s *TeacherCoverType) StaffPersonalRefId() *String {
    if s.teachercovertype.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachercovertype.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.teachercovertype.StaffPersonalRefId
    }
  func (s *TeacherCoverType) StaffPersonalRefId_IsNil() bool {
    return s.StaffPersonalRefId == nil || s.teachercovertype.StaffPersonalRefId == nil
    }
  func (s *TeacherCoverType) Weighting() *Float {
    if s.teachercovertype.Weighting == nil {
    if v, ok:= FloatPointer(0); ok {
      s.teachercovertype.Weighting = ((*Float)(v))
      }
      }
      return s.teachercovertype.Weighting
    }
  func (s *TeacherCoverType) Weighting_IsNil() bool {
    return s.Weighting == nil || s.teachercovertype.Weighting == nil
    }
  func (s *TeacherCoverType) StartTime() *String {
    if s.teachercovertype.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachercovertype.StartTime = ((*String)(v))
      }
      }
      return s.teachercovertype.StartTime
    }
  func (s *TeacherCoverType) StartTime_IsNil() bool {
    return s.StartTime == nil || s.teachercovertype.StartTime == nil
    }

func (n *AssociatedObjectsType_AssociatedObject) Unset(key string) *AssociatedObjectsType_AssociatedObject {
        switch key {
  case "Value":
   n.associatedobjectstype_associatedobject.Value = nil
  case "SIF_RefObject":
   n.associatedobjectstype_associatedobject.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AssociatedObjectsType_AssociatedObject")
        }
        return n
}

func (n *AssociatedObjectsType_AssociatedObject) SetProperty(key string, value interface{}) *AssociatedObjectsType_AssociatedObject {
        if n == nil {
                n, _ = AssociatedObjectsType_AssociatedObjectPointer(AssociatedObjectsType_AssociatedObject{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.associatedobjectstype_associatedobject.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.associatedobjectstype_associatedobject.SIF_RefObject = ((*ObjectNameType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AssociatedObjectsType_AssociatedObject")
        }
        return n
}

  func (s *AssociatedObjectsType_AssociatedObject) Value() *String {
    if s.associatedobjectstype_associatedobject.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.associatedobjectstype_associatedobject.Value = ((*String)(v))
      }
      }
      return s.associatedobjectstype_associatedobject.Value
    }
  func (s *AssociatedObjectsType_AssociatedObject) Value_IsNil() bool {
    return s.Value == nil || s.associatedobjectstype_associatedobject.Value == nil
    }
  func (s *AssociatedObjectsType_AssociatedObject) SIF_RefObject() *ObjectNameType {
    if s.associatedobjectstype_associatedobject.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.associatedobjectstype_associatedobject.SIF_RefObject = ((*ObjectNameType)(v))
      }
      }
      return s.associatedobjectstype_associatedobject.SIF_RefObject
    }
  func (s *AssociatedObjectsType_AssociatedObject) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.associatedobjectstype_associatedobject.SIF_RefObject == nil
    }

func (n *NAPSubscoreType) Unset(key string) *NAPSubscoreType {
        switch key {
  case "SubscoreValue":
   n.napsubscoretype.SubscoreValue = nil
  case "SubscoreType":
   n.napsubscoretype.SubscoreType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPSubscoreType")
        }
        return n
}

func (n *NAPSubscoreType) SetProperty(key string, value interface{}) *NAPSubscoreType {
        if n == nil {
                n, _ = NAPSubscoreTypePointer(NAPSubscoreType{})
        }
        switch key {
    case "SubscoreValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.napsubscoretype.SubscoreValue = ((*Float)(v))
      }
    case "SubscoreType":
    
    if v, ok:= StringPointer(value); ok {
      n.napsubscoretype.SubscoreType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPSubscoreType")
        }
        return n
}

  func (s *NAPSubscoreType) SubscoreValue() *Float {
    if s.napsubscoretype.SubscoreValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.napsubscoretype.SubscoreValue = ((*Float)(v))
      }
      }
      return s.napsubscoretype.SubscoreValue
    }
  func (s *NAPSubscoreType) SubscoreValue_IsNil() bool {
    return s.SubscoreValue == nil || s.napsubscoretype.SubscoreValue == nil
    }
  func (s *NAPSubscoreType) SubscoreType() *String {
    if s.napsubscoretype.SubscoreType == nil {
    if v, ok:= StringPointer(""); ok {
      s.napsubscoretype.SubscoreType = ((*String)(v))
      }
      }
      return s.napsubscoretype.SubscoreType
    }
  func (s *NAPSubscoreType) SubscoreType_IsNil() bool {
    return s.SubscoreType == nil || s.napsubscoretype.SubscoreType == nil
    }

func (n *CollectionRound) Unset(key string) *CollectionRound {
        switch key {
  case "RefId":
   n.collectionround.RefId = nil
  case "CollectionYear":
   n.collectionround.CollectionYear = nil
  case "SIF_ExtendedElements":
   n.collectionround.SIF_ExtendedElements = nil
  case "AGCollection":
   n.collectionround.AGCollection = nil
  case "SIF_Metadata":
   n.collectionround.SIF_Metadata = nil
  case "LocalCodeList":
   n.collectionround.LocalCodeList = nil
  case "AGRoundList":
   n.collectionround.AGRoundList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CollectionRound")
        }
        return n
}

func (n *CollectionRound) SetProperty(key string, value interface{}) *CollectionRound {
        if n == nil {
                n, _ = CollectionRoundPointer(CollectionRound{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.collectionround.RefId = ((*RefIdType)(v))
      }
    case "CollectionYear":
    
    if v, ok:= StringPointer(value); ok {
      n.collectionround.CollectionYear = ((*SchoolYearType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.collectionround.SIF_ExtendedElements = v
      }
    case "AGCollection":
        if !CodesetContains(AUCodeSetsAGCollectionType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAGCollectionType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.collectionround.AGCollection = ((*AUCodeSetsAGCollectionType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.collectionround.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.collectionround.LocalCodeList = v
      }
    case "AGRoundList":
    if v, ok:= AGRoundListTypePointer(value); ok {
      n.collectionround.AGRoundList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CollectionRound")
        }
        return n
}

  func (s *CollectionRound) RefId() *RefIdType {
    if s.collectionround.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.collectionround.RefId = ((*RefIdType)(v))
      }
      }
      return s.collectionround.RefId
    }
  func (s *CollectionRound) RefId_IsNil() bool {
    return s.RefId == nil || s.collectionround.RefId == nil
    }
  func (s *CollectionRound) CollectionYear() *SchoolYearType {
    if s.collectionround.CollectionYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.collectionround.CollectionYear = ((*SchoolYearType)(v))
      }
      }
      return s.collectionround.CollectionYear
    }
  func (s *CollectionRound) CollectionYear_IsNil() bool {
    return s.CollectionYear == nil || s.collectionround.CollectionYear == nil
    }
  func (s *CollectionRound) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.collectionround.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.collectionround.SIF_ExtendedElements = v
      }
      }
      return s.collectionround.SIF_ExtendedElements
    }
  func (s *CollectionRound) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.collectionround.SIF_ExtendedElements == nil
    }
  func (s *CollectionRound) AGCollection() *AUCodeSetsAGCollectionType {
    if s.collectionround.AGCollection == nil {
    if v, ok:= StringPointer(""); ok {
      s.collectionround.AGCollection = ((*AUCodeSetsAGCollectionType)(v))
      }
      }
      return s.collectionround.AGCollection
    }
  func (s *CollectionRound) AGCollection_IsNil() bool {
    return s.AGCollection == nil || s.collectionround.AGCollection == nil
    }
  func (s *CollectionRound) SIF_Metadata() *SIF_MetadataType {
    if s.collectionround.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.collectionround.SIF_Metadata = v
      }
      }
      return s.collectionround.SIF_Metadata
    }
  func (s *CollectionRound) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.collectionround.SIF_Metadata == nil
    }
  func (s *CollectionRound) LocalCodeList() *LocalCodeListType {
    if s.collectionround.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.collectionround.LocalCodeList = v
      }
      }
      return s.collectionround.LocalCodeList
    }
  func (s *CollectionRound) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.collectionround.LocalCodeList == nil
    }
  func (s *CollectionRound) AGRoundList() *AGRoundListType {
    if s.collectionround.AGRoundList == nil {
     if v, ok:= AGRoundListTypePointer(AGRoundListType{}); ok {
      s.collectionround.AGRoundList = v
      }
      }
      return s.collectionround.AGRoundList
    }
  func (s *CollectionRound) AGRoundList_IsNil() bool {
    return s.AGRoundList == nil || s.collectionround.AGRoundList == nil
    }

func (n *StaffAssignment) Unset(key string) *StaffAssignment {
        switch key {
  case "CalendarSummaryList":
   n.staffassignment.CalendarSummaryList = nil
  case "StaffSubjectList":
   n.staffassignment.StaffSubjectList = nil
  case "RefId":
   n.staffassignment.RefId = nil
  case "AvailableForTimetable":
   n.staffassignment.AvailableForTimetable = nil
  case "PreviousSchoolName":
   n.staffassignment.PreviousSchoolName = nil
  case "House":
   n.staffassignment.House = nil
  case "SIF_Metadata":
   n.staffassignment.SIF_Metadata = nil
  case "PrimaryAssignment":
   n.staffassignment.PrimaryAssignment = nil
  case "JobFunction":
   n.staffassignment.JobFunction = nil
  case "StaffActivity":
   n.staffassignment.StaffActivity = nil
  case "StaffPersonalRefId":
   n.staffassignment.StaffPersonalRefId = nil
  case "Description":
   n.staffassignment.Description = nil
  case "YearLevels":
   n.staffassignment.YearLevels = nil
  case "Homegroup":
   n.staffassignment.Homegroup = nil
  case "SIF_ExtendedElements":
   n.staffassignment.SIF_ExtendedElements = nil
  case "JobStartDate":
   n.staffassignment.JobStartDate = nil
  case "SchoolYear":
   n.staffassignment.SchoolYear = nil
  case "LocalCodeList":
   n.staffassignment.LocalCodeList = nil
  case "JobEndDate":
   n.staffassignment.JobEndDate = nil
  case "CasualReliefTeacher":
   n.staffassignment.CasualReliefTeacher = nil
  case "SchoolInfoRefId":
   n.staffassignment.SchoolInfoRefId = nil
  case "EmploymentStatus":
   n.staffassignment.EmploymentStatus = nil
  case "JobFTE":
   n.staffassignment.JobFTE = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffAssignment")
        }
        return n
}

func (n *StaffAssignment) SetProperty(key string, value interface{}) *StaffAssignment {
        if n == nil {
                n, _ = StaffAssignmentPointer(StaffAssignment{})
        }
        switch key {
    case "CalendarSummaryList":
    if v, ok:= CalendarSummaryListTypePointer(value); ok {
      n.staffassignment.CalendarSummaryList = v
      }
    case "StaffSubjectList":
    if v, ok:= StaffSubjectListTypePointer(value); ok {
      n.staffassignment.StaffSubjectList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.staffassignment.RefId = ((*RefIdType)(v))
      }
    case "AvailableForTimetable":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.staffassignment.AvailableForTimetable = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "PreviousSchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.staffassignment.PreviousSchoolName = ((*String)(v))
      }
    case "House":
    
    if v, ok:= StringPointer(value); ok {
      n.staffassignment.House = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.staffassignment.SIF_Metadata = v
      }
    case "PrimaryAssignment":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.staffassignment.PrimaryAssignment = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "JobFunction":
    
    if v, ok:= StringPointer(value); ok {
      n.staffassignment.JobFunction = ((*String)(v))
      }
    case "StaffActivity":
    if v, ok:= StaffActivityExtensionTypePointer(value); ok {
      n.staffassignment.StaffActivity = v
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.staffassignment.StaffPersonalRefId = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.staffassignment.Description = ((*String)(v))
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.staffassignment.YearLevels = v
      }
    case "Homegroup":
    
    if v, ok:= StringPointer(value); ok {
      n.staffassignment.Homegroup = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.staffassignment.SIF_ExtendedElements = v
      }
    case "JobStartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.staffassignment.JobStartDate = ((*String)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.staffassignment.SchoolYear = ((*SchoolYearType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.staffassignment.LocalCodeList = v
      }
    case "JobEndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.staffassignment.JobEndDate = ((*String)(v))
      }
    case "CasualReliefTeacher":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.staffassignment.CasualReliefTeacher = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.staffassignment.SchoolInfoRefId = ((*String)(v))
      }
    case "EmploymentStatus":
        if !CodesetContains(AUCodeSetsStaffStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStaffStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.staffassignment.EmploymentStatus = ((*AUCodeSetsStaffStatusType)(v))
      }
    case "JobFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.staffassignment.JobFTE = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StaffAssignment")
        }
        return n
}

  func (s *StaffAssignment) CalendarSummaryList() *CalendarSummaryListType {
    if s.staffassignment.CalendarSummaryList == nil {
     if v, ok:= CalendarSummaryListTypePointer(CalendarSummaryListType{}); ok {
      s.staffassignment.CalendarSummaryList = v
      }
      }
      return s.staffassignment.CalendarSummaryList
    }
  func (s *StaffAssignment) CalendarSummaryList_IsNil() bool {
    return s.CalendarSummaryList == nil || s.staffassignment.CalendarSummaryList == nil
    }
  func (s *StaffAssignment) StaffSubjectList() *StaffSubjectListType {
    if s.staffassignment.StaffSubjectList == nil {
     if v, ok:= StaffSubjectListTypePointer(StaffSubjectListType{}); ok {
      s.staffassignment.StaffSubjectList = v
      }
      }
      return s.staffassignment.StaffSubjectList
    }
  func (s *StaffAssignment) StaffSubjectList_IsNil() bool {
    return s.StaffSubjectList == nil || s.staffassignment.StaffSubjectList == nil
    }
  func (s *StaffAssignment) RefId() *RefIdType {
    if s.staffassignment.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.RefId = ((*RefIdType)(v))
      }
      }
      return s.staffassignment.RefId
    }
  func (s *StaffAssignment) RefId_IsNil() bool {
    return s.RefId == nil || s.staffassignment.RefId == nil
    }
  func (s *StaffAssignment) AvailableForTimetable() *AUCodeSetsYesOrNoCategoryType {
    if s.staffassignment.AvailableForTimetable == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.AvailableForTimetable = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.staffassignment.AvailableForTimetable
    }
  func (s *StaffAssignment) AvailableForTimetable_IsNil() bool {
    return s.AvailableForTimetable == nil || s.staffassignment.AvailableForTimetable == nil
    }
  func (s *StaffAssignment) PreviousSchoolName() *String {
    if s.staffassignment.PreviousSchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.PreviousSchoolName = ((*String)(v))
      }
      }
      return s.staffassignment.PreviousSchoolName
    }
  func (s *StaffAssignment) PreviousSchoolName_IsNil() bool {
    return s.PreviousSchoolName == nil || s.staffassignment.PreviousSchoolName == nil
    }
  func (s *StaffAssignment) House() *String {
    if s.staffassignment.House == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.House = ((*String)(v))
      }
      }
      return s.staffassignment.House
    }
  func (s *StaffAssignment) House_IsNil() bool {
    return s.House == nil || s.staffassignment.House == nil
    }
  func (s *StaffAssignment) SIF_Metadata() *SIF_MetadataType {
    if s.staffassignment.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.staffassignment.SIF_Metadata = v
      }
      }
      return s.staffassignment.SIF_Metadata
    }
  func (s *StaffAssignment) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.staffassignment.SIF_Metadata == nil
    }
  func (s *StaffAssignment) PrimaryAssignment() *AUCodeSetsYesOrNoCategoryType {
    if s.staffassignment.PrimaryAssignment == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.PrimaryAssignment = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.staffassignment.PrimaryAssignment
    }
  func (s *StaffAssignment) PrimaryAssignment_IsNil() bool {
    return s.PrimaryAssignment == nil || s.staffassignment.PrimaryAssignment == nil
    }
  func (s *StaffAssignment) JobFunction() *String {
    if s.staffassignment.JobFunction == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.JobFunction = ((*String)(v))
      }
      }
      return s.staffassignment.JobFunction
    }
  func (s *StaffAssignment) JobFunction_IsNil() bool {
    return s.JobFunction == nil || s.staffassignment.JobFunction == nil
    }
  func (s *StaffAssignment) StaffActivity() *StaffActivityExtensionType {
    if s.staffassignment.StaffActivity == nil {
     if v, ok:= StaffActivityExtensionTypePointer(StaffActivityExtensionType{}); ok {
      s.staffassignment.StaffActivity = v
      }
      }
      return s.staffassignment.StaffActivity
    }
  func (s *StaffAssignment) StaffActivity_IsNil() bool {
    return s.StaffActivity == nil || s.staffassignment.StaffActivity == nil
    }
  func (s *StaffAssignment) StaffPersonalRefId() *String {
    if s.staffassignment.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.staffassignment.StaffPersonalRefId
    }
  func (s *StaffAssignment) StaffPersonalRefId_IsNil() bool {
    return s.StaffPersonalRefId == nil || s.staffassignment.StaffPersonalRefId == nil
    }
  func (s *StaffAssignment) Description() *String {
    if s.staffassignment.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.Description = ((*String)(v))
      }
      }
      return s.staffassignment.Description
    }
  func (s *StaffAssignment) Description_IsNil() bool {
    return s.Description == nil || s.staffassignment.Description == nil
    }
  func (s *StaffAssignment) YearLevels() *YearLevelsType {
    if s.staffassignment.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.staffassignment.YearLevels = v
      }
      }
      return s.staffassignment.YearLevels
    }
  func (s *StaffAssignment) YearLevels_IsNil() bool {
    return s.YearLevels == nil || s.staffassignment.YearLevels == nil
    }
  func (s *StaffAssignment) Homegroup() *String {
    if s.staffassignment.Homegroup == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.Homegroup = ((*String)(v))
      }
      }
      return s.staffassignment.Homegroup
    }
  func (s *StaffAssignment) Homegroup_IsNil() bool {
    return s.Homegroup == nil || s.staffassignment.Homegroup == nil
    }
  func (s *StaffAssignment) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.staffassignment.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.staffassignment.SIF_ExtendedElements = v
      }
      }
      return s.staffassignment.SIF_ExtendedElements
    }
  func (s *StaffAssignment) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.staffassignment.SIF_ExtendedElements == nil
    }
  func (s *StaffAssignment) JobStartDate() *String {
    if s.staffassignment.JobStartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.JobStartDate = ((*String)(v))
      }
      }
      return s.staffassignment.JobStartDate
    }
  func (s *StaffAssignment) JobStartDate_IsNil() bool {
    return s.JobStartDate == nil || s.staffassignment.JobStartDate == nil
    }
  func (s *StaffAssignment) SchoolYear() *SchoolYearType {
    if s.staffassignment.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.staffassignment.SchoolYear
    }
  func (s *StaffAssignment) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.staffassignment.SchoolYear == nil
    }
  func (s *StaffAssignment) LocalCodeList() *LocalCodeListType {
    if s.staffassignment.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.staffassignment.LocalCodeList = v
      }
      }
      return s.staffassignment.LocalCodeList
    }
  func (s *StaffAssignment) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.staffassignment.LocalCodeList == nil
    }
  func (s *StaffAssignment) JobEndDate() *String {
    if s.staffassignment.JobEndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.JobEndDate = ((*String)(v))
      }
      }
      return s.staffassignment.JobEndDate
    }
  func (s *StaffAssignment) JobEndDate_IsNil() bool {
    return s.JobEndDate == nil || s.staffassignment.JobEndDate == nil
    }
  func (s *StaffAssignment) CasualReliefTeacher() *AUCodeSetsYesOrNoCategoryType {
    if s.staffassignment.CasualReliefTeacher == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.CasualReliefTeacher = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.staffassignment.CasualReliefTeacher
    }
  func (s *StaffAssignment) CasualReliefTeacher_IsNil() bool {
    return s.CasualReliefTeacher == nil || s.staffassignment.CasualReliefTeacher == nil
    }
  func (s *StaffAssignment) SchoolInfoRefId() *String {
    if s.staffassignment.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.staffassignment.SchoolInfoRefId
    }
  func (s *StaffAssignment) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.staffassignment.SchoolInfoRefId == nil
    }
  func (s *StaffAssignment) EmploymentStatus() *AUCodeSetsStaffStatusType {
    if s.staffassignment.EmploymentStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.staffassignment.EmploymentStatus = ((*AUCodeSetsStaffStatusType)(v))
      }
      }
      return s.staffassignment.EmploymentStatus
    }
  func (s *StaffAssignment) EmploymentStatus_IsNil() bool {
    return s.EmploymentStatus == nil || s.staffassignment.EmploymentStatus == nil
    }
  func (s *StaffAssignment) JobFTE() *Float {
    if s.staffassignment.JobFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.staffassignment.JobFTE = ((*Float)(v))
      }
      }
      return s.staffassignment.JobFTE
    }
  func (s *StaffAssignment) JobFTE_IsNil() bool {
    return s.JobFTE == nil || s.staffassignment.JobFTE == nil
    }

func (n *PublishingPermissionType) Unset(key string) *PublishingPermissionType {
        switch key {
  case "PermissionValue":
   n.publishingpermissiontype.PermissionValue = nil
  case "PermissionCategory":
   n.publishingpermissiontype.PermissionCategory = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PublishingPermissionType")
        }
        return n
}

func (n *PublishingPermissionType) SetProperty(key string, value interface{}) *PublishingPermissionType {
        if n == nil {
                n, _ = PublishingPermissionTypePointer(PublishingPermissionType{})
        }
        switch key {
    case "PermissionValue":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.publishingpermissiontype.PermissionValue = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "PermissionCategory":
        if !CodesetContains(AUCodeSetsPermissionCategoryCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsPermissionCategoryCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.publishingpermissiontype.PermissionCategory = ((*AUCodeSetsPermissionCategoryCodeType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PublishingPermissionType")
        }
        return n
}

  func (s *PublishingPermissionType) PermissionValue() *AUCodeSetsYesOrNoCategoryType {
    if s.publishingpermissiontype.PermissionValue == nil {
    if v, ok:= StringPointer(""); ok {
      s.publishingpermissiontype.PermissionValue = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.publishingpermissiontype.PermissionValue
    }
  func (s *PublishingPermissionType) PermissionValue_IsNil() bool {
    return s.PermissionValue == nil || s.publishingpermissiontype.PermissionValue == nil
    }
  func (s *PublishingPermissionType) PermissionCategory() *AUCodeSetsPermissionCategoryCodeType {
    if s.publishingpermissiontype.PermissionCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.publishingpermissiontype.PermissionCategory = ((*AUCodeSetsPermissionCategoryCodeType)(v))
      }
      }
      return s.publishingpermissiontype.PermissionCategory
    }
  func (s *PublishingPermissionType) PermissionCategory_IsNil() bool {
    return s.PermissionCategory == nil || s.publishingpermissiontype.PermissionCategory == nil
    }

func (n *Identity_SIF_RefId) Unset(key string) *Identity_SIF_RefId {
        switch key {
  case "SIF_RefObject":
   n.identity_sif_refid.SIF_RefObject = nil
  case "Value":
   n.identity_sif_refid.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Identity_SIF_RefId")
        }
        return n
}

func (n *Identity_SIF_RefId) SetProperty(key string, value interface{}) *Identity_SIF_RefId {
        if n == nil {
                n, _ = Identity_SIF_RefIdPointer(Identity_SIF_RefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.identity_sif_refid.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.identity_sif_refid.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Identity_SIF_RefId")
        }
        return n
}

  func (s *Identity_SIF_RefId) SIF_RefObject() *String {
    if s.identity_sif_refid.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.identity_sif_refid.SIF_RefObject = ((*String)(v))
      }
      }
      return s.identity_sif_refid.SIF_RefObject
    }
  func (s *Identity_SIF_RefId) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.identity_sif_refid.SIF_RefObject == nil
    }
  func (s *Identity_SIF_RefId) Value() *String {
    if s.identity_sif_refid.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.identity_sif_refid.Value = ((*String)(v))
      }
      }
      return s.identity_sif_refid.Value
    }
  func (s *Identity_SIF_RefId) Value_IsNil() bool {
    return s.Value == nil || s.identity_sif_refid.Value == nil
    }

func (n *GradingAssignmentScore) Unset(key string) *GradingAssignmentScore {
        switch key {
  case "DateGraded":
   n.gradingassignmentscore.DateGraded = nil
  case "LocalCodeList":
   n.gradingassignmentscore.LocalCodeList = nil
  case "TeachingGroupRefId":
   n.gradingassignmentscore.TeachingGroupRefId = nil
  case "SIF_ExtendedElements":
   n.gradingassignmentscore.SIF_ExtendedElements = nil
  case "ExpectedScore":
   n.gradingassignmentscore.ExpectedScore = nil
  case "SchoolInfoRefId":
   n.gradingassignmentscore.SchoolInfoRefId = nil
  case "StaffPersonalRefId":
   n.gradingassignmentscore.StaffPersonalRefId = nil
  case "ScorePoints":
   n.gradingassignmentscore.ScorePoints = nil
  case "ScoreLetter":
   n.gradingassignmentscore.ScoreLetter = nil
  case "SIF_Metadata":
   n.gradingassignmentscore.SIF_Metadata = nil
  case "ScorePercent":
   n.gradingassignmentscore.ScorePercent = nil
  case "ScoreDescription":
   n.gradingassignmentscore.ScoreDescription = nil
  case "SubscoreList":
   n.gradingassignmentscore.SubscoreList = nil
  case "AssignmentScoreIteration":
   n.gradingassignmentscore.AssignmentScoreIteration = nil
  case "GradingAssignmentRefId":
   n.gradingassignmentscore.GradingAssignmentRefId = nil
  case "MarkInfoRefId":
   n.gradingassignmentscore.MarkInfoRefId = nil
  case "StudentPersonalRefId":
   n.gradingassignmentscore.StudentPersonalRefId = nil
  case "RefId":
   n.gradingassignmentscore.RefId = nil
  case "TeacherJudgement":
   n.gradingassignmentscore.TeacherJudgement = nil
  case "StudentPersonalLocalId":
   n.gradingassignmentscore.StudentPersonalLocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GradingAssignmentScore")
        }
        return n
}

func (n *GradingAssignmentScore) SetProperty(key string, value interface{}) *GradingAssignmentScore {
        if n == nil {
                n, _ = GradingAssignmentScorePointer(GradingAssignmentScore{})
        }
        switch key {
    case "DateGraded":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignmentscore.DateGraded = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.gradingassignmentscore.LocalCodeList = v
      }
    case "TeachingGroupRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignmentscore.TeachingGroupRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.gradingassignmentscore.SIF_ExtendedElements = v
      }
    case "ExpectedScore":
    
    if v, ok:= BoolPointer(value); ok {
      n.gradingassignmentscore.ExpectedScore = ((*Bool)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignmentscore.SchoolInfoRefId = ((*String)(v))
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignmentscore.StaffPersonalRefId = ((*String)(v))
      }
    case "ScorePoints":
    
    if v, ok:= IntPointer(value); ok {
      n.gradingassignmentscore.ScorePoints = ((*Int)(v))
      }
    case "ScoreLetter":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignmentscore.ScoreLetter = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.gradingassignmentscore.SIF_Metadata = v
      }
    case "ScorePercent":
    
    if v, ok:= FloatPointer(value); ok {
      n.gradingassignmentscore.ScorePercent = ((*Float)(v))
      }
    case "ScoreDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignmentscore.ScoreDescription = ((*String)(v))
      }
    case "SubscoreList":
    if v, ok:= NAPSubscoreListTypePointer(value); ok {
      n.gradingassignmentscore.SubscoreList = v
      }
    case "AssignmentScoreIteration":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignmentscore.AssignmentScoreIteration = ((*String)(v))
      }
    case "GradingAssignmentRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignmentscore.GradingAssignmentRefId = ((*String)(v))
      }
    case "MarkInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignmentscore.MarkInfoRefId = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignmentscore.StudentPersonalRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignmentscore.RefId = ((*RefIdType)(v))
      }
    case "TeacherJudgement":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignmentscore.TeacherJudgement = ((*String)(v))
      }
    case "StudentPersonalLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignmentscore.StudentPersonalLocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GradingAssignmentScore")
        }
        return n
}

  func (s *GradingAssignmentScore) DateGraded() *String {
    if s.gradingassignmentscore.DateGraded == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignmentscore.DateGraded = ((*String)(v))
      }
      }
      return s.gradingassignmentscore.DateGraded
    }
  func (s *GradingAssignmentScore) DateGraded_IsNil() bool {
    return s.DateGraded == nil || s.gradingassignmentscore.DateGraded == nil
    }
  func (s *GradingAssignmentScore) LocalCodeList() *LocalCodeListType {
    if s.gradingassignmentscore.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.gradingassignmentscore.LocalCodeList = v
      }
      }
      return s.gradingassignmentscore.LocalCodeList
    }
  func (s *GradingAssignmentScore) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.gradingassignmentscore.LocalCodeList == nil
    }
  func (s *GradingAssignmentScore) TeachingGroupRefId() *String {
    if s.gradingassignmentscore.TeachingGroupRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignmentscore.TeachingGroupRefId = ((*String)(v))
      }
      }
      return s.gradingassignmentscore.TeachingGroupRefId
    }
  func (s *GradingAssignmentScore) TeachingGroupRefId_IsNil() bool {
    return s.TeachingGroupRefId == nil || s.gradingassignmentscore.TeachingGroupRefId == nil
    }
  func (s *GradingAssignmentScore) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.gradingassignmentscore.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.gradingassignmentscore.SIF_ExtendedElements = v
      }
      }
      return s.gradingassignmentscore.SIF_ExtendedElements
    }
  func (s *GradingAssignmentScore) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.gradingassignmentscore.SIF_ExtendedElements == nil
    }
  func (s *GradingAssignmentScore) ExpectedScore() *Bool {
    if s.gradingassignmentscore.ExpectedScore == nil {
    if v, ok:= BoolPointer(false); ok {
      s.gradingassignmentscore.ExpectedScore = ((*Bool)(v))
      }
      }
      return s.gradingassignmentscore.ExpectedScore
    }
  func (s *GradingAssignmentScore) ExpectedScore_IsNil() bool {
    return s.ExpectedScore == nil || s.gradingassignmentscore.ExpectedScore == nil
    }
  func (s *GradingAssignmentScore) SchoolInfoRefId() *String {
    if s.gradingassignmentscore.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignmentscore.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.gradingassignmentscore.SchoolInfoRefId
    }
  func (s *GradingAssignmentScore) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.gradingassignmentscore.SchoolInfoRefId == nil
    }
  func (s *GradingAssignmentScore) StaffPersonalRefId() *String {
    if s.gradingassignmentscore.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignmentscore.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.gradingassignmentscore.StaffPersonalRefId
    }
  func (s *GradingAssignmentScore) StaffPersonalRefId_IsNil() bool {
    return s.StaffPersonalRefId == nil || s.gradingassignmentscore.StaffPersonalRefId == nil
    }
  func (s *GradingAssignmentScore) ScorePoints() *Int {
    if s.gradingassignmentscore.ScorePoints == nil {
    if v, ok:= IntPointer(0); ok {
      s.gradingassignmentscore.ScorePoints = ((*Int)(v))
      }
      }
      return s.gradingassignmentscore.ScorePoints
    }
  func (s *GradingAssignmentScore) ScorePoints_IsNil() bool {
    return s.ScorePoints == nil || s.gradingassignmentscore.ScorePoints == nil
    }
  func (s *GradingAssignmentScore) ScoreLetter() *String {
    if s.gradingassignmentscore.ScoreLetter == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignmentscore.ScoreLetter = ((*String)(v))
      }
      }
      return s.gradingassignmentscore.ScoreLetter
    }
  func (s *GradingAssignmentScore) ScoreLetter_IsNil() bool {
    return s.ScoreLetter == nil || s.gradingassignmentscore.ScoreLetter == nil
    }
  func (s *GradingAssignmentScore) SIF_Metadata() *SIF_MetadataType {
    if s.gradingassignmentscore.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.gradingassignmentscore.SIF_Metadata = v
      }
      }
      return s.gradingassignmentscore.SIF_Metadata
    }
  func (s *GradingAssignmentScore) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.gradingassignmentscore.SIF_Metadata == nil
    }
  func (s *GradingAssignmentScore) ScorePercent() *Float {
    if s.gradingassignmentscore.ScorePercent == nil {
    if v, ok:= FloatPointer(0); ok {
      s.gradingassignmentscore.ScorePercent = ((*Float)(v))
      }
      }
      return s.gradingassignmentscore.ScorePercent
    }
  func (s *GradingAssignmentScore) ScorePercent_IsNil() bool {
    return s.ScorePercent == nil || s.gradingassignmentscore.ScorePercent == nil
    }
  func (s *GradingAssignmentScore) ScoreDescription() *String {
    if s.gradingassignmentscore.ScoreDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignmentscore.ScoreDescription = ((*String)(v))
      }
      }
      return s.gradingassignmentscore.ScoreDescription
    }
  func (s *GradingAssignmentScore) ScoreDescription_IsNil() bool {
    return s.ScoreDescription == nil || s.gradingassignmentscore.ScoreDescription == nil
    }
  func (s *GradingAssignmentScore) SubscoreList() *NAPSubscoreListType {
    if s.gradingassignmentscore.SubscoreList == nil {
     if v, ok:= NAPSubscoreListTypePointer(NAPSubscoreListType{}); ok {
      s.gradingassignmentscore.SubscoreList = v
      }
      }
      return s.gradingassignmentscore.SubscoreList
    }
  func (s *GradingAssignmentScore) SubscoreList_IsNil() bool {
    return s.SubscoreList == nil || s.gradingassignmentscore.SubscoreList == nil
    }
  func (s *GradingAssignmentScore) AssignmentScoreIteration() *String {
    if s.gradingassignmentscore.AssignmentScoreIteration == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignmentscore.AssignmentScoreIteration = ((*String)(v))
      }
      }
      return s.gradingassignmentscore.AssignmentScoreIteration
    }
  func (s *GradingAssignmentScore) AssignmentScoreIteration_IsNil() bool {
    return s.AssignmentScoreIteration == nil || s.gradingassignmentscore.AssignmentScoreIteration == nil
    }
  func (s *GradingAssignmentScore) GradingAssignmentRefId() *String {
    if s.gradingassignmentscore.GradingAssignmentRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignmentscore.GradingAssignmentRefId = ((*String)(v))
      }
      }
      return s.gradingassignmentscore.GradingAssignmentRefId
    }
  func (s *GradingAssignmentScore) GradingAssignmentRefId_IsNil() bool {
    return s.GradingAssignmentRefId == nil || s.gradingassignmentscore.GradingAssignmentRefId == nil
    }
  func (s *GradingAssignmentScore) MarkInfoRefId() *String {
    if s.gradingassignmentscore.MarkInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignmentscore.MarkInfoRefId = ((*String)(v))
      }
      }
      return s.gradingassignmentscore.MarkInfoRefId
    }
  func (s *GradingAssignmentScore) MarkInfoRefId_IsNil() bool {
    return s.MarkInfoRefId == nil || s.gradingassignmentscore.MarkInfoRefId == nil
    }
  func (s *GradingAssignmentScore) StudentPersonalRefId() *String {
    if s.gradingassignmentscore.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignmentscore.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.gradingassignmentscore.StudentPersonalRefId
    }
  func (s *GradingAssignmentScore) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.gradingassignmentscore.StudentPersonalRefId == nil
    }
  func (s *GradingAssignmentScore) RefId() *RefIdType {
    if s.gradingassignmentscore.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignmentscore.RefId = ((*RefIdType)(v))
      }
      }
      return s.gradingassignmentscore.RefId
    }
  func (s *GradingAssignmentScore) RefId_IsNil() bool {
    return s.RefId == nil || s.gradingassignmentscore.RefId == nil
    }
  func (s *GradingAssignmentScore) TeacherJudgement() *String {
    if s.gradingassignmentscore.TeacherJudgement == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignmentscore.TeacherJudgement = ((*String)(v))
      }
      }
      return s.gradingassignmentscore.TeacherJudgement
    }
  func (s *GradingAssignmentScore) TeacherJudgement_IsNil() bool {
    return s.TeacherJudgement == nil || s.gradingassignmentscore.TeacherJudgement == nil
    }
  func (s *GradingAssignmentScore) StudentPersonalLocalId() *LocalIdType {
    if s.gradingassignmentscore.StudentPersonalLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignmentscore.StudentPersonalLocalId = ((*LocalIdType)(v))
      }
      }
      return s.gradingassignmentscore.StudentPersonalLocalId
    }
  func (s *GradingAssignmentScore) StudentPersonalLocalId_IsNil() bool {
    return s.StudentPersonalLocalId == nil || s.gradingassignmentscore.StudentPersonalLocalId == nil
    }

func (n *NAPTestletCodeFrameType) Unset(key string) *NAPTestletCodeFrameType {
        switch key {
  case "TestItemList":
   n.naptestletcodeframetype.TestItemList = nil
  case "TestletContent":
   n.naptestletcodeframetype.TestletContent = nil
  case "NAPTestletRefId":
   n.naptestletcodeframetype.NAPTestletRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletCodeFrameType")
        }
        return n
}

func (n *NAPTestletCodeFrameType) SetProperty(key string, value interface{}) *NAPTestletCodeFrameType {
        if n == nil {
                n, _ = NAPTestletCodeFrameTypePointer(NAPTestletCodeFrameType{})
        }
        switch key {
    case "TestItemList":
    if v, ok:= CodeFrameTestItemListTypePointer(value); ok {
      n.naptestletcodeframetype.TestItemList = v
      }
    case "TestletContent":
    if v, ok:= NAPTestletContentTypePointer(value); ok {
      n.naptestletcodeframetype.TestletContent = v
      }
    case "NAPTestletRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestletcodeframetype.NAPTestletRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletCodeFrameType")
        }
        return n
}

  func (s *NAPTestletCodeFrameType) TestItemList() *CodeFrameTestItemListType {
    if s.naptestletcodeframetype.TestItemList == nil {
     if v, ok:= CodeFrameTestItemListTypePointer(CodeFrameTestItemListType{}); ok {
      s.naptestletcodeframetype.TestItemList = v
      }
      }
      return s.naptestletcodeframetype.TestItemList
    }
  func (s *NAPTestletCodeFrameType) TestItemList_IsNil() bool {
    return s.TestItemList == nil || s.naptestletcodeframetype.TestItemList == nil
    }
  func (s *NAPTestletCodeFrameType) TestletContent() *NAPTestletContentType {
    if s.naptestletcodeframetype.TestletContent == nil {
     if v, ok:= NAPTestletContentTypePointer(NAPTestletContentType{}); ok {
      s.naptestletcodeframetype.TestletContent = v
      }
      }
      return s.naptestletcodeframetype.TestletContent
    }
  func (s *NAPTestletCodeFrameType) TestletContent_IsNil() bool {
    return s.TestletContent == nil || s.naptestletcodeframetype.TestletContent == nil
    }
  func (s *NAPTestletCodeFrameType) NAPTestletRefId() *String {
    if s.naptestletcodeframetype.NAPTestletRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestletcodeframetype.NAPTestletRefId = ((*String)(v))
      }
      }
      return s.naptestletcodeframetype.NAPTestletRefId
    }
  func (s *NAPTestletCodeFrameType) NAPTestletRefId_IsNil() bool {
    return s.NAPTestletRefId == nil || s.naptestletcodeframetype.NAPTestletRefId == nil
    }

func (n *ExpenseAccountType) Unset(key string) *ExpenseAccountType {
        switch key {
  case "AccountingPeriod":
   n.expenseaccounttype.AccountingPeriod = nil
  case "Amount":
   n.expenseaccounttype.Amount = nil
  case "FinancialAccountRefId":
   n.expenseaccounttype.FinancialAccountRefId = nil
  case "AccountCode":
   n.expenseaccounttype.AccountCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ExpenseAccountType")
        }
        return n
}

func (n *ExpenseAccountType) SetProperty(key string, value interface{}) *ExpenseAccountType {
        if n == nil {
                n, _ = ExpenseAccountTypePointer(ExpenseAccountType{})
        }
        switch key {
    case "AccountingPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.expenseaccounttype.AccountingPeriod = ((*LocalIdType)(v))
      }
    case "Amount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.expenseaccounttype.Amount = v
      }
    case "FinancialAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.expenseaccounttype.FinancialAccountRefId = ((*String)(v))
      }
    case "AccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.expenseaccounttype.AccountCode = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ExpenseAccountType")
        }
        return n
}

  func (s *ExpenseAccountType) AccountingPeriod() *LocalIdType {
    if s.expenseaccounttype.AccountingPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.expenseaccounttype.AccountingPeriod = ((*LocalIdType)(v))
      }
      }
      return s.expenseaccounttype.AccountingPeriod
    }
  func (s *ExpenseAccountType) AccountingPeriod_IsNil() bool {
    return s.AccountingPeriod == nil || s.expenseaccounttype.AccountingPeriod == nil
    }
  func (s *ExpenseAccountType) Amount() *MonetaryAmountType {
    if s.expenseaccounttype.Amount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.expenseaccounttype.Amount = v
      }
      }
      return s.expenseaccounttype.Amount
    }
  func (s *ExpenseAccountType) Amount_IsNil() bool {
    return s.Amount == nil || s.expenseaccounttype.Amount == nil
    }
  func (s *ExpenseAccountType) FinancialAccountRefId() *String {
    if s.expenseaccounttype.FinancialAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.expenseaccounttype.FinancialAccountRefId = ((*String)(v))
      }
      }
      return s.expenseaccounttype.FinancialAccountRefId
    }
  func (s *ExpenseAccountType) FinancialAccountRefId_IsNil() bool {
    return s.FinancialAccountRefId == nil || s.expenseaccounttype.FinancialAccountRefId == nil
    }
  func (s *ExpenseAccountType) AccountCode() *String {
    if s.expenseaccounttype.AccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.expenseaccounttype.AccountCode = ((*String)(v))
      }
      }
      return s.expenseaccounttype.AccountCode
    }
  func (s *ExpenseAccountType) AccountCode_IsNil() bool {
    return s.AccountCode == nil || s.expenseaccounttype.AccountCode == nil
    }

func (n *PersonalisedPlan) Unset(key string) *PersonalisedPlan {
        switch key {
  case "LocalId":
   n.personalisedplan.LocalId = nil
  case "AssociatedAttachment":
   n.personalisedplan.AssociatedAttachment = nil
  case "StudentPersonalRefId":
   n.personalisedplan.StudentPersonalRefId = nil
  case "RefId":
   n.personalisedplan.RefId = nil
  case "PersonalisedPlanEndDate":
   n.personalisedplan.PersonalisedPlanEndDate = nil
  case "SIF_Metadata":
   n.personalisedplan.SIF_Metadata = nil
  case "PersonalisedPlanNotes":
   n.personalisedplan.PersonalisedPlanNotes = nil
  case "PersonalisedPlanStartDate":
   n.personalisedplan.PersonalisedPlanStartDate = nil
  case "PersonalisedPlanCategory":
   n.personalisedplan.PersonalisedPlanCategory = nil
  case "DocumentList":
   n.personalisedplan.DocumentList = nil
  case "LocalCodeList":
   n.personalisedplan.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.personalisedplan.SIF_ExtendedElements = nil
  case "SchoolInfoRefId":
   n.personalisedplan.SchoolInfoRefId = nil
  case "PersonalisedPlanReviewDate":
   n.personalisedplan.PersonalisedPlanReviewDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonalisedPlan")
        }
        return n
}

func (n *PersonalisedPlan) SetProperty(key string, value interface{}) *PersonalisedPlan {
        if n == nil {
                n, _ = PersonalisedPlanPointer(PersonalisedPlan{})
        }
        switch key {
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.personalisedplan.LocalId = ((*LocalIdType)(v))
      }
    case "AssociatedAttachment":
    
    if v, ok:= StringPointer(value); ok {
      n.personalisedplan.AssociatedAttachment = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.personalisedplan.StudentPersonalRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.personalisedplan.RefId = ((*RefIdType)(v))
      }
    case "PersonalisedPlanEndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.personalisedplan.PersonalisedPlanEndDate = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.personalisedplan.SIF_Metadata = v
      }
    case "PersonalisedPlanNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.personalisedplan.PersonalisedPlanNotes = ((*String)(v))
      }
    case "PersonalisedPlanStartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.personalisedplan.PersonalisedPlanStartDate = ((*String)(v))
      }
    case "PersonalisedPlanCategory":
        if !CodesetContains(AUCodeSetsPersonalisedPlanType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsPersonalisedPlanType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.personalisedplan.PersonalisedPlanCategory = ((*AUCodeSetsPersonalisedPlanType)(v))
      }
    case "DocumentList":
    if v, ok:= WellbeingDocumentListTypePointer(value); ok {
      n.personalisedplan.DocumentList = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.personalisedplan.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.personalisedplan.SIF_ExtendedElements = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.personalisedplan.SchoolInfoRefId = ((*String)(v))
      }
    case "PersonalisedPlanReviewDate":
    
    if v, ok:= StringPointer(value); ok {
      n.personalisedplan.PersonalisedPlanReviewDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonalisedPlan")
        }
        return n
}

  func (s *PersonalisedPlan) LocalId() *LocalIdType {
    if s.personalisedplan.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.personalisedplan.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.personalisedplan.LocalId
    }
  func (s *PersonalisedPlan) LocalId_IsNil() bool {
    return s.LocalId == nil || s.personalisedplan.LocalId == nil
    }
  func (s *PersonalisedPlan) AssociatedAttachment() *String {
    if s.personalisedplan.AssociatedAttachment == nil {
    if v, ok:= StringPointer(""); ok {
      s.personalisedplan.AssociatedAttachment = ((*String)(v))
      }
      }
      return s.personalisedplan.AssociatedAttachment
    }
  func (s *PersonalisedPlan) AssociatedAttachment_IsNil() bool {
    return s.AssociatedAttachment == nil || s.personalisedplan.AssociatedAttachment == nil
    }
  func (s *PersonalisedPlan) StudentPersonalRefId() *String {
    if s.personalisedplan.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.personalisedplan.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.personalisedplan.StudentPersonalRefId
    }
  func (s *PersonalisedPlan) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.personalisedplan.StudentPersonalRefId == nil
    }
  func (s *PersonalisedPlan) RefId() *RefIdType {
    if s.personalisedplan.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.personalisedplan.RefId = ((*RefIdType)(v))
      }
      }
      return s.personalisedplan.RefId
    }
  func (s *PersonalisedPlan) RefId_IsNil() bool {
    return s.RefId == nil || s.personalisedplan.RefId == nil
    }
  func (s *PersonalisedPlan) PersonalisedPlanEndDate() *String {
    if s.personalisedplan.PersonalisedPlanEndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.personalisedplan.PersonalisedPlanEndDate = ((*String)(v))
      }
      }
      return s.personalisedplan.PersonalisedPlanEndDate
    }
  func (s *PersonalisedPlan) PersonalisedPlanEndDate_IsNil() bool {
    return s.PersonalisedPlanEndDate == nil || s.personalisedplan.PersonalisedPlanEndDate == nil
    }
  func (s *PersonalisedPlan) SIF_Metadata() *SIF_MetadataType {
    if s.personalisedplan.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.personalisedplan.SIF_Metadata = v
      }
      }
      return s.personalisedplan.SIF_Metadata
    }
  func (s *PersonalisedPlan) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.personalisedplan.SIF_Metadata == nil
    }
  func (s *PersonalisedPlan) PersonalisedPlanNotes() *String {
    if s.personalisedplan.PersonalisedPlanNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.personalisedplan.PersonalisedPlanNotes = ((*String)(v))
      }
      }
      return s.personalisedplan.PersonalisedPlanNotes
    }
  func (s *PersonalisedPlan) PersonalisedPlanNotes_IsNil() bool {
    return s.PersonalisedPlanNotes == nil || s.personalisedplan.PersonalisedPlanNotes == nil
    }
  func (s *PersonalisedPlan) PersonalisedPlanStartDate() *String {
    if s.personalisedplan.PersonalisedPlanStartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.personalisedplan.PersonalisedPlanStartDate = ((*String)(v))
      }
      }
      return s.personalisedplan.PersonalisedPlanStartDate
    }
  func (s *PersonalisedPlan) PersonalisedPlanStartDate_IsNil() bool {
    return s.PersonalisedPlanStartDate == nil || s.personalisedplan.PersonalisedPlanStartDate == nil
    }
  func (s *PersonalisedPlan) PersonalisedPlanCategory() *AUCodeSetsPersonalisedPlanType {
    if s.personalisedplan.PersonalisedPlanCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.personalisedplan.PersonalisedPlanCategory = ((*AUCodeSetsPersonalisedPlanType)(v))
      }
      }
      return s.personalisedplan.PersonalisedPlanCategory
    }
  func (s *PersonalisedPlan) PersonalisedPlanCategory_IsNil() bool {
    return s.PersonalisedPlanCategory == nil || s.personalisedplan.PersonalisedPlanCategory == nil
    }
  func (s *PersonalisedPlan) DocumentList() *WellbeingDocumentListType {
    if s.personalisedplan.DocumentList == nil {
     if v, ok:= WellbeingDocumentListTypePointer(WellbeingDocumentListType{}); ok {
      s.personalisedplan.DocumentList = v
      }
      }
      return s.personalisedplan.DocumentList
    }
  func (s *PersonalisedPlan) DocumentList_IsNil() bool {
    return s.DocumentList == nil || s.personalisedplan.DocumentList == nil
    }
  func (s *PersonalisedPlan) LocalCodeList() *LocalCodeListType {
    if s.personalisedplan.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.personalisedplan.LocalCodeList = v
      }
      }
      return s.personalisedplan.LocalCodeList
    }
  func (s *PersonalisedPlan) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.personalisedplan.LocalCodeList == nil
    }
  func (s *PersonalisedPlan) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.personalisedplan.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.personalisedplan.SIF_ExtendedElements = v
      }
      }
      return s.personalisedplan.SIF_ExtendedElements
    }
  func (s *PersonalisedPlan) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.personalisedplan.SIF_ExtendedElements == nil
    }
  func (s *PersonalisedPlan) SchoolInfoRefId() *String {
    if s.personalisedplan.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.personalisedplan.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.personalisedplan.SchoolInfoRefId
    }
  func (s *PersonalisedPlan) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.personalisedplan.SchoolInfoRefId == nil
    }
  func (s *PersonalisedPlan) PersonalisedPlanReviewDate() *String {
    if s.personalisedplan.PersonalisedPlanReviewDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.personalisedplan.PersonalisedPlanReviewDate = ((*String)(v))
      }
      }
      return s.personalisedplan.PersonalisedPlanReviewDate
    }
  func (s *PersonalisedPlan) PersonalisedPlanReviewDate_IsNil() bool {
    return s.PersonalisedPlanReviewDate == nil || s.personalisedplan.PersonalisedPlanReviewDate == nil
    }

func (n *StudentContactRelationship) Unset(key string) *StudentContactRelationship {
        switch key {
  case "SIF_ExtendedElements":
   n.studentcontactrelationship.SIF_ExtendedElements = nil
  case "ContactFlags":
   n.studentcontactrelationship.ContactFlags = nil
  case "Relationship":
   n.studentcontactrelationship.Relationship = nil
  case "LocalCodeList":
   n.studentcontactrelationship.LocalCodeList = nil
  case "ContactSequence":
   n.studentcontactrelationship.ContactSequence = nil
  case "SchoolInfoRefId":
   n.studentcontactrelationship.SchoolInfoRefId = nil
  case "StudentContactPersonalRefId":
   n.studentcontactrelationship.StudentContactPersonalRefId = nil
  case "HouseholdList":
   n.studentcontactrelationship.HouseholdList = nil
  case "SIF_Metadata":
   n.studentcontactrelationship.SIF_Metadata = nil
  case "ContactSequenceSource":
   n.studentcontactrelationship.ContactSequenceSource = nil
  case "ParentRelationshipStatus":
   n.studentcontactrelationship.ParentRelationshipStatus = nil
  case "StudentPersonalRefId":
   n.studentcontactrelationship.StudentPersonalRefId = nil
  case "StudentContactRelationshipRefId":
   n.studentcontactrelationship.StudentContactRelationshipRefId = nil
  case "MainlySpeaksEnglishAtHome":
   n.studentcontactrelationship.MainlySpeaksEnglishAtHome = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentContactRelationship")
        }
        return n
}

func (n *StudentContactRelationship) SetProperty(key string, value interface{}) *StudentContactRelationship {
        if n == nil {
                n, _ = StudentContactRelationshipPointer(StudentContactRelationship{})
        }
        switch key {
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentcontactrelationship.SIF_ExtendedElements = v
      }
    case "ContactFlags":
    if v, ok:= ContactFlagsTypePointer(value); ok {
      n.studentcontactrelationship.ContactFlags = v
      }
    case "Relationship":
    if v, ok:= RelationshipTypePointer(value); ok {
      n.studentcontactrelationship.Relationship = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentcontactrelationship.LocalCodeList = v
      }
    case "ContactSequence":
    
    if v, ok:= IntPointer(value); ok {
      n.studentcontactrelationship.ContactSequence = ((*Int)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentcontactrelationship.SchoolInfoRefId = ((*String)(v))
      }
    case "StudentContactPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentcontactrelationship.StudentContactPersonalRefId = ((*RefIdType)(v))
      }
    case "HouseholdList":
    if v, ok:= HouseholdListTypePointer(value); ok {
      n.studentcontactrelationship.HouseholdList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentcontactrelationship.SIF_Metadata = v
      }
    case "ContactSequenceSource":
        if !CodesetContains(AUCodeSetsSourceCodeTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSourceCodeTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentcontactrelationship.ContactSequenceSource = ((*AUCodeSetsSourceCodeTypeType)(v))
      }
    case "ParentRelationshipStatus":
    
    if v, ok:= StringPointer(value); ok {
      n.studentcontactrelationship.ParentRelationshipStatus = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentcontactrelationship.StudentPersonalRefId = ((*RefIdType)(v))
      }
    case "StudentContactRelationshipRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentcontactrelationship.StudentContactRelationshipRefId = ((*String)(v))
      }
    case "MainlySpeaksEnglishAtHome":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentcontactrelationship.MainlySpeaksEnglishAtHome = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentContactRelationship")
        }
        return n
}

  func (s *StudentContactRelationship) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentcontactrelationship.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentcontactrelationship.SIF_ExtendedElements = v
      }
      }
      return s.studentcontactrelationship.SIF_ExtendedElements
    }
  func (s *StudentContactRelationship) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentcontactrelationship.SIF_ExtendedElements == nil
    }
  func (s *StudentContactRelationship) ContactFlags() *ContactFlagsType {
    if s.studentcontactrelationship.ContactFlags == nil {
     if v, ok:= ContactFlagsTypePointer(ContactFlagsType{}); ok {
      s.studentcontactrelationship.ContactFlags = v
      }
      }
      return s.studentcontactrelationship.ContactFlags
    }
  func (s *StudentContactRelationship) ContactFlags_IsNil() bool {
    return s.ContactFlags == nil || s.studentcontactrelationship.ContactFlags == nil
    }
  func (s *StudentContactRelationship) Relationship() *RelationshipType {
    if s.studentcontactrelationship.Relationship == nil {
     if v, ok:= RelationshipTypePointer(RelationshipType{}); ok {
      s.studentcontactrelationship.Relationship = v
      }
      }
      return s.studentcontactrelationship.Relationship
    }
  func (s *StudentContactRelationship) Relationship_IsNil() bool {
    return s.Relationship == nil || s.studentcontactrelationship.Relationship == nil
    }
  func (s *StudentContactRelationship) LocalCodeList() *LocalCodeListType {
    if s.studentcontactrelationship.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentcontactrelationship.LocalCodeList = v
      }
      }
      return s.studentcontactrelationship.LocalCodeList
    }
  func (s *StudentContactRelationship) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentcontactrelationship.LocalCodeList == nil
    }
  func (s *StudentContactRelationship) ContactSequence() *Int {
    if s.studentcontactrelationship.ContactSequence == nil {
    if v, ok:= IntPointer(0); ok {
      s.studentcontactrelationship.ContactSequence = ((*Int)(v))
      }
      }
      return s.studentcontactrelationship.ContactSequence
    }
  func (s *StudentContactRelationship) ContactSequence_IsNil() bool {
    return s.ContactSequence == nil || s.studentcontactrelationship.ContactSequence == nil
    }
  func (s *StudentContactRelationship) SchoolInfoRefId() *String {
    if s.studentcontactrelationship.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentcontactrelationship.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.studentcontactrelationship.SchoolInfoRefId
    }
  func (s *StudentContactRelationship) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.studentcontactrelationship.SchoolInfoRefId == nil
    }
  func (s *StudentContactRelationship) StudentContactPersonalRefId() *RefIdType {
    if s.studentcontactrelationship.StudentContactPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentcontactrelationship.StudentContactPersonalRefId = ((*RefIdType)(v))
      }
      }
      return s.studentcontactrelationship.StudentContactPersonalRefId
    }
  func (s *StudentContactRelationship) StudentContactPersonalRefId_IsNil() bool {
    return s.StudentContactPersonalRefId == nil || s.studentcontactrelationship.StudentContactPersonalRefId == nil
    }
  func (s *StudentContactRelationship) HouseholdList() *HouseholdListType {
    if s.studentcontactrelationship.HouseholdList == nil {
     if v, ok:= HouseholdListTypePointer(HouseholdListType{}); ok {
      s.studentcontactrelationship.HouseholdList = v
      }
      }
      return s.studentcontactrelationship.HouseholdList
    }
  func (s *StudentContactRelationship) HouseholdList_IsNil() bool {
    return s.HouseholdList == nil || s.studentcontactrelationship.HouseholdList == nil
    }
  func (s *StudentContactRelationship) SIF_Metadata() *SIF_MetadataType {
    if s.studentcontactrelationship.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentcontactrelationship.SIF_Metadata = v
      }
      }
      return s.studentcontactrelationship.SIF_Metadata
    }
  func (s *StudentContactRelationship) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentcontactrelationship.SIF_Metadata == nil
    }
  func (s *StudentContactRelationship) ContactSequenceSource() *AUCodeSetsSourceCodeTypeType {
    if s.studentcontactrelationship.ContactSequenceSource == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentcontactrelationship.ContactSequenceSource = ((*AUCodeSetsSourceCodeTypeType)(v))
      }
      }
      return s.studentcontactrelationship.ContactSequenceSource
    }
  func (s *StudentContactRelationship) ContactSequenceSource_IsNil() bool {
    return s.ContactSequenceSource == nil || s.studentcontactrelationship.ContactSequenceSource == nil
    }
  func (s *StudentContactRelationship) ParentRelationshipStatus() *String {
    if s.studentcontactrelationship.ParentRelationshipStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentcontactrelationship.ParentRelationshipStatus = ((*String)(v))
      }
      }
      return s.studentcontactrelationship.ParentRelationshipStatus
    }
  func (s *StudentContactRelationship) ParentRelationshipStatus_IsNil() bool {
    return s.ParentRelationshipStatus == nil || s.studentcontactrelationship.ParentRelationshipStatus == nil
    }
  func (s *StudentContactRelationship) StudentPersonalRefId() *RefIdType {
    if s.studentcontactrelationship.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentcontactrelationship.StudentPersonalRefId = ((*RefIdType)(v))
      }
      }
      return s.studentcontactrelationship.StudentPersonalRefId
    }
  func (s *StudentContactRelationship) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.studentcontactrelationship.StudentPersonalRefId == nil
    }
  func (s *StudentContactRelationship) StudentContactRelationshipRefId() *String {
    if s.studentcontactrelationship.StudentContactRelationshipRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentcontactrelationship.StudentContactRelationshipRefId = ((*String)(v))
      }
      }
      return s.studentcontactrelationship.StudentContactRelationshipRefId
    }
  func (s *StudentContactRelationship) StudentContactRelationshipRefId_IsNil() bool {
    return s.StudentContactRelationshipRefId == nil || s.studentcontactrelationship.StudentContactRelationshipRefId == nil
    }
  func (s *StudentContactRelationship) MainlySpeaksEnglishAtHome() *AUCodeSetsYesOrNoCategoryType {
    if s.studentcontactrelationship.MainlySpeaksEnglishAtHome == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentcontactrelationship.MainlySpeaksEnglishAtHome = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentcontactrelationship.MainlySpeaksEnglishAtHome
    }
  func (s *StudentContactRelationship) MainlySpeaksEnglishAtHome_IsNil() bool {
    return s.MainlySpeaksEnglishAtHome == nil || s.studentcontactrelationship.MainlySpeaksEnglishAtHome == nil
    }

func (n *CalendarDate) Unset(key string) *CalendarDate {
        switch key {
  case "CalendarDateRefId":
   n.calendardate.CalendarDateRefId = nil
  case "CalendarSummaryRefId":
   n.calendardate.CalendarSummaryRefId = nil
  case "SIF_Metadata":
   n.calendardate.SIF_Metadata = nil
  case "CalendarDateNumber":
   n.calendardate.CalendarDateNumber = nil
  case "SchoolInfoRefId":
   n.calendardate.SchoolInfoRefId = nil
  case "TeacherAttendance":
   n.calendardate.TeacherAttendance = nil
  case "SchoolYear":
   n.calendardate.SchoolYear = nil
  case "AdministratorAttendance":
   n.calendardate.AdministratorAttendance = nil
  case "SIF_ExtendedElements":
   n.calendardate.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.calendardate.LocalCodeList = nil
  case "StudentAttendance":
   n.calendardate.StudentAttendance = nil
  case "Date":
   n.calendardate.Date = nil
  case "CalendarDateType":
   n.calendardate.CalendarDateType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CalendarDate")
        }
        return n
}

func (n *CalendarDate) SetProperty(key string, value interface{}) *CalendarDate {
        if n == nil {
                n, _ = CalendarDatePointer(CalendarDate{})
        }
        switch key {
    case "CalendarDateRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.calendardate.CalendarDateRefId = ((*String)(v))
      }
    case "CalendarSummaryRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.calendardate.CalendarSummaryRefId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.calendardate.SIF_Metadata = v
      }
    case "CalendarDateNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.calendardate.CalendarDateNumber = ((*Int)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.calendardate.SchoolInfoRefId = ((*String)(v))
      }
    case "TeacherAttendance":
    if v, ok:= AttendanceInfoTypePointer(value); ok {
      n.calendardate.TeacherAttendance = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.calendardate.SchoolYear = ((*SchoolYearType)(v))
      }
    case "AdministratorAttendance":
    if v, ok:= AttendanceInfoTypePointer(value); ok {
      n.calendardate.AdministratorAttendance = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.calendardate.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.calendardate.LocalCodeList = v
      }
    case "StudentAttendance":
    if v, ok:= AttendanceInfoTypePointer(value); ok {
      n.calendardate.StudentAttendance = v
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.calendardate.Date = ((*String)(v))
      }
    case "CalendarDateType":
    if v, ok:= CalendarDateInfoTypePointer(value); ok {
      n.calendardate.CalendarDateType = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CalendarDate")
        }
        return n
}

  func (s *CalendarDate) CalendarDateRefId() *String {
    if s.calendardate.CalendarDateRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendardate.CalendarDateRefId = ((*String)(v))
      }
      }
      return s.calendardate.CalendarDateRefId
    }
  func (s *CalendarDate) CalendarDateRefId_IsNil() bool {
    return s.CalendarDateRefId == nil || s.calendardate.CalendarDateRefId == nil
    }
  func (s *CalendarDate) CalendarSummaryRefId() *String {
    if s.calendardate.CalendarSummaryRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendardate.CalendarSummaryRefId = ((*String)(v))
      }
      }
      return s.calendardate.CalendarSummaryRefId
    }
  func (s *CalendarDate) CalendarSummaryRefId_IsNil() bool {
    return s.CalendarSummaryRefId == nil || s.calendardate.CalendarSummaryRefId == nil
    }
  func (s *CalendarDate) SIF_Metadata() *SIF_MetadataType {
    if s.calendardate.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.calendardate.SIF_Metadata = v
      }
      }
      return s.calendardate.SIF_Metadata
    }
  func (s *CalendarDate) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.calendardate.SIF_Metadata == nil
    }
  func (s *CalendarDate) CalendarDateNumber() *Int {
    if s.calendardate.CalendarDateNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.calendardate.CalendarDateNumber = ((*Int)(v))
      }
      }
      return s.calendardate.CalendarDateNumber
    }
  func (s *CalendarDate) CalendarDateNumber_IsNil() bool {
    return s.CalendarDateNumber == nil || s.calendardate.CalendarDateNumber == nil
    }
  func (s *CalendarDate) SchoolInfoRefId() *String {
    if s.calendardate.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendardate.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.calendardate.SchoolInfoRefId
    }
  func (s *CalendarDate) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.calendardate.SchoolInfoRefId == nil
    }
  func (s *CalendarDate) TeacherAttendance() *AttendanceInfoType {
    if s.calendardate.TeacherAttendance == nil {
     if v, ok:= AttendanceInfoTypePointer(AttendanceInfoType{}); ok {
      s.calendardate.TeacherAttendance = v
      }
      }
      return s.calendardate.TeacherAttendance
    }
  func (s *CalendarDate) TeacherAttendance_IsNil() bool {
    return s.TeacherAttendance == nil || s.calendardate.TeacherAttendance == nil
    }
  func (s *CalendarDate) SchoolYear() *SchoolYearType {
    if s.calendardate.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendardate.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.calendardate.SchoolYear
    }
  func (s *CalendarDate) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.calendardate.SchoolYear == nil
    }
  func (s *CalendarDate) AdministratorAttendance() *AttendanceInfoType {
    if s.calendardate.AdministratorAttendance == nil {
     if v, ok:= AttendanceInfoTypePointer(AttendanceInfoType{}); ok {
      s.calendardate.AdministratorAttendance = v
      }
      }
      return s.calendardate.AdministratorAttendance
    }
  func (s *CalendarDate) AdministratorAttendance_IsNil() bool {
    return s.AdministratorAttendance == nil || s.calendardate.AdministratorAttendance == nil
    }
  func (s *CalendarDate) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.calendardate.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.calendardate.SIF_ExtendedElements = v
      }
      }
      return s.calendardate.SIF_ExtendedElements
    }
  func (s *CalendarDate) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.calendardate.SIF_ExtendedElements == nil
    }
  func (s *CalendarDate) LocalCodeList() *LocalCodeListType {
    if s.calendardate.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.calendardate.LocalCodeList = v
      }
      }
      return s.calendardate.LocalCodeList
    }
  func (s *CalendarDate) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.calendardate.LocalCodeList == nil
    }
  func (s *CalendarDate) StudentAttendance() *AttendanceInfoType {
    if s.calendardate.StudentAttendance == nil {
     if v, ok:= AttendanceInfoTypePointer(AttendanceInfoType{}); ok {
      s.calendardate.StudentAttendance = v
      }
      }
      return s.calendardate.StudentAttendance
    }
  func (s *CalendarDate) StudentAttendance_IsNil() bool {
    return s.StudentAttendance == nil || s.calendardate.StudentAttendance == nil
    }
  func (s *CalendarDate) Date() *String {
    if s.calendardate.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.calendardate.Date = ((*String)(v))
      }
      }
      return s.calendardate.Date
    }
  func (s *CalendarDate) Date_IsNil() bool {
    return s.Date == nil || s.calendardate.Date == nil
    }
  func (s *CalendarDate) CalendarDateType() *CalendarDateInfoType {
    if s.calendardate.CalendarDateType == nil {
     if v, ok:= CalendarDateInfoTypePointer(CalendarDateInfoType{}); ok {
      s.calendardate.CalendarDateType = v
      }
      }
      return s.calendardate.CalendarDateType
    }
  func (s *CalendarDate) CalendarDateType_IsNil() bool {
    return s.CalendarDateType == nil || s.calendardate.CalendarDateType == nil
    }

func (n *AssignmentScoreType) Unset(key string) *AssignmentScoreType {
        switch key {
  case "GradingAssignmentScoreRefId":
   n.assignmentscoretype.GradingAssignmentScoreRefId = nil
  case "Weight":
   n.assignmentscoretype.Weight = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AssignmentScoreType")
        }
        return n
}

func (n *AssignmentScoreType) SetProperty(key string, value interface{}) *AssignmentScoreType {
        if n == nil {
                n, _ = AssignmentScoreTypePointer(AssignmentScoreType{})
        }
        switch key {
    case "GradingAssignmentScoreRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.assignmentscoretype.GradingAssignmentScoreRefId = ((*String)(v))
      }
    case "Weight":
    
    if v, ok:= FloatPointer(value); ok {
      n.assignmentscoretype.Weight = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AssignmentScoreType")
        }
        return n
}

  func (s *AssignmentScoreType) GradingAssignmentScoreRefId() *String {
    if s.assignmentscoretype.GradingAssignmentScoreRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.assignmentscoretype.GradingAssignmentScoreRefId = ((*String)(v))
      }
      }
      return s.assignmentscoretype.GradingAssignmentScoreRefId
    }
  func (s *AssignmentScoreType) GradingAssignmentScoreRefId_IsNil() bool {
    return s.GradingAssignmentScoreRefId == nil || s.assignmentscoretype.GradingAssignmentScoreRefId == nil
    }
  func (s *AssignmentScoreType) Weight() *Float {
    if s.assignmentscoretype.Weight == nil {
    if v, ok:= FloatPointer(0); ok {
      s.assignmentscoretype.Weight = ((*Float)(v))
      }
      }
      return s.assignmentscoretype.Weight
    }
  func (s *AssignmentScoreType) Weight_IsNil() bool {
    return s.Weight == nil || s.assignmentscoretype.Weight == nil
    }

func (n *PhoneNumberType) Unset(key string) *PhoneNumberType {
        switch key {
  case "Preference":
   n.phonenumbertype.Preference = nil
  case "ListedStatus":
   n.phonenumbertype.ListedStatus = nil
  case "Type":
   n.phonenumbertype.Type = nil
  case "Extension":
   n.phonenumbertype.Extension = nil
  case "Number":
   n.phonenumbertype.Number = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PhoneNumberType")
        }
        return n
}

func (n *PhoneNumberType) SetProperty(key string, value interface{}) *PhoneNumberType {
        if n == nil {
                n, _ = PhoneNumberTypePointer(PhoneNumberType{})
        }
        switch key {
    case "Preference":
    
    if v, ok:= IntPointer(value); ok {
      n.phonenumbertype.Preference = ((*Int)(v))
      }
    case "ListedStatus":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.phonenumbertype.ListedStatus = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Type":
        if !CodesetContains(AUCodeSetsTelephoneNumberTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsTelephoneNumberTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.phonenumbertype.Type = ((*AUCodeSetsTelephoneNumberTypeType)(v))
      }
    case "Extension":
    
    if v, ok:= StringPointer(value); ok {
      n.phonenumbertype.Extension = ((*String)(v))
      }
    case "Number":
    
    if v, ok:= StringPointer(value); ok {
      n.phonenumbertype.Number = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PhoneNumberType")
        }
        return n
}

  func (s *PhoneNumberType) Preference() *Int {
    if s.phonenumbertype.Preference == nil {
    if v, ok:= IntPointer(0); ok {
      s.phonenumbertype.Preference = ((*Int)(v))
      }
      }
      return s.phonenumbertype.Preference
    }
  func (s *PhoneNumberType) Preference_IsNil() bool {
    return s.Preference == nil || s.phonenumbertype.Preference == nil
    }
  func (s *PhoneNumberType) ListedStatus() *AUCodeSetsYesOrNoCategoryType {
    if s.phonenumbertype.ListedStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.phonenumbertype.ListedStatus = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.phonenumbertype.ListedStatus
    }
  func (s *PhoneNumberType) ListedStatus_IsNil() bool {
    return s.ListedStatus == nil || s.phonenumbertype.ListedStatus == nil
    }
  func (s *PhoneNumberType) Type() *AUCodeSetsTelephoneNumberTypeType {
    if s.phonenumbertype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.phonenumbertype.Type = ((*AUCodeSetsTelephoneNumberTypeType)(v))
      }
      }
      return s.phonenumbertype.Type
    }
  func (s *PhoneNumberType) Type_IsNil() bool {
    return s.Type == nil || s.phonenumbertype.Type == nil
    }
  func (s *PhoneNumberType) Extension() *String {
    if s.phonenumbertype.Extension == nil {
    if v, ok:= StringPointer(""); ok {
      s.phonenumbertype.Extension = ((*String)(v))
      }
      }
      return s.phonenumbertype.Extension
    }
  func (s *PhoneNumberType) Extension_IsNil() bool {
    return s.Extension == nil || s.phonenumbertype.Extension == nil
    }
  func (s *PhoneNumberType) Number() *String {
    if s.phonenumbertype.Number == nil {
    if v, ok:= StringPointer(""); ok {
      s.phonenumbertype.Number = ((*String)(v))
      }
      }
      return s.phonenumbertype.Number
    }
  func (s *PhoneNumberType) Number_IsNil() bool {
    return s.Number == nil || s.phonenumbertype.Number == nil
    }

func (n *StudentExitContainerType) Unset(key string) *StudentExitContainerType {
        switch key {
  case "OtherCodeList":
   n.studentexitcontainertype.OtherCodeList = nil
  case "Code":
   n.studentexitcontainertype.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentExitContainerType")
        }
        return n
}

func (n *StudentExitContainerType) SetProperty(key string, value interface{}) *StudentExitContainerType {
        if n == nil {
                n, _ = StudentExitContainerTypePointer(StudentExitContainerType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.studentexitcontainertype.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsExitWithdrawalTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsExitWithdrawalTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentexitcontainertype.Code = ((*AUCodeSetsExitWithdrawalTypeType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentExitContainerType")
        }
        return n
}

  func (s *StudentExitContainerType) OtherCodeList() *OtherCodeListType {
    if s.studentexitcontainertype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.studentexitcontainertype.OtherCodeList = v
      }
      }
      return s.studentexitcontainertype.OtherCodeList
    }
  func (s *StudentExitContainerType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.studentexitcontainertype.OtherCodeList == nil
    }
  func (s *StudentExitContainerType) Code() *AUCodeSetsExitWithdrawalTypeType {
    if s.studentexitcontainertype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentexitcontainertype.Code = ((*AUCodeSetsExitWithdrawalTypeType)(v))
      }
      }
      return s.studentexitcontainertype.Code
    }
  func (s *StudentExitContainerType) Code_IsNil() bool {
    return s.Code == nil || s.studentexitcontainertype.Code == nil
    }

func (n *YearRangeType) Unset(key string) *YearRangeType {
        switch key {
  case "End":
   n.yearrangetype.End = nil
  case "Start":
   n.yearrangetype.Start = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "YearRangeType")
        }
        return n
}

func (n *YearRangeType) SetProperty(key string, value interface{}) *YearRangeType {
        if n == nil {
                n, _ = YearRangeTypePointer(YearRangeType{})
        }
        switch key {
    case "End":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.yearrangetype.End = v
      }
    case "Start":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.yearrangetype.Start = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "YearRangeType")
        }
        return n
}

  func (s *YearRangeType) End() *YearLevelType {
    if s.yearrangetype.End == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.yearrangetype.End = v
      }
      }
      return s.yearrangetype.End
    }
  func (s *YearRangeType) End_IsNil() bool {
    return s.End == nil || s.yearrangetype.End == nil
    }
  func (s *YearRangeType) Start() *YearLevelType {
    if s.yearrangetype.Start == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.yearrangetype.Start = v
      }
      }
      return s.yearrangetype.Start
    }
  func (s *YearRangeType) Start_IsNil() bool {
    return s.Start == nil || s.yearrangetype.Start == nil
    }

func (n *LibraryTransactionType) Unset(key string) *LibraryTransactionType {
        switch key {
  case "ItemInfo":
   n.librarytransactiontype.ItemInfo = nil
  case "FineInfoList":
   n.librarytransactiontype.FineInfoList = nil
  case "HoldInfoList":
   n.librarytransactiontype.HoldInfoList = nil
  case "CheckoutInfo":
   n.librarytransactiontype.CheckoutInfo = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryTransactionType")
        }
        return n
}

func (n *LibraryTransactionType) SetProperty(key string, value interface{}) *LibraryTransactionType {
        if n == nil {
                n, _ = LibraryTransactionTypePointer(LibraryTransactionType{})
        }
        switch key {
    case "ItemInfo":
    if v, ok:= LibraryItemInfoTypePointer(value); ok {
      n.librarytransactiontype.ItemInfo = v
      }
    case "FineInfoList":
    if v, ok:= FineInfoListTypePointer(value); ok {
      n.librarytransactiontype.FineInfoList = v
      }
    case "HoldInfoList":
    if v, ok:= HoldInfoListTypePointer(value); ok {
      n.librarytransactiontype.HoldInfoList = v
      }
    case "CheckoutInfo":
    if v, ok:= CheckoutInfoTypePointer(value); ok {
      n.librarytransactiontype.CheckoutInfo = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryTransactionType")
        }
        return n
}

  func (s *LibraryTransactionType) ItemInfo() *LibraryItemInfoType {
    if s.librarytransactiontype.ItemInfo == nil {
     if v, ok:= LibraryItemInfoTypePointer(LibraryItemInfoType{}); ok {
      s.librarytransactiontype.ItemInfo = v
      }
      }
      return s.librarytransactiontype.ItemInfo
    }
  func (s *LibraryTransactionType) ItemInfo_IsNil() bool {
    return s.ItemInfo == nil || s.librarytransactiontype.ItemInfo == nil
    }
  func (s *LibraryTransactionType) FineInfoList() *FineInfoListType {
    if s.librarytransactiontype.FineInfoList == nil {
     if v, ok:= FineInfoListTypePointer(FineInfoListType{}); ok {
      s.librarytransactiontype.FineInfoList = v
      }
      }
      return s.librarytransactiontype.FineInfoList
    }
  func (s *LibraryTransactionType) FineInfoList_IsNil() bool {
    return s.FineInfoList == nil || s.librarytransactiontype.FineInfoList == nil
    }
  func (s *LibraryTransactionType) HoldInfoList() *HoldInfoListType {
    if s.librarytransactiontype.HoldInfoList == nil {
     if v, ok:= HoldInfoListTypePointer(HoldInfoListType{}); ok {
      s.librarytransactiontype.HoldInfoList = v
      }
      }
      return s.librarytransactiontype.HoldInfoList
    }
  func (s *LibraryTransactionType) HoldInfoList_IsNil() bool {
    return s.HoldInfoList == nil || s.librarytransactiontype.HoldInfoList == nil
    }
  func (s *LibraryTransactionType) CheckoutInfo() *CheckoutInfoType {
    if s.librarytransactiontype.CheckoutInfo == nil {
     if v, ok:= CheckoutInfoTypePointer(CheckoutInfoType{}); ok {
      s.librarytransactiontype.CheckoutInfo = v
      }
      }
      return s.librarytransactiontype.CheckoutInfo
    }
  func (s *LibraryTransactionType) CheckoutInfo_IsNil() bool {
    return s.CheckoutInfo == nil || s.librarytransactiontype.CheckoutInfo == nil
    }

func (n *GradingAssignment) Unset(key string) *GradingAssignment {
        switch key {
  case "AssignmentPurpose":
   n.gradingassignment.AssignmentPurpose = nil
  case "SubAssignmentList":
   n.gradingassignment.SubAssignmentList = nil
  case "CreateDate":
   n.gradingassignment.CreateDate = nil
  case "DetailedDescriptionBinary":
   n.gradingassignment.DetailedDescriptionBinary = nil
  case "Weight":
   n.gradingassignment.Weight = nil
  case "MaxAttemptsAllowed":
   n.gradingassignment.MaxAttemptsAllowed = nil
  case "SIF_ExtendedElements":
   n.gradingassignment.SIF_ExtendedElements = nil
  case "TeachingGroupRefId":
   n.gradingassignment.TeachingGroupRefId = nil
  case "AssessmentType":
   n.gradingassignment.AssessmentType = nil
  case "SIF_Metadata":
   n.gradingassignment.SIF_Metadata = nil
  case "PointsPossible":
   n.gradingassignment.PointsPossible = nil
  case "GradingCategory":
   n.gradingassignment.GradingCategory = nil
  case "DueDate":
   n.gradingassignment.DueDate = nil
  case "LearningStandardList":
   n.gradingassignment.LearningStandardList = nil
  case "LevelAssessed":
   n.gradingassignment.LevelAssessed = nil
  case "RubricScoringGuide":
   n.gradingassignment.RubricScoringGuide = nil
  case "RefId":
   n.gradingassignment.RefId = nil
  case "PrerequisiteList":
   n.gradingassignment.PrerequisiteList = nil
  case "LocalCodeList":
   n.gradingassignment.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.gradingassignment.SchoolInfoRefId = nil
  case "StudentPersonalRefIdList":
   n.gradingassignment.StudentPersonalRefIdList = nil
  case "Description":
   n.gradingassignment.Description = nil
  case "DetailedDescriptionURL":
   n.gradingassignment.DetailedDescriptionURL = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GradingAssignment")
        }
        return n
}

func (n *GradingAssignment) SetProperty(key string, value interface{}) *GradingAssignment {
        if n == nil {
                n, _ = GradingAssignmentPointer(GradingAssignment{})
        }
        switch key {
    case "AssignmentPurpose":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignment.AssignmentPurpose = ((*String)(v))
      }
    case "SubAssignmentList":
    if v, ok:= AssignmentListTypePointer(value); ok {
      n.gradingassignment.SubAssignmentList = v
      }
    case "CreateDate":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignment.CreateDate = ((*String)(v))
      }
    case "DetailedDescriptionBinary":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignment.DetailedDescriptionBinary = ((*String)(v))
      }
    case "Weight":
    
    if v, ok:= FloatPointer(value); ok {
      n.gradingassignment.Weight = ((*Float)(v))
      }
    case "MaxAttemptsAllowed":
    
    if v, ok:= IntPointer(value); ok {
      n.gradingassignment.MaxAttemptsAllowed = ((*Int)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.gradingassignment.SIF_ExtendedElements = v
      }
    case "TeachingGroupRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignment.TeachingGroupRefId = ((*String)(v))
      }
    case "AssessmentType":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignment.AssessmentType = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.gradingassignment.SIF_Metadata = v
      }
    case "PointsPossible":
    
    if v, ok:= IntPointer(value); ok {
      n.gradingassignment.PointsPossible = ((*Int)(v))
      }
    case "GradingCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignment.GradingCategory = ((*String)(v))
      }
    case "DueDate":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignment.DueDate = ((*String)(v))
      }
    case "LearningStandardList":
    if v, ok:= LearningStandardListTypePointer(value); ok {
      n.gradingassignment.LearningStandardList = v
      }
    case "LevelAssessed":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignment.LevelAssessed = ((*String)(v))
      }
    case "RubricScoringGuide":
    if v, ok:= GenericRubricTypePointer(value); ok {
      n.gradingassignment.RubricScoringGuide = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignment.RefId = ((*RefIdType)(v))
      }
    case "PrerequisiteList":
    if v, ok:= PrerequisitesTypePointer(value); ok {
      n.gradingassignment.PrerequisiteList = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.gradingassignment.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignment.SchoolInfoRefId = ((*String)(v))
      }
    case "StudentPersonalRefIdList":
    if v, ok:= StudentsTypePointer(value); ok {
      n.gradingassignment.StudentPersonalRefIdList = v
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignment.Description = ((*String)(v))
      }
    case "DetailedDescriptionURL":
    
    if v, ok:= StringPointer(value); ok {
      n.gradingassignment.DetailedDescriptionURL = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GradingAssignment")
        }
        return n
}

  func (s *GradingAssignment) AssignmentPurpose() *String {
    if s.gradingassignment.AssignmentPurpose == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignment.AssignmentPurpose = ((*String)(v))
      }
      }
      return s.gradingassignment.AssignmentPurpose
    }
  func (s *GradingAssignment) AssignmentPurpose_IsNil() bool {
    return s.AssignmentPurpose == nil || s.gradingassignment.AssignmentPurpose == nil
    }
  func (s *GradingAssignment) SubAssignmentList() *AssignmentListType {
    if s.gradingassignment.SubAssignmentList == nil {
     if v, ok:= AssignmentListTypePointer(AssignmentListType{}); ok {
      s.gradingassignment.SubAssignmentList = v
      }
      }
      return s.gradingassignment.SubAssignmentList
    }
  func (s *GradingAssignment) SubAssignmentList_IsNil() bool {
    return s.SubAssignmentList == nil || s.gradingassignment.SubAssignmentList == nil
    }
  func (s *GradingAssignment) CreateDate() *String {
    if s.gradingassignment.CreateDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignment.CreateDate = ((*String)(v))
      }
      }
      return s.gradingassignment.CreateDate
    }
  func (s *GradingAssignment) CreateDate_IsNil() bool {
    return s.CreateDate == nil || s.gradingassignment.CreateDate == nil
    }
  func (s *GradingAssignment) DetailedDescriptionBinary() *String {
    if s.gradingassignment.DetailedDescriptionBinary == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignment.DetailedDescriptionBinary = ((*String)(v))
      }
      }
      return s.gradingassignment.DetailedDescriptionBinary
    }
  func (s *GradingAssignment) DetailedDescriptionBinary_IsNil() bool {
    return s.DetailedDescriptionBinary == nil || s.gradingassignment.DetailedDescriptionBinary == nil
    }
  func (s *GradingAssignment) Weight() *Float {
    if s.gradingassignment.Weight == nil {
    if v, ok:= FloatPointer(0); ok {
      s.gradingassignment.Weight = ((*Float)(v))
      }
      }
      return s.gradingassignment.Weight
    }
  func (s *GradingAssignment) Weight_IsNil() bool {
    return s.Weight == nil || s.gradingassignment.Weight == nil
    }
  func (s *GradingAssignment) MaxAttemptsAllowed() *Int {
    if s.gradingassignment.MaxAttemptsAllowed == nil {
    if v, ok:= IntPointer(0); ok {
      s.gradingassignment.MaxAttemptsAllowed = ((*Int)(v))
      }
      }
      return s.gradingassignment.MaxAttemptsAllowed
    }
  func (s *GradingAssignment) MaxAttemptsAllowed_IsNil() bool {
    return s.MaxAttemptsAllowed == nil || s.gradingassignment.MaxAttemptsAllowed == nil
    }
  func (s *GradingAssignment) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.gradingassignment.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.gradingassignment.SIF_ExtendedElements = v
      }
      }
      return s.gradingassignment.SIF_ExtendedElements
    }
  func (s *GradingAssignment) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.gradingassignment.SIF_ExtendedElements == nil
    }
  func (s *GradingAssignment) TeachingGroupRefId() *String {
    if s.gradingassignment.TeachingGroupRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignment.TeachingGroupRefId = ((*String)(v))
      }
      }
      return s.gradingassignment.TeachingGroupRefId
    }
  func (s *GradingAssignment) TeachingGroupRefId_IsNil() bool {
    return s.TeachingGroupRefId == nil || s.gradingassignment.TeachingGroupRefId == nil
    }
  func (s *GradingAssignment) AssessmentType() *String {
    if s.gradingassignment.AssessmentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignment.AssessmentType = ((*String)(v))
      }
      }
      return s.gradingassignment.AssessmentType
    }
  func (s *GradingAssignment) AssessmentType_IsNil() bool {
    return s.AssessmentType == nil || s.gradingassignment.AssessmentType == nil
    }
  func (s *GradingAssignment) SIF_Metadata() *SIF_MetadataType {
    if s.gradingassignment.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.gradingassignment.SIF_Metadata = v
      }
      }
      return s.gradingassignment.SIF_Metadata
    }
  func (s *GradingAssignment) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.gradingassignment.SIF_Metadata == nil
    }
  func (s *GradingAssignment) PointsPossible() *Int {
    if s.gradingassignment.PointsPossible == nil {
    if v, ok:= IntPointer(0); ok {
      s.gradingassignment.PointsPossible = ((*Int)(v))
      }
      }
      return s.gradingassignment.PointsPossible
    }
  func (s *GradingAssignment) PointsPossible_IsNil() bool {
    return s.PointsPossible == nil || s.gradingassignment.PointsPossible == nil
    }
  func (s *GradingAssignment) GradingCategory() *String {
    if s.gradingassignment.GradingCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignment.GradingCategory = ((*String)(v))
      }
      }
      return s.gradingassignment.GradingCategory
    }
  func (s *GradingAssignment) GradingCategory_IsNil() bool {
    return s.GradingCategory == nil || s.gradingassignment.GradingCategory == nil
    }
  func (s *GradingAssignment) DueDate() *String {
    if s.gradingassignment.DueDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignment.DueDate = ((*String)(v))
      }
      }
      return s.gradingassignment.DueDate
    }
  func (s *GradingAssignment) DueDate_IsNil() bool {
    return s.DueDate == nil || s.gradingassignment.DueDate == nil
    }
  func (s *GradingAssignment) LearningStandardList() *LearningStandardListType {
    if s.gradingassignment.LearningStandardList == nil {
     if v, ok:= LearningStandardListTypePointer(LearningStandardListType{}); ok {
      s.gradingassignment.LearningStandardList = v
      }
      }
      return s.gradingassignment.LearningStandardList
    }
  func (s *GradingAssignment) LearningStandardList_IsNil() bool {
    return s.LearningStandardList == nil || s.gradingassignment.LearningStandardList == nil
    }
  func (s *GradingAssignment) LevelAssessed() *String {
    if s.gradingassignment.LevelAssessed == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignment.LevelAssessed = ((*String)(v))
      }
      }
      return s.gradingassignment.LevelAssessed
    }
  func (s *GradingAssignment) LevelAssessed_IsNil() bool {
    return s.LevelAssessed == nil || s.gradingassignment.LevelAssessed == nil
    }
  func (s *GradingAssignment) RubricScoringGuide() *GenericRubricType {
    if s.gradingassignment.RubricScoringGuide == nil {
     if v, ok:= GenericRubricTypePointer(GenericRubricType{}); ok {
      s.gradingassignment.RubricScoringGuide = v
      }
      }
      return s.gradingassignment.RubricScoringGuide
    }
  func (s *GradingAssignment) RubricScoringGuide_IsNil() bool {
    return s.RubricScoringGuide == nil || s.gradingassignment.RubricScoringGuide == nil
    }
  func (s *GradingAssignment) RefId() *RefIdType {
    if s.gradingassignment.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignment.RefId = ((*RefIdType)(v))
      }
      }
      return s.gradingassignment.RefId
    }
  func (s *GradingAssignment) RefId_IsNil() bool {
    return s.RefId == nil || s.gradingassignment.RefId == nil
    }
  func (s *GradingAssignment) PrerequisiteList() *PrerequisitesType {
    if s.gradingassignment.PrerequisiteList == nil {
     if v, ok:= PrerequisitesTypePointer(PrerequisitesType{}); ok {
      s.gradingassignment.PrerequisiteList = v
      }
      }
      return s.gradingassignment.PrerequisiteList
    }
  func (s *GradingAssignment) PrerequisiteList_IsNil() bool {
    return s.PrerequisiteList == nil || s.gradingassignment.PrerequisiteList == nil
    }
  func (s *GradingAssignment) LocalCodeList() *LocalCodeListType {
    if s.gradingassignment.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.gradingassignment.LocalCodeList = v
      }
      }
      return s.gradingassignment.LocalCodeList
    }
  func (s *GradingAssignment) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.gradingassignment.LocalCodeList == nil
    }
  func (s *GradingAssignment) SchoolInfoRefId() *String {
    if s.gradingassignment.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignment.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.gradingassignment.SchoolInfoRefId
    }
  func (s *GradingAssignment) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.gradingassignment.SchoolInfoRefId == nil
    }
  func (s *GradingAssignment) StudentPersonalRefIdList() *StudentsType {
    if s.gradingassignment.StudentPersonalRefIdList == nil {
     if v, ok:= StudentsTypePointer(StudentsType{}); ok {
      s.gradingassignment.StudentPersonalRefIdList = v
      }
      }
      return s.gradingassignment.StudentPersonalRefIdList
    }
  func (s *GradingAssignment) StudentPersonalRefIdList_IsNil() bool {
    return s.StudentPersonalRefIdList == nil || s.gradingassignment.StudentPersonalRefIdList == nil
    }
  func (s *GradingAssignment) Description() *String {
    if s.gradingassignment.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignment.Description = ((*String)(v))
      }
      }
      return s.gradingassignment.Description
    }
  func (s *GradingAssignment) Description_IsNil() bool {
    return s.Description == nil || s.gradingassignment.Description == nil
    }
  func (s *GradingAssignment) DetailedDescriptionURL() *String {
    if s.gradingassignment.DetailedDescriptionURL == nil {
    if v, ok:= StringPointer(""); ok {
      s.gradingassignment.DetailedDescriptionURL = ((*String)(v))
      }
      }
      return s.gradingassignment.DetailedDescriptionURL
    }
  func (s *GradingAssignment) DetailedDescriptionURL_IsNil() bool {
    return s.DetailedDescriptionURL == nil || s.gradingassignment.DetailedDescriptionURL == nil
    }

func (n *TeachingGroupStudentType) Unset(key string) *TeachingGroupStudentType {
        switch key {
  case "StudentPersonalRefId":
   n.teachinggroupstudenttype.StudentPersonalRefId = nil
  case "StudentLocalId":
   n.teachinggroupstudenttype.StudentLocalId = nil
  case "Name":
   n.teachinggroupstudenttype.Name = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupStudentType")
        }
        return n
}

func (n *TeachingGroupStudentType) SetProperty(key string, value interface{}) *TeachingGroupStudentType {
        if n == nil {
                n, _ = TeachingGroupStudentTypePointer(TeachingGroupStudentType{})
        }
        switch key {
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupstudenttype.StudentPersonalRefId = ((*String)(v))
      }
    case "StudentLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroupstudenttype.StudentLocalId = ((*LocalIdType)(v))
      }
    case "Name":
    if v, ok:= NameOfRecordTypePointer(value); ok {
      n.teachinggroupstudenttype.Name = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroupStudentType")
        }
        return n
}

  func (s *TeachingGroupStudentType) StudentPersonalRefId() *String {
    if s.teachinggroupstudenttype.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupstudenttype.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.teachinggroupstudenttype.StudentPersonalRefId
    }
  func (s *TeachingGroupStudentType) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.teachinggroupstudenttype.StudentPersonalRefId == nil
    }
  func (s *TeachingGroupStudentType) StudentLocalId() *LocalIdType {
    if s.teachinggroupstudenttype.StudentLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroupstudenttype.StudentLocalId = ((*LocalIdType)(v))
      }
      }
      return s.teachinggroupstudenttype.StudentLocalId
    }
  func (s *TeachingGroupStudentType) StudentLocalId_IsNil() bool {
    return s.StudentLocalId == nil || s.teachinggroupstudenttype.StudentLocalId == nil
    }
  func (s *TeachingGroupStudentType) Name() *NameOfRecordType {
    if s.teachinggroupstudenttype.Name == nil {
     if v, ok:= NameOfRecordTypePointer(NameOfRecordType{}); ok {
      s.teachinggroupstudenttype.Name = v
      }
      }
      return s.teachinggroupstudenttype.Name
    }
  func (s *TeachingGroupStudentType) Name_IsNil() bool {
    return s.Name == nil || s.teachinggroupstudenttype.Name == nil
    }

func (n *NAPTestItemContentType) Unset(key string) *NAPTestItemContentType {
        switch key {
  case "MaximumScore":
   n.naptestitemcontenttype.MaximumScore = nil
  case "Subdomain":
   n.naptestitemcontenttype.Subdomain = nil
  case "StimulusList":
   n.naptestitemcontenttype.StimulusList = nil
  case "ItemDifficultyLogit62SE":
   n.naptestitemcontenttype.ItemDifficultyLogit62SE = nil
  case "ItemDifficultyLogit5":
   n.naptestitemcontenttype.ItemDifficultyLogit5 = nil
  case "ContentDescriptionList":
   n.naptestitemcontenttype.ContentDescriptionList = nil
  case "CorrectAnswer":
   n.naptestitemcontenttype.CorrectAnswer = nil
  case "ItemType":
   n.naptestitemcontenttype.ItemType = nil
  case "ItemDifficultyLogit62":
   n.naptestitemcontenttype.ItemDifficultyLogit62 = nil
  case "MultipleChoiceOptionCount":
   n.naptestitemcontenttype.MultipleChoiceOptionCount = nil
  case "NAPTestItemLocalId":
   n.naptestitemcontenttype.NAPTestItemLocalId = nil
  case "MarkingType":
   n.naptestitemcontenttype.MarkingType = nil
  case "ItemProficiencyBand":
   n.naptestitemcontenttype.ItemProficiencyBand = nil
  case "ItemSubstitutedForList":
   n.naptestitemcontenttype.ItemSubstitutedForList = nil
  case "ItemName":
   n.naptestitemcontenttype.ItemName = nil
  case "ReleasedStatus":
   n.naptestitemcontenttype.ReleasedStatus = nil
  case "WritingGenre":
   n.naptestitemcontenttype.WritingGenre = nil
  case "ExemplarURL":
   n.naptestitemcontenttype.ExemplarURL = nil
  case "ItemDifficultyLogit5SE":
   n.naptestitemcontenttype.ItemDifficultyLogit5SE = nil
  case "NAPWritingRubricList":
   n.naptestitemcontenttype.NAPWritingRubricList = nil
  case "ItemDifficulty":
   n.naptestitemcontenttype.ItemDifficulty = nil
  case "ItemDescriptor":
   n.naptestitemcontenttype.ItemDescriptor = nil
  case "ItemProficiencyLevel":
   n.naptestitemcontenttype.ItemProficiencyLevel = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestItemContentType")
        }
        return n
}

func (n *NAPTestItemContentType) SetProperty(key string, value interface{}) *NAPTestItemContentType {
        if n == nil {
                n, _ = NAPTestItemContentTypePointer(NAPTestItemContentType{})
        }
        switch key {
    case "MaximumScore":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestitemcontenttype.MaximumScore = ((*Float)(v))
      }
    case "Subdomain":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestitemcontenttype.Subdomain = ((*String)(v))
      }
    case "StimulusList":
    if v, ok:= StimulusListTypePointer(value); ok {
      n.naptestitemcontenttype.StimulusList = v
      }
    case "ItemDifficultyLogit62SE":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestitemcontenttype.ItemDifficultyLogit62SE = ((*Float)(v))
      }
    case "ItemDifficultyLogit5":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestitemcontenttype.ItemDifficultyLogit5 = ((*Float)(v))
      }
    case "ContentDescriptionList":
    if v, ok:= ContentDescriptionListTypePointer(value); ok {
      n.naptestitemcontenttype.ContentDescriptionList = v
      }
    case "CorrectAnswer":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestitemcontenttype.CorrectAnswer = ((*String)(v))
      }
    case "ItemType":
        if !CodesetContains(AUCodeSetsNAPTestItemTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPTestItemTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.naptestitemcontenttype.ItemType = ((*AUCodeSetsNAPTestItemTypeType)(v))
      }
    case "ItemDifficultyLogit62":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestitemcontenttype.ItemDifficultyLogit62 = ((*Float)(v))
      }
    case "MultipleChoiceOptionCount":
    
    if v, ok:= IntPointer(value); ok {
      n.naptestitemcontenttype.MultipleChoiceOptionCount = ((*Int)(v))
      }
    case "NAPTestItemLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestitemcontenttype.NAPTestItemLocalId = ((*LocalIdType)(v))
      }
    case "MarkingType":
        if !CodesetContains(AUCodeSetsNAPTestItemMarkingTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPTestItemMarkingTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.naptestitemcontenttype.MarkingType = ((*AUCodeSetsNAPTestItemMarkingTypeType)(v))
      }
    case "ItemProficiencyBand":
    
    if v, ok:= IntPointer(value); ok {
      n.naptestitemcontenttype.ItemProficiencyBand = ((*Int)(v))
      }
    case "ItemSubstitutedForList":
    if v, ok:= SubstituteItemListTypePointer(value); ok {
      n.naptestitemcontenttype.ItemSubstitutedForList = v
      }
    case "ItemName":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestitemcontenttype.ItemName = ((*String)(v))
      }
    case "ReleasedStatus":
    
    if v, ok:= BoolPointer(value); ok {
      n.naptestitemcontenttype.ReleasedStatus = ((*Bool)(v))
      }
    case "WritingGenre":
        if !CodesetContains(AUCodeSetsNAPWritingGenreType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPWritingGenreType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.naptestitemcontenttype.WritingGenre = ((*AUCodeSetsNAPWritingGenreType)(v))
      }
    case "ExemplarURL":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestitemcontenttype.ExemplarURL = ((*String)(v))
      }
    case "ItemDifficultyLogit5SE":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestitemcontenttype.ItemDifficultyLogit5SE = ((*Float)(v))
      }
    case "NAPWritingRubricList":
    if v, ok:= NAPWritingRubricListTypePointer(value); ok {
      n.naptestitemcontenttype.NAPWritingRubricList = v
      }
    case "ItemDifficulty":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestitemcontenttype.ItemDifficulty = ((*Float)(v))
      }
    case "ItemDescriptor":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestitemcontenttype.ItemDescriptor = ((*String)(v))
      }
    case "ItemProficiencyLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestitemcontenttype.ItemProficiencyLevel = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestItemContentType")
        }
        return n
}

  func (s *NAPTestItemContentType) MaximumScore() *Float {
    if s.naptestitemcontenttype.MaximumScore == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestitemcontenttype.MaximumScore = ((*Float)(v))
      }
      }
      return s.naptestitemcontenttype.MaximumScore
    }
  func (s *NAPTestItemContentType) MaximumScore_IsNil() bool {
    return s.MaximumScore == nil || s.naptestitemcontenttype.MaximumScore == nil
    }
  func (s *NAPTestItemContentType) Subdomain() *String {
    if s.naptestitemcontenttype.Subdomain == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestitemcontenttype.Subdomain = ((*String)(v))
      }
      }
      return s.naptestitemcontenttype.Subdomain
    }
  func (s *NAPTestItemContentType) Subdomain_IsNil() bool {
    return s.Subdomain == nil || s.naptestitemcontenttype.Subdomain == nil
    }
  func (s *NAPTestItemContentType) StimulusList() *StimulusListType {
    if s.naptestitemcontenttype.StimulusList == nil {
     if v, ok:= StimulusListTypePointer(StimulusListType{}); ok {
      s.naptestitemcontenttype.StimulusList = v
      }
      }
      return s.naptestitemcontenttype.StimulusList
    }
  func (s *NAPTestItemContentType) StimulusList_IsNil() bool {
    return s.StimulusList == nil || s.naptestitemcontenttype.StimulusList == nil
    }
  func (s *NAPTestItemContentType) ItemDifficultyLogit62SE() *Float {
    if s.naptestitemcontenttype.ItemDifficultyLogit62SE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestitemcontenttype.ItemDifficultyLogit62SE = ((*Float)(v))
      }
      }
      return s.naptestitemcontenttype.ItemDifficultyLogit62SE
    }
  func (s *NAPTestItemContentType) ItemDifficultyLogit62SE_IsNil() bool {
    return s.ItemDifficultyLogit62SE == nil || s.naptestitemcontenttype.ItemDifficultyLogit62SE == nil
    }
  func (s *NAPTestItemContentType) ItemDifficultyLogit5() *Float {
    if s.naptestitemcontenttype.ItemDifficultyLogit5 == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestitemcontenttype.ItemDifficultyLogit5 = ((*Float)(v))
      }
      }
      return s.naptestitemcontenttype.ItemDifficultyLogit5
    }
  func (s *NAPTestItemContentType) ItemDifficultyLogit5_IsNil() bool {
    return s.ItemDifficultyLogit5 == nil || s.naptestitemcontenttype.ItemDifficultyLogit5 == nil
    }
  func (s *NAPTestItemContentType) ContentDescriptionList() *ContentDescriptionListType {
    if s.naptestitemcontenttype.ContentDescriptionList == nil {
     if v, ok:= ContentDescriptionListTypePointer(ContentDescriptionListType{}); ok {
      s.naptestitemcontenttype.ContentDescriptionList = v
      }
      }
      return s.naptestitemcontenttype.ContentDescriptionList
    }
  func (s *NAPTestItemContentType) ContentDescriptionList_IsNil() bool {
    return s.ContentDescriptionList == nil || s.naptestitemcontenttype.ContentDescriptionList == nil
    }
  func (s *NAPTestItemContentType) CorrectAnswer() *String {
    if s.naptestitemcontenttype.CorrectAnswer == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestitemcontenttype.CorrectAnswer = ((*String)(v))
      }
      }
      return s.naptestitemcontenttype.CorrectAnswer
    }
  func (s *NAPTestItemContentType) CorrectAnswer_IsNil() bool {
    return s.CorrectAnswer == nil || s.naptestitemcontenttype.CorrectAnswer == nil
    }
  func (s *NAPTestItemContentType) ItemType() *AUCodeSetsNAPTestItemTypeType {
    if s.naptestitemcontenttype.ItemType == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestitemcontenttype.ItemType = ((*AUCodeSetsNAPTestItemTypeType)(v))
      }
      }
      return s.naptestitemcontenttype.ItemType
    }
  func (s *NAPTestItemContentType) ItemType_IsNil() bool {
    return s.ItemType == nil || s.naptestitemcontenttype.ItemType == nil
    }
  func (s *NAPTestItemContentType) ItemDifficultyLogit62() *Float {
    if s.naptestitemcontenttype.ItemDifficultyLogit62 == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestitemcontenttype.ItemDifficultyLogit62 = ((*Float)(v))
      }
      }
      return s.naptestitemcontenttype.ItemDifficultyLogit62
    }
  func (s *NAPTestItemContentType) ItemDifficultyLogit62_IsNil() bool {
    return s.ItemDifficultyLogit62 == nil || s.naptestitemcontenttype.ItemDifficultyLogit62 == nil
    }
  func (s *NAPTestItemContentType) MultipleChoiceOptionCount() *Int {
    if s.naptestitemcontenttype.MultipleChoiceOptionCount == nil {
    if v, ok:= IntPointer(0); ok {
      s.naptestitemcontenttype.MultipleChoiceOptionCount = ((*Int)(v))
      }
      }
      return s.naptestitemcontenttype.MultipleChoiceOptionCount
    }
  func (s *NAPTestItemContentType) MultipleChoiceOptionCount_IsNil() bool {
    return s.MultipleChoiceOptionCount == nil || s.naptestitemcontenttype.MultipleChoiceOptionCount == nil
    }
  func (s *NAPTestItemContentType) NAPTestItemLocalId() *LocalIdType {
    if s.naptestitemcontenttype.NAPTestItemLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestitemcontenttype.NAPTestItemLocalId = ((*LocalIdType)(v))
      }
      }
      return s.naptestitemcontenttype.NAPTestItemLocalId
    }
  func (s *NAPTestItemContentType) NAPTestItemLocalId_IsNil() bool {
    return s.NAPTestItemLocalId == nil || s.naptestitemcontenttype.NAPTestItemLocalId == nil
    }
  func (s *NAPTestItemContentType) MarkingType() *AUCodeSetsNAPTestItemMarkingTypeType {
    if s.naptestitemcontenttype.MarkingType == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestitemcontenttype.MarkingType = ((*AUCodeSetsNAPTestItemMarkingTypeType)(v))
      }
      }
      return s.naptestitemcontenttype.MarkingType
    }
  func (s *NAPTestItemContentType) MarkingType_IsNil() bool {
    return s.MarkingType == nil || s.naptestitemcontenttype.MarkingType == nil
    }
  func (s *NAPTestItemContentType) ItemProficiencyBand() *Int {
    if s.naptestitemcontenttype.ItemProficiencyBand == nil {
    if v, ok:= IntPointer(0); ok {
      s.naptestitemcontenttype.ItemProficiencyBand = ((*Int)(v))
      }
      }
      return s.naptestitemcontenttype.ItemProficiencyBand
    }
  func (s *NAPTestItemContentType) ItemProficiencyBand_IsNil() bool {
    return s.ItemProficiencyBand == nil || s.naptestitemcontenttype.ItemProficiencyBand == nil
    }
  func (s *NAPTestItemContentType) ItemSubstitutedForList() *SubstituteItemListType {
    if s.naptestitemcontenttype.ItemSubstitutedForList == nil {
     if v, ok:= SubstituteItemListTypePointer(SubstituteItemListType{}); ok {
      s.naptestitemcontenttype.ItemSubstitutedForList = v
      }
      }
      return s.naptestitemcontenttype.ItemSubstitutedForList
    }
  func (s *NAPTestItemContentType) ItemSubstitutedForList_IsNil() bool {
    return s.ItemSubstitutedForList == nil || s.naptestitemcontenttype.ItemSubstitutedForList == nil
    }
  func (s *NAPTestItemContentType) ItemName() *String {
    if s.naptestitemcontenttype.ItemName == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestitemcontenttype.ItemName = ((*String)(v))
      }
      }
      return s.naptestitemcontenttype.ItemName
    }
  func (s *NAPTestItemContentType) ItemName_IsNil() bool {
    return s.ItemName == nil || s.naptestitemcontenttype.ItemName == nil
    }
  func (s *NAPTestItemContentType) ReleasedStatus() *Bool {
    if s.naptestitemcontenttype.ReleasedStatus == nil {
    if v, ok:= BoolPointer(false); ok {
      s.naptestitemcontenttype.ReleasedStatus = ((*Bool)(v))
      }
      }
      return s.naptestitemcontenttype.ReleasedStatus
    }
  func (s *NAPTestItemContentType) ReleasedStatus_IsNil() bool {
    return s.ReleasedStatus == nil || s.naptestitemcontenttype.ReleasedStatus == nil
    }
  func (s *NAPTestItemContentType) WritingGenre() *AUCodeSetsNAPWritingGenreType {
    if s.naptestitemcontenttype.WritingGenre == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestitemcontenttype.WritingGenre = ((*AUCodeSetsNAPWritingGenreType)(v))
      }
      }
      return s.naptestitemcontenttype.WritingGenre
    }
  func (s *NAPTestItemContentType) WritingGenre_IsNil() bool {
    return s.WritingGenre == nil || s.naptestitemcontenttype.WritingGenre == nil
    }
  func (s *NAPTestItemContentType) ExemplarURL() *String {
    if s.naptestitemcontenttype.ExemplarURL == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestitemcontenttype.ExemplarURL = ((*String)(v))
      }
      }
      return s.naptestitemcontenttype.ExemplarURL
    }
  func (s *NAPTestItemContentType) ExemplarURL_IsNil() bool {
    return s.ExemplarURL == nil || s.naptestitemcontenttype.ExemplarURL == nil
    }
  func (s *NAPTestItemContentType) ItemDifficultyLogit5SE() *Float {
    if s.naptestitemcontenttype.ItemDifficultyLogit5SE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestitemcontenttype.ItemDifficultyLogit5SE = ((*Float)(v))
      }
      }
      return s.naptestitemcontenttype.ItemDifficultyLogit5SE
    }
  func (s *NAPTestItemContentType) ItemDifficultyLogit5SE_IsNil() bool {
    return s.ItemDifficultyLogit5SE == nil || s.naptestitemcontenttype.ItemDifficultyLogit5SE == nil
    }
  func (s *NAPTestItemContentType) NAPWritingRubricList() *NAPWritingRubricListType {
    if s.naptestitemcontenttype.NAPWritingRubricList == nil {
     if v, ok:= NAPWritingRubricListTypePointer(NAPWritingRubricListType{}); ok {
      s.naptestitemcontenttype.NAPWritingRubricList = v
      }
      }
      return s.naptestitemcontenttype.NAPWritingRubricList
    }
  func (s *NAPTestItemContentType) NAPWritingRubricList_IsNil() bool {
    return s.NAPWritingRubricList == nil || s.naptestitemcontenttype.NAPWritingRubricList == nil
    }
  func (s *NAPTestItemContentType) ItemDifficulty() *Float {
    if s.naptestitemcontenttype.ItemDifficulty == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestitemcontenttype.ItemDifficulty = ((*Float)(v))
      }
      }
      return s.naptestitemcontenttype.ItemDifficulty
    }
  func (s *NAPTestItemContentType) ItemDifficulty_IsNil() bool {
    return s.ItemDifficulty == nil || s.naptestitemcontenttype.ItemDifficulty == nil
    }
  func (s *NAPTestItemContentType) ItemDescriptor() *String {
    if s.naptestitemcontenttype.ItemDescriptor == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestitemcontenttype.ItemDescriptor = ((*String)(v))
      }
      }
      return s.naptestitemcontenttype.ItemDescriptor
    }
  func (s *NAPTestItemContentType) ItemDescriptor_IsNil() bool {
    return s.ItemDescriptor == nil || s.naptestitemcontenttype.ItemDescriptor == nil
    }
  func (s *NAPTestItemContentType) ItemProficiencyLevel() *String {
    if s.naptestitemcontenttype.ItemProficiencyLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestitemcontenttype.ItemProficiencyLevel = ((*String)(v))
      }
      }
      return s.naptestitemcontenttype.ItemProficiencyLevel
    }
  func (s *NAPTestItemContentType) ItemProficiencyLevel_IsNil() bool {
    return s.ItemProficiencyLevel == nil || s.naptestitemcontenttype.ItemProficiencyLevel == nil
    }

func (n *MediumOfInstructionType) Unset(key string) *MediumOfInstructionType {
        switch key {
  case "OtherCodeList":
   n.mediumofinstructiontype.OtherCodeList = nil
  case "Code":
   n.mediumofinstructiontype.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MediumOfInstructionType")
        }
        return n
}

func (n *MediumOfInstructionType) SetProperty(key string, value interface{}) *MediumOfInstructionType {
        if n == nil {
                n, _ = MediumOfInstructionTypePointer(MediumOfInstructionType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.mediumofinstructiontype.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsMediumOfInstructionType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsMediumOfInstructionType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.mediumofinstructiontype.Code = ((*AUCodeSetsMediumOfInstructionType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MediumOfInstructionType")
        }
        return n
}

  func (s *MediumOfInstructionType) OtherCodeList() *OtherCodeListType {
    if s.mediumofinstructiontype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.mediumofinstructiontype.OtherCodeList = v
      }
      }
      return s.mediumofinstructiontype.OtherCodeList
    }
  func (s *MediumOfInstructionType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.mediumofinstructiontype.OtherCodeList == nil
    }
  func (s *MediumOfInstructionType) Code() *AUCodeSetsMediumOfInstructionType {
    if s.mediumofinstructiontype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.mediumofinstructiontype.Code = ((*AUCodeSetsMediumOfInstructionType)(v))
      }
      }
      return s.mediumofinstructiontype.Code
    }
  func (s *MediumOfInstructionType) Code_IsNil() bool {
    return s.Code == nil || s.mediumofinstructiontype.Code == nil
    }

func (n *StudentSubjectChoiceType) Unset(key string) *StudentSubjectChoiceType {
        switch key {
  case "OtherSchoolLocalId":
   n.studentsubjectchoicetype.OtherSchoolLocalId = nil
  case "SubjectLocalId":
   n.studentsubjectchoicetype.SubjectLocalId = nil
  case "PreferenceNumber":
   n.studentsubjectchoicetype.PreferenceNumber = nil
  case "StudyDescription":
   n.studentsubjectchoicetype.StudyDescription = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSubjectChoiceType")
        }
        return n
}

func (n *StudentSubjectChoiceType) SetProperty(key string, value interface{}) *StudentSubjectChoiceType {
        if n == nil {
                n, _ = StudentSubjectChoiceTypePointer(StudentSubjectChoiceType{})
        }
        switch key {
    case "OtherSchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentsubjectchoicetype.OtherSchoolLocalId = ((*LocalIdType)(v))
      }
    case "SubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentsubjectchoicetype.SubjectLocalId = ((*LocalIdType)(v))
      }
    case "PreferenceNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.studentsubjectchoicetype.PreferenceNumber = ((*Int)(v))
      }
    case "StudyDescription":
    if v, ok:= SubjectAreaTypePointer(value); ok {
      n.studentsubjectchoicetype.StudyDescription = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSubjectChoiceType")
        }
        return n
}

  func (s *StudentSubjectChoiceType) OtherSchoolLocalId() *LocalIdType {
    if s.studentsubjectchoicetype.OtherSchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentsubjectchoicetype.OtherSchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.studentsubjectchoicetype.OtherSchoolLocalId
    }
  func (s *StudentSubjectChoiceType) OtherSchoolLocalId_IsNil() bool {
    return s.OtherSchoolLocalId == nil || s.studentsubjectchoicetype.OtherSchoolLocalId == nil
    }
  func (s *StudentSubjectChoiceType) SubjectLocalId() *LocalIdType {
    if s.studentsubjectchoicetype.SubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentsubjectchoicetype.SubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.studentsubjectchoicetype.SubjectLocalId
    }
  func (s *StudentSubjectChoiceType) SubjectLocalId_IsNil() bool {
    return s.SubjectLocalId == nil || s.studentsubjectchoicetype.SubjectLocalId == nil
    }
  func (s *StudentSubjectChoiceType) PreferenceNumber() *Int {
    if s.studentsubjectchoicetype.PreferenceNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.studentsubjectchoicetype.PreferenceNumber = ((*Int)(v))
      }
      }
      return s.studentsubjectchoicetype.PreferenceNumber
    }
  func (s *StudentSubjectChoiceType) PreferenceNumber_IsNil() bool {
    return s.PreferenceNumber == nil || s.studentsubjectchoicetype.PreferenceNumber == nil
    }
  func (s *StudentSubjectChoiceType) StudyDescription() *SubjectAreaType {
    if s.studentsubjectchoicetype.StudyDescription == nil {
     if v, ok:= SubjectAreaTypePointer(SubjectAreaType{}); ok {
      s.studentsubjectchoicetype.StudyDescription = v
      }
      }
      return s.studentsubjectchoicetype.StudyDescription
    }
  func (s *StudentSubjectChoiceType) StudyDescription_IsNil() bool {
    return s.StudyDescription == nil || s.studentsubjectchoicetype.StudyDescription == nil
    }

func (n *ReligiousEventType) Unset(key string) *ReligiousEventType {
        switch key {
  case "Date":
   n.religiouseventtype.Date = nil
  case "Type":
   n.religiouseventtype.Type = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ReligiousEventType")
        }
        return n
}

func (n *ReligiousEventType) SetProperty(key string, value interface{}) *ReligiousEventType {
        if n == nil {
                n, _ = ReligiousEventTypePointer(ReligiousEventType{})
        }
        switch key {
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.religiouseventtype.Date = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.religiouseventtype.Type = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ReligiousEventType")
        }
        return n
}

  func (s *ReligiousEventType) Date() *String {
    if s.religiouseventtype.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.religiouseventtype.Date = ((*String)(v))
      }
      }
      return s.religiouseventtype.Date
    }
  func (s *ReligiousEventType) Date_IsNil() bool {
    return s.Date == nil || s.religiouseventtype.Date == nil
    }
  func (s *ReligiousEventType) Type() *String {
    if s.religiouseventtype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.religiouseventtype.Type = ((*String)(v))
      }
      }
      return s.religiouseventtype.Type
    }
  func (s *ReligiousEventType) Type_IsNil() bool {
    return s.Type == nil || s.religiouseventtype.Type == nil
    }

func (n *ResourceBooking_ResourceRefId) Unset(key string) *ResourceBooking_ResourceRefId {
        switch key {
  case "SIF_RefObject":
   n.resourcebooking_resourcerefid.SIF_RefObject = nil
  case "Value":
   n.resourcebooking_resourcerefid.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceBooking_ResourceRefId")
        }
        return n
}

func (n *ResourceBooking_ResourceRefId) SetProperty(key string, value interface{}) *ResourceBooking_ResourceRefId {
        if n == nil {
                n, _ = ResourceBooking_ResourceRefIdPointer(ResourceBooking_ResourceRefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.resourcebooking_resourcerefid.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.resourcebooking_resourcerefid.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceBooking_ResourceRefId")
        }
        return n
}

  func (s *ResourceBooking_ResourceRefId) SIF_RefObject() *String {
    if s.resourcebooking_resourcerefid.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourcebooking_resourcerefid.SIF_RefObject = ((*String)(v))
      }
      }
      return s.resourcebooking_resourcerefid.SIF_RefObject
    }
  func (s *ResourceBooking_ResourceRefId) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.resourcebooking_resourcerefid.SIF_RefObject == nil
    }
  func (s *ResourceBooking_ResourceRefId) Value() *String {
    if s.resourcebooking_resourcerefid.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourcebooking_resourcerefid.Value = ((*String)(v))
      }
      }
      return s.resourcebooking_resourcerefid.Value
    }
  func (s *ResourceBooking_ResourceRefId) Value_IsNil() bool {
    return s.Value == nil || s.resourcebooking_resourcerefid.Value == nil
    }

func (n *GenericRubricType) Unset(key string) *GenericRubricType {
        switch key {
  case "Descriptor":
   n.genericrubrictype.Descriptor = nil
  case "ScoreList":
   n.genericrubrictype.ScoreList = nil
  case "RubricType":
   n.genericrubrictype.RubricType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GenericRubricType")
        }
        return n
}

func (n *GenericRubricType) SetProperty(key string, value interface{}) *GenericRubricType {
        if n == nil {
                n, _ = GenericRubricTypePointer(GenericRubricType{})
        }
        switch key {
    case "Descriptor":
    
    if v, ok:= StringPointer(value); ok {
      n.genericrubrictype.Descriptor = ((*String)(v))
      }
    case "ScoreList":
    if v, ok:= ScoreListTypePointer(value); ok {
      n.genericrubrictype.ScoreList = v
      }
    case "RubricType":
    
    if v, ok:= StringPointer(value); ok {
      n.genericrubrictype.RubricType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "GenericRubricType")
        }
        return n
}

  func (s *GenericRubricType) Descriptor() *String {
    if s.genericrubrictype.Descriptor == nil {
    if v, ok:= StringPointer(""); ok {
      s.genericrubrictype.Descriptor = ((*String)(v))
      }
      }
      return s.genericrubrictype.Descriptor
    }
  func (s *GenericRubricType) Descriptor_IsNil() bool {
    return s.Descriptor == nil || s.genericrubrictype.Descriptor == nil
    }
  func (s *GenericRubricType) ScoreList() *ScoreListType {
    if s.genericrubrictype.ScoreList == nil {
     if v, ok:= ScoreListTypePointer(ScoreListType{}); ok {
      s.genericrubrictype.ScoreList = v
      }
      }
      return s.genericrubrictype.ScoreList
    }
  func (s *GenericRubricType) ScoreList_IsNil() bool {
    return s.ScoreList == nil || s.genericrubrictype.ScoreList == nil
    }
  func (s *GenericRubricType) RubricType() *String {
    if s.genericrubrictype.RubricType == nil {
    if v, ok:= StringPointer(""); ok {
      s.genericrubrictype.RubricType = ((*String)(v))
      }
      }
      return s.genericrubrictype.RubricType
    }
  func (s *GenericRubricType) RubricType_IsNil() bool {
    return s.RubricType == nil || s.genericrubrictype.RubricType == nil
    }

func (n *CampusContainerType) Unset(key string) *CampusContainerType {
        switch key {
  case "ParentSchoolId":
   n.campuscontainertype.ParentSchoolId = nil
  case "AdminStatus":
   n.campuscontainertype.AdminStatus = nil
  case "SchoolCampusId":
   n.campuscontainertype.SchoolCampusId = nil
  case "CampusType":
   n.campuscontainertype.CampusType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CampusContainerType")
        }
        return n
}

func (n *CampusContainerType) SetProperty(key string, value interface{}) *CampusContainerType {
        if n == nil {
                n, _ = CampusContainerTypePointer(CampusContainerType{})
        }
        switch key {
    case "ParentSchoolId":
    
    if v, ok:= StringPointer(value); ok {
      n.campuscontainertype.ParentSchoolId = ((*String)(v))
      }
    case "AdminStatus":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.campuscontainertype.AdminStatus = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "SchoolCampusId":
    
    if v, ok:= StringPointer(value); ok {
      n.campuscontainertype.SchoolCampusId = ((*String)(v))
      }
    case "CampusType":
        if !CodesetContains(AUCodeSetsSchoolLevelType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolLevelType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.campuscontainertype.CampusType = ((*AUCodeSetsSchoolLevelType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CampusContainerType")
        }
        return n
}

  func (s *CampusContainerType) ParentSchoolId() *String {
    if s.campuscontainertype.ParentSchoolId == nil {
    if v, ok:= StringPointer(""); ok {
      s.campuscontainertype.ParentSchoolId = ((*String)(v))
      }
      }
      return s.campuscontainertype.ParentSchoolId
    }
  func (s *CampusContainerType) ParentSchoolId_IsNil() bool {
    return s.ParentSchoolId == nil || s.campuscontainertype.ParentSchoolId == nil
    }
  func (s *CampusContainerType) AdminStatus() *AUCodeSetsYesOrNoCategoryType {
    if s.campuscontainertype.AdminStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.campuscontainertype.AdminStatus = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.campuscontainertype.AdminStatus
    }
  func (s *CampusContainerType) AdminStatus_IsNil() bool {
    return s.AdminStatus == nil || s.campuscontainertype.AdminStatus == nil
    }
  func (s *CampusContainerType) SchoolCampusId() *String {
    if s.campuscontainertype.SchoolCampusId == nil {
    if v, ok:= StringPointer(""); ok {
      s.campuscontainertype.SchoolCampusId = ((*String)(v))
      }
      }
      return s.campuscontainertype.SchoolCampusId
    }
  func (s *CampusContainerType) SchoolCampusId_IsNil() bool {
    return s.SchoolCampusId == nil || s.campuscontainertype.SchoolCampusId == nil
    }
  func (s *CampusContainerType) CampusType() *AUCodeSetsSchoolLevelType {
    if s.campuscontainertype.CampusType == nil {
    if v, ok:= StringPointer(""); ok {
      s.campuscontainertype.CampusType = ((*AUCodeSetsSchoolLevelType)(v))
      }
      }
      return s.campuscontainertype.CampusType
    }
  func (s *CampusContainerType) CampusType_IsNil() bool {
    return s.CampusType == nil || s.campuscontainertype.CampusType == nil
    }

func (n *StudentSchoolEnrollment_Calendar) Unset(key string) *StudentSchoolEnrollment_Calendar {
        switch key {
  case "Value":
   n.studentschoolenrollment_calendar.Value = nil
  case "SIF_RefObject":
   n.studentschoolenrollment_calendar.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Calendar")
        }
        return n
}

func (n *StudentSchoolEnrollment_Calendar) SetProperty(key string, value interface{}) *StudentSchoolEnrollment_Calendar {
        if n == nil {
                n, _ = StudentSchoolEnrollment_CalendarPointer(StudentSchoolEnrollment_Calendar{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment_calendar.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment_calendar.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Calendar")
        }
        return n
}

  func (s *StudentSchoolEnrollment_Calendar) Value() *String {
    if s.studentschoolenrollment_calendar.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment_calendar.Value = ((*String)(v))
      }
      }
      return s.studentschoolenrollment_calendar.Value
    }
  func (s *StudentSchoolEnrollment_Calendar) Value_IsNil() bool {
    return s.Value == nil || s.studentschoolenrollment_calendar.Value == nil
    }
  func (s *StudentSchoolEnrollment_Calendar) SIF_RefObject() *String {
    if s.studentschoolenrollment_calendar.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment_calendar.SIF_RefObject = ((*String)(v))
      }
      }
      return s.studentschoolenrollment_calendar.SIF_RefObject
    }
  func (s *StudentSchoolEnrollment_Calendar) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.studentschoolenrollment_calendar.SIF_RefObject == nil
    }

func (n *SystemRole_SystemContext) Unset(key string) *SystemRole_SystemContext {
        switch key {
  case "SystemId":
   n.systemrole_systemcontext.SystemId = nil
  case "RoleList":
   n.systemrole_systemcontext.RoleList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_SystemContext")
        }
        return n
}

func (n *SystemRole_SystemContext) SetProperty(key string, value interface{}) *SystemRole_SystemContext {
        if n == nil {
                n, _ = SystemRole_SystemContextPointer(SystemRole_SystemContext{})
        }
        switch key {
    case "SystemId":
    
    if v, ok:= StringPointer(value); ok {
      n.systemrole_systemcontext.SystemId = ((*String)(v))
      }
    case "RoleList":
    if v, ok:= SystemRole_RoleListPointer(value); ok {
      n.systemrole_systemcontext.RoleList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_SystemContext")
        }
        return n
}

  func (s *SystemRole_SystemContext) SystemId() *String {
    if s.systemrole_systemcontext.SystemId == nil {
    if v, ok:= StringPointer(""); ok {
      s.systemrole_systemcontext.SystemId = ((*String)(v))
      }
      }
      return s.systemrole_systemcontext.SystemId
    }
  func (s *SystemRole_SystemContext) SystemId_IsNil() bool {
    return s.SystemId == nil || s.systemrole_systemcontext.SystemId == nil
    }
  func (s *SystemRole_SystemContext) RoleList() *SystemRole_RoleList {
    if s.systemrole_systemcontext.RoleList == nil {
     if v, ok:= SystemRole_RoleListPointer(SystemRole_RoleList{}); ok {
      s.systemrole_systemcontext.RoleList = v
      }
      }
      return s.systemrole_systemcontext.RoleList
    }
  func (s *SystemRole_SystemContext) RoleList_IsNil() bool {
    return s.RoleList == nil || s.systemrole_systemcontext.RoleList == nil
    }

func (n *AttendanceCodeType) Unset(key string) *AttendanceCodeType {
        switch key {
  case "Code":
   n.attendancecodetype.Code = nil
  case "OtherCodeList":
   n.attendancecodetype.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AttendanceCodeType")
        }
        return n
}

func (n *AttendanceCodeType) SetProperty(key string, value interface{}) *AttendanceCodeType {
        if n == nil {
                n, _ = AttendanceCodeTypePointer(AttendanceCodeType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsAttendanceCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAttendanceCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.attendancecodetype.Code = ((*AUCodeSetsAttendanceCodeType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.attendancecodetype.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AttendanceCodeType")
        }
        return n
}

  func (s *AttendanceCodeType) Code() *AUCodeSetsAttendanceCodeType {
    if s.attendancecodetype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.attendancecodetype.Code = ((*AUCodeSetsAttendanceCodeType)(v))
      }
      }
      return s.attendancecodetype.Code
    }
  func (s *AttendanceCodeType) Code_IsNil() bool {
    return s.Code == nil || s.attendancecodetype.Code == nil
    }
  func (s *AttendanceCodeType) OtherCodeList() *OtherCodeListType {
    if s.attendancecodetype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.attendancecodetype.OtherCodeList = v
      }
      }
      return s.attendancecodetype.OtherCodeList
    }
  func (s *AttendanceCodeType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.attendancecodetype.OtherCodeList == nil
    }

func (n *LocalCodeType) Unset(key string) *LocalCodeType {
        switch key {
  case "Element":
   n.localcodetype.Element = nil
  case "LocalisedCode":
   n.localcodetype.LocalisedCode = nil
  case "Description":
   n.localcodetype.Description = nil
  case "ListIndex":
   n.localcodetype.ListIndex = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocalCodeType")
        }
        return n
}

func (n *LocalCodeType) SetProperty(key string, value interface{}) *LocalCodeType {
        if n == nil {
                n, _ = LocalCodeTypePointer(LocalCodeType{})
        }
        switch key {
    case "Element":
    
    if v, ok:= StringPointer(value); ok {
      n.localcodetype.Element = ((*String)(v))
      }
    case "LocalisedCode":
    
    if v, ok:= StringPointer(value); ok {
      n.localcodetype.LocalisedCode = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.localcodetype.Description = ((*String)(v))
      }
    case "ListIndex":
    
    if v, ok:= IntPointer(value); ok {
      n.localcodetype.ListIndex = ((*Int)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocalCodeType")
        }
        return n
}

  func (s *LocalCodeType) Element() *String {
    if s.localcodetype.Element == nil {
    if v, ok:= StringPointer(""); ok {
      s.localcodetype.Element = ((*String)(v))
      }
      }
      return s.localcodetype.Element
    }
  func (s *LocalCodeType) Element_IsNil() bool {
    return s.Element == nil || s.localcodetype.Element == nil
    }
  func (s *LocalCodeType) LocalisedCode() *String {
    if s.localcodetype.LocalisedCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.localcodetype.LocalisedCode = ((*String)(v))
      }
      }
      return s.localcodetype.LocalisedCode
    }
  func (s *LocalCodeType) LocalisedCode_IsNil() bool {
    return s.LocalisedCode == nil || s.localcodetype.LocalisedCode == nil
    }
  func (s *LocalCodeType) Description() *String {
    if s.localcodetype.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.localcodetype.Description = ((*String)(v))
      }
      }
      return s.localcodetype.Description
    }
  func (s *LocalCodeType) Description_IsNil() bool {
    return s.Description == nil || s.localcodetype.Description == nil
    }
  func (s *LocalCodeType) ListIndex() *Int {
    if s.localcodetype.ListIndex == nil {
    if v, ok:= IntPointer(0); ok {
      s.localcodetype.ListIndex = ((*Int)(v))
      }
      }
      return s.localcodetype.ListIndex
    }
  func (s *LocalCodeType) ListIndex_IsNil() bool {
    return s.ListIndex == nil || s.localcodetype.ListIndex == nil
    }

func (n *SchoolPrograms) Unset(key string) *SchoolPrograms {
        switch key {
  case "SchoolYear":
   n.schoolprograms.SchoolYear = nil
  case "SIF_ExtendedElements":
   n.schoolprograms.SIF_ExtendedElements = nil
  case "SIF_Metadata":
   n.schoolprograms.SIF_Metadata = nil
  case "LocalCodeList":
   n.schoolprograms.LocalCodeList = nil
  case "SchoolProgramList":
   n.schoolprograms.SchoolProgramList = nil
  case "SchoolInfoRefId":
   n.schoolprograms.SchoolInfoRefId = nil
  case "RefId":
   n.schoolprograms.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolPrograms")
        }
        return n
}

func (n *SchoolPrograms) SetProperty(key string, value interface{}) *SchoolPrograms {
        if n == nil {
                n, _ = SchoolProgramsPointer(SchoolPrograms{})
        }
        switch key {
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolprograms.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.schoolprograms.SIF_ExtendedElements = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.schoolprograms.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.schoolprograms.LocalCodeList = v
      }
    case "SchoolProgramList":
    if v, ok:= SchoolProgramListTypePointer(value); ok {
      n.schoolprograms.SchoolProgramList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolprograms.SchoolInfoRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolprograms.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolPrograms")
        }
        return n
}

  func (s *SchoolPrograms) SchoolYear() *SchoolYearType {
    if s.schoolprograms.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolprograms.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.schoolprograms.SchoolYear
    }
  func (s *SchoolPrograms) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.schoolprograms.SchoolYear == nil
    }
  func (s *SchoolPrograms) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.schoolprograms.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.schoolprograms.SIF_ExtendedElements = v
      }
      }
      return s.schoolprograms.SIF_ExtendedElements
    }
  func (s *SchoolPrograms) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.schoolprograms.SIF_ExtendedElements == nil
    }
  func (s *SchoolPrograms) SIF_Metadata() *SIF_MetadataType {
    if s.schoolprograms.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.schoolprograms.SIF_Metadata = v
      }
      }
      return s.schoolprograms.SIF_Metadata
    }
  func (s *SchoolPrograms) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.schoolprograms.SIF_Metadata == nil
    }
  func (s *SchoolPrograms) LocalCodeList() *LocalCodeListType {
    if s.schoolprograms.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.schoolprograms.LocalCodeList = v
      }
      }
      return s.schoolprograms.LocalCodeList
    }
  func (s *SchoolPrograms) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.schoolprograms.LocalCodeList == nil
    }
  func (s *SchoolPrograms) SchoolProgramList() *SchoolProgramListType {
    if s.schoolprograms.SchoolProgramList == nil {
     if v, ok:= SchoolProgramListTypePointer(SchoolProgramListType{}); ok {
      s.schoolprograms.SchoolProgramList = v
      }
      }
      return s.schoolprograms.SchoolProgramList
    }
  func (s *SchoolPrograms) SchoolProgramList_IsNil() bool {
    return s.SchoolProgramList == nil || s.schoolprograms.SchoolProgramList == nil
    }
  func (s *SchoolPrograms) SchoolInfoRefId() *String {
    if s.schoolprograms.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolprograms.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.schoolprograms.SchoolInfoRefId
    }
  func (s *SchoolPrograms) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.schoolprograms.SchoolInfoRefId == nil
    }
  func (s *SchoolPrograms) RefId() *RefIdType {
    if s.schoolprograms.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolprograms.RefId = ((*RefIdType)(v))
      }
      }
      return s.schoolprograms.RefId
    }
  func (s *SchoolPrograms) RefId_IsNil() bool {
    return s.RefId == nil || s.schoolprograms.RefId == nil
    }

func (n *NAPEventStudentLink) Unset(key string) *NAPEventStudentLink {
        switch key {
  case "PlatformStudentIdentifier":
   n.napeventstudentlink.PlatformStudentIdentifier = nil
  case "SchoolGeolocation":
   n.napeventstudentlink.SchoolGeolocation = nil
  case "TestDisruptionList":
   n.napeventstudentlink.TestDisruptionList = nil
  case "Adjustment":
   n.napeventstudentlink.Adjustment = nil
  case "StartTime":
   n.napeventstudentlink.StartTime = nil
  case "StudentPersonalRefId":
   n.napeventstudentlink.StudentPersonalRefId = nil
  case "ParticipationText":
   n.napeventstudentlink.ParticipationText = nil
  case "ParticipationCode":
   n.napeventstudentlink.ParticipationCode = nil
  case "ExemptionReason":
   n.napeventstudentlink.ExemptionReason = nil
  case "PossibleDuplicate":
   n.napeventstudentlink.PossibleDuplicate = nil
  case "Device":
   n.napeventstudentlink.Device = nil
  case "SIF_ExtendedElements":
   n.napeventstudentlink.SIF_ExtendedElements = nil
  case "LapsedTimeTest":
   n.napeventstudentlink.LapsedTimeTest = nil
  case "NAPTestRefId":
   n.napeventstudentlink.NAPTestRefId = nil
  case "SIF_Metadata":
   n.napeventstudentlink.SIF_Metadata = nil
  case "SchoolSector":
   n.napeventstudentlink.SchoolSector = nil
  case "System":
   n.napeventstudentlink.System = nil
  case "NAPJurisdiction":
   n.napeventstudentlink.NAPJurisdiction = nil
  case "NAPTestLocalId":
   n.napeventstudentlink.NAPTestLocalId = nil
  case "RefId":
   n.napeventstudentlink.RefId = nil
  case "ReportingSchoolName":
   n.napeventstudentlink.ReportingSchoolName = nil
  case "SchoolInfoRefId":
   n.napeventstudentlink.SchoolInfoRefId = nil
  case "LocalCodeList":
   n.napeventstudentlink.LocalCodeList = nil
  case "DOBRange":
   n.napeventstudentlink.DOBRange = nil
  case "SchoolACARAId":
   n.napeventstudentlink.SchoolACARAId = nil
  case "PSIOtherIdMatch":
   n.napeventstudentlink.PSIOtherIdMatch = nil
  case "PersonalDetailsChanged":
   n.napeventstudentlink.PersonalDetailsChanged = nil
  case "Date":
   n.napeventstudentlink.Date = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPEventStudentLink")
        }
        return n
}

func (n *NAPEventStudentLink) SetProperty(key string, value interface{}) *NAPEventStudentLink {
        if n == nil {
                n, _ = NAPEventStudentLinkPointer(NAPEventStudentLink{})
        }
        switch key {
    case "PlatformStudentIdentifier":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.PlatformStudentIdentifier = ((*LocalIdType)(v))
      }
    case "SchoolGeolocation":
        if !CodesetContains(AUCodeSetsSchoolLocationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolLocationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.SchoolGeolocation = ((*AUCodeSetsSchoolLocationType)(v))
      }
    case "TestDisruptionList":
    if v, ok:= TestDisruptionListTypePointer(value); ok {
      n.napeventstudentlink.TestDisruptionList = v
      }
    case "Adjustment":
    if v, ok:= AdjustmentContainerTypePointer(value); ok {
      n.napeventstudentlink.Adjustment = v
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.StartTime = ((*String)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.StudentPersonalRefId = ((*String)(v))
      }
    case "ParticipationText":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.ParticipationText = ((*String)(v))
      }
    case "ParticipationCode":
        if !CodesetContains(AUCodeSetsNAPParticipationCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPParticipationCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.ParticipationCode = ((*AUCodeSetsNAPParticipationCodeType)(v))
      }
    case "ExemptionReason":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.ExemptionReason = ((*String)(v))
      }
    case "PossibleDuplicate":
    
    if v, ok:= BoolPointer(value); ok {
      n.napeventstudentlink.PossibleDuplicate = ((*Bool)(v))
      }
    case "Device":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.Device = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.napeventstudentlink.SIF_ExtendedElements = v
      }
    case "LapsedTimeTest":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.LapsedTimeTest = ((*String)(v))
      }
    case "NAPTestRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.NAPTestRefId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.napeventstudentlink.SIF_Metadata = v
      }
    case "SchoolSector":
        if !CodesetContains(AUCodeSetsSchoolSectorCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolSectorCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.SchoolSector = ((*AUCodeSetsSchoolSectorCodeType)(v))
      }
    case "System":
        if !CodesetContains(AUCodeSetsSchoolSystemType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolSystemType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.System = ((*AUCodeSetsSchoolSystemType)(v))
      }
    case "NAPJurisdiction":
        if !CodesetContains(AUCodeSetsNAPJurisdictionType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPJurisdictionType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.NAPJurisdiction = ((*AUCodeSetsNAPJurisdictionType)(v))
      }
    case "NAPTestLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.NAPTestLocalId = ((*LocalIdType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.RefId = ((*RefIdType)(v))
      }
    case "ReportingSchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.ReportingSchoolName = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.napeventstudentlink.LocalCodeList = v
      }
    case "DOBRange":
    
    if v, ok:= BoolPointer(value); ok {
      n.napeventstudentlink.DOBRange = ((*Bool)(v))
      }
    case "SchoolACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.SchoolACARAId = ((*LocalIdType)(v))
      }
    case "PSIOtherIdMatch":
    
    if v, ok:= BoolPointer(value); ok {
      n.napeventstudentlink.PSIOtherIdMatch = ((*Bool)(v))
      }
    case "PersonalDetailsChanged":
    
    if v, ok:= BoolPointer(value); ok {
      n.napeventstudentlink.PersonalDetailsChanged = ((*Bool)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.napeventstudentlink.Date = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPEventStudentLink")
        }
        return n
}

  func (s *NAPEventStudentLink) PlatformStudentIdentifier() *LocalIdType {
    if s.napeventstudentlink.PlatformStudentIdentifier == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.PlatformStudentIdentifier = ((*LocalIdType)(v))
      }
      }
      return s.napeventstudentlink.PlatformStudentIdentifier
    }
  func (s *NAPEventStudentLink) PlatformStudentIdentifier_IsNil() bool {
    return s.PlatformStudentIdentifier == nil || s.napeventstudentlink.PlatformStudentIdentifier == nil
    }
  func (s *NAPEventStudentLink) SchoolGeolocation() *AUCodeSetsSchoolLocationType {
    if s.napeventstudentlink.SchoolGeolocation == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.SchoolGeolocation = ((*AUCodeSetsSchoolLocationType)(v))
      }
      }
      return s.napeventstudentlink.SchoolGeolocation
    }
  func (s *NAPEventStudentLink) SchoolGeolocation_IsNil() bool {
    return s.SchoolGeolocation == nil || s.napeventstudentlink.SchoolGeolocation == nil
    }
  func (s *NAPEventStudentLink) TestDisruptionList() *TestDisruptionListType {
    if s.napeventstudentlink.TestDisruptionList == nil {
     if v, ok:= TestDisruptionListTypePointer(TestDisruptionListType{}); ok {
      s.napeventstudentlink.TestDisruptionList = v
      }
      }
      return s.napeventstudentlink.TestDisruptionList
    }
  func (s *NAPEventStudentLink) TestDisruptionList_IsNil() bool {
    return s.TestDisruptionList == nil || s.napeventstudentlink.TestDisruptionList == nil
    }
  func (s *NAPEventStudentLink) Adjustment() *AdjustmentContainerType {
    if s.napeventstudentlink.Adjustment == nil {
     if v, ok:= AdjustmentContainerTypePointer(AdjustmentContainerType{}); ok {
      s.napeventstudentlink.Adjustment = v
      }
      }
      return s.napeventstudentlink.Adjustment
    }
  func (s *NAPEventStudentLink) Adjustment_IsNil() bool {
    return s.Adjustment == nil || s.napeventstudentlink.Adjustment == nil
    }
  func (s *NAPEventStudentLink) StartTime() *String {
    if s.napeventstudentlink.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.StartTime = ((*String)(v))
      }
      }
      return s.napeventstudentlink.StartTime
    }
  func (s *NAPEventStudentLink) StartTime_IsNil() bool {
    return s.StartTime == nil || s.napeventstudentlink.StartTime == nil
    }
  func (s *NAPEventStudentLink) StudentPersonalRefId() *String {
    if s.napeventstudentlink.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.napeventstudentlink.StudentPersonalRefId
    }
  func (s *NAPEventStudentLink) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.napeventstudentlink.StudentPersonalRefId == nil
    }
  func (s *NAPEventStudentLink) ParticipationText() *String {
    if s.napeventstudentlink.ParticipationText == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.ParticipationText = ((*String)(v))
      }
      }
      return s.napeventstudentlink.ParticipationText
    }
  func (s *NAPEventStudentLink) ParticipationText_IsNil() bool {
    return s.ParticipationText == nil || s.napeventstudentlink.ParticipationText == nil
    }
  func (s *NAPEventStudentLink) ParticipationCode() *AUCodeSetsNAPParticipationCodeType {
    if s.napeventstudentlink.ParticipationCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.ParticipationCode = ((*AUCodeSetsNAPParticipationCodeType)(v))
      }
      }
      return s.napeventstudentlink.ParticipationCode
    }
  func (s *NAPEventStudentLink) ParticipationCode_IsNil() bool {
    return s.ParticipationCode == nil || s.napeventstudentlink.ParticipationCode == nil
    }
  func (s *NAPEventStudentLink) ExemptionReason() *String {
    if s.napeventstudentlink.ExemptionReason == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.ExemptionReason = ((*String)(v))
      }
      }
      return s.napeventstudentlink.ExemptionReason
    }
  func (s *NAPEventStudentLink) ExemptionReason_IsNil() bool {
    return s.ExemptionReason == nil || s.napeventstudentlink.ExemptionReason == nil
    }
  func (s *NAPEventStudentLink) PossibleDuplicate() *Bool {
    if s.napeventstudentlink.PossibleDuplicate == nil {
    if v, ok:= BoolPointer(false); ok {
      s.napeventstudentlink.PossibleDuplicate = ((*Bool)(v))
      }
      }
      return s.napeventstudentlink.PossibleDuplicate
    }
  func (s *NAPEventStudentLink) PossibleDuplicate_IsNil() bool {
    return s.PossibleDuplicate == nil || s.napeventstudentlink.PossibleDuplicate == nil
    }
  func (s *NAPEventStudentLink) Device() *String {
    if s.napeventstudentlink.Device == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.Device = ((*String)(v))
      }
      }
      return s.napeventstudentlink.Device
    }
  func (s *NAPEventStudentLink) Device_IsNil() bool {
    return s.Device == nil || s.napeventstudentlink.Device == nil
    }
  func (s *NAPEventStudentLink) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.napeventstudentlink.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.napeventstudentlink.SIF_ExtendedElements = v
      }
      }
      return s.napeventstudentlink.SIF_ExtendedElements
    }
  func (s *NAPEventStudentLink) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.napeventstudentlink.SIF_ExtendedElements == nil
    }
  func (s *NAPEventStudentLink) LapsedTimeTest() *String {
    if s.napeventstudentlink.LapsedTimeTest == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.LapsedTimeTest = ((*String)(v))
      }
      }
      return s.napeventstudentlink.LapsedTimeTest
    }
  func (s *NAPEventStudentLink) LapsedTimeTest_IsNil() bool {
    return s.LapsedTimeTest == nil || s.napeventstudentlink.LapsedTimeTest == nil
    }
  func (s *NAPEventStudentLink) NAPTestRefId() *String {
    if s.napeventstudentlink.NAPTestRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.NAPTestRefId = ((*String)(v))
      }
      }
      return s.napeventstudentlink.NAPTestRefId
    }
  func (s *NAPEventStudentLink) NAPTestRefId_IsNil() bool {
    return s.NAPTestRefId == nil || s.napeventstudentlink.NAPTestRefId == nil
    }
  func (s *NAPEventStudentLink) SIF_Metadata() *SIF_MetadataType {
    if s.napeventstudentlink.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.napeventstudentlink.SIF_Metadata = v
      }
      }
      return s.napeventstudentlink.SIF_Metadata
    }
  func (s *NAPEventStudentLink) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.napeventstudentlink.SIF_Metadata == nil
    }
  func (s *NAPEventStudentLink) SchoolSector() *AUCodeSetsSchoolSectorCodeType {
    if s.napeventstudentlink.SchoolSector == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.SchoolSector = ((*AUCodeSetsSchoolSectorCodeType)(v))
      }
      }
      return s.napeventstudentlink.SchoolSector
    }
  func (s *NAPEventStudentLink) SchoolSector_IsNil() bool {
    return s.SchoolSector == nil || s.napeventstudentlink.SchoolSector == nil
    }
  func (s *NAPEventStudentLink) System() *AUCodeSetsSchoolSystemType {
    if s.napeventstudentlink.System == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.System = ((*AUCodeSetsSchoolSystemType)(v))
      }
      }
      return s.napeventstudentlink.System
    }
  func (s *NAPEventStudentLink) System_IsNil() bool {
    return s.System == nil || s.napeventstudentlink.System == nil
    }
  func (s *NAPEventStudentLink) NAPJurisdiction() *AUCodeSetsNAPJurisdictionType {
    if s.napeventstudentlink.NAPJurisdiction == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.NAPJurisdiction = ((*AUCodeSetsNAPJurisdictionType)(v))
      }
      }
      return s.napeventstudentlink.NAPJurisdiction
    }
  func (s *NAPEventStudentLink) NAPJurisdiction_IsNil() bool {
    return s.NAPJurisdiction == nil || s.napeventstudentlink.NAPJurisdiction == nil
    }
  func (s *NAPEventStudentLink) NAPTestLocalId() *LocalIdType {
    if s.napeventstudentlink.NAPTestLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.NAPTestLocalId = ((*LocalIdType)(v))
      }
      }
      return s.napeventstudentlink.NAPTestLocalId
    }
  func (s *NAPEventStudentLink) NAPTestLocalId_IsNil() bool {
    return s.NAPTestLocalId == nil || s.napeventstudentlink.NAPTestLocalId == nil
    }
  func (s *NAPEventStudentLink) RefId() *RefIdType {
    if s.napeventstudentlink.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.RefId = ((*RefIdType)(v))
      }
      }
      return s.napeventstudentlink.RefId
    }
  func (s *NAPEventStudentLink) RefId_IsNil() bool {
    return s.RefId == nil || s.napeventstudentlink.RefId == nil
    }
  func (s *NAPEventStudentLink) ReportingSchoolName() *String {
    if s.napeventstudentlink.ReportingSchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.ReportingSchoolName = ((*String)(v))
      }
      }
      return s.napeventstudentlink.ReportingSchoolName
    }
  func (s *NAPEventStudentLink) ReportingSchoolName_IsNil() bool {
    return s.ReportingSchoolName == nil || s.napeventstudentlink.ReportingSchoolName == nil
    }
  func (s *NAPEventStudentLink) SchoolInfoRefId() *String {
    if s.napeventstudentlink.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.napeventstudentlink.SchoolInfoRefId
    }
  func (s *NAPEventStudentLink) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.napeventstudentlink.SchoolInfoRefId == nil
    }
  func (s *NAPEventStudentLink) LocalCodeList() *LocalCodeListType {
    if s.napeventstudentlink.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.napeventstudentlink.LocalCodeList = v
      }
      }
      return s.napeventstudentlink.LocalCodeList
    }
  func (s *NAPEventStudentLink) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.napeventstudentlink.LocalCodeList == nil
    }
  func (s *NAPEventStudentLink) DOBRange() *Bool {
    if s.napeventstudentlink.DOBRange == nil {
    if v, ok:= BoolPointer(false); ok {
      s.napeventstudentlink.DOBRange = ((*Bool)(v))
      }
      }
      return s.napeventstudentlink.DOBRange
    }
  func (s *NAPEventStudentLink) DOBRange_IsNil() bool {
    return s.DOBRange == nil || s.napeventstudentlink.DOBRange == nil
    }
  func (s *NAPEventStudentLink) SchoolACARAId() *LocalIdType {
    if s.napeventstudentlink.SchoolACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.SchoolACARAId = ((*LocalIdType)(v))
      }
      }
      return s.napeventstudentlink.SchoolACARAId
    }
  func (s *NAPEventStudentLink) SchoolACARAId_IsNil() bool {
    return s.SchoolACARAId == nil || s.napeventstudentlink.SchoolACARAId == nil
    }
  func (s *NAPEventStudentLink) PSIOtherIdMatch() *Bool {
    if s.napeventstudentlink.PSIOtherIdMatch == nil {
    if v, ok:= BoolPointer(false); ok {
      s.napeventstudentlink.PSIOtherIdMatch = ((*Bool)(v))
      }
      }
      return s.napeventstudentlink.PSIOtherIdMatch
    }
  func (s *NAPEventStudentLink) PSIOtherIdMatch_IsNil() bool {
    return s.PSIOtherIdMatch == nil || s.napeventstudentlink.PSIOtherIdMatch == nil
    }
  func (s *NAPEventStudentLink) PersonalDetailsChanged() *Bool {
    if s.napeventstudentlink.PersonalDetailsChanged == nil {
    if v, ok:= BoolPointer(false); ok {
      s.napeventstudentlink.PersonalDetailsChanged = ((*Bool)(v))
      }
      }
      return s.napeventstudentlink.PersonalDetailsChanged
    }
  func (s *NAPEventStudentLink) PersonalDetailsChanged_IsNil() bool {
    return s.PersonalDetailsChanged == nil || s.napeventstudentlink.PersonalDetailsChanged == nil
    }
  func (s *NAPEventStudentLink) Date() *String {
    if s.napeventstudentlink.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.napeventstudentlink.Date = ((*String)(v))
      }
      }
      return s.napeventstudentlink.Date
    }
  func (s *NAPEventStudentLink) Date_IsNil() bool {
    return s.Date == nil || s.napeventstudentlink.Date == nil
    }

func (n *Identity) Unset(key string) *Identity {
        switch key {
  case "AuthenticationSourceGlobalUID":
   n.identity.AuthenticationSourceGlobalUID = nil
  case "AuthenticationSource":
   n.identity.AuthenticationSource = nil
  case "SIF_ExtendedElements":
   n.identity.SIF_ExtendedElements = nil
  case "PasswordList":
   n.identity.PasswordList = nil
  case "SIF_Metadata":
   n.identity.SIF_Metadata = nil
  case "LocalCodeList":
   n.identity.LocalCodeList = nil
  case "SIF_RefId":
   n.identity.SIF_RefId = nil
  case "IdentityAssertions":
   n.identity.IdentityAssertions = nil
  case "RefId":
   n.identity.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Identity")
        }
        return n
}

func (n *Identity) SetProperty(key string, value interface{}) *Identity {
        if n == nil {
                n, _ = IdentityPointer(Identity{})
        }
        switch key {
    case "AuthenticationSourceGlobalUID":
    
    if v, ok:= StringPointer(value); ok {
      n.identity.AuthenticationSourceGlobalUID = ((*String)(v))
      }
    case "AuthenticationSource":
    
    if v, ok:= StringPointer(value); ok {
      n.identity.AuthenticationSource = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.identity.SIF_ExtendedElements = v
      }
    case "PasswordList":
    if v, ok:= PasswordListTypePointer(value); ok {
      n.identity.PasswordList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.identity.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.identity.LocalCodeList = v
      }
    case "SIF_RefId":
    if v, ok:= Identity_SIF_RefIdPointer(value); ok {
      n.identity.SIF_RefId = v
      }
    case "IdentityAssertions":
    if v, ok:= IdentityAssertionsTypePointer(value); ok {
      n.identity.IdentityAssertions = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.identity.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Identity")
        }
        return n
}

  func (s *Identity) AuthenticationSourceGlobalUID() *String {
    if s.identity.AuthenticationSourceGlobalUID == nil {
    if v, ok:= StringPointer(""); ok {
      s.identity.AuthenticationSourceGlobalUID = ((*String)(v))
      }
      }
      return s.identity.AuthenticationSourceGlobalUID
    }
  func (s *Identity) AuthenticationSourceGlobalUID_IsNil() bool {
    return s.AuthenticationSourceGlobalUID == nil || s.identity.AuthenticationSourceGlobalUID == nil
    }
  func (s *Identity) AuthenticationSource() *String {
    if s.identity.AuthenticationSource == nil {
    if v, ok:= StringPointer(""); ok {
      s.identity.AuthenticationSource = ((*String)(v))
      }
      }
      return s.identity.AuthenticationSource
    }
  func (s *Identity) AuthenticationSource_IsNil() bool {
    return s.AuthenticationSource == nil || s.identity.AuthenticationSource == nil
    }
  func (s *Identity) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.identity.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.identity.SIF_ExtendedElements = v
      }
      }
      return s.identity.SIF_ExtendedElements
    }
  func (s *Identity) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.identity.SIF_ExtendedElements == nil
    }
  func (s *Identity) PasswordList() *PasswordListType {
    if s.identity.PasswordList == nil {
     if v, ok:= PasswordListTypePointer(PasswordListType{}); ok {
      s.identity.PasswordList = v
      }
      }
      return s.identity.PasswordList
    }
  func (s *Identity) PasswordList_IsNil() bool {
    return s.PasswordList == nil || s.identity.PasswordList == nil
    }
  func (s *Identity) SIF_Metadata() *SIF_MetadataType {
    if s.identity.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.identity.SIF_Metadata = v
      }
      }
      return s.identity.SIF_Metadata
    }
  func (s *Identity) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.identity.SIF_Metadata == nil
    }
  func (s *Identity) LocalCodeList() *LocalCodeListType {
    if s.identity.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.identity.LocalCodeList = v
      }
      }
      return s.identity.LocalCodeList
    }
  func (s *Identity) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.identity.LocalCodeList == nil
    }
  func (s *Identity) SIF_RefId() *Identity_SIF_RefId {
    if s.identity.SIF_RefId == nil {
     if v, ok:= Identity_SIF_RefIdPointer(Identity_SIF_RefId{}); ok {
      s.identity.SIF_RefId = v
      }
      }
      return s.identity.SIF_RefId
    }
  func (s *Identity) SIF_RefId_IsNil() bool {
    return s.SIF_RefId == nil || s.identity.SIF_RefId == nil
    }
  func (s *Identity) IdentityAssertions() *IdentityAssertionsType {
    if s.identity.IdentityAssertions == nil {
     if v, ok:= IdentityAssertionsTypePointer(IdentityAssertionsType{}); ok {
      s.identity.IdentityAssertions = v
      }
      }
      return s.identity.IdentityAssertions
    }
  func (s *Identity) IdentityAssertions_IsNil() bool {
    return s.IdentityAssertions == nil || s.identity.IdentityAssertions == nil
    }
  func (s *Identity) RefId() *RefIdType {
    if s.identity.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.identity.RefId = ((*RefIdType)(v))
      }
      }
      return s.identity.RefId
    }
  func (s *Identity) RefId_IsNil() bool {
    return s.RefId == nil || s.identity.RefId == nil
    }

func (n *PersonInvolvementType) Unset(key string) *PersonInvolvementType {
        switch key {
  case "PersonRefId":
   n.personinvolvementtype.PersonRefId = nil
  case "ShortName":
   n.personinvolvementtype.ShortName = nil
  case "HowInvolved":
   n.personinvolvementtype.HowInvolved = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonInvolvementType")
        }
        return n
}

func (n *PersonInvolvementType) SetProperty(key string, value interface{}) *PersonInvolvementType {
        if n == nil {
                n, _ = PersonInvolvementTypePointer(PersonInvolvementType{})
        }
        switch key {
    case "PersonRefId":
    if v, ok:= PersonInvolvementType_PersonRefIdPointer(value); ok {
      n.personinvolvementtype.PersonRefId = v
      }
    case "ShortName":
    
    if v, ok:= StringPointer(value); ok {
      n.personinvolvementtype.ShortName = ((*String)(v))
      }
    case "HowInvolved":
    
    if v, ok:= StringPointer(value); ok {
      n.personinvolvementtype.HowInvolved = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonInvolvementType")
        }
        return n
}

  func (s *PersonInvolvementType) PersonRefId() *PersonInvolvementType_PersonRefId {
    if s.personinvolvementtype.PersonRefId == nil {
     if v, ok:= PersonInvolvementType_PersonRefIdPointer(PersonInvolvementType_PersonRefId{}); ok {
      s.personinvolvementtype.PersonRefId = v
      }
      }
      return s.personinvolvementtype.PersonRefId
    }
  func (s *PersonInvolvementType) PersonRefId_IsNil() bool {
    return s.PersonRefId == nil || s.personinvolvementtype.PersonRefId == nil
    }
  func (s *PersonInvolvementType) ShortName() *String {
    if s.personinvolvementtype.ShortName == nil {
    if v, ok:= StringPointer(""); ok {
      s.personinvolvementtype.ShortName = ((*String)(v))
      }
      }
      return s.personinvolvementtype.ShortName
    }
  func (s *PersonInvolvementType) ShortName_IsNil() bool {
    return s.ShortName == nil || s.personinvolvementtype.ShortName == nil
    }
  func (s *PersonInvolvementType) HowInvolved() *String {
    if s.personinvolvementtype.HowInvolved == nil {
    if v, ok:= StringPointer(""); ok {
      s.personinvolvementtype.HowInvolved = ((*String)(v))
      }
      }
      return s.personinvolvementtype.HowInvolved
    }
  func (s *PersonInvolvementType) HowInvolved_IsNil() bool {
    return s.HowInvolved == nil || s.personinvolvementtype.HowInvolved == nil
    }

func (n *TimeTableScheduleCellType) Unset(key string) *TimeTableScheduleCellType {
        switch key {
  case "SchoolInfoRefId":
   n.timetableschedulecelltype.SchoolInfoRefId = nil
  case "RoomNumber":
   n.timetableschedulecelltype.RoomNumber = nil
  case "PeriodId":
   n.timetableschedulecelltype.PeriodId = nil
  case "TimeTableSubjectRefId":
   n.timetableschedulecelltype.TimeTableSubjectRefId = nil
  case "CellType":
   n.timetableschedulecelltype.CellType = nil
  case "StaffPersonalRefId":
   n.timetableschedulecelltype.StaffPersonalRefId = nil
  case "RoomInfoRefId":
   n.timetableschedulecelltype.RoomInfoRefId = nil
  case "TeacherList":
   n.timetableschedulecelltype.TeacherList = nil
  case "SubjectLocalId":
   n.timetableschedulecelltype.SubjectLocalId = nil
  case "SchoolLocalId":
   n.timetableschedulecelltype.SchoolLocalId = nil
  case "TimeTableLocalId":
   n.timetableschedulecelltype.TimeTableLocalId = nil
  case "DayId":
   n.timetableschedulecelltype.DayId = nil
  case "RoomList":
   n.timetableschedulecelltype.RoomList = nil
  case "StaffLocalId":
   n.timetableschedulecelltype.StaffLocalId = nil
  case "TeachingGroupGUID":
   n.timetableschedulecelltype.TeachingGroupGUID = nil
  case "TeachingGroupLocalId":
   n.timetableschedulecelltype.TeachingGroupLocalId = nil
  case "TimeTableScheduleCellLocalId":
   n.timetableschedulecelltype.TimeTableScheduleCellLocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableScheduleCellType")
        }
        return n
}

func (n *TimeTableScheduleCellType) SetProperty(key string, value interface{}) *TimeTableScheduleCellType {
        if n == nil {
                n, _ = TimeTableScheduleCellTypePointer(TimeTableScheduleCellType{})
        }
        switch key {
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.SchoolInfoRefId = ((*String)(v))
      }
    case "RoomNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.RoomNumber = ((*HomeroomNumberType)(v))
      }
    case "PeriodId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.PeriodId = ((*LocalIdType)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.TimeTableSubjectRefId = ((*String)(v))
      }
    case "CellType":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.CellType = ((*String)(v))
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.StaffPersonalRefId = ((*String)(v))
      }
    case "RoomInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.RoomInfoRefId = ((*String)(v))
      }
    case "TeacherList":
    if v, ok:= ScheduledTeacherListTypePointer(value); ok {
      n.timetableschedulecelltype.TeacherList = v
      }
    case "SubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.SubjectLocalId = ((*LocalIdType)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "TimeTableLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.TimeTableLocalId = ((*LocalIdType)(v))
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.DayId = ((*LocalIdType)(v))
      }
    case "RoomList":
    if v, ok:= RoomListTypePointer(value); ok {
      n.timetableschedulecelltype.RoomList = v
      }
    case "StaffLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.StaffLocalId = ((*LocalIdType)(v))
      }
    case "TeachingGroupGUID":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.TeachingGroupGUID = ((*String)(v))
      }
    case "TeachingGroupLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.TeachingGroupLocalId = ((*LocalIdType)(v))
      }
    case "TimeTableScheduleCellLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableschedulecelltype.TimeTableScheduleCellLocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableScheduleCellType")
        }
        return n
}

  func (s *TimeTableScheduleCellType) SchoolInfoRefId() *String {
    if s.timetableschedulecelltype.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.timetableschedulecelltype.SchoolInfoRefId
    }
  func (s *TimeTableScheduleCellType) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.timetableschedulecelltype.SchoolInfoRefId == nil
    }
  func (s *TimeTableScheduleCellType) RoomNumber() *HomeroomNumberType {
    if s.timetableschedulecelltype.RoomNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.RoomNumber = ((*HomeroomNumberType)(v))
      }
      }
      return s.timetableschedulecelltype.RoomNumber
    }
  func (s *TimeTableScheduleCellType) RoomNumber_IsNil() bool {
    return s.RoomNumber == nil || s.timetableschedulecelltype.RoomNumber == nil
    }
  func (s *TimeTableScheduleCellType) PeriodId() *LocalIdType {
    if s.timetableschedulecelltype.PeriodId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.PeriodId = ((*LocalIdType)(v))
      }
      }
      return s.timetableschedulecelltype.PeriodId
    }
  func (s *TimeTableScheduleCellType) PeriodId_IsNil() bool {
    return s.PeriodId == nil || s.timetableschedulecelltype.PeriodId == nil
    }
  func (s *TimeTableScheduleCellType) TimeTableSubjectRefId() *String {
    if s.timetableschedulecelltype.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.TimeTableSubjectRefId = ((*String)(v))
      }
      }
      return s.timetableschedulecelltype.TimeTableSubjectRefId
    }
  func (s *TimeTableScheduleCellType) TimeTableSubjectRefId_IsNil() bool {
    return s.TimeTableSubjectRefId == nil || s.timetableschedulecelltype.TimeTableSubjectRefId == nil
    }
  func (s *TimeTableScheduleCellType) CellType() *String {
    if s.timetableschedulecelltype.CellType == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.CellType = ((*String)(v))
      }
      }
      return s.timetableschedulecelltype.CellType
    }
  func (s *TimeTableScheduleCellType) CellType_IsNil() bool {
    return s.CellType == nil || s.timetableschedulecelltype.CellType == nil
    }
  func (s *TimeTableScheduleCellType) StaffPersonalRefId() *String {
    if s.timetableschedulecelltype.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.timetableschedulecelltype.StaffPersonalRefId
    }
  func (s *TimeTableScheduleCellType) StaffPersonalRefId_IsNil() bool {
    return s.StaffPersonalRefId == nil || s.timetableschedulecelltype.StaffPersonalRefId == nil
    }
  func (s *TimeTableScheduleCellType) RoomInfoRefId() *String {
    if s.timetableschedulecelltype.RoomInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.RoomInfoRefId = ((*String)(v))
      }
      }
      return s.timetableschedulecelltype.RoomInfoRefId
    }
  func (s *TimeTableScheduleCellType) RoomInfoRefId_IsNil() bool {
    return s.RoomInfoRefId == nil || s.timetableschedulecelltype.RoomInfoRefId == nil
    }
  func (s *TimeTableScheduleCellType) TeacherList() *ScheduledTeacherListType {
    if s.timetableschedulecelltype.TeacherList == nil {
     if v, ok:= ScheduledTeacherListTypePointer(ScheduledTeacherListType{}); ok {
      s.timetableschedulecelltype.TeacherList = v
      }
      }
      return s.timetableschedulecelltype.TeacherList
    }
  func (s *TimeTableScheduleCellType) TeacherList_IsNil() bool {
    return s.TeacherList == nil || s.timetableschedulecelltype.TeacherList == nil
    }
  func (s *TimeTableScheduleCellType) SubjectLocalId() *LocalIdType {
    if s.timetableschedulecelltype.SubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.SubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetableschedulecelltype.SubjectLocalId
    }
  func (s *TimeTableScheduleCellType) SubjectLocalId_IsNil() bool {
    return s.SubjectLocalId == nil || s.timetableschedulecelltype.SubjectLocalId == nil
    }
  func (s *TimeTableScheduleCellType) SchoolLocalId() *LocalIdType {
    if s.timetableschedulecelltype.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetableschedulecelltype.SchoolLocalId
    }
  func (s *TimeTableScheduleCellType) SchoolLocalId_IsNil() bool {
    return s.SchoolLocalId == nil || s.timetableschedulecelltype.SchoolLocalId == nil
    }
  func (s *TimeTableScheduleCellType) TimeTableLocalId() *LocalIdType {
    if s.timetableschedulecelltype.TimeTableLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.TimeTableLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetableschedulecelltype.TimeTableLocalId
    }
  func (s *TimeTableScheduleCellType) TimeTableLocalId_IsNil() bool {
    return s.TimeTableLocalId == nil || s.timetableschedulecelltype.TimeTableLocalId == nil
    }
  func (s *TimeTableScheduleCellType) DayId() *LocalIdType {
    if s.timetableschedulecelltype.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.DayId = ((*LocalIdType)(v))
      }
      }
      return s.timetableschedulecelltype.DayId
    }
  func (s *TimeTableScheduleCellType) DayId_IsNil() bool {
    return s.DayId == nil || s.timetableschedulecelltype.DayId == nil
    }
  func (s *TimeTableScheduleCellType) RoomList() *RoomListType {
    if s.timetableschedulecelltype.RoomList == nil {
     if v, ok:= RoomListTypePointer(RoomListType{}); ok {
      s.timetableschedulecelltype.RoomList = v
      }
      }
      return s.timetableschedulecelltype.RoomList
    }
  func (s *TimeTableScheduleCellType) RoomList_IsNil() bool {
    return s.RoomList == nil || s.timetableschedulecelltype.RoomList == nil
    }
  func (s *TimeTableScheduleCellType) StaffLocalId() *LocalIdType {
    if s.timetableschedulecelltype.StaffLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.StaffLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetableschedulecelltype.StaffLocalId
    }
  func (s *TimeTableScheduleCellType) StaffLocalId_IsNil() bool {
    return s.StaffLocalId == nil || s.timetableschedulecelltype.StaffLocalId == nil
    }
  func (s *TimeTableScheduleCellType) TeachingGroupGUID() *String {
    if s.timetableschedulecelltype.TeachingGroupGUID == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.TeachingGroupGUID = ((*String)(v))
      }
      }
      return s.timetableschedulecelltype.TeachingGroupGUID
    }
  func (s *TimeTableScheduleCellType) TeachingGroupGUID_IsNil() bool {
    return s.TeachingGroupGUID == nil || s.timetableschedulecelltype.TeachingGroupGUID == nil
    }
  func (s *TimeTableScheduleCellType) TeachingGroupLocalId() *LocalIdType {
    if s.timetableschedulecelltype.TeachingGroupLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.TeachingGroupLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetableschedulecelltype.TeachingGroupLocalId
    }
  func (s *TimeTableScheduleCellType) TeachingGroupLocalId_IsNil() bool {
    return s.TeachingGroupLocalId == nil || s.timetableschedulecelltype.TeachingGroupLocalId == nil
    }
  func (s *TimeTableScheduleCellType) TimeTableScheduleCellLocalId() *LocalIdType {
    if s.timetableschedulecelltype.TimeTableScheduleCellLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableschedulecelltype.TimeTableScheduleCellLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetableschedulecelltype.TimeTableScheduleCellLocalId
    }
  func (s *TimeTableScheduleCellType) TimeTableScheduleCellLocalId_IsNil() bool {
    return s.TimeTableScheduleCellLocalId == nil || s.timetableschedulecelltype.TimeTableScheduleCellLocalId == nil
    }

func (n *WellbeingResponse) Unset(key string) *WellbeingResponse {
        switch key {
  case "WellbeingResponseEndDate":
   n.wellbeingresponse.WellbeingResponseEndDate = nil
  case "Date":
   n.wellbeingresponse.Date = nil
  case "PersonInvolvementList":
   n.wellbeingresponse.PersonInvolvementList = nil
  case "SchoolInfoRefId":
   n.wellbeingresponse.SchoolInfoRefId = nil
  case "WellbeingResponseNotes":
   n.wellbeingresponse.WellbeingResponseNotes = nil
  case "LocalCodeList":
   n.wellbeingresponse.LocalCodeList = nil
  case "DocumentList":
   n.wellbeingresponse.DocumentList = nil
  case "SIF_ExtendedElements":
   n.wellbeingresponse.SIF_ExtendedElements = nil
  case "WellbeingResponseStartDate":
   n.wellbeingresponse.WellbeingResponseStartDate = nil
  case "OtherResponse":
   n.wellbeingresponse.OtherResponse = nil
  case "Award":
   n.wellbeingresponse.Award = nil
  case "LocalId":
   n.wellbeingresponse.LocalId = nil
  case "Suspension":
   n.wellbeingresponse.Suspension = nil
  case "StudentPersonalRefId":
   n.wellbeingresponse.StudentPersonalRefId = nil
  case "WellbeingResponseCategory":
   n.wellbeingresponse.WellbeingResponseCategory = nil
  case "RefId":
   n.wellbeingresponse.RefId = nil
  case "Detention":
   n.wellbeingresponse.Detention = nil
  case "SIF_Metadata":
   n.wellbeingresponse.SIF_Metadata = nil
  case "PlanRequired":
   n.wellbeingresponse.PlanRequired = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingResponse")
        }
        return n
}

func (n *WellbeingResponse) SetProperty(key string, value interface{}) *WellbeingResponse {
        if n == nil {
                n, _ = WellbeingResponsePointer(WellbeingResponse{})
        }
        switch key {
    case "WellbeingResponseEndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingresponse.WellbeingResponseEndDate = ((*String)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingresponse.Date = ((*String)(v))
      }
    case "PersonInvolvementList":
    if v, ok:= PersonInvolvementListTypePointer(value); ok {
      n.wellbeingresponse.PersonInvolvementList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingresponse.SchoolInfoRefId = ((*String)(v))
      }
    case "WellbeingResponseNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingresponse.WellbeingResponseNotes = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.wellbeingresponse.LocalCodeList = v
      }
    case "DocumentList":
    if v, ok:= WellbeingDocumentListTypePointer(value); ok {
      n.wellbeingresponse.DocumentList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.wellbeingresponse.SIF_ExtendedElements = v
      }
    case "WellbeingResponseStartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingresponse.WellbeingResponseStartDate = ((*String)(v))
      }
    case "OtherResponse":
    if v, ok:= OtherWellbeingResponseContainerTypePointer(value); ok {
      n.wellbeingresponse.OtherResponse = v
      }
    case "Award":
    if v, ok:= AwardContainerTypePointer(value); ok {
      n.wellbeingresponse.Award = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingresponse.LocalId = ((*LocalIdType)(v))
      }
    case "Suspension":
    if v, ok:= SuspensionContainerTypePointer(value); ok {
      n.wellbeingresponse.Suspension = v
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingresponse.StudentPersonalRefId = ((*String)(v))
      }
    case "WellbeingResponseCategory":
        if !CodesetContains(AUCodeSetsWellbeingResponseCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingResponseCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.wellbeingresponse.WellbeingResponseCategory = ((*AUCodeSetsWellbeingResponseCategoryType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingresponse.RefId = ((*RefIdType)(v))
      }
    case "Detention":
    if v, ok:= DetentionContainerTypePointer(value); ok {
      n.wellbeingresponse.Detention = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.wellbeingresponse.SIF_Metadata = v
      }
    case "PlanRequired":
    if v, ok:= PlanRequiredContainerTypePointer(value); ok {
      n.wellbeingresponse.PlanRequired = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingResponse")
        }
        return n
}

  func (s *WellbeingResponse) WellbeingResponseEndDate() *String {
    if s.wellbeingresponse.WellbeingResponseEndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingresponse.WellbeingResponseEndDate = ((*String)(v))
      }
      }
      return s.wellbeingresponse.WellbeingResponseEndDate
    }
  func (s *WellbeingResponse) WellbeingResponseEndDate_IsNil() bool {
    return s.WellbeingResponseEndDate == nil || s.wellbeingresponse.WellbeingResponseEndDate == nil
    }
  func (s *WellbeingResponse) Date() *String {
    if s.wellbeingresponse.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingresponse.Date = ((*String)(v))
      }
      }
      return s.wellbeingresponse.Date
    }
  func (s *WellbeingResponse) Date_IsNil() bool {
    return s.Date == nil || s.wellbeingresponse.Date == nil
    }
  func (s *WellbeingResponse) PersonInvolvementList() *PersonInvolvementListType {
    if s.wellbeingresponse.PersonInvolvementList == nil {
     if v, ok:= PersonInvolvementListTypePointer(PersonInvolvementListType{}); ok {
      s.wellbeingresponse.PersonInvolvementList = v
      }
      }
      return s.wellbeingresponse.PersonInvolvementList
    }
  func (s *WellbeingResponse) PersonInvolvementList_IsNil() bool {
    return s.PersonInvolvementList == nil || s.wellbeingresponse.PersonInvolvementList == nil
    }
  func (s *WellbeingResponse) SchoolInfoRefId() *String {
    if s.wellbeingresponse.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingresponse.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.wellbeingresponse.SchoolInfoRefId
    }
  func (s *WellbeingResponse) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.wellbeingresponse.SchoolInfoRefId == nil
    }
  func (s *WellbeingResponse) WellbeingResponseNotes() *String {
    if s.wellbeingresponse.WellbeingResponseNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingresponse.WellbeingResponseNotes = ((*String)(v))
      }
      }
      return s.wellbeingresponse.WellbeingResponseNotes
    }
  func (s *WellbeingResponse) WellbeingResponseNotes_IsNil() bool {
    return s.WellbeingResponseNotes == nil || s.wellbeingresponse.WellbeingResponseNotes == nil
    }
  func (s *WellbeingResponse) LocalCodeList() *LocalCodeListType {
    if s.wellbeingresponse.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.wellbeingresponse.LocalCodeList = v
      }
      }
      return s.wellbeingresponse.LocalCodeList
    }
  func (s *WellbeingResponse) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.wellbeingresponse.LocalCodeList == nil
    }
  func (s *WellbeingResponse) DocumentList() *WellbeingDocumentListType {
    if s.wellbeingresponse.DocumentList == nil {
     if v, ok:= WellbeingDocumentListTypePointer(WellbeingDocumentListType{}); ok {
      s.wellbeingresponse.DocumentList = v
      }
      }
      return s.wellbeingresponse.DocumentList
    }
  func (s *WellbeingResponse) DocumentList_IsNil() bool {
    return s.DocumentList == nil || s.wellbeingresponse.DocumentList == nil
    }
  func (s *WellbeingResponse) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.wellbeingresponse.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.wellbeingresponse.SIF_ExtendedElements = v
      }
      }
      return s.wellbeingresponse.SIF_ExtendedElements
    }
  func (s *WellbeingResponse) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.wellbeingresponse.SIF_ExtendedElements == nil
    }
  func (s *WellbeingResponse) WellbeingResponseStartDate() *String {
    if s.wellbeingresponse.WellbeingResponseStartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingresponse.WellbeingResponseStartDate = ((*String)(v))
      }
      }
      return s.wellbeingresponse.WellbeingResponseStartDate
    }
  func (s *WellbeingResponse) WellbeingResponseStartDate_IsNil() bool {
    return s.WellbeingResponseStartDate == nil || s.wellbeingresponse.WellbeingResponseStartDate == nil
    }
  func (s *WellbeingResponse) OtherResponse() *OtherWellbeingResponseContainerType {
    if s.wellbeingresponse.OtherResponse == nil {
     if v, ok:= OtherWellbeingResponseContainerTypePointer(OtherWellbeingResponseContainerType{}); ok {
      s.wellbeingresponse.OtherResponse = v
      }
      }
      return s.wellbeingresponse.OtherResponse
    }
  func (s *WellbeingResponse) OtherResponse_IsNil() bool {
    return s.OtherResponse == nil || s.wellbeingresponse.OtherResponse == nil
    }
  func (s *WellbeingResponse) Award() *AwardContainerType {
    if s.wellbeingresponse.Award == nil {
     if v, ok:= AwardContainerTypePointer(AwardContainerType{}); ok {
      s.wellbeingresponse.Award = v
      }
      }
      return s.wellbeingresponse.Award
    }
  func (s *WellbeingResponse) Award_IsNil() bool {
    return s.Award == nil || s.wellbeingresponse.Award == nil
    }
  func (s *WellbeingResponse) LocalId() *LocalIdType {
    if s.wellbeingresponse.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingresponse.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.wellbeingresponse.LocalId
    }
  func (s *WellbeingResponse) LocalId_IsNil() bool {
    return s.LocalId == nil || s.wellbeingresponse.LocalId == nil
    }
  func (s *WellbeingResponse) Suspension() *SuspensionContainerType {
    if s.wellbeingresponse.Suspension == nil {
     if v, ok:= SuspensionContainerTypePointer(SuspensionContainerType{}); ok {
      s.wellbeingresponse.Suspension = v
      }
      }
      return s.wellbeingresponse.Suspension
    }
  func (s *WellbeingResponse) Suspension_IsNil() bool {
    return s.Suspension == nil || s.wellbeingresponse.Suspension == nil
    }
  func (s *WellbeingResponse) StudentPersonalRefId() *String {
    if s.wellbeingresponse.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingresponse.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.wellbeingresponse.StudentPersonalRefId
    }
  func (s *WellbeingResponse) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.wellbeingresponse.StudentPersonalRefId == nil
    }
  func (s *WellbeingResponse) WellbeingResponseCategory() *AUCodeSetsWellbeingResponseCategoryType {
    if s.wellbeingresponse.WellbeingResponseCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingresponse.WellbeingResponseCategory = ((*AUCodeSetsWellbeingResponseCategoryType)(v))
      }
      }
      return s.wellbeingresponse.WellbeingResponseCategory
    }
  func (s *WellbeingResponse) WellbeingResponseCategory_IsNil() bool {
    return s.WellbeingResponseCategory == nil || s.wellbeingresponse.WellbeingResponseCategory == nil
    }
  func (s *WellbeingResponse) RefId() *RefIdType {
    if s.wellbeingresponse.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingresponse.RefId = ((*RefIdType)(v))
      }
      }
      return s.wellbeingresponse.RefId
    }
  func (s *WellbeingResponse) RefId_IsNil() bool {
    return s.RefId == nil || s.wellbeingresponse.RefId == nil
    }
  func (s *WellbeingResponse) Detention() *DetentionContainerType {
    if s.wellbeingresponse.Detention == nil {
     if v, ok:= DetentionContainerTypePointer(DetentionContainerType{}); ok {
      s.wellbeingresponse.Detention = v
      }
      }
      return s.wellbeingresponse.Detention
    }
  func (s *WellbeingResponse) Detention_IsNil() bool {
    return s.Detention == nil || s.wellbeingresponse.Detention == nil
    }
  func (s *WellbeingResponse) SIF_Metadata() *SIF_MetadataType {
    if s.wellbeingresponse.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.wellbeingresponse.SIF_Metadata = v
      }
      }
      return s.wellbeingresponse.SIF_Metadata
    }
  func (s *WellbeingResponse) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.wellbeingresponse.SIF_Metadata == nil
    }
  func (s *WellbeingResponse) PlanRequired() *PlanRequiredContainerType {
    if s.wellbeingresponse.PlanRequired == nil {
     if v, ok:= PlanRequiredContainerTypePointer(PlanRequiredContainerType{}); ok {
      s.wellbeingresponse.PlanRequired = v
      }
      }
      return s.wellbeingresponse.PlanRequired
    }
  func (s *WellbeingResponse) PlanRequired_IsNil() bool {
    return s.PlanRequired == nil || s.wellbeingresponse.PlanRequired == nil
    }

func (n *TimeTableCell) Unset(key string) *TimeTableCell {
        switch key {
  case "RefId":
   n.timetablecell.RefId = nil
  case "TeachingGroupLocalId":
   n.timetablecell.TeachingGroupLocalId = nil
  case "SubjectLocalId":
   n.timetablecell.SubjectLocalId = nil
  case "SIF_Metadata":
   n.timetablecell.SIF_Metadata = nil
  case "SchoolLocalId":
   n.timetablecell.SchoolLocalId = nil
  case "TimeTableLocalId":
   n.timetablecell.TimeTableLocalId = nil
  case "RoomList":
   n.timetablecell.RoomList = nil
  case "DayId":
   n.timetablecell.DayId = nil
  case "StaffLocalId":
   n.timetablecell.StaffLocalId = nil
  case "TimeTableRefId":
   n.timetablecell.TimeTableRefId = nil
  case "CellType":
   n.timetablecell.CellType = nil
  case "StaffPersonalRefId":
   n.timetablecell.StaffPersonalRefId = nil
  case "RoomInfoRefId":
   n.timetablecell.RoomInfoRefId = nil
  case "TeacherList":
   n.timetablecell.TeacherList = nil
  case "LocalCodeList":
   n.timetablecell.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.timetablecell.SIF_ExtendedElements = nil
  case "TeachingGroupRefId":
   n.timetablecell.TeachingGroupRefId = nil
  case "SchoolInfoRefId":
   n.timetablecell.SchoolInfoRefId = nil
  case "RoomNumber":
   n.timetablecell.RoomNumber = nil
  case "TimeTableSubjectRefId":
   n.timetablecell.TimeTableSubjectRefId = nil
  case "PeriodId":
   n.timetablecell.PeriodId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableCell")
        }
        return n
}

func (n *TimeTableCell) SetProperty(key string, value interface{}) *TimeTableCell {
        if n == nil {
                n, _ = TimeTableCellPointer(TimeTableCell{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.RefId = ((*RefIdType)(v))
      }
    case "TeachingGroupLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.TeachingGroupLocalId = ((*LocalIdType)(v))
      }
    case "SubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.SubjectLocalId = ((*LocalIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.timetablecell.SIF_Metadata = v
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "TimeTableLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.TimeTableLocalId = ((*LocalIdType)(v))
      }
    case "RoomList":
    if v, ok:= RoomListTypePointer(value); ok {
      n.timetablecell.RoomList = v
      }
    case "DayId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.DayId = ((*LocalIdType)(v))
      }
    case "StaffLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.StaffLocalId = ((*LocalIdType)(v))
      }
    case "TimeTableRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.TimeTableRefId = ((*String)(v))
      }
    case "CellType":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.CellType = ((*String)(v))
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.StaffPersonalRefId = ((*String)(v))
      }
    case "RoomInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.RoomInfoRefId = ((*String)(v))
      }
    case "TeacherList":
    if v, ok:= ScheduledTeacherListTypePointer(value); ok {
      n.timetablecell.TeacherList = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.timetablecell.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.timetablecell.SIF_ExtendedElements = v
      }
    case "TeachingGroupRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.TeachingGroupRefId = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.SchoolInfoRefId = ((*String)(v))
      }
    case "RoomNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.RoomNumber = ((*HomeroomNumberType)(v))
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.TimeTableSubjectRefId = ((*String)(v))
      }
    case "PeriodId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetablecell.PeriodId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTableCell")
        }
        return n
}

  func (s *TimeTableCell) RefId() *RefIdType {
    if s.timetablecell.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.RefId = ((*RefIdType)(v))
      }
      }
      return s.timetablecell.RefId
    }
  func (s *TimeTableCell) RefId_IsNil() bool {
    return s.RefId == nil || s.timetablecell.RefId == nil
    }
  func (s *TimeTableCell) TeachingGroupLocalId() *LocalIdType {
    if s.timetablecell.TeachingGroupLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.TeachingGroupLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetablecell.TeachingGroupLocalId
    }
  func (s *TimeTableCell) TeachingGroupLocalId_IsNil() bool {
    return s.TeachingGroupLocalId == nil || s.timetablecell.TeachingGroupLocalId == nil
    }
  func (s *TimeTableCell) SubjectLocalId() *LocalIdType {
    if s.timetablecell.SubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.SubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetablecell.SubjectLocalId
    }
  func (s *TimeTableCell) SubjectLocalId_IsNil() bool {
    return s.SubjectLocalId == nil || s.timetablecell.SubjectLocalId == nil
    }
  func (s *TimeTableCell) SIF_Metadata() *SIF_MetadataType {
    if s.timetablecell.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.timetablecell.SIF_Metadata = v
      }
      }
      return s.timetablecell.SIF_Metadata
    }
  func (s *TimeTableCell) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.timetablecell.SIF_Metadata == nil
    }
  func (s *TimeTableCell) SchoolLocalId() *LocalIdType {
    if s.timetablecell.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetablecell.SchoolLocalId
    }
  func (s *TimeTableCell) SchoolLocalId_IsNil() bool {
    return s.SchoolLocalId == nil || s.timetablecell.SchoolLocalId == nil
    }
  func (s *TimeTableCell) TimeTableLocalId() *LocalIdType {
    if s.timetablecell.TimeTableLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.TimeTableLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetablecell.TimeTableLocalId
    }
  func (s *TimeTableCell) TimeTableLocalId_IsNil() bool {
    return s.TimeTableLocalId == nil || s.timetablecell.TimeTableLocalId == nil
    }
  func (s *TimeTableCell) RoomList() *RoomListType {
    if s.timetablecell.RoomList == nil {
     if v, ok:= RoomListTypePointer(RoomListType{}); ok {
      s.timetablecell.RoomList = v
      }
      }
      return s.timetablecell.RoomList
    }
  func (s *TimeTableCell) RoomList_IsNil() bool {
    return s.RoomList == nil || s.timetablecell.RoomList == nil
    }
  func (s *TimeTableCell) DayId() *LocalIdType {
    if s.timetablecell.DayId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.DayId = ((*LocalIdType)(v))
      }
      }
      return s.timetablecell.DayId
    }
  func (s *TimeTableCell) DayId_IsNil() bool {
    return s.DayId == nil || s.timetablecell.DayId == nil
    }
  func (s *TimeTableCell) StaffLocalId() *LocalIdType {
    if s.timetablecell.StaffLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.StaffLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetablecell.StaffLocalId
    }
  func (s *TimeTableCell) StaffLocalId_IsNil() bool {
    return s.StaffLocalId == nil || s.timetablecell.StaffLocalId == nil
    }
  func (s *TimeTableCell) TimeTableRefId() *String {
    if s.timetablecell.TimeTableRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.TimeTableRefId = ((*String)(v))
      }
      }
      return s.timetablecell.TimeTableRefId
    }
  func (s *TimeTableCell) TimeTableRefId_IsNil() bool {
    return s.TimeTableRefId == nil || s.timetablecell.TimeTableRefId == nil
    }
  func (s *TimeTableCell) CellType() *String {
    if s.timetablecell.CellType == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.CellType = ((*String)(v))
      }
      }
      return s.timetablecell.CellType
    }
  func (s *TimeTableCell) CellType_IsNil() bool {
    return s.CellType == nil || s.timetablecell.CellType == nil
    }
  func (s *TimeTableCell) StaffPersonalRefId() *String {
    if s.timetablecell.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.timetablecell.StaffPersonalRefId
    }
  func (s *TimeTableCell) StaffPersonalRefId_IsNil() bool {
    return s.StaffPersonalRefId == nil || s.timetablecell.StaffPersonalRefId == nil
    }
  func (s *TimeTableCell) RoomInfoRefId() *String {
    if s.timetablecell.RoomInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.RoomInfoRefId = ((*String)(v))
      }
      }
      return s.timetablecell.RoomInfoRefId
    }
  func (s *TimeTableCell) RoomInfoRefId_IsNil() bool {
    return s.RoomInfoRefId == nil || s.timetablecell.RoomInfoRefId == nil
    }
  func (s *TimeTableCell) TeacherList() *ScheduledTeacherListType {
    if s.timetablecell.TeacherList == nil {
     if v, ok:= ScheduledTeacherListTypePointer(ScheduledTeacherListType{}); ok {
      s.timetablecell.TeacherList = v
      }
      }
      return s.timetablecell.TeacherList
    }
  func (s *TimeTableCell) TeacherList_IsNil() bool {
    return s.TeacherList == nil || s.timetablecell.TeacherList == nil
    }
  func (s *TimeTableCell) LocalCodeList() *LocalCodeListType {
    if s.timetablecell.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.timetablecell.LocalCodeList = v
      }
      }
      return s.timetablecell.LocalCodeList
    }
  func (s *TimeTableCell) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.timetablecell.LocalCodeList == nil
    }
  func (s *TimeTableCell) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.timetablecell.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.timetablecell.SIF_ExtendedElements = v
      }
      }
      return s.timetablecell.SIF_ExtendedElements
    }
  func (s *TimeTableCell) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.timetablecell.SIF_ExtendedElements == nil
    }
  func (s *TimeTableCell) TeachingGroupRefId() *String {
    if s.timetablecell.TeachingGroupRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.TeachingGroupRefId = ((*String)(v))
      }
      }
      return s.timetablecell.TeachingGroupRefId
    }
  func (s *TimeTableCell) TeachingGroupRefId_IsNil() bool {
    return s.TeachingGroupRefId == nil || s.timetablecell.TeachingGroupRefId == nil
    }
  func (s *TimeTableCell) SchoolInfoRefId() *String {
    if s.timetablecell.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.timetablecell.SchoolInfoRefId
    }
  func (s *TimeTableCell) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.timetablecell.SchoolInfoRefId == nil
    }
  func (s *TimeTableCell) RoomNumber() *HomeroomNumberType {
    if s.timetablecell.RoomNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.RoomNumber = ((*HomeroomNumberType)(v))
      }
      }
      return s.timetablecell.RoomNumber
    }
  func (s *TimeTableCell) RoomNumber_IsNil() bool {
    return s.RoomNumber == nil || s.timetablecell.RoomNumber == nil
    }
  func (s *TimeTableCell) TimeTableSubjectRefId() *String {
    if s.timetablecell.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.TimeTableSubjectRefId = ((*String)(v))
      }
      }
      return s.timetablecell.TimeTableSubjectRefId
    }
  func (s *TimeTableCell) TimeTableSubjectRefId_IsNil() bool {
    return s.TimeTableSubjectRefId == nil || s.timetablecell.TimeTableSubjectRefId == nil
    }
  func (s *TimeTableCell) PeriodId() *LocalIdType {
    if s.timetablecell.PeriodId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetablecell.PeriodId = ((*LocalIdType)(v))
      }
      }
      return s.timetablecell.PeriodId
    }
  func (s *TimeTableCell) PeriodId_IsNil() bool {
    return s.PeriodId == nil || s.timetablecell.PeriodId == nil
    }

func (n *PersonPicture) Unset(key string) *PersonPicture {
        switch key {
  case "LocalCodeList":
   n.personpicture.LocalCodeList = nil
  case "SIF_Metadata":
   n.personpicture.SIF_Metadata = nil
  case "ParentObjectRefId":
   n.personpicture.ParentObjectRefId = nil
  case "SIF_ExtendedElements":
   n.personpicture.SIF_ExtendedElements = nil
  case "PublishingPermissionList":
   n.personpicture.PublishingPermissionList = nil
  case "OKToPublish":
   n.personpicture.OKToPublish = nil
  case "SchoolYear":
   n.personpicture.SchoolYear = nil
  case "PictureSource":
   n.personpicture.PictureSource = nil
  case "RefId":
   n.personpicture.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonPicture")
        }
        return n
}

func (n *PersonPicture) SetProperty(key string, value interface{}) *PersonPicture {
        if n == nil {
                n, _ = PersonPicturePointer(PersonPicture{})
        }
        switch key {
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.personpicture.LocalCodeList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.personpicture.SIF_Metadata = v
      }
    case "ParentObjectRefId":
    if v, ok:= PersonPicture_ParentObjectRefIdPointer(value); ok {
      n.personpicture.ParentObjectRefId = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.personpicture.SIF_ExtendedElements = v
      }
    case "PublishingPermissionList":
    if v, ok:= PublishingPermissionListTypePointer(value); ok {
      n.personpicture.PublishingPermissionList = v
      }
    case "OKToPublish":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.personpicture.OKToPublish = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.personpicture.SchoolYear = ((*SchoolYearType)(v))
      }
    case "PictureSource":
    if v, ok:= PersonPicture_PictureSourcePointer(value); ok {
      n.personpicture.PictureSource = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.personpicture.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonPicture")
        }
        return n
}

  func (s *PersonPicture) LocalCodeList() *LocalCodeListType {
    if s.personpicture.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.personpicture.LocalCodeList = v
      }
      }
      return s.personpicture.LocalCodeList
    }
  func (s *PersonPicture) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.personpicture.LocalCodeList == nil
    }
  func (s *PersonPicture) SIF_Metadata() *SIF_MetadataType {
    if s.personpicture.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.personpicture.SIF_Metadata = v
      }
      }
      return s.personpicture.SIF_Metadata
    }
  func (s *PersonPicture) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.personpicture.SIF_Metadata == nil
    }
  func (s *PersonPicture) ParentObjectRefId() *PersonPicture_ParentObjectRefId {
    if s.personpicture.ParentObjectRefId == nil {
     if v, ok:= PersonPicture_ParentObjectRefIdPointer(PersonPicture_ParentObjectRefId{}); ok {
      s.personpicture.ParentObjectRefId = v
      }
      }
      return s.personpicture.ParentObjectRefId
    }
  func (s *PersonPicture) ParentObjectRefId_IsNil() bool {
    return s.ParentObjectRefId == nil || s.personpicture.ParentObjectRefId == nil
    }
  func (s *PersonPicture) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.personpicture.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.personpicture.SIF_ExtendedElements = v
      }
      }
      return s.personpicture.SIF_ExtendedElements
    }
  func (s *PersonPicture) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.personpicture.SIF_ExtendedElements == nil
    }
  func (s *PersonPicture) PublishingPermissionList() *PublishingPermissionListType {
    if s.personpicture.PublishingPermissionList == nil {
     if v, ok:= PublishingPermissionListTypePointer(PublishingPermissionListType{}); ok {
      s.personpicture.PublishingPermissionList = v
      }
      }
      return s.personpicture.PublishingPermissionList
    }
  func (s *PersonPicture) PublishingPermissionList_IsNil() bool {
    return s.PublishingPermissionList == nil || s.personpicture.PublishingPermissionList == nil
    }
  func (s *PersonPicture) OKToPublish() *AUCodeSetsYesOrNoCategoryType {
    if s.personpicture.OKToPublish == nil {
    if v, ok:= StringPointer(""); ok {
      s.personpicture.OKToPublish = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.personpicture.OKToPublish
    }
  func (s *PersonPicture) OKToPublish_IsNil() bool {
    return s.OKToPublish == nil || s.personpicture.OKToPublish == nil
    }
  func (s *PersonPicture) SchoolYear() *SchoolYearType {
    if s.personpicture.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.personpicture.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.personpicture.SchoolYear
    }
  func (s *PersonPicture) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.personpicture.SchoolYear == nil
    }
  func (s *PersonPicture) PictureSource() *PersonPicture_PictureSource {
    if s.personpicture.PictureSource == nil {
     if v, ok:= PersonPicture_PictureSourcePointer(PersonPicture_PictureSource{}); ok {
      s.personpicture.PictureSource = v
      }
      }
      return s.personpicture.PictureSource
    }
  func (s *PersonPicture) PictureSource_IsNil() bool {
    return s.PictureSource == nil || s.personpicture.PictureSource == nil
    }
  func (s *PersonPicture) RefId() *RefIdType {
    if s.personpicture.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.personpicture.RefId = ((*RefIdType)(v))
      }
      }
      return s.personpicture.RefId
    }
  func (s *PersonPicture) RefId_IsNil() bool {
    return s.RefId == nil || s.personpicture.RefId == nil
    }

func (n *LibraryPatronStatus) Unset(key string) *LibraryPatronStatus {
        switch key {
  case "NumberOfHoldItems":
   n.librarypatronstatus.NumberOfHoldItems = nil
  case "TransactionList":
   n.librarypatronstatus.TransactionList = nil
  case "NumberOfFines":
   n.librarypatronstatus.NumberOfFines = nil
  case "LocalCodeList":
   n.librarypatronstatus.LocalCodeList = nil
  case "RefundAmount":
   n.librarypatronstatus.RefundAmount = nil
  case "SIF_ExtendedElements":
   n.librarypatronstatus.SIF_ExtendedElements = nil
  case "NumberOfRefunds":
   n.librarypatronstatus.NumberOfRefunds = nil
  case "NumberOfOverdues":
   n.librarypatronstatus.NumberOfOverdues = nil
  case "MessageList":
   n.librarypatronstatus.MessageList = nil
  case "RefId":
   n.librarypatronstatus.RefId = nil
  case "ElectronicIdList":
   n.librarypatronstatus.ElectronicIdList = nil
  case "PatronLocalId":
   n.librarypatronstatus.PatronLocalId = nil
  case "PatronRefObject":
   n.librarypatronstatus.PatronRefObject = nil
  case "SIF_Metadata":
   n.librarypatronstatus.SIF_Metadata = nil
  case "FineAmount":
   n.librarypatronstatus.FineAmount = nil
  case "PatronRefId":
   n.librarypatronstatus.PatronRefId = nil
  case "NumberOfCheckouts":
   n.librarypatronstatus.NumberOfCheckouts = nil
  case "LibraryType":
   n.librarypatronstatus.LibraryType = nil
  case "PatronName":
   n.librarypatronstatus.PatronName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryPatronStatus")
        }
        return n
}

func (n *LibraryPatronStatus) SetProperty(key string, value interface{}) *LibraryPatronStatus {
        if n == nil {
                n, _ = LibraryPatronStatusPointer(LibraryPatronStatus{})
        }
        switch key {
    case "NumberOfHoldItems":
    
    if v, ok:= IntPointer(value); ok {
      n.librarypatronstatus.NumberOfHoldItems = ((*Int)(v))
      }
    case "TransactionList":
    if v, ok:= LibraryTransactionListTypePointer(value); ok {
      n.librarypatronstatus.TransactionList = v
      }
    case "NumberOfFines":
    
    if v, ok:= IntPointer(value); ok {
      n.librarypatronstatus.NumberOfFines = ((*Int)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.librarypatronstatus.LocalCodeList = v
      }
    case "RefundAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.librarypatronstatus.RefundAmount = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.librarypatronstatus.SIF_ExtendedElements = v
      }
    case "NumberOfRefunds":
    
    if v, ok:= IntPointer(value); ok {
      n.librarypatronstatus.NumberOfRefunds = ((*Int)(v))
      }
    case "NumberOfOverdues":
    
    if v, ok:= IntPointer(value); ok {
      n.librarypatronstatus.NumberOfOverdues = ((*Int)(v))
      }
    case "MessageList":
    if v, ok:= LibraryMessageListTypePointer(value); ok {
      n.librarypatronstatus.MessageList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.librarypatronstatus.RefId = ((*RefIdType)(v))
      }
    case "ElectronicIdList":
    if v, ok:= ElectronicIdListTypePointer(value); ok {
      n.librarypatronstatus.ElectronicIdList = v
      }
    case "PatronLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.librarypatronstatus.PatronLocalId = ((*LocalIdType)(v))
      }
    case "PatronRefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.librarypatronstatus.PatronRefObject = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.librarypatronstatus.SIF_Metadata = v
      }
    case "FineAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.librarypatronstatus.FineAmount = v
      }
    case "PatronRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.librarypatronstatus.PatronRefId = ((*String)(v))
      }
    case "NumberOfCheckouts":
    
    if v, ok:= IntPointer(value); ok {
      n.librarypatronstatus.NumberOfCheckouts = ((*Int)(v))
      }
    case "LibraryType":
    
    if v, ok:= StringPointer(value); ok {
      n.librarypatronstatus.LibraryType = ((*String)(v))
      }
    case "PatronName":
    if v, ok:= NameOfRecordTypePointer(value); ok {
      n.librarypatronstatus.PatronName = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryPatronStatus")
        }
        return n
}

  func (s *LibraryPatronStatus) NumberOfHoldItems() *Int {
    if s.librarypatronstatus.NumberOfHoldItems == nil {
    if v, ok:= IntPointer(0); ok {
      s.librarypatronstatus.NumberOfHoldItems = ((*Int)(v))
      }
      }
      return s.librarypatronstatus.NumberOfHoldItems
    }
  func (s *LibraryPatronStatus) NumberOfHoldItems_IsNil() bool {
    return s.NumberOfHoldItems == nil || s.librarypatronstatus.NumberOfHoldItems == nil
    }
  func (s *LibraryPatronStatus) TransactionList() *LibraryTransactionListType {
    if s.librarypatronstatus.TransactionList == nil {
     if v, ok:= LibraryTransactionListTypePointer(LibraryTransactionListType{}); ok {
      s.librarypatronstatus.TransactionList = v
      }
      }
      return s.librarypatronstatus.TransactionList
    }
  func (s *LibraryPatronStatus) TransactionList_IsNil() bool {
    return s.TransactionList == nil || s.librarypatronstatus.TransactionList == nil
    }
  func (s *LibraryPatronStatus) NumberOfFines() *Int {
    if s.librarypatronstatus.NumberOfFines == nil {
    if v, ok:= IntPointer(0); ok {
      s.librarypatronstatus.NumberOfFines = ((*Int)(v))
      }
      }
      return s.librarypatronstatus.NumberOfFines
    }
  func (s *LibraryPatronStatus) NumberOfFines_IsNil() bool {
    return s.NumberOfFines == nil || s.librarypatronstatus.NumberOfFines == nil
    }
  func (s *LibraryPatronStatus) LocalCodeList() *LocalCodeListType {
    if s.librarypatronstatus.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.librarypatronstatus.LocalCodeList = v
      }
      }
      return s.librarypatronstatus.LocalCodeList
    }
  func (s *LibraryPatronStatus) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.librarypatronstatus.LocalCodeList == nil
    }
  func (s *LibraryPatronStatus) RefundAmount() *MonetaryAmountType {
    if s.librarypatronstatus.RefundAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.librarypatronstatus.RefundAmount = v
      }
      }
      return s.librarypatronstatus.RefundAmount
    }
  func (s *LibraryPatronStatus) RefundAmount_IsNil() bool {
    return s.RefundAmount == nil || s.librarypatronstatus.RefundAmount == nil
    }
  func (s *LibraryPatronStatus) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.librarypatronstatus.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.librarypatronstatus.SIF_ExtendedElements = v
      }
      }
      return s.librarypatronstatus.SIF_ExtendedElements
    }
  func (s *LibraryPatronStatus) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.librarypatronstatus.SIF_ExtendedElements == nil
    }
  func (s *LibraryPatronStatus) NumberOfRefunds() *Int {
    if s.librarypatronstatus.NumberOfRefunds == nil {
    if v, ok:= IntPointer(0); ok {
      s.librarypatronstatus.NumberOfRefunds = ((*Int)(v))
      }
      }
      return s.librarypatronstatus.NumberOfRefunds
    }
  func (s *LibraryPatronStatus) NumberOfRefunds_IsNil() bool {
    return s.NumberOfRefunds == nil || s.librarypatronstatus.NumberOfRefunds == nil
    }
  func (s *LibraryPatronStatus) NumberOfOverdues() *Int {
    if s.librarypatronstatus.NumberOfOverdues == nil {
    if v, ok:= IntPointer(0); ok {
      s.librarypatronstatus.NumberOfOverdues = ((*Int)(v))
      }
      }
      return s.librarypatronstatus.NumberOfOverdues
    }
  func (s *LibraryPatronStatus) NumberOfOverdues_IsNil() bool {
    return s.NumberOfOverdues == nil || s.librarypatronstatus.NumberOfOverdues == nil
    }
  func (s *LibraryPatronStatus) MessageList() *LibraryMessageListType {
    if s.librarypatronstatus.MessageList == nil {
     if v, ok:= LibraryMessageListTypePointer(LibraryMessageListType{}); ok {
      s.librarypatronstatus.MessageList = v
      }
      }
      return s.librarypatronstatus.MessageList
    }
  func (s *LibraryPatronStatus) MessageList_IsNil() bool {
    return s.MessageList == nil || s.librarypatronstatus.MessageList == nil
    }
  func (s *LibraryPatronStatus) RefId() *RefIdType {
    if s.librarypatronstatus.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.librarypatronstatus.RefId = ((*RefIdType)(v))
      }
      }
      return s.librarypatronstatus.RefId
    }
  func (s *LibraryPatronStatus) RefId_IsNil() bool {
    return s.RefId == nil || s.librarypatronstatus.RefId == nil
    }
  func (s *LibraryPatronStatus) ElectronicIdList() *ElectronicIdListType {
    if s.librarypatronstatus.ElectronicIdList == nil {
     if v, ok:= ElectronicIdListTypePointer(ElectronicIdListType{}); ok {
      s.librarypatronstatus.ElectronicIdList = v
      }
      }
      return s.librarypatronstatus.ElectronicIdList
    }
  func (s *LibraryPatronStatus) ElectronicIdList_IsNil() bool {
    return s.ElectronicIdList == nil || s.librarypatronstatus.ElectronicIdList == nil
    }
  func (s *LibraryPatronStatus) PatronLocalId() *LocalIdType {
    if s.librarypatronstatus.PatronLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.librarypatronstatus.PatronLocalId = ((*LocalIdType)(v))
      }
      }
      return s.librarypatronstatus.PatronLocalId
    }
  func (s *LibraryPatronStatus) PatronLocalId_IsNil() bool {
    return s.PatronLocalId == nil || s.librarypatronstatus.PatronLocalId == nil
    }
  func (s *LibraryPatronStatus) PatronRefObject() *String {
    if s.librarypatronstatus.PatronRefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.librarypatronstatus.PatronRefObject = ((*String)(v))
      }
      }
      return s.librarypatronstatus.PatronRefObject
    }
  func (s *LibraryPatronStatus) PatronRefObject_IsNil() bool {
    return s.PatronRefObject == nil || s.librarypatronstatus.PatronRefObject == nil
    }
  func (s *LibraryPatronStatus) SIF_Metadata() *SIF_MetadataType {
    if s.librarypatronstatus.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.librarypatronstatus.SIF_Metadata = v
      }
      }
      return s.librarypatronstatus.SIF_Metadata
    }
  func (s *LibraryPatronStatus) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.librarypatronstatus.SIF_Metadata == nil
    }
  func (s *LibraryPatronStatus) FineAmount() *MonetaryAmountType {
    if s.librarypatronstatus.FineAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.librarypatronstatus.FineAmount = v
      }
      }
      return s.librarypatronstatus.FineAmount
    }
  func (s *LibraryPatronStatus) FineAmount_IsNil() bool {
    return s.FineAmount == nil || s.librarypatronstatus.FineAmount == nil
    }
  func (s *LibraryPatronStatus) PatronRefId() *String {
    if s.librarypatronstatus.PatronRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.librarypatronstatus.PatronRefId = ((*String)(v))
      }
      }
      return s.librarypatronstatus.PatronRefId
    }
  func (s *LibraryPatronStatus) PatronRefId_IsNil() bool {
    return s.PatronRefId == nil || s.librarypatronstatus.PatronRefId == nil
    }
  func (s *LibraryPatronStatus) NumberOfCheckouts() *Int {
    if s.librarypatronstatus.NumberOfCheckouts == nil {
    if v, ok:= IntPointer(0); ok {
      s.librarypatronstatus.NumberOfCheckouts = ((*Int)(v))
      }
      }
      return s.librarypatronstatus.NumberOfCheckouts
    }
  func (s *LibraryPatronStatus) NumberOfCheckouts_IsNil() bool {
    return s.NumberOfCheckouts == nil || s.librarypatronstatus.NumberOfCheckouts == nil
    }
  func (s *LibraryPatronStatus) LibraryType() *String {
    if s.librarypatronstatus.LibraryType == nil {
    if v, ok:= StringPointer(""); ok {
      s.librarypatronstatus.LibraryType = ((*String)(v))
      }
      }
      return s.librarypatronstatus.LibraryType
    }
  func (s *LibraryPatronStatus) LibraryType_IsNil() bool {
    return s.LibraryType == nil || s.librarypatronstatus.LibraryType == nil
    }
  func (s *LibraryPatronStatus) PatronName() *NameOfRecordType {
    if s.librarypatronstatus.PatronName == nil {
     if v, ok:= NameOfRecordTypePointer(NameOfRecordType{}); ok {
      s.librarypatronstatus.PatronName = v
      }
      }
      return s.librarypatronstatus.PatronName
    }
  func (s *LibraryPatronStatus) PatronName_IsNil() bool {
    return s.PatronName == nil || s.librarypatronstatus.PatronName == nil
    }

func (n *TimeElementType) Unset(key string) *TimeElementType {
        switch key {
  case "IsCurrent":
   n.timeelementtype.IsCurrent = nil
  case "Name":
   n.timeelementtype.Name = nil
  case "EndDateTime":
   n.timeelementtype.EndDateTime = nil
  case "StartDateTime":
   n.timeelementtype.StartDateTime = nil
  case "Value":
   n.timeelementtype.Value = nil
  case "Code":
   n.timeelementtype.Code = nil
  case "Type":
   n.timeelementtype.Type = nil
  case "SpanGaps":
   n.timeelementtype.SpanGaps = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeElementType")
        }
        return n
}

func (n *TimeElementType) SetProperty(key string, value interface{}) *TimeElementType {
        if n == nil {
                n, _ = TimeElementTypePointer(TimeElementType{})
        }
        switch key {
    case "IsCurrent":
    
    if v, ok:= BoolPointer(value); ok {
      n.timeelementtype.IsCurrent = ((*Bool)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.timeelementtype.Name = ((*String)(v))
      }
    case "EndDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.timeelementtype.EndDateTime = ((*String)(v))
      }
    case "StartDateTime":
    
    if v, ok:= StringPointer(value); ok {
      n.timeelementtype.StartDateTime = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.timeelementtype.Value = ((*String)(v))
      }
    case "Code":
    
    if v, ok:= StringPointer(value); ok {
      n.timeelementtype.Code = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.timeelementtype.Type = ((*String)(v))
      }
    case "SpanGaps":
    if v, ok:= TimeElementType_SpanGapsPointer(value); ok {
      n.timeelementtype.SpanGaps = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeElementType")
        }
        return n
}

  func (s *TimeElementType) IsCurrent() *Bool {
    if s.timeelementtype.IsCurrent == nil {
    if v, ok:= BoolPointer(false); ok {
      s.timeelementtype.IsCurrent = ((*Bool)(v))
      }
      }
      return s.timeelementtype.IsCurrent
    }
  func (s *TimeElementType) IsCurrent_IsNil() bool {
    return s.IsCurrent == nil || s.timeelementtype.IsCurrent == nil
    }
  func (s *TimeElementType) Name() *String {
    if s.timeelementtype.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.timeelementtype.Name = ((*String)(v))
      }
      }
      return s.timeelementtype.Name
    }
  func (s *TimeElementType) Name_IsNil() bool {
    return s.Name == nil || s.timeelementtype.Name == nil
    }
  func (s *TimeElementType) EndDateTime() *String {
    if s.timeelementtype.EndDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.timeelementtype.EndDateTime = ((*String)(v))
      }
      }
      return s.timeelementtype.EndDateTime
    }
  func (s *TimeElementType) EndDateTime_IsNil() bool {
    return s.EndDateTime == nil || s.timeelementtype.EndDateTime == nil
    }
  func (s *TimeElementType) StartDateTime() *String {
    if s.timeelementtype.StartDateTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.timeelementtype.StartDateTime = ((*String)(v))
      }
      }
      return s.timeelementtype.StartDateTime
    }
  func (s *TimeElementType) StartDateTime_IsNil() bool {
    return s.StartDateTime == nil || s.timeelementtype.StartDateTime == nil
    }
  func (s *TimeElementType) Value() *String {
    if s.timeelementtype.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.timeelementtype.Value = ((*String)(v))
      }
      }
      return s.timeelementtype.Value
    }
  func (s *TimeElementType) Value_IsNil() bool {
    return s.Value == nil || s.timeelementtype.Value == nil
    }
  func (s *TimeElementType) Code() *String {
    if s.timeelementtype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.timeelementtype.Code = ((*String)(v))
      }
      }
      return s.timeelementtype.Code
    }
  func (s *TimeElementType) Code_IsNil() bool {
    return s.Code == nil || s.timeelementtype.Code == nil
    }
  func (s *TimeElementType) Type() *String {
    if s.timeelementtype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.timeelementtype.Type = ((*String)(v))
      }
      }
      return s.timeelementtype.Type
    }
  func (s *TimeElementType) Type_IsNil() bool {
    return s.Type == nil || s.timeelementtype.Type == nil
    }
  func (s *TimeElementType) SpanGaps() *TimeElementType_SpanGaps {
    if s.timeelementtype.SpanGaps == nil {
     if v, ok:= TimeElementType_SpanGapsPointer(TimeElementType_SpanGaps{}); ok {
      s.timeelementtype.SpanGaps = v
      }
      }
      return s.timeelementtype.SpanGaps
    }
  func (s *TimeElementType) SpanGaps_IsNil() bool {
    return s.SpanGaps == nil || s.timeelementtype.SpanGaps == nil
    }

func (n *OtherCodeListType_OtherCode) Unset(key string) *OtherCodeListType_OtherCode {
        switch key {
  case "Codeset":
   n.othercodelisttype_othercode.Codeset = nil
  case "Value":
   n.othercodelisttype_othercode.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherCodeListType_OtherCode")
        }
        return n
}

func (n *OtherCodeListType_OtherCode) SetProperty(key string, value interface{}) *OtherCodeListType_OtherCode {
        if n == nil {
                n, _ = OtherCodeListType_OtherCodePointer(OtherCodeListType_OtherCode{})
        }
        switch key {
    case "Codeset":
    
    if v, ok:= StringPointer(value); ok {
      n.othercodelisttype_othercode.Codeset = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.othercodelisttype_othercode.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherCodeListType_OtherCode")
        }
        return n
}

  func (s *OtherCodeListType_OtherCode) Codeset() *String {
    if s.othercodelisttype_othercode.Codeset == nil {
    if v, ok:= StringPointer(""); ok {
      s.othercodelisttype_othercode.Codeset = ((*String)(v))
      }
      }
      return s.othercodelisttype_othercode.Codeset
    }
  func (s *OtherCodeListType_OtherCode) Codeset_IsNil() bool {
    return s.Codeset == nil || s.othercodelisttype_othercode.Codeset == nil
    }
  func (s *OtherCodeListType_OtherCode) Value() *String {
    if s.othercodelisttype_othercode.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.othercodelisttype_othercode.Value = ((*String)(v))
      }
      }
      return s.othercodelisttype_othercode.Value
    }
  func (s *OtherCodeListType_OtherCode) Value_IsNil() bool {
    return s.Value == nil || s.othercodelisttype_othercode.Value == nil
    }

func (n *EmailType) Unset(key string) *EmailType {
        switch key {
  case "Type":
   n.emailtype.Type = nil
  case "Value":
   n.emailtype.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EmailType")
        }
        return n
}

func (n *EmailType) SetProperty(key string, value interface{}) *EmailType {
        if n == nil {
                n, _ = EmailTypePointer(EmailType{})
        }
        switch key {
    case "Type":
        if !CodesetContains(AUCodeSetsEmailTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEmailTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.emailtype.Type = ((*AUCodeSetsEmailTypeType)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.emailtype.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EmailType")
        }
        return n
}

  func (s *EmailType) Type() *AUCodeSetsEmailTypeType {
    if s.emailtype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.emailtype.Type = ((*AUCodeSetsEmailTypeType)(v))
      }
      }
      return s.emailtype.Type
    }
  func (s *EmailType) Type_IsNil() bool {
    return s.Type == nil || s.emailtype.Type == nil
    }
  func (s *EmailType) Value() *String {
    if s.emailtype.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.emailtype.Value = ((*String)(v))
      }
      }
      return s.emailtype.Value
    }
  func (s *EmailType) Value_IsNil() bool {
    return s.Value == nil || s.emailtype.Value == nil
    }

func (n *YearLevelType) Unset(key string) *YearLevelType {
        switch key {
  case "Code":
   n.yearleveltype.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "YearLevelType")
        }
        return n
}

func (n *YearLevelType) SetProperty(key string, value interface{}) *YearLevelType {
        if n == nil {
                n, _ = YearLevelTypePointer(YearLevelType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsYearLevelCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYearLevelCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.yearleveltype.Code = ((*AUCodeSetsYearLevelCodeType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "YearLevelType")
        }
        return n
}

  func (s *YearLevelType) Code() *AUCodeSetsYearLevelCodeType {
    if s.yearleveltype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.yearleveltype.Code = ((*AUCodeSetsYearLevelCodeType)(v))
      }
      }
      return s.yearleveltype.Code
    }
  func (s *YearLevelType) Code_IsNil() bool {
    return s.Code == nil || s.yearleveltype.Code == nil
    }

func (n *StudentSchoolEnrollment_Counselor) Unset(key string) *StudentSchoolEnrollment_Counselor {
        switch key {
  case "SIF_RefObject":
   n.studentschoolenrollment_counselor.SIF_RefObject = nil
  case "Value":
   n.studentschoolenrollment_counselor.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Counselor")
        }
        return n
}

func (n *StudentSchoolEnrollment_Counselor) SetProperty(key string, value interface{}) *StudentSchoolEnrollment_Counselor {
        if n == nil {
                n, _ = StudentSchoolEnrollment_CounselorPointer(StudentSchoolEnrollment_Counselor{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment_counselor.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment_counselor.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Counselor")
        }
        return n
}

  func (s *StudentSchoolEnrollment_Counselor) SIF_RefObject() *String {
    if s.studentschoolenrollment_counselor.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment_counselor.SIF_RefObject = ((*String)(v))
      }
      }
      return s.studentschoolenrollment_counselor.SIF_RefObject
    }
  func (s *StudentSchoolEnrollment_Counselor) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.studentschoolenrollment_counselor.SIF_RefObject == nil
    }
  func (s *StudentSchoolEnrollment_Counselor) Value() *String {
    if s.studentschoolenrollment_counselor.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment_counselor.Value = ((*String)(v))
      }
      }
      return s.studentschoolenrollment_counselor.Value
    }
  func (s *StudentSchoolEnrollment_Counselor) Value_IsNil() bool {
    return s.Value == nil || s.studentschoolenrollment_counselor.Value == nil
    }

func (n *Activity) Unset(key string) *Activity {
        switch key {
  case "SoftwareRequirementList":
   n.activity.SoftwareRequirementList = nil
  case "SubjectArea":
   n.activity.SubjectArea = nil
  case "Evaluation":
   n.activity.Evaluation = nil
  case "ActivityWeight":
   n.activity.ActivityWeight = nil
  case "EssentialMaterials":
   n.activity.EssentialMaterials = nil
  case "SourceObjects":
   n.activity.SourceObjects = nil
  case "SIF_Metadata":
   n.activity.SIF_Metadata = nil
  case "TechnicalRequirements":
   n.activity.TechnicalRequirements = nil
  case "LearningObjectives":
   n.activity.LearningObjectives = nil
  case "RefId":
   n.activity.RefId = nil
  case "AssessmentRefId":
   n.activity.AssessmentRefId = nil
  case "Students":
   n.activity.Students = nil
  case "Prerequisites":
   n.activity.Prerequisites = nil
  case "SIF_ExtendedElements":
   n.activity.SIF_ExtendedElements = nil
  case "Title":
   n.activity.Title = nil
  case "MaxAttemptsAllowed":
   n.activity.MaxAttemptsAllowed = nil
  case "LocalCodeList":
   n.activity.LocalCodeList = nil
  case "ActivityTime":
   n.activity.ActivityTime = nil
  case "Preamble":
   n.activity.Preamble = nil
  case "LearningStandards":
   n.activity.LearningStandards = nil
  case "Points":
   n.activity.Points = nil
  case "LearningResources":
   n.activity.LearningResources = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Activity")
        }
        return n
}

func (n *Activity) SetProperty(key string, value interface{}) *Activity {
        if n == nil {
                n, _ = ActivityPointer(Activity{})
        }
        switch key {
    case "SoftwareRequirementList":
    if v, ok:= SoftwareRequirementListTypePointer(value); ok {
      n.activity.SoftwareRequirementList = v
      }
    case "SubjectArea":
    if v, ok:= SubjectAreaTypePointer(value); ok {
      n.activity.SubjectArea = v
      }
    case "Evaluation":
    if v, ok:= Activity_EvaluationPointer(value); ok {
      n.activity.Evaluation = v
      }
    case "ActivityWeight":
    
    if v, ok:= FloatPointer(value); ok {
      n.activity.ActivityWeight = ((*Float)(v))
      }
    case "EssentialMaterials":
    if v, ok:= EssentialMaterialsTypePointer(value); ok {
      n.activity.EssentialMaterials = v
      }
    case "SourceObjects":
    if v, ok:= SourceObjectsTypePointer(value); ok {
      n.activity.SourceObjects = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.activity.SIF_Metadata = v
      }
    case "TechnicalRequirements":
    if v, ok:= TechnicalRequirementsTypePointer(value); ok {
      n.activity.TechnicalRequirements = v
      }
    case "LearningObjectives":
    if v, ok:= LearningObjectivesTypePointer(value); ok {
      n.activity.LearningObjectives = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.activity.RefId = ((*RefIdType)(v))
      }
    case "AssessmentRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.activity.AssessmentRefId = ((*String)(v))
      }
    case "Students":
    if v, ok:= StudentsTypePointer(value); ok {
      n.activity.Students = v
      }
    case "Prerequisites":
    if v, ok:= PrerequisitesTypePointer(value); ok {
      n.activity.Prerequisites = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.activity.SIF_ExtendedElements = v
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.activity.Title = ((*String)(v))
      }
    case "MaxAttemptsAllowed":
    
    if v, ok:= IntPointer(value); ok {
      n.activity.MaxAttemptsAllowed = ((*Int)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.activity.LocalCodeList = v
      }
    case "ActivityTime":
    if v, ok:= ActivityTimeTypePointer(value); ok {
      n.activity.ActivityTime = v
      }
    case "Preamble":
    
    if v, ok:= StringPointer(value); ok {
      n.activity.Preamble = ((*String)(v))
      }
    case "LearningStandards":
    if v, ok:= LearningStandardsTypePointer(value); ok {
      n.activity.LearningStandards = v
      }
    case "Points":
    
    if v, ok:= IntPointer(value); ok {
      n.activity.Points = ((*Int)(v))
      }
    case "LearningResources":
    if v, ok:= LearningResourcesTypePointer(value); ok {
      n.activity.LearningResources = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Activity")
        }
        return n
}

  func (s *Activity) SoftwareRequirementList() *SoftwareRequirementListType {
    if s.activity.SoftwareRequirementList == nil {
     if v, ok:= SoftwareRequirementListTypePointer(SoftwareRequirementListType{}); ok {
      s.activity.SoftwareRequirementList = v
      }
      }
      return s.activity.SoftwareRequirementList
    }
  func (s *Activity) SoftwareRequirementList_IsNil() bool {
    return s.SoftwareRequirementList == nil || s.activity.SoftwareRequirementList == nil
    }
  func (s *Activity) SubjectArea() *SubjectAreaType {
    if s.activity.SubjectArea == nil {
     if v, ok:= SubjectAreaTypePointer(SubjectAreaType{}); ok {
      s.activity.SubjectArea = v
      }
      }
      return s.activity.SubjectArea
    }
  func (s *Activity) SubjectArea_IsNil() bool {
    return s.SubjectArea == nil || s.activity.SubjectArea == nil
    }
  func (s *Activity) Evaluation() *Activity_Evaluation {
    if s.activity.Evaluation == nil {
     if v, ok:= Activity_EvaluationPointer(Activity_Evaluation{}); ok {
      s.activity.Evaluation = v
      }
      }
      return s.activity.Evaluation
    }
  func (s *Activity) Evaluation_IsNil() bool {
    return s.Evaluation == nil || s.activity.Evaluation == nil
    }
  func (s *Activity) ActivityWeight() *Float {
    if s.activity.ActivityWeight == nil {
    if v, ok:= FloatPointer(0); ok {
      s.activity.ActivityWeight = ((*Float)(v))
      }
      }
      return s.activity.ActivityWeight
    }
  func (s *Activity) ActivityWeight_IsNil() bool {
    return s.ActivityWeight == nil || s.activity.ActivityWeight == nil
    }
  func (s *Activity) EssentialMaterials() *EssentialMaterialsType {
    if s.activity.EssentialMaterials == nil {
     if v, ok:= EssentialMaterialsTypePointer(EssentialMaterialsType{}); ok {
      s.activity.EssentialMaterials = v
      }
      }
      return s.activity.EssentialMaterials
    }
  func (s *Activity) EssentialMaterials_IsNil() bool {
    return s.EssentialMaterials == nil || s.activity.EssentialMaterials == nil
    }
  func (s *Activity) SourceObjects() *SourceObjectsType {
    if s.activity.SourceObjects == nil {
     if v, ok:= SourceObjectsTypePointer(SourceObjectsType{}); ok {
      s.activity.SourceObjects = v
      }
      }
      return s.activity.SourceObjects
    }
  func (s *Activity) SourceObjects_IsNil() bool {
    return s.SourceObjects == nil || s.activity.SourceObjects == nil
    }
  func (s *Activity) SIF_Metadata() *SIF_MetadataType {
    if s.activity.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.activity.SIF_Metadata = v
      }
      }
      return s.activity.SIF_Metadata
    }
  func (s *Activity) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.activity.SIF_Metadata == nil
    }
  func (s *Activity) TechnicalRequirements() *TechnicalRequirementsType {
    if s.activity.TechnicalRequirements == nil {
     if v, ok:= TechnicalRequirementsTypePointer(TechnicalRequirementsType{}); ok {
      s.activity.TechnicalRequirements = v
      }
      }
      return s.activity.TechnicalRequirements
    }
  func (s *Activity) TechnicalRequirements_IsNil() bool {
    return s.TechnicalRequirements == nil || s.activity.TechnicalRequirements == nil
    }
  func (s *Activity) LearningObjectives() *LearningObjectivesType {
    if s.activity.LearningObjectives == nil {
     if v, ok:= LearningObjectivesTypePointer(LearningObjectivesType{}); ok {
      s.activity.LearningObjectives = v
      }
      }
      return s.activity.LearningObjectives
    }
  func (s *Activity) LearningObjectives_IsNil() bool {
    return s.LearningObjectives == nil || s.activity.LearningObjectives == nil
    }
  func (s *Activity) RefId() *RefIdType {
    if s.activity.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.activity.RefId = ((*RefIdType)(v))
      }
      }
      return s.activity.RefId
    }
  func (s *Activity) RefId_IsNil() bool {
    return s.RefId == nil || s.activity.RefId == nil
    }
  func (s *Activity) AssessmentRefId() *String {
    if s.activity.AssessmentRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.activity.AssessmentRefId = ((*String)(v))
      }
      }
      return s.activity.AssessmentRefId
    }
  func (s *Activity) AssessmentRefId_IsNil() bool {
    return s.AssessmentRefId == nil || s.activity.AssessmentRefId == nil
    }
  func (s *Activity) Students() *StudentsType {
    if s.activity.Students == nil {
     if v, ok:= StudentsTypePointer(StudentsType{}); ok {
      s.activity.Students = v
      }
      }
      return s.activity.Students
    }
  func (s *Activity) Students_IsNil() bool {
    return s.Students == nil || s.activity.Students == nil
    }
  func (s *Activity) Prerequisites() *PrerequisitesType {
    if s.activity.Prerequisites == nil {
     if v, ok:= PrerequisitesTypePointer(PrerequisitesType{}); ok {
      s.activity.Prerequisites = v
      }
      }
      return s.activity.Prerequisites
    }
  func (s *Activity) Prerequisites_IsNil() bool {
    return s.Prerequisites == nil || s.activity.Prerequisites == nil
    }
  func (s *Activity) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.activity.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.activity.SIF_ExtendedElements = v
      }
      }
      return s.activity.SIF_ExtendedElements
    }
  func (s *Activity) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.activity.SIF_ExtendedElements == nil
    }
  func (s *Activity) Title() *String {
    if s.activity.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.activity.Title = ((*String)(v))
      }
      }
      return s.activity.Title
    }
  func (s *Activity) Title_IsNil() bool {
    return s.Title == nil || s.activity.Title == nil
    }
  func (s *Activity) MaxAttemptsAllowed() *Int {
    if s.activity.MaxAttemptsAllowed == nil {
    if v, ok:= IntPointer(0); ok {
      s.activity.MaxAttemptsAllowed = ((*Int)(v))
      }
      }
      return s.activity.MaxAttemptsAllowed
    }
  func (s *Activity) MaxAttemptsAllowed_IsNil() bool {
    return s.MaxAttemptsAllowed == nil || s.activity.MaxAttemptsAllowed == nil
    }
  func (s *Activity) LocalCodeList() *LocalCodeListType {
    if s.activity.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.activity.LocalCodeList = v
      }
      }
      return s.activity.LocalCodeList
    }
  func (s *Activity) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.activity.LocalCodeList == nil
    }
  func (s *Activity) ActivityTime() *ActivityTimeType {
    if s.activity.ActivityTime == nil {
     if v, ok:= ActivityTimeTypePointer(ActivityTimeType{}); ok {
      s.activity.ActivityTime = v
      }
      }
      return s.activity.ActivityTime
    }
  func (s *Activity) ActivityTime_IsNil() bool {
    return s.ActivityTime == nil || s.activity.ActivityTime == nil
    }
  func (s *Activity) Preamble() *String {
    if s.activity.Preamble == nil {
    if v, ok:= StringPointer(""); ok {
      s.activity.Preamble = ((*String)(v))
      }
      }
      return s.activity.Preamble
    }
  func (s *Activity) Preamble_IsNil() bool {
    return s.Preamble == nil || s.activity.Preamble == nil
    }
  func (s *Activity) LearningStandards() *LearningStandardsType {
    if s.activity.LearningStandards == nil {
     if v, ok:= LearningStandardsTypePointer(LearningStandardsType{}); ok {
      s.activity.LearningStandards = v
      }
      }
      return s.activity.LearningStandards
    }
  func (s *Activity) LearningStandards_IsNil() bool {
    return s.LearningStandards == nil || s.activity.LearningStandards == nil
    }
  func (s *Activity) Points() *Int {
    if s.activity.Points == nil {
    if v, ok:= IntPointer(0); ok {
      s.activity.Points = ((*Int)(v))
      }
      }
      return s.activity.Points
    }
  func (s *Activity) Points_IsNil() bool {
    return s.Points == nil || s.activity.Points == nil
    }
  func (s *Activity) LearningResources() *LearningResourcesType {
    if s.activity.LearningResources == nil {
     if v, ok:= LearningResourcesTypePointer(LearningResourcesType{}); ok {
      s.activity.LearningResources = v
      }
      }
      return s.activity.LearningResources
    }
  func (s *Activity) LearningResources_IsNil() bool {
    return s.LearningResources == nil || s.activity.LearningResources == nil
    }

func (n *AdjustmentContainerType) Unset(key string) *AdjustmentContainerType {
        switch key {
  case "PNPCodeList":
   n.adjustmentcontainertype.PNPCodeList = nil
  case "BookletType":
   n.adjustmentcontainertype.BookletType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AdjustmentContainerType")
        }
        return n
}

func (n *AdjustmentContainerType) SetProperty(key string, value interface{}) *AdjustmentContainerType {
        if n == nil {
                n, _ = AdjustmentContainerTypePointer(AdjustmentContainerType{})
        }
        switch key {
    case "PNPCodeList":
    if v, ok:= PNPCodeListTypePointer(value); ok {
      n.adjustmentcontainertype.PNPCodeList = v
      }
    case "BookletType":
    
    if v, ok:= StringPointer(value); ok {
      n.adjustmentcontainertype.BookletType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AdjustmentContainerType")
        }
        return n
}

  func (s *AdjustmentContainerType) PNPCodeList() *PNPCodeListType {
    if s.adjustmentcontainertype.PNPCodeList == nil {
     if v, ok:= PNPCodeListTypePointer(PNPCodeListType{}); ok {
      s.adjustmentcontainertype.PNPCodeList = v
      }
      }
      return s.adjustmentcontainertype.PNPCodeList
    }
  func (s *AdjustmentContainerType) PNPCodeList_IsNil() bool {
    return s.PNPCodeList == nil || s.adjustmentcontainertype.PNPCodeList == nil
    }
  func (s *AdjustmentContainerType) BookletType() *String {
    if s.adjustmentcontainertype.BookletType == nil {
    if v, ok:= StringPointer(""); ok {
      s.adjustmentcontainertype.BookletType = ((*String)(v))
      }
      }
      return s.adjustmentcontainertype.BookletType
    }
  func (s *AdjustmentContainerType) BookletType_IsNil() bool {
    return s.BookletType == nil || s.adjustmentcontainertype.BookletType == nil
    }

func (n *NameType) Unset(key string) *NameType {
        switch key {
  case "Type":
   n.nametype.Type = nil
  case "PreferredGivenName":
   n.nametype.PreferredGivenName = nil
  case "GivenName":
   n.nametype.GivenName = nil
  case "FamilyName":
   n.nametype.FamilyName = nil
  case "Title":
   n.nametype.Title = nil
  case "FullName":
   n.nametype.FullName = nil
  case "MiddleName":
   n.nametype.MiddleName = nil
  case "PreferredFamilyName":
   n.nametype.PreferredFamilyName = nil
  case "PreferredFamilyNameFirst":
   n.nametype.PreferredFamilyNameFirst = nil
  case "FamilyNameFirst":
   n.nametype.FamilyNameFirst = nil
  case "Suffix":
   n.nametype.Suffix = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NameType")
        }
        return n
}

func (n *NameType) SetProperty(key string, value interface{}) *NameType {
        if n == nil {
                n, _ = NameTypePointer(NameType{})
        }
        switch key {
    case "Type":
        if !CodesetContains(AUCodeSetsNameUsageTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNameUsageTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.nametype.Type = ((*AUCodeSetsNameUsageTypeType)(v))
      }
    case "PreferredGivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.nametype.PreferredGivenName = ((*String)(v))
      }
    case "GivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.nametype.GivenName = ((*String)(v))
      }
    case "FamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.nametype.FamilyName = ((*String)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.nametype.Title = ((*String)(v))
      }
    case "FullName":
    
    if v, ok:= StringPointer(value); ok {
      n.nametype.FullName = ((*String)(v))
      }
    case "MiddleName":
    
    if v, ok:= StringPointer(value); ok {
      n.nametype.MiddleName = ((*String)(v))
      }
    case "PreferredFamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.nametype.PreferredFamilyName = ((*String)(v))
      }
    case "PreferredFamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.nametype.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "FamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.nametype.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Suffix":
    
    if v, ok:= StringPointer(value); ok {
      n.nametype.Suffix = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NameType")
        }
        return n
}

  func (s *NameType) Type() *AUCodeSetsNameUsageTypeType {
    if s.nametype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.nametype.Type = ((*AUCodeSetsNameUsageTypeType)(v))
      }
      }
      return s.nametype.Type
    }
  func (s *NameType) Type_IsNil() bool {
    return s.Type == nil || s.nametype.Type == nil
    }
  func (s *NameType) PreferredGivenName() *String {
    if s.nametype.PreferredGivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.nametype.PreferredGivenName = ((*String)(v))
      }
      }
      return s.nametype.PreferredGivenName
    }
  func (s *NameType) PreferredGivenName_IsNil() bool {
    return s.PreferredGivenName == nil || s.nametype.PreferredGivenName == nil
    }
  func (s *NameType) GivenName() *String {
    if s.nametype.GivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.nametype.GivenName = ((*String)(v))
      }
      }
      return s.nametype.GivenName
    }
  func (s *NameType) GivenName_IsNil() bool {
    return s.GivenName == nil || s.nametype.GivenName == nil
    }
  func (s *NameType) FamilyName() *String {
    if s.nametype.FamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.nametype.FamilyName = ((*String)(v))
      }
      }
      return s.nametype.FamilyName
    }
  func (s *NameType) FamilyName_IsNil() bool {
    return s.FamilyName == nil || s.nametype.FamilyName == nil
    }
  func (s *NameType) Title() *String {
    if s.nametype.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.nametype.Title = ((*String)(v))
      }
      }
      return s.nametype.Title
    }
  func (s *NameType) Title_IsNil() bool {
    return s.Title == nil || s.nametype.Title == nil
    }
  func (s *NameType) FullName() *String {
    if s.nametype.FullName == nil {
    if v, ok:= StringPointer(""); ok {
      s.nametype.FullName = ((*String)(v))
      }
      }
      return s.nametype.FullName
    }
  func (s *NameType) FullName_IsNil() bool {
    return s.FullName == nil || s.nametype.FullName == nil
    }
  func (s *NameType) MiddleName() *String {
    if s.nametype.MiddleName == nil {
    if v, ok:= StringPointer(""); ok {
      s.nametype.MiddleName = ((*String)(v))
      }
      }
      return s.nametype.MiddleName
    }
  func (s *NameType) MiddleName_IsNil() bool {
    return s.MiddleName == nil || s.nametype.MiddleName == nil
    }
  func (s *NameType) PreferredFamilyName() *String {
    if s.nametype.PreferredFamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.nametype.PreferredFamilyName = ((*String)(v))
      }
      }
      return s.nametype.PreferredFamilyName
    }
  func (s *NameType) PreferredFamilyName_IsNil() bool {
    return s.PreferredFamilyName == nil || s.nametype.PreferredFamilyName == nil
    }
  func (s *NameType) PreferredFamilyNameFirst() *AUCodeSetsYesOrNoCategoryType {
    if s.nametype.PreferredFamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.nametype.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.nametype.PreferredFamilyNameFirst
    }
  func (s *NameType) PreferredFamilyNameFirst_IsNil() bool {
    return s.PreferredFamilyNameFirst == nil || s.nametype.PreferredFamilyNameFirst == nil
    }
  func (s *NameType) FamilyNameFirst() *AUCodeSetsYesOrNoCategoryType {
    if s.nametype.FamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.nametype.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.nametype.FamilyNameFirst
    }
  func (s *NameType) FamilyNameFirst_IsNil() bool {
    return s.FamilyNameFirst == nil || s.nametype.FamilyNameFirst == nil
    }
  func (s *NameType) Suffix() *String {
    if s.nametype.Suffix == nil {
    if v, ok:= StringPointer(""); ok {
      s.nametype.Suffix = ((*String)(v))
      }
      }
      return s.nametype.Suffix
    }
  func (s *NameType) Suffix_IsNil() bool {
    return s.Suffix == nil || s.nametype.Suffix == nil
    }

func (n *RelatedLearningStandardItemRefIdType) Unset(key string) *RelatedLearningStandardItemRefIdType {
        switch key {
  case "Value":
   n.relatedlearningstandarditemrefidtype.Value = nil
  case "RelationshipType":
   n.relatedlearningstandarditemrefidtype.RelationshipType = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "RelatedLearningStandardItemRefIdType")
        }
        return n
}

func (n *RelatedLearningStandardItemRefIdType) SetProperty(key string, value interface{}) *RelatedLearningStandardItemRefIdType {
        if n == nil {
                n, _ = RelatedLearningStandardItemRefIdTypePointer(RelatedLearningStandardItemRefIdType{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.relatedlearningstandarditemrefidtype.Value = ((*String)(v))
      }
    case "RelationshipType":
    
    if v, ok:= StringPointer(value); ok {
      n.relatedlearningstandarditemrefidtype.RelationshipType = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "RelatedLearningStandardItemRefIdType")
        }
        return n
}

  func (s *RelatedLearningStandardItemRefIdType) Value() *String {
    if s.relatedlearningstandarditemrefidtype.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.relatedlearningstandarditemrefidtype.Value = ((*String)(v))
      }
      }
      return s.relatedlearningstandarditemrefidtype.Value
    }
  func (s *RelatedLearningStandardItemRefIdType) Value_IsNil() bool {
    return s.Value == nil || s.relatedlearningstandarditemrefidtype.Value == nil
    }
  func (s *RelatedLearningStandardItemRefIdType) RelationshipType() *String {
    if s.relatedlearningstandarditemrefidtype.RelationshipType == nil {
    if v, ok:= StringPointer(""); ok {
      s.relatedlearningstandarditemrefidtype.RelationshipType = ((*String)(v))
      }
      }
      return s.relatedlearningstandarditemrefidtype.RelationshipType
    }
  func (s *RelatedLearningStandardItemRefIdType) RelationshipType_IsNil() bool {
    return s.RelationshipType == nil || s.relatedlearningstandarditemrefidtype.RelationshipType == nil
    }

func (n *TimeTable) Unset(key string) *TimeTable {
        switch key {
  case "Title":
   n.timetable.Title = nil
  case "LocalCodeList":
   n.timetable.LocalCodeList = nil
  case "SchoolYear":
   n.timetable.SchoolYear = nil
  case "SIF_ExtendedElements":
   n.timetable.SIF_ExtendedElements = nil
  case "SchoolInfoRefId":
   n.timetable.SchoolInfoRefId = nil
  case "TeachingPeriodsPerDay":
   n.timetable.TeachingPeriodsPerDay = nil
  case "EndDate":
   n.timetable.EndDate = nil
  case "SIF_Metadata":
   n.timetable.SIF_Metadata = nil
  case "SchoolLocalId":
   n.timetable.SchoolLocalId = nil
  case "StartDate":
   n.timetable.StartDate = nil
  case "TimeTableCreationDate":
   n.timetable.TimeTableCreationDate = nil
  case "LocalId":
   n.timetable.LocalId = nil
  case "TimeTableDayList":
   n.timetable.TimeTableDayList = nil
  case "DaysPerCycle":
   n.timetable.DaysPerCycle = nil
  case "PeriodsPerDay":
   n.timetable.PeriodsPerDay = nil
  case "RefId":
   n.timetable.RefId = nil
  case "SchoolName":
   n.timetable.SchoolName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTable")
        }
        return n
}

func (n *TimeTable) SetProperty(key string, value interface{}) *TimeTable {
        if n == nil {
                n, _ = TimeTablePointer(TimeTable{})
        }
        switch key {
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.timetable.Title = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.timetable.LocalCodeList = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.timetable.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.timetable.SIF_ExtendedElements = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetable.SchoolInfoRefId = ((*String)(v))
      }
    case "TeachingPeriodsPerDay":
    
    if v, ok:= IntPointer(value); ok {
      n.timetable.TeachingPeriodsPerDay = ((*Int)(v))
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.timetable.EndDate = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.timetable.SIF_Metadata = v
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetable.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.timetable.StartDate = ((*String)(v))
      }
    case "TimeTableCreationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.timetable.TimeTableCreationDate = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetable.LocalId = ((*LocalIdType)(v))
      }
    case "TimeTableDayList":
    if v, ok:= TimeTableDayListTypePointer(value); ok {
      n.timetable.TimeTableDayList = v
      }
    case "DaysPerCycle":
    
    if v, ok:= IntPointer(value); ok {
      n.timetable.DaysPerCycle = ((*Int)(v))
      }
    case "PeriodsPerDay":
    
    if v, ok:= IntPointer(value); ok {
      n.timetable.PeriodsPerDay = ((*Int)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetable.RefId = ((*RefIdType)(v))
      }
    case "SchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.timetable.SchoolName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTable")
        }
        return n
}

  func (s *TimeTable) Title() *String {
    if s.timetable.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetable.Title = ((*String)(v))
      }
      }
      return s.timetable.Title
    }
  func (s *TimeTable) Title_IsNil() bool {
    return s.Title == nil || s.timetable.Title == nil
    }
  func (s *TimeTable) LocalCodeList() *LocalCodeListType {
    if s.timetable.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.timetable.LocalCodeList = v
      }
      }
      return s.timetable.LocalCodeList
    }
  func (s *TimeTable) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.timetable.LocalCodeList == nil
    }
  func (s *TimeTable) SchoolYear() *SchoolYearType {
    if s.timetable.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetable.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.timetable.SchoolYear
    }
  func (s *TimeTable) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.timetable.SchoolYear == nil
    }
  func (s *TimeTable) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.timetable.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.timetable.SIF_ExtendedElements = v
      }
      }
      return s.timetable.SIF_ExtendedElements
    }
  func (s *TimeTable) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.timetable.SIF_ExtendedElements == nil
    }
  func (s *TimeTable) SchoolInfoRefId() *String {
    if s.timetable.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetable.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.timetable.SchoolInfoRefId
    }
  func (s *TimeTable) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.timetable.SchoolInfoRefId == nil
    }
  func (s *TimeTable) TeachingPeriodsPerDay() *Int {
    if s.timetable.TeachingPeriodsPerDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.timetable.TeachingPeriodsPerDay = ((*Int)(v))
      }
      }
      return s.timetable.TeachingPeriodsPerDay
    }
  func (s *TimeTable) TeachingPeriodsPerDay_IsNil() bool {
    return s.TeachingPeriodsPerDay == nil || s.timetable.TeachingPeriodsPerDay == nil
    }
  func (s *TimeTable) EndDate() *String {
    if s.timetable.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetable.EndDate = ((*String)(v))
      }
      }
      return s.timetable.EndDate
    }
  func (s *TimeTable) EndDate_IsNil() bool {
    return s.EndDate == nil || s.timetable.EndDate == nil
    }
  func (s *TimeTable) SIF_Metadata() *SIF_MetadataType {
    if s.timetable.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.timetable.SIF_Metadata = v
      }
      }
      return s.timetable.SIF_Metadata
    }
  func (s *TimeTable) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.timetable.SIF_Metadata == nil
    }
  func (s *TimeTable) SchoolLocalId() *LocalIdType {
    if s.timetable.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetable.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetable.SchoolLocalId
    }
  func (s *TimeTable) SchoolLocalId_IsNil() bool {
    return s.SchoolLocalId == nil || s.timetable.SchoolLocalId == nil
    }
  func (s *TimeTable) StartDate() *String {
    if s.timetable.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetable.StartDate = ((*String)(v))
      }
      }
      return s.timetable.StartDate
    }
  func (s *TimeTable) StartDate_IsNil() bool {
    return s.StartDate == nil || s.timetable.StartDate == nil
    }
  func (s *TimeTable) TimeTableCreationDate() *String {
    if s.timetable.TimeTableCreationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetable.TimeTableCreationDate = ((*String)(v))
      }
      }
      return s.timetable.TimeTableCreationDate
    }
  func (s *TimeTable) TimeTableCreationDate_IsNil() bool {
    return s.TimeTableCreationDate == nil || s.timetable.TimeTableCreationDate == nil
    }
  func (s *TimeTable) LocalId() *LocalIdType {
    if s.timetable.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetable.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.timetable.LocalId
    }
  func (s *TimeTable) LocalId_IsNil() bool {
    return s.LocalId == nil || s.timetable.LocalId == nil
    }
  func (s *TimeTable) TimeTableDayList() *TimeTableDayListType {
    if s.timetable.TimeTableDayList == nil {
     if v, ok:= TimeTableDayListTypePointer(TimeTableDayListType{}); ok {
      s.timetable.TimeTableDayList = v
      }
      }
      return s.timetable.TimeTableDayList
    }
  func (s *TimeTable) TimeTableDayList_IsNil() bool {
    return s.TimeTableDayList == nil || s.timetable.TimeTableDayList == nil
    }
  func (s *TimeTable) DaysPerCycle() *Int {
    if s.timetable.DaysPerCycle == nil {
    if v, ok:= IntPointer(0); ok {
      s.timetable.DaysPerCycle = ((*Int)(v))
      }
      }
      return s.timetable.DaysPerCycle
    }
  func (s *TimeTable) DaysPerCycle_IsNil() bool {
    return s.DaysPerCycle == nil || s.timetable.DaysPerCycle == nil
    }
  func (s *TimeTable) PeriodsPerDay() *Int {
    if s.timetable.PeriodsPerDay == nil {
    if v, ok:= IntPointer(0); ok {
      s.timetable.PeriodsPerDay = ((*Int)(v))
      }
      }
      return s.timetable.PeriodsPerDay
    }
  func (s *TimeTable) PeriodsPerDay_IsNil() bool {
    return s.PeriodsPerDay == nil || s.timetable.PeriodsPerDay == nil
    }
  func (s *TimeTable) RefId() *RefIdType {
    if s.timetable.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetable.RefId = ((*RefIdType)(v))
      }
      }
      return s.timetable.RefId
    }
  func (s *TimeTable) RefId_IsNil() bool {
    return s.RefId == nil || s.timetable.RefId == nil
    }
  func (s *TimeTable) SchoolName() *String {
    if s.timetable.SchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetable.SchoolName = ((*String)(v))
      }
      }
      return s.timetable.SchoolName
    }
  func (s *TimeTable) SchoolName_IsNil() bool {
    return s.SchoolName == nil || s.timetable.SchoolName == nil
    }

func (n *ReferralSourceType) Unset(key string) *ReferralSourceType {
        switch key {
  case "Code":
   n.referralsourcetype.Code = nil
  case "OtherCodeList":
   n.referralsourcetype.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ReferralSourceType")
        }
        return n
}

func (n *ReferralSourceType) SetProperty(key string, value interface{}) *ReferralSourceType {
        if n == nil {
                n, _ = ReferralSourceTypePointer(ReferralSourceType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSets0792IdentificationProcedureType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSets0792IdentificationProcedureType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.referralsourcetype.Code = ((*AUCodeSets0792IdentificationProcedureType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.referralsourcetype.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ReferralSourceType")
        }
        return n
}

  func (s *ReferralSourceType) Code() *AUCodeSets0792IdentificationProcedureType {
    if s.referralsourcetype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.referralsourcetype.Code = ((*AUCodeSets0792IdentificationProcedureType)(v))
      }
      }
      return s.referralsourcetype.Code
    }
  func (s *ReferralSourceType) Code_IsNil() bool {
    return s.Code == nil || s.referralsourcetype.Code == nil
    }
  func (s *ReferralSourceType) OtherCodeList() *OtherCodeListType {
    if s.referralsourcetype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.referralsourcetype.OtherCodeList = v
      }
      }
      return s.referralsourcetype.OtherCodeList
    }
  func (s *ReferralSourceType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.referralsourcetype.OtherCodeList == nil
    }

func (n *OtherWellbeingResponseContainerType) Unset(key string) *OtherWellbeingResponseContainerType {
        switch key {
  case "OtherResponseDate":
   n.otherwellbeingresponsecontainertype.OtherResponseDate = nil
  case "OtherResponseNotes":
   n.otherwellbeingresponsecontainertype.OtherResponseNotes = nil
  case "Status":
   n.otherwellbeingresponsecontainertype.Status = nil
  case "OtherResponseType":
   n.otherwellbeingresponsecontainertype.OtherResponseType = nil
  case "OtherResponseDescription":
   n.otherwellbeingresponsecontainertype.OtherResponseDescription = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherWellbeingResponseContainerType")
        }
        return n
}

func (n *OtherWellbeingResponseContainerType) SetProperty(key string, value interface{}) *OtherWellbeingResponseContainerType {
        if n == nil {
                n, _ = OtherWellbeingResponseContainerTypePointer(OtherWellbeingResponseContainerType{})
        }
        switch key {
    case "OtherResponseDate":
    
    if v, ok:= StringPointer(value); ok {
      n.otherwellbeingresponsecontainertype.OtherResponseDate = ((*String)(v))
      }
    case "OtherResponseNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.otherwellbeingresponsecontainertype.OtherResponseNotes = ((*String)(v))
      }
    case "Status":
        if !CodesetContains(AUCodeSetsWellbeingStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.otherwellbeingresponsecontainertype.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
    case "OtherResponseType":
    
    if v, ok:= StringPointer(value); ok {
      n.otherwellbeingresponsecontainertype.OtherResponseType = ((*String)(v))
      }
    case "OtherResponseDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.otherwellbeingresponsecontainertype.OtherResponseDescription = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherWellbeingResponseContainerType")
        }
        return n
}

  func (s *OtherWellbeingResponseContainerType) OtherResponseDate() *String {
    if s.otherwellbeingresponsecontainertype.OtherResponseDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.otherwellbeingresponsecontainertype.OtherResponseDate = ((*String)(v))
      }
      }
      return s.otherwellbeingresponsecontainertype.OtherResponseDate
    }
  func (s *OtherWellbeingResponseContainerType) OtherResponseDate_IsNil() bool {
    return s.OtherResponseDate == nil || s.otherwellbeingresponsecontainertype.OtherResponseDate == nil
    }
  func (s *OtherWellbeingResponseContainerType) OtherResponseNotes() *String {
    if s.otherwellbeingresponsecontainertype.OtherResponseNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.otherwellbeingresponsecontainertype.OtherResponseNotes = ((*String)(v))
      }
      }
      return s.otherwellbeingresponsecontainertype.OtherResponseNotes
    }
  func (s *OtherWellbeingResponseContainerType) OtherResponseNotes_IsNil() bool {
    return s.OtherResponseNotes == nil || s.otherwellbeingresponsecontainertype.OtherResponseNotes == nil
    }
  func (s *OtherWellbeingResponseContainerType) Status() *AUCodeSetsWellbeingStatusType {
    if s.otherwellbeingresponsecontainertype.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.otherwellbeingresponsecontainertype.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
      }
      return s.otherwellbeingresponsecontainertype.Status
    }
  func (s *OtherWellbeingResponseContainerType) Status_IsNil() bool {
    return s.Status == nil || s.otherwellbeingresponsecontainertype.Status == nil
    }
  func (s *OtherWellbeingResponseContainerType) OtherResponseType() *String {
    if s.otherwellbeingresponsecontainertype.OtherResponseType == nil {
    if v, ok:= StringPointer(""); ok {
      s.otherwellbeingresponsecontainertype.OtherResponseType = ((*String)(v))
      }
      }
      return s.otherwellbeingresponsecontainertype.OtherResponseType
    }
  func (s *OtherWellbeingResponseContainerType) OtherResponseType_IsNil() bool {
    return s.OtherResponseType == nil || s.otherwellbeingresponsecontainertype.OtherResponseType == nil
    }
  func (s *OtherWellbeingResponseContainerType) OtherResponseDescription() *String {
    if s.otherwellbeingresponsecontainertype.OtherResponseDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.otherwellbeingresponsecontainertype.OtherResponseDescription = ((*String)(v))
      }
      }
      return s.otherwellbeingresponsecontainertype.OtherResponseDescription
    }
  func (s *OtherWellbeingResponseContainerType) OtherResponseDescription_IsNil() bool {
    return s.OtherResponseDescription == nil || s.otherwellbeingresponsecontainertype.OtherResponseDescription == nil
    }

func (n *HoldInfoType) Unset(key string) *HoldInfoType {
        switch key {
  case "DateNeeded":
   n.holdinfotype.DateNeeded = nil
  case "ReservationExpiry":
   n.holdinfotype.ReservationExpiry = nil
  case "MadeAvailable":
   n.holdinfotype.MadeAvailable = nil
  case "Expires":
   n.holdinfotype.Expires = nil
  case "Type":
   n.holdinfotype.Type = nil
  case "DatePlaced":
   n.holdinfotype.DatePlaced = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "HoldInfoType")
        }
        return n
}

func (n *HoldInfoType) SetProperty(key string, value interface{}) *HoldInfoType {
        if n == nil {
                n, _ = HoldInfoTypePointer(HoldInfoType{})
        }
        switch key {
    case "DateNeeded":
    
    if v, ok:= StringPointer(value); ok {
      n.holdinfotype.DateNeeded = ((*String)(v))
      }
    case "ReservationExpiry":
    
    if v, ok:= StringPointer(value); ok {
      n.holdinfotype.ReservationExpiry = ((*String)(v))
      }
    case "MadeAvailable":
    
    if v, ok:= StringPointer(value); ok {
      n.holdinfotype.MadeAvailable = ((*String)(v))
      }
    case "Expires":
    
    if v, ok:= StringPointer(value); ok {
      n.holdinfotype.Expires = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.holdinfotype.Type = ((*String)(v))
      }
    case "DatePlaced":
    
    if v, ok:= StringPointer(value); ok {
      n.holdinfotype.DatePlaced = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "HoldInfoType")
        }
        return n
}

  func (s *HoldInfoType) DateNeeded() *String {
    if s.holdinfotype.DateNeeded == nil {
    if v, ok:= StringPointer(""); ok {
      s.holdinfotype.DateNeeded = ((*String)(v))
      }
      }
      return s.holdinfotype.DateNeeded
    }
  func (s *HoldInfoType) DateNeeded_IsNil() bool {
    return s.DateNeeded == nil || s.holdinfotype.DateNeeded == nil
    }
  func (s *HoldInfoType) ReservationExpiry() *String {
    if s.holdinfotype.ReservationExpiry == nil {
    if v, ok:= StringPointer(""); ok {
      s.holdinfotype.ReservationExpiry = ((*String)(v))
      }
      }
      return s.holdinfotype.ReservationExpiry
    }
  func (s *HoldInfoType) ReservationExpiry_IsNil() bool {
    return s.ReservationExpiry == nil || s.holdinfotype.ReservationExpiry == nil
    }
  func (s *HoldInfoType) MadeAvailable() *String {
    if s.holdinfotype.MadeAvailable == nil {
    if v, ok:= StringPointer(""); ok {
      s.holdinfotype.MadeAvailable = ((*String)(v))
      }
      }
      return s.holdinfotype.MadeAvailable
    }
  func (s *HoldInfoType) MadeAvailable_IsNil() bool {
    return s.MadeAvailable == nil || s.holdinfotype.MadeAvailable == nil
    }
  func (s *HoldInfoType) Expires() *String {
    if s.holdinfotype.Expires == nil {
    if v, ok:= StringPointer(""); ok {
      s.holdinfotype.Expires = ((*String)(v))
      }
      }
      return s.holdinfotype.Expires
    }
  func (s *HoldInfoType) Expires_IsNil() bool {
    return s.Expires == nil || s.holdinfotype.Expires == nil
    }
  func (s *HoldInfoType) Type() *String {
    if s.holdinfotype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.holdinfotype.Type = ((*String)(v))
      }
      }
      return s.holdinfotype.Type
    }
  func (s *HoldInfoType) Type_IsNil() bool {
    return s.Type == nil || s.holdinfotype.Type == nil
    }
  func (s *HoldInfoType) DatePlaced() *String {
    if s.holdinfotype.DatePlaced == nil {
    if v, ok:= StringPointer(""); ok {
      s.holdinfotype.DatePlaced = ((*String)(v))
      }
      }
      return s.holdinfotype.DatePlaced
    }
  func (s *HoldInfoType) DatePlaced_IsNil() bool {
    return s.DatePlaced == nil || s.holdinfotype.DatePlaced == nil
    }

func (n *TechnicalRequirementsType) Unset(key string) *TechnicalRequirementsType {
        switch key {
  case "TechnicalRequirement":
   n.technicalrequirementstype.TechnicalRequirement = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TechnicalRequirementsType")
        }
        return n
}

func (n *TechnicalRequirementsType) SetProperty(key string, value interface{}) *TechnicalRequirementsType {
        if n == nil {
                n, _ = TechnicalRequirementsTypePointer(TechnicalRequirementsType{})
        }
        switch key {
    case "TechnicalRequirement":
    
    if v, ok:= StringPointer(value); ok {
      n.technicalrequirementstype.TechnicalRequirement = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TechnicalRequirementsType")
        }
        return n
}

  func (s *TechnicalRequirementsType) TechnicalRequirement() *String {
    if s.technicalrequirementstype.TechnicalRequirement == nil {
    if v, ok:= StringPointer(""); ok {
      s.technicalrequirementstype.TechnicalRequirement = ((*String)(v))
      }
      }
      return s.technicalrequirementstype.TechnicalRequirement
    }
  func (s *TechnicalRequirementsType) TechnicalRequirement_IsNil() bool {
    return s.TechnicalRequirement == nil || s.technicalrequirementstype.TechnicalRequirement == nil
    }

func (n *SystemRole_SIF_RefId) Unset(key string) *SystemRole_SIF_RefId {
        switch key {
  case "SIF_RefObject":
   n.systemrole_sif_refid.SIF_RefObject = nil
  case "Value":
   n.systemrole_sif_refid.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_SIF_RefId")
        }
        return n
}

func (n *SystemRole_SIF_RefId) SetProperty(key string, value interface{}) *SystemRole_SIF_RefId {
        if n == nil {
                n, _ = SystemRole_SIF_RefIdPointer(SystemRole_SIF_RefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.systemrole_sif_refid.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.systemrole_sif_refid.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_SIF_RefId")
        }
        return n
}

  func (s *SystemRole_SIF_RefId) SIF_RefObject() *String {
    if s.systemrole_sif_refid.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.systemrole_sif_refid.SIF_RefObject = ((*String)(v))
      }
      }
      return s.systemrole_sif_refid.SIF_RefObject
    }
  func (s *SystemRole_SIF_RefId) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.systemrole_sif_refid.SIF_RefObject == nil
    }
  func (s *SystemRole_SIF_RefId) Value() *String {
    if s.systemrole_sif_refid.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.systemrole_sif_refid.Value = ((*String)(v))
      }
      }
      return s.systemrole_sif_refid.Value
    }
  func (s *SystemRole_SIF_RefId) Value_IsNil() bool {
    return s.Value == nil || s.systemrole_sif_refid.Value == nil
    }

func (n *SchoolContactType) Unset(key string) *SchoolContactType {
        switch key {
  case "PublishInDirectory":
   n.schoolcontacttype.PublishInDirectory = nil
  case "ContactInfo":
   n.schoolcontacttype.ContactInfo = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolContactType")
        }
        return n
}

func (n *SchoolContactType) SetProperty(key string, value interface{}) *SchoolContactType {
        if n == nil {
                n, _ = SchoolContactTypePointer(SchoolContactType{})
        }
        switch key {
    case "PublishInDirectory":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolcontacttype.PublishInDirectory = ((*PublishInDirectoryType)(v))
      }
    case "ContactInfo":
    if v, ok:= ContactInfoTypePointer(value); ok {
      n.schoolcontacttype.ContactInfo = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolContactType")
        }
        return n
}

  func (s *SchoolContactType) PublishInDirectory() *PublishInDirectoryType {
    if s.schoolcontacttype.PublishInDirectory == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcontacttype.PublishInDirectory = ((*PublishInDirectoryType)(v))
      }
      }
      return s.schoolcontacttype.PublishInDirectory
    }
  func (s *SchoolContactType) PublishInDirectory_IsNil() bool {
    return s.PublishInDirectory == nil || s.schoolcontacttype.PublishInDirectory == nil
    }
  func (s *SchoolContactType) ContactInfo() *ContactInfoType {
    if s.schoolcontacttype.ContactInfo == nil {
     if v, ok:= ContactInfoTypePointer(ContactInfoType{}); ok {
      s.schoolcontacttype.ContactInfo = v
      }
      }
      return s.schoolcontacttype.ContactInfo
    }
  func (s *SchoolContactType) ContactInfo_IsNil() bool {
    return s.ContactInfo == nil || s.schoolcontacttype.ContactInfo == nil
    }

func (n *SourceObjectsType_SourceObject) Unset(key string) *SourceObjectsType_SourceObject {
        switch key {
  case "SIF_RefObject":
   n.sourceobjectstype_sourceobject.SIF_RefObject = nil
  case "Value":
   n.sourceobjectstype_sourceobject.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SourceObjectsType_SourceObject")
        }
        return n
}

func (n *SourceObjectsType_SourceObject) SetProperty(key string, value interface{}) *SourceObjectsType_SourceObject {
        if n == nil {
                n, _ = SourceObjectsType_SourceObjectPointer(SourceObjectsType_SourceObject{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.sourceobjectstype_sourceobject.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.sourceobjectstype_sourceobject.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SourceObjectsType_SourceObject")
        }
        return n
}

  func (s *SourceObjectsType_SourceObject) SIF_RefObject() *String {
    if s.sourceobjectstype_sourceobject.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.sourceobjectstype_sourceobject.SIF_RefObject = ((*String)(v))
      }
      }
      return s.sourceobjectstype_sourceobject.SIF_RefObject
    }
  func (s *SourceObjectsType_SourceObject) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.sourceobjectstype_sourceobject.SIF_RefObject == nil
    }
  func (s *SourceObjectsType_SourceObject) Value() *String {
    if s.sourceobjectstype_sourceobject.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.sourceobjectstype_sourceobject.Value = ((*String)(v))
      }
      }
      return s.sourceobjectstype_sourceobject.Value
    }
  func (s *SourceObjectsType_SourceObject) Value_IsNil() bool {
    return s.Value == nil || s.sourceobjectstype_sourceobject.Value == nil
    }

func (n *SystemRole_RoleScope) Unset(key string) *SystemRole_RoleScope {
        switch key {
  case "RoleScopeRefId":
   n.systemrole_rolescope.RoleScopeRefId = nil
  case "RoleScopeName":
   n.systemrole_rolescope.RoleScopeName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_RoleScope")
        }
        return n
}

func (n *SystemRole_RoleScope) SetProperty(key string, value interface{}) *SystemRole_RoleScope {
        if n == nil {
                n, _ = SystemRole_RoleScopePointer(SystemRole_RoleScope{})
        }
        switch key {
    case "RoleScopeRefId":
    if v, ok:= SystemRole_RoleScopeRefIdPointer(value); ok {
      n.systemrole_rolescope.RoleScopeRefId = v
      }
    case "RoleScopeName":
    
    if v, ok:= StringPointer(value); ok {
      n.systemrole_rolescope.RoleScopeName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_RoleScope")
        }
        return n
}

  func (s *SystemRole_RoleScope) RoleScopeRefId() *SystemRole_RoleScopeRefId {
    if s.systemrole_rolescope.RoleScopeRefId == nil {
     if v, ok:= SystemRole_RoleScopeRefIdPointer(SystemRole_RoleScopeRefId{}); ok {
      s.systemrole_rolescope.RoleScopeRefId = v
      }
      }
      return s.systemrole_rolescope.RoleScopeRefId
    }
  func (s *SystemRole_RoleScope) RoleScopeRefId_IsNil() bool {
    return s.RoleScopeRefId == nil || s.systemrole_rolescope.RoleScopeRefId == nil
    }
  func (s *SystemRole_RoleScope) RoleScopeName() *String {
    if s.systemrole_rolescope.RoleScopeName == nil {
    if v, ok:= StringPointer(""); ok {
      s.systemrole_rolescope.RoleScopeName = ((*String)(v))
      }
      }
      return s.systemrole_rolescope.RoleScopeName
    }
  func (s *SystemRole_RoleScope) RoleScopeName_IsNil() bool {
    return s.RoleScopeName == nil || s.systemrole_rolescope.RoleScopeName == nil
    }

func (n *TeachingGroup) Unset(key string) *TeachingGroup {
        switch key {
  case "SchoolCourseInfoRefId":
   n.teachinggroup.SchoolCourseInfoRefId = nil
  case "KeyLearningArea":
   n.teachinggroup.KeyLearningArea = nil
  case "SchoolLocalId":
   n.teachinggroup.SchoolLocalId = nil
  case "ShortName":
   n.teachinggroup.ShortName = nil
  case "SchoolCourseLocalId":
   n.teachinggroup.SchoolCourseLocalId = nil
  case "LocalId":
   n.teachinggroup.LocalId = nil
  case "TimeTableSubjectLocalId":
   n.teachinggroup.TimeTableSubjectLocalId = nil
  case "Semester":
   n.teachinggroup.Semester = nil
  case "StudentList":
   n.teachinggroup.StudentList = nil
  case "TimeTableSubjectRefId":
   n.teachinggroup.TimeTableSubjectRefId = nil
  case "SchoolYear":
   n.teachinggroup.SchoolYear = nil
  case "SIF_ExtendedElements":
   n.teachinggroup.SIF_ExtendedElements = nil
  case "Set":
   n.teachinggroup.Set = nil
  case "TeacherList":
   n.teachinggroup.TeacherList = nil
  case "MaxClassSize":
   n.teachinggroup.MaxClassSize = nil
  case "LongName":
   n.teachinggroup.LongName = nil
  case "SIF_Metadata":
   n.teachinggroup.SIF_Metadata = nil
  case "RefId":
   n.teachinggroup.RefId = nil
  case "MinClassSize":
   n.teachinggroup.MinClassSize = nil
  case "SchoolInfoRefId":
   n.teachinggroup.SchoolInfoRefId = nil
  case "TeachingGroupPeriodList":
   n.teachinggroup.TeachingGroupPeriodList = nil
  case "LocalCodeList":
   n.teachinggroup.LocalCodeList = nil
  case "GroupType":
   n.teachinggroup.GroupType = nil
  case "Block":
   n.teachinggroup.Block = nil
  case "CurriculumLevel":
   n.teachinggroup.CurriculumLevel = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroup")
        }
        return n
}

func (n *TeachingGroup) SetProperty(key string, value interface{}) *TeachingGroup {
        if n == nil {
                n, _ = TeachingGroupPointer(TeachingGroup{})
        }
        switch key {
    case "SchoolCourseInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.SchoolCourseInfoRefId = ((*RefIdType)(v))
      }
    case "KeyLearningArea":
        if !CodesetContains(AUCodeSetsACStrandType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsACStrandType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.KeyLearningArea = ((*AUCodeSetsACStrandType)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "ShortName":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.ShortName = ((*String)(v))
      }
    case "SchoolCourseLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.SchoolCourseLocalId = ((*LocalIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.LocalId = ((*LocalIdType)(v))
      }
    case "TimeTableSubjectLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.TimeTableSubjectLocalId = ((*LocalIdType)(v))
      }
    case "Semester":
    
    if v, ok:= IntPointer(value); ok {
      n.teachinggroup.Semester = ((*Int)(v))
      }
    case "StudentList":
    if v, ok:= StudentListTypePointer(value); ok {
      n.teachinggroup.StudentList = v
      }
    case "TimeTableSubjectRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.teachinggroup.SIF_ExtendedElements = v
      }
    case "Set":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.Set = ((*String)(v))
      }
    case "TeacherList":
    if v, ok:= TeacherListTypePointer(value); ok {
      n.teachinggroup.TeacherList = v
      }
    case "MaxClassSize":
    
    if v, ok:= IntPointer(value); ok {
      n.teachinggroup.MaxClassSize = ((*Int)(v))
      }
    case "LongName":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.LongName = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.teachinggroup.SIF_Metadata = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.RefId = ((*RefIdType)(v))
      }
    case "MinClassSize":
    
    if v, ok:= IntPointer(value); ok {
      n.teachinggroup.MinClassSize = ((*Int)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.SchoolInfoRefId = ((*RefIdType)(v))
      }
    case "TeachingGroupPeriodList":
    if v, ok:= TeachingGroupPeriodListTypePointer(value); ok {
      n.teachinggroup.TeachingGroupPeriodList = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.teachinggroup.LocalCodeList = v
      }
    case "GroupType":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.GroupType = ((*String)(v))
      }
    case "Block":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.Block = ((*String)(v))
      }
    case "CurriculumLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.teachinggroup.CurriculumLevel = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TeachingGroup")
        }
        return n
}

  func (s *TeachingGroup) SchoolCourseInfoRefId() *RefIdType {
    if s.teachinggroup.SchoolCourseInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.SchoolCourseInfoRefId = ((*RefIdType)(v))
      }
      }
      return s.teachinggroup.SchoolCourseInfoRefId
    }
  func (s *TeachingGroup) SchoolCourseInfoRefId_IsNil() bool {
    return s.SchoolCourseInfoRefId == nil || s.teachinggroup.SchoolCourseInfoRefId == nil
    }
  func (s *TeachingGroup) KeyLearningArea() *AUCodeSetsACStrandType {
    if s.teachinggroup.KeyLearningArea == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.KeyLearningArea = ((*AUCodeSetsACStrandType)(v))
      }
      }
      return s.teachinggroup.KeyLearningArea
    }
  func (s *TeachingGroup) KeyLearningArea_IsNil() bool {
    return s.KeyLearningArea == nil || s.teachinggroup.KeyLearningArea == nil
    }
  func (s *TeachingGroup) SchoolLocalId() *LocalIdType {
    if s.teachinggroup.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.teachinggroup.SchoolLocalId
    }
  func (s *TeachingGroup) SchoolLocalId_IsNil() bool {
    return s.SchoolLocalId == nil || s.teachinggroup.SchoolLocalId == nil
    }
  func (s *TeachingGroup) ShortName() *String {
    if s.teachinggroup.ShortName == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.ShortName = ((*String)(v))
      }
      }
      return s.teachinggroup.ShortName
    }
  func (s *TeachingGroup) ShortName_IsNil() bool {
    return s.ShortName == nil || s.teachinggroup.ShortName == nil
    }
  func (s *TeachingGroup) SchoolCourseLocalId() *LocalIdType {
    if s.teachinggroup.SchoolCourseLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.SchoolCourseLocalId = ((*LocalIdType)(v))
      }
      }
      return s.teachinggroup.SchoolCourseLocalId
    }
  func (s *TeachingGroup) SchoolCourseLocalId_IsNil() bool {
    return s.SchoolCourseLocalId == nil || s.teachinggroup.SchoolCourseLocalId == nil
    }
  func (s *TeachingGroup) LocalId() *LocalIdType {
    if s.teachinggroup.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.teachinggroup.LocalId
    }
  func (s *TeachingGroup) LocalId_IsNil() bool {
    return s.LocalId == nil || s.teachinggroup.LocalId == nil
    }
  func (s *TeachingGroup) TimeTableSubjectLocalId() *LocalIdType {
    if s.teachinggroup.TimeTableSubjectLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.TimeTableSubjectLocalId = ((*LocalIdType)(v))
      }
      }
      return s.teachinggroup.TimeTableSubjectLocalId
    }
  func (s *TeachingGroup) TimeTableSubjectLocalId_IsNil() bool {
    return s.TimeTableSubjectLocalId == nil || s.teachinggroup.TimeTableSubjectLocalId == nil
    }
  func (s *TeachingGroup) Semester() *Int {
    if s.teachinggroup.Semester == nil {
    if v, ok:= IntPointer(0); ok {
      s.teachinggroup.Semester = ((*Int)(v))
      }
      }
      return s.teachinggroup.Semester
    }
  func (s *TeachingGroup) Semester_IsNil() bool {
    return s.Semester == nil || s.teachinggroup.Semester == nil
    }
  func (s *TeachingGroup) StudentList() *StudentListType {
    if s.teachinggroup.StudentList == nil {
     if v, ok:= StudentListTypePointer(StudentListType{}); ok {
      s.teachinggroup.StudentList = v
      }
      }
      return s.teachinggroup.StudentList
    }
  func (s *TeachingGroup) StudentList_IsNil() bool {
    return s.StudentList == nil || s.teachinggroup.StudentList == nil
    }
  func (s *TeachingGroup) TimeTableSubjectRefId() *RefIdType {
    if s.teachinggroup.TimeTableSubjectRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.TimeTableSubjectRefId = ((*RefIdType)(v))
      }
      }
      return s.teachinggroup.TimeTableSubjectRefId
    }
  func (s *TeachingGroup) TimeTableSubjectRefId_IsNil() bool {
    return s.TimeTableSubjectRefId == nil || s.teachinggroup.TimeTableSubjectRefId == nil
    }
  func (s *TeachingGroup) SchoolYear() *SchoolYearType {
    if s.teachinggroup.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.teachinggroup.SchoolYear
    }
  func (s *TeachingGroup) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.teachinggroup.SchoolYear == nil
    }
  func (s *TeachingGroup) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.teachinggroup.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.teachinggroup.SIF_ExtendedElements = v
      }
      }
      return s.teachinggroup.SIF_ExtendedElements
    }
  func (s *TeachingGroup) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.teachinggroup.SIF_ExtendedElements == nil
    }
  func (s *TeachingGroup) Set() *String {
    if s.teachinggroup.Set == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.Set = ((*String)(v))
      }
      }
      return s.teachinggroup.Set
    }
  func (s *TeachingGroup) Set_IsNil() bool {
    return s.Set == nil || s.teachinggroup.Set == nil
    }
  func (s *TeachingGroup) TeacherList() *TeacherListType {
    if s.teachinggroup.TeacherList == nil {
     if v, ok:= TeacherListTypePointer(TeacherListType{}); ok {
      s.teachinggroup.TeacherList = v
      }
      }
      return s.teachinggroup.TeacherList
    }
  func (s *TeachingGroup) TeacherList_IsNil() bool {
    return s.TeacherList == nil || s.teachinggroup.TeacherList == nil
    }
  func (s *TeachingGroup) MaxClassSize() *Int {
    if s.teachinggroup.MaxClassSize == nil {
    if v, ok:= IntPointer(0); ok {
      s.teachinggroup.MaxClassSize = ((*Int)(v))
      }
      }
      return s.teachinggroup.MaxClassSize
    }
  func (s *TeachingGroup) MaxClassSize_IsNil() bool {
    return s.MaxClassSize == nil || s.teachinggroup.MaxClassSize == nil
    }
  func (s *TeachingGroup) LongName() *String {
    if s.teachinggroup.LongName == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.LongName = ((*String)(v))
      }
      }
      return s.teachinggroup.LongName
    }
  func (s *TeachingGroup) LongName_IsNil() bool {
    return s.LongName == nil || s.teachinggroup.LongName == nil
    }
  func (s *TeachingGroup) SIF_Metadata() *SIF_MetadataType {
    if s.teachinggroup.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.teachinggroup.SIF_Metadata = v
      }
      }
      return s.teachinggroup.SIF_Metadata
    }
  func (s *TeachingGroup) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.teachinggroup.SIF_Metadata == nil
    }
  func (s *TeachingGroup) RefId() *RefIdType {
    if s.teachinggroup.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.RefId = ((*RefIdType)(v))
      }
      }
      return s.teachinggroup.RefId
    }
  func (s *TeachingGroup) RefId_IsNil() bool {
    return s.RefId == nil || s.teachinggroup.RefId == nil
    }
  func (s *TeachingGroup) MinClassSize() *Int {
    if s.teachinggroup.MinClassSize == nil {
    if v, ok:= IntPointer(0); ok {
      s.teachinggroup.MinClassSize = ((*Int)(v))
      }
      }
      return s.teachinggroup.MinClassSize
    }
  func (s *TeachingGroup) MinClassSize_IsNil() bool {
    return s.MinClassSize == nil || s.teachinggroup.MinClassSize == nil
    }
  func (s *TeachingGroup) SchoolInfoRefId() *RefIdType {
    if s.teachinggroup.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.SchoolInfoRefId = ((*RefIdType)(v))
      }
      }
      return s.teachinggroup.SchoolInfoRefId
    }
  func (s *TeachingGroup) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.teachinggroup.SchoolInfoRefId == nil
    }
  func (s *TeachingGroup) TeachingGroupPeriodList() *TeachingGroupPeriodListType {
    if s.teachinggroup.TeachingGroupPeriodList == nil {
     if v, ok:= TeachingGroupPeriodListTypePointer(TeachingGroupPeriodListType{}); ok {
      s.teachinggroup.TeachingGroupPeriodList = v
      }
      }
      return s.teachinggroup.TeachingGroupPeriodList
    }
  func (s *TeachingGroup) TeachingGroupPeriodList_IsNil() bool {
    return s.TeachingGroupPeriodList == nil || s.teachinggroup.TeachingGroupPeriodList == nil
    }
  func (s *TeachingGroup) LocalCodeList() *LocalCodeListType {
    if s.teachinggroup.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.teachinggroup.LocalCodeList = v
      }
      }
      return s.teachinggroup.LocalCodeList
    }
  func (s *TeachingGroup) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.teachinggroup.LocalCodeList == nil
    }
  func (s *TeachingGroup) GroupType() *String {
    if s.teachinggroup.GroupType == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.GroupType = ((*String)(v))
      }
      }
      return s.teachinggroup.GroupType
    }
  func (s *TeachingGroup) GroupType_IsNil() bool {
    return s.GroupType == nil || s.teachinggroup.GroupType == nil
    }
  func (s *TeachingGroup) Block() *String {
    if s.teachinggroup.Block == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.Block = ((*String)(v))
      }
      }
      return s.teachinggroup.Block
    }
  func (s *TeachingGroup) Block_IsNil() bool {
    return s.Block == nil || s.teachinggroup.Block == nil
    }
  func (s *TeachingGroup) CurriculumLevel() *String {
    if s.teachinggroup.CurriculumLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.teachinggroup.CurriculumLevel = ((*String)(v))
      }
      }
      return s.teachinggroup.CurriculumLevel
    }
  func (s *TeachingGroup) CurriculumLevel_IsNil() bool {
    return s.CurriculumLevel == nil || s.teachinggroup.CurriculumLevel == nil
    }

func (n *ScheduledActivityOverrideType) Unset(key string) *ScheduledActivityOverrideType {
        switch key {
  case "Value":
   n.scheduledactivityoverridetype.Value = nil
  case "DateOfOverride":
   n.scheduledactivityoverridetype.DateOfOverride = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScheduledActivityOverrideType")
        }
        return n
}

func (n *ScheduledActivityOverrideType) SetProperty(key string, value interface{}) *ScheduledActivityOverrideType {
        if n == nil {
                n, _ = ScheduledActivityOverrideTypePointer(ScheduledActivityOverrideType{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivityoverridetype.Value = ((*String)(v))
      }
    case "DateOfOverride":
    
    if v, ok:= StringPointer(value); ok {
      n.scheduledactivityoverridetype.DateOfOverride = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScheduledActivityOverrideType")
        }
        return n
}

  func (s *ScheduledActivityOverrideType) Value() *String {
    if s.scheduledactivityoverridetype.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivityoverridetype.Value = ((*String)(v))
      }
      }
      return s.scheduledactivityoverridetype.Value
    }
  func (s *ScheduledActivityOverrideType) Value_IsNil() bool {
    return s.Value == nil || s.scheduledactivityoverridetype.Value == nil
    }
  func (s *ScheduledActivityOverrideType) DateOfOverride() *String {
    if s.scheduledactivityoverridetype.DateOfOverride == nil {
    if v, ok:= StringPointer(""); ok {
      s.scheduledactivityoverridetype.DateOfOverride = ((*String)(v))
      }
      }
      return s.scheduledactivityoverridetype.DateOfOverride
    }
  func (s *ScheduledActivityOverrideType) DateOfOverride_IsNil() bool {
    return s.DateOfOverride == nil || s.scheduledactivityoverridetype.DateOfOverride == nil
    }

func (n *ScoreType) Unset(key string) *ScoreType {
        switch key {
  case "ScoreDescriptionList":
   n.scoretype.ScoreDescriptionList = nil
  case "MaxScoreValue":
   n.scoretype.MaxScoreValue = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScoreType")
        }
        return n
}

func (n *ScoreType) SetProperty(key string, value interface{}) *ScoreType {
        if n == nil {
                n, _ = ScoreTypePointer(ScoreType{})
        }
        switch key {
    case "ScoreDescriptionList":
    if v, ok:= ScoreDescriptionListTypePointer(value); ok {
      n.scoretype.ScoreDescriptionList = v
      }
    case "MaxScoreValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.scoretype.MaxScoreValue = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ScoreType")
        }
        return n
}

  func (s *ScoreType) ScoreDescriptionList() *ScoreDescriptionListType {
    if s.scoretype.ScoreDescriptionList == nil {
     if v, ok:= ScoreDescriptionListTypePointer(ScoreDescriptionListType{}); ok {
      s.scoretype.ScoreDescriptionList = v
      }
      }
      return s.scoretype.ScoreDescriptionList
    }
  func (s *ScoreType) ScoreDescriptionList_IsNil() bool {
    return s.ScoreDescriptionList == nil || s.scoretype.ScoreDescriptionList == nil
    }
  func (s *ScoreType) MaxScoreValue() *Float {
    if s.scoretype.MaxScoreValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.scoretype.MaxScoreValue = ((*Float)(v))
      }
      }
      return s.scoretype.MaxScoreValue
    }
  func (s *ScoreType) MaxScoreValue_IsNil() bool {
    return s.MaxScoreValue == nil || s.scoretype.MaxScoreValue == nil
    }

func (n *VendorInfo) Unset(key string) *VendorInfo {
        switch key {
  case "LocalId":
   n.vendorinfo.LocalId = nil
  case "RefId":
   n.vendorinfo.RefId = nil
  case "PaymentTerms":
   n.vendorinfo.PaymentTerms = nil
  case "ContactInfo":
   n.vendorinfo.ContactInfo = nil
  case "BPay":
   n.vendorinfo.BPay = nil
  case "SIF_Metadata":
   n.vendorinfo.SIF_Metadata = nil
  case "BSB":
   n.vendorinfo.BSB = nil
  case "ABN":
   n.vendorinfo.ABN = nil
  case "AccountNumber":
   n.vendorinfo.AccountNumber = nil
  case "AccountName":
   n.vendorinfo.AccountName = nil
  case "LocalCodeList":
   n.vendorinfo.LocalCodeList = nil
  case "CustomerId":
   n.vendorinfo.CustomerId = nil
  case "RegisteredForGST":
   n.vendorinfo.RegisteredForGST = nil
  case "SIF_ExtendedElements":
   n.vendorinfo.SIF_ExtendedElements = nil
  case "Name":
   n.vendorinfo.Name = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "VendorInfo")
        }
        return n
}

func (n *VendorInfo) SetProperty(key string, value interface{}) *VendorInfo {
        if n == nil {
                n, _ = VendorInfoPointer(VendorInfo{})
        }
        switch key {
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.vendorinfo.LocalId = ((*LocalIdType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.vendorinfo.RefId = ((*RefIdType)(v))
      }
    case "PaymentTerms":
    
    if v, ok:= StringPointer(value); ok {
      n.vendorinfo.PaymentTerms = ((*String)(v))
      }
    case "ContactInfo":
    if v, ok:= ContactInfoTypePointer(value); ok {
      n.vendorinfo.ContactInfo = v
      }
    case "BPay":
    
    if v, ok:= StringPointer(value); ok {
      n.vendorinfo.BPay = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.vendorinfo.SIF_Metadata = v
      }
    case "BSB":
    
    if v, ok:= StringPointer(value); ok {
      n.vendorinfo.BSB = ((*String)(v))
      }
    case "ABN":
    
    if v, ok:= StringPointer(value); ok {
      n.vendorinfo.ABN = ((*String)(v))
      }
    case "AccountNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.vendorinfo.AccountNumber = ((*String)(v))
      }
    case "AccountName":
    
    if v, ok:= StringPointer(value); ok {
      n.vendorinfo.AccountName = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.vendorinfo.LocalCodeList = v
      }
    case "CustomerId":
    
    if v, ok:= StringPointer(value); ok {
      n.vendorinfo.CustomerId = ((*String)(v))
      }
    case "RegisteredForGST":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.vendorinfo.RegisteredForGST = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.vendorinfo.SIF_ExtendedElements = v
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.vendorinfo.Name = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "VendorInfo")
        }
        return n
}

  func (s *VendorInfo) LocalId() *LocalIdType {
    if s.vendorinfo.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.vendorinfo.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.vendorinfo.LocalId
    }
  func (s *VendorInfo) LocalId_IsNil() bool {
    return s.LocalId == nil || s.vendorinfo.LocalId == nil
    }
  func (s *VendorInfo) RefId() *RefIdType {
    if s.vendorinfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.vendorinfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.vendorinfo.RefId
    }
  func (s *VendorInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.vendorinfo.RefId == nil
    }
  func (s *VendorInfo) PaymentTerms() *String {
    if s.vendorinfo.PaymentTerms == nil {
    if v, ok:= StringPointer(""); ok {
      s.vendorinfo.PaymentTerms = ((*String)(v))
      }
      }
      return s.vendorinfo.PaymentTerms
    }
  func (s *VendorInfo) PaymentTerms_IsNil() bool {
    return s.PaymentTerms == nil || s.vendorinfo.PaymentTerms == nil
    }
  func (s *VendorInfo) ContactInfo() *ContactInfoType {
    if s.vendorinfo.ContactInfo == nil {
     if v, ok:= ContactInfoTypePointer(ContactInfoType{}); ok {
      s.vendorinfo.ContactInfo = v
      }
      }
      return s.vendorinfo.ContactInfo
    }
  func (s *VendorInfo) ContactInfo_IsNil() bool {
    return s.ContactInfo == nil || s.vendorinfo.ContactInfo == nil
    }
  func (s *VendorInfo) BPay() *String {
    if s.vendorinfo.BPay == nil {
    if v, ok:= StringPointer(""); ok {
      s.vendorinfo.BPay = ((*String)(v))
      }
      }
      return s.vendorinfo.BPay
    }
  func (s *VendorInfo) BPay_IsNil() bool {
    return s.BPay == nil || s.vendorinfo.BPay == nil
    }
  func (s *VendorInfo) SIF_Metadata() *SIF_MetadataType {
    if s.vendorinfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.vendorinfo.SIF_Metadata = v
      }
      }
      return s.vendorinfo.SIF_Metadata
    }
  func (s *VendorInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.vendorinfo.SIF_Metadata == nil
    }
  func (s *VendorInfo) BSB() *String {
    if s.vendorinfo.BSB == nil {
    if v, ok:= StringPointer(""); ok {
      s.vendorinfo.BSB = ((*String)(v))
      }
      }
      return s.vendorinfo.BSB
    }
  func (s *VendorInfo) BSB_IsNil() bool {
    return s.BSB == nil || s.vendorinfo.BSB == nil
    }
  func (s *VendorInfo) ABN() *String {
    if s.vendorinfo.ABN == nil {
    if v, ok:= StringPointer(""); ok {
      s.vendorinfo.ABN = ((*String)(v))
      }
      }
      return s.vendorinfo.ABN
    }
  func (s *VendorInfo) ABN_IsNil() bool {
    return s.ABN == nil || s.vendorinfo.ABN == nil
    }
  func (s *VendorInfo) AccountNumber() *String {
    if s.vendorinfo.AccountNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.vendorinfo.AccountNumber = ((*String)(v))
      }
      }
      return s.vendorinfo.AccountNumber
    }
  func (s *VendorInfo) AccountNumber_IsNil() bool {
    return s.AccountNumber == nil || s.vendorinfo.AccountNumber == nil
    }
  func (s *VendorInfo) AccountName() *String {
    if s.vendorinfo.AccountName == nil {
    if v, ok:= StringPointer(""); ok {
      s.vendorinfo.AccountName = ((*String)(v))
      }
      }
      return s.vendorinfo.AccountName
    }
  func (s *VendorInfo) AccountName_IsNil() bool {
    return s.AccountName == nil || s.vendorinfo.AccountName == nil
    }
  func (s *VendorInfo) LocalCodeList() *LocalCodeListType {
    if s.vendorinfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.vendorinfo.LocalCodeList = v
      }
      }
      return s.vendorinfo.LocalCodeList
    }
  func (s *VendorInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.vendorinfo.LocalCodeList == nil
    }
  func (s *VendorInfo) CustomerId() *String {
    if s.vendorinfo.CustomerId == nil {
    if v, ok:= StringPointer(""); ok {
      s.vendorinfo.CustomerId = ((*String)(v))
      }
      }
      return s.vendorinfo.CustomerId
    }
  func (s *VendorInfo) CustomerId_IsNil() bool {
    return s.CustomerId == nil || s.vendorinfo.CustomerId == nil
    }
  func (s *VendorInfo) RegisteredForGST() *AUCodeSetsYesOrNoCategoryType {
    if s.vendorinfo.RegisteredForGST == nil {
    if v, ok:= StringPointer(""); ok {
      s.vendorinfo.RegisteredForGST = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.vendorinfo.RegisteredForGST
    }
  func (s *VendorInfo) RegisteredForGST_IsNil() bool {
    return s.RegisteredForGST == nil || s.vendorinfo.RegisteredForGST == nil
    }
  func (s *VendorInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.vendorinfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.vendorinfo.SIF_ExtendedElements = v
      }
      }
      return s.vendorinfo.SIF_ExtendedElements
    }
  func (s *VendorInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.vendorinfo.SIF_ExtendedElements == nil
    }
  func (s *VendorInfo) Name() *String {
    if s.vendorinfo.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.vendorinfo.Name = ((*String)(v))
      }
      }
      return s.vendorinfo.Name
    }
  func (s *VendorInfo) Name_IsNil() bool {
    return s.Name == nil || s.vendorinfo.Name == nil
    }

func (n *StudentAttendanceCollectionReportingType) Unset(key string) *StudentAttendanceCollectionReportingType {
        switch key {
  case "SchoolInfoRefId":
   n.studentattendancecollectionreportingtype.SchoolInfoRefId = nil
  case "EntityLevel":
   n.studentattendancecollectionreportingtype.EntityLevel = nil
  case "CommonwealthId":
   n.studentattendancecollectionreportingtype.CommonwealthId = nil
  case "StateProvinceId":
   n.studentattendancecollectionreportingtype.StateProvinceId = nil
  case "EntityName":
   n.studentattendancecollectionreportingtype.EntityName = nil
  case "EntityContact":
   n.studentattendancecollectionreportingtype.EntityContact = nil
  case "ACARAId":
   n.studentattendancecollectionreportingtype.ACARAId = nil
  case "LocalId":
   n.studentattendancecollectionreportingtype.LocalId = nil
  case "StatsCohortYearLevelList":
   n.studentattendancecollectionreportingtype.StatsCohortYearLevelList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceCollectionReportingType")
        }
        return n
}

func (n *StudentAttendanceCollectionReportingType) SetProperty(key string, value interface{}) *StudentAttendanceCollectionReportingType {
        if n == nil {
                n, _ = StudentAttendanceCollectionReportingTypePointer(StudentAttendanceCollectionReportingType{})
        }
        switch key {
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancecollectionreportingtype.SchoolInfoRefId = ((*String)(v))
      }
    case "EntityLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancecollectionreportingtype.EntityLevel = ((*String)(v))
      }
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancecollectionreportingtype.CommonwealthId = ((*String)(v))
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancecollectionreportingtype.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "EntityName":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancecollectionreportingtype.EntityName = ((*String)(v))
      }
    case "EntityContact":
    if v, ok:= EntityContactInfoTypePointer(value); ok {
      n.studentattendancecollectionreportingtype.EntityContact = v
      }
    case "ACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancecollectionreportingtype.ACARAId = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancecollectionreportingtype.LocalId = ((*LocalIdType)(v))
      }
    case "StatsCohortYearLevelList":
    if v, ok:= StatsCohortYearLevelListTypePointer(value); ok {
      n.studentattendancecollectionreportingtype.StatsCohortYearLevelList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceCollectionReportingType")
        }
        return n
}

  func (s *StudentAttendanceCollectionReportingType) SchoolInfoRefId() *String {
    if s.studentattendancecollectionreportingtype.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancecollectionreportingtype.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.studentattendancecollectionreportingtype.SchoolInfoRefId
    }
  func (s *StudentAttendanceCollectionReportingType) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.studentattendancecollectionreportingtype.SchoolInfoRefId == nil
    }
  func (s *StudentAttendanceCollectionReportingType) EntityLevel() *String {
    if s.studentattendancecollectionreportingtype.EntityLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancecollectionreportingtype.EntityLevel = ((*String)(v))
      }
      }
      return s.studentattendancecollectionreportingtype.EntityLevel
    }
  func (s *StudentAttendanceCollectionReportingType) EntityLevel_IsNil() bool {
    return s.EntityLevel == nil || s.studentattendancecollectionreportingtype.EntityLevel == nil
    }
  func (s *StudentAttendanceCollectionReportingType) CommonwealthId() *String {
    if s.studentattendancecollectionreportingtype.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancecollectionreportingtype.CommonwealthId = ((*String)(v))
      }
      }
      return s.studentattendancecollectionreportingtype.CommonwealthId
    }
  func (s *StudentAttendanceCollectionReportingType) CommonwealthId_IsNil() bool {
    return s.CommonwealthId == nil || s.studentattendancecollectionreportingtype.CommonwealthId == nil
    }
  func (s *StudentAttendanceCollectionReportingType) StateProvinceId() *StateProvinceIdType {
    if s.studentattendancecollectionreportingtype.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancecollectionreportingtype.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.studentattendancecollectionreportingtype.StateProvinceId
    }
  func (s *StudentAttendanceCollectionReportingType) StateProvinceId_IsNil() bool {
    return s.StateProvinceId == nil || s.studentattendancecollectionreportingtype.StateProvinceId == nil
    }
  func (s *StudentAttendanceCollectionReportingType) EntityName() *String {
    if s.studentattendancecollectionreportingtype.EntityName == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancecollectionreportingtype.EntityName = ((*String)(v))
      }
      }
      return s.studentattendancecollectionreportingtype.EntityName
    }
  func (s *StudentAttendanceCollectionReportingType) EntityName_IsNil() bool {
    return s.EntityName == nil || s.studentattendancecollectionreportingtype.EntityName == nil
    }
  func (s *StudentAttendanceCollectionReportingType) EntityContact() *EntityContactInfoType {
    if s.studentattendancecollectionreportingtype.EntityContact == nil {
     if v, ok:= EntityContactInfoTypePointer(EntityContactInfoType{}); ok {
      s.studentattendancecollectionreportingtype.EntityContact = v
      }
      }
      return s.studentattendancecollectionreportingtype.EntityContact
    }
  func (s *StudentAttendanceCollectionReportingType) EntityContact_IsNil() bool {
    return s.EntityContact == nil || s.studentattendancecollectionreportingtype.EntityContact == nil
    }
  func (s *StudentAttendanceCollectionReportingType) ACARAId() *String {
    if s.studentattendancecollectionreportingtype.ACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancecollectionreportingtype.ACARAId = ((*String)(v))
      }
      }
      return s.studentattendancecollectionreportingtype.ACARAId
    }
  func (s *StudentAttendanceCollectionReportingType) ACARAId_IsNil() bool {
    return s.ACARAId == nil || s.studentattendancecollectionreportingtype.ACARAId == nil
    }
  func (s *StudentAttendanceCollectionReportingType) LocalId() *LocalIdType {
    if s.studentattendancecollectionreportingtype.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancecollectionreportingtype.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.studentattendancecollectionreportingtype.LocalId
    }
  func (s *StudentAttendanceCollectionReportingType) LocalId_IsNil() bool {
    return s.LocalId == nil || s.studentattendancecollectionreportingtype.LocalId == nil
    }
  func (s *StudentAttendanceCollectionReportingType) StatsCohortYearLevelList() *StatsCohortYearLevelListType {
    if s.studentattendancecollectionreportingtype.StatsCohortYearLevelList == nil {
     if v, ok:= StatsCohortYearLevelListTypePointer(StatsCohortYearLevelListType{}); ok {
      s.studentattendancecollectionreportingtype.StatsCohortYearLevelList = v
      }
      }
      return s.studentattendancecollectionreportingtype.StatsCohortYearLevelList
    }
  func (s *StudentAttendanceCollectionReportingType) StatsCohortYearLevelList_IsNil() bool {
    return s.StatsCohortYearLevelList == nil || s.studentattendancecollectionreportingtype.StatsCohortYearLevelList == nil
    }

func (n *ElectronicIdType) Unset(key string) *ElectronicIdType {
        switch key {
  case "Type":
   n.electronicidtype.Type = nil
  case "Value":
   n.electronicidtype.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ElectronicIdType")
        }
        return n
}

func (n *ElectronicIdType) SetProperty(key string, value interface{}) *ElectronicIdType {
        if n == nil {
                n, _ = ElectronicIdTypePointer(ElectronicIdType{})
        }
        switch key {
    case "Type":
        if !CodesetContains(AUCodeSetsElectronicIdTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsElectronicIdTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.electronicidtype.Type = ((*AUCodeSetsElectronicIdTypeType)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.electronicidtype.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ElectronicIdType")
        }
        return n
}

  func (s *ElectronicIdType) Type() *AUCodeSetsElectronicIdTypeType {
    if s.electronicidtype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.electronicidtype.Type = ((*AUCodeSetsElectronicIdTypeType)(v))
      }
      }
      return s.electronicidtype.Type
    }
  func (s *ElectronicIdType) Type_IsNil() bool {
    return s.Type == nil || s.electronicidtype.Type == nil
    }
  func (s *ElectronicIdType) Value() *String {
    if s.electronicidtype.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.electronicidtype.Value = ((*String)(v))
      }
      }
      return s.electronicidtype.Value
    }
  func (s *ElectronicIdType) Value_IsNil() bool {
    return s.Value == nil || s.electronicidtype.Value == nil
    }

func (n *AbstractContentElementType_TextData) Unset(key string) *AbstractContentElementType_TextData {
        switch key {
  case "MIMEType":
   n.abstractcontentelementtype_textdata.MIMEType = nil
  case "Value":
   n.abstractcontentelementtype_textdata.Value = nil
  case "Description":
   n.abstractcontentelementtype_textdata.Description = nil
  case "FileName":
   n.abstractcontentelementtype_textdata.FileName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_TextData")
        }
        return n
}

func (n *AbstractContentElementType_TextData) SetProperty(key string, value interface{}) *AbstractContentElementType_TextData {
        if n == nil {
                n, _ = AbstractContentElementType_TextDataPointer(AbstractContentElementType_TextData{})
        }
        switch key {
    case "MIMEType":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentelementtype_textdata.MIMEType = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentelementtype_textdata.Value = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentelementtype_textdata.Description = ((*String)(v))
      }
    case "FileName":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentelementtype_textdata.FileName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentElementType_TextData")
        }
        return n
}

  func (s *AbstractContentElementType_TextData) MIMEType() *String {
    if s.abstractcontentelementtype_textdata.MIMEType == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentelementtype_textdata.MIMEType = ((*String)(v))
      }
      }
      return s.abstractcontentelementtype_textdata.MIMEType
    }
  func (s *AbstractContentElementType_TextData) MIMEType_IsNil() bool {
    return s.MIMEType == nil || s.abstractcontentelementtype_textdata.MIMEType == nil
    }
  func (s *AbstractContentElementType_TextData) Value() *String {
    if s.abstractcontentelementtype_textdata.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentelementtype_textdata.Value = ((*String)(v))
      }
      }
      return s.abstractcontentelementtype_textdata.Value
    }
  func (s *AbstractContentElementType_TextData) Value_IsNil() bool {
    return s.Value == nil || s.abstractcontentelementtype_textdata.Value == nil
    }
  func (s *AbstractContentElementType_TextData) Description() *String {
    if s.abstractcontentelementtype_textdata.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentelementtype_textdata.Description = ((*String)(v))
      }
      }
      return s.abstractcontentelementtype_textdata.Description
    }
  func (s *AbstractContentElementType_TextData) Description_IsNil() bool {
    return s.Description == nil || s.abstractcontentelementtype_textdata.Description == nil
    }
  func (s *AbstractContentElementType_TextData) FileName() *String {
    if s.abstractcontentelementtype_textdata.FileName == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentelementtype_textdata.FileName = ((*String)(v))
      }
      }
      return s.abstractcontentelementtype_textdata.FileName
    }
  func (s *AbstractContentElementType_TextData) FileName_IsNil() bool {
    return s.FileName == nil || s.abstractcontentelementtype_textdata.FileName == nil
    }

func (n *ReligionType) Unset(key string) *ReligionType {
        switch key {
  case "Code":
   n.religiontype.Code = nil
  case "OtherCodeList":
   n.religiontype.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ReligionType")
        }
        return n
}

func (n *ReligionType) SetProperty(key string, value interface{}) *ReligionType {
        if n == nil {
                n, _ = ReligionTypePointer(ReligionType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.religiontype.Code = ((*AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.religiontype.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ReligionType")
        }
        return n
}

  func (s *ReligionType) Code() *AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType {
    if s.religiontype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.religiontype.Code = ((*AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType)(v))
      }
      }
      return s.religiontype.Code
    }
  func (s *ReligionType) Code_IsNil() bool {
    return s.Code == nil || s.religiontype.Code == nil
    }
  func (s *ReligionType) OtherCodeList() *OtherCodeListType {
    if s.religiontype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.religiontype.OtherCodeList = v
      }
      }
      return s.religiontype.OtherCodeList
    }
  func (s *ReligionType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.religiontype.OtherCodeList == nil
    }

func (n *MapReferenceType) Unset(key string) *MapReferenceType {
        switch key {
  case "XCoordinate":
   n.mapreferencetype.XCoordinate = nil
  case "MapNumber":
   n.mapreferencetype.MapNumber = nil
  case "Type":
   n.mapreferencetype.Type = nil
  case "YCoordinate":
   n.mapreferencetype.YCoordinate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MapReferenceType")
        }
        return n
}

func (n *MapReferenceType) SetProperty(key string, value interface{}) *MapReferenceType {
        if n == nil {
                n, _ = MapReferenceTypePointer(MapReferenceType{})
        }
        switch key {
    case "XCoordinate":
    
    if v, ok:= StringPointer(value); ok {
      n.mapreferencetype.XCoordinate = ((*String)(v))
      }
    case "MapNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.mapreferencetype.MapNumber = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.mapreferencetype.Type = ((*String)(v))
      }
    case "YCoordinate":
    
    if v, ok:= StringPointer(value); ok {
      n.mapreferencetype.YCoordinate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MapReferenceType")
        }
        return n
}

  func (s *MapReferenceType) XCoordinate() *String {
    if s.mapreferencetype.XCoordinate == nil {
    if v, ok:= StringPointer(""); ok {
      s.mapreferencetype.XCoordinate = ((*String)(v))
      }
      }
      return s.mapreferencetype.XCoordinate
    }
  func (s *MapReferenceType) XCoordinate_IsNil() bool {
    return s.XCoordinate == nil || s.mapreferencetype.XCoordinate == nil
    }
  func (s *MapReferenceType) MapNumber() *String {
    if s.mapreferencetype.MapNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.mapreferencetype.MapNumber = ((*String)(v))
      }
      }
      return s.mapreferencetype.MapNumber
    }
  func (s *MapReferenceType) MapNumber_IsNil() bool {
    return s.MapNumber == nil || s.mapreferencetype.MapNumber == nil
    }
  func (s *MapReferenceType) Type() *String {
    if s.mapreferencetype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.mapreferencetype.Type = ((*String)(v))
      }
      }
      return s.mapreferencetype.Type
    }
  func (s *MapReferenceType) Type_IsNil() bool {
    return s.Type == nil || s.mapreferencetype.Type == nil
    }
  func (s *MapReferenceType) YCoordinate() *String {
    if s.mapreferencetype.YCoordinate == nil {
    if v, ok:= StringPointer(""); ok {
      s.mapreferencetype.YCoordinate = ((*String)(v))
      }
      }
      return s.mapreferencetype.YCoordinate
    }
  func (s *MapReferenceType) YCoordinate_IsNil() bool {
    return s.YCoordinate == nil || s.mapreferencetype.YCoordinate == nil
    }

func (n *AggregateStatisticInfo_CalculationRule) Unset(key string) *AggregateStatisticInfo_CalculationRule {
        switch key {
  case "Type":
   n.aggregatestatisticinfo_calculationrule.Type = nil
  case "Value":
   n.aggregatestatisticinfo_calculationrule.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateStatisticInfo_CalculationRule")
        }
        return n
}

func (n *AggregateStatisticInfo_CalculationRule) SetProperty(key string, value interface{}) *AggregateStatisticInfo_CalculationRule {
        if n == nil {
                n, _ = AggregateStatisticInfo_CalculationRulePointer(AggregateStatisticInfo_CalculationRule{})
        }
        switch key {
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatestatisticinfo_calculationrule.Type = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatestatisticinfo_calculationrule.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateStatisticInfo_CalculationRule")
        }
        return n
}

  func (s *AggregateStatisticInfo_CalculationRule) Type() *String {
    if s.aggregatestatisticinfo_calculationrule.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatestatisticinfo_calculationrule.Type = ((*String)(v))
      }
      }
      return s.aggregatestatisticinfo_calculationrule.Type
    }
  func (s *AggregateStatisticInfo_CalculationRule) Type_IsNil() bool {
    return s.Type == nil || s.aggregatestatisticinfo_calculationrule.Type == nil
    }
  func (s *AggregateStatisticInfo_CalculationRule) Value() *String {
    if s.aggregatestatisticinfo_calculationrule.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatestatisticinfo_calculationrule.Value = ((*String)(v))
      }
      }
      return s.aggregatestatisticinfo_calculationrule.Value
    }
  func (s *AggregateStatisticInfo_CalculationRule) Value_IsNil() bool {
    return s.Value == nil || s.aggregatestatisticinfo_calculationrule.Value == nil
    }

func (n *EntityContactInfoType) Unset(key string) *EntityContactInfoType {
        switch key {
  case "Role":
   n.entitycontactinfotype.Role = nil
  case "Address":
   n.entitycontactinfotype.Address = nil
  case "Name":
   n.entitycontactinfotype.Name = nil
  case "Email":
   n.entitycontactinfotype.Email = nil
  case "PhoneNumber":
   n.entitycontactinfotype.PhoneNumber = nil
  case "RegistrationDetails":
   n.entitycontactinfotype.RegistrationDetails = nil
  case "Qualifications":
   n.entitycontactinfotype.Qualifications = nil
  case "PositionTitle":
   n.entitycontactinfotype.PositionTitle = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EntityContactInfoType")
        }
        return n
}

func (n *EntityContactInfoType) SetProperty(key string, value interface{}) *EntityContactInfoType {
        if n == nil {
                n, _ = EntityContactInfoTypePointer(EntityContactInfoType{})
        }
        switch key {
    case "Role":
    
    if v, ok:= StringPointer(value); ok {
      n.entitycontactinfotype.Role = ((*String)(v))
      }
    case "Address":
    if v, ok:= AddressTypePointer(value); ok {
      n.entitycontactinfotype.Address = v
      }
    case "Name":
    if v, ok:= NameTypePointer(value); ok {
      n.entitycontactinfotype.Name = v
      }
    case "Email":
    if v, ok:= EmailTypePointer(value); ok {
      n.entitycontactinfotype.Email = v
      }
    case "PhoneNumber":
    if v, ok:= PhoneNumberTypePointer(value); ok {
      n.entitycontactinfotype.PhoneNumber = v
      }
    case "RegistrationDetails":
    
    if v, ok:= StringPointer(value); ok {
      n.entitycontactinfotype.RegistrationDetails = ((*String)(v))
      }
    case "Qualifications":
    
    if v, ok:= StringPointer(value); ok {
      n.entitycontactinfotype.Qualifications = ((*String)(v))
      }
    case "PositionTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.entitycontactinfotype.PositionTitle = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EntityContactInfoType")
        }
        return n
}

  func (s *EntityContactInfoType) Role() *String {
    if s.entitycontactinfotype.Role == nil {
    if v, ok:= StringPointer(""); ok {
      s.entitycontactinfotype.Role = ((*String)(v))
      }
      }
      return s.entitycontactinfotype.Role
    }
  func (s *EntityContactInfoType) Role_IsNil() bool {
    return s.Role == nil || s.entitycontactinfotype.Role == nil
    }
  func (s *EntityContactInfoType) Address() *AddressType {
    if s.entitycontactinfotype.Address == nil {
     if v, ok:= AddressTypePointer(AddressType{}); ok {
      s.entitycontactinfotype.Address = v
      }
      }
      return s.entitycontactinfotype.Address
    }
  func (s *EntityContactInfoType) Address_IsNil() bool {
    return s.Address == nil || s.entitycontactinfotype.Address == nil
    }
  func (s *EntityContactInfoType) Name() *NameType {
    if s.entitycontactinfotype.Name == nil {
     if v, ok:= NameTypePointer(NameType{}); ok {
      s.entitycontactinfotype.Name = v
      }
      }
      return s.entitycontactinfotype.Name
    }
  func (s *EntityContactInfoType) Name_IsNil() bool {
    return s.Name == nil || s.entitycontactinfotype.Name == nil
    }
  func (s *EntityContactInfoType) Email() *EmailType {
    if s.entitycontactinfotype.Email == nil {
     if v, ok:= EmailTypePointer(EmailType{}); ok {
      s.entitycontactinfotype.Email = v
      }
      }
      return s.entitycontactinfotype.Email
    }
  func (s *EntityContactInfoType) Email_IsNil() bool {
    return s.Email == nil || s.entitycontactinfotype.Email == nil
    }
  func (s *EntityContactInfoType) PhoneNumber() *PhoneNumberType {
    if s.entitycontactinfotype.PhoneNumber == nil {
     if v, ok:= PhoneNumberTypePointer(PhoneNumberType{}); ok {
      s.entitycontactinfotype.PhoneNumber = v
      }
      }
      return s.entitycontactinfotype.PhoneNumber
    }
  func (s *EntityContactInfoType) PhoneNumber_IsNil() bool {
    return s.PhoneNumber == nil || s.entitycontactinfotype.PhoneNumber == nil
    }
  func (s *EntityContactInfoType) RegistrationDetails() *String {
    if s.entitycontactinfotype.RegistrationDetails == nil {
    if v, ok:= StringPointer(""); ok {
      s.entitycontactinfotype.RegistrationDetails = ((*String)(v))
      }
      }
      return s.entitycontactinfotype.RegistrationDetails
    }
  func (s *EntityContactInfoType) RegistrationDetails_IsNil() bool {
    return s.RegistrationDetails == nil || s.entitycontactinfotype.RegistrationDetails == nil
    }
  func (s *EntityContactInfoType) Qualifications() *String {
    if s.entitycontactinfotype.Qualifications == nil {
    if v, ok:= StringPointer(""); ok {
      s.entitycontactinfotype.Qualifications = ((*String)(v))
      }
      }
      return s.entitycontactinfotype.Qualifications
    }
  func (s *EntityContactInfoType) Qualifications_IsNil() bool {
    return s.Qualifications == nil || s.entitycontactinfotype.Qualifications == nil
    }
  func (s *EntityContactInfoType) PositionTitle() *String {
    if s.entitycontactinfotype.PositionTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.entitycontactinfotype.PositionTitle = ((*String)(v))
      }
      }
      return s.entitycontactinfotype.PositionTitle
    }
  func (s *EntityContactInfoType) PositionTitle_IsNil() bool {
    return s.PositionTitle == nil || s.entitycontactinfotype.PositionTitle == nil
    }

func (n *StudentPersonal) Unset(key string) *StudentPersonal {
        switch key {
  case "SIF_Metadata":
   n.studentpersonal.SIF_Metadata = nil
  case "AlertMessages":
   n.studentpersonal.AlertMessages = nil
  case "AcceptableUsePolicy":
   n.studentpersonal.AcceptableUsePolicy = nil
  case "YoungCarersRole":
   n.studentpersonal.YoungCarersRole = nil
  case "OnTimeGraduationYear":
   n.studentpersonal.OnTimeGraduationYear = nil
  case "EducationSupport":
   n.studentpersonal.EducationSupport = nil
  case "OtherIdList":
   n.studentpersonal.OtherIdList = nil
  case "RefId":
   n.studentpersonal.RefId = nil
  case "LocalCodeList":
   n.studentpersonal.LocalCodeList = nil
  case "MedicalAlertMessages":
   n.studentpersonal.MedicalAlertMessages = nil
  case "MostRecent":
   n.studentpersonal.MostRecent = nil
  case "ESLSupport":
   n.studentpersonal.ESLSupport = nil
  case "OfflineDelivery":
   n.studentpersonal.OfflineDelivery = nil
  case "PrePrimaryEducation":
   n.studentpersonal.PrePrimaryEducation = nil
  case "GraduationDate":
   n.studentpersonal.GraduationDate = nil
  case "EconomicDisadvantage":
   n.studentpersonal.EconomicDisadvantage = nil
  case "GiftedTalented":
   n.studentpersonal.GiftedTalented = nil
  case "Sensitive":
   n.studentpersonal.Sensitive = nil
  case "Disability":
   n.studentpersonal.Disability = nil
  case "LocalId":
   n.studentpersonal.LocalId = nil
  case "IntegrationAide":
   n.studentpersonal.IntegrationAide = nil
  case "ESL":
   n.studentpersonal.ESL = nil
  case "ElectronicIdList":
   n.studentpersonal.ElectronicIdList = nil
  case "StateProvinceId":
   n.studentpersonal.StateProvinceId = nil
  case "SIF_ExtendedElements":
   n.studentpersonal.SIF_ExtendedElements = nil
  case "HomeSchooledStudent":
   n.studentpersonal.HomeSchooledStudent = nil
  case "ESLDateAssessed":
   n.studentpersonal.ESLDateAssessed = nil
  case "ProjectedGraduationYear":
   n.studentpersonal.ProjectedGraduationYear = nil
  case "PersonInfo":
   n.studentpersonal.PersonInfo = nil
  case "PrePrimaryEducationHours":
   n.studentpersonal.PrePrimaryEducationHours = nil
  case "FirstAUSchoolEnrollment":
   n.studentpersonal.FirstAUSchoolEnrollment = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentPersonal")
        }
        return n
}

func (n *StudentPersonal) SetProperty(key string, value interface{}) *StudentPersonal {
        if n == nil {
                n, _ = StudentPersonalPointer(StudentPersonal{})
        }
        switch key {
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentpersonal.SIF_Metadata = v
      }
    case "AlertMessages":
    if v, ok:= AlertMessagesTypePointer(value); ok {
      n.studentpersonal.AlertMessages = v
      }
    case "AcceptableUsePolicy":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.AcceptableUsePolicy = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "YoungCarersRole":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.YoungCarersRole = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "OnTimeGraduationYear":
    
    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.OnTimeGraduationYear = ((*OnTimeGraduationYearType)(v))
      }
    case "EducationSupport":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.EducationSupport = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "OtherIdList":
    if v, ok:= OtherIdListTypePointer(value); ok {
      n.studentpersonal.OtherIdList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.RefId = ((*RefIdType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentpersonal.LocalCodeList = v
      }
    case "MedicalAlertMessages":
    if v, ok:= MedicalAlertMessagesTypePointer(value); ok {
      n.studentpersonal.MedicalAlertMessages = v
      }
    case "MostRecent":
    if v, ok:= StudentMostRecentContainerTypePointer(value); ok {
      n.studentpersonal.MostRecent = v
      }
    case "ESLSupport":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.ESLSupport = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "OfflineDelivery":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.OfflineDelivery = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "PrePrimaryEducation":
    
    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.PrePrimaryEducation = ((*String)(v))
      }
    case "GraduationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.GraduationDate = ((*GraduationDateType)(v))
      }
    case "EconomicDisadvantage":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.EconomicDisadvantage = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "GiftedTalented":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.GiftedTalented = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Sensitive":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.Sensitive = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Disability":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.Disability = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.LocalId = ((*LocalIdType)(v))
      }
    case "IntegrationAide":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.IntegrationAide = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ESL":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.ESL = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ElectronicIdList":
    if v, ok:= ElectronicIdListTypePointer(value); ok {
      n.studentpersonal.ElectronicIdList = v
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentpersonal.SIF_ExtendedElements = v
      }
    case "HomeSchooledStudent":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.HomeSchooledStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ESLDateAssessed":
    
    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.ESLDateAssessed = ((*String)(v))
      }
    case "ProjectedGraduationYear":
    
    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.ProjectedGraduationYear = ((*ProjectedGraduationYearType)(v))
      }
    case "PersonInfo":
    if v, ok:= PersonInfoTypePointer(value); ok {
      n.studentpersonal.PersonInfo = v
      }
    case "PrePrimaryEducationHours":
        if !CodesetContains(AUCodeSetsPrePrimaryHoursType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsPrePrimaryHoursType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.PrePrimaryEducationHours = ((*AUCodeSetsPrePrimaryHoursType)(v))
      }
    case "FirstAUSchoolEnrollment":
    
    if v, ok:= StringPointer(value); ok {
      n.studentpersonal.FirstAUSchoolEnrollment = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentPersonal")
        }
        return n
}

  func (s *StudentPersonal) SIF_Metadata() *SIF_MetadataType {
    if s.studentpersonal.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentpersonal.SIF_Metadata = v
      }
      }
      return s.studentpersonal.SIF_Metadata
    }
  func (s *StudentPersonal) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentpersonal.SIF_Metadata == nil
    }
  func (s *StudentPersonal) AlertMessages() *AlertMessagesType {
    if s.studentpersonal.AlertMessages == nil {
     if v, ok:= AlertMessagesTypePointer(AlertMessagesType{}); ok {
      s.studentpersonal.AlertMessages = v
      }
      }
      return s.studentpersonal.AlertMessages
    }
  func (s *StudentPersonal) AlertMessages_IsNil() bool {
    return s.AlertMessages == nil || s.studentpersonal.AlertMessages == nil
    }
  func (s *StudentPersonal) AcceptableUsePolicy() *AUCodeSetsYesOrNoCategoryType {
    if s.studentpersonal.AcceptableUsePolicy == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.AcceptableUsePolicy = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentpersonal.AcceptableUsePolicy
    }
  func (s *StudentPersonal) AcceptableUsePolicy_IsNil() bool {
    return s.AcceptableUsePolicy == nil || s.studentpersonal.AcceptableUsePolicy == nil
    }
  func (s *StudentPersonal) YoungCarersRole() *AUCodeSetsYesOrNoCategoryType {
    if s.studentpersonal.YoungCarersRole == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.YoungCarersRole = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentpersonal.YoungCarersRole
    }
  func (s *StudentPersonal) YoungCarersRole_IsNil() bool {
    return s.YoungCarersRole == nil || s.studentpersonal.YoungCarersRole == nil
    }
  func (s *StudentPersonal) OnTimeGraduationYear() *OnTimeGraduationYearType {
    if s.studentpersonal.OnTimeGraduationYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.OnTimeGraduationYear = ((*OnTimeGraduationYearType)(v))
      }
      }
      return s.studentpersonal.OnTimeGraduationYear
    }
  func (s *StudentPersonal) OnTimeGraduationYear_IsNil() bool {
    return s.OnTimeGraduationYear == nil || s.studentpersonal.OnTimeGraduationYear == nil
    }
  func (s *StudentPersonal) EducationSupport() *AUCodeSetsYesOrNoCategoryType {
    if s.studentpersonal.EducationSupport == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.EducationSupport = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentpersonal.EducationSupport
    }
  func (s *StudentPersonal) EducationSupport_IsNil() bool {
    return s.EducationSupport == nil || s.studentpersonal.EducationSupport == nil
    }
  func (s *StudentPersonal) OtherIdList() *OtherIdListType {
    if s.studentpersonal.OtherIdList == nil {
     if v, ok:= OtherIdListTypePointer(OtherIdListType{}); ok {
      s.studentpersonal.OtherIdList = v
      }
      }
      return s.studentpersonal.OtherIdList
    }
  func (s *StudentPersonal) OtherIdList_IsNil() bool {
    return s.OtherIdList == nil || s.studentpersonal.OtherIdList == nil
    }
  func (s *StudentPersonal) RefId() *RefIdType {
    if s.studentpersonal.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.RefId = ((*RefIdType)(v))
      }
      }
      return s.studentpersonal.RefId
    }
  func (s *StudentPersonal) RefId_IsNil() bool {
    return s.RefId == nil || s.studentpersonal.RefId == nil
    }
  func (s *StudentPersonal) LocalCodeList() *LocalCodeListType {
    if s.studentpersonal.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentpersonal.LocalCodeList = v
      }
      }
      return s.studentpersonal.LocalCodeList
    }
  func (s *StudentPersonal) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentpersonal.LocalCodeList == nil
    }
  func (s *StudentPersonal) MedicalAlertMessages() *MedicalAlertMessagesType {
    if s.studentpersonal.MedicalAlertMessages == nil {
     if v, ok:= MedicalAlertMessagesTypePointer(MedicalAlertMessagesType{}); ok {
      s.studentpersonal.MedicalAlertMessages = v
      }
      }
      return s.studentpersonal.MedicalAlertMessages
    }
  func (s *StudentPersonal) MedicalAlertMessages_IsNil() bool {
    return s.MedicalAlertMessages == nil || s.studentpersonal.MedicalAlertMessages == nil
    }
  func (s *StudentPersonal) MostRecent() *StudentMostRecentContainerType {
    if s.studentpersonal.MostRecent == nil {
     if v, ok:= StudentMostRecentContainerTypePointer(StudentMostRecentContainerType{}); ok {
      s.studentpersonal.MostRecent = v
      }
      }
      return s.studentpersonal.MostRecent
    }
  func (s *StudentPersonal) MostRecent_IsNil() bool {
    return s.MostRecent == nil || s.studentpersonal.MostRecent == nil
    }
  func (s *StudentPersonal) ESLSupport() *AUCodeSetsYesOrNoCategoryType {
    if s.studentpersonal.ESLSupport == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.ESLSupport = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentpersonal.ESLSupport
    }
  func (s *StudentPersonal) ESLSupport_IsNil() bool {
    return s.ESLSupport == nil || s.studentpersonal.ESLSupport == nil
    }
  func (s *StudentPersonal) OfflineDelivery() *AUCodeSetsYesOrNoCategoryType {
    if s.studentpersonal.OfflineDelivery == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.OfflineDelivery = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentpersonal.OfflineDelivery
    }
  func (s *StudentPersonal) OfflineDelivery_IsNil() bool {
    return s.OfflineDelivery == nil || s.studentpersonal.OfflineDelivery == nil
    }
  func (s *StudentPersonal) PrePrimaryEducation() *String {
    if s.studentpersonal.PrePrimaryEducation == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.PrePrimaryEducation = ((*String)(v))
      }
      }
      return s.studentpersonal.PrePrimaryEducation
    }
  func (s *StudentPersonal) PrePrimaryEducation_IsNil() bool {
    return s.PrePrimaryEducation == nil || s.studentpersonal.PrePrimaryEducation == nil
    }
  func (s *StudentPersonal) GraduationDate() *GraduationDateType {
    if s.studentpersonal.GraduationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.GraduationDate = ((*GraduationDateType)(v))
      }
      }
      return s.studentpersonal.GraduationDate
    }
  func (s *StudentPersonal) GraduationDate_IsNil() bool {
    return s.GraduationDate == nil || s.studentpersonal.GraduationDate == nil
    }
  func (s *StudentPersonal) EconomicDisadvantage() *AUCodeSetsYesOrNoCategoryType {
    if s.studentpersonal.EconomicDisadvantage == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.EconomicDisadvantage = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentpersonal.EconomicDisadvantage
    }
  func (s *StudentPersonal) EconomicDisadvantage_IsNil() bool {
    return s.EconomicDisadvantage == nil || s.studentpersonal.EconomicDisadvantage == nil
    }
  func (s *StudentPersonal) GiftedTalented() *AUCodeSetsYesOrNoCategoryType {
    if s.studentpersonal.GiftedTalented == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.GiftedTalented = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentpersonal.GiftedTalented
    }
  func (s *StudentPersonal) GiftedTalented_IsNil() bool {
    return s.GiftedTalented == nil || s.studentpersonal.GiftedTalented == nil
    }
  func (s *StudentPersonal) Sensitive() *AUCodeSetsYesOrNoCategoryType {
    if s.studentpersonal.Sensitive == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.Sensitive = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentpersonal.Sensitive
    }
  func (s *StudentPersonal) Sensitive_IsNil() bool {
    return s.Sensitive == nil || s.studentpersonal.Sensitive == nil
    }
  func (s *StudentPersonal) Disability() *AUCodeSetsYesOrNoCategoryType {
    if s.studentpersonal.Disability == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.Disability = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentpersonal.Disability
    }
  func (s *StudentPersonal) Disability_IsNil() bool {
    return s.Disability == nil || s.studentpersonal.Disability == nil
    }
  func (s *StudentPersonal) LocalId() *LocalIdType {
    if s.studentpersonal.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.studentpersonal.LocalId
    }
  func (s *StudentPersonal) LocalId_IsNil() bool {
    return s.LocalId == nil || s.studentpersonal.LocalId == nil
    }
  func (s *StudentPersonal) IntegrationAide() *AUCodeSetsYesOrNoCategoryType {
    if s.studentpersonal.IntegrationAide == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.IntegrationAide = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentpersonal.IntegrationAide
    }
  func (s *StudentPersonal) IntegrationAide_IsNil() bool {
    return s.IntegrationAide == nil || s.studentpersonal.IntegrationAide == nil
    }
  func (s *StudentPersonal) ESL() *AUCodeSetsYesOrNoCategoryType {
    if s.studentpersonal.ESL == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.ESL = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentpersonal.ESL
    }
  func (s *StudentPersonal) ESL_IsNil() bool {
    return s.ESL == nil || s.studentpersonal.ESL == nil
    }
  func (s *StudentPersonal) ElectronicIdList() *ElectronicIdListType {
    if s.studentpersonal.ElectronicIdList == nil {
     if v, ok:= ElectronicIdListTypePointer(ElectronicIdListType{}); ok {
      s.studentpersonal.ElectronicIdList = v
      }
      }
      return s.studentpersonal.ElectronicIdList
    }
  func (s *StudentPersonal) ElectronicIdList_IsNil() bool {
    return s.ElectronicIdList == nil || s.studentpersonal.ElectronicIdList == nil
    }
  func (s *StudentPersonal) StateProvinceId() *StateProvinceIdType {
    if s.studentpersonal.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.studentpersonal.StateProvinceId
    }
  func (s *StudentPersonal) StateProvinceId_IsNil() bool {
    return s.StateProvinceId == nil || s.studentpersonal.StateProvinceId == nil
    }
  func (s *StudentPersonal) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentpersonal.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentpersonal.SIF_ExtendedElements = v
      }
      }
      return s.studentpersonal.SIF_ExtendedElements
    }
  func (s *StudentPersonal) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentpersonal.SIF_ExtendedElements == nil
    }
  func (s *StudentPersonal) HomeSchooledStudent() *AUCodeSetsYesOrNoCategoryType {
    if s.studentpersonal.HomeSchooledStudent == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.HomeSchooledStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentpersonal.HomeSchooledStudent
    }
  func (s *StudentPersonal) HomeSchooledStudent_IsNil() bool {
    return s.HomeSchooledStudent == nil || s.studentpersonal.HomeSchooledStudent == nil
    }
  func (s *StudentPersonal) ESLDateAssessed() *String {
    if s.studentpersonal.ESLDateAssessed == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.ESLDateAssessed = ((*String)(v))
      }
      }
      return s.studentpersonal.ESLDateAssessed
    }
  func (s *StudentPersonal) ESLDateAssessed_IsNil() bool {
    return s.ESLDateAssessed == nil || s.studentpersonal.ESLDateAssessed == nil
    }
  func (s *StudentPersonal) ProjectedGraduationYear() *ProjectedGraduationYearType {
    if s.studentpersonal.ProjectedGraduationYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.ProjectedGraduationYear = ((*ProjectedGraduationYearType)(v))
      }
      }
      return s.studentpersonal.ProjectedGraduationYear
    }
  func (s *StudentPersonal) ProjectedGraduationYear_IsNil() bool {
    return s.ProjectedGraduationYear == nil || s.studentpersonal.ProjectedGraduationYear == nil
    }
  func (s *StudentPersonal) PersonInfo() *PersonInfoType {
    if s.studentpersonal.PersonInfo == nil {
     if v, ok:= PersonInfoTypePointer(PersonInfoType{}); ok {
      s.studentpersonal.PersonInfo = v
      }
      }
      return s.studentpersonal.PersonInfo
    }
  func (s *StudentPersonal) PersonInfo_IsNil() bool {
    return s.PersonInfo == nil || s.studentpersonal.PersonInfo == nil
    }
  func (s *StudentPersonal) PrePrimaryEducationHours() *AUCodeSetsPrePrimaryHoursType {
    if s.studentpersonal.PrePrimaryEducationHours == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.PrePrimaryEducationHours = ((*AUCodeSetsPrePrimaryHoursType)(v))
      }
      }
      return s.studentpersonal.PrePrimaryEducationHours
    }
  func (s *StudentPersonal) PrePrimaryEducationHours_IsNil() bool {
    return s.PrePrimaryEducationHours == nil || s.studentpersonal.PrePrimaryEducationHours == nil
    }
  func (s *StudentPersonal) FirstAUSchoolEnrollment() *String {
    if s.studentpersonal.FirstAUSchoolEnrollment == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentpersonal.FirstAUSchoolEnrollment = ((*String)(v))
      }
      }
      return s.studentpersonal.FirstAUSchoolEnrollment
    }
  func (s *StudentPersonal) FirstAUSchoolEnrollment_IsNil() bool {
    return s.FirstAUSchoolEnrollment == nil || s.studentpersonal.FirstAUSchoolEnrollment == nil
    }

func (n *Journal) Unset(key string) *Journal {
        switch key {
  case "CreatedDate":
   n.journal.CreatedDate = nil
  case "CreatedBy":
   n.journal.CreatedBy = nil
  case "OriginatingTransactionRefId":
   n.journal.OriginatingTransactionRefId = nil
  case "DebitFinancialAccountRefId":
   n.journal.DebitFinancialAccountRefId = nil
  case "LocalCodeList":
   n.journal.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.journal.SIF_ExtendedElements = nil
  case "Amount":
   n.journal.Amount = nil
  case "JournalAdjustmentList":
   n.journal.JournalAdjustmentList = nil
  case "Note":
   n.journal.Note = nil
  case "ApprovedDate":
   n.journal.ApprovedDate = nil
  case "SIF_Metadata":
   n.journal.SIF_Metadata = nil
  case "DebitAccountCode":
   n.journal.DebitAccountCode = nil
  case "CreditFinancialAccountRefId":
   n.journal.CreditFinancialAccountRefId = nil
  case "GSTCodeReplacement":
   n.journal.GSTCodeReplacement = nil
  case "ApprovedBy":
   n.journal.ApprovedBy = nil
  case "CreditAccountCode":
   n.journal.CreditAccountCode = nil
  case "LocalId":
   n.journal.LocalId = nil
  case "RefId":
   n.journal.RefId = nil
  case "GSTCodeOriginal":
   n.journal.GSTCodeOriginal = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Journal")
        }
        return n
}

func (n *Journal) SetProperty(key string, value interface{}) *Journal {
        if n == nil {
                n, _ = JournalPointer(Journal{})
        }
        switch key {
    case "CreatedDate":
    
    if v, ok:= StringPointer(value); ok {
      n.journal.CreatedDate = ((*String)(v))
      }
    case "CreatedBy":
    
    if v, ok:= StringPointer(value); ok {
      n.journal.CreatedBy = ((*String)(v))
      }
    case "OriginatingTransactionRefId":
    if v, ok:= Journal_OriginatingTransactionRefIdPointer(value); ok {
      n.journal.OriginatingTransactionRefId = v
      }
    case "DebitFinancialAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.journal.DebitFinancialAccountRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.journal.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.journal.SIF_ExtendedElements = v
      }
    case "Amount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.journal.Amount = v
      }
    case "JournalAdjustmentList":
    if v, ok:= JournalAdjustmentListTypePointer(value); ok {
      n.journal.JournalAdjustmentList = v
      }
    case "Note":
    
    if v, ok:= StringPointer(value); ok {
      n.journal.Note = ((*String)(v))
      }
    case "ApprovedDate":
    
    if v, ok:= StringPointer(value); ok {
      n.journal.ApprovedDate = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.journal.SIF_Metadata = v
      }
    case "DebitAccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.journal.DebitAccountCode = ((*String)(v))
      }
    case "CreditFinancialAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.journal.CreditFinancialAccountRefId = ((*String)(v))
      }
    case "GSTCodeReplacement":
    
    if v, ok:= StringPointer(value); ok {
      n.journal.GSTCodeReplacement = ((*String)(v))
      }
    case "ApprovedBy":
    
    if v, ok:= StringPointer(value); ok {
      n.journal.ApprovedBy = ((*String)(v))
      }
    case "CreditAccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.journal.CreditAccountCode = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.journal.LocalId = ((*LocalIdType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.journal.RefId = ((*RefIdType)(v))
      }
    case "GSTCodeOriginal":
    
    if v, ok:= StringPointer(value); ok {
      n.journal.GSTCodeOriginal = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Journal")
        }
        return n
}

  func (s *Journal) CreatedDate() *String {
    if s.journal.CreatedDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal.CreatedDate = ((*String)(v))
      }
      }
      return s.journal.CreatedDate
    }
  func (s *Journal) CreatedDate_IsNil() bool {
    return s.CreatedDate == nil || s.journal.CreatedDate == nil
    }
  func (s *Journal) CreatedBy() *String {
    if s.journal.CreatedBy == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal.CreatedBy = ((*String)(v))
      }
      }
      return s.journal.CreatedBy
    }
  func (s *Journal) CreatedBy_IsNil() bool {
    return s.CreatedBy == nil || s.journal.CreatedBy == nil
    }
  func (s *Journal) OriginatingTransactionRefId() *Journal_OriginatingTransactionRefId {
    if s.journal.OriginatingTransactionRefId == nil {
     if v, ok:= Journal_OriginatingTransactionRefIdPointer(Journal_OriginatingTransactionRefId{}); ok {
      s.journal.OriginatingTransactionRefId = v
      }
      }
      return s.journal.OriginatingTransactionRefId
    }
  func (s *Journal) OriginatingTransactionRefId_IsNil() bool {
    return s.OriginatingTransactionRefId == nil || s.journal.OriginatingTransactionRefId == nil
    }
  func (s *Journal) DebitFinancialAccountRefId() *String {
    if s.journal.DebitFinancialAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal.DebitFinancialAccountRefId = ((*String)(v))
      }
      }
      return s.journal.DebitFinancialAccountRefId
    }
  func (s *Journal) DebitFinancialAccountRefId_IsNil() bool {
    return s.DebitFinancialAccountRefId == nil || s.journal.DebitFinancialAccountRefId == nil
    }
  func (s *Journal) LocalCodeList() *LocalCodeListType {
    if s.journal.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.journal.LocalCodeList = v
      }
      }
      return s.journal.LocalCodeList
    }
  func (s *Journal) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.journal.LocalCodeList == nil
    }
  func (s *Journal) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.journal.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.journal.SIF_ExtendedElements = v
      }
      }
      return s.journal.SIF_ExtendedElements
    }
  func (s *Journal) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.journal.SIF_ExtendedElements == nil
    }
  func (s *Journal) Amount() *MonetaryAmountType {
    if s.journal.Amount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.journal.Amount = v
      }
      }
      return s.journal.Amount
    }
  func (s *Journal) Amount_IsNil() bool {
    return s.Amount == nil || s.journal.Amount == nil
    }
  func (s *Journal) JournalAdjustmentList() *JournalAdjustmentListType {
    if s.journal.JournalAdjustmentList == nil {
     if v, ok:= JournalAdjustmentListTypePointer(JournalAdjustmentListType{}); ok {
      s.journal.JournalAdjustmentList = v
      }
      }
      return s.journal.JournalAdjustmentList
    }
  func (s *Journal) JournalAdjustmentList_IsNil() bool {
    return s.JournalAdjustmentList == nil || s.journal.JournalAdjustmentList == nil
    }
  func (s *Journal) Note() *String {
    if s.journal.Note == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal.Note = ((*String)(v))
      }
      }
      return s.journal.Note
    }
  func (s *Journal) Note_IsNil() bool {
    return s.Note == nil || s.journal.Note == nil
    }
  func (s *Journal) ApprovedDate() *String {
    if s.journal.ApprovedDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal.ApprovedDate = ((*String)(v))
      }
      }
      return s.journal.ApprovedDate
    }
  func (s *Journal) ApprovedDate_IsNil() bool {
    return s.ApprovedDate == nil || s.journal.ApprovedDate == nil
    }
  func (s *Journal) SIF_Metadata() *SIF_MetadataType {
    if s.journal.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.journal.SIF_Metadata = v
      }
      }
      return s.journal.SIF_Metadata
    }
  func (s *Journal) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.journal.SIF_Metadata == nil
    }
  func (s *Journal) DebitAccountCode() *String {
    if s.journal.DebitAccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal.DebitAccountCode = ((*String)(v))
      }
      }
      return s.journal.DebitAccountCode
    }
  func (s *Journal) DebitAccountCode_IsNil() bool {
    return s.DebitAccountCode == nil || s.journal.DebitAccountCode == nil
    }
  func (s *Journal) CreditFinancialAccountRefId() *String {
    if s.journal.CreditFinancialAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal.CreditFinancialAccountRefId = ((*String)(v))
      }
      }
      return s.journal.CreditFinancialAccountRefId
    }
  func (s *Journal) CreditFinancialAccountRefId_IsNil() bool {
    return s.CreditFinancialAccountRefId == nil || s.journal.CreditFinancialAccountRefId == nil
    }
  func (s *Journal) GSTCodeReplacement() *String {
    if s.journal.GSTCodeReplacement == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal.GSTCodeReplacement = ((*String)(v))
      }
      }
      return s.journal.GSTCodeReplacement
    }
  func (s *Journal) GSTCodeReplacement_IsNil() bool {
    return s.GSTCodeReplacement == nil || s.journal.GSTCodeReplacement == nil
    }
  func (s *Journal) ApprovedBy() *String {
    if s.journal.ApprovedBy == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal.ApprovedBy = ((*String)(v))
      }
      }
      return s.journal.ApprovedBy
    }
  func (s *Journal) ApprovedBy_IsNil() bool {
    return s.ApprovedBy == nil || s.journal.ApprovedBy == nil
    }
  func (s *Journal) CreditAccountCode() *String {
    if s.journal.CreditAccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal.CreditAccountCode = ((*String)(v))
      }
      }
      return s.journal.CreditAccountCode
    }
  func (s *Journal) CreditAccountCode_IsNil() bool {
    return s.CreditAccountCode == nil || s.journal.CreditAccountCode == nil
    }
  func (s *Journal) LocalId() *LocalIdType {
    if s.journal.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.journal.LocalId
    }
  func (s *Journal) LocalId_IsNil() bool {
    return s.LocalId == nil || s.journal.LocalId == nil
    }
  func (s *Journal) RefId() *RefIdType {
    if s.journal.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal.RefId = ((*RefIdType)(v))
      }
      }
      return s.journal.RefId
    }
  func (s *Journal) RefId_IsNil() bool {
    return s.RefId == nil || s.journal.RefId == nil
    }
  func (s *Journal) GSTCodeOriginal() *String {
    if s.journal.GSTCodeOriginal == nil {
    if v, ok:= StringPointer(""); ok {
      s.journal.GSTCodeOriginal = ((*String)(v))
      }
      }
      return s.journal.GSTCodeOriginal
    }
  func (s *Journal) GSTCodeOriginal_IsNil() bool {
    return s.GSTCodeOriginal == nil || s.journal.GSTCodeOriginal == nil
    }

func (n *AbstractContentPackageType) Unset(key string) *AbstractContentPackageType {
        switch key {
  case "Reference":
   n.abstractcontentpackagetype.Reference = nil
  case "TextData":
   n.abstractcontentpackagetype.TextData = nil
  case "RefId":
   n.abstractcontentpackagetype.RefId = nil
  case "XMLData":
   n.abstractcontentpackagetype.XMLData = nil
  case "BinaryData":
   n.abstractcontentpackagetype.BinaryData = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType")
        }
        return n
}

func (n *AbstractContentPackageType) SetProperty(key string, value interface{}) *AbstractContentPackageType {
        if n == nil {
                n, _ = AbstractContentPackageTypePointer(AbstractContentPackageType{})
        }
        switch key {
    case "Reference":
    if v, ok:= AbstractContentPackageType_ReferencePointer(value); ok {
      n.abstractcontentpackagetype.Reference = v
      }
    case "TextData":
    if v, ok:= AbstractContentPackageType_TextDataPointer(value); ok {
      n.abstractcontentpackagetype.TextData = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype.RefId = ((*RefIdType)(v))
      }
    case "XMLData":
    if v, ok:= AbstractContentPackageType_XMLDataPointer(value); ok {
      n.abstractcontentpackagetype.XMLData = v
      }
    case "BinaryData":
    if v, ok:= AbstractContentPackageType_BinaryDataPointer(value); ok {
      n.abstractcontentpackagetype.BinaryData = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType")
        }
        return n
}

  func (s *AbstractContentPackageType) Reference() *AbstractContentPackageType_Reference {
    if s.abstractcontentpackagetype.Reference == nil {
     if v, ok:= AbstractContentPackageType_ReferencePointer(AbstractContentPackageType_Reference{}); ok {
      s.abstractcontentpackagetype.Reference = v
      }
      }
      return s.abstractcontentpackagetype.Reference
    }
  func (s *AbstractContentPackageType) Reference_IsNil() bool {
    return s.Reference == nil || s.abstractcontentpackagetype.Reference == nil
    }
  func (s *AbstractContentPackageType) TextData() *AbstractContentPackageType_TextData {
    if s.abstractcontentpackagetype.TextData == nil {
     if v, ok:= AbstractContentPackageType_TextDataPointer(AbstractContentPackageType_TextData{}); ok {
      s.abstractcontentpackagetype.TextData = v
      }
      }
      return s.abstractcontentpackagetype.TextData
    }
  func (s *AbstractContentPackageType) TextData_IsNil() bool {
    return s.TextData == nil || s.abstractcontentpackagetype.TextData == nil
    }
  func (s *AbstractContentPackageType) RefId() *RefIdType {
    if s.abstractcontentpackagetype.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype.RefId = ((*RefIdType)(v))
      }
      }
      return s.abstractcontentpackagetype.RefId
    }
  func (s *AbstractContentPackageType) RefId_IsNil() bool {
    return s.RefId == nil || s.abstractcontentpackagetype.RefId == nil
    }
  func (s *AbstractContentPackageType) XMLData() *AbstractContentPackageType_XMLData {
    if s.abstractcontentpackagetype.XMLData == nil {
     if v, ok:= AbstractContentPackageType_XMLDataPointer(AbstractContentPackageType_XMLData{}); ok {
      s.abstractcontentpackagetype.XMLData = v
      }
      }
      return s.abstractcontentpackagetype.XMLData
    }
  func (s *AbstractContentPackageType) XMLData_IsNil() bool {
    return s.XMLData == nil || s.abstractcontentpackagetype.XMLData == nil
    }
  func (s *AbstractContentPackageType) BinaryData() *AbstractContentPackageType_BinaryData {
    if s.abstractcontentpackagetype.BinaryData == nil {
     if v, ok:= AbstractContentPackageType_BinaryDataPointer(AbstractContentPackageType_BinaryData{}); ok {
      s.abstractcontentpackagetype.BinaryData = v
      }
      }
      return s.abstractcontentpackagetype.BinaryData
    }
  func (s *AbstractContentPackageType) BinaryData_IsNil() bool {
    return s.BinaryData == nil || s.abstractcontentpackagetype.BinaryData == nil
    }

func (n *FQItemType) Unset(key string) *FQItemType {
        switch key {
  case "DioceseAmount":
   n.fqitemtype.DioceseAmount = nil
  case "FQComments":
   n.fqitemtype.FQComments = nil
  case "BoardingAmount":
   n.fqitemtype.BoardingAmount = nil
  case "TuitionAmount":
   n.fqitemtype.TuitionAmount = nil
  case "FQItemCode":
   n.fqitemtype.FQItemCode = nil
  case "SystemAmount":
   n.fqitemtype.SystemAmount = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FQItemType")
        }
        return n
}

func (n *FQItemType) SetProperty(key string, value interface{}) *FQItemType {
        if n == nil {
                n, _ = FQItemTypePointer(FQItemType{})
        }
        switch key {
    case "DioceseAmount":
    
    if v, ok:= FloatPointer(value); ok {
      n.fqitemtype.DioceseAmount = ((*Float)(v))
      }
    case "FQComments":
    
    if v, ok:= StringPointer(value); ok {
      n.fqitemtype.FQComments = ((*String)(v))
      }
    case "BoardingAmount":
    
    if v, ok:= FloatPointer(value); ok {
      n.fqitemtype.BoardingAmount = ((*Float)(v))
      }
    case "TuitionAmount":
    
    if v, ok:= FloatPointer(value); ok {
      n.fqitemtype.TuitionAmount = ((*Float)(v))
      }
    case "FQItemCode":
    
    if v, ok:= StringPointer(value); ok {
      n.fqitemtype.FQItemCode = ((*String)(v))
      }
    case "SystemAmount":
    
    if v, ok:= FloatPointer(value); ok {
      n.fqitemtype.SystemAmount = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FQItemType")
        }
        return n
}

  func (s *FQItemType) DioceseAmount() *Float {
    if s.fqitemtype.DioceseAmount == nil {
    if v, ok:= FloatPointer(0); ok {
      s.fqitemtype.DioceseAmount = ((*Float)(v))
      }
      }
      return s.fqitemtype.DioceseAmount
    }
  func (s *FQItemType) DioceseAmount_IsNil() bool {
    return s.DioceseAmount == nil || s.fqitemtype.DioceseAmount == nil
    }
  func (s *FQItemType) FQComments() *String {
    if s.fqitemtype.FQComments == nil {
    if v, ok:= StringPointer(""); ok {
      s.fqitemtype.FQComments = ((*String)(v))
      }
      }
      return s.fqitemtype.FQComments
    }
  func (s *FQItemType) FQComments_IsNil() bool {
    return s.FQComments == nil || s.fqitemtype.FQComments == nil
    }
  func (s *FQItemType) BoardingAmount() *Float {
    if s.fqitemtype.BoardingAmount == nil {
    if v, ok:= FloatPointer(0); ok {
      s.fqitemtype.BoardingAmount = ((*Float)(v))
      }
      }
      return s.fqitemtype.BoardingAmount
    }
  func (s *FQItemType) BoardingAmount_IsNil() bool {
    return s.BoardingAmount == nil || s.fqitemtype.BoardingAmount == nil
    }
  func (s *FQItemType) TuitionAmount() *Float {
    if s.fqitemtype.TuitionAmount == nil {
    if v, ok:= FloatPointer(0); ok {
      s.fqitemtype.TuitionAmount = ((*Float)(v))
      }
      }
      return s.fqitemtype.TuitionAmount
    }
  func (s *FQItemType) TuitionAmount_IsNil() bool {
    return s.TuitionAmount == nil || s.fqitemtype.TuitionAmount == nil
    }
  func (s *FQItemType) FQItemCode() *String {
    if s.fqitemtype.FQItemCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.fqitemtype.FQItemCode = ((*String)(v))
      }
      }
      return s.fqitemtype.FQItemCode
    }
  func (s *FQItemType) FQItemCode_IsNil() bool {
    return s.FQItemCode == nil || s.fqitemtype.FQItemCode == nil
    }
  func (s *FQItemType) SystemAmount() *Float {
    if s.fqitemtype.SystemAmount == nil {
    if v, ok:= FloatPointer(0); ok {
      s.fqitemtype.SystemAmount = ((*Float)(v))
      }
      }
      return s.fqitemtype.SystemAmount
    }
  func (s *FQItemType) SystemAmount_IsNil() bool {
    return s.SystemAmount == nil || s.fqitemtype.SystemAmount == nil
    }

func (n *PurchaseOrder) Unset(key string) *PurchaseOrder {
        switch key {
  case "OriginalPurchaseOrderRefId":
   n.purchaseorder.OriginalPurchaseOrderRefId = nil
  case "CreationDate":
   n.purchaseorder.CreationDate = nil
  case "SIF_ExtendedElements":
   n.purchaseorder.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.purchaseorder.LocalCodeList = nil
  case "UpdateDate":
   n.purchaseorder.UpdateDate = nil
  case "ChargedLocationInfoRefId":
   n.purchaseorder.ChargedLocationInfoRefId = nil
  case "FormNumber":
   n.purchaseorder.FormNumber = nil
  case "TaxAmount":
   n.purchaseorder.TaxAmount = nil
  case "RefId":
   n.purchaseorder.RefId = nil
  case "LocalId":
   n.purchaseorder.LocalId = nil
  case "EmployeePersonalRefId":
   n.purchaseorder.EmployeePersonalRefId = nil
  case "TotalAmount":
   n.purchaseorder.TotalAmount = nil
  case "FullyDelivered":
   n.purchaseorder.FullyDelivered = nil
  case "TaxRate":
   n.purchaseorder.TaxRate = nil
  case "PurchasingItems":
   n.purchaseorder.PurchasingItems = nil
  case "SIF_Metadata":
   n.purchaseorder.SIF_Metadata = nil
  case "VendorInfoRefId":
   n.purchaseorder.VendorInfoRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PurchaseOrder")
        }
        return n
}

func (n *PurchaseOrder) SetProperty(key string, value interface{}) *PurchaseOrder {
        if n == nil {
                n, _ = PurchaseOrderPointer(PurchaseOrder{})
        }
        switch key {
    case "OriginalPurchaseOrderRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.purchaseorder.OriginalPurchaseOrderRefId = ((*String)(v))
      }
    case "CreationDate":
    
    if v, ok:= StringPointer(value); ok {
      n.purchaseorder.CreationDate = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.purchaseorder.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.purchaseorder.LocalCodeList = v
      }
    case "UpdateDate":
    
    if v, ok:= StringPointer(value); ok {
      n.purchaseorder.UpdateDate = ((*String)(v))
      }
    case "ChargedLocationInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.purchaseorder.ChargedLocationInfoRefId = ((*String)(v))
      }
    case "FormNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.purchaseorder.FormNumber = ((*String)(v))
      }
    case "TaxAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.purchaseorder.TaxAmount = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.purchaseorder.RefId = ((*RefIdType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.purchaseorder.LocalId = ((*LocalIdType)(v))
      }
    case "EmployeePersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.purchaseorder.EmployeePersonalRefId = ((*String)(v))
      }
    case "TotalAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.purchaseorder.TotalAmount = v
      }
    case "FullyDelivered":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.purchaseorder.FullyDelivered = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "TaxRate":
    
    if v, ok:= FloatPointer(value); ok {
      n.purchaseorder.TaxRate = ((*Float)(v))
      }
    case "PurchasingItems":
    if v, ok:= PurchasingItemsTypePointer(value); ok {
      n.purchaseorder.PurchasingItems = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.purchaseorder.SIF_Metadata = v
      }
    case "VendorInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.purchaseorder.VendorInfoRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PurchaseOrder")
        }
        return n
}

  func (s *PurchaseOrder) OriginalPurchaseOrderRefId() *String {
    if s.purchaseorder.OriginalPurchaseOrderRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchaseorder.OriginalPurchaseOrderRefId = ((*String)(v))
      }
      }
      return s.purchaseorder.OriginalPurchaseOrderRefId
    }
  func (s *PurchaseOrder) OriginalPurchaseOrderRefId_IsNil() bool {
    return s.OriginalPurchaseOrderRefId == nil || s.purchaseorder.OriginalPurchaseOrderRefId == nil
    }
  func (s *PurchaseOrder) CreationDate() *String {
    if s.purchaseorder.CreationDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchaseorder.CreationDate = ((*String)(v))
      }
      }
      return s.purchaseorder.CreationDate
    }
  func (s *PurchaseOrder) CreationDate_IsNil() bool {
    return s.CreationDate == nil || s.purchaseorder.CreationDate == nil
    }
  func (s *PurchaseOrder) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.purchaseorder.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.purchaseorder.SIF_ExtendedElements = v
      }
      }
      return s.purchaseorder.SIF_ExtendedElements
    }
  func (s *PurchaseOrder) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.purchaseorder.SIF_ExtendedElements == nil
    }
  func (s *PurchaseOrder) LocalCodeList() *LocalCodeListType {
    if s.purchaseorder.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.purchaseorder.LocalCodeList = v
      }
      }
      return s.purchaseorder.LocalCodeList
    }
  func (s *PurchaseOrder) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.purchaseorder.LocalCodeList == nil
    }
  func (s *PurchaseOrder) UpdateDate() *String {
    if s.purchaseorder.UpdateDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchaseorder.UpdateDate = ((*String)(v))
      }
      }
      return s.purchaseorder.UpdateDate
    }
  func (s *PurchaseOrder) UpdateDate_IsNil() bool {
    return s.UpdateDate == nil || s.purchaseorder.UpdateDate == nil
    }
  func (s *PurchaseOrder) ChargedLocationInfoRefId() *String {
    if s.purchaseorder.ChargedLocationInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchaseorder.ChargedLocationInfoRefId = ((*String)(v))
      }
      }
      return s.purchaseorder.ChargedLocationInfoRefId
    }
  func (s *PurchaseOrder) ChargedLocationInfoRefId_IsNil() bool {
    return s.ChargedLocationInfoRefId == nil || s.purchaseorder.ChargedLocationInfoRefId == nil
    }
  func (s *PurchaseOrder) FormNumber() *String {
    if s.purchaseorder.FormNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchaseorder.FormNumber = ((*String)(v))
      }
      }
      return s.purchaseorder.FormNumber
    }
  func (s *PurchaseOrder) FormNumber_IsNil() bool {
    return s.FormNumber == nil || s.purchaseorder.FormNumber == nil
    }
  func (s *PurchaseOrder) TaxAmount() *MonetaryAmountType {
    if s.purchaseorder.TaxAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.purchaseorder.TaxAmount = v
      }
      }
      return s.purchaseorder.TaxAmount
    }
  func (s *PurchaseOrder) TaxAmount_IsNil() bool {
    return s.TaxAmount == nil || s.purchaseorder.TaxAmount == nil
    }
  func (s *PurchaseOrder) RefId() *RefIdType {
    if s.purchaseorder.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchaseorder.RefId = ((*RefIdType)(v))
      }
      }
      return s.purchaseorder.RefId
    }
  func (s *PurchaseOrder) RefId_IsNil() bool {
    return s.RefId == nil || s.purchaseorder.RefId == nil
    }
  func (s *PurchaseOrder) LocalId() *LocalIdType {
    if s.purchaseorder.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchaseorder.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.purchaseorder.LocalId
    }
  func (s *PurchaseOrder) LocalId_IsNil() bool {
    return s.LocalId == nil || s.purchaseorder.LocalId == nil
    }
  func (s *PurchaseOrder) EmployeePersonalRefId() *String {
    if s.purchaseorder.EmployeePersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchaseorder.EmployeePersonalRefId = ((*String)(v))
      }
      }
      return s.purchaseorder.EmployeePersonalRefId
    }
  func (s *PurchaseOrder) EmployeePersonalRefId_IsNil() bool {
    return s.EmployeePersonalRefId == nil || s.purchaseorder.EmployeePersonalRefId == nil
    }
  func (s *PurchaseOrder) TotalAmount() *MonetaryAmountType {
    if s.purchaseorder.TotalAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.purchaseorder.TotalAmount = v
      }
      }
      return s.purchaseorder.TotalAmount
    }
  func (s *PurchaseOrder) TotalAmount_IsNil() bool {
    return s.TotalAmount == nil || s.purchaseorder.TotalAmount == nil
    }
  func (s *PurchaseOrder) FullyDelivered() *AUCodeSetsYesOrNoCategoryType {
    if s.purchaseorder.FullyDelivered == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchaseorder.FullyDelivered = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.purchaseorder.FullyDelivered
    }
  func (s *PurchaseOrder) FullyDelivered_IsNil() bool {
    return s.FullyDelivered == nil || s.purchaseorder.FullyDelivered == nil
    }
  func (s *PurchaseOrder) TaxRate() *Float {
    if s.purchaseorder.TaxRate == nil {
    if v, ok:= FloatPointer(0); ok {
      s.purchaseorder.TaxRate = ((*Float)(v))
      }
      }
      return s.purchaseorder.TaxRate
    }
  func (s *PurchaseOrder) TaxRate_IsNil() bool {
    return s.TaxRate == nil || s.purchaseorder.TaxRate == nil
    }
  func (s *PurchaseOrder) PurchasingItems() *PurchasingItemsType {
    if s.purchaseorder.PurchasingItems == nil {
     if v, ok:= PurchasingItemsTypePointer(PurchasingItemsType{}); ok {
      s.purchaseorder.PurchasingItems = v
      }
      }
      return s.purchaseorder.PurchasingItems
    }
  func (s *PurchaseOrder) PurchasingItems_IsNil() bool {
    return s.PurchasingItems == nil || s.purchaseorder.PurchasingItems == nil
    }
  func (s *PurchaseOrder) SIF_Metadata() *SIF_MetadataType {
    if s.purchaseorder.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.purchaseorder.SIF_Metadata = v
      }
      }
      return s.purchaseorder.SIF_Metadata
    }
  func (s *PurchaseOrder) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.purchaseorder.SIF_Metadata == nil
    }
  func (s *PurchaseOrder) VendorInfoRefId() *String {
    if s.purchaseorder.VendorInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchaseorder.VendorInfoRefId = ((*String)(v))
      }
      }
      return s.purchaseorder.VendorInfoRefId
    }
  func (s *PurchaseOrder) VendorInfoRefId_IsNil() bool {
    return s.VendorInfoRefId == nil || s.purchaseorder.VendorInfoRefId == nil
    }

func (n *AgencyType) Unset(key string) *AgencyType {
        switch key {
  case "OtherCodeList":
   n.agencytype.OtherCodeList = nil
  case "Code":
   n.agencytype.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AgencyType")
        }
        return n
}

func (n *AgencyType) SetProperty(key string, value interface{}) *AgencyType {
        if n == nil {
                n, _ = AgencyTypePointer(AgencyType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.agencytype.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsEducationAgencyTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEducationAgencyTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.agencytype.Code = ((*AUCodeSetsEducationAgencyTypeType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AgencyType")
        }
        return n
}

  func (s *AgencyType) OtherCodeList() *OtherCodeListType {
    if s.agencytype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.agencytype.OtherCodeList = v
      }
      }
      return s.agencytype.OtherCodeList
    }
  func (s *AgencyType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.agencytype.OtherCodeList == nil
    }
  func (s *AgencyType) Code() *AUCodeSetsEducationAgencyTypeType {
    if s.agencytype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.agencytype.Code = ((*AUCodeSetsEducationAgencyTypeType)(v))
      }
      }
      return s.agencytype.Code
    }
  func (s *AgencyType) Code_IsNil() bool {
    return s.Code == nil || s.agencytype.Code == nil
    }

func (n *OtherIdType) Unset(key string) *OtherIdType {
        switch key {
  case "Type":
   n.otheridtype.Type = nil
  case "Value":
   n.otheridtype.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherIdType")
        }
        return n
}

func (n *OtherIdType) SetProperty(key string, value interface{}) *OtherIdType {
        if n == nil {
                n, _ = OtherIdTypePointer(OtherIdType{})
        }
        switch key {
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.otheridtype.Type = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.otheridtype.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherIdType")
        }
        return n
}

  func (s *OtherIdType) Type() *String {
    if s.otheridtype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.otheridtype.Type = ((*String)(v))
      }
      }
      return s.otheridtype.Type
    }
  func (s *OtherIdType) Type_IsNil() bool {
    return s.Type == nil || s.otheridtype.Type == nil
    }
  func (s *OtherIdType) Value() *String {
    if s.otheridtype.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.otheridtype.Value = ((*String)(v))
      }
      }
      return s.otheridtype.Value
    }
  func (s *OtherIdType) Value_IsNil() bool {
    return s.Value == nil || s.otheridtype.Value == nil
    }

func (n *StudentActivityType) Unset(key string) *StudentActivityType {
        switch key {
  case "Code":
   n.studentactivitytype.Code = nil
  case "OtherCodeList":
   n.studentactivitytype.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentActivityType")
        }
        return n
}

func (n *StudentActivityType) SetProperty(key string, value interface{}) *StudentActivityType {
        if n == nil {
                n, _ = StudentActivityTypePointer(StudentActivityType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsActivityInvolvementCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsActivityInvolvementCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentactivitytype.Code = ((*AUCodeSetsActivityInvolvementCodeType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.studentactivitytype.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentActivityType")
        }
        return n
}

  func (s *StudentActivityType) Code() *AUCodeSetsActivityInvolvementCodeType {
    if s.studentactivitytype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentactivitytype.Code = ((*AUCodeSetsActivityInvolvementCodeType)(v))
      }
      }
      return s.studentactivitytype.Code
    }
  func (s *StudentActivityType) Code_IsNil() bool {
    return s.Code == nil || s.studentactivitytype.Code == nil
    }
  func (s *StudentActivityType) OtherCodeList() *OtherCodeListType {
    if s.studentactivitytype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.studentactivitytype.OtherCodeList = v
      }
      }
      return s.studentactivitytype.OtherCodeList
    }
  func (s *StudentActivityType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.studentactivitytype.OtherCodeList == nil
    }

func (n *ValidLetterMarkType) Unset(key string) *ValidLetterMarkType {
        switch key {
  case "NumericEquivalent":
   n.validlettermarktype.NumericEquivalent = nil
  case "Description":
   n.validlettermarktype.Description = nil
  case "Code":
   n.validlettermarktype.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ValidLetterMarkType")
        }
        return n
}

func (n *ValidLetterMarkType) SetProperty(key string, value interface{}) *ValidLetterMarkType {
        if n == nil {
                n, _ = ValidLetterMarkTypePointer(ValidLetterMarkType{})
        }
        switch key {
    case "NumericEquivalent":
    
    if v, ok:= FloatPointer(value); ok {
      n.validlettermarktype.NumericEquivalent = ((*Float)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.validlettermarktype.Description = ((*String)(v))
      }
    case "Code":
    
    if v, ok:= StringPointer(value); ok {
      n.validlettermarktype.Code = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ValidLetterMarkType")
        }
        return n
}

  func (s *ValidLetterMarkType) NumericEquivalent() *Float {
    if s.validlettermarktype.NumericEquivalent == nil {
    if v, ok:= FloatPointer(0); ok {
      s.validlettermarktype.NumericEquivalent = ((*Float)(v))
      }
      }
      return s.validlettermarktype.NumericEquivalent
    }
  func (s *ValidLetterMarkType) NumericEquivalent_IsNil() bool {
    return s.NumericEquivalent == nil || s.validlettermarktype.NumericEquivalent == nil
    }
  func (s *ValidLetterMarkType) Description() *String {
    if s.validlettermarktype.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.validlettermarktype.Description = ((*String)(v))
      }
      }
      return s.validlettermarktype.Description
    }
  func (s *ValidLetterMarkType) Description_IsNil() bool {
    return s.Description == nil || s.validlettermarktype.Description == nil
    }
  func (s *ValidLetterMarkType) Code() *String {
    if s.validlettermarktype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.validlettermarktype.Code = ((*String)(v))
      }
      }
      return s.validlettermarktype.Code
    }
  func (s *ValidLetterMarkType) Code_IsNil() bool {
    return s.Code == nil || s.validlettermarktype.Code == nil
    }

func (n *TimeTablePeriodType) Unset(key string) *TimeTablePeriodType {
        switch key {
  case "EndTime":
   n.timetableperiodtype.EndTime = nil
  case "InstructionalMinutes":
   n.timetableperiodtype.InstructionalMinutes = nil
  case "StartTime":
   n.timetableperiodtype.StartTime = nil
  case "BellPeriod":
   n.timetableperiodtype.BellPeriod = nil
  case "PeriodId":
   n.timetableperiodtype.PeriodId = nil
  case "PeriodTitle":
   n.timetableperiodtype.PeriodTitle = nil
  case "RegularSchoolPeriod":
   n.timetableperiodtype.RegularSchoolPeriod = nil
  case "UseInAttendanceCalculations":
   n.timetableperiodtype.UseInAttendanceCalculations = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTablePeriodType")
        }
        return n
}

func (n *TimeTablePeriodType) SetProperty(key string, value interface{}) *TimeTablePeriodType {
        if n == nil {
                n, _ = TimeTablePeriodTypePointer(TimeTablePeriodType{})
        }
        switch key {
    case "EndTime":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableperiodtype.EndTime = ((*String)(v))
      }
    case "InstructionalMinutes":
    
    if v, ok:= IntPointer(value); ok {
      n.timetableperiodtype.InstructionalMinutes = ((*Int)(v))
      }
    case "StartTime":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableperiodtype.StartTime = ((*String)(v))
      }
    case "BellPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableperiodtype.BellPeriod = ((*String)(v))
      }
    case "PeriodId":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableperiodtype.PeriodId = ((*LocalIdType)(v))
      }
    case "PeriodTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableperiodtype.PeriodTitle = ((*String)(v))
      }
    case "RegularSchoolPeriod":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableperiodtype.RegularSchoolPeriod = ((*String)(v))
      }
    case "UseInAttendanceCalculations":
    
    if v, ok:= StringPointer(value); ok {
      n.timetableperiodtype.UseInAttendanceCalculations = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TimeTablePeriodType")
        }
        return n
}

  func (s *TimeTablePeriodType) EndTime() *String {
    if s.timetableperiodtype.EndTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableperiodtype.EndTime = ((*String)(v))
      }
      }
      return s.timetableperiodtype.EndTime
    }
  func (s *TimeTablePeriodType) EndTime_IsNil() bool {
    return s.EndTime == nil || s.timetableperiodtype.EndTime == nil
    }
  func (s *TimeTablePeriodType) InstructionalMinutes() *Int {
    if s.timetableperiodtype.InstructionalMinutes == nil {
    if v, ok:= IntPointer(0); ok {
      s.timetableperiodtype.InstructionalMinutes = ((*Int)(v))
      }
      }
      return s.timetableperiodtype.InstructionalMinutes
    }
  func (s *TimeTablePeriodType) InstructionalMinutes_IsNil() bool {
    return s.InstructionalMinutes == nil || s.timetableperiodtype.InstructionalMinutes == nil
    }
  func (s *TimeTablePeriodType) StartTime() *String {
    if s.timetableperiodtype.StartTime == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableperiodtype.StartTime = ((*String)(v))
      }
      }
      return s.timetableperiodtype.StartTime
    }
  func (s *TimeTablePeriodType) StartTime_IsNil() bool {
    return s.StartTime == nil || s.timetableperiodtype.StartTime == nil
    }
  func (s *TimeTablePeriodType) BellPeriod() *String {
    if s.timetableperiodtype.BellPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableperiodtype.BellPeriod = ((*String)(v))
      }
      }
      return s.timetableperiodtype.BellPeriod
    }
  func (s *TimeTablePeriodType) BellPeriod_IsNil() bool {
    return s.BellPeriod == nil || s.timetableperiodtype.BellPeriod == nil
    }
  func (s *TimeTablePeriodType) PeriodId() *LocalIdType {
    if s.timetableperiodtype.PeriodId == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableperiodtype.PeriodId = ((*LocalIdType)(v))
      }
      }
      return s.timetableperiodtype.PeriodId
    }
  func (s *TimeTablePeriodType) PeriodId_IsNil() bool {
    return s.PeriodId == nil || s.timetableperiodtype.PeriodId == nil
    }
  func (s *TimeTablePeriodType) PeriodTitle() *String {
    if s.timetableperiodtype.PeriodTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableperiodtype.PeriodTitle = ((*String)(v))
      }
      }
      return s.timetableperiodtype.PeriodTitle
    }
  func (s *TimeTablePeriodType) PeriodTitle_IsNil() bool {
    return s.PeriodTitle == nil || s.timetableperiodtype.PeriodTitle == nil
    }
  func (s *TimeTablePeriodType) RegularSchoolPeriod() *String {
    if s.timetableperiodtype.RegularSchoolPeriod == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableperiodtype.RegularSchoolPeriod = ((*String)(v))
      }
      }
      return s.timetableperiodtype.RegularSchoolPeriod
    }
  func (s *TimeTablePeriodType) RegularSchoolPeriod_IsNil() bool {
    return s.RegularSchoolPeriod == nil || s.timetableperiodtype.RegularSchoolPeriod == nil
    }
  func (s *TimeTablePeriodType) UseInAttendanceCalculations() *String {
    if s.timetableperiodtype.UseInAttendanceCalculations == nil {
    if v, ok:= StringPointer(""); ok {
      s.timetableperiodtype.UseInAttendanceCalculations = ((*String)(v))
      }
      }
      return s.timetableperiodtype.UseInAttendanceCalculations
    }
  func (s *TimeTablePeriodType) UseInAttendanceCalculations_IsNil() bool {
    return s.UseInAttendanceCalculations == nil || s.timetableperiodtype.UseInAttendanceCalculations == nil
    }

func (n *NAPCodeFrame) Unset(key string) *NAPCodeFrame {
        switch key {
  case "NAPTestRefId":
   n.napcodeframe.NAPTestRefId = nil
  case "RefId":
   n.napcodeframe.RefId = nil
  case "TestletList":
   n.napcodeframe.TestletList = nil
  case "SIF_Metadata":
   n.napcodeframe.SIF_Metadata = nil
  case "LocalCodeList":
   n.napcodeframe.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.napcodeframe.SIF_ExtendedElements = nil
  case "TestContent":
   n.napcodeframe.TestContent = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPCodeFrame")
        }
        return n
}

func (n *NAPCodeFrame) SetProperty(key string, value interface{}) *NAPCodeFrame {
        if n == nil {
                n, _ = NAPCodeFramePointer(NAPCodeFrame{})
        }
        switch key {
    case "NAPTestRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.napcodeframe.NAPTestRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.napcodeframe.RefId = ((*RefIdType)(v))
      }
    case "TestletList":
    if v, ok:= NAPCodeFrameTestletListTypePointer(value); ok {
      n.napcodeframe.TestletList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.napcodeframe.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.napcodeframe.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.napcodeframe.SIF_ExtendedElements = v
      }
    case "TestContent":
    if v, ok:= NAPTestContentTypePointer(value); ok {
      n.napcodeframe.TestContent = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPCodeFrame")
        }
        return n
}

  func (s *NAPCodeFrame) NAPTestRefId() *String {
    if s.napcodeframe.NAPTestRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.napcodeframe.NAPTestRefId = ((*String)(v))
      }
      }
      return s.napcodeframe.NAPTestRefId
    }
  func (s *NAPCodeFrame) NAPTestRefId_IsNil() bool {
    return s.NAPTestRefId == nil || s.napcodeframe.NAPTestRefId == nil
    }
  func (s *NAPCodeFrame) RefId() *RefIdType {
    if s.napcodeframe.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.napcodeframe.RefId = ((*RefIdType)(v))
      }
      }
      return s.napcodeframe.RefId
    }
  func (s *NAPCodeFrame) RefId_IsNil() bool {
    return s.RefId == nil || s.napcodeframe.RefId == nil
    }
  func (s *NAPCodeFrame) TestletList() *NAPCodeFrameTestletListType {
    if s.napcodeframe.TestletList == nil {
     if v, ok:= NAPCodeFrameTestletListTypePointer(NAPCodeFrameTestletListType{}); ok {
      s.napcodeframe.TestletList = v
      }
      }
      return s.napcodeframe.TestletList
    }
  func (s *NAPCodeFrame) TestletList_IsNil() bool {
    return s.TestletList == nil || s.napcodeframe.TestletList == nil
    }
  func (s *NAPCodeFrame) SIF_Metadata() *SIF_MetadataType {
    if s.napcodeframe.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.napcodeframe.SIF_Metadata = v
      }
      }
      return s.napcodeframe.SIF_Metadata
    }
  func (s *NAPCodeFrame) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.napcodeframe.SIF_Metadata == nil
    }
  func (s *NAPCodeFrame) LocalCodeList() *LocalCodeListType {
    if s.napcodeframe.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.napcodeframe.LocalCodeList = v
      }
      }
      return s.napcodeframe.LocalCodeList
    }
  func (s *NAPCodeFrame) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.napcodeframe.LocalCodeList == nil
    }
  func (s *NAPCodeFrame) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.napcodeframe.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.napcodeframe.SIF_ExtendedElements = v
      }
      }
      return s.napcodeframe.SIF_ExtendedElements
    }
  func (s *NAPCodeFrame) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.napcodeframe.SIF_ExtendedElements == nil
    }
  func (s *NAPCodeFrame) TestContent() *NAPTestContentType {
    if s.napcodeframe.TestContent == nil {
     if v, ok:= NAPTestContentTypePointer(NAPTestContentType{}); ok {
      s.napcodeframe.TestContent = v
      }
      }
      return s.napcodeframe.TestContent
    }
  func (s *NAPCodeFrame) TestContent_IsNil() bool {
    return s.TestContent == nil || s.napcodeframe.TestContent == nil
    }

func (n *StudentScoreJudgementAgainstStandard) Unset(key string) *StudentScoreJudgementAgainstStandard {
        switch key {
  case "StaffPersonalRefId":
   n.studentscorejudgementagainststandard.StaffPersonalRefId = nil
  case "ClassLocalId":
   n.studentscorejudgementagainststandard.ClassLocalId = nil
  case "Score":
   n.studentscorejudgementagainststandard.Score = nil
  case "TermInfoRefId":
   n.studentscorejudgementagainststandard.TermInfoRefId = nil
  case "LocalCodeList":
   n.studentscorejudgementagainststandard.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.studentscorejudgementagainststandard.SchoolInfoRefId = nil
  case "RefId":
   n.studentscorejudgementagainststandard.RefId = nil
  case "CurriculumNodeCode":
   n.studentscorejudgementagainststandard.CurriculumNodeCode = nil
  case "YearLevel":
   n.studentscorejudgementagainststandard.YearLevel = nil
  case "SIF_Metadata":
   n.studentscorejudgementagainststandard.SIF_Metadata = nil
  case "ManagedPathwayLocalCode":
   n.studentscorejudgementagainststandard.ManagedPathwayLocalCode = nil
  case "StudentStateProvinceId":
   n.studentscorejudgementagainststandard.StudentStateProvinceId = nil
  case "LearningStandardList":
   n.studentscorejudgementagainststandard.LearningStandardList = nil
  case "LocalTermCode":
   n.studentscorejudgementagainststandard.LocalTermCode = nil
  case "StudentLocalId":
   n.studentscorejudgementagainststandard.StudentLocalId = nil
  case "SchoolCommonwealthId":
   n.studentscorejudgementagainststandard.SchoolCommonwealthId = nil
  case "TeachingGroupRefId":
   n.studentscorejudgementagainststandard.TeachingGroupRefId = nil
  case "SIF_ExtendedElements":
   n.studentscorejudgementagainststandard.SIF_ExtendedElements = nil
  case "SchoolYear":
   n.studentscorejudgementagainststandard.SchoolYear = nil
  case "SpecialCircumstanceLocalCode":
   n.studentscorejudgementagainststandard.SpecialCircumstanceLocalCode = nil
  case "StudentPersonalRefId":
   n.studentscorejudgementagainststandard.StudentPersonalRefId = nil
  case "SchoolLocalId":
   n.studentscorejudgementagainststandard.SchoolLocalId = nil
  case "StaffLocalId":
   n.studentscorejudgementagainststandard.StaffLocalId = nil
  case "CurriculumCode":
   n.studentscorejudgementagainststandard.CurriculumCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentScoreJudgementAgainstStandard")
        }
        return n
}

func (n *StudentScoreJudgementAgainstStandard) SetProperty(key string, value interface{}) *StudentScoreJudgementAgainstStandard {
        if n == nil {
                n, _ = StudentScoreJudgementAgainstStandardPointer(StudentScoreJudgementAgainstStandard{})
        }
        switch key {
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.StaffPersonalRefId = ((*String)(v))
      }
    case "ClassLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.ClassLocalId = ((*String)(v))
      }
    case "Score":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.Score = ((*String)(v))
      }
    case "TermInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.TermInfoRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentscorejudgementagainststandard.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.SchoolInfoRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.RefId = ((*RefIdType)(v))
      }
    case "CurriculumNodeCode":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.CurriculumNodeCode = ((*LocalIdType)(v))
      }
    case "YearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.studentscorejudgementagainststandard.YearLevel = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentscorejudgementagainststandard.SIF_Metadata = v
      }
    case "ManagedPathwayLocalCode":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.ManagedPathwayLocalCode = ((*LocalIdType)(v))
      }
    case "StudentStateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.StudentStateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "LearningStandardList":
    if v, ok:= LearningStandardListTypePointer(value); ok {
      n.studentscorejudgementagainststandard.LearningStandardList = v
      }
    case "LocalTermCode":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.LocalTermCode = ((*LocalIdType)(v))
      }
    case "StudentLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.StudentLocalId = ((*LocalIdType)(v))
      }
    case "SchoolCommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.SchoolCommonwealthId = ((*String)(v))
      }
    case "TeachingGroupRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.TeachingGroupRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentscorejudgementagainststandard.SIF_ExtendedElements = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.SchoolYear = ((*SchoolYearType)(v))
      }
    case "SpecialCircumstanceLocalCode":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.SpecialCircumstanceLocalCode = ((*LocalIdType)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.StudentPersonalRefId = ((*String)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "StaffLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.StaffLocalId = ((*LocalIdType)(v))
      }
    case "CurriculumCode":
    
    if v, ok:= StringPointer(value); ok {
      n.studentscorejudgementagainststandard.CurriculumCode = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentScoreJudgementAgainstStandard")
        }
        return n
}

  func (s *StudentScoreJudgementAgainstStandard) StaffPersonalRefId() *String {
    if s.studentscorejudgementagainststandard.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.studentscorejudgementagainststandard.StaffPersonalRefId
    }
  func (s *StudentScoreJudgementAgainstStandard) StaffPersonalRefId_IsNil() bool {
    return s.StaffPersonalRefId == nil || s.studentscorejudgementagainststandard.StaffPersonalRefId == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) ClassLocalId() *String {
    if s.studentscorejudgementagainststandard.ClassLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.ClassLocalId = ((*String)(v))
      }
      }
      return s.studentscorejudgementagainststandard.ClassLocalId
    }
  func (s *StudentScoreJudgementAgainstStandard) ClassLocalId_IsNil() bool {
    return s.ClassLocalId == nil || s.studentscorejudgementagainststandard.ClassLocalId == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) Score() *String {
    if s.studentscorejudgementagainststandard.Score == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.Score = ((*String)(v))
      }
      }
      return s.studentscorejudgementagainststandard.Score
    }
  func (s *StudentScoreJudgementAgainstStandard) Score_IsNil() bool {
    return s.Score == nil || s.studentscorejudgementagainststandard.Score == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) TermInfoRefId() *String {
    if s.studentscorejudgementagainststandard.TermInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.TermInfoRefId = ((*String)(v))
      }
      }
      return s.studentscorejudgementagainststandard.TermInfoRefId
    }
  func (s *StudentScoreJudgementAgainstStandard) TermInfoRefId_IsNil() bool {
    return s.TermInfoRefId == nil || s.studentscorejudgementagainststandard.TermInfoRefId == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) LocalCodeList() *LocalCodeListType {
    if s.studentscorejudgementagainststandard.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentscorejudgementagainststandard.LocalCodeList = v
      }
      }
      return s.studentscorejudgementagainststandard.LocalCodeList
    }
  func (s *StudentScoreJudgementAgainstStandard) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentscorejudgementagainststandard.LocalCodeList == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) SchoolInfoRefId() *String {
    if s.studentscorejudgementagainststandard.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.studentscorejudgementagainststandard.SchoolInfoRefId
    }
  func (s *StudentScoreJudgementAgainstStandard) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.studentscorejudgementagainststandard.SchoolInfoRefId == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) RefId() *RefIdType {
    if s.studentscorejudgementagainststandard.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.RefId = ((*RefIdType)(v))
      }
      }
      return s.studentscorejudgementagainststandard.RefId
    }
  func (s *StudentScoreJudgementAgainstStandard) RefId_IsNil() bool {
    return s.RefId == nil || s.studentscorejudgementagainststandard.RefId == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) CurriculumNodeCode() *LocalIdType {
    if s.studentscorejudgementagainststandard.CurriculumNodeCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.CurriculumNodeCode = ((*LocalIdType)(v))
      }
      }
      return s.studentscorejudgementagainststandard.CurriculumNodeCode
    }
  func (s *StudentScoreJudgementAgainstStandard) CurriculumNodeCode_IsNil() bool {
    return s.CurriculumNodeCode == nil || s.studentscorejudgementagainststandard.CurriculumNodeCode == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) YearLevel() *YearLevelType {
    if s.studentscorejudgementagainststandard.YearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.studentscorejudgementagainststandard.YearLevel = v
      }
      }
      return s.studentscorejudgementagainststandard.YearLevel
    }
  func (s *StudentScoreJudgementAgainstStandard) YearLevel_IsNil() bool {
    return s.YearLevel == nil || s.studentscorejudgementagainststandard.YearLevel == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) SIF_Metadata() *SIF_MetadataType {
    if s.studentscorejudgementagainststandard.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentscorejudgementagainststandard.SIF_Metadata = v
      }
      }
      return s.studentscorejudgementagainststandard.SIF_Metadata
    }
  func (s *StudentScoreJudgementAgainstStandard) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentscorejudgementagainststandard.SIF_Metadata == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) ManagedPathwayLocalCode() *LocalIdType {
    if s.studentscorejudgementagainststandard.ManagedPathwayLocalCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.ManagedPathwayLocalCode = ((*LocalIdType)(v))
      }
      }
      return s.studentscorejudgementagainststandard.ManagedPathwayLocalCode
    }
  func (s *StudentScoreJudgementAgainstStandard) ManagedPathwayLocalCode_IsNil() bool {
    return s.ManagedPathwayLocalCode == nil || s.studentscorejudgementagainststandard.ManagedPathwayLocalCode == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) StudentStateProvinceId() *StateProvinceIdType {
    if s.studentscorejudgementagainststandard.StudentStateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.StudentStateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.studentscorejudgementagainststandard.StudentStateProvinceId
    }
  func (s *StudentScoreJudgementAgainstStandard) StudentStateProvinceId_IsNil() bool {
    return s.StudentStateProvinceId == nil || s.studentscorejudgementagainststandard.StudentStateProvinceId == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) LearningStandardList() *LearningStandardListType {
    if s.studentscorejudgementagainststandard.LearningStandardList == nil {
     if v, ok:= LearningStandardListTypePointer(LearningStandardListType{}); ok {
      s.studentscorejudgementagainststandard.LearningStandardList = v
      }
      }
      return s.studentscorejudgementagainststandard.LearningStandardList
    }
  func (s *StudentScoreJudgementAgainstStandard) LearningStandardList_IsNil() bool {
    return s.LearningStandardList == nil || s.studentscorejudgementagainststandard.LearningStandardList == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) LocalTermCode() *LocalIdType {
    if s.studentscorejudgementagainststandard.LocalTermCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.LocalTermCode = ((*LocalIdType)(v))
      }
      }
      return s.studentscorejudgementagainststandard.LocalTermCode
    }
  func (s *StudentScoreJudgementAgainstStandard) LocalTermCode_IsNil() bool {
    return s.LocalTermCode == nil || s.studentscorejudgementagainststandard.LocalTermCode == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) StudentLocalId() *LocalIdType {
    if s.studentscorejudgementagainststandard.StudentLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.StudentLocalId = ((*LocalIdType)(v))
      }
      }
      return s.studentscorejudgementagainststandard.StudentLocalId
    }
  func (s *StudentScoreJudgementAgainstStandard) StudentLocalId_IsNil() bool {
    return s.StudentLocalId == nil || s.studentscorejudgementagainststandard.StudentLocalId == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) SchoolCommonwealthId() *String {
    if s.studentscorejudgementagainststandard.SchoolCommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.SchoolCommonwealthId = ((*String)(v))
      }
      }
      return s.studentscorejudgementagainststandard.SchoolCommonwealthId
    }
  func (s *StudentScoreJudgementAgainstStandard) SchoolCommonwealthId_IsNil() bool {
    return s.SchoolCommonwealthId == nil || s.studentscorejudgementagainststandard.SchoolCommonwealthId == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) TeachingGroupRefId() *String {
    if s.studentscorejudgementagainststandard.TeachingGroupRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.TeachingGroupRefId = ((*String)(v))
      }
      }
      return s.studentscorejudgementagainststandard.TeachingGroupRefId
    }
  func (s *StudentScoreJudgementAgainstStandard) TeachingGroupRefId_IsNil() bool {
    return s.TeachingGroupRefId == nil || s.studentscorejudgementagainststandard.TeachingGroupRefId == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentscorejudgementagainststandard.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentscorejudgementagainststandard.SIF_ExtendedElements = v
      }
      }
      return s.studentscorejudgementagainststandard.SIF_ExtendedElements
    }
  func (s *StudentScoreJudgementAgainstStandard) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentscorejudgementagainststandard.SIF_ExtendedElements == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) SchoolYear() *SchoolYearType {
    if s.studentscorejudgementagainststandard.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.studentscorejudgementagainststandard.SchoolYear
    }
  func (s *StudentScoreJudgementAgainstStandard) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.studentscorejudgementagainststandard.SchoolYear == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) SpecialCircumstanceLocalCode() *LocalIdType {
    if s.studentscorejudgementagainststandard.SpecialCircumstanceLocalCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.SpecialCircumstanceLocalCode = ((*LocalIdType)(v))
      }
      }
      return s.studentscorejudgementagainststandard.SpecialCircumstanceLocalCode
    }
  func (s *StudentScoreJudgementAgainstStandard) SpecialCircumstanceLocalCode_IsNil() bool {
    return s.SpecialCircumstanceLocalCode == nil || s.studentscorejudgementagainststandard.SpecialCircumstanceLocalCode == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) StudentPersonalRefId() *String {
    if s.studentscorejudgementagainststandard.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.studentscorejudgementagainststandard.StudentPersonalRefId
    }
  func (s *StudentScoreJudgementAgainstStandard) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.studentscorejudgementagainststandard.StudentPersonalRefId == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) SchoolLocalId() *LocalIdType {
    if s.studentscorejudgementagainststandard.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.studentscorejudgementagainststandard.SchoolLocalId
    }
  func (s *StudentScoreJudgementAgainstStandard) SchoolLocalId_IsNil() bool {
    return s.SchoolLocalId == nil || s.studentscorejudgementagainststandard.SchoolLocalId == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) StaffLocalId() *LocalIdType {
    if s.studentscorejudgementagainststandard.StaffLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.StaffLocalId = ((*LocalIdType)(v))
      }
      }
      return s.studentscorejudgementagainststandard.StaffLocalId
    }
  func (s *StudentScoreJudgementAgainstStandard) StaffLocalId_IsNil() bool {
    return s.StaffLocalId == nil || s.studentscorejudgementagainststandard.StaffLocalId == nil
    }
  func (s *StudentScoreJudgementAgainstStandard) CurriculumCode() *LocalIdType {
    if s.studentscorejudgementagainststandard.CurriculumCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentscorejudgementagainststandard.CurriculumCode = ((*LocalIdType)(v))
      }
      }
      return s.studentscorejudgementagainststandard.CurriculumCode
    }
  func (s *StudentScoreJudgementAgainstStandard) CurriculumCode_IsNil() bool {
    return s.CurriculumCode == nil || s.studentscorejudgementagainststandard.CurriculumCode == nil
    }

func (n *CensusReportingType) Unset(key string) *CensusReportingType {
        switch key {
  case "EntityLevel":
   n.censusreportingtype.EntityLevel = nil
  case "CommonwealthId":
   n.censusreportingtype.CommonwealthId = nil
  case "CensusStudentList":
   n.censusreportingtype.CensusStudentList = nil
  case "EntityName":
   n.censusreportingtype.EntityName = nil
  case "CensusStaffList":
   n.censusreportingtype.CensusStaffList = nil
  case "EntityContact":
   n.censusreportingtype.EntityContact = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusReportingType")
        }
        return n
}

func (n *CensusReportingType) SetProperty(key string, value interface{}) *CensusReportingType {
        if n == nil {
                n, _ = CensusReportingTypePointer(CensusReportingType{})
        }
        switch key {
    case "EntityLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.censusreportingtype.EntityLevel = ((*String)(v))
      }
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.censusreportingtype.CommonwealthId = ((*String)(v))
      }
    case "CensusStudentList":
    if v, ok:= CensusStudentListTypePointer(value); ok {
      n.censusreportingtype.CensusStudentList = v
      }
    case "EntityName":
    
    if v, ok:= StringPointer(value); ok {
      n.censusreportingtype.EntityName = ((*String)(v))
      }
    case "CensusStaffList":
    if v, ok:= CensusStaffListTypePointer(value); ok {
      n.censusreportingtype.CensusStaffList = v
      }
    case "EntityContact":
    if v, ok:= EntityContactInfoTypePointer(value); ok {
      n.censusreportingtype.EntityContact = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusReportingType")
        }
        return n
}

  func (s *CensusReportingType) EntityLevel() *String {
    if s.censusreportingtype.EntityLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusreportingtype.EntityLevel = ((*String)(v))
      }
      }
      return s.censusreportingtype.EntityLevel
    }
  func (s *CensusReportingType) EntityLevel_IsNil() bool {
    return s.EntityLevel == nil || s.censusreportingtype.EntityLevel == nil
    }
  func (s *CensusReportingType) CommonwealthId() *String {
    if s.censusreportingtype.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusreportingtype.CommonwealthId = ((*String)(v))
      }
      }
      return s.censusreportingtype.CommonwealthId
    }
  func (s *CensusReportingType) CommonwealthId_IsNil() bool {
    return s.CommonwealthId == nil || s.censusreportingtype.CommonwealthId == nil
    }
  func (s *CensusReportingType) CensusStudentList() *CensusStudentListType {
    if s.censusreportingtype.CensusStudentList == nil {
     if v, ok:= CensusStudentListTypePointer(CensusStudentListType{}); ok {
      s.censusreportingtype.CensusStudentList = v
      }
      }
      return s.censusreportingtype.CensusStudentList
    }
  func (s *CensusReportingType) CensusStudentList_IsNil() bool {
    return s.CensusStudentList == nil || s.censusreportingtype.CensusStudentList == nil
    }
  func (s *CensusReportingType) EntityName() *String {
    if s.censusreportingtype.EntityName == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusreportingtype.EntityName = ((*String)(v))
      }
      }
      return s.censusreportingtype.EntityName
    }
  func (s *CensusReportingType) EntityName_IsNil() bool {
    return s.EntityName == nil || s.censusreportingtype.EntityName == nil
    }
  func (s *CensusReportingType) CensusStaffList() *CensusStaffListType {
    if s.censusreportingtype.CensusStaffList == nil {
     if v, ok:= CensusStaffListTypePointer(CensusStaffListType{}); ok {
      s.censusreportingtype.CensusStaffList = v
      }
      }
      return s.censusreportingtype.CensusStaffList
    }
  func (s *CensusReportingType) CensusStaffList_IsNil() bool {
    return s.CensusStaffList == nil || s.censusreportingtype.CensusStaffList == nil
    }
  func (s *CensusReportingType) EntityContact() *EntityContactInfoType {
    if s.censusreportingtype.EntityContact == nil {
     if v, ok:= EntityContactInfoTypePointer(EntityContactInfoType{}); ok {
      s.censusreportingtype.EntityContact = v
      }
      }
      return s.censusreportingtype.EntityContact
    }
  func (s *CensusReportingType) EntityContact_IsNil() bool {
    return s.EntityContact == nil || s.censusreportingtype.EntityContact == nil
    }

func (n *AbstractContentPackageType_Reference) Unset(key string) *AbstractContentPackageType_Reference {
        switch key {
  case "MIMEType":
   n.abstractcontentpackagetype_reference.MIMEType = nil
  case "Description":
   n.abstractcontentpackagetype_reference.Description = nil
  case "URL":
   n.abstractcontentpackagetype_reference.URL = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_Reference")
        }
        return n
}

func (n *AbstractContentPackageType_Reference) SetProperty(key string, value interface{}) *AbstractContentPackageType_Reference {
        if n == nil {
                n, _ = AbstractContentPackageType_ReferencePointer(AbstractContentPackageType_Reference{})
        }
        switch key {
    case "MIMEType":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype_reference.MIMEType = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype_reference.Description = ((*String)(v))
      }
    case "URL":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype_reference.URL = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_Reference")
        }
        return n
}

  func (s *AbstractContentPackageType_Reference) MIMEType() *String {
    if s.abstractcontentpackagetype_reference.MIMEType == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype_reference.MIMEType = ((*String)(v))
      }
      }
      return s.abstractcontentpackagetype_reference.MIMEType
    }
  func (s *AbstractContentPackageType_Reference) MIMEType_IsNil() bool {
    return s.MIMEType == nil || s.abstractcontentpackagetype_reference.MIMEType == nil
    }
  func (s *AbstractContentPackageType_Reference) Description() *String {
    if s.abstractcontentpackagetype_reference.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype_reference.Description = ((*String)(v))
      }
      }
      return s.abstractcontentpackagetype_reference.Description
    }
  func (s *AbstractContentPackageType_Reference) Description_IsNil() bool {
    return s.Description == nil || s.abstractcontentpackagetype_reference.Description == nil
    }
  func (s *AbstractContentPackageType_Reference) URL() *String {
    if s.abstractcontentpackagetype_reference.URL == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype_reference.URL = ((*String)(v))
      }
      }
      return s.abstractcontentpackagetype_reference.URL
    }
  func (s *AbstractContentPackageType_Reference) URL_IsNil() bool {
    return s.URL == nil || s.abstractcontentpackagetype_reference.URL == nil
    }

func (n *FQReportingType) Unset(key string) *FQReportingType {
        switch key {
  case "FQItemList":
   n.fqreportingtype.FQItemList = nil
  case "EntityContact":
   n.fqreportingtype.EntityContact = nil
  case "ACARAId":
   n.fqreportingtype.ACARAId = nil
  case "StateProvinceId":
   n.fqreportingtype.StateProvinceId = nil
  case "EntityName":
   n.fqreportingtype.EntityName = nil
  case "SchoolInfoRefId":
   n.fqreportingtype.SchoolInfoRefId = nil
  case "LocalId":
   n.fqreportingtype.LocalId = nil
  case "AGRuleList":
   n.fqreportingtype.AGRuleList = nil
  case "FQContextualQuestionList":
   n.fqreportingtype.FQContextualQuestionList = nil
  case "CommonwealthId":
   n.fqreportingtype.CommonwealthId = nil
  case "EntityLevel":
   n.fqreportingtype.EntityLevel = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FQReportingType")
        }
        return n
}

func (n *FQReportingType) SetProperty(key string, value interface{}) *FQReportingType {
        if n == nil {
                n, _ = FQReportingTypePointer(FQReportingType{})
        }
        switch key {
    case "FQItemList":
    if v, ok:= FQItemListTypePointer(value); ok {
      n.fqreportingtype.FQItemList = v
      }
    case "EntityContact":
    if v, ok:= EntityContactInfoTypePointer(value); ok {
      n.fqreportingtype.EntityContact = v
      }
    case "ACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.fqreportingtype.ACARAId = ((*String)(v))
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.fqreportingtype.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "EntityName":
    
    if v, ok:= StringPointer(value); ok {
      n.fqreportingtype.EntityName = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.fqreportingtype.SchoolInfoRefId = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.fqreportingtype.LocalId = ((*LocalIdType)(v))
      }
    case "AGRuleList":
    if v, ok:= AGRuleListTypePointer(value); ok {
      n.fqreportingtype.AGRuleList = v
      }
    case "FQContextualQuestionList":
    if v, ok:= FQContextualQuestionListTypePointer(value); ok {
      n.fqreportingtype.FQContextualQuestionList = v
      }
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.fqreportingtype.CommonwealthId = ((*String)(v))
      }
    case "EntityLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.fqreportingtype.EntityLevel = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FQReportingType")
        }
        return n
}

  func (s *FQReportingType) FQItemList() *FQItemListType {
    if s.fqreportingtype.FQItemList == nil {
     if v, ok:= FQItemListTypePointer(FQItemListType{}); ok {
      s.fqreportingtype.FQItemList = v
      }
      }
      return s.fqreportingtype.FQItemList
    }
  func (s *FQReportingType) FQItemList_IsNil() bool {
    return s.FQItemList == nil || s.fqreportingtype.FQItemList == nil
    }
  func (s *FQReportingType) EntityContact() *EntityContactInfoType {
    if s.fqreportingtype.EntityContact == nil {
     if v, ok:= EntityContactInfoTypePointer(EntityContactInfoType{}); ok {
      s.fqreportingtype.EntityContact = v
      }
      }
      return s.fqreportingtype.EntityContact
    }
  func (s *FQReportingType) EntityContact_IsNil() bool {
    return s.EntityContact == nil || s.fqreportingtype.EntityContact == nil
    }
  func (s *FQReportingType) ACARAId() *String {
    if s.fqreportingtype.ACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.fqreportingtype.ACARAId = ((*String)(v))
      }
      }
      return s.fqreportingtype.ACARAId
    }
  func (s *FQReportingType) ACARAId_IsNil() bool {
    return s.ACARAId == nil || s.fqreportingtype.ACARAId == nil
    }
  func (s *FQReportingType) StateProvinceId() *StateProvinceIdType {
    if s.fqreportingtype.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.fqreportingtype.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.fqreportingtype.StateProvinceId
    }
  func (s *FQReportingType) StateProvinceId_IsNil() bool {
    return s.StateProvinceId == nil || s.fqreportingtype.StateProvinceId == nil
    }
  func (s *FQReportingType) EntityName() *String {
    if s.fqreportingtype.EntityName == nil {
    if v, ok:= StringPointer(""); ok {
      s.fqreportingtype.EntityName = ((*String)(v))
      }
      }
      return s.fqreportingtype.EntityName
    }
  func (s *FQReportingType) EntityName_IsNil() bool {
    return s.EntityName == nil || s.fqreportingtype.EntityName == nil
    }
  func (s *FQReportingType) SchoolInfoRefId() *String {
    if s.fqreportingtype.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.fqreportingtype.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.fqreportingtype.SchoolInfoRefId
    }
  func (s *FQReportingType) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.fqreportingtype.SchoolInfoRefId == nil
    }
  func (s *FQReportingType) LocalId() *LocalIdType {
    if s.fqreportingtype.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.fqreportingtype.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.fqreportingtype.LocalId
    }
  func (s *FQReportingType) LocalId_IsNil() bool {
    return s.LocalId == nil || s.fqreportingtype.LocalId == nil
    }
  func (s *FQReportingType) AGRuleList() *AGRuleListType {
    if s.fqreportingtype.AGRuleList == nil {
     if v, ok:= AGRuleListTypePointer(AGRuleListType{}); ok {
      s.fqreportingtype.AGRuleList = v
      }
      }
      return s.fqreportingtype.AGRuleList
    }
  func (s *FQReportingType) AGRuleList_IsNil() bool {
    return s.AGRuleList == nil || s.fqreportingtype.AGRuleList == nil
    }
  func (s *FQReportingType) FQContextualQuestionList() *FQContextualQuestionListType {
    if s.fqreportingtype.FQContextualQuestionList == nil {
     if v, ok:= FQContextualQuestionListTypePointer(FQContextualQuestionListType{}); ok {
      s.fqreportingtype.FQContextualQuestionList = v
      }
      }
      return s.fqreportingtype.FQContextualQuestionList
    }
  func (s *FQReportingType) FQContextualQuestionList_IsNil() bool {
    return s.FQContextualQuestionList == nil || s.fqreportingtype.FQContextualQuestionList == nil
    }
  func (s *FQReportingType) CommonwealthId() *String {
    if s.fqreportingtype.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.fqreportingtype.CommonwealthId = ((*String)(v))
      }
      }
      return s.fqreportingtype.CommonwealthId
    }
  func (s *FQReportingType) CommonwealthId_IsNil() bool {
    return s.CommonwealthId == nil || s.fqreportingtype.CommonwealthId == nil
    }
  func (s *FQReportingType) EntityLevel() *String {
    if s.fqreportingtype.EntityLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.fqreportingtype.EntityLevel = ((*String)(v))
      }
      }
      return s.fqreportingtype.EntityLevel
    }
  func (s *FQReportingType) EntityLevel_IsNil() bool {
    return s.EntityLevel == nil || s.fqreportingtype.EntityLevel == nil
    }

func (n *StatsCohortYearLevelType) Unset(key string) *StatsCohortYearLevelType {
        switch key {
  case "StatsCohortList":
   n.statscohortyearleveltype.StatsCohortList = nil
  case "CohortYearLevel":
   n.statscohortyearleveltype.CohortYearLevel = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StatsCohortYearLevelType")
        }
        return n
}

func (n *StatsCohortYearLevelType) SetProperty(key string, value interface{}) *StatsCohortYearLevelType {
        if n == nil {
                n, _ = StatsCohortYearLevelTypePointer(StatsCohortYearLevelType{})
        }
        switch key {
    case "StatsCohortList":
    if v, ok:= StatsCohortListTypePointer(value); ok {
      n.statscohortyearleveltype.StatsCohortList = v
      }
    case "CohortYearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.statscohortyearleveltype.CohortYearLevel = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StatsCohortYearLevelType")
        }
        return n
}

  func (s *StatsCohortYearLevelType) StatsCohortList() *StatsCohortListType {
    if s.statscohortyearleveltype.StatsCohortList == nil {
     if v, ok:= StatsCohortListTypePointer(StatsCohortListType{}); ok {
      s.statscohortyearleveltype.StatsCohortList = v
      }
      }
      return s.statscohortyearleveltype.StatsCohortList
    }
  func (s *StatsCohortYearLevelType) StatsCohortList_IsNil() bool {
    return s.StatsCohortList == nil || s.statscohortyearleveltype.StatsCohortList == nil
    }
  func (s *StatsCohortYearLevelType) CohortYearLevel() *YearLevelType {
    if s.statscohortyearleveltype.CohortYearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.statscohortyearleveltype.CohortYearLevel = v
      }
      }
      return s.statscohortyearleveltype.CohortYearLevel
    }
  func (s *StatsCohortYearLevelType) CohortYearLevel_IsNil() bool {
    return s.CohortYearLevel == nil || s.statscohortyearleveltype.CohortYearLevel == nil
    }

func (n *TotalEnrollmentsType) Unset(key string) *TotalEnrollmentsType {
        switch key {
  case "Boys":
   n.totalenrollmentstype.Boys = nil
  case "Girls":
   n.totalenrollmentstype.Girls = nil
  case "TotalStudents":
   n.totalenrollmentstype.TotalStudents = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TotalEnrollmentsType")
        }
        return n
}

func (n *TotalEnrollmentsType) SetProperty(key string, value interface{}) *TotalEnrollmentsType {
        if n == nil {
                n, _ = TotalEnrollmentsTypePointer(TotalEnrollmentsType{})
        }
        switch key {
    case "Boys":
    
    if v, ok:= StringPointer(value); ok {
      n.totalenrollmentstype.Boys = ((*String)(v))
      }
    case "Girls":
    
    if v, ok:= StringPointer(value); ok {
      n.totalenrollmentstype.Girls = ((*String)(v))
      }
    case "TotalStudents":
    
    if v, ok:= StringPointer(value); ok {
      n.totalenrollmentstype.TotalStudents = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TotalEnrollmentsType")
        }
        return n
}

  func (s *TotalEnrollmentsType) Boys() *String {
    if s.totalenrollmentstype.Boys == nil {
    if v, ok:= StringPointer(""); ok {
      s.totalenrollmentstype.Boys = ((*String)(v))
      }
      }
      return s.totalenrollmentstype.Boys
    }
  func (s *TotalEnrollmentsType) Boys_IsNil() bool {
    return s.Boys == nil || s.totalenrollmentstype.Boys == nil
    }
  func (s *TotalEnrollmentsType) Girls() *String {
    if s.totalenrollmentstype.Girls == nil {
    if v, ok:= StringPointer(""); ok {
      s.totalenrollmentstype.Girls = ((*String)(v))
      }
      }
      return s.totalenrollmentstype.Girls
    }
  func (s *TotalEnrollmentsType) Girls_IsNil() bool {
    return s.Girls == nil || s.totalenrollmentstype.Girls == nil
    }
  func (s *TotalEnrollmentsType) TotalStudents() *String {
    if s.totalenrollmentstype.TotalStudents == nil {
    if v, ok:= StringPointer(""); ok {
      s.totalenrollmentstype.TotalStudents = ((*String)(v))
      }
      }
      return s.totalenrollmentstype.TotalStudents
    }
  func (s *TotalEnrollmentsType) TotalStudents_IsNil() bool {
    return s.TotalStudents == nil || s.totalenrollmentstype.TotalStudents == nil
    }

func (n *StudentAttendanceTimeList) Unset(key string) *StudentAttendanceTimeList {
        switch key {
  case "SchoolInfoRefId":
   n.studentattendancetimelist.SchoolInfoRefId = nil
  case "AttendanceTimes":
   n.studentattendancetimelist.AttendanceTimes = nil
  case "SIF_Metadata":
   n.studentattendancetimelist.SIF_Metadata = nil
  case "LocalCodeList":
   n.studentattendancetimelist.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.studentattendancetimelist.SIF_ExtendedElements = nil
  case "SchoolYear":
   n.studentattendancetimelist.SchoolYear = nil
  case "Date":
   n.studentattendancetimelist.Date = nil
  case "PeriodAttendances":
   n.studentattendancetimelist.PeriodAttendances = nil
  case "RefId":
   n.studentattendancetimelist.RefId = nil
  case "StudentPersonalRefId":
   n.studentattendancetimelist.StudentPersonalRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceTimeList")
        }
        return n
}

func (n *StudentAttendanceTimeList) SetProperty(key string, value interface{}) *StudentAttendanceTimeList {
        if n == nil {
                n, _ = StudentAttendanceTimeListPointer(StudentAttendanceTimeList{})
        }
        switch key {
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancetimelist.SchoolInfoRefId = ((*String)(v))
      }
    case "AttendanceTimes":
    if v, ok:= AttendanceTimesTypePointer(value); ok {
      n.studentattendancetimelist.AttendanceTimes = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentattendancetimelist.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentattendancetimelist.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentattendancetimelist.SIF_ExtendedElements = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancetimelist.SchoolYear = ((*SchoolYearType)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancetimelist.Date = ((*String)(v))
      }
    case "PeriodAttendances":
    if v, ok:= PeriodAttendancesTypePointer(value); ok {
      n.studentattendancetimelist.PeriodAttendances = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancetimelist.RefId = ((*RefIdType)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancetimelist.StudentPersonalRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceTimeList")
        }
        return n
}

  func (s *StudentAttendanceTimeList) SchoolInfoRefId() *String {
    if s.studentattendancetimelist.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancetimelist.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.studentattendancetimelist.SchoolInfoRefId
    }
  func (s *StudentAttendanceTimeList) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.studentattendancetimelist.SchoolInfoRefId == nil
    }
  func (s *StudentAttendanceTimeList) AttendanceTimes() *AttendanceTimesType {
    if s.studentattendancetimelist.AttendanceTimes == nil {
     if v, ok:= AttendanceTimesTypePointer(AttendanceTimesType{}); ok {
      s.studentattendancetimelist.AttendanceTimes = v
      }
      }
      return s.studentattendancetimelist.AttendanceTimes
    }
  func (s *StudentAttendanceTimeList) AttendanceTimes_IsNil() bool {
    return s.AttendanceTimes == nil || s.studentattendancetimelist.AttendanceTimes == nil
    }
  func (s *StudentAttendanceTimeList) SIF_Metadata() *SIF_MetadataType {
    if s.studentattendancetimelist.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentattendancetimelist.SIF_Metadata = v
      }
      }
      return s.studentattendancetimelist.SIF_Metadata
    }
  func (s *StudentAttendanceTimeList) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentattendancetimelist.SIF_Metadata == nil
    }
  func (s *StudentAttendanceTimeList) LocalCodeList() *LocalCodeListType {
    if s.studentattendancetimelist.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentattendancetimelist.LocalCodeList = v
      }
      }
      return s.studentattendancetimelist.LocalCodeList
    }
  func (s *StudentAttendanceTimeList) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentattendancetimelist.LocalCodeList == nil
    }
  func (s *StudentAttendanceTimeList) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentattendancetimelist.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentattendancetimelist.SIF_ExtendedElements = v
      }
      }
      return s.studentattendancetimelist.SIF_ExtendedElements
    }
  func (s *StudentAttendanceTimeList) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentattendancetimelist.SIF_ExtendedElements == nil
    }
  func (s *StudentAttendanceTimeList) SchoolYear() *SchoolYearType {
    if s.studentattendancetimelist.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancetimelist.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.studentattendancetimelist.SchoolYear
    }
  func (s *StudentAttendanceTimeList) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.studentattendancetimelist.SchoolYear == nil
    }
  func (s *StudentAttendanceTimeList) Date() *String {
    if s.studentattendancetimelist.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancetimelist.Date = ((*String)(v))
      }
      }
      return s.studentattendancetimelist.Date
    }
  func (s *StudentAttendanceTimeList) Date_IsNil() bool {
    return s.Date == nil || s.studentattendancetimelist.Date == nil
    }
  func (s *StudentAttendanceTimeList) PeriodAttendances() *PeriodAttendancesType {
    if s.studentattendancetimelist.PeriodAttendances == nil {
     if v, ok:= PeriodAttendancesTypePointer(PeriodAttendancesType{}); ok {
      s.studentattendancetimelist.PeriodAttendances = v
      }
      }
      return s.studentattendancetimelist.PeriodAttendances
    }
  func (s *StudentAttendanceTimeList) PeriodAttendances_IsNil() bool {
    return s.PeriodAttendances == nil || s.studentattendancetimelist.PeriodAttendances == nil
    }
  func (s *StudentAttendanceTimeList) RefId() *RefIdType {
    if s.studentattendancetimelist.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancetimelist.RefId = ((*RefIdType)(v))
      }
      }
      return s.studentattendancetimelist.RefId
    }
  func (s *StudentAttendanceTimeList) RefId_IsNil() bool {
    return s.RefId == nil || s.studentattendancetimelist.RefId == nil
    }
  func (s *StudentAttendanceTimeList) StudentPersonalRefId() *String {
    if s.studentattendancetimelist.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancetimelist.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.studentattendancetimelist.StudentPersonalRefId
    }
  func (s *StudentAttendanceTimeList) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.studentattendancetimelist.StudentPersonalRefId == nil
    }

func (n *TestDisruptionType) Unset(key string) *TestDisruptionType {
        switch key {
  case "Event":
   n.testdisruptiontype.Event = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TestDisruptionType")
        }
        return n
}

func (n *TestDisruptionType) SetProperty(key string, value interface{}) *TestDisruptionType {
        if n == nil {
                n, _ = TestDisruptionTypePointer(TestDisruptionType{})
        }
        switch key {
    case "Event":
    
    if v, ok:= StringPointer(value); ok {
      n.testdisruptiontype.Event = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TestDisruptionType")
        }
        return n
}

  func (s *TestDisruptionType) Event() *String {
    if s.testdisruptiontype.Event == nil {
    if v, ok:= StringPointer(""); ok {
      s.testdisruptiontype.Event = ((*String)(v))
      }
      }
      return s.testdisruptiontype.Event
    }
  func (s *TestDisruptionType) Event_IsNil() bool {
    return s.Event == nil || s.testdisruptiontype.Event == nil
    }

func (n *LearningResource) Unset(key string) *LearningResource {
        switch key {
  case "LearningResourcePackageRefId":
   n.learningresource.LearningResourcePackageRefId = nil
  case "YearLevels":
   n.learningresource.YearLevels = nil
  case "Contacts":
   n.learningresource.Contacts = nil
  case "Author":
   n.learningresource.Author = nil
  case "LearningStandards":
   n.learningresource.LearningStandards = nil
  case "Status":
   n.learningresource.Status = nil
  case "Description":
   n.learningresource.Description = nil
  case "Approvals":
   n.learningresource.Approvals = nil
  case "Name":
   n.learningresource.Name = nil
  case "Location":
   n.learningresource.Location = nil
  case "SIF_ExtendedElements":
   n.learningresource.SIF_ExtendedElements = nil
  case "LocalCodeList":
   n.learningresource.LocalCodeList = nil
  case "Evaluations":
   n.learningresource.Evaluations = nil
  case "SubjectAreas":
   n.learningresource.SubjectAreas = nil
  case "RefId":
   n.learningresource.RefId = nil
  case "UseAgreement":
   n.learningresource.UseAgreement = nil
  case "AgreementDate":
   n.learningresource.AgreementDate = nil
  case "MediaTypes":
   n.learningresource.MediaTypes = nil
  case "SIF_Metadata":
   n.learningresource.SIF_Metadata = nil
  case "Components":
   n.learningresource.Components = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningResource")
        }
        return n
}

func (n *LearningResource) SetProperty(key string, value interface{}) *LearningResource {
        if n == nil {
                n, _ = LearningResourcePointer(LearningResource{})
        }
        switch key {
    case "LearningResourcePackageRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.learningresource.LearningResourcePackageRefId = ((*String)(v))
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.learningresource.YearLevels = v
      }
    case "Contacts":
    if v, ok:= ContactsTypePointer(value); ok {
      n.learningresource.Contacts = v
      }
    case "Author":
    
    if v, ok:= StringPointer(value); ok {
      n.learningresource.Author = ((*String)(v))
      }
    case "LearningStandards":
    if v, ok:= LearningStandardsTypePointer(value); ok {
      n.learningresource.LearningStandards = v
      }
    case "Status":
    
    if v, ok:= StringPointer(value); ok {
      n.learningresource.Status = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.learningresource.Description = ((*String)(v))
      }
    case "Approvals":
    if v, ok:= ApprovalsTypePointer(value); ok {
      n.learningresource.Approvals = v
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.learningresource.Name = ((*String)(v))
      }
    case "Location":
    if v, ok:= LearningResource_LocationPointer(value); ok {
      n.learningresource.Location = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.learningresource.SIF_ExtendedElements = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.learningresource.LocalCodeList = v
      }
    case "Evaluations":
    if v, ok:= EvaluationsTypePointer(value); ok {
      n.learningresource.Evaluations = v
      }
    case "SubjectAreas":
    if v, ok:= ACStrandAreaListTypePointer(value); ok {
      n.learningresource.SubjectAreas = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.learningresource.RefId = ((*RefIdType)(v))
      }
    case "UseAgreement":
    
    if v, ok:= StringPointer(value); ok {
      n.learningresource.UseAgreement = ((*String)(v))
      }
    case "AgreementDate":
    
    if v, ok:= StringPointer(value); ok {
      n.learningresource.AgreementDate = ((*String)(v))
      }
    case "MediaTypes":
    if v, ok:= MediaTypesTypePointer(value); ok {
      n.learningresource.MediaTypes = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.learningresource.SIF_Metadata = v
      }
    case "Components":
    if v, ok:= ComponentsTypePointer(value); ok {
      n.learningresource.Components = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningResource")
        }
        return n
}

  func (s *LearningResource) LearningResourcePackageRefId() *String {
    if s.learningresource.LearningResourcePackageRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningresource.LearningResourcePackageRefId = ((*String)(v))
      }
      }
      return s.learningresource.LearningResourcePackageRefId
    }
  func (s *LearningResource) LearningResourcePackageRefId_IsNil() bool {
    return s.LearningResourcePackageRefId == nil || s.learningresource.LearningResourcePackageRefId == nil
    }
  func (s *LearningResource) YearLevels() *YearLevelsType {
    if s.learningresource.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.learningresource.YearLevels = v
      }
      }
      return s.learningresource.YearLevels
    }
  func (s *LearningResource) YearLevels_IsNil() bool {
    return s.YearLevels == nil || s.learningresource.YearLevels == nil
    }
  func (s *LearningResource) Contacts() *ContactsType {
    if s.learningresource.Contacts == nil {
     if v, ok:= ContactsTypePointer(ContactsType{}); ok {
      s.learningresource.Contacts = v
      }
      }
      return s.learningresource.Contacts
    }
  func (s *LearningResource) Contacts_IsNil() bool {
    return s.Contacts == nil || s.learningresource.Contacts == nil
    }
  func (s *LearningResource) Author() *String {
    if s.learningresource.Author == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningresource.Author = ((*String)(v))
      }
      }
      return s.learningresource.Author
    }
  func (s *LearningResource) Author_IsNil() bool {
    return s.Author == nil || s.learningresource.Author == nil
    }
  func (s *LearningResource) LearningStandards() *LearningStandardsType {
    if s.learningresource.LearningStandards == nil {
     if v, ok:= LearningStandardsTypePointer(LearningStandardsType{}); ok {
      s.learningresource.LearningStandards = v
      }
      }
      return s.learningresource.LearningStandards
    }
  func (s *LearningResource) LearningStandards_IsNil() bool {
    return s.LearningStandards == nil || s.learningresource.LearningStandards == nil
    }
  func (s *LearningResource) Status() *String {
    if s.learningresource.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningresource.Status = ((*String)(v))
      }
      }
      return s.learningresource.Status
    }
  func (s *LearningResource) Status_IsNil() bool {
    return s.Status == nil || s.learningresource.Status == nil
    }
  func (s *LearningResource) Description() *String {
    if s.learningresource.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningresource.Description = ((*String)(v))
      }
      }
      return s.learningresource.Description
    }
  func (s *LearningResource) Description_IsNil() bool {
    return s.Description == nil || s.learningresource.Description == nil
    }
  func (s *LearningResource) Approvals() *ApprovalsType {
    if s.learningresource.Approvals == nil {
     if v, ok:= ApprovalsTypePointer(ApprovalsType{}); ok {
      s.learningresource.Approvals = v
      }
      }
      return s.learningresource.Approvals
    }
  func (s *LearningResource) Approvals_IsNil() bool {
    return s.Approvals == nil || s.learningresource.Approvals == nil
    }
  func (s *LearningResource) Name() *String {
    if s.learningresource.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningresource.Name = ((*String)(v))
      }
      }
      return s.learningresource.Name
    }
  func (s *LearningResource) Name_IsNil() bool {
    return s.Name == nil || s.learningresource.Name == nil
    }
  func (s *LearningResource) Location() *LearningResource_Location {
    if s.learningresource.Location == nil {
     if v, ok:= LearningResource_LocationPointer(LearningResource_Location{}); ok {
      s.learningresource.Location = v
      }
      }
      return s.learningresource.Location
    }
  func (s *LearningResource) Location_IsNil() bool {
    return s.Location == nil || s.learningresource.Location == nil
    }
  func (s *LearningResource) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.learningresource.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.learningresource.SIF_ExtendedElements = v
      }
      }
      return s.learningresource.SIF_ExtendedElements
    }
  func (s *LearningResource) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.learningresource.SIF_ExtendedElements == nil
    }
  func (s *LearningResource) LocalCodeList() *LocalCodeListType {
    if s.learningresource.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.learningresource.LocalCodeList = v
      }
      }
      return s.learningresource.LocalCodeList
    }
  func (s *LearningResource) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.learningresource.LocalCodeList == nil
    }
  func (s *LearningResource) Evaluations() *EvaluationsType {
    if s.learningresource.Evaluations == nil {
     if v, ok:= EvaluationsTypePointer(EvaluationsType{}); ok {
      s.learningresource.Evaluations = v
      }
      }
      return s.learningresource.Evaluations
    }
  func (s *LearningResource) Evaluations_IsNil() bool {
    return s.Evaluations == nil || s.learningresource.Evaluations == nil
    }
  func (s *LearningResource) SubjectAreas() *ACStrandAreaListType {
    if s.learningresource.SubjectAreas == nil {
     if v, ok:= ACStrandAreaListTypePointer(ACStrandAreaListType{}); ok {
      s.learningresource.SubjectAreas = v
      }
      }
      return s.learningresource.SubjectAreas
    }
  func (s *LearningResource) SubjectAreas_IsNil() bool {
    return s.SubjectAreas == nil || s.learningresource.SubjectAreas == nil
    }
  func (s *LearningResource) RefId() *RefIdType {
    if s.learningresource.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningresource.RefId = ((*RefIdType)(v))
      }
      }
      return s.learningresource.RefId
    }
  func (s *LearningResource) RefId_IsNil() bool {
    return s.RefId == nil || s.learningresource.RefId == nil
    }
  func (s *LearningResource) UseAgreement() *String {
    if s.learningresource.UseAgreement == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningresource.UseAgreement = ((*String)(v))
      }
      }
      return s.learningresource.UseAgreement
    }
  func (s *LearningResource) UseAgreement_IsNil() bool {
    return s.UseAgreement == nil || s.learningresource.UseAgreement == nil
    }
  func (s *LearningResource) AgreementDate() *String {
    if s.learningresource.AgreementDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningresource.AgreementDate = ((*String)(v))
      }
      }
      return s.learningresource.AgreementDate
    }
  func (s *LearningResource) AgreementDate_IsNil() bool {
    return s.AgreementDate == nil || s.learningresource.AgreementDate == nil
    }
  func (s *LearningResource) MediaTypes() *MediaTypesType {
    if s.learningresource.MediaTypes == nil {
     if v, ok:= MediaTypesTypePointer(MediaTypesType{}); ok {
      s.learningresource.MediaTypes = v
      }
      }
      return s.learningresource.MediaTypes
    }
  func (s *LearningResource) MediaTypes_IsNil() bool {
    return s.MediaTypes == nil || s.learningresource.MediaTypes == nil
    }
  func (s *LearningResource) SIF_Metadata() *SIF_MetadataType {
    if s.learningresource.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.learningresource.SIF_Metadata = v
      }
      }
      return s.learningresource.SIF_Metadata
    }
  func (s *LearningResource) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.learningresource.SIF_Metadata == nil
    }
  func (s *LearningResource) Components() *ComponentsType {
    if s.learningresource.Components == nil {
     if v, ok:= ComponentsTypePointer(ComponentsType{}); ok {
      s.learningresource.Components = v
      }
      }
      return s.learningresource.Components
    }
  func (s *LearningResource) Components_IsNil() bool {
    return s.Components == nil || s.learningresource.Components == nil
    }

func (n *EnglishProficiencyType) Unset(key string) *EnglishProficiencyType {
        switch key {
  case "Code":
   n.englishproficiencytype.Code = nil
  case "OtherCodeList":
   n.englishproficiencytype.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EnglishProficiencyType")
        }
        return n
}

func (n *EnglishProficiencyType) SetProperty(key string, value interface{}) *EnglishProficiencyType {
        if n == nil {
                n, _ = EnglishProficiencyTypePointer(EnglishProficiencyType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsEnglishProficiencyType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEnglishProficiencyType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.englishproficiencytype.Code = ((*AUCodeSetsEnglishProficiencyType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.englishproficiencytype.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EnglishProficiencyType")
        }
        return n
}

  func (s *EnglishProficiencyType) Code() *AUCodeSetsEnglishProficiencyType {
    if s.englishproficiencytype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.englishproficiencytype.Code = ((*AUCodeSetsEnglishProficiencyType)(v))
      }
      }
      return s.englishproficiencytype.Code
    }
  func (s *EnglishProficiencyType) Code_IsNil() bool {
    return s.Code == nil || s.englishproficiencytype.Code == nil
    }
  func (s *EnglishProficiencyType) OtherCodeList() *OtherCodeListType {
    if s.englishproficiencytype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.englishproficiencytype.OtherCodeList = v
      }
      }
      return s.englishproficiencytype.OtherCodeList
    }
  func (s *EnglishProficiencyType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.englishproficiencytype.OtherCodeList == nil
    }

func (n *StudentSchoolEnrollment) Unset(key string) *StudentSchoolEnrollment {
        switch key {
  case "ClassCode":
   n.studentschoolenrollment.ClassCode = nil
  case "FFPOS":
   n.studentschoolenrollment.FFPOS = nil
  case "TestLevel":
   n.studentschoolenrollment.TestLevel = nil
  case "DistanceEducationStudent":
   n.studentschoolenrollment.DistanceEducationStudent = nil
  case "EntryDate":
   n.studentschoolenrollment.EntryDate = nil
  case "Counselor":
   n.studentschoolenrollment.Counselor = nil
  case "MembershipType":
   n.studentschoolenrollment.MembershipType = nil
  case "ReportingSchool":
   n.studentschoolenrollment.ReportingSchool = nil
  case "RecordClosureReason":
   n.studentschoolenrollment.RecordClosureReason = nil
  case "Advisor":
   n.studentschoolenrollment.Advisor = nil
  case "StartedAtSchoolDate":
   n.studentschoolenrollment.StartedAtSchoolDate = nil
  case "RefId":
   n.studentschoolenrollment.RefId = nil
  case "ACARASchoolId":
   n.studentschoolenrollment.ACARASchoolId = nil
  case "YearLevel":
   n.studentschoolenrollment.YearLevel = nil
  case "ExitDate":
   n.studentschoolenrollment.ExitDate = nil
  case "PreviousSchool":
   n.studentschoolenrollment.PreviousSchool = nil
  case "FTE":
   n.studentschoolenrollment.FTE = nil
  case "BoardingStatus":
   n.studentschoolenrollment.BoardingStatus = nil
  case "DisabilityLevelOfAdjustment":
   n.studentschoolenrollment.DisabilityLevelOfAdjustment = nil
  case "FTPTStatus":
   n.studentschoolenrollment.FTPTStatus = nil
  case "SchoolInfoRefId":
   n.studentschoolenrollment.SchoolInfoRefId = nil
  case "IndividualLearningPlan":
   n.studentschoolenrollment.IndividualLearningPlan = nil
  case "StudentPersonalRefId":
   n.studentschoolenrollment.StudentPersonalRefId = nil
  case "House":
   n.studentschoolenrollment.House = nil
  case "PreviousSchoolName":
   n.studentschoolenrollment.PreviousSchoolName = nil
  case "DestinationSchoolName":
   n.studentschoolenrollment.DestinationSchoolName = nil
  case "CatchmentStatus":
   n.studentschoolenrollment.CatchmentStatus = nil
  case "StudentSubjectChoiceList":
   n.studentschoolenrollment.StudentSubjectChoiceList = nil
  case "PromotionInfo":
   n.studentschoolenrollment.PromotionInfo = nil
  case "InternationalStudent":
   n.studentschoolenrollment.InternationalStudent = nil
  case "ExitStatus":
   n.studentschoolenrollment.ExitStatus = nil
  case "TimeFrame":
   n.studentschoolenrollment.TimeFrame = nil
  case "Homegroup":
   n.studentschoolenrollment.Homegroup = nil
  case "EntryType":
   n.studentschoolenrollment.EntryType = nil
  case "SchoolYear":
   n.studentschoolenrollment.SchoolYear = nil
  case "DisabilityCategory":
   n.studentschoolenrollment.DisabilityCategory = nil
  case "SIF_ExtendedElements":
   n.studentschoolenrollment.SIF_ExtendedElements = nil
  case "Homeroom":
   n.studentschoolenrollment.Homeroom = nil
  case "DestinationSchool":
   n.studentschoolenrollment.DestinationSchool = nil
  case "CensusAge":
   n.studentschoolenrollment.CensusAge = nil
  case "ExitType":
   n.studentschoolenrollment.ExitType = nil
  case "Calendar":
   n.studentschoolenrollment.Calendar = nil
  case "SIF_Metadata":
   n.studentschoolenrollment.SIF_Metadata = nil
  case "StudentGroupList":
   n.studentschoolenrollment.StudentGroupList = nil
  case "LocalCodeList":
   n.studentschoolenrollment.LocalCodeList = nil
  case "PublishingPermissionList":
   n.studentschoolenrollment.PublishingPermissionList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment")
        }
        return n
}

func (n *StudentSchoolEnrollment) SetProperty(key string, value interface{}) *StudentSchoolEnrollment {
        if n == nil {
                n, _ = StudentSchoolEnrollmentPointer(StudentSchoolEnrollment{})
        }
        switch key {
    case "ClassCode":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.ClassCode = ((*String)(v))
      }
    case "FFPOS":
        if !CodesetContains(AUCodeSetsFFPOSStatusCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsFFPOSStatusCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.FFPOS = ((*AUCodeSetsFFPOSStatusCodeType)(v))
      }
    case "TestLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.studentschoolenrollment.TestLevel = v
      }
    case "DistanceEducationStudent":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.DistanceEducationStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "EntryDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.EntryDate = ((*String)(v))
      }
    case "Counselor":
    if v, ok:= StudentSchoolEnrollment_CounselorPointer(value); ok {
      n.studentschoolenrollment.Counselor = v
      }
    case "MembershipType":
        if !CodesetContains(AUCodeSetsSchoolEnrollmentTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolEnrollmentTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.MembershipType = ((*AUCodeSetsSchoolEnrollmentTypeType)(v))
      }
    case "ReportingSchool":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.ReportingSchool = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "RecordClosureReason":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.RecordClosureReason = ((*String)(v))
      }
    case "Advisor":
    if v, ok:= StudentSchoolEnrollment_AdvisorPointer(value); ok {
      n.studentschoolenrollment.Advisor = v
      }
    case "StartedAtSchoolDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.StartedAtSchoolDate = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.RefId = ((*RefIdType)(v))
      }
    case "ACARASchoolId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.ACARASchoolId = ((*LocalIdType)(v))
      }
    case "YearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.studentschoolenrollment.YearLevel = v
      }
    case "ExitDate":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.ExitDate = ((*String)(v))
      }
    case "PreviousSchool":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.PreviousSchool = ((*LocalIdType)(v))
      }
    case "FTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.studentschoolenrollment.FTE = ((*Float)(v))
      }
    case "BoardingStatus":
        if !CodesetContains(AUCodeSetsBoardingType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsBoardingType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.BoardingStatus = ((*AUCodeSetsBoardingType)(v))
      }
    case "DisabilityLevelOfAdjustment":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.DisabilityLevelOfAdjustment = ((*String)(v))
      }
    case "FTPTStatus":
        if !CodesetContains(AUCodeSetsFTPTStatusCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsFTPTStatusCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.FTPTStatus = ((*AUCodeSetsFTPTStatusCodeType)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.SchoolInfoRefId = ((*String)(v))
      }
    case "IndividualLearningPlan":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.IndividualLearningPlan = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.StudentPersonalRefId = ((*String)(v))
      }
    case "House":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.House = ((*String)(v))
      }
    case "PreviousSchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.PreviousSchoolName = ((*String)(v))
      }
    case "DestinationSchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.DestinationSchoolName = ((*String)(v))
      }
    case "CatchmentStatus":
    if v, ok:= CatchmentStatusContainerTypePointer(value); ok {
      n.studentschoolenrollment.CatchmentStatus = v
      }
    case "StudentSubjectChoiceList":
    if v, ok:= StudentSubjectChoiceListTypePointer(value); ok {
      n.studentschoolenrollment.StudentSubjectChoiceList = v
      }
    case "PromotionInfo":
    if v, ok:= PromotionInfoTypePointer(value); ok {
      n.studentschoolenrollment.PromotionInfo = v
      }
    case "InternationalStudent":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.InternationalStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "ExitStatus":
    if v, ok:= StudentExitStatusContainerTypePointer(value); ok {
      n.studentschoolenrollment.ExitStatus = v
      }
    case "TimeFrame":
        if !CodesetContains(AUCodeSetsEnrollmentTimeFrameType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEnrollmentTimeFrameType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.TimeFrame = ((*AUCodeSetsEnrollmentTimeFrameType)(v))
      }
    case "Homegroup":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.Homegroup = ((*String)(v))
      }
    case "EntryType":
    if v, ok:= StudentEntryContainerTypePointer(value); ok {
      n.studentschoolenrollment.EntryType = v
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.SchoolYear = ((*SchoolYearType)(v))
      }
    case "DisabilityCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.DisabilityCategory = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentschoolenrollment.SIF_ExtendedElements = v
      }
    case "Homeroom":
    if v, ok:= StudentSchoolEnrollment_HomeroomPointer(value); ok {
      n.studentschoolenrollment.Homeroom = v
      }
    case "DestinationSchool":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment.DestinationSchool = ((*LocalIdType)(v))
      }
    case "CensusAge":
    
    if v, ok:= FloatPointer(value); ok {
      n.studentschoolenrollment.CensusAge = ((*Float)(v))
      }
    case "ExitType":
    if v, ok:= StudentExitContainerTypePointer(value); ok {
      n.studentschoolenrollment.ExitType = v
      }
    case "Calendar":
    if v, ok:= StudentSchoolEnrollment_CalendarPointer(value); ok {
      n.studentschoolenrollment.Calendar = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentschoolenrollment.SIF_Metadata = v
      }
    case "StudentGroupList":
    if v, ok:= StudentGroupListTypePointer(value); ok {
      n.studentschoolenrollment.StudentGroupList = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentschoolenrollment.LocalCodeList = v
      }
    case "PublishingPermissionList":
    if v, ok:= PublishingPermissionListTypePointer(value); ok {
      n.studentschoolenrollment.PublishingPermissionList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment")
        }
        return n
}

  func (s *StudentSchoolEnrollment) ClassCode() *String {
    if s.studentschoolenrollment.ClassCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.ClassCode = ((*String)(v))
      }
      }
      return s.studentschoolenrollment.ClassCode
    }
  func (s *StudentSchoolEnrollment) ClassCode_IsNil() bool {
    return s.ClassCode == nil || s.studentschoolenrollment.ClassCode == nil
    }
  func (s *StudentSchoolEnrollment) FFPOS() *AUCodeSetsFFPOSStatusCodeType {
    if s.studentschoolenrollment.FFPOS == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.FFPOS = ((*AUCodeSetsFFPOSStatusCodeType)(v))
      }
      }
      return s.studentschoolenrollment.FFPOS
    }
  func (s *StudentSchoolEnrollment) FFPOS_IsNil() bool {
    return s.FFPOS == nil || s.studentschoolenrollment.FFPOS == nil
    }
  func (s *StudentSchoolEnrollment) TestLevel() *YearLevelType {
    if s.studentschoolenrollment.TestLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.studentschoolenrollment.TestLevel = v
      }
      }
      return s.studentschoolenrollment.TestLevel
    }
  func (s *StudentSchoolEnrollment) TestLevel_IsNil() bool {
    return s.TestLevel == nil || s.studentschoolenrollment.TestLevel == nil
    }
  func (s *StudentSchoolEnrollment) DistanceEducationStudent() *AUCodeSetsYesOrNoCategoryType {
    if s.studentschoolenrollment.DistanceEducationStudent == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.DistanceEducationStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentschoolenrollment.DistanceEducationStudent
    }
  func (s *StudentSchoolEnrollment) DistanceEducationStudent_IsNil() bool {
    return s.DistanceEducationStudent == nil || s.studentschoolenrollment.DistanceEducationStudent == nil
    }
  func (s *StudentSchoolEnrollment) EntryDate() *String {
    if s.studentschoolenrollment.EntryDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.EntryDate = ((*String)(v))
      }
      }
      return s.studentschoolenrollment.EntryDate
    }
  func (s *StudentSchoolEnrollment) EntryDate_IsNil() bool {
    return s.EntryDate == nil || s.studentschoolenrollment.EntryDate == nil
    }
  func (s *StudentSchoolEnrollment) Counselor() *StudentSchoolEnrollment_Counselor {
    if s.studentschoolenrollment.Counselor == nil {
     if v, ok:= StudentSchoolEnrollment_CounselorPointer(StudentSchoolEnrollment_Counselor{}); ok {
      s.studentschoolenrollment.Counselor = v
      }
      }
      return s.studentschoolenrollment.Counselor
    }
  func (s *StudentSchoolEnrollment) Counselor_IsNil() bool {
    return s.Counselor == nil || s.studentschoolenrollment.Counselor == nil
    }
  func (s *StudentSchoolEnrollment) MembershipType() *AUCodeSetsSchoolEnrollmentTypeType {
    if s.studentschoolenrollment.MembershipType == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.MembershipType = ((*AUCodeSetsSchoolEnrollmentTypeType)(v))
      }
      }
      return s.studentschoolenrollment.MembershipType
    }
  func (s *StudentSchoolEnrollment) MembershipType_IsNil() bool {
    return s.MembershipType == nil || s.studentschoolenrollment.MembershipType == nil
    }
  func (s *StudentSchoolEnrollment) ReportingSchool() *AUCodeSetsYesOrNoCategoryType {
    if s.studentschoolenrollment.ReportingSchool == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.ReportingSchool = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentschoolenrollment.ReportingSchool
    }
  func (s *StudentSchoolEnrollment) ReportingSchool_IsNil() bool {
    return s.ReportingSchool == nil || s.studentschoolenrollment.ReportingSchool == nil
    }
  func (s *StudentSchoolEnrollment) RecordClosureReason() *String {
    if s.studentschoolenrollment.RecordClosureReason == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.RecordClosureReason = ((*String)(v))
      }
      }
      return s.studentschoolenrollment.RecordClosureReason
    }
  func (s *StudentSchoolEnrollment) RecordClosureReason_IsNil() bool {
    return s.RecordClosureReason == nil || s.studentschoolenrollment.RecordClosureReason == nil
    }
  func (s *StudentSchoolEnrollment) Advisor() *StudentSchoolEnrollment_Advisor {
    if s.studentschoolenrollment.Advisor == nil {
     if v, ok:= StudentSchoolEnrollment_AdvisorPointer(StudentSchoolEnrollment_Advisor{}); ok {
      s.studentschoolenrollment.Advisor = v
      }
      }
      return s.studentschoolenrollment.Advisor
    }
  func (s *StudentSchoolEnrollment) Advisor_IsNil() bool {
    return s.Advisor == nil || s.studentschoolenrollment.Advisor == nil
    }
  func (s *StudentSchoolEnrollment) StartedAtSchoolDate() *String {
    if s.studentschoolenrollment.StartedAtSchoolDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.StartedAtSchoolDate = ((*String)(v))
      }
      }
      return s.studentschoolenrollment.StartedAtSchoolDate
    }
  func (s *StudentSchoolEnrollment) StartedAtSchoolDate_IsNil() bool {
    return s.StartedAtSchoolDate == nil || s.studentschoolenrollment.StartedAtSchoolDate == nil
    }
  func (s *StudentSchoolEnrollment) RefId() *RefIdType {
    if s.studentschoolenrollment.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.RefId = ((*RefIdType)(v))
      }
      }
      return s.studentschoolenrollment.RefId
    }
  func (s *StudentSchoolEnrollment) RefId_IsNil() bool {
    return s.RefId == nil || s.studentschoolenrollment.RefId == nil
    }
  func (s *StudentSchoolEnrollment) ACARASchoolId() *LocalIdType {
    if s.studentschoolenrollment.ACARASchoolId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.ACARASchoolId = ((*LocalIdType)(v))
      }
      }
      return s.studentschoolenrollment.ACARASchoolId
    }
  func (s *StudentSchoolEnrollment) ACARASchoolId_IsNil() bool {
    return s.ACARASchoolId == nil || s.studentschoolenrollment.ACARASchoolId == nil
    }
  func (s *StudentSchoolEnrollment) YearLevel() *YearLevelType {
    if s.studentschoolenrollment.YearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.studentschoolenrollment.YearLevel = v
      }
      }
      return s.studentschoolenrollment.YearLevel
    }
  func (s *StudentSchoolEnrollment) YearLevel_IsNil() bool {
    return s.YearLevel == nil || s.studentschoolenrollment.YearLevel == nil
    }
  func (s *StudentSchoolEnrollment) ExitDate() *String {
    if s.studentschoolenrollment.ExitDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.ExitDate = ((*String)(v))
      }
      }
      return s.studentschoolenrollment.ExitDate
    }
  func (s *StudentSchoolEnrollment) ExitDate_IsNil() bool {
    return s.ExitDate == nil || s.studentschoolenrollment.ExitDate == nil
    }
  func (s *StudentSchoolEnrollment) PreviousSchool() *LocalIdType {
    if s.studentschoolenrollment.PreviousSchool == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.PreviousSchool = ((*LocalIdType)(v))
      }
      }
      return s.studentschoolenrollment.PreviousSchool
    }
  func (s *StudentSchoolEnrollment) PreviousSchool_IsNil() bool {
    return s.PreviousSchool == nil || s.studentschoolenrollment.PreviousSchool == nil
    }
  func (s *StudentSchoolEnrollment) FTE() *Float {
    if s.studentschoolenrollment.FTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.studentschoolenrollment.FTE = ((*Float)(v))
      }
      }
      return s.studentschoolenrollment.FTE
    }
  func (s *StudentSchoolEnrollment) FTE_IsNil() bool {
    return s.FTE == nil || s.studentschoolenrollment.FTE == nil
    }
  func (s *StudentSchoolEnrollment) BoardingStatus() *AUCodeSetsBoardingType {
    if s.studentschoolenrollment.BoardingStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.BoardingStatus = ((*AUCodeSetsBoardingType)(v))
      }
      }
      return s.studentschoolenrollment.BoardingStatus
    }
  func (s *StudentSchoolEnrollment) BoardingStatus_IsNil() bool {
    return s.BoardingStatus == nil || s.studentschoolenrollment.BoardingStatus == nil
    }
  func (s *StudentSchoolEnrollment) DisabilityLevelOfAdjustment() *String {
    if s.studentschoolenrollment.DisabilityLevelOfAdjustment == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.DisabilityLevelOfAdjustment = ((*String)(v))
      }
      }
      return s.studentschoolenrollment.DisabilityLevelOfAdjustment
    }
  func (s *StudentSchoolEnrollment) DisabilityLevelOfAdjustment_IsNil() bool {
    return s.DisabilityLevelOfAdjustment == nil || s.studentschoolenrollment.DisabilityLevelOfAdjustment == nil
    }
  func (s *StudentSchoolEnrollment) FTPTStatus() *AUCodeSetsFTPTStatusCodeType {
    if s.studentschoolenrollment.FTPTStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.FTPTStatus = ((*AUCodeSetsFTPTStatusCodeType)(v))
      }
      }
      return s.studentschoolenrollment.FTPTStatus
    }
  func (s *StudentSchoolEnrollment) FTPTStatus_IsNil() bool {
    return s.FTPTStatus == nil || s.studentschoolenrollment.FTPTStatus == nil
    }
  func (s *StudentSchoolEnrollment) SchoolInfoRefId() *String {
    if s.studentschoolenrollment.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.studentschoolenrollment.SchoolInfoRefId
    }
  func (s *StudentSchoolEnrollment) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.studentschoolenrollment.SchoolInfoRefId == nil
    }
  func (s *StudentSchoolEnrollment) IndividualLearningPlan() *AUCodeSetsYesOrNoCategoryType {
    if s.studentschoolenrollment.IndividualLearningPlan == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.IndividualLearningPlan = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentschoolenrollment.IndividualLearningPlan
    }
  func (s *StudentSchoolEnrollment) IndividualLearningPlan_IsNil() bool {
    return s.IndividualLearningPlan == nil || s.studentschoolenrollment.IndividualLearningPlan == nil
    }
  func (s *StudentSchoolEnrollment) StudentPersonalRefId() *String {
    if s.studentschoolenrollment.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.studentschoolenrollment.StudentPersonalRefId
    }
  func (s *StudentSchoolEnrollment) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.studentschoolenrollment.StudentPersonalRefId == nil
    }
  func (s *StudentSchoolEnrollment) House() *String {
    if s.studentschoolenrollment.House == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.House = ((*String)(v))
      }
      }
      return s.studentschoolenrollment.House
    }
  func (s *StudentSchoolEnrollment) House_IsNil() bool {
    return s.House == nil || s.studentschoolenrollment.House == nil
    }
  func (s *StudentSchoolEnrollment) PreviousSchoolName() *String {
    if s.studentschoolenrollment.PreviousSchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.PreviousSchoolName = ((*String)(v))
      }
      }
      return s.studentschoolenrollment.PreviousSchoolName
    }
  func (s *StudentSchoolEnrollment) PreviousSchoolName_IsNil() bool {
    return s.PreviousSchoolName == nil || s.studentschoolenrollment.PreviousSchoolName == nil
    }
  func (s *StudentSchoolEnrollment) DestinationSchoolName() *String {
    if s.studentschoolenrollment.DestinationSchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.DestinationSchoolName = ((*String)(v))
      }
      }
      return s.studentschoolenrollment.DestinationSchoolName
    }
  func (s *StudentSchoolEnrollment) DestinationSchoolName_IsNil() bool {
    return s.DestinationSchoolName == nil || s.studentschoolenrollment.DestinationSchoolName == nil
    }
  func (s *StudentSchoolEnrollment) CatchmentStatus() *CatchmentStatusContainerType {
    if s.studentschoolenrollment.CatchmentStatus == nil {
     if v, ok:= CatchmentStatusContainerTypePointer(CatchmentStatusContainerType{}); ok {
      s.studentschoolenrollment.CatchmentStatus = v
      }
      }
      return s.studentschoolenrollment.CatchmentStatus
    }
  func (s *StudentSchoolEnrollment) CatchmentStatus_IsNil() bool {
    return s.CatchmentStatus == nil || s.studentschoolenrollment.CatchmentStatus == nil
    }
  func (s *StudentSchoolEnrollment) StudentSubjectChoiceList() *StudentSubjectChoiceListType {
    if s.studentschoolenrollment.StudentSubjectChoiceList == nil {
     if v, ok:= StudentSubjectChoiceListTypePointer(StudentSubjectChoiceListType{}); ok {
      s.studentschoolenrollment.StudentSubjectChoiceList = v
      }
      }
      return s.studentschoolenrollment.StudentSubjectChoiceList
    }
  func (s *StudentSchoolEnrollment) StudentSubjectChoiceList_IsNil() bool {
    return s.StudentSubjectChoiceList == nil || s.studentschoolenrollment.StudentSubjectChoiceList == nil
    }
  func (s *StudentSchoolEnrollment) PromotionInfo() *PromotionInfoType {
    if s.studentschoolenrollment.PromotionInfo == nil {
     if v, ok:= PromotionInfoTypePointer(PromotionInfoType{}); ok {
      s.studentschoolenrollment.PromotionInfo = v
      }
      }
      return s.studentschoolenrollment.PromotionInfo
    }
  func (s *StudentSchoolEnrollment) PromotionInfo_IsNil() bool {
    return s.PromotionInfo == nil || s.studentschoolenrollment.PromotionInfo == nil
    }
  func (s *StudentSchoolEnrollment) InternationalStudent() *AUCodeSetsYesOrNoCategoryType {
    if s.studentschoolenrollment.InternationalStudent == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.InternationalStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.studentschoolenrollment.InternationalStudent
    }
  func (s *StudentSchoolEnrollment) InternationalStudent_IsNil() bool {
    return s.InternationalStudent == nil || s.studentschoolenrollment.InternationalStudent == nil
    }
  func (s *StudentSchoolEnrollment) ExitStatus() *StudentExitStatusContainerType {
    if s.studentschoolenrollment.ExitStatus == nil {
     if v, ok:= StudentExitStatusContainerTypePointer(StudentExitStatusContainerType{}); ok {
      s.studentschoolenrollment.ExitStatus = v
      }
      }
      return s.studentschoolenrollment.ExitStatus
    }
  func (s *StudentSchoolEnrollment) ExitStatus_IsNil() bool {
    return s.ExitStatus == nil || s.studentschoolenrollment.ExitStatus == nil
    }
  func (s *StudentSchoolEnrollment) TimeFrame() *AUCodeSetsEnrollmentTimeFrameType {
    if s.studentschoolenrollment.TimeFrame == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.TimeFrame = ((*AUCodeSetsEnrollmentTimeFrameType)(v))
      }
      }
      return s.studentschoolenrollment.TimeFrame
    }
  func (s *StudentSchoolEnrollment) TimeFrame_IsNil() bool {
    return s.TimeFrame == nil || s.studentschoolenrollment.TimeFrame == nil
    }
  func (s *StudentSchoolEnrollment) Homegroup() *String {
    if s.studentschoolenrollment.Homegroup == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.Homegroup = ((*String)(v))
      }
      }
      return s.studentschoolenrollment.Homegroup
    }
  func (s *StudentSchoolEnrollment) Homegroup_IsNil() bool {
    return s.Homegroup == nil || s.studentschoolenrollment.Homegroup == nil
    }
  func (s *StudentSchoolEnrollment) EntryType() *StudentEntryContainerType {
    if s.studentschoolenrollment.EntryType == nil {
     if v, ok:= StudentEntryContainerTypePointer(StudentEntryContainerType{}); ok {
      s.studentschoolenrollment.EntryType = v
      }
      }
      return s.studentschoolenrollment.EntryType
    }
  func (s *StudentSchoolEnrollment) EntryType_IsNil() bool {
    return s.EntryType == nil || s.studentschoolenrollment.EntryType == nil
    }
  func (s *StudentSchoolEnrollment) SchoolYear() *SchoolYearType {
    if s.studentschoolenrollment.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.studentschoolenrollment.SchoolYear
    }
  func (s *StudentSchoolEnrollment) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.studentschoolenrollment.SchoolYear == nil
    }
  func (s *StudentSchoolEnrollment) DisabilityCategory() *String {
    if s.studentschoolenrollment.DisabilityCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.DisabilityCategory = ((*String)(v))
      }
      }
      return s.studentschoolenrollment.DisabilityCategory
    }
  func (s *StudentSchoolEnrollment) DisabilityCategory_IsNil() bool {
    return s.DisabilityCategory == nil || s.studentschoolenrollment.DisabilityCategory == nil
    }
  func (s *StudentSchoolEnrollment) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentschoolenrollment.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentschoolenrollment.SIF_ExtendedElements = v
      }
      }
      return s.studentschoolenrollment.SIF_ExtendedElements
    }
  func (s *StudentSchoolEnrollment) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentschoolenrollment.SIF_ExtendedElements == nil
    }
  func (s *StudentSchoolEnrollment) Homeroom() *StudentSchoolEnrollment_Homeroom {
    if s.studentschoolenrollment.Homeroom == nil {
     if v, ok:= StudentSchoolEnrollment_HomeroomPointer(StudentSchoolEnrollment_Homeroom{}); ok {
      s.studentschoolenrollment.Homeroom = v
      }
      }
      return s.studentschoolenrollment.Homeroom
    }
  func (s *StudentSchoolEnrollment) Homeroom_IsNil() bool {
    return s.Homeroom == nil || s.studentschoolenrollment.Homeroom == nil
    }
  func (s *StudentSchoolEnrollment) DestinationSchool() *LocalIdType {
    if s.studentschoolenrollment.DestinationSchool == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment.DestinationSchool = ((*LocalIdType)(v))
      }
      }
      return s.studentschoolenrollment.DestinationSchool
    }
  func (s *StudentSchoolEnrollment) DestinationSchool_IsNil() bool {
    return s.DestinationSchool == nil || s.studentschoolenrollment.DestinationSchool == nil
    }
  func (s *StudentSchoolEnrollment) CensusAge() *Float {
    if s.studentschoolenrollment.CensusAge == nil {
    if v, ok:= FloatPointer(0); ok {
      s.studentschoolenrollment.CensusAge = ((*Float)(v))
      }
      }
      return s.studentschoolenrollment.CensusAge
    }
  func (s *StudentSchoolEnrollment) CensusAge_IsNil() bool {
    return s.CensusAge == nil || s.studentschoolenrollment.CensusAge == nil
    }
  func (s *StudentSchoolEnrollment) ExitType() *StudentExitContainerType {
    if s.studentschoolenrollment.ExitType == nil {
     if v, ok:= StudentExitContainerTypePointer(StudentExitContainerType{}); ok {
      s.studentschoolenrollment.ExitType = v
      }
      }
      return s.studentschoolenrollment.ExitType
    }
  func (s *StudentSchoolEnrollment) ExitType_IsNil() bool {
    return s.ExitType == nil || s.studentschoolenrollment.ExitType == nil
    }
  func (s *StudentSchoolEnrollment) Calendar() *StudentSchoolEnrollment_Calendar {
    if s.studentschoolenrollment.Calendar == nil {
     if v, ok:= StudentSchoolEnrollment_CalendarPointer(StudentSchoolEnrollment_Calendar{}); ok {
      s.studentschoolenrollment.Calendar = v
      }
      }
      return s.studentschoolenrollment.Calendar
    }
  func (s *StudentSchoolEnrollment) Calendar_IsNil() bool {
    return s.Calendar == nil || s.studentschoolenrollment.Calendar == nil
    }
  func (s *StudentSchoolEnrollment) SIF_Metadata() *SIF_MetadataType {
    if s.studentschoolenrollment.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentschoolenrollment.SIF_Metadata = v
      }
      }
      return s.studentschoolenrollment.SIF_Metadata
    }
  func (s *StudentSchoolEnrollment) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentschoolenrollment.SIF_Metadata == nil
    }
  func (s *StudentSchoolEnrollment) StudentGroupList() *StudentGroupListType {
    if s.studentschoolenrollment.StudentGroupList == nil {
     if v, ok:= StudentGroupListTypePointer(StudentGroupListType{}); ok {
      s.studentschoolenrollment.StudentGroupList = v
      }
      }
      return s.studentschoolenrollment.StudentGroupList
    }
  func (s *StudentSchoolEnrollment) StudentGroupList_IsNil() bool {
    return s.StudentGroupList == nil || s.studentschoolenrollment.StudentGroupList == nil
    }
  func (s *StudentSchoolEnrollment) LocalCodeList() *LocalCodeListType {
    if s.studentschoolenrollment.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentschoolenrollment.LocalCodeList = v
      }
      }
      return s.studentschoolenrollment.LocalCodeList
    }
  func (s *StudentSchoolEnrollment) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentschoolenrollment.LocalCodeList == nil
    }
  func (s *StudentSchoolEnrollment) PublishingPermissionList() *PublishingPermissionListType {
    if s.studentschoolenrollment.PublishingPermissionList == nil {
     if v, ok:= PublishingPermissionListTypePointer(PublishingPermissionListType{}); ok {
      s.studentschoolenrollment.PublishingPermissionList = v
      }
      }
      return s.studentschoolenrollment.PublishingPermissionList
    }
  func (s *StudentSchoolEnrollment) PublishingPermissionList_IsNil() bool {
    return s.PublishingPermissionList == nil || s.studentschoolenrollment.PublishingPermissionList == nil
    }

func (n *ResourceUsage_ResourceReportLine) Unset(key string) *ResourceUsage_ResourceReportLine {
        switch key {
  case "ReportRow":
   n.resourceusage_resourcereportline.ReportRow = nil
  case "StartDate":
   n.resourceusage_resourcereportline.StartDate = nil
  case "EndDate":
   n.resourceusage_resourcereportline.EndDate = nil
  case "CurrentCost":
   n.resourceusage_resourcereportline.CurrentCost = nil
  case "SIF_RefId":
   n.resourceusage_resourcereportline.SIF_RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_ResourceReportLine")
        }
        return n
}

func (n *ResourceUsage_ResourceReportLine) SetProperty(key string, value interface{}) *ResourceUsage_ResourceReportLine {
        if n == nil {
                n, _ = ResourceUsage_ResourceReportLinePointer(ResourceUsage_ResourceReportLine{})
        }
        switch key {
    case "ReportRow":
    
    if v, ok:= StringPointer(value); ok {
      n.resourceusage_resourcereportline.ReportRow = ((*String)(v))
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.resourceusage_resourcereportline.StartDate = ((*String)(v))
      }
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.resourceusage_resourcereportline.EndDate = ((*String)(v))
      }
    case "CurrentCost":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.resourceusage_resourcereportline.CurrentCost = v
      }
    case "SIF_RefId":
    if v, ok:= ResourceUsage_SIF_RefIdPointer(value); ok {
      n.resourceusage_resourcereportline.SIF_RefId = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_ResourceReportLine")
        }
        return n
}

  func (s *ResourceUsage_ResourceReportLine) ReportRow() *String {
    if s.resourceusage_resourcereportline.ReportRow == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourceusage_resourcereportline.ReportRow = ((*String)(v))
      }
      }
      return s.resourceusage_resourcereportline.ReportRow
    }
  func (s *ResourceUsage_ResourceReportLine) ReportRow_IsNil() bool {
    return s.ReportRow == nil || s.resourceusage_resourcereportline.ReportRow == nil
    }
  func (s *ResourceUsage_ResourceReportLine) StartDate() *String {
    if s.resourceusage_resourcereportline.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourceusage_resourcereportline.StartDate = ((*String)(v))
      }
      }
      return s.resourceusage_resourcereportline.StartDate
    }
  func (s *ResourceUsage_ResourceReportLine) StartDate_IsNil() bool {
    return s.StartDate == nil || s.resourceusage_resourcereportline.StartDate == nil
    }
  func (s *ResourceUsage_ResourceReportLine) EndDate() *String {
    if s.resourceusage_resourcereportline.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourceusage_resourcereportline.EndDate = ((*String)(v))
      }
      }
      return s.resourceusage_resourcereportline.EndDate
    }
  func (s *ResourceUsage_ResourceReportLine) EndDate_IsNil() bool {
    return s.EndDate == nil || s.resourceusage_resourcereportline.EndDate == nil
    }
  func (s *ResourceUsage_ResourceReportLine) CurrentCost() *MonetaryAmountType {
    if s.resourceusage_resourcereportline.CurrentCost == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.resourceusage_resourcereportline.CurrentCost = v
      }
      }
      return s.resourceusage_resourcereportline.CurrentCost
    }
  func (s *ResourceUsage_ResourceReportLine) CurrentCost_IsNil() bool {
    return s.CurrentCost == nil || s.resourceusage_resourcereportline.CurrentCost == nil
    }
  func (s *ResourceUsage_ResourceReportLine) SIF_RefId() *ResourceUsage_SIF_RefId {
    if s.resourceusage_resourcereportline.SIF_RefId == nil {
     if v, ok:= ResourceUsage_SIF_RefIdPointer(ResourceUsage_SIF_RefId{}); ok {
      s.resourceusage_resourcereportline.SIF_RefId = v
      }
      }
      return s.resourceusage_resourcereportline.SIF_RefId
    }
  func (s *ResourceUsage_ResourceReportLine) SIF_RefId_IsNil() bool {
    return s.SIF_RefId == nil || s.resourceusage_resourcereportline.SIF_RefId == nil
    }

func (n *LearningResource_Location) Unset(key string) *LearningResource_Location {
        switch key {
  case "ReferenceType":
   n.learningresource_location.ReferenceType = nil
  case "Value":
   n.learningresource_location.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningResource_Location")
        }
        return n
}

func (n *LearningResource_Location) SetProperty(key string, value interface{}) *LearningResource_Location {
        if n == nil {
                n, _ = LearningResource_LocationPointer(LearningResource_Location{})
        }
        switch key {
    case "ReferenceType":
    
    if v, ok:= StringPointer(value); ok {
      n.learningresource_location.ReferenceType = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.learningresource_location.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningResource_Location")
        }
        return n
}

  func (s *LearningResource_Location) ReferenceType() *String {
    if s.learningresource_location.ReferenceType == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningresource_location.ReferenceType = ((*String)(v))
      }
      }
      return s.learningresource_location.ReferenceType
    }
  func (s *LearningResource_Location) ReferenceType_IsNil() bool {
    return s.ReferenceType == nil || s.learningresource_location.ReferenceType == nil
    }
  func (s *LearningResource_Location) Value() *String {
    if s.learningresource_location.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningresource_location.Value = ((*String)(v))
      }
      }
      return s.learningresource_location.Value
    }
  func (s *LearningResource_Location) Value_IsNil() bool {
    return s.Value == nil || s.learningresource_location.Value == nil
    }

func (n *StatsCohortType) Unset(key string) *StatsCohortType {
        switch key {
  case "AttendanceGTE90Percent":
   n.statscohorttype.AttendanceGTE90Percent = nil
  case "DaysInReferencePeriod":
   n.statscohorttype.DaysInReferencePeriod = nil
  case "AttendanceDays":
   n.statscohorttype.AttendanceDays = nil
  case "PossibleSchoolDays":
   n.statscohorttype.PossibleSchoolDays = nil
  case "StatsIndigenousStudentType":
   n.statscohorttype.StatsIndigenousStudentType = nil
  case "CohortGender":
   n.statscohorttype.CohortGender = nil
  case "StatsCohortId":
   n.statscohorttype.StatsCohortId = nil
  case "AttendanceLess90Percent":
   n.statscohorttype.AttendanceLess90Percent = nil
  case "PossibleSchoolDaysGT90PercentAttendance":
   n.statscohorttype.PossibleSchoolDaysGT90PercentAttendance = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StatsCohortType")
        }
        return n
}

func (n *StatsCohortType) SetProperty(key string, value interface{}) *StatsCohortType {
        if n == nil {
                n, _ = StatsCohortTypePointer(StatsCohortType{})
        }
        switch key {
    case "AttendanceGTE90Percent":
    
    if v, ok:= IntPointer(value); ok {
      n.statscohorttype.AttendanceGTE90Percent = ((*Int)(v))
      }
    case "DaysInReferencePeriod":
    
    if v, ok:= IntPointer(value); ok {
      n.statscohorttype.DaysInReferencePeriod = ((*Int)(v))
      }
    case "AttendanceDays":
    
    if v, ok:= FloatPointer(value); ok {
      n.statscohorttype.AttendanceDays = ((*Float)(v))
      }
    case "PossibleSchoolDays":
    
    if v, ok:= IntPointer(value); ok {
      n.statscohorttype.PossibleSchoolDays = ((*Int)(v))
      }
    case "StatsIndigenousStudentType":
    
    if v, ok:= StringPointer(value); ok {
      n.statscohorttype.StatsIndigenousStudentType = ((*String)(v))
      }
    case "CohortGender":
    
    if v, ok:= StringPointer(value); ok {
      n.statscohorttype.CohortGender = ((*String)(v))
      }
    case "StatsCohortId":
    
    if v, ok:= StringPointer(value); ok {
      n.statscohorttype.StatsCohortId = ((*LocalIdType)(v))
      }
    case "AttendanceLess90Percent":
    
    if v, ok:= IntPointer(value); ok {
      n.statscohorttype.AttendanceLess90Percent = ((*Int)(v))
      }
    case "PossibleSchoolDaysGT90PercentAttendance":
    
    if v, ok:= IntPointer(value); ok {
      n.statscohorttype.PossibleSchoolDaysGT90PercentAttendance = ((*Int)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StatsCohortType")
        }
        return n
}

  func (s *StatsCohortType) AttendanceGTE90Percent() *Int {
    if s.statscohorttype.AttendanceGTE90Percent == nil {
    if v, ok:= IntPointer(0); ok {
      s.statscohorttype.AttendanceGTE90Percent = ((*Int)(v))
      }
      }
      return s.statscohorttype.AttendanceGTE90Percent
    }
  func (s *StatsCohortType) AttendanceGTE90Percent_IsNil() bool {
    return s.AttendanceGTE90Percent == nil || s.statscohorttype.AttendanceGTE90Percent == nil
    }
  func (s *StatsCohortType) DaysInReferencePeriod() *Int {
    if s.statscohorttype.DaysInReferencePeriod == nil {
    if v, ok:= IntPointer(0); ok {
      s.statscohorttype.DaysInReferencePeriod = ((*Int)(v))
      }
      }
      return s.statscohorttype.DaysInReferencePeriod
    }
  func (s *StatsCohortType) DaysInReferencePeriod_IsNil() bool {
    return s.DaysInReferencePeriod == nil || s.statscohorttype.DaysInReferencePeriod == nil
    }
  func (s *StatsCohortType) AttendanceDays() *Float {
    if s.statscohorttype.AttendanceDays == nil {
    if v, ok:= FloatPointer(0); ok {
      s.statscohorttype.AttendanceDays = ((*Float)(v))
      }
      }
      return s.statscohorttype.AttendanceDays
    }
  func (s *StatsCohortType) AttendanceDays_IsNil() bool {
    return s.AttendanceDays == nil || s.statscohorttype.AttendanceDays == nil
    }
  func (s *StatsCohortType) PossibleSchoolDays() *Int {
    if s.statscohorttype.PossibleSchoolDays == nil {
    if v, ok:= IntPointer(0); ok {
      s.statscohorttype.PossibleSchoolDays = ((*Int)(v))
      }
      }
      return s.statscohorttype.PossibleSchoolDays
    }
  func (s *StatsCohortType) PossibleSchoolDays_IsNil() bool {
    return s.PossibleSchoolDays == nil || s.statscohorttype.PossibleSchoolDays == nil
    }
  func (s *StatsCohortType) StatsIndigenousStudentType() *String {
    if s.statscohorttype.StatsIndigenousStudentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.statscohorttype.StatsIndigenousStudentType = ((*String)(v))
      }
      }
      return s.statscohorttype.StatsIndigenousStudentType
    }
  func (s *StatsCohortType) StatsIndigenousStudentType_IsNil() bool {
    return s.StatsIndigenousStudentType == nil || s.statscohorttype.StatsIndigenousStudentType == nil
    }
  func (s *StatsCohortType) CohortGender() *String {
    if s.statscohorttype.CohortGender == nil {
    if v, ok:= StringPointer(""); ok {
      s.statscohorttype.CohortGender = ((*String)(v))
      }
      }
      return s.statscohorttype.CohortGender
    }
  func (s *StatsCohortType) CohortGender_IsNil() bool {
    return s.CohortGender == nil || s.statscohorttype.CohortGender == nil
    }
  func (s *StatsCohortType) StatsCohortId() *LocalIdType {
    if s.statscohorttype.StatsCohortId == nil {
    if v, ok:= StringPointer(""); ok {
      s.statscohorttype.StatsCohortId = ((*LocalIdType)(v))
      }
      }
      return s.statscohorttype.StatsCohortId
    }
  func (s *StatsCohortType) StatsCohortId_IsNil() bool {
    return s.StatsCohortId == nil || s.statscohorttype.StatsCohortId == nil
    }
  func (s *StatsCohortType) AttendanceLess90Percent() *Int {
    if s.statscohorttype.AttendanceLess90Percent == nil {
    if v, ok:= IntPointer(0); ok {
      s.statscohorttype.AttendanceLess90Percent = ((*Int)(v))
      }
      }
      return s.statscohorttype.AttendanceLess90Percent
    }
  func (s *StatsCohortType) AttendanceLess90Percent_IsNil() bool {
    return s.AttendanceLess90Percent == nil || s.statscohorttype.AttendanceLess90Percent == nil
    }
  func (s *StatsCohortType) PossibleSchoolDaysGT90PercentAttendance() *Int {
    if s.statscohorttype.PossibleSchoolDaysGT90PercentAttendance == nil {
    if v, ok:= IntPointer(0); ok {
      s.statscohorttype.PossibleSchoolDaysGT90PercentAttendance = ((*Int)(v))
      }
      }
      return s.statscohorttype.PossibleSchoolDaysGT90PercentAttendance
    }
  func (s *StatsCohortType) PossibleSchoolDaysGT90PercentAttendance_IsNil() bool {
    return s.PossibleSchoolDaysGT90PercentAttendance == nil || s.statscohorttype.PossibleSchoolDaysGT90PercentAttendance == nil
    }

func (n *WellbeingAppeal) Unset(key string) *WellbeingAppeal {
        switch key {
  case "AppealNotes":
   n.wellbeingappeal.AppealNotes = nil
  case "AppealOutcome":
   n.wellbeingappeal.AppealOutcome = nil
  case "SIF_Metadata":
   n.wellbeingappeal.SIF_Metadata = nil
  case "AppealStatusCode":
   n.wellbeingappeal.AppealStatusCode = nil
  case "StudentPersonalRefId":
   n.wellbeingappeal.StudentPersonalRefId = nil
  case "RefId":
   n.wellbeingappeal.RefId = nil
  case "WellbeingResponseRefId":
   n.wellbeingappeal.WellbeingResponseRefId = nil
  case "LocalId":
   n.wellbeingappeal.LocalId = nil
  case "SIF_ExtendedElements":
   n.wellbeingappeal.SIF_ExtendedElements = nil
  case "LocalAppealId":
   n.wellbeingappeal.LocalAppealId = nil
  case "LocalCodeList":
   n.wellbeingappeal.LocalCodeList = nil
  case "DocumentList":
   n.wellbeingappeal.DocumentList = nil
  case "SchoolInfoRefId":
   n.wellbeingappeal.SchoolInfoRefId = nil
  case "Date":
   n.wellbeingappeal.Date = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingAppeal")
        }
        return n
}

func (n *WellbeingAppeal) SetProperty(key string, value interface{}) *WellbeingAppeal {
        if n == nil {
                n, _ = WellbeingAppealPointer(WellbeingAppeal{})
        }
        switch key {
    case "AppealNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingappeal.AppealNotes = ((*String)(v))
      }
    case "AppealOutcome":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingappeal.AppealOutcome = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.wellbeingappeal.SIF_Metadata = v
      }
    case "AppealStatusCode":
        if !CodesetContains(AUCodeSetsWellbeingAppealStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingAppealStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.wellbeingappeal.AppealStatusCode = ((*AUCodeSetsWellbeingAppealStatusType)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingappeal.StudentPersonalRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingappeal.RefId = ((*RefIdType)(v))
      }
    case "WellbeingResponseRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingappeal.WellbeingResponseRefId = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingappeal.LocalId = ((*LocalIdType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.wellbeingappeal.SIF_ExtendedElements = v
      }
    case "LocalAppealId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingappeal.LocalAppealId = ((*LocalIdType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.wellbeingappeal.LocalCodeList = v
      }
    case "DocumentList":
    if v, ok:= WellbeingDocumentListTypePointer(value); ok {
      n.wellbeingappeal.DocumentList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingappeal.SchoolInfoRefId = ((*String)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingappeal.Date = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingAppeal")
        }
        return n
}

  func (s *WellbeingAppeal) AppealNotes() *String {
    if s.wellbeingappeal.AppealNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingappeal.AppealNotes = ((*String)(v))
      }
      }
      return s.wellbeingappeal.AppealNotes
    }
  func (s *WellbeingAppeal) AppealNotes_IsNil() bool {
    return s.AppealNotes == nil || s.wellbeingappeal.AppealNotes == nil
    }
  func (s *WellbeingAppeal) AppealOutcome() *String {
    if s.wellbeingappeal.AppealOutcome == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingappeal.AppealOutcome = ((*String)(v))
      }
      }
      return s.wellbeingappeal.AppealOutcome
    }
  func (s *WellbeingAppeal) AppealOutcome_IsNil() bool {
    return s.AppealOutcome == nil || s.wellbeingappeal.AppealOutcome == nil
    }
  func (s *WellbeingAppeal) SIF_Metadata() *SIF_MetadataType {
    if s.wellbeingappeal.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.wellbeingappeal.SIF_Metadata = v
      }
      }
      return s.wellbeingappeal.SIF_Metadata
    }
  func (s *WellbeingAppeal) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.wellbeingappeal.SIF_Metadata == nil
    }
  func (s *WellbeingAppeal) AppealStatusCode() *AUCodeSetsWellbeingAppealStatusType {
    if s.wellbeingappeal.AppealStatusCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingappeal.AppealStatusCode = ((*AUCodeSetsWellbeingAppealStatusType)(v))
      }
      }
      return s.wellbeingappeal.AppealStatusCode
    }
  func (s *WellbeingAppeal) AppealStatusCode_IsNil() bool {
    return s.AppealStatusCode == nil || s.wellbeingappeal.AppealStatusCode == nil
    }
  func (s *WellbeingAppeal) StudentPersonalRefId() *String {
    if s.wellbeingappeal.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingappeal.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.wellbeingappeal.StudentPersonalRefId
    }
  func (s *WellbeingAppeal) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.wellbeingappeal.StudentPersonalRefId == nil
    }
  func (s *WellbeingAppeal) RefId() *RefIdType {
    if s.wellbeingappeal.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingappeal.RefId = ((*RefIdType)(v))
      }
      }
      return s.wellbeingappeal.RefId
    }
  func (s *WellbeingAppeal) RefId_IsNil() bool {
    return s.RefId == nil || s.wellbeingappeal.RefId == nil
    }
  func (s *WellbeingAppeal) WellbeingResponseRefId() *String {
    if s.wellbeingappeal.WellbeingResponseRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingappeal.WellbeingResponseRefId = ((*String)(v))
      }
      }
      return s.wellbeingappeal.WellbeingResponseRefId
    }
  func (s *WellbeingAppeal) WellbeingResponseRefId_IsNil() bool {
    return s.WellbeingResponseRefId == nil || s.wellbeingappeal.WellbeingResponseRefId == nil
    }
  func (s *WellbeingAppeal) LocalId() *LocalIdType {
    if s.wellbeingappeal.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingappeal.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.wellbeingappeal.LocalId
    }
  func (s *WellbeingAppeal) LocalId_IsNil() bool {
    return s.LocalId == nil || s.wellbeingappeal.LocalId == nil
    }
  func (s *WellbeingAppeal) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.wellbeingappeal.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.wellbeingappeal.SIF_ExtendedElements = v
      }
      }
      return s.wellbeingappeal.SIF_ExtendedElements
    }
  func (s *WellbeingAppeal) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.wellbeingappeal.SIF_ExtendedElements == nil
    }
  func (s *WellbeingAppeal) LocalAppealId() *LocalIdType {
    if s.wellbeingappeal.LocalAppealId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingappeal.LocalAppealId = ((*LocalIdType)(v))
      }
      }
      return s.wellbeingappeal.LocalAppealId
    }
  func (s *WellbeingAppeal) LocalAppealId_IsNil() bool {
    return s.LocalAppealId == nil || s.wellbeingappeal.LocalAppealId == nil
    }
  func (s *WellbeingAppeal) LocalCodeList() *LocalCodeListType {
    if s.wellbeingappeal.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.wellbeingappeal.LocalCodeList = v
      }
      }
      return s.wellbeingappeal.LocalCodeList
    }
  func (s *WellbeingAppeal) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.wellbeingappeal.LocalCodeList == nil
    }
  func (s *WellbeingAppeal) DocumentList() *WellbeingDocumentListType {
    if s.wellbeingappeal.DocumentList == nil {
     if v, ok:= WellbeingDocumentListTypePointer(WellbeingDocumentListType{}); ok {
      s.wellbeingappeal.DocumentList = v
      }
      }
      return s.wellbeingappeal.DocumentList
    }
  func (s *WellbeingAppeal) DocumentList_IsNil() bool {
    return s.DocumentList == nil || s.wellbeingappeal.DocumentList == nil
    }
  func (s *WellbeingAppeal) SchoolInfoRefId() *String {
    if s.wellbeingappeal.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingappeal.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.wellbeingappeal.SchoolInfoRefId
    }
  func (s *WellbeingAppeal) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.wellbeingappeal.SchoolInfoRefId == nil
    }
  func (s *WellbeingAppeal) Date() *String {
    if s.wellbeingappeal.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingappeal.Date = ((*String)(v))
      }
      }
      return s.wellbeingappeal.Date
    }
  func (s *WellbeingAppeal) Date_IsNil() bool {
    return s.Date == nil || s.wellbeingappeal.Date == nil
    }

func (n *AGReportingObjectResponseType) Unset(key string) *AGReportingObjectResponseType {
        switch key {
  case "CommonwealthId":
   n.agreportingobjectresponsetype.CommonwealthId = nil
  case "SIFRefId":
   n.agreportingobjectresponsetype.SIFRefId = nil
  case "AGSubmissionStatusCode":
   n.agreportingobjectresponsetype.AGSubmissionStatusCode = nil
  case "EntityName":
   n.agreportingobjectresponsetype.EntityName = nil
  case "SubmittedRefId":
   n.agreportingobjectresponsetype.SubmittedRefId = nil
  case "AGRuleList":
   n.agreportingobjectresponsetype.AGRuleList = nil
  case "HTTPStatusCode":
   n.agreportingobjectresponsetype.HTTPStatusCode = nil
  case "ErrorText":
   n.agreportingobjectresponsetype.ErrorText = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGReportingObjectResponseType")
        }
        return n
}

func (n *AGReportingObjectResponseType) SetProperty(key string, value interface{}) *AGReportingObjectResponseType {
        if n == nil {
                n, _ = AGReportingObjectResponseTypePointer(AGReportingObjectResponseType{})
        }
        switch key {
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.agreportingobjectresponsetype.CommonwealthId = ((*String)(v))
      }
    case "SIFRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.agreportingobjectresponsetype.SIFRefId = ((*String)(v))
      }
    case "AGSubmissionStatusCode":
        if !CodesetContains(AUCodeSetsAGSubmissionStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAGSubmissionStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.agreportingobjectresponsetype.AGSubmissionStatusCode = ((*AUCodeSetsAGSubmissionStatusType)(v))
      }
    case "EntityName":
    
    if v, ok:= StringPointer(value); ok {
      n.agreportingobjectresponsetype.EntityName = ((*String)(v))
      }
    case "SubmittedRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.agreportingobjectresponsetype.SubmittedRefId = ((*String)(v))
      }
    case "AGRuleList":
    if v, ok:= AGRuleListTypePointer(value); ok {
      n.agreportingobjectresponsetype.AGRuleList = v
      }
    case "HTTPStatusCode":
    
    if v, ok:= StringPointer(value); ok {
      n.agreportingobjectresponsetype.HTTPStatusCode = ((*String)(v))
      }
    case "ErrorText":
    
    if v, ok:= StringPointer(value); ok {
      n.agreportingobjectresponsetype.ErrorText = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGReportingObjectResponseType")
        }
        return n
}

  func (s *AGReportingObjectResponseType) CommonwealthId() *String {
    if s.agreportingobjectresponsetype.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.agreportingobjectresponsetype.CommonwealthId = ((*String)(v))
      }
      }
      return s.agreportingobjectresponsetype.CommonwealthId
    }
  func (s *AGReportingObjectResponseType) CommonwealthId_IsNil() bool {
    return s.CommonwealthId == nil || s.agreportingobjectresponsetype.CommonwealthId == nil
    }
  func (s *AGReportingObjectResponseType) SIFRefId() *String {
    if s.agreportingobjectresponsetype.SIFRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.agreportingobjectresponsetype.SIFRefId = ((*String)(v))
      }
      }
      return s.agreportingobjectresponsetype.SIFRefId
    }
  func (s *AGReportingObjectResponseType) SIFRefId_IsNil() bool {
    return s.SIFRefId == nil || s.agreportingobjectresponsetype.SIFRefId == nil
    }
  func (s *AGReportingObjectResponseType) AGSubmissionStatusCode() *AUCodeSetsAGSubmissionStatusType {
    if s.agreportingobjectresponsetype.AGSubmissionStatusCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.agreportingobjectresponsetype.AGSubmissionStatusCode = ((*AUCodeSetsAGSubmissionStatusType)(v))
      }
      }
      return s.agreportingobjectresponsetype.AGSubmissionStatusCode
    }
  func (s *AGReportingObjectResponseType) AGSubmissionStatusCode_IsNil() bool {
    return s.AGSubmissionStatusCode == nil || s.agreportingobjectresponsetype.AGSubmissionStatusCode == nil
    }
  func (s *AGReportingObjectResponseType) EntityName() *String {
    if s.agreportingobjectresponsetype.EntityName == nil {
    if v, ok:= StringPointer(""); ok {
      s.agreportingobjectresponsetype.EntityName = ((*String)(v))
      }
      }
      return s.agreportingobjectresponsetype.EntityName
    }
  func (s *AGReportingObjectResponseType) EntityName_IsNil() bool {
    return s.EntityName == nil || s.agreportingobjectresponsetype.EntityName == nil
    }
  func (s *AGReportingObjectResponseType) SubmittedRefId() *String {
    if s.agreportingobjectresponsetype.SubmittedRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.agreportingobjectresponsetype.SubmittedRefId = ((*String)(v))
      }
      }
      return s.agreportingobjectresponsetype.SubmittedRefId
    }
  func (s *AGReportingObjectResponseType) SubmittedRefId_IsNil() bool {
    return s.SubmittedRefId == nil || s.agreportingobjectresponsetype.SubmittedRefId == nil
    }
  func (s *AGReportingObjectResponseType) AGRuleList() *AGRuleListType {
    if s.agreportingobjectresponsetype.AGRuleList == nil {
     if v, ok:= AGRuleListTypePointer(AGRuleListType{}); ok {
      s.agreportingobjectresponsetype.AGRuleList = v
      }
      }
      return s.agreportingobjectresponsetype.AGRuleList
    }
  func (s *AGReportingObjectResponseType) AGRuleList_IsNil() bool {
    return s.AGRuleList == nil || s.agreportingobjectresponsetype.AGRuleList == nil
    }
  func (s *AGReportingObjectResponseType) HTTPStatusCode() *String {
    if s.agreportingobjectresponsetype.HTTPStatusCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.agreportingobjectresponsetype.HTTPStatusCode = ((*String)(v))
      }
      }
      return s.agreportingobjectresponsetype.HTTPStatusCode
    }
  func (s *AGReportingObjectResponseType) HTTPStatusCode_IsNil() bool {
    return s.HTTPStatusCode == nil || s.agreportingobjectresponsetype.HTTPStatusCode == nil
    }
  func (s *AGReportingObjectResponseType) ErrorText() *String {
    if s.agreportingobjectresponsetype.ErrorText == nil {
    if v, ok:= StringPointer(""); ok {
      s.agreportingobjectresponsetype.ErrorText = ((*String)(v))
      }
      }
      return s.agreportingobjectresponsetype.ErrorText
    }
  func (s *AGReportingObjectResponseType) ErrorText_IsNil() bool {
    return s.ErrorText == nil || s.agreportingobjectresponsetype.ErrorText == nil
    }

func (n *LibraryItemInfoType) Unset(key string) *LibraryItemInfoType {
        switch key {
  case "Author":
   n.libraryiteminfotype.Author = nil
  case "Type":
   n.libraryiteminfotype.Type = nil
  case "ReplacementCost":
   n.libraryiteminfotype.ReplacementCost = nil
  case "Cost":
   n.libraryiteminfotype.Cost = nil
  case "ISBN":
   n.libraryiteminfotype.ISBN = nil
  case "Title":
   n.libraryiteminfotype.Title = nil
  case "CallNumber":
   n.libraryiteminfotype.CallNumber = nil
  case "ElectronicId":
   n.libraryiteminfotype.ElectronicId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryItemInfoType")
        }
        return n
}

func (n *LibraryItemInfoType) SetProperty(key string, value interface{}) *LibraryItemInfoType {
        if n == nil {
                n, _ = LibraryItemInfoTypePointer(LibraryItemInfoType{})
        }
        switch key {
    case "Author":
    
    if v, ok:= StringPointer(value); ok {
      n.libraryiteminfotype.Author = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.libraryiteminfotype.Type = ((*String)(v))
      }
    case "ReplacementCost":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.libraryiteminfotype.ReplacementCost = v
      }
    case "Cost":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.libraryiteminfotype.Cost = v
      }
    case "ISBN":
    
    if v, ok:= StringPointer(value); ok {
      n.libraryiteminfotype.ISBN = ((*String)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.libraryiteminfotype.Title = ((*String)(v))
      }
    case "CallNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.libraryiteminfotype.CallNumber = ((*String)(v))
      }
    case "ElectronicId":
    if v, ok:= ElectronicIdTypePointer(value); ok {
      n.libraryiteminfotype.ElectronicId = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LibraryItemInfoType")
        }
        return n
}

  func (s *LibraryItemInfoType) Author() *String {
    if s.libraryiteminfotype.Author == nil {
    if v, ok:= StringPointer(""); ok {
      s.libraryiteminfotype.Author = ((*String)(v))
      }
      }
      return s.libraryiteminfotype.Author
    }
  func (s *LibraryItemInfoType) Author_IsNil() bool {
    return s.Author == nil || s.libraryiteminfotype.Author == nil
    }
  func (s *LibraryItemInfoType) Type() *String {
    if s.libraryiteminfotype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.libraryiteminfotype.Type = ((*String)(v))
      }
      }
      return s.libraryiteminfotype.Type
    }
  func (s *LibraryItemInfoType) Type_IsNil() bool {
    return s.Type == nil || s.libraryiteminfotype.Type == nil
    }
  func (s *LibraryItemInfoType) ReplacementCost() *MonetaryAmountType {
    if s.libraryiteminfotype.ReplacementCost == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.libraryiteminfotype.ReplacementCost = v
      }
      }
      return s.libraryiteminfotype.ReplacementCost
    }
  func (s *LibraryItemInfoType) ReplacementCost_IsNil() bool {
    return s.ReplacementCost == nil || s.libraryiteminfotype.ReplacementCost == nil
    }
  func (s *LibraryItemInfoType) Cost() *MonetaryAmountType {
    if s.libraryiteminfotype.Cost == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.libraryiteminfotype.Cost = v
      }
      }
      return s.libraryiteminfotype.Cost
    }
  func (s *LibraryItemInfoType) Cost_IsNil() bool {
    return s.Cost == nil || s.libraryiteminfotype.Cost == nil
    }
  func (s *LibraryItemInfoType) ISBN() *String {
    if s.libraryiteminfotype.ISBN == nil {
    if v, ok:= StringPointer(""); ok {
      s.libraryiteminfotype.ISBN = ((*String)(v))
      }
      }
      return s.libraryiteminfotype.ISBN
    }
  func (s *LibraryItemInfoType) ISBN_IsNil() bool {
    return s.ISBN == nil || s.libraryiteminfotype.ISBN == nil
    }
  func (s *LibraryItemInfoType) Title() *String {
    if s.libraryiteminfotype.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.libraryiteminfotype.Title = ((*String)(v))
      }
      }
      return s.libraryiteminfotype.Title
    }
  func (s *LibraryItemInfoType) Title_IsNil() bool {
    return s.Title == nil || s.libraryiteminfotype.Title == nil
    }
  func (s *LibraryItemInfoType) CallNumber() *String {
    if s.libraryiteminfotype.CallNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.libraryiteminfotype.CallNumber = ((*String)(v))
      }
      }
      return s.libraryiteminfotype.CallNumber
    }
  func (s *LibraryItemInfoType) CallNumber_IsNil() bool {
    return s.CallNumber == nil || s.libraryiteminfotype.CallNumber == nil
    }
  func (s *LibraryItemInfoType) ElectronicId() *ElectronicIdType {
    if s.libraryiteminfotype.ElectronicId == nil {
     if v, ok:= ElectronicIdTypePointer(ElectronicIdType{}); ok {
      s.libraryiteminfotype.ElectronicId = v
      }
      }
      return s.libraryiteminfotype.ElectronicId
    }
  func (s *LibraryItemInfoType) ElectronicId_IsNil() bool {
    return s.ElectronicId == nil || s.libraryiteminfotype.ElectronicId == nil
    }

func (n *AGParentType) Unset(key string) *AGParentType {
        switch key {
  case "ParentName":
   n.agparenttype.ParentName = nil
  case "ParentAddress":
   n.agparenttype.ParentAddress = nil
  case "AddressSameAsStudent":
   n.agparenttype.AddressSameAsStudent = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGParentType")
        }
        return n
}

func (n *AGParentType) SetProperty(key string, value interface{}) *AGParentType {
        if n == nil {
                n, _ = AGParentTypePointer(AGParentType{})
        }
        switch key {
    case "ParentName":
    if v, ok:= NameOfRecordTypePointer(value); ok {
      n.agparenttype.ParentName = v
      }
    case "ParentAddress":
    if v, ok:= AddressTypePointer(value); ok {
      n.agparenttype.ParentAddress = v
      }
    case "AddressSameAsStudent":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.agparenttype.AddressSameAsStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AGParentType")
        }
        return n
}

  func (s *AGParentType) ParentName() *NameOfRecordType {
    if s.agparenttype.ParentName == nil {
     if v, ok:= NameOfRecordTypePointer(NameOfRecordType{}); ok {
      s.agparenttype.ParentName = v
      }
      }
      return s.agparenttype.ParentName
    }
  func (s *AGParentType) ParentName_IsNil() bool {
    return s.ParentName == nil || s.agparenttype.ParentName == nil
    }
  func (s *AGParentType) ParentAddress() *AddressType {
    if s.agparenttype.ParentAddress == nil {
     if v, ok:= AddressTypePointer(AddressType{}); ok {
      s.agparenttype.ParentAddress = v
      }
      }
      return s.agparenttype.ParentAddress
    }
  func (s *AGParentType) ParentAddress_IsNil() bool {
    return s.ParentAddress == nil || s.agparenttype.ParentAddress == nil
    }
  func (s *AGParentType) AddressSameAsStudent() *AUCodeSetsYesOrNoCategoryType {
    if s.agparenttype.AddressSameAsStudent == nil {
    if v, ok:= StringPointer(""); ok {
      s.agparenttype.AddressSameAsStudent = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.agparenttype.AddressSameAsStudent
    }
  func (s *AGParentType) AddressSameAsStudent_IsNil() bool {
    return s.AddressSameAsStudent == nil || s.agparenttype.AddressSameAsStudent == nil
    }

func (n *SchoolInfo) Unset(key string) *SchoolInfo {
        switch key {
  case "JurisdictionLowerHouse":
   n.schoolinfo.JurisdictionLowerHouse = nil
  case "SLA":
   n.schoolinfo.SLA = nil
  case "SchoolName":
   n.schoolinfo.SchoolName = nil
  case "SchoolFocusList":
   n.schoolinfo.SchoolFocusList = nil
  case "SchoolCoEdStatus":
   n.schoolinfo.SchoolCoEdStatus = nil
  case "CommonwealthId":
   n.schoolinfo.CommonwealthId = nil
  case "ReligiousAffiliation":
   n.schoolinfo.ReligiousAffiliation = nil
  case "SchoolDistrictLocalId":
   n.schoolinfo.SchoolDistrictLocalId = nil
  case "PhoneNumberList":
   n.schoolinfo.PhoneNumberList = nil
  case "ACARAId":
   n.schoolinfo.ACARAId = nil
  case "SchoolDistrict":
   n.schoolinfo.SchoolDistrict = nil
  case "TotalEnrollments":
   n.schoolinfo.TotalEnrollments = nil
  case "SchoolContactList":
   n.schoolinfo.SchoolContactList = nil
  case "IndependentSchool":
   n.schoolinfo.IndependentSchool = nil
  case "StateProvinceId":
   n.schoolinfo.StateProvinceId = nil
  case "SIF_ExtendedElements":
   n.schoolinfo.SIF_ExtendedElements = nil
  case "OtherIdList":
   n.schoolinfo.OtherIdList = nil
  case "SchoolGeographicLocation":
   n.schoolinfo.SchoolGeographicLocation = nil
  case "LEAInfoRefId":
   n.schoolinfo.LEAInfoRefId = nil
  case "SIF_Metadata":
   n.schoolinfo.SIF_Metadata = nil
  case "Entity_Open":
   n.schoolinfo.Entity_Open = nil
  case "YearLevels":
   n.schoolinfo.YearLevels = nil
  case "SchoolTimeZone":
   n.schoolinfo.SchoolTimeZone = nil
  case "LocalCodeList":
   n.schoolinfo.LocalCodeList = nil
  case "SessionType":
   n.schoolinfo.SessionType = nil
  case "LocalId":
   n.schoolinfo.LocalId = nil
  case "LocalGovernmentArea":
   n.schoolinfo.LocalGovernmentArea = nil
  case "AddressList":
   n.schoolinfo.AddressList = nil
  case "ARIA":
   n.schoolinfo.ARIA = nil
  case "YearLevelEnrollmentList":
   n.schoolinfo.YearLevelEnrollmentList = nil
  case "Campus":
   n.schoolinfo.Campus = nil
  case "BoardingSchoolStatus":
   n.schoolinfo.BoardingSchoolStatus = nil
  case "System":
   n.schoolinfo.System = nil
  case "PrincipalInfo":
   n.schoolinfo.PrincipalInfo = nil
  case "RefId":
   n.schoolinfo.RefId = nil
  case "SchoolGroupList":
   n.schoolinfo.SchoolGroupList = nil
  case "SchoolSector":
   n.schoolinfo.SchoolSector = nil
  case "OperationalStatus":
   n.schoolinfo.OperationalStatus = nil
  case "SchoolType":
   n.schoolinfo.SchoolType = nil
  case "NonGovSystemicStatus":
   n.schoolinfo.NonGovSystemicStatus = nil
  case "SchoolEmailList":
   n.schoolinfo.SchoolEmailList = nil
  case "Entity_Close":
   n.schoolinfo.Entity_Close = nil
  case "FederalElectorate":
   n.schoolinfo.FederalElectorate = nil
  case "OtherLEA":
   n.schoolinfo.OtherLEA = nil
  case "SchoolURL":
   n.schoolinfo.SchoolURL = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolInfo")
        }
        return n
}

func (n *SchoolInfo) SetProperty(key string, value interface{}) *SchoolInfo {
        if n == nil {
                n, _ = SchoolInfoPointer(SchoolInfo{})
        }
        switch key {
    case "JurisdictionLowerHouse":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.JurisdictionLowerHouse = ((*String)(v))
      }
    case "SLA":
        if !CodesetContains(AUCodeSetsAustralianStandardGeographicalClassificationASGCType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardGeographicalClassificationASGCType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.SLA = ((*AUCodeSetsAustralianStandardGeographicalClassificationASGCType)(v))
      }
    case "SchoolName":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.SchoolName = ((*String)(v))
      }
    case "SchoolFocusList":
    if v, ok:= SchoolFocusListTypePointer(value); ok {
      n.schoolinfo.SchoolFocusList = v
      }
    case "SchoolCoEdStatus":
        if !CodesetContains(AUCodeSetsSchoolCoEdStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolCoEdStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.SchoolCoEdStatus = ((*AUCodeSetsSchoolCoEdStatusType)(v))
      }
    case "CommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.CommonwealthId = ((*String)(v))
      }
    case "ReligiousAffiliation":
        if !CodesetContains(AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.ReligiousAffiliation = ((*AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType)(v))
      }
    case "SchoolDistrictLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.SchoolDistrictLocalId = ((*LocalIdType)(v))
      }
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.schoolinfo.PhoneNumberList = v
      }
    case "ACARAId":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.ACARAId = ((*String)(v))
      }
    case "SchoolDistrict":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.SchoolDistrict = ((*String)(v))
      }
    case "TotalEnrollments":
    if v, ok:= TotalEnrollmentsTypePointer(value); ok {
      n.schoolinfo.TotalEnrollments = v
      }
    case "SchoolContactList":
    if v, ok:= SchoolContactListTypePointer(value); ok {
      n.schoolinfo.SchoolContactList = v
      }
    case "IndependentSchool":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.IndependentSchool = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "StateProvinceId":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.StateProvinceId = ((*StateProvinceIdType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.schoolinfo.SIF_ExtendedElements = v
      }
    case "OtherIdList":
    if v, ok:= OtherIdListTypePointer(value); ok {
      n.schoolinfo.OtherIdList = v
      }
    case "SchoolGeographicLocation":
        if !CodesetContains(AUCodeSetsSchoolLocationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolLocationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.SchoolGeographicLocation = ((*AUCodeSetsSchoolLocationType)(v))
      }
    case "LEAInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.LEAInfoRefId = ((*RefIdType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.schoolinfo.SIF_Metadata = v
      }
    case "Entity_Open":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.Entity_Open = ((*String)(v))
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.schoolinfo.YearLevels = v
      }
    case "SchoolTimeZone":
        if !CodesetContains(AUCodeSetsAustralianTimeZoneType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsAustralianTimeZoneType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.SchoolTimeZone = ((*AUCodeSetsAustralianTimeZoneType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.schoolinfo.LocalCodeList = v
      }
    case "SessionType":
        if !CodesetContains(AUCodeSetsSessionTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSessionTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.SessionType = ((*AUCodeSetsSessionTypeType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.LocalId = ((*LocalIdType)(v))
      }
    case "LocalGovernmentArea":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.LocalGovernmentArea = ((*String)(v))
      }
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.schoolinfo.AddressList = v
      }
    case "ARIA":
    
    if v, ok:= FloatPointer(value); ok {
      n.schoolinfo.ARIA = ((*Float)(v))
      }
    case "YearLevelEnrollmentList":
    if v, ok:= YearLevelEnrollmentListTypePointer(value); ok {
      n.schoolinfo.YearLevelEnrollmentList = v
      }
    case "Campus":
    if v, ok:= CampusContainerTypePointer(value); ok {
      n.schoolinfo.Campus = v
      }
    case "BoardingSchoolStatus":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.BoardingSchoolStatus = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "System":
        if !CodesetContains(AUCodeSetsSchoolSystemType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolSystemType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.System = ((*AUCodeSetsSchoolSystemType)(v))
      }
    case "PrincipalInfo":
    if v, ok:= PrincipalInfoTypePointer(value); ok {
      n.schoolinfo.PrincipalInfo = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.RefId = ((*RefIdType)(v))
      }
    case "SchoolGroupList":
    if v, ok:= SchoolGroupListTypePointer(value); ok {
      n.schoolinfo.SchoolGroupList = v
      }
    case "SchoolSector":
        if !CodesetContains(AUCodeSetsSchoolSectorCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolSectorCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.SchoolSector = ((*AUCodeSetsSchoolSectorCodeType)(v))
      }
    case "OperationalStatus":
        if !CodesetContains(AUCodeSetsOperationalStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsOperationalStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.OperationalStatus = ((*OperationalStatusType)(v))
      }
    case "SchoolType":
        if !CodesetContains(AUCodeSetsSchoolLevelType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolLevelType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.SchoolType = ((*AUCodeSetsSchoolLevelType)(v))
      }
    case "NonGovSystemicStatus":
        if !CodesetContains(AUCodeSetsSystemicStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSystemicStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.NonGovSystemicStatus = ((*AUCodeSetsSystemicStatusType)(v))
      }
    case "SchoolEmailList":
    if v, ok:= EmailListTypePointer(value); ok {
      n.schoolinfo.SchoolEmailList = v
      }
    case "Entity_Close":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.Entity_Close = ((*String)(v))
      }
    case "FederalElectorate":
        if !CodesetContains(AUCodeSetsFederalElectorateType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsFederalElectorateType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.FederalElectorate = ((*AUCodeSetsFederalElectorateType)(v))
      }
    case "OtherLEA":
    if v, ok:= SchoolInfo_OtherLEAPointer(value); ok {
      n.schoolinfo.OtherLEA = v
      }
    case "SchoolURL":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo.SchoolURL = ((*SchoolURLType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolInfo")
        }
        return n
}

  func (s *SchoolInfo) JurisdictionLowerHouse() *String {
    if s.schoolinfo.JurisdictionLowerHouse == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.JurisdictionLowerHouse = ((*String)(v))
      }
      }
      return s.schoolinfo.JurisdictionLowerHouse
    }
  func (s *SchoolInfo) JurisdictionLowerHouse_IsNil() bool {
    return s.JurisdictionLowerHouse == nil || s.schoolinfo.JurisdictionLowerHouse == nil
    }
  func (s *SchoolInfo) SLA() *AUCodeSetsAustralianStandardGeographicalClassificationASGCType {
    if s.schoolinfo.SLA == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.SLA = ((*AUCodeSetsAustralianStandardGeographicalClassificationASGCType)(v))
      }
      }
      return s.schoolinfo.SLA
    }
  func (s *SchoolInfo) SLA_IsNil() bool {
    return s.SLA == nil || s.schoolinfo.SLA == nil
    }
  func (s *SchoolInfo) SchoolName() *String {
    if s.schoolinfo.SchoolName == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.SchoolName = ((*String)(v))
      }
      }
      return s.schoolinfo.SchoolName
    }
  func (s *SchoolInfo) SchoolName_IsNil() bool {
    return s.SchoolName == nil || s.schoolinfo.SchoolName == nil
    }
  func (s *SchoolInfo) SchoolFocusList() *SchoolFocusListType {
    if s.schoolinfo.SchoolFocusList == nil {
     if v, ok:= SchoolFocusListTypePointer(SchoolFocusListType{}); ok {
      s.schoolinfo.SchoolFocusList = v
      }
      }
      return s.schoolinfo.SchoolFocusList
    }
  func (s *SchoolInfo) SchoolFocusList_IsNil() bool {
    return s.SchoolFocusList == nil || s.schoolinfo.SchoolFocusList == nil
    }
  func (s *SchoolInfo) SchoolCoEdStatus() *AUCodeSetsSchoolCoEdStatusType {
    if s.schoolinfo.SchoolCoEdStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.SchoolCoEdStatus = ((*AUCodeSetsSchoolCoEdStatusType)(v))
      }
      }
      return s.schoolinfo.SchoolCoEdStatus
    }
  func (s *SchoolInfo) SchoolCoEdStatus_IsNil() bool {
    return s.SchoolCoEdStatus == nil || s.schoolinfo.SchoolCoEdStatus == nil
    }
  func (s *SchoolInfo) CommonwealthId() *String {
    if s.schoolinfo.CommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.CommonwealthId = ((*String)(v))
      }
      }
      return s.schoolinfo.CommonwealthId
    }
  func (s *SchoolInfo) CommonwealthId_IsNil() bool {
    return s.CommonwealthId == nil || s.schoolinfo.CommonwealthId == nil
    }
  func (s *SchoolInfo) ReligiousAffiliation() *AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType {
    if s.schoolinfo.ReligiousAffiliation == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.ReligiousAffiliation = ((*AUCodeSetsAustralianStandardClassificationOfReligiousGroupsASCRGType)(v))
      }
      }
      return s.schoolinfo.ReligiousAffiliation
    }
  func (s *SchoolInfo) ReligiousAffiliation_IsNil() bool {
    return s.ReligiousAffiliation == nil || s.schoolinfo.ReligiousAffiliation == nil
    }
  func (s *SchoolInfo) SchoolDistrictLocalId() *LocalIdType {
    if s.schoolinfo.SchoolDistrictLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.SchoolDistrictLocalId = ((*LocalIdType)(v))
      }
      }
      return s.schoolinfo.SchoolDistrictLocalId
    }
  func (s *SchoolInfo) SchoolDistrictLocalId_IsNil() bool {
    return s.SchoolDistrictLocalId == nil || s.schoolinfo.SchoolDistrictLocalId == nil
    }
  func (s *SchoolInfo) PhoneNumberList() *PhoneNumberListType {
    if s.schoolinfo.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.schoolinfo.PhoneNumberList = v
      }
      }
      return s.schoolinfo.PhoneNumberList
    }
  func (s *SchoolInfo) PhoneNumberList_IsNil() bool {
    return s.PhoneNumberList == nil || s.schoolinfo.PhoneNumberList == nil
    }
  func (s *SchoolInfo) ACARAId() *String {
    if s.schoolinfo.ACARAId == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.ACARAId = ((*String)(v))
      }
      }
      return s.schoolinfo.ACARAId
    }
  func (s *SchoolInfo) ACARAId_IsNil() bool {
    return s.ACARAId == nil || s.schoolinfo.ACARAId == nil
    }
  func (s *SchoolInfo) SchoolDistrict() *String {
    if s.schoolinfo.SchoolDistrict == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.SchoolDistrict = ((*String)(v))
      }
      }
      return s.schoolinfo.SchoolDistrict
    }
  func (s *SchoolInfo) SchoolDistrict_IsNil() bool {
    return s.SchoolDistrict == nil || s.schoolinfo.SchoolDistrict == nil
    }
  func (s *SchoolInfo) TotalEnrollments() *TotalEnrollmentsType {
    if s.schoolinfo.TotalEnrollments == nil {
     if v, ok:= TotalEnrollmentsTypePointer(TotalEnrollmentsType{}); ok {
      s.schoolinfo.TotalEnrollments = v
      }
      }
      return s.schoolinfo.TotalEnrollments
    }
  func (s *SchoolInfo) TotalEnrollments_IsNil() bool {
    return s.TotalEnrollments == nil || s.schoolinfo.TotalEnrollments == nil
    }
  func (s *SchoolInfo) SchoolContactList() *SchoolContactListType {
    if s.schoolinfo.SchoolContactList == nil {
     if v, ok:= SchoolContactListTypePointer(SchoolContactListType{}); ok {
      s.schoolinfo.SchoolContactList = v
      }
      }
      return s.schoolinfo.SchoolContactList
    }
  func (s *SchoolInfo) SchoolContactList_IsNil() bool {
    return s.SchoolContactList == nil || s.schoolinfo.SchoolContactList == nil
    }
  func (s *SchoolInfo) IndependentSchool() *AUCodeSetsYesOrNoCategoryType {
    if s.schoolinfo.IndependentSchool == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.IndependentSchool = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.schoolinfo.IndependentSchool
    }
  func (s *SchoolInfo) IndependentSchool_IsNil() bool {
    return s.IndependentSchool == nil || s.schoolinfo.IndependentSchool == nil
    }
  func (s *SchoolInfo) StateProvinceId() *StateProvinceIdType {
    if s.schoolinfo.StateProvinceId == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.StateProvinceId = ((*StateProvinceIdType)(v))
      }
      }
      return s.schoolinfo.StateProvinceId
    }
  func (s *SchoolInfo) StateProvinceId_IsNil() bool {
    return s.StateProvinceId == nil || s.schoolinfo.StateProvinceId == nil
    }
  func (s *SchoolInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.schoolinfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.schoolinfo.SIF_ExtendedElements = v
      }
      }
      return s.schoolinfo.SIF_ExtendedElements
    }
  func (s *SchoolInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.schoolinfo.SIF_ExtendedElements == nil
    }
  func (s *SchoolInfo) OtherIdList() *OtherIdListType {
    if s.schoolinfo.OtherIdList == nil {
     if v, ok:= OtherIdListTypePointer(OtherIdListType{}); ok {
      s.schoolinfo.OtherIdList = v
      }
      }
      return s.schoolinfo.OtherIdList
    }
  func (s *SchoolInfo) OtherIdList_IsNil() bool {
    return s.OtherIdList == nil || s.schoolinfo.OtherIdList == nil
    }
  func (s *SchoolInfo) SchoolGeographicLocation() *AUCodeSetsSchoolLocationType {
    if s.schoolinfo.SchoolGeographicLocation == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.SchoolGeographicLocation = ((*AUCodeSetsSchoolLocationType)(v))
      }
      }
      return s.schoolinfo.SchoolGeographicLocation
    }
  func (s *SchoolInfo) SchoolGeographicLocation_IsNil() bool {
    return s.SchoolGeographicLocation == nil || s.schoolinfo.SchoolGeographicLocation == nil
    }
  func (s *SchoolInfo) LEAInfoRefId() *RefIdType {
    if s.schoolinfo.LEAInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.LEAInfoRefId = ((*RefIdType)(v))
      }
      }
      return s.schoolinfo.LEAInfoRefId
    }
  func (s *SchoolInfo) LEAInfoRefId_IsNil() bool {
    return s.LEAInfoRefId == nil || s.schoolinfo.LEAInfoRefId == nil
    }
  func (s *SchoolInfo) SIF_Metadata() *SIF_MetadataType {
    if s.schoolinfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.schoolinfo.SIF_Metadata = v
      }
      }
      return s.schoolinfo.SIF_Metadata
    }
  func (s *SchoolInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.schoolinfo.SIF_Metadata == nil
    }
  func (s *SchoolInfo) Entity_Open() *String {
    if s.schoolinfo.Entity_Open == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.Entity_Open = ((*String)(v))
      }
      }
      return s.schoolinfo.Entity_Open
    }
  func (s *SchoolInfo) Entity_Open_IsNil() bool {
    return s.Entity_Open == nil || s.schoolinfo.Entity_Open == nil
    }
  func (s *SchoolInfo) YearLevels() *YearLevelsType {
    if s.schoolinfo.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.schoolinfo.YearLevels = v
      }
      }
      return s.schoolinfo.YearLevels
    }
  func (s *SchoolInfo) YearLevels_IsNil() bool {
    return s.YearLevels == nil || s.schoolinfo.YearLevels == nil
    }
  func (s *SchoolInfo) SchoolTimeZone() *AUCodeSetsAustralianTimeZoneType {
    if s.schoolinfo.SchoolTimeZone == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.SchoolTimeZone = ((*AUCodeSetsAustralianTimeZoneType)(v))
      }
      }
      return s.schoolinfo.SchoolTimeZone
    }
  func (s *SchoolInfo) SchoolTimeZone_IsNil() bool {
    return s.SchoolTimeZone == nil || s.schoolinfo.SchoolTimeZone == nil
    }
  func (s *SchoolInfo) LocalCodeList() *LocalCodeListType {
    if s.schoolinfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.schoolinfo.LocalCodeList = v
      }
      }
      return s.schoolinfo.LocalCodeList
    }
  func (s *SchoolInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.schoolinfo.LocalCodeList == nil
    }
  func (s *SchoolInfo) SessionType() *AUCodeSetsSessionTypeType {
    if s.schoolinfo.SessionType == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.SessionType = ((*AUCodeSetsSessionTypeType)(v))
      }
      }
      return s.schoolinfo.SessionType
    }
  func (s *SchoolInfo) SessionType_IsNil() bool {
    return s.SessionType == nil || s.schoolinfo.SessionType == nil
    }
  func (s *SchoolInfo) LocalId() *LocalIdType {
    if s.schoolinfo.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.schoolinfo.LocalId
    }
  func (s *SchoolInfo) LocalId_IsNil() bool {
    return s.LocalId == nil || s.schoolinfo.LocalId == nil
    }
  func (s *SchoolInfo) LocalGovernmentArea() *String {
    if s.schoolinfo.LocalGovernmentArea == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.LocalGovernmentArea = ((*String)(v))
      }
      }
      return s.schoolinfo.LocalGovernmentArea
    }
  func (s *SchoolInfo) LocalGovernmentArea_IsNil() bool {
    return s.LocalGovernmentArea == nil || s.schoolinfo.LocalGovernmentArea == nil
    }
  func (s *SchoolInfo) AddressList() *AddressListType {
    if s.schoolinfo.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.schoolinfo.AddressList = v
      }
      }
      return s.schoolinfo.AddressList
    }
  func (s *SchoolInfo) AddressList_IsNil() bool {
    return s.AddressList == nil || s.schoolinfo.AddressList == nil
    }
  func (s *SchoolInfo) ARIA() *Float {
    if s.schoolinfo.ARIA == nil {
    if v, ok:= FloatPointer(0); ok {
      s.schoolinfo.ARIA = ((*Float)(v))
      }
      }
      return s.schoolinfo.ARIA
    }
  func (s *SchoolInfo) ARIA_IsNil() bool {
    return s.ARIA == nil || s.schoolinfo.ARIA == nil
    }
  func (s *SchoolInfo) YearLevelEnrollmentList() *YearLevelEnrollmentListType {
    if s.schoolinfo.YearLevelEnrollmentList == nil {
     if v, ok:= YearLevelEnrollmentListTypePointer(YearLevelEnrollmentListType{}); ok {
      s.schoolinfo.YearLevelEnrollmentList = v
      }
      }
      return s.schoolinfo.YearLevelEnrollmentList
    }
  func (s *SchoolInfo) YearLevelEnrollmentList_IsNil() bool {
    return s.YearLevelEnrollmentList == nil || s.schoolinfo.YearLevelEnrollmentList == nil
    }
  func (s *SchoolInfo) Campus() *CampusContainerType {
    if s.schoolinfo.Campus == nil {
     if v, ok:= CampusContainerTypePointer(CampusContainerType{}); ok {
      s.schoolinfo.Campus = v
      }
      }
      return s.schoolinfo.Campus
    }
  func (s *SchoolInfo) Campus_IsNil() bool {
    return s.Campus == nil || s.schoolinfo.Campus == nil
    }
  func (s *SchoolInfo) BoardingSchoolStatus() *AUCodeSetsYesOrNoCategoryType {
    if s.schoolinfo.BoardingSchoolStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.BoardingSchoolStatus = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.schoolinfo.BoardingSchoolStatus
    }
  func (s *SchoolInfo) BoardingSchoolStatus_IsNil() bool {
    return s.BoardingSchoolStatus == nil || s.schoolinfo.BoardingSchoolStatus == nil
    }
  func (s *SchoolInfo) System() *AUCodeSetsSchoolSystemType {
    if s.schoolinfo.System == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.System = ((*AUCodeSetsSchoolSystemType)(v))
      }
      }
      return s.schoolinfo.System
    }
  func (s *SchoolInfo) System_IsNil() bool {
    return s.System == nil || s.schoolinfo.System == nil
    }
  func (s *SchoolInfo) PrincipalInfo() *PrincipalInfoType {
    if s.schoolinfo.PrincipalInfo == nil {
     if v, ok:= PrincipalInfoTypePointer(PrincipalInfoType{}); ok {
      s.schoolinfo.PrincipalInfo = v
      }
      }
      return s.schoolinfo.PrincipalInfo
    }
  func (s *SchoolInfo) PrincipalInfo_IsNil() bool {
    return s.PrincipalInfo == nil || s.schoolinfo.PrincipalInfo == nil
    }
  func (s *SchoolInfo) RefId() *RefIdType {
    if s.schoolinfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.schoolinfo.RefId
    }
  func (s *SchoolInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.schoolinfo.RefId == nil
    }
  func (s *SchoolInfo) SchoolGroupList() *SchoolGroupListType {
    if s.schoolinfo.SchoolGroupList == nil {
     if v, ok:= SchoolGroupListTypePointer(SchoolGroupListType{}); ok {
      s.schoolinfo.SchoolGroupList = v
      }
      }
      return s.schoolinfo.SchoolGroupList
    }
  func (s *SchoolInfo) SchoolGroupList_IsNil() bool {
    return s.SchoolGroupList == nil || s.schoolinfo.SchoolGroupList == nil
    }
  func (s *SchoolInfo) SchoolSector() *AUCodeSetsSchoolSectorCodeType {
    if s.schoolinfo.SchoolSector == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.SchoolSector = ((*AUCodeSetsSchoolSectorCodeType)(v))
      }
      }
      return s.schoolinfo.SchoolSector
    }
  func (s *SchoolInfo) SchoolSector_IsNil() bool {
    return s.SchoolSector == nil || s.schoolinfo.SchoolSector == nil
    }
  func (s *SchoolInfo) OperationalStatus() *OperationalStatusType {
    if s.schoolinfo.OperationalStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.OperationalStatus = ((*OperationalStatusType)(v))
      }
      }
      return s.schoolinfo.OperationalStatus
    }
  func (s *SchoolInfo) OperationalStatus_IsNil() bool {
    return s.OperationalStatus == nil || s.schoolinfo.OperationalStatus == nil
    }
  func (s *SchoolInfo) SchoolType() *AUCodeSetsSchoolLevelType {
    if s.schoolinfo.SchoolType == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.SchoolType = ((*AUCodeSetsSchoolLevelType)(v))
      }
      }
      return s.schoolinfo.SchoolType
    }
  func (s *SchoolInfo) SchoolType_IsNil() bool {
    return s.SchoolType == nil || s.schoolinfo.SchoolType == nil
    }
  func (s *SchoolInfo) NonGovSystemicStatus() *AUCodeSetsSystemicStatusType {
    if s.schoolinfo.NonGovSystemicStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.NonGovSystemicStatus = ((*AUCodeSetsSystemicStatusType)(v))
      }
      }
      return s.schoolinfo.NonGovSystemicStatus
    }
  func (s *SchoolInfo) NonGovSystemicStatus_IsNil() bool {
    return s.NonGovSystemicStatus == nil || s.schoolinfo.NonGovSystemicStatus == nil
    }
  func (s *SchoolInfo) SchoolEmailList() *EmailListType {
    if s.schoolinfo.SchoolEmailList == nil {
     if v, ok:= EmailListTypePointer(EmailListType{}); ok {
      s.schoolinfo.SchoolEmailList = v
      }
      }
      return s.schoolinfo.SchoolEmailList
    }
  func (s *SchoolInfo) SchoolEmailList_IsNil() bool {
    return s.SchoolEmailList == nil || s.schoolinfo.SchoolEmailList == nil
    }
  func (s *SchoolInfo) Entity_Close() *String {
    if s.schoolinfo.Entity_Close == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.Entity_Close = ((*String)(v))
      }
      }
      return s.schoolinfo.Entity_Close
    }
  func (s *SchoolInfo) Entity_Close_IsNil() bool {
    return s.Entity_Close == nil || s.schoolinfo.Entity_Close == nil
    }
  func (s *SchoolInfo) FederalElectorate() *AUCodeSetsFederalElectorateType {
    if s.schoolinfo.FederalElectorate == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.FederalElectorate = ((*AUCodeSetsFederalElectorateType)(v))
      }
      }
      return s.schoolinfo.FederalElectorate
    }
  func (s *SchoolInfo) FederalElectorate_IsNil() bool {
    return s.FederalElectorate == nil || s.schoolinfo.FederalElectorate == nil
    }
  func (s *SchoolInfo) OtherLEA() *SchoolInfo_OtherLEA {
    if s.schoolinfo.OtherLEA == nil {
     if v, ok:= SchoolInfo_OtherLEAPointer(SchoolInfo_OtherLEA{}); ok {
      s.schoolinfo.OtherLEA = v
      }
      }
      return s.schoolinfo.OtherLEA
    }
  func (s *SchoolInfo) OtherLEA_IsNil() bool {
    return s.OtherLEA == nil || s.schoolinfo.OtherLEA == nil
    }
  func (s *SchoolInfo) SchoolURL() *SchoolURLType {
    if s.schoolinfo.SchoolURL == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo.SchoolURL = ((*SchoolURLType)(v))
      }
      }
      return s.schoolinfo.SchoolURL
    }
  func (s *SchoolInfo) SchoolURL_IsNil() bool {
    return s.SchoolURL == nil || s.schoolinfo.SchoolURL == nil
    }

func (n *NAPTestItem2Type) Unset(key string) *NAPTestItem2Type {
        switch key {
  case "SequenceNumber":
   n.naptestitem2type.SequenceNumber = nil
  case "TestItemLocalId":
   n.naptestitem2type.TestItemLocalId = nil
  case "TestItemRefId":
   n.naptestitem2type.TestItemRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestItem2Type")
        }
        return n
}

func (n *NAPTestItem2Type) SetProperty(key string, value interface{}) *NAPTestItem2Type {
        if n == nil {
                n, _ = NAPTestItem2TypePointer(NAPTestItem2Type{})
        }
        switch key {
    case "SequenceNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.naptestitem2type.SequenceNumber = ((*Int)(v))
      }
    case "TestItemLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestitem2type.TestItemLocalId = ((*LocalIdType)(v))
      }
    case "TestItemRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestitem2type.TestItemRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestItem2Type")
        }
        return n
}

  func (s *NAPTestItem2Type) SequenceNumber() *Int {
    if s.naptestitem2type.SequenceNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.naptestitem2type.SequenceNumber = ((*Int)(v))
      }
      }
      return s.naptestitem2type.SequenceNumber
    }
  func (s *NAPTestItem2Type) SequenceNumber_IsNil() bool {
    return s.SequenceNumber == nil || s.naptestitem2type.SequenceNumber == nil
    }
  func (s *NAPTestItem2Type) TestItemLocalId() *LocalIdType {
    if s.naptestitem2type.TestItemLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestitem2type.TestItemLocalId = ((*LocalIdType)(v))
      }
      }
      return s.naptestitem2type.TestItemLocalId
    }
  func (s *NAPTestItem2Type) TestItemLocalId_IsNil() bool {
    return s.TestItemLocalId == nil || s.naptestitem2type.TestItemLocalId == nil
    }
  func (s *NAPTestItem2Type) TestItemRefId() *String {
    if s.naptestitem2type.TestItemRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestitem2type.TestItemRefId = ((*String)(v))
      }
      }
      return s.naptestitem2type.TestItemRefId
    }
  func (s *NAPTestItem2Type) TestItemRefId_IsNil() bool {
    return s.TestItemRefId == nil || s.naptestitem2type.TestItemRefId == nil
    }

func (n *FineInfoType) Unset(key string) *FineInfoType {
        switch key {
  case "Assessed":
   n.fineinfotype.Assessed = nil
  case "Description":
   n.fineinfotype.Description = nil
  case "Type":
   n.fineinfotype.Type = nil
  case "Reference":
   n.fineinfotype.Reference = nil
  case "Amount":
   n.fineinfotype.Amount = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FineInfoType")
        }
        return n
}

func (n *FineInfoType) SetProperty(key string, value interface{}) *FineInfoType {
        if n == nil {
                n, _ = FineInfoTypePointer(FineInfoType{})
        }
        switch key {
    case "Assessed":
    
    if v, ok:= StringPointer(value); ok {
      n.fineinfotype.Assessed = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.fineinfotype.Description = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.fineinfotype.Type = ((*String)(v))
      }
    case "Reference":
    
    if v, ok:= StringPointer(value); ok {
      n.fineinfotype.Reference = ((*String)(v))
      }
    case "Amount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.fineinfotype.Amount = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FineInfoType")
        }
        return n
}

  func (s *FineInfoType) Assessed() *String {
    if s.fineinfotype.Assessed == nil {
    if v, ok:= StringPointer(""); ok {
      s.fineinfotype.Assessed = ((*String)(v))
      }
      }
      return s.fineinfotype.Assessed
    }
  func (s *FineInfoType) Assessed_IsNil() bool {
    return s.Assessed == nil || s.fineinfotype.Assessed == nil
    }
  func (s *FineInfoType) Description() *String {
    if s.fineinfotype.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.fineinfotype.Description = ((*String)(v))
      }
      }
      return s.fineinfotype.Description
    }
  func (s *FineInfoType) Description_IsNil() bool {
    return s.Description == nil || s.fineinfotype.Description == nil
    }
  func (s *FineInfoType) Type() *String {
    if s.fineinfotype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.fineinfotype.Type = ((*String)(v))
      }
      }
      return s.fineinfotype.Type
    }
  func (s *FineInfoType) Type_IsNil() bool {
    return s.Type == nil || s.fineinfotype.Type == nil
    }
  func (s *FineInfoType) Reference() *String {
    if s.fineinfotype.Reference == nil {
    if v, ok:= StringPointer(""); ok {
      s.fineinfotype.Reference = ((*String)(v))
      }
      }
      return s.fineinfotype.Reference
    }
  func (s *FineInfoType) Reference_IsNil() bool {
    return s.Reference == nil || s.fineinfotype.Reference == nil
    }
  func (s *FineInfoType) Amount() *MonetaryAmountType {
    if s.fineinfotype.Amount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.fineinfotype.Amount = v
      }
      }
      return s.fineinfotype.Amount
    }
  func (s *FineInfoType) Amount_IsNil() bool {
    return s.Amount == nil || s.fineinfotype.Amount == nil
    }

func (n *AwardContainerType) Unset(key string) *AwardContainerType {
        switch key {
  case "AwardType":
   n.awardcontainertype.AwardType = nil
  case "AwardDate":
   n.awardcontainertype.AwardDate = nil
  case "AwardNotes":
   n.awardcontainertype.AwardNotes = nil
  case "Status":
   n.awardcontainertype.Status = nil
  case "AwardDescription":
   n.awardcontainertype.AwardDescription = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AwardContainerType")
        }
        return n
}

func (n *AwardContainerType) SetProperty(key string, value interface{}) *AwardContainerType {
        if n == nil {
                n, _ = AwardContainerTypePointer(AwardContainerType{})
        }
        switch key {
    case "AwardType":
    
    if v, ok:= StringPointer(value); ok {
      n.awardcontainertype.AwardType = ((*String)(v))
      }
    case "AwardDate":
    
    if v, ok:= StringPointer(value); ok {
      n.awardcontainertype.AwardDate = ((*String)(v))
      }
    case "AwardNotes":
    
    if v, ok:= StringPointer(value); ok {
      n.awardcontainertype.AwardNotes = ((*String)(v))
      }
    case "Status":
        if !CodesetContains(AUCodeSetsWellbeingStatusType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingStatusType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.awardcontainertype.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
    case "AwardDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.awardcontainertype.AwardDescription = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AwardContainerType")
        }
        return n
}

  func (s *AwardContainerType) AwardType() *String {
    if s.awardcontainertype.AwardType == nil {
    if v, ok:= StringPointer(""); ok {
      s.awardcontainertype.AwardType = ((*String)(v))
      }
      }
      return s.awardcontainertype.AwardType
    }
  func (s *AwardContainerType) AwardType_IsNil() bool {
    return s.AwardType == nil || s.awardcontainertype.AwardType == nil
    }
  func (s *AwardContainerType) AwardDate() *String {
    if s.awardcontainertype.AwardDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.awardcontainertype.AwardDate = ((*String)(v))
      }
      }
      return s.awardcontainertype.AwardDate
    }
  func (s *AwardContainerType) AwardDate_IsNil() bool {
    return s.AwardDate == nil || s.awardcontainertype.AwardDate == nil
    }
  func (s *AwardContainerType) AwardNotes() *String {
    if s.awardcontainertype.AwardNotes == nil {
    if v, ok:= StringPointer(""); ok {
      s.awardcontainertype.AwardNotes = ((*String)(v))
      }
      }
      return s.awardcontainertype.AwardNotes
    }
  func (s *AwardContainerType) AwardNotes_IsNil() bool {
    return s.AwardNotes == nil || s.awardcontainertype.AwardNotes == nil
    }
  func (s *AwardContainerType) Status() *AUCodeSetsWellbeingStatusType {
    if s.awardcontainertype.Status == nil {
    if v, ok:= StringPointer(""); ok {
      s.awardcontainertype.Status = ((*AUCodeSetsWellbeingStatusType)(v))
      }
      }
      return s.awardcontainertype.Status
    }
  func (s *AwardContainerType) Status_IsNil() bool {
    return s.Status == nil || s.awardcontainertype.Status == nil
    }
  func (s *AwardContainerType) AwardDescription() *String {
    if s.awardcontainertype.AwardDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.awardcontainertype.AwardDescription = ((*String)(v))
      }
      }
      return s.awardcontainertype.AwardDescription
    }
  func (s *AwardContainerType) AwardDescription_IsNil() bool {
    return s.AwardDescription == nil || s.awardcontainertype.AwardDescription == nil
    }

func (n *SubstituteItemType) Unset(key string) *SubstituteItemType {
        switch key {
  case "SubstituteItemLocalId":
   n.substituteitemtype.SubstituteItemLocalId = nil
  case "SubstituteItemRefId":
   n.substituteitemtype.SubstituteItemRefId = nil
  case "PNPCodeList":
   n.substituteitemtype.PNPCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SubstituteItemType")
        }
        return n
}

func (n *SubstituteItemType) SetProperty(key string, value interface{}) *SubstituteItemType {
        if n == nil {
                n, _ = SubstituteItemTypePointer(SubstituteItemType{})
        }
        switch key {
    case "SubstituteItemLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.substituteitemtype.SubstituteItemLocalId = ((*LocalIdType)(v))
      }
    case "SubstituteItemRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.substituteitemtype.SubstituteItemRefId = ((*String)(v))
      }
    case "PNPCodeList":
    if v, ok:= PNPCodeListTypePointer(value); ok {
      n.substituteitemtype.PNPCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SubstituteItemType")
        }
        return n
}

  func (s *SubstituteItemType) SubstituteItemLocalId() *LocalIdType {
    if s.substituteitemtype.SubstituteItemLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.substituteitemtype.SubstituteItemLocalId = ((*LocalIdType)(v))
      }
      }
      return s.substituteitemtype.SubstituteItemLocalId
    }
  func (s *SubstituteItemType) SubstituteItemLocalId_IsNil() bool {
    return s.SubstituteItemLocalId == nil || s.substituteitemtype.SubstituteItemLocalId == nil
    }
  func (s *SubstituteItemType) SubstituteItemRefId() *String {
    if s.substituteitemtype.SubstituteItemRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.substituteitemtype.SubstituteItemRefId = ((*String)(v))
      }
      }
      return s.substituteitemtype.SubstituteItemRefId
    }
  func (s *SubstituteItemType) SubstituteItemRefId_IsNil() bool {
    return s.SubstituteItemRefId == nil || s.substituteitemtype.SubstituteItemRefId == nil
    }
  func (s *SubstituteItemType) PNPCodeList() *PNPCodeListType {
    if s.substituteitemtype.PNPCodeList == nil {
     if v, ok:= PNPCodeListTypePointer(PNPCodeListType{}); ok {
      s.substituteitemtype.PNPCodeList = v
      }
      }
      return s.substituteitemtype.PNPCodeList
    }
  func (s *SubstituteItemType) PNPCodeList_IsNil() bool {
    return s.PNPCodeList == nil || s.substituteitemtype.PNPCodeList == nil
    }

func (n *StudentSchoolEnrollment_Advisor) Unset(key string) *StudentSchoolEnrollment_Advisor {
        switch key {
  case "Value":
   n.studentschoolenrollment_advisor.Value = nil
  case "SIF_RefObject":
   n.studentschoolenrollment_advisor.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Advisor")
        }
        return n
}

func (n *StudentSchoolEnrollment_Advisor) SetProperty(key string, value interface{}) *StudentSchoolEnrollment_Advisor {
        if n == nil {
                n, _ = StudentSchoolEnrollment_AdvisorPointer(StudentSchoolEnrollment_Advisor{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment_advisor.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.studentschoolenrollment_advisor.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentSchoolEnrollment_Advisor")
        }
        return n
}

  func (s *StudentSchoolEnrollment_Advisor) Value() *String {
    if s.studentschoolenrollment_advisor.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment_advisor.Value = ((*String)(v))
      }
      }
      return s.studentschoolenrollment_advisor.Value
    }
  func (s *StudentSchoolEnrollment_Advisor) Value_IsNil() bool {
    return s.Value == nil || s.studentschoolenrollment_advisor.Value == nil
    }
  func (s *StudentSchoolEnrollment_Advisor) SIF_RefObject() *String {
    if s.studentschoolenrollment_advisor.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentschoolenrollment_advisor.SIF_RefObject = ((*String)(v))
      }
      }
      return s.studentschoolenrollment_advisor.SIF_RefObject
    }
  func (s *StudentSchoolEnrollment_Advisor) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.studentschoolenrollment_advisor.SIF_RefObject == nil
    }

func (n *AggregateStatisticFact) Unset(key string) *AggregateStatisticFact {
        switch key {
  case "Characteristics":
   n.aggregatestatisticfact.Characteristics = nil
  case "AggregateStatisticInfoRefId":
   n.aggregatestatisticfact.AggregateStatisticInfoRefId = nil
  case "SIF_Metadata":
   n.aggregatestatisticfact.SIF_Metadata = nil
  case "LocalCodeList":
   n.aggregatestatisticfact.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.aggregatestatisticfact.SIF_ExtendedElements = nil
  case "Value":
   n.aggregatestatisticfact.Value = nil
  case "Excluded":
   n.aggregatestatisticfact.Excluded = nil
  case "RefId":
   n.aggregatestatisticfact.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateStatisticFact")
        }
        return n
}

func (n *AggregateStatisticFact) SetProperty(key string, value interface{}) *AggregateStatisticFact {
        if n == nil {
                n, _ = AggregateStatisticFactPointer(AggregateStatisticFact{})
        }
        switch key {
    case "Characteristics":
    if v, ok:= CharacteristicsTypePointer(value); ok {
      n.aggregatestatisticfact.Characteristics = v
      }
    case "AggregateStatisticInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatestatisticfact.AggregateStatisticInfoRefId = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.aggregatestatisticfact.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.aggregatestatisticfact.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.aggregatestatisticfact.SIF_ExtendedElements = v
      }
    case "Value":
    
    if v, ok:= FloatPointer(value); ok {
      n.aggregatestatisticfact.Value = ((*Float)(v))
      }
    case "Excluded":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatestatisticfact.Excluded = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.aggregatestatisticfact.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AggregateStatisticFact")
        }
        return n
}

  func (s *AggregateStatisticFact) Characteristics() *CharacteristicsType {
    if s.aggregatestatisticfact.Characteristics == nil {
     if v, ok:= CharacteristicsTypePointer(CharacteristicsType{}); ok {
      s.aggregatestatisticfact.Characteristics = v
      }
      }
      return s.aggregatestatisticfact.Characteristics
    }
  func (s *AggregateStatisticFact) Characteristics_IsNil() bool {
    return s.Characteristics == nil || s.aggregatestatisticfact.Characteristics == nil
    }
  func (s *AggregateStatisticFact) AggregateStatisticInfoRefId() *String {
    if s.aggregatestatisticfact.AggregateStatisticInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatestatisticfact.AggregateStatisticInfoRefId = ((*String)(v))
      }
      }
      return s.aggregatestatisticfact.AggregateStatisticInfoRefId
    }
  func (s *AggregateStatisticFact) AggregateStatisticInfoRefId_IsNil() bool {
    return s.AggregateStatisticInfoRefId == nil || s.aggregatestatisticfact.AggregateStatisticInfoRefId == nil
    }
  func (s *AggregateStatisticFact) SIF_Metadata() *SIF_MetadataType {
    if s.aggregatestatisticfact.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.aggregatestatisticfact.SIF_Metadata = v
      }
      }
      return s.aggregatestatisticfact.SIF_Metadata
    }
  func (s *AggregateStatisticFact) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.aggregatestatisticfact.SIF_Metadata == nil
    }
  func (s *AggregateStatisticFact) LocalCodeList() *LocalCodeListType {
    if s.aggregatestatisticfact.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.aggregatestatisticfact.LocalCodeList = v
      }
      }
      return s.aggregatestatisticfact.LocalCodeList
    }
  func (s *AggregateStatisticFact) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.aggregatestatisticfact.LocalCodeList == nil
    }
  func (s *AggregateStatisticFact) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.aggregatestatisticfact.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.aggregatestatisticfact.SIF_ExtendedElements = v
      }
      }
      return s.aggregatestatisticfact.SIF_ExtendedElements
    }
  func (s *AggregateStatisticFact) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.aggregatestatisticfact.SIF_ExtendedElements == nil
    }
  func (s *AggregateStatisticFact) Value() *Float {
    if s.aggregatestatisticfact.Value == nil {
    if v, ok:= FloatPointer(0); ok {
      s.aggregatestatisticfact.Value = ((*Float)(v))
      }
      }
      return s.aggregatestatisticfact.Value
    }
  func (s *AggregateStatisticFact) Value_IsNil() bool {
    return s.Value == nil || s.aggregatestatisticfact.Value == nil
    }
  func (s *AggregateStatisticFact) Excluded() *String {
    if s.aggregatestatisticfact.Excluded == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatestatisticfact.Excluded = ((*String)(v))
      }
      }
      return s.aggregatestatisticfact.Excluded
    }
  func (s *AggregateStatisticFact) Excluded_IsNil() bool {
    return s.Excluded == nil || s.aggregatestatisticfact.Excluded == nil
    }
  func (s *AggregateStatisticFact) RefId() *RefIdType {
    if s.aggregatestatisticfact.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.aggregatestatisticfact.RefId = ((*RefIdType)(v))
      }
      }
      return s.aggregatestatisticfact.RefId
    }
  func (s *AggregateStatisticFact) RefId_IsNil() bool {
    return s.RefId == nil || s.aggregatestatisticfact.RefId == nil
    }

func (n *StudentContactPersonal) Unset(key string) *StudentContactPersonal {
        switch key {
  case "SIF_ExtendedElements":
   n.studentcontactpersonal.SIF_ExtendedElements = nil
  case "EmploymentType":
   n.studentcontactpersonal.EmploymentType = nil
  case "SIF_Metadata":
   n.studentcontactpersonal.SIF_Metadata = nil
  case "LocalCodeList":
   n.studentcontactpersonal.LocalCodeList = nil
  case "SchoolEducationalLevel":
   n.studentcontactpersonal.SchoolEducationalLevel = nil
  case "PersonInfo":
   n.studentcontactpersonal.PersonInfo = nil
  case "RefId":
   n.studentcontactpersonal.RefId = nil
  case "NonSchoolEducation":
   n.studentcontactpersonal.NonSchoolEducation = nil
  case "OtherIdList":
   n.studentcontactpersonal.OtherIdList = nil
  case "LocalId":
   n.studentcontactpersonal.LocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentContactPersonal")
        }
        return n
}

func (n *StudentContactPersonal) SetProperty(key string, value interface{}) *StudentContactPersonal {
        if n == nil {
                n, _ = StudentContactPersonalPointer(StudentContactPersonal{})
        }
        switch key {
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentcontactpersonal.SIF_ExtendedElements = v
      }
    case "EmploymentType":
        if !CodesetContains(AUCodeSetsEmploymentTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsEmploymentTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentcontactpersonal.EmploymentType = ((*AUCodeSetsEmploymentTypeType)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentcontactpersonal.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentcontactpersonal.LocalCodeList = v
      }
    case "SchoolEducationalLevel":
        if !CodesetContains(AUCodeSetsSchoolEducationLevelTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSchoolEducationLevelTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentcontactpersonal.SchoolEducationalLevel = ((*EducationalLevelType)(v))
      }
    case "PersonInfo":
    if v, ok:= PersonInfoTypePointer(value); ok {
      n.studentcontactpersonal.PersonInfo = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentcontactpersonal.RefId = ((*RefIdType)(v))
      }
    case "NonSchoolEducation":
        if !CodesetContains(AUCodeSetsNonSchoolEducationType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNonSchoolEducationType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentcontactpersonal.NonSchoolEducation = ((*AUCodeSetsNonSchoolEducationType)(v))
      }
    case "OtherIdList":
    if v, ok:= OtherIdListTypePointer(value); ok {
      n.studentcontactpersonal.OtherIdList = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentcontactpersonal.LocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentContactPersonal")
        }
        return n
}

  func (s *StudentContactPersonal) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentcontactpersonal.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentcontactpersonal.SIF_ExtendedElements = v
      }
      }
      return s.studentcontactpersonal.SIF_ExtendedElements
    }
  func (s *StudentContactPersonal) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentcontactpersonal.SIF_ExtendedElements == nil
    }
  func (s *StudentContactPersonal) EmploymentType() *AUCodeSetsEmploymentTypeType {
    if s.studentcontactpersonal.EmploymentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentcontactpersonal.EmploymentType = ((*AUCodeSetsEmploymentTypeType)(v))
      }
      }
      return s.studentcontactpersonal.EmploymentType
    }
  func (s *StudentContactPersonal) EmploymentType_IsNil() bool {
    return s.EmploymentType == nil || s.studentcontactpersonal.EmploymentType == nil
    }
  func (s *StudentContactPersonal) SIF_Metadata() *SIF_MetadataType {
    if s.studentcontactpersonal.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentcontactpersonal.SIF_Metadata = v
      }
      }
      return s.studentcontactpersonal.SIF_Metadata
    }
  func (s *StudentContactPersonal) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentcontactpersonal.SIF_Metadata == nil
    }
  func (s *StudentContactPersonal) LocalCodeList() *LocalCodeListType {
    if s.studentcontactpersonal.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentcontactpersonal.LocalCodeList = v
      }
      }
      return s.studentcontactpersonal.LocalCodeList
    }
  func (s *StudentContactPersonal) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentcontactpersonal.LocalCodeList == nil
    }
  func (s *StudentContactPersonal) SchoolEducationalLevel() *EducationalLevelType {
    if s.studentcontactpersonal.SchoolEducationalLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentcontactpersonal.SchoolEducationalLevel = ((*EducationalLevelType)(v))
      }
      }
      return s.studentcontactpersonal.SchoolEducationalLevel
    }
  func (s *StudentContactPersonal) SchoolEducationalLevel_IsNil() bool {
    return s.SchoolEducationalLevel == nil || s.studentcontactpersonal.SchoolEducationalLevel == nil
    }
  func (s *StudentContactPersonal) PersonInfo() *PersonInfoType {
    if s.studentcontactpersonal.PersonInfo == nil {
     if v, ok:= PersonInfoTypePointer(PersonInfoType{}); ok {
      s.studentcontactpersonal.PersonInfo = v
      }
      }
      return s.studentcontactpersonal.PersonInfo
    }
  func (s *StudentContactPersonal) PersonInfo_IsNil() bool {
    return s.PersonInfo == nil || s.studentcontactpersonal.PersonInfo == nil
    }
  func (s *StudentContactPersonal) RefId() *RefIdType {
    if s.studentcontactpersonal.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentcontactpersonal.RefId = ((*RefIdType)(v))
      }
      }
      return s.studentcontactpersonal.RefId
    }
  func (s *StudentContactPersonal) RefId_IsNil() bool {
    return s.RefId == nil || s.studentcontactpersonal.RefId == nil
    }
  func (s *StudentContactPersonal) NonSchoolEducation() *AUCodeSetsNonSchoolEducationType {
    if s.studentcontactpersonal.NonSchoolEducation == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentcontactpersonal.NonSchoolEducation = ((*AUCodeSetsNonSchoolEducationType)(v))
      }
      }
      return s.studentcontactpersonal.NonSchoolEducation
    }
  func (s *StudentContactPersonal) NonSchoolEducation_IsNil() bool {
    return s.NonSchoolEducation == nil || s.studentcontactpersonal.NonSchoolEducation == nil
    }
  func (s *StudentContactPersonal) OtherIdList() *OtherIdListType {
    if s.studentcontactpersonal.OtherIdList == nil {
     if v, ok:= OtherIdListTypePointer(OtherIdListType{}); ok {
      s.studentcontactpersonal.OtherIdList = v
      }
      }
      return s.studentcontactpersonal.OtherIdList
    }
  func (s *StudentContactPersonal) OtherIdList_IsNil() bool {
    return s.OtherIdList == nil || s.studentcontactpersonal.OtherIdList == nil
    }
  func (s *StudentContactPersonal) LocalId() *LocalIdType {
    if s.studentcontactpersonal.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentcontactpersonal.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.studentcontactpersonal.LocalId
    }
  func (s *StudentContactPersonal) LocalId_IsNil() bool {
    return s.LocalId == nil || s.studentcontactpersonal.LocalId == nil
    }

func (n *MarkValueInfo) Unset(key string) *MarkValueInfo {
        switch key {
  case "NarrativeMaximumSize":
   n.markvalueinfo.NarrativeMaximumSize = nil
  case "PercentageMinimum":
   n.markvalueinfo.PercentageMinimum = nil
  case "NumericHigh":
   n.markvalueinfo.NumericHigh = nil
  case "NumericScale":
   n.markvalueinfo.NumericScale = nil
  case "NumericPrecision":
   n.markvalueinfo.NumericPrecision = nil
  case "PercentagePassingGrade":
   n.markvalueinfo.PercentagePassingGrade = nil
  case "SIF_Metadata":
   n.markvalueinfo.SIF_Metadata = nil
  case "PercentageMaximum":
   n.markvalueinfo.PercentageMaximum = nil
  case "RefId":
   n.markvalueinfo.RefId = nil
  case "NumericPassingGrade":
   n.markvalueinfo.NumericPassingGrade = nil
  case "ValidLetterMarkList":
   n.markvalueinfo.ValidLetterMarkList = nil
  case "SchoolInfoRefId":
   n.markvalueinfo.SchoolInfoRefId = nil
  case "Narrative":
   n.markvalueinfo.Narrative = nil
  case "Name":
   n.markvalueinfo.Name = nil
  case "LocalCodeList":
   n.markvalueinfo.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.markvalueinfo.SIF_ExtendedElements = nil
  case "YearLevels":
   n.markvalueinfo.YearLevels = nil
  case "NumericLow":
   n.markvalueinfo.NumericLow = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MarkValueInfo")
        }
        return n
}

func (n *MarkValueInfo) SetProperty(key string, value interface{}) *MarkValueInfo {
        if n == nil {
                n, _ = MarkValueInfoPointer(MarkValueInfo{})
        }
        switch key {
    case "NarrativeMaximumSize":
    
    if v, ok:= IntPointer(value); ok {
      n.markvalueinfo.NarrativeMaximumSize = ((*Int)(v))
      }
    case "PercentageMinimum":
    
    if v, ok:= FloatPointer(value); ok {
      n.markvalueinfo.PercentageMinimum = ((*Float)(v))
      }
    case "NumericHigh":
    
    if v, ok:= FloatPointer(value); ok {
      n.markvalueinfo.NumericHigh = ((*Float)(v))
      }
    case "NumericScale":
    
    if v, ok:= IntPointer(value); ok {
      n.markvalueinfo.NumericScale = ((*Int)(v))
      }
    case "NumericPrecision":
    
    if v, ok:= IntPointer(value); ok {
      n.markvalueinfo.NumericPrecision = ((*Int)(v))
      }
    case "PercentagePassingGrade":
    
    if v, ok:= FloatPointer(value); ok {
      n.markvalueinfo.PercentagePassingGrade = ((*Float)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.markvalueinfo.SIF_Metadata = v
      }
    case "PercentageMaximum":
    
    if v, ok:= FloatPointer(value); ok {
      n.markvalueinfo.PercentageMaximum = ((*Float)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.markvalueinfo.RefId = ((*RefIdType)(v))
      }
    case "NumericPassingGrade":
    
    if v, ok:= FloatPointer(value); ok {
      n.markvalueinfo.NumericPassingGrade = ((*Float)(v))
      }
    case "ValidLetterMarkList":
    if v, ok:= ValidLetterMarkListTypePointer(value); ok {
      n.markvalueinfo.ValidLetterMarkList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.markvalueinfo.SchoolInfoRefId = ((*String)(v))
      }
    case "Narrative":
    
    if v, ok:= StringPointer(value); ok {
      n.markvalueinfo.Narrative = ((*String)(v))
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.markvalueinfo.Name = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.markvalueinfo.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.markvalueinfo.SIF_ExtendedElements = v
      }
    case "YearLevels":
    if v, ok:= YearLevelsTypePointer(value); ok {
      n.markvalueinfo.YearLevels = v
      }
    case "NumericLow":
    
    if v, ok:= FloatPointer(value); ok {
      n.markvalueinfo.NumericLow = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "MarkValueInfo")
        }
        return n
}

  func (s *MarkValueInfo) NarrativeMaximumSize() *Int {
    if s.markvalueinfo.NarrativeMaximumSize == nil {
    if v, ok:= IntPointer(0); ok {
      s.markvalueinfo.NarrativeMaximumSize = ((*Int)(v))
      }
      }
      return s.markvalueinfo.NarrativeMaximumSize
    }
  func (s *MarkValueInfo) NarrativeMaximumSize_IsNil() bool {
    return s.NarrativeMaximumSize == nil || s.markvalueinfo.NarrativeMaximumSize == nil
    }
  func (s *MarkValueInfo) PercentageMinimum() *Float {
    if s.markvalueinfo.PercentageMinimum == nil {
    if v, ok:= FloatPointer(0); ok {
      s.markvalueinfo.PercentageMinimum = ((*Float)(v))
      }
      }
      return s.markvalueinfo.PercentageMinimum
    }
  func (s *MarkValueInfo) PercentageMinimum_IsNil() bool {
    return s.PercentageMinimum == nil || s.markvalueinfo.PercentageMinimum == nil
    }
  func (s *MarkValueInfo) NumericHigh() *Float {
    if s.markvalueinfo.NumericHigh == nil {
    if v, ok:= FloatPointer(0); ok {
      s.markvalueinfo.NumericHigh = ((*Float)(v))
      }
      }
      return s.markvalueinfo.NumericHigh
    }
  func (s *MarkValueInfo) NumericHigh_IsNil() bool {
    return s.NumericHigh == nil || s.markvalueinfo.NumericHigh == nil
    }
  func (s *MarkValueInfo) NumericScale() *Int {
    if s.markvalueinfo.NumericScale == nil {
    if v, ok:= IntPointer(0); ok {
      s.markvalueinfo.NumericScale = ((*Int)(v))
      }
      }
      return s.markvalueinfo.NumericScale
    }
  func (s *MarkValueInfo) NumericScale_IsNil() bool {
    return s.NumericScale == nil || s.markvalueinfo.NumericScale == nil
    }
  func (s *MarkValueInfo) NumericPrecision() *Int {
    if s.markvalueinfo.NumericPrecision == nil {
    if v, ok:= IntPointer(0); ok {
      s.markvalueinfo.NumericPrecision = ((*Int)(v))
      }
      }
      return s.markvalueinfo.NumericPrecision
    }
  func (s *MarkValueInfo) NumericPrecision_IsNil() bool {
    return s.NumericPrecision == nil || s.markvalueinfo.NumericPrecision == nil
    }
  func (s *MarkValueInfo) PercentagePassingGrade() *Float {
    if s.markvalueinfo.PercentagePassingGrade == nil {
    if v, ok:= FloatPointer(0); ok {
      s.markvalueinfo.PercentagePassingGrade = ((*Float)(v))
      }
      }
      return s.markvalueinfo.PercentagePassingGrade
    }
  func (s *MarkValueInfo) PercentagePassingGrade_IsNil() bool {
    return s.PercentagePassingGrade == nil || s.markvalueinfo.PercentagePassingGrade == nil
    }
  func (s *MarkValueInfo) SIF_Metadata() *SIF_MetadataType {
    if s.markvalueinfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.markvalueinfo.SIF_Metadata = v
      }
      }
      return s.markvalueinfo.SIF_Metadata
    }
  func (s *MarkValueInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.markvalueinfo.SIF_Metadata == nil
    }
  func (s *MarkValueInfo) PercentageMaximum() *Float {
    if s.markvalueinfo.PercentageMaximum == nil {
    if v, ok:= FloatPointer(0); ok {
      s.markvalueinfo.PercentageMaximum = ((*Float)(v))
      }
      }
      return s.markvalueinfo.PercentageMaximum
    }
  func (s *MarkValueInfo) PercentageMaximum_IsNil() bool {
    return s.PercentageMaximum == nil || s.markvalueinfo.PercentageMaximum == nil
    }
  func (s *MarkValueInfo) RefId() *RefIdType {
    if s.markvalueinfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.markvalueinfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.markvalueinfo.RefId
    }
  func (s *MarkValueInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.markvalueinfo.RefId == nil
    }
  func (s *MarkValueInfo) NumericPassingGrade() *Float {
    if s.markvalueinfo.NumericPassingGrade == nil {
    if v, ok:= FloatPointer(0); ok {
      s.markvalueinfo.NumericPassingGrade = ((*Float)(v))
      }
      }
      return s.markvalueinfo.NumericPassingGrade
    }
  func (s *MarkValueInfo) NumericPassingGrade_IsNil() bool {
    return s.NumericPassingGrade == nil || s.markvalueinfo.NumericPassingGrade == nil
    }
  func (s *MarkValueInfo) ValidLetterMarkList() *ValidLetterMarkListType {
    if s.markvalueinfo.ValidLetterMarkList == nil {
     if v, ok:= ValidLetterMarkListTypePointer(ValidLetterMarkListType{}); ok {
      s.markvalueinfo.ValidLetterMarkList = v
      }
      }
      return s.markvalueinfo.ValidLetterMarkList
    }
  func (s *MarkValueInfo) ValidLetterMarkList_IsNil() bool {
    return s.ValidLetterMarkList == nil || s.markvalueinfo.ValidLetterMarkList == nil
    }
  func (s *MarkValueInfo) SchoolInfoRefId() *String {
    if s.markvalueinfo.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.markvalueinfo.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.markvalueinfo.SchoolInfoRefId
    }
  func (s *MarkValueInfo) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.markvalueinfo.SchoolInfoRefId == nil
    }
  func (s *MarkValueInfo) Narrative() *String {
    if s.markvalueinfo.Narrative == nil {
    if v, ok:= StringPointer(""); ok {
      s.markvalueinfo.Narrative = ((*String)(v))
      }
      }
      return s.markvalueinfo.Narrative
    }
  func (s *MarkValueInfo) Narrative_IsNil() bool {
    return s.Narrative == nil || s.markvalueinfo.Narrative == nil
    }
  func (s *MarkValueInfo) Name() *String {
    if s.markvalueinfo.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.markvalueinfo.Name = ((*String)(v))
      }
      }
      return s.markvalueinfo.Name
    }
  func (s *MarkValueInfo) Name_IsNil() bool {
    return s.Name == nil || s.markvalueinfo.Name == nil
    }
  func (s *MarkValueInfo) LocalCodeList() *LocalCodeListType {
    if s.markvalueinfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.markvalueinfo.LocalCodeList = v
      }
      }
      return s.markvalueinfo.LocalCodeList
    }
  func (s *MarkValueInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.markvalueinfo.LocalCodeList == nil
    }
  func (s *MarkValueInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.markvalueinfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.markvalueinfo.SIF_ExtendedElements = v
      }
      }
      return s.markvalueinfo.SIF_ExtendedElements
    }
  func (s *MarkValueInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.markvalueinfo.SIF_ExtendedElements == nil
    }
  func (s *MarkValueInfo) YearLevels() *YearLevelsType {
    if s.markvalueinfo.YearLevels == nil {
     if v, ok:= YearLevelsTypePointer(YearLevelsType{}); ok {
      s.markvalueinfo.YearLevels = v
      }
      }
      return s.markvalueinfo.YearLevels
    }
  func (s *MarkValueInfo) YearLevels_IsNil() bool {
    return s.YearLevels == nil || s.markvalueinfo.YearLevels == nil
    }
  func (s *MarkValueInfo) NumericLow() *Float {
    if s.markvalueinfo.NumericLow == nil {
    if v, ok:= FloatPointer(0); ok {
      s.markvalueinfo.NumericLow = ((*Float)(v))
      }
      }
      return s.markvalueinfo.NumericLow
    }
  func (s *MarkValueInfo) NumericLow_IsNil() bool {
    return s.NumericLow == nil || s.markvalueinfo.NumericLow == nil
    }

func (n *YearLevelEnrollmentType) Unset(key string) *YearLevelEnrollmentType {
        switch key {
  case "Year":
   n.yearlevelenrollmenttype.Year = nil
  case "Enrollment":
   n.yearlevelenrollmenttype.Enrollment = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "YearLevelEnrollmentType")
        }
        return n
}

func (n *YearLevelEnrollmentType) SetProperty(key string, value interface{}) *YearLevelEnrollmentType {
        if n == nil {
                n, _ = YearLevelEnrollmentTypePointer(YearLevelEnrollmentType{})
        }
        switch key {
    case "Year":
        if !CodesetContains(AUCodeSetsYearLevelCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYearLevelCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.yearlevelenrollmenttype.Year = ((*AUCodeSetsYearLevelCodeType)(v))
      }
    case "Enrollment":
    
    if v, ok:= StringPointer(value); ok {
      n.yearlevelenrollmenttype.Enrollment = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "YearLevelEnrollmentType")
        }
        return n
}

  func (s *YearLevelEnrollmentType) Year() *AUCodeSetsYearLevelCodeType {
    if s.yearlevelenrollmenttype.Year == nil {
    if v, ok:= StringPointer(""); ok {
      s.yearlevelenrollmenttype.Year = ((*AUCodeSetsYearLevelCodeType)(v))
      }
      }
      return s.yearlevelenrollmenttype.Year
    }
  func (s *YearLevelEnrollmentType) Year_IsNil() bool {
    return s.Year == nil || s.yearlevelenrollmenttype.Year == nil
    }
  func (s *YearLevelEnrollmentType) Enrollment() *String {
    if s.yearlevelenrollmenttype.Enrollment == nil {
    if v, ok:= StringPointer(""); ok {
      s.yearlevelenrollmenttype.Enrollment = ((*String)(v))
      }
      }
      return s.yearlevelenrollmenttype.Enrollment
    }
  func (s *YearLevelEnrollmentType) Enrollment_IsNil() bool {
    return s.Enrollment == nil || s.yearlevelenrollmenttype.Enrollment == nil
    }

func (n *ContactInfoType) Unset(key string) *ContactInfoType {
        switch key {
  case "Role":
   n.contactinfotype.Role = nil
  case "EmailList":
   n.contactinfotype.EmailList = nil
  case "Address":
   n.contactinfotype.Address = nil
  case "Name":
   n.contactinfotype.Name = nil
  case "PositionTitle":
   n.contactinfotype.PositionTitle = nil
  case "RegistrationDetails":
   n.contactinfotype.RegistrationDetails = nil
  case "PhoneNumberList":
   n.contactinfotype.PhoneNumberList = nil
  case "Qualifications":
   n.contactinfotype.Qualifications = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ContactInfoType")
        }
        return n
}

func (n *ContactInfoType) SetProperty(key string, value interface{}) *ContactInfoType {
        if n == nil {
                n, _ = ContactInfoTypePointer(ContactInfoType{})
        }
        switch key {
    case "Role":
    
    if v, ok:= StringPointer(value); ok {
      n.contactinfotype.Role = ((*String)(v))
      }
    case "EmailList":
    if v, ok:= EmailListTypePointer(value); ok {
      n.contactinfotype.EmailList = v
      }
    case "Address":
    if v, ok:= AddressTypePointer(value); ok {
      n.contactinfotype.Address = v
      }
    case "Name":
    if v, ok:= NameTypePointer(value); ok {
      n.contactinfotype.Name = v
      }
    case "PositionTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.contactinfotype.PositionTitle = ((*String)(v))
      }
    case "RegistrationDetails":
    
    if v, ok:= StringPointer(value); ok {
      n.contactinfotype.RegistrationDetails = ((*String)(v))
      }
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.contactinfotype.PhoneNumberList = v
      }
    case "Qualifications":
    
    if v, ok:= StringPointer(value); ok {
      n.contactinfotype.Qualifications = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ContactInfoType")
        }
        return n
}

  func (s *ContactInfoType) Role() *String {
    if s.contactinfotype.Role == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactinfotype.Role = ((*String)(v))
      }
      }
      return s.contactinfotype.Role
    }
  func (s *ContactInfoType) Role_IsNil() bool {
    return s.Role == nil || s.contactinfotype.Role == nil
    }
  func (s *ContactInfoType) EmailList() *EmailListType {
    if s.contactinfotype.EmailList == nil {
     if v, ok:= EmailListTypePointer(EmailListType{}); ok {
      s.contactinfotype.EmailList = v
      }
      }
      return s.contactinfotype.EmailList
    }
  func (s *ContactInfoType) EmailList_IsNil() bool {
    return s.EmailList == nil || s.contactinfotype.EmailList == nil
    }
  func (s *ContactInfoType) Address() *AddressType {
    if s.contactinfotype.Address == nil {
     if v, ok:= AddressTypePointer(AddressType{}); ok {
      s.contactinfotype.Address = v
      }
      }
      return s.contactinfotype.Address
    }
  func (s *ContactInfoType) Address_IsNil() bool {
    return s.Address == nil || s.contactinfotype.Address == nil
    }
  func (s *ContactInfoType) Name() *NameType {
    if s.contactinfotype.Name == nil {
     if v, ok:= NameTypePointer(NameType{}); ok {
      s.contactinfotype.Name = v
      }
      }
      return s.contactinfotype.Name
    }
  func (s *ContactInfoType) Name_IsNil() bool {
    return s.Name == nil || s.contactinfotype.Name == nil
    }
  func (s *ContactInfoType) PositionTitle() *String {
    if s.contactinfotype.PositionTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactinfotype.PositionTitle = ((*String)(v))
      }
      }
      return s.contactinfotype.PositionTitle
    }
  func (s *ContactInfoType) PositionTitle_IsNil() bool {
    return s.PositionTitle == nil || s.contactinfotype.PositionTitle == nil
    }
  func (s *ContactInfoType) RegistrationDetails() *String {
    if s.contactinfotype.RegistrationDetails == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactinfotype.RegistrationDetails = ((*String)(v))
      }
      }
      return s.contactinfotype.RegistrationDetails
    }
  func (s *ContactInfoType) RegistrationDetails_IsNil() bool {
    return s.RegistrationDetails == nil || s.contactinfotype.RegistrationDetails == nil
    }
  func (s *ContactInfoType) PhoneNumberList() *PhoneNumberListType {
    if s.contactinfotype.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.contactinfotype.PhoneNumberList = v
      }
      }
      return s.contactinfotype.PhoneNumberList
    }
  func (s *ContactInfoType) PhoneNumberList_IsNil() bool {
    return s.PhoneNumberList == nil || s.contactinfotype.PhoneNumberList == nil
    }
  func (s *ContactInfoType) Qualifications() *String {
    if s.contactinfotype.Qualifications == nil {
    if v, ok:= StringPointer(""); ok {
      s.contactinfotype.Qualifications = ((*String)(v))
      }
      }
      return s.contactinfotype.Qualifications
    }
  func (s *ContactInfoType) Qualifications_IsNil() bool {
    return s.Qualifications == nil || s.contactinfotype.Qualifications == nil
    }

func (n *TermInfo) Unset(key string) *TermInfo {
        switch key {
  case "EndDate":
   n.terminfo.EndDate = nil
  case "MarkingTerm":
   n.terminfo.MarkingTerm = nil
  case "Track":
   n.terminfo.Track = nil
  case "Description":
   n.terminfo.Description = nil
  case "AttendanceTerm":
   n.terminfo.AttendanceTerm = nil
  case "SchoolInfoRefId":
   n.terminfo.SchoolInfoRefId = nil
  case "TermCode":
   n.terminfo.TermCode = nil
  case "SIF_ExtendedElements":
   n.terminfo.SIF_ExtendedElements = nil
  case "SchedulingTerm":
   n.terminfo.SchedulingTerm = nil
  case "SchoolYear":
   n.terminfo.SchoolYear = nil
  case "LocalCodeList":
   n.terminfo.LocalCodeList = nil
  case "RefId":
   n.terminfo.RefId = nil
  case "RelativeDuration":
   n.terminfo.RelativeDuration = nil
  case "TermSpan":
   n.terminfo.TermSpan = nil
  case "StartDate":
   n.terminfo.StartDate = nil
  case "SIF_Metadata":
   n.terminfo.SIF_Metadata = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TermInfo")
        }
        return n
}

func (n *TermInfo) SetProperty(key string, value interface{}) *TermInfo {
        if n == nil {
                n, _ = TermInfoPointer(TermInfo{})
        }
        switch key {
    case "EndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.terminfo.EndDate = ((*String)(v))
      }
    case "MarkingTerm":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.terminfo.MarkingTerm = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Track":
    
    if v, ok:= StringPointer(value); ok {
      n.terminfo.Track = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.terminfo.Description = ((*String)(v))
      }
    case "AttendanceTerm":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.terminfo.AttendanceTerm = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.terminfo.SchoolInfoRefId = ((*String)(v))
      }
    case "TermCode":
    
    if v, ok:= StringPointer(value); ok {
      n.terminfo.TermCode = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.terminfo.SIF_ExtendedElements = v
      }
    case "SchedulingTerm":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.terminfo.SchedulingTerm = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.terminfo.SchoolYear = ((*SchoolYearType)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.terminfo.LocalCodeList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.terminfo.RefId = ((*RefIdType)(v))
      }
    case "RelativeDuration":
    
    if v, ok:= FloatPointer(value); ok {
      n.terminfo.RelativeDuration = ((*Float)(v))
      }
    case "TermSpan":
        if !CodesetContains(AUCodeSetsSessionTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsSessionTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.terminfo.TermSpan = ((*AUCodeSetsSessionTypeType)(v))
      }
    case "StartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.terminfo.StartDate = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.terminfo.SIF_Metadata = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "TermInfo")
        }
        return n
}

  func (s *TermInfo) EndDate() *String {
    if s.terminfo.EndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.terminfo.EndDate = ((*String)(v))
      }
      }
      return s.terminfo.EndDate
    }
  func (s *TermInfo) EndDate_IsNil() bool {
    return s.EndDate == nil || s.terminfo.EndDate == nil
    }
  func (s *TermInfo) MarkingTerm() *AUCodeSetsYesOrNoCategoryType {
    if s.terminfo.MarkingTerm == nil {
    if v, ok:= StringPointer(""); ok {
      s.terminfo.MarkingTerm = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.terminfo.MarkingTerm
    }
  func (s *TermInfo) MarkingTerm_IsNil() bool {
    return s.MarkingTerm == nil || s.terminfo.MarkingTerm == nil
    }
  func (s *TermInfo) Track() *String {
    if s.terminfo.Track == nil {
    if v, ok:= StringPointer(""); ok {
      s.terminfo.Track = ((*String)(v))
      }
      }
      return s.terminfo.Track
    }
  func (s *TermInfo) Track_IsNil() bool {
    return s.Track == nil || s.terminfo.Track == nil
    }
  func (s *TermInfo) Description() *String {
    if s.terminfo.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.terminfo.Description = ((*String)(v))
      }
      }
      return s.terminfo.Description
    }
  func (s *TermInfo) Description_IsNil() bool {
    return s.Description == nil || s.terminfo.Description == nil
    }
  func (s *TermInfo) AttendanceTerm() *AUCodeSetsYesOrNoCategoryType {
    if s.terminfo.AttendanceTerm == nil {
    if v, ok:= StringPointer(""); ok {
      s.terminfo.AttendanceTerm = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.terminfo.AttendanceTerm
    }
  func (s *TermInfo) AttendanceTerm_IsNil() bool {
    return s.AttendanceTerm == nil || s.terminfo.AttendanceTerm == nil
    }
  func (s *TermInfo) SchoolInfoRefId() *String {
    if s.terminfo.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.terminfo.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.terminfo.SchoolInfoRefId
    }
  func (s *TermInfo) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.terminfo.SchoolInfoRefId == nil
    }
  func (s *TermInfo) TermCode() *String {
    if s.terminfo.TermCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.terminfo.TermCode = ((*String)(v))
      }
      }
      return s.terminfo.TermCode
    }
  func (s *TermInfo) TermCode_IsNil() bool {
    return s.TermCode == nil || s.terminfo.TermCode == nil
    }
  func (s *TermInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.terminfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.terminfo.SIF_ExtendedElements = v
      }
      }
      return s.terminfo.SIF_ExtendedElements
    }
  func (s *TermInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.terminfo.SIF_ExtendedElements == nil
    }
  func (s *TermInfo) SchedulingTerm() *AUCodeSetsYesOrNoCategoryType {
    if s.terminfo.SchedulingTerm == nil {
    if v, ok:= StringPointer(""); ok {
      s.terminfo.SchedulingTerm = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.terminfo.SchedulingTerm
    }
  func (s *TermInfo) SchedulingTerm_IsNil() bool {
    return s.SchedulingTerm == nil || s.terminfo.SchedulingTerm == nil
    }
  func (s *TermInfo) SchoolYear() *SchoolYearType {
    if s.terminfo.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.terminfo.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.terminfo.SchoolYear
    }
  func (s *TermInfo) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.terminfo.SchoolYear == nil
    }
  func (s *TermInfo) LocalCodeList() *LocalCodeListType {
    if s.terminfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.terminfo.LocalCodeList = v
      }
      }
      return s.terminfo.LocalCodeList
    }
  func (s *TermInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.terminfo.LocalCodeList == nil
    }
  func (s *TermInfo) RefId() *RefIdType {
    if s.terminfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.terminfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.terminfo.RefId
    }
  func (s *TermInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.terminfo.RefId == nil
    }
  func (s *TermInfo) RelativeDuration() *Float {
    if s.terminfo.RelativeDuration == nil {
    if v, ok:= FloatPointer(0); ok {
      s.terminfo.RelativeDuration = ((*Float)(v))
      }
      }
      return s.terminfo.RelativeDuration
    }
  func (s *TermInfo) RelativeDuration_IsNil() bool {
    return s.RelativeDuration == nil || s.terminfo.RelativeDuration == nil
    }
  func (s *TermInfo) TermSpan() *AUCodeSetsSessionTypeType {
    if s.terminfo.TermSpan == nil {
    if v, ok:= StringPointer(""); ok {
      s.terminfo.TermSpan = ((*AUCodeSetsSessionTypeType)(v))
      }
      }
      return s.terminfo.TermSpan
    }
  func (s *TermInfo) TermSpan_IsNil() bool {
    return s.TermSpan == nil || s.terminfo.TermSpan == nil
    }
  func (s *TermInfo) StartDate() *String {
    if s.terminfo.StartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.terminfo.StartDate = ((*String)(v))
      }
      }
      return s.terminfo.StartDate
    }
  func (s *TermInfo) StartDate_IsNil() bool {
    return s.StartDate == nil || s.terminfo.StartDate == nil
    }
  func (s *TermInfo) SIF_Metadata() *SIF_MetadataType {
    if s.terminfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.terminfo.SIF_Metadata = v
      }
      }
      return s.terminfo.SIF_Metadata
    }
  func (s *TermInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.terminfo.SIF_Metadata == nil
    }

func (n *ProgramFundingSourceType) Unset(key string) *ProgramFundingSourceType {
        switch key {
  case "Code":
   n.programfundingsourcetype.Code = nil
  case "OtherCodeList":
   n.programfundingsourcetype.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ProgramFundingSourceType")
        }
        return n
}

func (n *ProgramFundingSourceType) SetProperty(key string, value interface{}) *ProgramFundingSourceType {
        if n == nil {
                n, _ = ProgramFundingSourceTypePointer(ProgramFundingSourceType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsProgramFundingSourceCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsProgramFundingSourceCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.programfundingsourcetype.Code = ((*AUCodeSetsProgramFundingSourceCodeType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.programfundingsourcetype.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ProgramFundingSourceType")
        }
        return n
}

  func (s *ProgramFundingSourceType) Code() *AUCodeSetsProgramFundingSourceCodeType {
    if s.programfundingsourcetype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.programfundingsourcetype.Code = ((*AUCodeSetsProgramFundingSourceCodeType)(v))
      }
      }
      return s.programfundingsourcetype.Code
    }
  func (s *ProgramFundingSourceType) Code_IsNil() bool {
    return s.Code == nil || s.programfundingsourcetype.Code == nil
    }
  func (s *ProgramFundingSourceType) OtherCodeList() *OtherCodeListType {
    if s.programfundingsourcetype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.programfundingsourcetype.OtherCodeList = v
      }
      }
      return s.programfundingsourcetype.OtherCodeList
    }
  func (s *ProgramFundingSourceType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.programfundingsourcetype.OtherCodeList == nil
    }

func (n *ResourceUsage_SIF_RefId) Unset(key string) *ResourceUsage_SIF_RefId {
        switch key {
  case "SIF_RefObject":
   n.resourceusage_sif_refid.SIF_RefObject = nil
  case "Value":
   n.resourceusage_sif_refid.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_SIF_RefId")
        }
        return n
}

func (n *ResourceUsage_SIF_RefId) SetProperty(key string, value interface{}) *ResourceUsage_SIF_RefId {
        if n == nil {
                n, _ = ResourceUsage_SIF_RefIdPointer(ResourceUsage_SIF_RefId{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.resourceusage_sif_refid.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.resourceusage_sif_refid.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ResourceUsage_SIF_RefId")
        }
        return n
}

  func (s *ResourceUsage_SIF_RefId) SIF_RefObject() *String {
    if s.resourceusage_sif_refid.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourceusage_sif_refid.SIF_RefObject = ((*String)(v))
      }
      }
      return s.resourceusage_sif_refid.SIF_RefObject
    }
  func (s *ResourceUsage_SIF_RefId) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.resourceusage_sif_refid.SIF_RefObject == nil
    }
  func (s *ResourceUsage_SIF_RefId) Value() *String {
    if s.resourceusage_sif_refid.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.resourceusage_sif_refid.Value = ((*String)(v))
      }
      }
      return s.resourceusage_sif_refid.Value
    }
  func (s *ResourceUsage_SIF_RefId) Value_IsNil() bool {
    return s.Value == nil || s.resourceusage_sif_refid.Value == nil
    }

func (n *PersonInfoType) Unset(key string) *PersonInfoType {
        switch key {
  case "AddressList":
   n.personinfotype.AddressList = nil
  case "HouseholdContactInfoList":
   n.personinfotype.HouseholdContactInfoList = nil
  case "PhoneNumberList":
   n.personinfotype.PhoneNumberList = nil
  case "OtherNames":
   n.personinfotype.OtherNames = nil
  case "EmailList":
   n.personinfotype.EmailList = nil
  case "Demographics":
   n.personinfotype.Demographics = nil
  case "Name":
   n.personinfotype.Name = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonInfoType")
        }
        return n
}

func (n *PersonInfoType) SetProperty(key string, value interface{}) *PersonInfoType {
        if n == nil {
                n, _ = PersonInfoTypePointer(PersonInfoType{})
        }
        switch key {
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.personinfotype.AddressList = v
      }
    case "HouseholdContactInfoList":
    if v, ok:= HouseholdContactInfoListTypePointer(value); ok {
      n.personinfotype.HouseholdContactInfoList = v
      }
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.personinfotype.PhoneNumberList = v
      }
    case "OtherNames":
    if v, ok:= OtherNamesTypePointer(value); ok {
      n.personinfotype.OtherNames = v
      }
    case "EmailList":
    if v, ok:= EmailListTypePointer(value); ok {
      n.personinfotype.EmailList = v
      }
    case "Demographics":
    if v, ok:= DemographicsTypePointer(value); ok {
      n.personinfotype.Demographics = v
      }
    case "Name":
    if v, ok:= NameOfRecordTypePointer(value); ok {
      n.personinfotype.Name = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PersonInfoType")
        }
        return n
}

  func (s *PersonInfoType) AddressList() *AddressListType {
    if s.personinfotype.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.personinfotype.AddressList = v
      }
      }
      return s.personinfotype.AddressList
    }
  func (s *PersonInfoType) AddressList_IsNil() bool {
    return s.AddressList == nil || s.personinfotype.AddressList == nil
    }
  func (s *PersonInfoType) HouseholdContactInfoList() *HouseholdContactInfoListType {
    if s.personinfotype.HouseholdContactInfoList == nil {
     if v, ok:= HouseholdContactInfoListTypePointer(HouseholdContactInfoListType{}); ok {
      s.personinfotype.HouseholdContactInfoList = v
      }
      }
      return s.personinfotype.HouseholdContactInfoList
    }
  func (s *PersonInfoType) HouseholdContactInfoList_IsNil() bool {
    return s.HouseholdContactInfoList == nil || s.personinfotype.HouseholdContactInfoList == nil
    }
  func (s *PersonInfoType) PhoneNumberList() *PhoneNumberListType {
    if s.personinfotype.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.personinfotype.PhoneNumberList = v
      }
      }
      return s.personinfotype.PhoneNumberList
    }
  func (s *PersonInfoType) PhoneNumberList_IsNil() bool {
    return s.PhoneNumberList == nil || s.personinfotype.PhoneNumberList == nil
    }
  func (s *PersonInfoType) OtherNames() *OtherNamesType {
    if s.personinfotype.OtherNames == nil {
     if v, ok:= OtherNamesTypePointer(OtherNamesType{}); ok {
      s.personinfotype.OtherNames = v
      }
      }
      return s.personinfotype.OtherNames
    }
  func (s *PersonInfoType) OtherNames_IsNil() bool {
    return s.OtherNames == nil || s.personinfotype.OtherNames == nil
    }
  func (s *PersonInfoType) EmailList() *EmailListType {
    if s.personinfotype.EmailList == nil {
     if v, ok:= EmailListTypePointer(EmailListType{}); ok {
      s.personinfotype.EmailList = v
      }
      }
      return s.personinfotype.EmailList
    }
  func (s *PersonInfoType) EmailList_IsNil() bool {
    return s.EmailList == nil || s.personinfotype.EmailList == nil
    }
  func (s *PersonInfoType) Demographics() *DemographicsType {
    if s.personinfotype.Demographics == nil {
     if v, ok:= DemographicsTypePointer(DemographicsType{}); ok {
      s.personinfotype.Demographics = v
      }
      }
      return s.personinfotype.Demographics
    }
  func (s *PersonInfoType) Demographics_IsNil() bool {
    return s.Demographics == nil || s.personinfotype.Demographics == nil
    }
  func (s *PersonInfoType) Name() *NameOfRecordType {
    if s.personinfotype.Name == nil {
     if v, ok:= NameOfRecordTypePointer(NameOfRecordType{}); ok {
      s.personinfotype.Name = v
      }
      }
      return s.personinfotype.Name
    }
  func (s *PersonInfoType) Name_IsNil() bool {
    return s.Name == nil || s.personinfotype.Name == nil
    }

func (n *NAPTestletResponseItemType) Unset(key string) *NAPTestletResponseItemType {
        switch key {
  case "Score":
   n.naptestletresponseitemtype.Score = nil
  case "ItemWeight":
   n.naptestletresponseitemtype.ItemWeight = nil
  case "SubscoreList":
   n.naptestletresponseitemtype.SubscoreList = nil
  case "SequenceNumber":
   n.naptestletresponseitemtype.SequenceNumber = nil
  case "NAPTestItemRefId":
   n.naptestletresponseitemtype.NAPTestItemRefId = nil
  case "ResponseCorrectness":
   n.naptestletresponseitemtype.ResponseCorrectness = nil
  case "LapsedTimeItem":
   n.naptestletresponseitemtype.LapsedTimeItem = nil
  case "Response":
   n.naptestletresponseitemtype.Response = nil
  case "NAPTestItemLocalId":
   n.naptestletresponseitemtype.NAPTestItemLocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletResponseItemType")
        }
        return n
}

func (n *NAPTestletResponseItemType) SetProperty(key string, value interface{}) *NAPTestletResponseItemType {
        if n == nil {
                n, _ = NAPTestletResponseItemTypePointer(NAPTestletResponseItemType{})
        }
        switch key {
    case "Score":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestletresponseitemtype.Score = ((*Float)(v))
      }
    case "ItemWeight":
    
    if v, ok:= FloatPointer(value); ok {
      n.naptestletresponseitemtype.ItemWeight = ((*Float)(v))
      }
    case "SubscoreList":
    if v, ok:= NAPSubscoreListTypePointer(value); ok {
      n.naptestletresponseitemtype.SubscoreList = v
      }
    case "SequenceNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.naptestletresponseitemtype.SequenceNumber = ((*Int)(v))
      }
    case "NAPTestItemRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestletresponseitemtype.NAPTestItemRefId = ((*String)(v))
      }
    case "ResponseCorrectness":
        if !CodesetContains(AUCodeSetsNAPResponseCorrectnessType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNAPResponseCorrectnessType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.naptestletresponseitemtype.ResponseCorrectness = ((*AUCodeSetsNAPResponseCorrectnessType)(v))
      }
    case "LapsedTimeItem":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestletresponseitemtype.LapsedTimeItem = ((*String)(v))
      }
    case "Response":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestletresponseitemtype.Response = ((*String)(v))
      }
    case "NAPTestItemLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.naptestletresponseitemtype.NAPTestItemLocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "NAPTestletResponseItemType")
        }
        return n
}

  func (s *NAPTestletResponseItemType) Score() *Float {
    if s.naptestletresponseitemtype.Score == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestletresponseitemtype.Score = ((*Float)(v))
      }
      }
      return s.naptestletresponseitemtype.Score
    }
  func (s *NAPTestletResponseItemType) Score_IsNil() bool {
    return s.Score == nil || s.naptestletresponseitemtype.Score == nil
    }
  func (s *NAPTestletResponseItemType) ItemWeight() *Float {
    if s.naptestletresponseitemtype.ItemWeight == nil {
    if v, ok:= FloatPointer(0); ok {
      s.naptestletresponseitemtype.ItemWeight = ((*Float)(v))
      }
      }
      return s.naptestletresponseitemtype.ItemWeight
    }
  func (s *NAPTestletResponseItemType) ItemWeight_IsNil() bool {
    return s.ItemWeight == nil || s.naptestletresponseitemtype.ItemWeight == nil
    }
  func (s *NAPTestletResponseItemType) SubscoreList() *NAPSubscoreListType {
    if s.naptestletresponseitemtype.SubscoreList == nil {
     if v, ok:= NAPSubscoreListTypePointer(NAPSubscoreListType{}); ok {
      s.naptestletresponseitemtype.SubscoreList = v
      }
      }
      return s.naptestletresponseitemtype.SubscoreList
    }
  func (s *NAPTestletResponseItemType) SubscoreList_IsNil() bool {
    return s.SubscoreList == nil || s.naptestletresponseitemtype.SubscoreList == nil
    }
  func (s *NAPTestletResponseItemType) SequenceNumber() *Int {
    if s.naptestletresponseitemtype.SequenceNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.naptestletresponseitemtype.SequenceNumber = ((*Int)(v))
      }
      }
      return s.naptestletresponseitemtype.SequenceNumber
    }
  func (s *NAPTestletResponseItemType) SequenceNumber_IsNil() bool {
    return s.SequenceNumber == nil || s.naptestletresponseitemtype.SequenceNumber == nil
    }
  func (s *NAPTestletResponseItemType) NAPTestItemRefId() *String {
    if s.naptestletresponseitemtype.NAPTestItemRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestletresponseitemtype.NAPTestItemRefId = ((*String)(v))
      }
      }
      return s.naptestletresponseitemtype.NAPTestItemRefId
    }
  func (s *NAPTestletResponseItemType) NAPTestItemRefId_IsNil() bool {
    return s.NAPTestItemRefId == nil || s.naptestletresponseitemtype.NAPTestItemRefId == nil
    }
  func (s *NAPTestletResponseItemType) ResponseCorrectness() *AUCodeSetsNAPResponseCorrectnessType {
    if s.naptestletresponseitemtype.ResponseCorrectness == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestletresponseitemtype.ResponseCorrectness = ((*AUCodeSetsNAPResponseCorrectnessType)(v))
      }
      }
      return s.naptestletresponseitemtype.ResponseCorrectness
    }
  func (s *NAPTestletResponseItemType) ResponseCorrectness_IsNil() bool {
    return s.ResponseCorrectness == nil || s.naptestletresponseitemtype.ResponseCorrectness == nil
    }
  func (s *NAPTestletResponseItemType) LapsedTimeItem() *String {
    if s.naptestletresponseitemtype.LapsedTimeItem == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestletresponseitemtype.LapsedTimeItem = ((*String)(v))
      }
      }
      return s.naptestletresponseitemtype.LapsedTimeItem
    }
  func (s *NAPTestletResponseItemType) LapsedTimeItem_IsNil() bool {
    return s.LapsedTimeItem == nil || s.naptestletresponseitemtype.LapsedTimeItem == nil
    }
  func (s *NAPTestletResponseItemType) Response() *String {
    if s.naptestletresponseitemtype.Response == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestletresponseitemtype.Response = ((*String)(v))
      }
      }
      return s.naptestletresponseitemtype.Response
    }
  func (s *NAPTestletResponseItemType) Response_IsNil() bool {
    return s.Response == nil || s.naptestletresponseitemtype.Response == nil
    }
  func (s *NAPTestletResponseItemType) NAPTestItemLocalId() *LocalIdType {
    if s.naptestletresponseitemtype.NAPTestItemLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.naptestletresponseitemtype.NAPTestItemLocalId = ((*LocalIdType)(v))
      }
      }
      return s.naptestletresponseitemtype.NAPTestItemLocalId
    }
  func (s *NAPTestletResponseItemType) NAPTestItemLocalId_IsNil() bool {
    return s.NAPTestItemLocalId == nil || s.naptestletresponseitemtype.NAPTestItemLocalId == nil
    }

func (n *VisaSubClassType) Unset(key string) *VisaSubClassType {
        switch key {
  case "ATEStartDate":
   n.visasubclasstype.ATEStartDate = nil
  case "VisaStatisticalCode":
   n.visasubclasstype.VisaStatisticalCode = nil
  case "Code":
   n.visasubclasstype.Code = nil
  case "ATEExpiryDate":
   n.visasubclasstype.ATEExpiryDate = nil
  case "VisaExpiryDate":
   n.visasubclasstype.VisaExpiryDate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "VisaSubClassType")
        }
        return n
}

func (n *VisaSubClassType) SetProperty(key string, value interface{}) *VisaSubClassType {
        if n == nil {
                n, _ = VisaSubClassTypePointer(VisaSubClassType{})
        }
        switch key {
    case "ATEStartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.visasubclasstype.ATEStartDate = ((*String)(v))
      }
    case "VisaStatisticalCode":
    
    if v, ok:= StringPointer(value); ok {
      n.visasubclasstype.VisaStatisticalCode = ((*String)(v))
      }
    case "Code":
    
    if v, ok:= StringPointer(value); ok {
      n.visasubclasstype.Code = ((*VisaSubClassCodeType)(v))
      }
    case "ATEExpiryDate":
    
    if v, ok:= StringPointer(value); ok {
      n.visasubclasstype.ATEExpiryDate = ((*String)(v))
      }
    case "VisaExpiryDate":
    
    if v, ok:= StringPointer(value); ok {
      n.visasubclasstype.VisaExpiryDate = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "VisaSubClassType")
        }
        return n
}

  func (s *VisaSubClassType) ATEStartDate() *String {
    if s.visasubclasstype.ATEStartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.visasubclasstype.ATEStartDate = ((*String)(v))
      }
      }
      return s.visasubclasstype.ATEStartDate
    }
  func (s *VisaSubClassType) ATEStartDate_IsNil() bool {
    return s.ATEStartDate == nil || s.visasubclasstype.ATEStartDate == nil
    }
  func (s *VisaSubClassType) VisaStatisticalCode() *String {
    if s.visasubclasstype.VisaStatisticalCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.visasubclasstype.VisaStatisticalCode = ((*String)(v))
      }
      }
      return s.visasubclasstype.VisaStatisticalCode
    }
  func (s *VisaSubClassType) VisaStatisticalCode_IsNil() bool {
    return s.VisaStatisticalCode == nil || s.visasubclasstype.VisaStatisticalCode == nil
    }
  func (s *VisaSubClassType) Code() *VisaSubClassCodeType {
    if s.visasubclasstype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.visasubclasstype.Code = ((*VisaSubClassCodeType)(v))
      }
      }
      return s.visasubclasstype.Code
    }
  func (s *VisaSubClassType) Code_IsNil() bool {
    return s.Code == nil || s.visasubclasstype.Code == nil
    }
  func (s *VisaSubClassType) ATEExpiryDate() *String {
    if s.visasubclasstype.ATEExpiryDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.visasubclasstype.ATEExpiryDate = ((*String)(v))
      }
      }
      return s.visasubclasstype.ATEExpiryDate
    }
  func (s *VisaSubClassType) ATEExpiryDate_IsNil() bool {
    return s.ATEExpiryDate == nil || s.visasubclasstype.ATEExpiryDate == nil
    }
  func (s *VisaSubClassType) VisaExpiryDate() *String {
    if s.visasubclasstype.VisaExpiryDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.visasubclasstype.VisaExpiryDate = ((*String)(v))
      }
      }
      return s.visasubclasstype.VisaExpiryDate
    }
  func (s *VisaSubClassType) VisaExpiryDate_IsNil() bool {
    return s.VisaExpiryDate == nil || s.visasubclasstype.VisaExpiryDate == nil
    }

func (n *StudentGroupType) Unset(key string) *StudentGroupType {
        switch key {
  case "GroupCategory":
   n.studentgrouptype.GroupCategory = nil
  case "GroupLocalId":
   n.studentgrouptype.GroupLocalId = nil
  case "GroupDescription":
   n.studentgrouptype.GroupDescription = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentGroupType")
        }
        return n
}

func (n *StudentGroupType) SetProperty(key string, value interface{}) *StudentGroupType {
        if n == nil {
                n, _ = StudentGroupTypePointer(StudentGroupType{})
        }
        switch key {
    case "GroupCategory":
        if !CodesetContains(AUCodeSetsGroupCategoryCodeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsGroupCategoryCodeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.studentgrouptype.GroupCategory = ((*AUCodeSetsGroupCategoryCodeType)(v))
      }
    case "GroupLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentgrouptype.GroupLocalId = ((*LocalIdType)(v))
      }
    case "GroupDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.studentgrouptype.GroupDescription = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentGroupType")
        }
        return n
}

  func (s *StudentGroupType) GroupCategory() *AUCodeSetsGroupCategoryCodeType {
    if s.studentgrouptype.GroupCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentgrouptype.GroupCategory = ((*AUCodeSetsGroupCategoryCodeType)(v))
      }
      }
      return s.studentgrouptype.GroupCategory
    }
  func (s *StudentGroupType) GroupCategory_IsNil() bool {
    return s.GroupCategory == nil || s.studentgrouptype.GroupCategory == nil
    }
  func (s *StudentGroupType) GroupLocalId() *LocalIdType {
    if s.studentgrouptype.GroupLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentgrouptype.GroupLocalId = ((*LocalIdType)(v))
      }
      }
      return s.studentgrouptype.GroupLocalId
    }
  func (s *StudentGroupType) GroupLocalId_IsNil() bool {
    return s.GroupLocalId == nil || s.studentgrouptype.GroupLocalId == nil
    }
  func (s *StudentGroupType) GroupDescription() *String {
    if s.studentgrouptype.GroupDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentgrouptype.GroupDescription = ((*String)(v))
      }
      }
      return s.studentgrouptype.GroupDescription
    }
  func (s *StudentGroupType) GroupDescription_IsNil() bool {
    return s.GroupDescription == nil || s.studentgrouptype.GroupDescription == nil
    }

func (n *PromotionInfoType) Unset(key string) *PromotionInfoType {
        switch key {
  case "PromotionStatus":
   n.promotioninfotype.PromotionStatus = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PromotionInfoType")
        }
        return n
}

func (n *PromotionInfoType) SetProperty(key string, value interface{}) *PromotionInfoType {
        if n == nil {
                n, _ = PromotionInfoTypePointer(PromotionInfoType{})
        }
        switch key {
    case "PromotionStatus":
    
    if v, ok:= StringPointer(value); ok {
      n.promotioninfotype.PromotionStatus = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PromotionInfoType")
        }
        return n
}

  func (s *PromotionInfoType) PromotionStatus() *String {
    if s.promotioninfotype.PromotionStatus == nil {
    if v, ok:= StringPointer(""); ok {
      s.promotioninfotype.PromotionStatus = ((*String)(v))
      }
      }
      return s.promotioninfotype.PromotionStatus
    }
  func (s *PromotionInfoType) PromotionStatus_IsNil() bool {
    return s.PromotionStatus == nil || s.promotioninfotype.PromotionStatus == nil
    }

func (n *StatisticalAreaType) Unset(key string) *StatisticalAreaType {
        switch key {
  case "SpatialUnitType":
   n.statisticalareatype.SpatialUnitType = nil
  case "Value":
   n.statisticalareatype.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StatisticalAreaType")
        }
        return n
}

func (n *StatisticalAreaType) SetProperty(key string, value interface{}) *StatisticalAreaType {
        if n == nil {
                n, _ = StatisticalAreaTypePointer(StatisticalAreaType{})
        }
        switch key {
    case "SpatialUnitType":
    
    if v, ok:= StringPointer(value); ok {
      n.statisticalareatype.SpatialUnitType = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.statisticalareatype.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StatisticalAreaType")
        }
        return n
}

  func (s *StatisticalAreaType) SpatialUnitType() *String {
    if s.statisticalareatype.SpatialUnitType == nil {
    if v, ok:= StringPointer(""); ok {
      s.statisticalareatype.SpatialUnitType = ((*String)(v))
      }
      }
      return s.statisticalareatype.SpatialUnitType
    }
  func (s *StatisticalAreaType) SpatialUnitType_IsNil() bool {
    return s.SpatialUnitType == nil || s.statisticalareatype.SpatialUnitType == nil
    }
  func (s *StatisticalAreaType) Value() *String {
    if s.statisticalareatype.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.statisticalareatype.Value = ((*String)(v))
      }
      }
      return s.statisticalareatype.Value
    }
  func (s *StatisticalAreaType) Value_IsNil() bool {
    return s.Value == nil || s.statisticalareatype.Value == nil
    }

func (n *CodeFrameTestItemType) Unset(key string) *CodeFrameTestItemType {
        switch key {
  case "TestItemRefId":
   n.codeframetestitemtype.TestItemRefId = nil
  case "SequenceNumber":
   n.codeframetestitemtype.SequenceNumber = nil
  case "TestItemContent":
   n.codeframetestitemtype.TestItemContent = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CodeFrameTestItemType")
        }
        return n
}

func (n *CodeFrameTestItemType) SetProperty(key string, value interface{}) *CodeFrameTestItemType {
        if n == nil {
                n, _ = CodeFrameTestItemTypePointer(CodeFrameTestItemType{})
        }
        switch key {
    case "TestItemRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.codeframetestitemtype.TestItemRefId = ((*String)(v))
      }
    case "SequenceNumber":
    
    if v, ok:= IntPointer(value); ok {
      n.codeframetestitemtype.SequenceNumber = ((*Int)(v))
      }
    case "TestItemContent":
    if v, ok:= NAPTestItemContentTypePointer(value); ok {
      n.codeframetestitemtype.TestItemContent = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CodeFrameTestItemType")
        }
        return n
}

  func (s *CodeFrameTestItemType) TestItemRefId() *String {
    if s.codeframetestitemtype.TestItemRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.codeframetestitemtype.TestItemRefId = ((*String)(v))
      }
      }
      return s.codeframetestitemtype.TestItemRefId
    }
  func (s *CodeFrameTestItemType) TestItemRefId_IsNil() bool {
    return s.TestItemRefId == nil || s.codeframetestitemtype.TestItemRefId == nil
    }
  func (s *CodeFrameTestItemType) SequenceNumber() *Int {
    if s.codeframetestitemtype.SequenceNumber == nil {
    if v, ok:= IntPointer(0); ok {
      s.codeframetestitemtype.SequenceNumber = ((*Int)(v))
      }
      }
      return s.codeframetestitemtype.SequenceNumber
    }
  func (s *CodeFrameTestItemType) SequenceNumber_IsNil() bool {
    return s.SequenceNumber == nil || s.codeframetestitemtype.SequenceNumber == nil
    }
  func (s *CodeFrameTestItemType) TestItemContent() *NAPTestItemContentType {
    if s.codeframetestitemtype.TestItemContent == nil {
     if v, ok:= NAPTestItemContentTypePointer(NAPTestItemContentType{}); ok {
      s.codeframetestitemtype.TestItemContent = v
      }
      }
      return s.codeframetestitemtype.TestItemContent
    }
  func (s *CodeFrameTestItemType) TestItemContent_IsNil() bool {
    return s.TestItemContent == nil || s.codeframetestitemtype.TestItemContent == nil
    }

func (n *LocationType_LocationRefId) Unset(key string) *LocationType_LocationRefId {
        switch key {
  case "Value":
   n.locationtype_locationrefid.Value = nil
  case "SIF_RefObject":
   n.locationtype_locationrefid.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocationType_LocationRefId")
        }
        return n
}

func (n *LocationType_LocationRefId) SetProperty(key string, value interface{}) *LocationType_LocationRefId {
        if n == nil {
                n, _ = LocationType_LocationRefIdPointer(LocationType_LocationRefId{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.locationtype_locationrefid.Value = ((*String)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.locationtype_locationrefid.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocationType_LocationRefId")
        }
        return n
}

  func (s *LocationType_LocationRefId) Value() *String {
    if s.locationtype_locationrefid.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.locationtype_locationrefid.Value = ((*String)(v))
      }
      }
      return s.locationtype_locationrefid.Value
    }
  func (s *LocationType_LocationRefId) Value_IsNil() bool {
    return s.Value == nil || s.locationtype_locationrefid.Value == nil
    }
  func (s *LocationType_LocationRefId) SIF_RefObject() *String {
    if s.locationtype_locationrefid.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.locationtype_locationrefid.SIF_RefObject = ((*String)(v))
      }
      }
      return s.locationtype_locationrefid.SIF_RefObject
    }
  func (s *LocationType_LocationRefId) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.locationtype_locationrefid.SIF_RefObject == nil
    }

func (n *AttendanceInfoType) Unset(key string) *AttendanceInfoType {
        switch key {
  case "AttendanceValue":
   n.attendanceinfotype.AttendanceValue = nil
  case "CountsTowardAttendance":
   n.attendanceinfotype.CountsTowardAttendance = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AttendanceInfoType")
        }
        return n
}

func (n *AttendanceInfoType) SetProperty(key string, value interface{}) *AttendanceInfoType {
        if n == nil {
                n, _ = AttendanceInfoTypePointer(AttendanceInfoType{})
        }
        switch key {
    case "AttendanceValue":
    
    if v, ok:= FloatPointer(value); ok {
      n.attendanceinfotype.AttendanceValue = ((*Float)(v))
      }
    case "CountsTowardAttendance":
    
    if v, ok:= StringPointer(value); ok {
      n.attendanceinfotype.CountsTowardAttendance = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AttendanceInfoType")
        }
        return n
}

  func (s *AttendanceInfoType) AttendanceValue() *Float {
    if s.attendanceinfotype.AttendanceValue == nil {
    if v, ok:= FloatPointer(0); ok {
      s.attendanceinfotype.AttendanceValue = ((*Float)(v))
      }
      }
      return s.attendanceinfotype.AttendanceValue
    }
  func (s *AttendanceInfoType) AttendanceValue_IsNil() bool {
    return s.AttendanceValue == nil || s.attendanceinfotype.AttendanceValue == nil
    }
  func (s *AttendanceInfoType) CountsTowardAttendance() *String {
    if s.attendanceinfotype.CountsTowardAttendance == nil {
    if v, ok:= StringPointer(""); ok {
      s.attendanceinfotype.CountsTowardAttendance = ((*String)(v))
      }
      }
      return s.attendanceinfotype.CountsTowardAttendance
    }
  func (s *AttendanceInfoType) CountsTowardAttendance_IsNil() bool {
    return s.CountsTowardAttendance == nil || s.attendanceinfotype.CountsTowardAttendance == nil
    }

func (n *StudentGrade) Unset(key string) *StudentGrade {
        switch key {
  case "StudentPersonalRefId":
   n.studentgrade.StudentPersonalRefId = nil
  case "RefId":
   n.studentgrade.RefId = nil
  case "TeacherJudgement":
   n.studentgrade.TeacherJudgement = nil
  case "TeachingGroupShortName":
   n.studentgrade.TeachingGroupShortName = nil
  case "YearLevel":
   n.studentgrade.YearLevel = nil
  case "SIF_Metadata":
   n.studentgrade.SIF_Metadata = nil
  case "LearningStandardList":
   n.studentgrade.LearningStandardList = nil
  case "Grade":
   n.studentgrade.Grade = nil
  case "LearningArea":
   n.studentgrade.LearningArea = nil
  case "StaffPersonalRefId":
   n.studentgrade.StaffPersonalRefId = nil
  case "Markers":
   n.studentgrade.Markers = nil
  case "Description":
   n.studentgrade.Description = nil
  case "Homegroup":
   n.studentgrade.Homegroup = nil
  case "TermInfoRefId":
   n.studentgrade.TermInfoRefId = nil
  case "SIF_ExtendedElements":
   n.studentgrade.SIF_ExtendedElements = nil
  case "GradingScoreList":
   n.studentgrade.GradingScoreList = nil
  case "TeachingGroupRefId":
   n.studentgrade.TeachingGroupRefId = nil
  case "LocalCodeList":
   n.studentgrade.LocalCodeList = nil
  case "SchoolInfoRefId":
   n.studentgrade.SchoolInfoRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentGrade")
        }
        return n
}

func (n *StudentGrade) SetProperty(key string, value interface{}) *StudentGrade {
        if n == nil {
                n, _ = StudentGradePointer(StudentGrade{})
        }
        switch key {
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentgrade.StudentPersonalRefId = ((*String)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentgrade.RefId = ((*RefIdType)(v))
      }
    case "TeacherJudgement":
    
    if v, ok:= StringPointer(value); ok {
      n.studentgrade.TeacherJudgement = ((*String)(v))
      }
    case "TeachingGroupShortName":
    
    if v, ok:= StringPointer(value); ok {
      n.studentgrade.TeachingGroupShortName = ((*String)(v))
      }
    case "YearLevel":
    if v, ok:= YearLevelTypePointer(value); ok {
      n.studentgrade.YearLevel = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentgrade.SIF_Metadata = v
      }
    case "LearningStandardList":
    if v, ok:= LearningStandardListTypePointer(value); ok {
      n.studentgrade.LearningStandardList = v
      }
    case "Grade":
    if v, ok:= GradeTypePointer(value); ok {
      n.studentgrade.Grade = v
      }
    case "LearningArea":
    if v, ok:= ACStrandSubjectAreaTypePointer(value); ok {
      n.studentgrade.LearningArea = v
      }
    case "StaffPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentgrade.StaffPersonalRefId = ((*String)(v))
      }
    case "Markers":
    if v, ok:= StudentGradeMarkersListTypePointer(value); ok {
      n.studentgrade.Markers = v
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.studentgrade.Description = ((*String)(v))
      }
    case "Homegroup":
    
    if v, ok:= StringPointer(value); ok {
      n.studentgrade.Homegroup = ((*String)(v))
      }
    case "TermInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentgrade.TermInfoRefId = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentgrade.SIF_ExtendedElements = v
      }
    case "GradingScoreList":
    if v, ok:= GradingScoreListTypePointer(value); ok {
      n.studentgrade.GradingScoreList = v
      }
    case "TeachingGroupRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentgrade.TeachingGroupRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentgrade.LocalCodeList = v
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentgrade.SchoolInfoRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentGrade")
        }
        return n
}

  func (s *StudentGrade) StudentPersonalRefId() *String {
    if s.studentgrade.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentgrade.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.studentgrade.StudentPersonalRefId
    }
  func (s *StudentGrade) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.studentgrade.StudentPersonalRefId == nil
    }
  func (s *StudentGrade) RefId() *RefIdType {
    if s.studentgrade.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentgrade.RefId = ((*RefIdType)(v))
      }
      }
      return s.studentgrade.RefId
    }
  func (s *StudentGrade) RefId_IsNil() bool {
    return s.RefId == nil || s.studentgrade.RefId == nil
    }
  func (s *StudentGrade) TeacherJudgement() *String {
    if s.studentgrade.TeacherJudgement == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentgrade.TeacherJudgement = ((*String)(v))
      }
      }
      return s.studentgrade.TeacherJudgement
    }
  func (s *StudentGrade) TeacherJudgement_IsNil() bool {
    return s.TeacherJudgement == nil || s.studentgrade.TeacherJudgement == nil
    }
  func (s *StudentGrade) TeachingGroupShortName() *String {
    if s.studentgrade.TeachingGroupShortName == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentgrade.TeachingGroupShortName = ((*String)(v))
      }
      }
      return s.studentgrade.TeachingGroupShortName
    }
  func (s *StudentGrade) TeachingGroupShortName_IsNil() bool {
    return s.TeachingGroupShortName == nil || s.studentgrade.TeachingGroupShortName == nil
    }
  func (s *StudentGrade) YearLevel() *YearLevelType {
    if s.studentgrade.YearLevel == nil {
     if v, ok:= YearLevelTypePointer(YearLevelType{}); ok {
      s.studentgrade.YearLevel = v
      }
      }
      return s.studentgrade.YearLevel
    }
  func (s *StudentGrade) YearLevel_IsNil() bool {
    return s.YearLevel == nil || s.studentgrade.YearLevel == nil
    }
  func (s *StudentGrade) SIF_Metadata() *SIF_MetadataType {
    if s.studentgrade.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentgrade.SIF_Metadata = v
      }
      }
      return s.studentgrade.SIF_Metadata
    }
  func (s *StudentGrade) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentgrade.SIF_Metadata == nil
    }
  func (s *StudentGrade) LearningStandardList() *LearningStandardListType {
    if s.studentgrade.LearningStandardList == nil {
     if v, ok:= LearningStandardListTypePointer(LearningStandardListType{}); ok {
      s.studentgrade.LearningStandardList = v
      }
      }
      return s.studentgrade.LearningStandardList
    }
  func (s *StudentGrade) LearningStandardList_IsNil() bool {
    return s.LearningStandardList == nil || s.studentgrade.LearningStandardList == nil
    }
  func (s *StudentGrade) Grade() *GradeType {
    if s.studentgrade.Grade == nil {
     if v, ok:= GradeTypePointer(GradeType{}); ok {
      s.studentgrade.Grade = v
      }
      }
      return s.studentgrade.Grade
    }
  func (s *StudentGrade) Grade_IsNil() bool {
    return s.Grade == nil || s.studentgrade.Grade == nil
    }
  func (s *StudentGrade) LearningArea() *ACStrandSubjectAreaType {
    if s.studentgrade.LearningArea == nil {
     if v, ok:= ACStrandSubjectAreaTypePointer(ACStrandSubjectAreaType{}); ok {
      s.studentgrade.LearningArea = v
      }
      }
      return s.studentgrade.LearningArea
    }
  func (s *StudentGrade) LearningArea_IsNil() bool {
    return s.LearningArea == nil || s.studentgrade.LearningArea == nil
    }
  func (s *StudentGrade) StaffPersonalRefId() *String {
    if s.studentgrade.StaffPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentgrade.StaffPersonalRefId = ((*String)(v))
      }
      }
      return s.studentgrade.StaffPersonalRefId
    }
  func (s *StudentGrade) StaffPersonalRefId_IsNil() bool {
    return s.StaffPersonalRefId == nil || s.studentgrade.StaffPersonalRefId == nil
    }
  func (s *StudentGrade) Markers() *StudentGradeMarkersListType {
    if s.studentgrade.Markers == nil {
     if v, ok:= StudentGradeMarkersListTypePointer(StudentGradeMarkersListType{}); ok {
      s.studentgrade.Markers = v
      }
      }
      return s.studentgrade.Markers
    }
  func (s *StudentGrade) Markers_IsNil() bool {
    return s.Markers == nil || s.studentgrade.Markers == nil
    }
  func (s *StudentGrade) Description() *String {
    if s.studentgrade.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentgrade.Description = ((*String)(v))
      }
      }
      return s.studentgrade.Description
    }
  func (s *StudentGrade) Description_IsNil() bool {
    return s.Description == nil || s.studentgrade.Description == nil
    }
  func (s *StudentGrade) Homegroup() *String {
    if s.studentgrade.Homegroup == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentgrade.Homegroup = ((*String)(v))
      }
      }
      return s.studentgrade.Homegroup
    }
  func (s *StudentGrade) Homegroup_IsNil() bool {
    return s.Homegroup == nil || s.studentgrade.Homegroup == nil
    }
  func (s *StudentGrade) TermInfoRefId() *String {
    if s.studentgrade.TermInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentgrade.TermInfoRefId = ((*String)(v))
      }
      }
      return s.studentgrade.TermInfoRefId
    }
  func (s *StudentGrade) TermInfoRefId_IsNil() bool {
    return s.TermInfoRefId == nil || s.studentgrade.TermInfoRefId == nil
    }
  func (s *StudentGrade) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentgrade.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentgrade.SIF_ExtendedElements = v
      }
      }
      return s.studentgrade.SIF_ExtendedElements
    }
  func (s *StudentGrade) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentgrade.SIF_ExtendedElements == nil
    }
  func (s *StudentGrade) GradingScoreList() *GradingScoreListType {
    if s.studentgrade.GradingScoreList == nil {
     if v, ok:= GradingScoreListTypePointer(GradingScoreListType{}); ok {
      s.studentgrade.GradingScoreList = v
      }
      }
      return s.studentgrade.GradingScoreList
    }
  func (s *StudentGrade) GradingScoreList_IsNil() bool {
    return s.GradingScoreList == nil || s.studentgrade.GradingScoreList == nil
    }
  func (s *StudentGrade) TeachingGroupRefId() *String {
    if s.studentgrade.TeachingGroupRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentgrade.TeachingGroupRefId = ((*String)(v))
      }
      }
      return s.studentgrade.TeachingGroupRefId
    }
  func (s *StudentGrade) TeachingGroupRefId_IsNil() bool {
    return s.TeachingGroupRefId == nil || s.studentgrade.TeachingGroupRefId == nil
    }
  func (s *StudentGrade) LocalCodeList() *LocalCodeListType {
    if s.studentgrade.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentgrade.LocalCodeList = v
      }
      }
      return s.studentgrade.LocalCodeList
    }
  func (s *StudentGrade) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentgrade.LocalCodeList == nil
    }
  func (s *StudentGrade) SchoolInfoRefId() *String {
    if s.studentgrade.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentgrade.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.studentgrade.SchoolInfoRefId
    }
  func (s *StudentGrade) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.studentgrade.SchoolInfoRefId == nil
    }

func (n *WellbeingDocumentType) Unset(key string) *WellbeingDocumentType {
        switch key {
  case "DocumentDescription":
   n.wellbeingdocumenttype.DocumentDescription = nil
  case "Sensitivity":
   n.wellbeingdocumenttype.Sensitivity = nil
  case "DocumentReviewDate":
   n.wellbeingdocumenttype.DocumentReviewDate = nil
  case "URL":
   n.wellbeingdocumenttype.URL = nil
  case "DocumentType":
   n.wellbeingdocumenttype.DocumentType = nil
  case "Location":
   n.wellbeingdocumenttype.Location = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingDocumentType")
        }
        return n
}

func (n *WellbeingDocumentType) SetProperty(key string, value interface{}) *WellbeingDocumentType {
        if n == nil {
                n, _ = WellbeingDocumentTypePointer(WellbeingDocumentType{})
        }
        switch key {
    case "DocumentDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingdocumenttype.DocumentDescription = ((*String)(v))
      }
    case "Sensitivity":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingdocumenttype.Sensitivity = ((*String)(v))
      }
    case "DocumentReviewDate":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingdocumenttype.DocumentReviewDate = ((*String)(v))
      }
    case "URL":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingdocumenttype.URL = ((*String)(v))
      }
    case "DocumentType":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingdocumenttype.DocumentType = ((*String)(v))
      }
    case "Location":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingdocumenttype.Location = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingDocumentType")
        }
        return n
}

  func (s *WellbeingDocumentType) DocumentDescription() *String {
    if s.wellbeingdocumenttype.DocumentDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingdocumenttype.DocumentDescription = ((*String)(v))
      }
      }
      return s.wellbeingdocumenttype.DocumentDescription
    }
  func (s *WellbeingDocumentType) DocumentDescription_IsNil() bool {
    return s.DocumentDescription == nil || s.wellbeingdocumenttype.DocumentDescription == nil
    }
  func (s *WellbeingDocumentType) Sensitivity() *String {
    if s.wellbeingdocumenttype.Sensitivity == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingdocumenttype.Sensitivity = ((*String)(v))
      }
      }
      return s.wellbeingdocumenttype.Sensitivity
    }
  func (s *WellbeingDocumentType) Sensitivity_IsNil() bool {
    return s.Sensitivity == nil || s.wellbeingdocumenttype.Sensitivity == nil
    }
  func (s *WellbeingDocumentType) DocumentReviewDate() *String {
    if s.wellbeingdocumenttype.DocumentReviewDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingdocumenttype.DocumentReviewDate = ((*String)(v))
      }
      }
      return s.wellbeingdocumenttype.DocumentReviewDate
    }
  func (s *WellbeingDocumentType) DocumentReviewDate_IsNil() bool {
    return s.DocumentReviewDate == nil || s.wellbeingdocumenttype.DocumentReviewDate == nil
    }
  func (s *WellbeingDocumentType) URL() *String {
    if s.wellbeingdocumenttype.URL == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingdocumenttype.URL = ((*String)(v))
      }
      }
      return s.wellbeingdocumenttype.URL
    }
  func (s *WellbeingDocumentType) URL_IsNil() bool {
    return s.URL == nil || s.wellbeingdocumenttype.URL == nil
    }
  func (s *WellbeingDocumentType) DocumentType() *String {
    if s.wellbeingdocumenttype.DocumentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingdocumenttype.DocumentType = ((*String)(v))
      }
      }
      return s.wellbeingdocumenttype.DocumentType
    }
  func (s *WellbeingDocumentType) DocumentType_IsNil() bool {
    return s.DocumentType == nil || s.wellbeingdocumenttype.DocumentType == nil
    }
  func (s *WellbeingDocumentType) Location() *String {
    if s.wellbeingdocumenttype.Location == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingdocumenttype.Location = ((*String)(v))
      }
      }
      return s.wellbeingdocumenttype.Location
    }
  func (s *WellbeingDocumentType) Location_IsNil() bool {
    return s.Location == nil || s.wellbeingdocumenttype.Location == nil
    }

func (n *SoftwareVendorInfoContainerType) Unset(key string) *SoftwareVendorInfoContainerType {
        switch key {
  case "SoftwareVersion":
   n.softwarevendorinfocontainertype.SoftwareVersion = nil
  case "SoftwareProduct":
   n.softwarevendorinfocontainertype.SoftwareProduct = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SoftwareVendorInfoContainerType")
        }
        return n
}

func (n *SoftwareVendorInfoContainerType) SetProperty(key string, value interface{}) *SoftwareVendorInfoContainerType {
        if n == nil {
                n, _ = SoftwareVendorInfoContainerTypePointer(SoftwareVendorInfoContainerType{})
        }
        switch key {
    case "SoftwareVersion":
    
    if v, ok:= StringPointer(value); ok {
      n.softwarevendorinfocontainertype.SoftwareVersion = ((*String)(v))
      }
    case "SoftwareProduct":
    
    if v, ok:= StringPointer(value); ok {
      n.softwarevendorinfocontainertype.SoftwareProduct = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SoftwareVendorInfoContainerType")
        }
        return n
}

  func (s *SoftwareVendorInfoContainerType) SoftwareVersion() *String {
    if s.softwarevendorinfocontainertype.SoftwareVersion == nil {
    if v, ok:= StringPointer(""); ok {
      s.softwarevendorinfocontainertype.SoftwareVersion = ((*String)(v))
      }
      }
      return s.softwarevendorinfocontainertype.SoftwareVersion
    }
  func (s *SoftwareVendorInfoContainerType) SoftwareVersion_IsNil() bool {
    return s.SoftwareVersion == nil || s.softwarevendorinfocontainertype.SoftwareVersion == nil
    }
  func (s *SoftwareVendorInfoContainerType) SoftwareProduct() *String {
    if s.softwarevendorinfocontainertype.SoftwareProduct == nil {
    if v, ok:= StringPointer(""); ok {
      s.softwarevendorinfocontainertype.SoftwareProduct = ((*String)(v))
      }
      }
      return s.softwarevendorinfocontainertype.SoftwareProduct
    }
  func (s *SoftwareVendorInfoContainerType) SoftwareProduct_IsNil() bool {
    return s.SoftwareProduct == nil || s.softwarevendorinfocontainertype.SoftwareProduct == nil
    }

func (n *FollowUpActionType) Unset(key string) *FollowUpActionType {
        switch key {
  case "FollowUpActionCategory":
   n.followupactiontype.FollowUpActionCategory = nil
  case "FollowUpDetails":
   n.followupactiontype.FollowUpDetails = nil
  case "WellbeingResponseRefId":
   n.followupactiontype.WellbeingResponseRefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FollowUpActionType")
        }
        return n
}

func (n *FollowUpActionType) SetProperty(key string, value interface{}) *FollowUpActionType {
        if n == nil {
                n, _ = FollowUpActionTypePointer(FollowUpActionType{})
        }
        switch key {
    case "FollowUpActionCategory":
    
    if v, ok:= StringPointer(value); ok {
      n.followupactiontype.FollowUpActionCategory = ((*String)(v))
      }
    case "FollowUpDetails":
    
    if v, ok:= StringPointer(value); ok {
      n.followupactiontype.FollowUpDetails = ((*String)(v))
      }
    case "WellbeingResponseRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.followupactiontype.WellbeingResponseRefId = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "FollowUpActionType")
        }
        return n
}

  func (s *FollowUpActionType) FollowUpActionCategory() *String {
    if s.followupactiontype.FollowUpActionCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.followupactiontype.FollowUpActionCategory = ((*String)(v))
      }
      }
      return s.followupactiontype.FollowUpActionCategory
    }
  func (s *FollowUpActionType) FollowUpActionCategory_IsNil() bool {
    return s.FollowUpActionCategory == nil || s.followupactiontype.FollowUpActionCategory == nil
    }
  func (s *FollowUpActionType) FollowUpDetails() *String {
    if s.followupactiontype.FollowUpDetails == nil {
    if v, ok:= StringPointer(""); ok {
      s.followupactiontype.FollowUpDetails = ((*String)(v))
      }
      }
      return s.followupactiontype.FollowUpDetails
    }
  func (s *FollowUpActionType) FollowUpDetails_IsNil() bool {
    return s.FollowUpDetails == nil || s.followupactiontype.FollowUpDetails == nil
    }
  func (s *FollowUpActionType) WellbeingResponseRefId() *String {
    if s.followupactiontype.WellbeingResponseRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.followupactiontype.WellbeingResponseRefId = ((*String)(v))
      }
      }
      return s.followupactiontype.WellbeingResponseRefId
    }
  func (s *FollowUpActionType) WellbeingResponseRefId_IsNil() bool {
    return s.WellbeingResponseRefId == nil || s.followupactiontype.WellbeingResponseRefId == nil
    }

func (n *WellbeingAlert) Unset(key string) *WellbeingAlert {
        switch key {
  case "SIF_ExtendedElements":
   n.wellbeingalert.SIF_ExtendedElements = nil
  case "AlertKeyContact":
   n.wellbeingalert.AlertKeyContact = nil
  case "LocalCodeList":
   n.wellbeingalert.LocalCodeList = nil
  case "AlertAudience":
   n.wellbeingalert.AlertAudience = nil
  case "SchoolInfoRefId":
   n.wellbeingalert.SchoolInfoRefId = nil
  case "WellbeingAlertStartDate":
   n.wellbeingalert.WellbeingAlertStartDate = nil
  case "WellbeingAlertDescription":
   n.wellbeingalert.WellbeingAlertDescription = nil
  case "Date":
   n.wellbeingalert.Date = nil
  case "SIF_Metadata":
   n.wellbeingalert.SIF_Metadata = nil
  case "EnrolmentRestricted":
   n.wellbeingalert.EnrolmentRestricted = nil
  case "RefId":
   n.wellbeingalert.RefId = nil
  case "StudentPersonalRefId":
   n.wellbeingalert.StudentPersonalRefId = nil
  case "WellbeingAlertCategory":
   n.wellbeingalert.WellbeingAlertCategory = nil
  case "LocalId":
   n.wellbeingalert.LocalId = nil
  case "WellbeingAlertEndDate":
   n.wellbeingalert.WellbeingAlertEndDate = nil
  case "AlertSeverity":
   n.wellbeingalert.AlertSeverity = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingAlert")
        }
        return n
}

func (n *WellbeingAlert) SetProperty(key string, value interface{}) *WellbeingAlert {
        if n == nil {
                n, _ = WellbeingAlertPointer(WellbeingAlert{})
        }
        switch key {
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.wellbeingalert.SIF_ExtendedElements = v
      }
    case "AlertKeyContact":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingalert.AlertKeyContact = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.wellbeingalert.LocalCodeList = v
      }
    case "AlertAudience":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingalert.AlertAudience = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingalert.SchoolInfoRefId = ((*String)(v))
      }
    case "WellbeingAlertStartDate":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingalert.WellbeingAlertStartDate = ((*String)(v))
      }
    case "WellbeingAlertDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingalert.WellbeingAlertDescription = ((*String)(v))
      }
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingalert.Date = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.wellbeingalert.SIF_Metadata = v
      }
    case "EnrolmentRestricted":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.wellbeingalert.EnrolmentRestricted = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingalert.RefId = ((*RefIdType)(v))
      }
    case "StudentPersonalRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingalert.StudentPersonalRefId = ((*String)(v))
      }
    case "WellbeingAlertCategory":
        if !CodesetContains(AUCodeSetsWellbeingAlertCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsWellbeingAlertCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.wellbeingalert.WellbeingAlertCategory = ((*AUCodeSetsWellbeingAlertCategoryType)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingalert.LocalId = ((*LocalIdType)(v))
      }
    case "WellbeingAlertEndDate":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingalert.WellbeingAlertEndDate = ((*String)(v))
      }
    case "AlertSeverity":
    
    if v, ok:= StringPointer(value); ok {
      n.wellbeingalert.AlertSeverity = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "WellbeingAlert")
        }
        return n
}

  func (s *WellbeingAlert) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.wellbeingalert.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.wellbeingalert.SIF_ExtendedElements = v
      }
      }
      return s.wellbeingalert.SIF_ExtendedElements
    }
  func (s *WellbeingAlert) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.wellbeingalert.SIF_ExtendedElements == nil
    }
  func (s *WellbeingAlert) AlertKeyContact() *String {
    if s.wellbeingalert.AlertKeyContact == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingalert.AlertKeyContact = ((*String)(v))
      }
      }
      return s.wellbeingalert.AlertKeyContact
    }
  func (s *WellbeingAlert) AlertKeyContact_IsNil() bool {
    return s.AlertKeyContact == nil || s.wellbeingalert.AlertKeyContact == nil
    }
  func (s *WellbeingAlert) LocalCodeList() *LocalCodeListType {
    if s.wellbeingalert.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.wellbeingalert.LocalCodeList = v
      }
      }
      return s.wellbeingalert.LocalCodeList
    }
  func (s *WellbeingAlert) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.wellbeingalert.LocalCodeList == nil
    }
  func (s *WellbeingAlert) AlertAudience() *String {
    if s.wellbeingalert.AlertAudience == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingalert.AlertAudience = ((*String)(v))
      }
      }
      return s.wellbeingalert.AlertAudience
    }
  func (s *WellbeingAlert) AlertAudience_IsNil() bool {
    return s.AlertAudience == nil || s.wellbeingalert.AlertAudience == nil
    }
  func (s *WellbeingAlert) SchoolInfoRefId() *String {
    if s.wellbeingalert.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingalert.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.wellbeingalert.SchoolInfoRefId
    }
  func (s *WellbeingAlert) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.wellbeingalert.SchoolInfoRefId == nil
    }
  func (s *WellbeingAlert) WellbeingAlertStartDate() *String {
    if s.wellbeingalert.WellbeingAlertStartDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingalert.WellbeingAlertStartDate = ((*String)(v))
      }
      }
      return s.wellbeingalert.WellbeingAlertStartDate
    }
  func (s *WellbeingAlert) WellbeingAlertStartDate_IsNil() bool {
    return s.WellbeingAlertStartDate == nil || s.wellbeingalert.WellbeingAlertStartDate == nil
    }
  func (s *WellbeingAlert) WellbeingAlertDescription() *String {
    if s.wellbeingalert.WellbeingAlertDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingalert.WellbeingAlertDescription = ((*String)(v))
      }
      }
      return s.wellbeingalert.WellbeingAlertDescription
    }
  func (s *WellbeingAlert) WellbeingAlertDescription_IsNil() bool {
    return s.WellbeingAlertDescription == nil || s.wellbeingalert.WellbeingAlertDescription == nil
    }
  func (s *WellbeingAlert) Date() *String {
    if s.wellbeingalert.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingalert.Date = ((*String)(v))
      }
      }
      return s.wellbeingalert.Date
    }
  func (s *WellbeingAlert) Date_IsNil() bool {
    return s.Date == nil || s.wellbeingalert.Date == nil
    }
  func (s *WellbeingAlert) SIF_Metadata() *SIF_MetadataType {
    if s.wellbeingalert.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.wellbeingalert.SIF_Metadata = v
      }
      }
      return s.wellbeingalert.SIF_Metadata
    }
  func (s *WellbeingAlert) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.wellbeingalert.SIF_Metadata == nil
    }
  func (s *WellbeingAlert) EnrolmentRestricted() *AUCodeSetsYesOrNoCategoryType {
    if s.wellbeingalert.EnrolmentRestricted == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingalert.EnrolmentRestricted = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.wellbeingalert.EnrolmentRestricted
    }
  func (s *WellbeingAlert) EnrolmentRestricted_IsNil() bool {
    return s.EnrolmentRestricted == nil || s.wellbeingalert.EnrolmentRestricted == nil
    }
  func (s *WellbeingAlert) RefId() *RefIdType {
    if s.wellbeingalert.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingalert.RefId = ((*RefIdType)(v))
      }
      }
      return s.wellbeingalert.RefId
    }
  func (s *WellbeingAlert) RefId_IsNil() bool {
    return s.RefId == nil || s.wellbeingalert.RefId == nil
    }
  func (s *WellbeingAlert) StudentPersonalRefId() *String {
    if s.wellbeingalert.StudentPersonalRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingalert.StudentPersonalRefId = ((*String)(v))
      }
      }
      return s.wellbeingalert.StudentPersonalRefId
    }
  func (s *WellbeingAlert) StudentPersonalRefId_IsNil() bool {
    return s.StudentPersonalRefId == nil || s.wellbeingalert.StudentPersonalRefId == nil
    }
  func (s *WellbeingAlert) WellbeingAlertCategory() *AUCodeSetsWellbeingAlertCategoryType {
    if s.wellbeingalert.WellbeingAlertCategory == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingalert.WellbeingAlertCategory = ((*AUCodeSetsWellbeingAlertCategoryType)(v))
      }
      }
      return s.wellbeingalert.WellbeingAlertCategory
    }
  func (s *WellbeingAlert) WellbeingAlertCategory_IsNil() bool {
    return s.WellbeingAlertCategory == nil || s.wellbeingalert.WellbeingAlertCategory == nil
    }
  func (s *WellbeingAlert) LocalId() *LocalIdType {
    if s.wellbeingalert.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingalert.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.wellbeingalert.LocalId
    }
  func (s *WellbeingAlert) LocalId_IsNil() bool {
    return s.LocalId == nil || s.wellbeingalert.LocalId == nil
    }
  func (s *WellbeingAlert) WellbeingAlertEndDate() *String {
    if s.wellbeingalert.WellbeingAlertEndDate == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingalert.WellbeingAlertEndDate = ((*String)(v))
      }
      }
      return s.wellbeingalert.WellbeingAlertEndDate
    }
  func (s *WellbeingAlert) WellbeingAlertEndDate_IsNil() bool {
    return s.WellbeingAlertEndDate == nil || s.wellbeingalert.WellbeingAlertEndDate == nil
    }
  func (s *WellbeingAlert) AlertSeverity() *String {
    if s.wellbeingalert.AlertSeverity == nil {
    if v, ok:= StringPointer(""); ok {
      s.wellbeingalert.AlertSeverity = ((*String)(v))
      }
      }
      return s.wellbeingalert.AlertSeverity
    }
  func (s *WellbeingAlert) AlertSeverity_IsNil() bool {
    return s.AlertSeverity == nil || s.wellbeingalert.AlertSeverity == nil
    }

func (n *SystemRole_Role) Unset(key string) *SystemRole_Role {
        switch key {
  case "RoleId":
   n.systemrole_role.RoleId = nil
  case "RoleScopeList":
   n.systemrole_role.RoleScopeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_Role")
        }
        return n
}

func (n *SystemRole_Role) SetProperty(key string, value interface{}) *SystemRole_Role {
        if n == nil {
                n, _ = SystemRole_RolePointer(SystemRole_Role{})
        }
        switch key {
    case "RoleId":
    
    if v, ok:= StringPointer(value); ok {
      n.systemrole_role.RoleId = ((*String)(v))
      }
    case "RoleScopeList":
    if v, ok:= SystemRole_RoleScopeListPointer(value); ok {
      n.systemrole_role.RoleScopeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole_Role")
        }
        return n
}

  func (s *SystemRole_Role) RoleId() *String {
    if s.systemrole_role.RoleId == nil {
    if v, ok:= StringPointer(""); ok {
      s.systemrole_role.RoleId = ((*String)(v))
      }
      }
      return s.systemrole_role.RoleId
    }
  func (s *SystemRole_Role) RoleId_IsNil() bool {
    return s.RoleId == nil || s.systemrole_role.RoleId == nil
    }
  func (s *SystemRole_Role) RoleScopeList() *SystemRole_RoleScopeList {
    if s.systemrole_role.RoleScopeList == nil {
     if v, ok:= SystemRole_RoleScopeListPointer(SystemRole_RoleScopeList{}); ok {
      s.systemrole_role.RoleScopeList = v
      }
      }
      return s.systemrole_role.RoleScopeList
    }
  func (s *SystemRole_Role) RoleScopeList_IsNil() bool {
    return s.RoleScopeList == nil || s.systemrole_role.RoleScopeList == nil
    }

func (n *CensusStaffType) Unset(key string) *CensusStaffType {
        switch key {
  case "Headcount":
   n.censusstafftype.Headcount = nil
  case "PrimaryFTE":
   n.censusstafftype.PrimaryFTE = nil
  case "CohortGender":
   n.censusstafftype.CohortGender = nil
  case "JobFTE":
   n.censusstafftype.JobFTE = nil
  case "StaffActivity":
   n.censusstafftype.StaffActivity = nil
  case "StaffCohortId":
   n.censusstafftype.StaffCohortId = nil
  case "CohortIndigenousType":
   n.censusstafftype.CohortIndigenousType = nil
  case "SecondaryFTE":
   n.censusstafftype.SecondaryFTE = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusStaffType")
        }
        return n
}

func (n *CensusStaffType) SetProperty(key string, value interface{}) *CensusStaffType {
        if n == nil {
                n, _ = CensusStaffTypePointer(CensusStaffType{})
        }
        switch key {
    case "Headcount":
    
    if v, ok:= IntPointer(value); ok {
      n.censusstafftype.Headcount = ((*Int)(v))
      }
    case "PrimaryFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.censusstafftype.PrimaryFTE = ((*Float)(v))
      }
    case "CohortGender":
    
    if v, ok:= StringPointer(value); ok {
      n.censusstafftype.CohortGender = ((*String)(v))
      }
    case "JobFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.censusstafftype.JobFTE = ((*Float)(v))
      }
    case "StaffActivity":
    if v, ok:= StaffActivityExtensionTypePointer(value); ok {
      n.censusstafftype.StaffActivity = v
      }
    case "StaffCohortId":
    
    if v, ok:= StringPointer(value); ok {
      n.censusstafftype.StaffCohortId = ((*LocalIdType)(v))
      }
    case "CohortIndigenousType":
    
    if v, ok:= StringPointer(value); ok {
      n.censusstafftype.CohortIndigenousType = ((*String)(v))
      }
    case "SecondaryFTE":
    
    if v, ok:= FloatPointer(value); ok {
      n.censusstafftype.SecondaryFTE = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "CensusStaffType")
        }
        return n
}

  func (s *CensusStaffType) Headcount() *Int {
    if s.censusstafftype.Headcount == nil {
    if v, ok:= IntPointer(0); ok {
      s.censusstafftype.Headcount = ((*Int)(v))
      }
      }
      return s.censusstafftype.Headcount
    }
  func (s *CensusStaffType) Headcount_IsNil() bool {
    return s.Headcount == nil || s.censusstafftype.Headcount == nil
    }
  func (s *CensusStaffType) PrimaryFTE() *Float {
    if s.censusstafftype.PrimaryFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.censusstafftype.PrimaryFTE = ((*Float)(v))
      }
      }
      return s.censusstafftype.PrimaryFTE
    }
  func (s *CensusStaffType) PrimaryFTE_IsNil() bool {
    return s.PrimaryFTE == nil || s.censusstafftype.PrimaryFTE == nil
    }
  func (s *CensusStaffType) CohortGender() *String {
    if s.censusstafftype.CohortGender == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusstafftype.CohortGender = ((*String)(v))
      }
      }
      return s.censusstafftype.CohortGender
    }
  func (s *CensusStaffType) CohortGender_IsNil() bool {
    return s.CohortGender == nil || s.censusstafftype.CohortGender == nil
    }
  func (s *CensusStaffType) JobFTE() *Float {
    if s.censusstafftype.JobFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.censusstafftype.JobFTE = ((*Float)(v))
      }
      }
      return s.censusstafftype.JobFTE
    }
  func (s *CensusStaffType) JobFTE_IsNil() bool {
    return s.JobFTE == nil || s.censusstafftype.JobFTE == nil
    }
  func (s *CensusStaffType) StaffActivity() *StaffActivityExtensionType {
    if s.censusstafftype.StaffActivity == nil {
     if v, ok:= StaffActivityExtensionTypePointer(StaffActivityExtensionType{}); ok {
      s.censusstafftype.StaffActivity = v
      }
      }
      return s.censusstafftype.StaffActivity
    }
  func (s *CensusStaffType) StaffActivity_IsNil() bool {
    return s.StaffActivity == nil || s.censusstafftype.StaffActivity == nil
    }
  func (s *CensusStaffType) StaffCohortId() *LocalIdType {
    if s.censusstafftype.StaffCohortId == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusstafftype.StaffCohortId = ((*LocalIdType)(v))
      }
      }
      return s.censusstafftype.StaffCohortId
    }
  func (s *CensusStaffType) StaffCohortId_IsNil() bool {
    return s.StaffCohortId == nil || s.censusstafftype.StaffCohortId == nil
    }
  func (s *CensusStaffType) CohortIndigenousType() *String {
    if s.censusstafftype.CohortIndigenousType == nil {
    if v, ok:= StringPointer(""); ok {
      s.censusstafftype.CohortIndigenousType = ((*String)(v))
      }
      }
      return s.censusstafftype.CohortIndigenousType
    }
  func (s *CensusStaffType) CohortIndigenousType_IsNil() bool {
    return s.CohortIndigenousType == nil || s.censusstafftype.CohortIndigenousType == nil
    }
  func (s *CensusStaffType) SecondaryFTE() *Float {
    if s.censusstafftype.SecondaryFTE == nil {
    if v, ok:= FloatPointer(0); ok {
      s.censusstafftype.SecondaryFTE = ((*Float)(v))
      }
      }
      return s.censusstafftype.SecondaryFTE
    }
  func (s *CensusStaffType) SecondaryFTE_IsNil() bool {
    return s.SecondaryFTE == nil || s.censusstafftype.SecondaryFTE == nil
    }

func (n *PurchasingItemType) Unset(key string) *PurchasingItemType {
        switch key {
  case "Quantity":
   n.purchasingitemtype.Quantity = nil
  case "LocalItemId":
   n.purchasingitemtype.LocalItemId = nil
  case "TotalCost":
   n.purchasingitemtype.TotalCost = nil
  case "UnitCost":
   n.purchasingitemtype.UnitCost = nil
  case "ItemDescription":
   n.purchasingitemtype.ItemDescription = nil
  case "QuantityDelivered":
   n.purchasingitemtype.QuantityDelivered = nil
  case "ExpenseAccounts":
   n.purchasingitemtype.ExpenseAccounts = nil
  case "CancelledOrder":
   n.purchasingitemtype.CancelledOrder = nil
  case "TaxRate":
   n.purchasingitemtype.TaxRate = nil
  case "ItemNumber":
   n.purchasingitemtype.ItemNumber = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PurchasingItemType")
        }
        return n
}

func (n *PurchasingItemType) SetProperty(key string, value interface{}) *PurchasingItemType {
        if n == nil {
                n, _ = PurchasingItemTypePointer(PurchasingItemType{})
        }
        switch key {
    case "Quantity":
    
    if v, ok:= StringPointer(value); ok {
      n.purchasingitemtype.Quantity = ((*String)(v))
      }
    case "LocalItemId":
    
    if v, ok:= StringPointer(value); ok {
      n.purchasingitemtype.LocalItemId = ((*LocalIdType)(v))
      }
    case "TotalCost":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.purchasingitemtype.TotalCost = v
      }
    case "UnitCost":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.purchasingitemtype.UnitCost = v
      }
    case "ItemDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.purchasingitemtype.ItemDescription = ((*String)(v))
      }
    case "QuantityDelivered":
    
    if v, ok:= StringPointer(value); ok {
      n.purchasingitemtype.QuantityDelivered = ((*String)(v))
      }
    case "ExpenseAccounts":
    if v, ok:= ExpenseAccountsTypePointer(value); ok {
      n.purchasingitemtype.ExpenseAccounts = v
      }
    case "CancelledOrder":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.purchasingitemtype.CancelledOrder = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "TaxRate":
    
    if v, ok:= FloatPointer(value); ok {
      n.purchasingitemtype.TaxRate = ((*Float)(v))
      }
    case "ItemNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.purchasingitemtype.ItemNumber = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PurchasingItemType")
        }
        return n
}

  func (s *PurchasingItemType) Quantity() *String {
    if s.purchasingitemtype.Quantity == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchasingitemtype.Quantity = ((*String)(v))
      }
      }
      return s.purchasingitemtype.Quantity
    }
  func (s *PurchasingItemType) Quantity_IsNil() bool {
    return s.Quantity == nil || s.purchasingitemtype.Quantity == nil
    }
  func (s *PurchasingItemType) LocalItemId() *LocalIdType {
    if s.purchasingitemtype.LocalItemId == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchasingitemtype.LocalItemId = ((*LocalIdType)(v))
      }
      }
      return s.purchasingitemtype.LocalItemId
    }
  func (s *PurchasingItemType) LocalItemId_IsNil() bool {
    return s.LocalItemId == nil || s.purchasingitemtype.LocalItemId == nil
    }
  func (s *PurchasingItemType) TotalCost() *MonetaryAmountType {
    if s.purchasingitemtype.TotalCost == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.purchasingitemtype.TotalCost = v
      }
      }
      return s.purchasingitemtype.TotalCost
    }
  func (s *PurchasingItemType) TotalCost_IsNil() bool {
    return s.TotalCost == nil || s.purchasingitemtype.TotalCost == nil
    }
  func (s *PurchasingItemType) UnitCost() *MonetaryAmountType {
    if s.purchasingitemtype.UnitCost == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.purchasingitemtype.UnitCost = v
      }
      }
      return s.purchasingitemtype.UnitCost
    }
  func (s *PurchasingItemType) UnitCost_IsNil() bool {
    return s.UnitCost == nil || s.purchasingitemtype.UnitCost == nil
    }
  func (s *PurchasingItemType) ItemDescription() *String {
    if s.purchasingitemtype.ItemDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchasingitemtype.ItemDescription = ((*String)(v))
      }
      }
      return s.purchasingitemtype.ItemDescription
    }
  func (s *PurchasingItemType) ItemDescription_IsNil() bool {
    return s.ItemDescription == nil || s.purchasingitemtype.ItemDescription == nil
    }
  func (s *PurchasingItemType) QuantityDelivered() *String {
    if s.purchasingitemtype.QuantityDelivered == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchasingitemtype.QuantityDelivered = ((*String)(v))
      }
      }
      return s.purchasingitemtype.QuantityDelivered
    }
  func (s *PurchasingItemType) QuantityDelivered_IsNil() bool {
    return s.QuantityDelivered == nil || s.purchasingitemtype.QuantityDelivered == nil
    }
  func (s *PurchasingItemType) ExpenseAccounts() *ExpenseAccountsType {
    if s.purchasingitemtype.ExpenseAccounts == nil {
     if v, ok:= ExpenseAccountsTypePointer(ExpenseAccountsType{}); ok {
      s.purchasingitemtype.ExpenseAccounts = v
      }
      }
      return s.purchasingitemtype.ExpenseAccounts
    }
  func (s *PurchasingItemType) ExpenseAccounts_IsNil() bool {
    return s.ExpenseAccounts == nil || s.purchasingitemtype.ExpenseAccounts == nil
    }
  func (s *PurchasingItemType) CancelledOrder() *AUCodeSetsYesOrNoCategoryType {
    if s.purchasingitemtype.CancelledOrder == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchasingitemtype.CancelledOrder = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.purchasingitemtype.CancelledOrder
    }
  func (s *PurchasingItemType) CancelledOrder_IsNil() bool {
    return s.CancelledOrder == nil || s.purchasingitemtype.CancelledOrder == nil
    }
  func (s *PurchasingItemType) TaxRate() *Float {
    if s.purchasingitemtype.TaxRate == nil {
    if v, ok:= FloatPointer(0); ok {
      s.purchasingitemtype.TaxRate = ((*Float)(v))
      }
      }
      return s.purchasingitemtype.TaxRate
    }
  func (s *PurchasingItemType) TaxRate_IsNil() bool {
    return s.TaxRate == nil || s.purchasingitemtype.TaxRate == nil
    }
  func (s *PurchasingItemType) ItemNumber() *String {
    if s.purchasingitemtype.ItemNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.purchasingitemtype.ItemNumber = ((*String)(v))
      }
      }
      return s.purchasingitemtype.ItemNumber
    }
  func (s *PurchasingItemType) ItemNumber_IsNil() bool {
    return s.ItemNumber == nil || s.purchasingitemtype.ItemNumber == nil
    }

func (n *AbstractContentPackageType_TextData) Unset(key string) *AbstractContentPackageType_TextData {
        switch key {
  case "Value":
   n.abstractcontentpackagetype_textdata.Value = nil
  case "MIMEType":
   n.abstractcontentpackagetype_textdata.MIMEType = nil
  case "Description":
   n.abstractcontentpackagetype_textdata.Description = nil
  case "FileName":
   n.abstractcontentpackagetype_textdata.FileName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_TextData")
        }
        return n
}

func (n *AbstractContentPackageType_TextData) SetProperty(key string, value interface{}) *AbstractContentPackageType_TextData {
        if n == nil {
                n, _ = AbstractContentPackageType_TextDataPointer(AbstractContentPackageType_TextData{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype_textdata.Value = ((*String)(v))
      }
    case "MIMEType":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype_textdata.MIMEType = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype_textdata.Description = ((*String)(v))
      }
    case "FileName":
    
    if v, ok:= StringPointer(value); ok {
      n.abstractcontentpackagetype_textdata.FileName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "AbstractContentPackageType_TextData")
        }
        return n
}

  func (s *AbstractContentPackageType_TextData) Value() *String {
    if s.abstractcontentpackagetype_textdata.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype_textdata.Value = ((*String)(v))
      }
      }
      return s.abstractcontentpackagetype_textdata.Value
    }
  func (s *AbstractContentPackageType_TextData) Value_IsNil() bool {
    return s.Value == nil || s.abstractcontentpackagetype_textdata.Value == nil
    }
  func (s *AbstractContentPackageType_TextData) MIMEType() *String {
    if s.abstractcontentpackagetype_textdata.MIMEType == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype_textdata.MIMEType = ((*String)(v))
      }
      }
      return s.abstractcontentpackagetype_textdata.MIMEType
    }
  func (s *AbstractContentPackageType_TextData) MIMEType_IsNil() bool {
    return s.MIMEType == nil || s.abstractcontentpackagetype_textdata.MIMEType == nil
    }
  func (s *AbstractContentPackageType_TextData) Description() *String {
    if s.abstractcontentpackagetype_textdata.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype_textdata.Description = ((*String)(v))
      }
      }
      return s.abstractcontentpackagetype_textdata.Description
    }
  func (s *AbstractContentPackageType_TextData) Description_IsNil() bool {
    return s.Description == nil || s.abstractcontentpackagetype_textdata.Description == nil
    }
  func (s *AbstractContentPackageType_TextData) FileName() *String {
    if s.abstractcontentpackagetype_textdata.FileName == nil {
    if v, ok:= StringPointer(""); ok {
      s.abstractcontentpackagetype_textdata.FileName = ((*String)(v))
      }
      }
      return s.abstractcontentpackagetype_textdata.FileName
    }
  func (s *AbstractContentPackageType_TextData) FileName_IsNil() bool {
    return s.FileName == nil || s.abstractcontentpackagetype_textdata.FileName == nil
    }

func (n *LearningStandardType) Unset(key string) *LearningStandardType {
        switch key {
  case "LearningStandardLocalId":
   n.learningstandardtype.LearningStandardLocalId = nil
  case "LearningStandardItemRefId":
   n.learningstandardtype.LearningStandardItemRefId = nil
  case "LearningStandardURL":
   n.learningstandardtype.LearningStandardURL = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningStandardType")
        }
        return n
}

func (n *LearningStandardType) SetProperty(key string, value interface{}) *LearningStandardType {
        if n == nil {
                n, _ = LearningStandardTypePointer(LearningStandardType{})
        }
        switch key {
    case "LearningStandardLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandardtype.LearningStandardLocalId = ((*LocalIdType)(v))
      }
    case "LearningStandardItemRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandardtype.LearningStandardItemRefId = ((*String)(v))
      }
    case "LearningStandardURL":
    
    if v, ok:= StringPointer(value); ok {
      n.learningstandardtype.LearningStandardURL = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LearningStandardType")
        }
        return n
}

  func (s *LearningStandardType) LearningStandardLocalId() *LocalIdType {
    if s.learningstandardtype.LearningStandardLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandardtype.LearningStandardLocalId = ((*LocalIdType)(v))
      }
      }
      return s.learningstandardtype.LearningStandardLocalId
    }
  func (s *LearningStandardType) LearningStandardLocalId_IsNil() bool {
    return s.LearningStandardLocalId == nil || s.learningstandardtype.LearningStandardLocalId == nil
    }
  func (s *LearningStandardType) LearningStandardItemRefId() *String {
    if s.learningstandardtype.LearningStandardItemRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandardtype.LearningStandardItemRefId = ((*String)(v))
      }
      }
      return s.learningstandardtype.LearningStandardItemRefId
    }
  func (s *LearningStandardType) LearningStandardItemRefId_IsNil() bool {
    return s.LearningStandardItemRefId == nil || s.learningstandardtype.LearningStandardItemRefId == nil
    }
  func (s *LearningStandardType) LearningStandardURL() *String {
    if s.learningstandardtype.LearningStandardURL == nil {
    if v, ok:= StringPointer(""); ok {
      s.learningstandardtype.LearningStandardURL = ((*String)(v))
      }
      }
      return s.learningstandardtype.LearningStandardURL
    }
  func (s *LearningStandardType) LearningStandardURL_IsNil() bool {
    return s.LearningStandardURL == nil || s.learningstandardtype.LearningStandardURL == nil
    }

func (n *SoftwareRequirementType) Unset(key string) *SoftwareRequirementType {
        switch key {
  case "Vendor":
   n.softwarerequirementtype.Vendor = nil
  case "OS":
   n.softwarerequirementtype.OS = nil
  case "Version":
   n.softwarerequirementtype.Version = nil
  case "SoftwareTitle":
   n.softwarerequirementtype.SoftwareTitle = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SoftwareRequirementType")
        }
        return n
}

func (n *SoftwareRequirementType) SetProperty(key string, value interface{}) *SoftwareRequirementType {
        if n == nil {
                n, _ = SoftwareRequirementTypePointer(SoftwareRequirementType{})
        }
        switch key {
    case "Vendor":
    
    if v, ok:= StringPointer(value); ok {
      n.softwarerequirementtype.Vendor = ((*String)(v))
      }
    case "OS":
    
    if v, ok:= StringPointer(value); ok {
      n.softwarerequirementtype.OS = ((*String)(v))
      }
    case "Version":
    
    if v, ok:= StringPointer(value); ok {
      n.softwarerequirementtype.Version = ((*String)(v))
      }
    case "SoftwareTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.softwarerequirementtype.SoftwareTitle = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SoftwareRequirementType")
        }
        return n
}

  func (s *SoftwareRequirementType) Vendor() *String {
    if s.softwarerequirementtype.Vendor == nil {
    if v, ok:= StringPointer(""); ok {
      s.softwarerequirementtype.Vendor = ((*String)(v))
      }
      }
      return s.softwarerequirementtype.Vendor
    }
  func (s *SoftwareRequirementType) Vendor_IsNil() bool {
    return s.Vendor == nil || s.softwarerequirementtype.Vendor == nil
    }
  func (s *SoftwareRequirementType) OS() *String {
    if s.softwarerequirementtype.OS == nil {
    if v, ok:= StringPointer(""); ok {
      s.softwarerequirementtype.OS = ((*String)(v))
      }
      }
      return s.softwarerequirementtype.OS
    }
  func (s *SoftwareRequirementType) OS_IsNil() bool {
    return s.OS == nil || s.softwarerequirementtype.OS == nil
    }
  func (s *SoftwareRequirementType) Version() *String {
    if s.softwarerequirementtype.Version == nil {
    if v, ok:= StringPointer(""); ok {
      s.softwarerequirementtype.Version = ((*String)(v))
      }
      }
      return s.softwarerequirementtype.Version
    }
  func (s *SoftwareRequirementType) Version_IsNil() bool {
    return s.Version == nil || s.softwarerequirementtype.Version == nil
    }
  func (s *SoftwareRequirementType) SoftwareTitle() *String {
    if s.softwarerequirementtype.SoftwareTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.softwarerequirementtype.SoftwareTitle = ((*String)(v))
      }
      }
      return s.softwarerequirementtype.SoftwareTitle
    }
  func (s *SoftwareRequirementType) SoftwareTitle_IsNil() bool {
    return s.SoftwareTitle == nil || s.softwarerequirementtype.SoftwareTitle == nil
    }

func (n *Invoice_InvoicedEntity) Unset(key string) *Invoice_InvoicedEntity {
        switch key {
  case "SIF_RefObject":
   n.invoice_invoicedentity.SIF_RefObject = nil
  case "Value":
   n.invoice_invoicedentity.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Invoice_InvoicedEntity")
        }
        return n
}

func (n *Invoice_InvoicedEntity) SetProperty(key string, value interface{}) *Invoice_InvoicedEntity {
        if n == nil {
                n, _ = Invoice_InvoicedEntityPointer(Invoice_InvoicedEntity{})
        }
        switch key {
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice_invoicedentity.SIF_RefObject = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.invoice_invoicedentity.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Invoice_InvoicedEntity")
        }
        return n
}

  func (s *Invoice_InvoicedEntity) SIF_RefObject() *String {
    if s.invoice_invoicedentity.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice_invoicedentity.SIF_RefObject = ((*String)(v))
      }
      }
      return s.invoice_invoicedentity.SIF_RefObject
    }
  func (s *Invoice_InvoicedEntity) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.invoice_invoicedentity.SIF_RefObject == nil
    }
  func (s *Invoice_InvoicedEntity) Value() *String {
    if s.invoice_invoicedentity.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.invoice_invoicedentity.Value = ((*String)(v))
      }
      }
      return s.invoice_invoicedentity.Value
    }
  func (s *Invoice_InvoicedEntity) Value_IsNil() bool {
    return s.Value == nil || s.invoice_invoicedentity.Value == nil
    }

func (n *StudentAttendanceCollection) Unset(key string) *StudentAttendanceCollection {
        switch key {
  case "StudentAttendanceCollectionYear":
   n.studentattendancecollection.StudentAttendanceCollectionYear = nil
  case "RefId":
   n.studentattendancecollection.RefId = nil
  case "RoundCode":
   n.studentattendancecollection.RoundCode = nil
  case "SIF_Metadata":
   n.studentattendancecollection.SIF_Metadata = nil
  case "LocalCodeList":
   n.studentattendancecollection.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.studentattendancecollection.SIF_ExtendedElements = nil
  case "ReportingAuthorityCommonwealthId":
   n.studentattendancecollection.ReportingAuthorityCommonwealthId = nil
  case "SoftwareVendorInfo":
   n.studentattendancecollection.SoftwareVendorInfo = nil
  case "StudentAttendanceCollectionReportingList":
   n.studentattendancecollection.StudentAttendanceCollectionReportingList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceCollection")
        }
        return n
}

func (n *StudentAttendanceCollection) SetProperty(key string, value interface{}) *StudentAttendanceCollection {
        if n == nil {
                n, _ = StudentAttendanceCollectionPointer(StudentAttendanceCollection{})
        }
        switch key {
    case "StudentAttendanceCollectionYear":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancecollection.StudentAttendanceCollectionYear = ((*SchoolYearType)(v))
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancecollection.RefId = ((*RefIdType)(v))
      }
    case "RoundCode":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancecollection.RoundCode = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.studentattendancecollection.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.studentattendancecollection.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.studentattendancecollection.SIF_ExtendedElements = v
      }
    case "ReportingAuthorityCommonwealthId":
    
    if v, ok:= StringPointer(value); ok {
      n.studentattendancecollection.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
    case "SoftwareVendorInfo":
    if v, ok:= SoftwareVendorInfoContainerTypePointer(value); ok {
      n.studentattendancecollection.SoftwareVendorInfo = v
      }
    case "StudentAttendanceCollectionReportingList":
    if v, ok:= StudentAttendanceCollectionReportingListTypePointer(value); ok {
      n.studentattendancecollection.StudentAttendanceCollectionReportingList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StudentAttendanceCollection")
        }
        return n
}

  func (s *StudentAttendanceCollection) StudentAttendanceCollectionYear() *SchoolYearType {
    if s.studentattendancecollection.StudentAttendanceCollectionYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancecollection.StudentAttendanceCollectionYear = ((*SchoolYearType)(v))
      }
      }
      return s.studentattendancecollection.StudentAttendanceCollectionYear
    }
  func (s *StudentAttendanceCollection) StudentAttendanceCollectionYear_IsNil() bool {
    return s.StudentAttendanceCollectionYear == nil || s.studentattendancecollection.StudentAttendanceCollectionYear == nil
    }
  func (s *StudentAttendanceCollection) RefId() *RefIdType {
    if s.studentattendancecollection.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancecollection.RefId = ((*RefIdType)(v))
      }
      }
      return s.studentattendancecollection.RefId
    }
  func (s *StudentAttendanceCollection) RefId_IsNil() bool {
    return s.RefId == nil || s.studentattendancecollection.RefId == nil
    }
  func (s *StudentAttendanceCollection) RoundCode() *String {
    if s.studentattendancecollection.RoundCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancecollection.RoundCode = ((*String)(v))
      }
      }
      return s.studentattendancecollection.RoundCode
    }
  func (s *StudentAttendanceCollection) RoundCode_IsNil() bool {
    return s.RoundCode == nil || s.studentattendancecollection.RoundCode == nil
    }
  func (s *StudentAttendanceCollection) SIF_Metadata() *SIF_MetadataType {
    if s.studentattendancecollection.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.studentattendancecollection.SIF_Metadata = v
      }
      }
      return s.studentattendancecollection.SIF_Metadata
    }
  func (s *StudentAttendanceCollection) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.studentattendancecollection.SIF_Metadata == nil
    }
  func (s *StudentAttendanceCollection) LocalCodeList() *LocalCodeListType {
    if s.studentattendancecollection.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.studentattendancecollection.LocalCodeList = v
      }
      }
      return s.studentattendancecollection.LocalCodeList
    }
  func (s *StudentAttendanceCollection) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.studentattendancecollection.LocalCodeList == nil
    }
  func (s *StudentAttendanceCollection) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.studentattendancecollection.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.studentattendancecollection.SIF_ExtendedElements = v
      }
      }
      return s.studentattendancecollection.SIF_ExtendedElements
    }
  func (s *StudentAttendanceCollection) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.studentattendancecollection.SIF_ExtendedElements == nil
    }
  func (s *StudentAttendanceCollection) ReportingAuthorityCommonwealthId() *String {
    if s.studentattendancecollection.ReportingAuthorityCommonwealthId == nil {
    if v, ok:= StringPointer(""); ok {
      s.studentattendancecollection.ReportingAuthorityCommonwealthId = ((*String)(v))
      }
      }
      return s.studentattendancecollection.ReportingAuthorityCommonwealthId
    }
  func (s *StudentAttendanceCollection) ReportingAuthorityCommonwealthId_IsNil() bool {
    return s.ReportingAuthorityCommonwealthId == nil || s.studentattendancecollection.ReportingAuthorityCommonwealthId == nil
    }
  func (s *StudentAttendanceCollection) SoftwareVendorInfo() *SoftwareVendorInfoContainerType {
    if s.studentattendancecollection.SoftwareVendorInfo == nil {
     if v, ok:= SoftwareVendorInfoContainerTypePointer(SoftwareVendorInfoContainerType{}); ok {
      s.studentattendancecollection.SoftwareVendorInfo = v
      }
      }
      return s.studentattendancecollection.SoftwareVendorInfo
    }
  func (s *StudentAttendanceCollection) SoftwareVendorInfo_IsNil() bool {
    return s.SoftwareVendorInfo == nil || s.studentattendancecollection.SoftwareVendorInfo == nil
    }
  func (s *StudentAttendanceCollection) StudentAttendanceCollectionReportingList() *StudentAttendanceCollectionReportingListType {
    if s.studentattendancecollection.StudentAttendanceCollectionReportingList == nil {
     if v, ok:= StudentAttendanceCollectionReportingListTypePointer(StudentAttendanceCollectionReportingListType{}); ok {
      s.studentattendancecollection.StudentAttendanceCollectionReportingList = v
      }
      }
      return s.studentattendancecollection.StudentAttendanceCollectionReportingList
    }
  func (s *StudentAttendanceCollection) StudentAttendanceCollectionReportingList_IsNil() bool {
    return s.StudentAttendanceCollectionReportingList == nil || s.studentattendancecollection.StudentAttendanceCollectionReportingList == nil
    }

func (n *DebitOrCreditAmountType) Unset(key string) *DebitOrCreditAmountType {
        switch key {
  case "Type":
   n.debitorcreditamounttype.Type = nil
  case "Currency":
   n.debitorcreditamounttype.Currency = nil
  case "Value":
   n.debitorcreditamounttype.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DebitOrCreditAmountType")
        }
        return n
}

func (n *DebitOrCreditAmountType) SetProperty(key string, value interface{}) *DebitOrCreditAmountType {
        if n == nil {
                n, _ = DebitOrCreditAmountTypePointer(DebitOrCreditAmountType{})
        }
        switch key {
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.debitorcreditamounttype.Type = ((*String)(v))
      }
    case "Currency":
        if !CodesetContains(ISO4217CurrencyNamesAndCodeElementsType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "ISO4217CurrencyNamesAndCodeElementsType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.debitorcreditamounttype.Currency = ((*ISO4217CurrencyNamesAndCodeElementsType)(v))
      }
    case "Value":
    
    if v, ok:= FloatPointer(value); ok {
      n.debitorcreditamounttype.Value = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DebitOrCreditAmountType")
        }
        return n
}

  func (s *DebitOrCreditAmountType) Type() *String {
    if s.debitorcreditamounttype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.debitorcreditamounttype.Type = ((*String)(v))
      }
      }
      return s.debitorcreditamounttype.Type
    }
  func (s *DebitOrCreditAmountType) Type_IsNil() bool {
    return s.Type == nil || s.debitorcreditamounttype.Type == nil
    }
  func (s *DebitOrCreditAmountType) Currency() *ISO4217CurrencyNamesAndCodeElementsType {
    if s.debitorcreditamounttype.Currency == nil {
    if v, ok:= StringPointer(""); ok {
      s.debitorcreditamounttype.Currency = ((*ISO4217CurrencyNamesAndCodeElementsType)(v))
      }
      }
      return s.debitorcreditamounttype.Currency
    }
  func (s *DebitOrCreditAmountType) Currency_IsNil() bool {
    return s.Currency == nil || s.debitorcreditamounttype.Currency == nil
    }
  func (s *DebitOrCreditAmountType) Value() *Float {
    if s.debitorcreditamounttype.Value == nil {
    if v, ok:= FloatPointer(0); ok {
      s.debitorcreditamounttype.Value = ((*Float)(v))
      }
      }
      return s.debitorcreditamounttype.Value
    }
  func (s *DebitOrCreditAmountType) Value_IsNil() bool {
    return s.Value == nil || s.debitorcreditamounttype.Value == nil
    }

func (n *SchoolCourseInfo) Unset(key string) *SchoolCourseInfo {
        switch key {
  case "RefId":
   n.schoolcourseinfo.RefId = nil
  case "CourseTitle":
   n.schoolcourseinfo.CourseTitle = nil
  case "SIF_Metadata":
   n.schoolcourseinfo.SIF_Metadata = nil
  case "Department":
   n.schoolcourseinfo.Department = nil
  case "SchoolLocalId":
   n.schoolcourseinfo.SchoolLocalId = nil
  case "SubjectAreaList":
   n.schoolcourseinfo.SubjectAreaList = nil
  case "CoreAcademicCourse":
   n.schoolcourseinfo.CoreAcademicCourse = nil
  case "Description":
   n.schoolcourseinfo.Description = nil
  case "CourseContent":
   n.schoolcourseinfo.CourseContent = nil
  case "CourseCredits":
   n.schoolcourseinfo.CourseCredits = nil
  case "LocalCodeList":
   n.schoolcourseinfo.LocalCodeList = nil
  case "DistrictCourseCode":
   n.schoolcourseinfo.DistrictCourseCode = nil
  case "GraduationRequirement":
   n.schoolcourseinfo.GraduationRequirement = nil
  case "SIF_ExtendedElements":
   n.schoolcourseinfo.SIF_ExtendedElements = nil
  case "InstructionalLevel":
   n.schoolcourseinfo.InstructionalLevel = nil
  case "SchoolYear":
   n.schoolcourseinfo.SchoolYear = nil
  case "TermInfoRefId":
   n.schoolcourseinfo.TermInfoRefId = nil
  case "SchoolInfoRefId":
   n.schoolcourseinfo.SchoolInfoRefId = nil
  case "StateCourseCode":
   n.schoolcourseinfo.StateCourseCode = nil
  case "CourseCode":
   n.schoolcourseinfo.CourseCode = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolCourseInfo")
        }
        return n
}

func (n *SchoolCourseInfo) SetProperty(key string, value interface{}) *SchoolCourseInfo {
        if n == nil {
                n, _ = SchoolCourseInfoPointer(SchoolCourseInfo{})
        }
        switch key {
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.RefId = ((*RefIdType)(v))
      }
    case "CourseTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.CourseTitle = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.schoolcourseinfo.SIF_Metadata = v
      }
    case "Department":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.Department = ((*String)(v))
      }
    case "SchoolLocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.SchoolLocalId = ((*LocalIdType)(v))
      }
    case "SubjectAreaList":
    if v, ok:= SubjectAreaListTypePointer(value); ok {
      n.schoolcourseinfo.SubjectAreaList = v
      }
    case "CoreAcademicCourse":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.CoreAcademicCourse = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.Description = ((*String)(v))
      }
    case "CourseContent":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.CourseContent = ((*String)(v))
      }
    case "CourseCredits":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.CourseCredits = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.schoolcourseinfo.LocalCodeList = v
      }
    case "DistrictCourseCode":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.DistrictCourseCode = ((*String)(v))
      }
    case "GraduationRequirement":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.GraduationRequirement = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.schoolcourseinfo.SIF_ExtendedElements = v
      }
    case "InstructionalLevel":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.InstructionalLevel = ((*String)(v))
      }
    case "SchoolYear":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.SchoolYear = ((*SchoolYearType)(v))
      }
    case "TermInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.TermInfoRefId = ((*String)(v))
      }
    case "SchoolInfoRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.SchoolInfoRefId = ((*String)(v))
      }
    case "StateCourseCode":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.StateCourseCode = ((*String)(v))
      }
    case "CourseCode":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolcourseinfo.CourseCode = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolCourseInfo")
        }
        return n
}

  func (s *SchoolCourseInfo) RefId() *RefIdType {
    if s.schoolcourseinfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.schoolcourseinfo.RefId
    }
  func (s *SchoolCourseInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.schoolcourseinfo.RefId == nil
    }
  func (s *SchoolCourseInfo) CourseTitle() *String {
    if s.schoolcourseinfo.CourseTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.CourseTitle = ((*String)(v))
      }
      }
      return s.schoolcourseinfo.CourseTitle
    }
  func (s *SchoolCourseInfo) CourseTitle_IsNil() bool {
    return s.CourseTitle == nil || s.schoolcourseinfo.CourseTitle == nil
    }
  func (s *SchoolCourseInfo) SIF_Metadata() *SIF_MetadataType {
    if s.schoolcourseinfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.schoolcourseinfo.SIF_Metadata = v
      }
      }
      return s.schoolcourseinfo.SIF_Metadata
    }
  func (s *SchoolCourseInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.schoolcourseinfo.SIF_Metadata == nil
    }
  func (s *SchoolCourseInfo) Department() *String {
    if s.schoolcourseinfo.Department == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.Department = ((*String)(v))
      }
      }
      return s.schoolcourseinfo.Department
    }
  func (s *SchoolCourseInfo) Department_IsNil() bool {
    return s.Department == nil || s.schoolcourseinfo.Department == nil
    }
  func (s *SchoolCourseInfo) SchoolLocalId() *LocalIdType {
    if s.schoolcourseinfo.SchoolLocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.SchoolLocalId = ((*LocalIdType)(v))
      }
      }
      return s.schoolcourseinfo.SchoolLocalId
    }
  func (s *SchoolCourseInfo) SchoolLocalId_IsNil() bool {
    return s.SchoolLocalId == nil || s.schoolcourseinfo.SchoolLocalId == nil
    }
  func (s *SchoolCourseInfo) SubjectAreaList() *SubjectAreaListType {
    if s.schoolcourseinfo.SubjectAreaList == nil {
     if v, ok:= SubjectAreaListTypePointer(SubjectAreaListType{}); ok {
      s.schoolcourseinfo.SubjectAreaList = v
      }
      }
      return s.schoolcourseinfo.SubjectAreaList
    }
  func (s *SchoolCourseInfo) SubjectAreaList_IsNil() bool {
    return s.SubjectAreaList == nil || s.schoolcourseinfo.SubjectAreaList == nil
    }
  func (s *SchoolCourseInfo) CoreAcademicCourse() *AUCodeSetsYesOrNoCategoryType {
    if s.schoolcourseinfo.CoreAcademicCourse == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.CoreAcademicCourse = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.schoolcourseinfo.CoreAcademicCourse
    }
  func (s *SchoolCourseInfo) CoreAcademicCourse_IsNil() bool {
    return s.CoreAcademicCourse == nil || s.schoolcourseinfo.CoreAcademicCourse == nil
    }
  func (s *SchoolCourseInfo) Description() *String {
    if s.schoolcourseinfo.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.Description = ((*String)(v))
      }
      }
      return s.schoolcourseinfo.Description
    }
  func (s *SchoolCourseInfo) Description_IsNil() bool {
    return s.Description == nil || s.schoolcourseinfo.Description == nil
    }
  func (s *SchoolCourseInfo) CourseContent() *String {
    if s.schoolcourseinfo.CourseContent == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.CourseContent = ((*String)(v))
      }
      }
      return s.schoolcourseinfo.CourseContent
    }
  func (s *SchoolCourseInfo) CourseContent_IsNil() bool {
    return s.CourseContent == nil || s.schoolcourseinfo.CourseContent == nil
    }
  func (s *SchoolCourseInfo) CourseCredits() *String {
    if s.schoolcourseinfo.CourseCredits == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.CourseCredits = ((*String)(v))
      }
      }
      return s.schoolcourseinfo.CourseCredits
    }
  func (s *SchoolCourseInfo) CourseCredits_IsNil() bool {
    return s.CourseCredits == nil || s.schoolcourseinfo.CourseCredits == nil
    }
  func (s *SchoolCourseInfo) LocalCodeList() *LocalCodeListType {
    if s.schoolcourseinfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.schoolcourseinfo.LocalCodeList = v
      }
      }
      return s.schoolcourseinfo.LocalCodeList
    }
  func (s *SchoolCourseInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.schoolcourseinfo.LocalCodeList == nil
    }
  func (s *SchoolCourseInfo) DistrictCourseCode() *String {
    if s.schoolcourseinfo.DistrictCourseCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.DistrictCourseCode = ((*String)(v))
      }
      }
      return s.schoolcourseinfo.DistrictCourseCode
    }
  func (s *SchoolCourseInfo) DistrictCourseCode_IsNil() bool {
    return s.DistrictCourseCode == nil || s.schoolcourseinfo.DistrictCourseCode == nil
    }
  func (s *SchoolCourseInfo) GraduationRequirement() *AUCodeSetsYesOrNoCategoryType {
    if s.schoolcourseinfo.GraduationRequirement == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.GraduationRequirement = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.schoolcourseinfo.GraduationRequirement
    }
  func (s *SchoolCourseInfo) GraduationRequirement_IsNil() bool {
    return s.GraduationRequirement == nil || s.schoolcourseinfo.GraduationRequirement == nil
    }
  func (s *SchoolCourseInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.schoolcourseinfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.schoolcourseinfo.SIF_ExtendedElements = v
      }
      }
      return s.schoolcourseinfo.SIF_ExtendedElements
    }
  func (s *SchoolCourseInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.schoolcourseinfo.SIF_ExtendedElements == nil
    }
  func (s *SchoolCourseInfo) InstructionalLevel() *String {
    if s.schoolcourseinfo.InstructionalLevel == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.InstructionalLevel = ((*String)(v))
      }
      }
      return s.schoolcourseinfo.InstructionalLevel
    }
  func (s *SchoolCourseInfo) InstructionalLevel_IsNil() bool {
    return s.InstructionalLevel == nil || s.schoolcourseinfo.InstructionalLevel == nil
    }
  func (s *SchoolCourseInfo) SchoolYear() *SchoolYearType {
    if s.schoolcourseinfo.SchoolYear == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.SchoolYear = ((*SchoolYearType)(v))
      }
      }
      return s.schoolcourseinfo.SchoolYear
    }
  func (s *SchoolCourseInfo) SchoolYear_IsNil() bool {
    return s.SchoolYear == nil || s.schoolcourseinfo.SchoolYear == nil
    }
  func (s *SchoolCourseInfo) TermInfoRefId() *String {
    if s.schoolcourseinfo.TermInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.TermInfoRefId = ((*String)(v))
      }
      }
      return s.schoolcourseinfo.TermInfoRefId
    }
  func (s *SchoolCourseInfo) TermInfoRefId_IsNil() bool {
    return s.TermInfoRefId == nil || s.schoolcourseinfo.TermInfoRefId == nil
    }
  func (s *SchoolCourseInfo) SchoolInfoRefId() *String {
    if s.schoolcourseinfo.SchoolInfoRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.SchoolInfoRefId = ((*String)(v))
      }
      }
      return s.schoolcourseinfo.SchoolInfoRefId
    }
  func (s *SchoolCourseInfo) SchoolInfoRefId_IsNil() bool {
    return s.SchoolInfoRefId == nil || s.schoolcourseinfo.SchoolInfoRefId == nil
    }
  func (s *SchoolCourseInfo) StateCourseCode() *String {
    if s.schoolcourseinfo.StateCourseCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.StateCourseCode = ((*String)(v))
      }
      }
      return s.schoolcourseinfo.StateCourseCode
    }
  func (s *SchoolCourseInfo) StateCourseCode_IsNil() bool {
    return s.StateCourseCode == nil || s.schoolcourseinfo.StateCourseCode == nil
    }
  func (s *SchoolCourseInfo) CourseCode() *String {
    if s.schoolcourseinfo.CourseCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolcourseinfo.CourseCode = ((*String)(v))
      }
      }
      return s.schoolcourseinfo.CourseCode
    }
  func (s *SchoolCourseInfo) CourseCode_IsNil() bool {
    return s.CourseCode == nil || s.schoolcourseinfo.CourseCode == nil
    }

func (n *PaymentReceiptLineType) Unset(key string) *PaymentReceiptLineType {
        switch key {
  case "TransactionAmount":
   n.paymentreceiptlinetype.TransactionAmount = nil
  case "LocalId":
   n.paymentreceiptlinetype.LocalId = nil
  case "LocalPaymentReceiptLineId":
   n.paymentreceiptlinetype.LocalPaymentReceiptLineId = nil
  case "InvoiceRefId":
   n.paymentreceiptlinetype.InvoiceRefId = nil
  case "TaxAmount":
   n.paymentreceiptlinetype.TaxAmount = nil
  case "TransactionDescription":
   n.paymentreceiptlinetype.TransactionDescription = nil
  case "FinancialAccountRefId":
   n.paymentreceiptlinetype.FinancialAccountRefId = nil
  case "AccountCode":
   n.paymentreceiptlinetype.AccountCode = nil
  case "TaxRate":
   n.paymentreceiptlinetype.TaxRate = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PaymentReceiptLineType")
        }
        return n
}

func (n *PaymentReceiptLineType) SetProperty(key string, value interface{}) *PaymentReceiptLineType {
        if n == nil {
                n, _ = PaymentReceiptLineTypePointer(PaymentReceiptLineType{})
        }
        switch key {
    case "TransactionAmount":
    if v, ok:= DebitOrCreditAmountTypePointer(value); ok {
      n.paymentreceiptlinetype.TransactionAmount = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceiptlinetype.LocalId = ((*LocalIdType)(v))
      }
    case "LocalPaymentReceiptLineId":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceiptlinetype.LocalPaymentReceiptLineId = ((*LocalIdType)(v))
      }
    case "InvoiceRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceiptlinetype.InvoiceRefId = ((*String)(v))
      }
    case "TaxAmount":
    if v, ok:= MonetaryAmountTypePointer(value); ok {
      n.paymentreceiptlinetype.TaxAmount = v
      }
    case "TransactionDescription":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceiptlinetype.TransactionDescription = ((*String)(v))
      }
    case "FinancialAccountRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceiptlinetype.FinancialAccountRefId = ((*String)(v))
      }
    case "AccountCode":
    
    if v, ok:= StringPointer(value); ok {
      n.paymentreceiptlinetype.AccountCode = ((*String)(v))
      }
    case "TaxRate":
    
    if v, ok:= FloatPointer(value); ok {
      n.paymentreceiptlinetype.TaxRate = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PaymentReceiptLineType")
        }
        return n
}

  func (s *PaymentReceiptLineType) TransactionAmount() *DebitOrCreditAmountType {
    if s.paymentreceiptlinetype.TransactionAmount == nil {
     if v, ok:= DebitOrCreditAmountTypePointer(DebitOrCreditAmountType{}); ok {
      s.paymentreceiptlinetype.TransactionAmount = v
      }
      }
      return s.paymentreceiptlinetype.TransactionAmount
    }
  func (s *PaymentReceiptLineType) TransactionAmount_IsNil() bool {
    return s.TransactionAmount == nil || s.paymentreceiptlinetype.TransactionAmount == nil
    }
  func (s *PaymentReceiptLineType) LocalId() *LocalIdType {
    if s.paymentreceiptlinetype.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceiptlinetype.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.paymentreceiptlinetype.LocalId
    }
  func (s *PaymentReceiptLineType) LocalId_IsNil() bool {
    return s.LocalId == nil || s.paymentreceiptlinetype.LocalId == nil
    }
  func (s *PaymentReceiptLineType) LocalPaymentReceiptLineId() *LocalIdType {
    if s.paymentreceiptlinetype.LocalPaymentReceiptLineId == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceiptlinetype.LocalPaymentReceiptLineId = ((*LocalIdType)(v))
      }
      }
      return s.paymentreceiptlinetype.LocalPaymentReceiptLineId
    }
  func (s *PaymentReceiptLineType) LocalPaymentReceiptLineId_IsNil() bool {
    return s.LocalPaymentReceiptLineId == nil || s.paymentreceiptlinetype.LocalPaymentReceiptLineId == nil
    }
  func (s *PaymentReceiptLineType) InvoiceRefId() *String {
    if s.paymentreceiptlinetype.InvoiceRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceiptlinetype.InvoiceRefId = ((*String)(v))
      }
      }
      return s.paymentreceiptlinetype.InvoiceRefId
    }
  func (s *PaymentReceiptLineType) InvoiceRefId_IsNil() bool {
    return s.InvoiceRefId == nil || s.paymentreceiptlinetype.InvoiceRefId == nil
    }
  func (s *PaymentReceiptLineType) TaxAmount() *MonetaryAmountType {
    if s.paymentreceiptlinetype.TaxAmount == nil {
     if v, ok:= MonetaryAmountTypePointer(MonetaryAmountType{}); ok {
      s.paymentreceiptlinetype.TaxAmount = v
      }
      }
      return s.paymentreceiptlinetype.TaxAmount
    }
  func (s *PaymentReceiptLineType) TaxAmount_IsNil() bool {
    return s.TaxAmount == nil || s.paymentreceiptlinetype.TaxAmount == nil
    }
  func (s *PaymentReceiptLineType) TransactionDescription() *String {
    if s.paymentreceiptlinetype.TransactionDescription == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceiptlinetype.TransactionDescription = ((*String)(v))
      }
      }
      return s.paymentreceiptlinetype.TransactionDescription
    }
  func (s *PaymentReceiptLineType) TransactionDescription_IsNil() bool {
    return s.TransactionDescription == nil || s.paymentreceiptlinetype.TransactionDescription == nil
    }
  func (s *PaymentReceiptLineType) FinancialAccountRefId() *String {
    if s.paymentreceiptlinetype.FinancialAccountRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceiptlinetype.FinancialAccountRefId = ((*String)(v))
      }
      }
      return s.paymentreceiptlinetype.FinancialAccountRefId
    }
  func (s *PaymentReceiptLineType) FinancialAccountRefId_IsNil() bool {
    return s.FinancialAccountRefId == nil || s.paymentreceiptlinetype.FinancialAccountRefId == nil
    }
  func (s *PaymentReceiptLineType) AccountCode() *String {
    if s.paymentreceiptlinetype.AccountCode == nil {
    if v, ok:= StringPointer(""); ok {
      s.paymentreceiptlinetype.AccountCode = ((*String)(v))
      }
      }
      return s.paymentreceiptlinetype.AccountCode
    }
  func (s *PaymentReceiptLineType) AccountCode_IsNil() bool {
    return s.AccountCode == nil || s.paymentreceiptlinetype.AccountCode == nil
    }
  func (s *PaymentReceiptLineType) TaxRate() *Float {
    if s.paymentreceiptlinetype.TaxRate == nil {
    if v, ok:= FloatPointer(0); ok {
      s.paymentreceiptlinetype.TaxRate = ((*Float)(v))
      }
      }
      return s.paymentreceiptlinetype.TaxRate
    }
  func (s *PaymentReceiptLineType) TaxRate_IsNil() bool {
    return s.TaxRate == nil || s.paymentreceiptlinetype.TaxRate == nil
    }

func (n *SystemRole) Unset(key string) *SystemRole {
        switch key {
  case "SIF_RefId":
   n.systemrole.SIF_RefId = nil
  case "SystemContextList":
   n.systemrole.SystemContextList = nil
  case "SIF_Metadata":
   n.systemrole.SIF_Metadata = nil
  case "LocalCodeList":
   n.systemrole.LocalCodeList = nil
  case "SIF_ExtendedElements":
   n.systemrole.SIF_ExtendedElements = nil
  case "RefId":
   n.systemrole.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole")
        }
        return n
}

func (n *SystemRole) SetProperty(key string, value interface{}) *SystemRole {
        if n == nil {
                n, _ = SystemRolePointer(SystemRole{})
        }
        switch key {
    case "SIF_RefId":
    if v, ok:= SystemRole_SIF_RefIdPointer(value); ok {
      n.systemrole.SIF_RefId = v
      }
    case "SystemContextList":
    if v, ok:= SystemRole_SystemContextListPointer(value); ok {
      n.systemrole.SystemContextList = v
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.systemrole.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.systemrole.LocalCodeList = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.systemrole.SIF_ExtendedElements = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.systemrole.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SystemRole")
        }
        return n
}

  func (s *SystemRole) SIF_RefId() *SystemRole_SIF_RefId {
    if s.systemrole.SIF_RefId == nil {
     if v, ok:= SystemRole_SIF_RefIdPointer(SystemRole_SIF_RefId{}); ok {
      s.systemrole.SIF_RefId = v
      }
      }
      return s.systemrole.SIF_RefId
    }
  func (s *SystemRole) SIF_RefId_IsNil() bool {
    return s.SIF_RefId == nil || s.systemrole.SIF_RefId == nil
    }
  func (s *SystemRole) SystemContextList() *SystemRole_SystemContextList {
    if s.systemrole.SystemContextList == nil {
     if v, ok:= SystemRole_SystemContextListPointer(SystemRole_SystemContextList{}); ok {
      s.systemrole.SystemContextList = v
      }
      }
      return s.systemrole.SystemContextList
    }
  func (s *SystemRole) SystemContextList_IsNil() bool {
    return s.SystemContextList == nil || s.systemrole.SystemContextList == nil
    }
  func (s *SystemRole) SIF_Metadata() *SIF_MetadataType {
    if s.systemrole.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.systemrole.SIF_Metadata = v
      }
      }
      return s.systemrole.SIF_Metadata
    }
  func (s *SystemRole) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.systemrole.SIF_Metadata == nil
    }
  func (s *SystemRole) LocalCodeList() *LocalCodeListType {
    if s.systemrole.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.systemrole.LocalCodeList = v
      }
      }
      return s.systemrole.LocalCodeList
    }
  func (s *SystemRole) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.systemrole.LocalCodeList == nil
    }
  func (s *SystemRole) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.systemrole.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.systemrole.SIF_ExtendedElements = v
      }
      }
      return s.systemrole.SIF_ExtendedElements
    }
  func (s *SystemRole) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.systemrole.SIF_ExtendedElements == nil
    }
  func (s *SystemRole) RefId() *RefIdType {
    if s.systemrole.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.systemrole.RefId = ((*RefIdType)(v))
      }
      }
      return s.systemrole.RefId
    }
  func (s *SystemRole) RefId_IsNil() bool {
    return s.RefId == nil || s.systemrole.RefId == nil
    }

func (n *Activity_Evaluation) Unset(key string) *Activity_Evaluation {
        switch key {
  case "EvaluationType":
   n.activity_evaluation.EvaluationType = nil
  case "Description":
   n.activity_evaluation.Description = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Activity_Evaluation")
        }
        return n
}

func (n *Activity_Evaluation) SetProperty(key string, value interface{}) *Activity_Evaluation {
        if n == nil {
                n, _ = Activity_EvaluationPointer(Activity_Evaluation{})
        }
        switch key {
    case "EvaluationType":
    
    if v, ok:= StringPointer(value); ok {
      n.activity_evaluation.EvaluationType = ((*String)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.activity_evaluation.Description = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Activity_Evaluation")
        }
        return n
}

  func (s *Activity_Evaluation) EvaluationType() *String {
    if s.activity_evaluation.EvaluationType == nil {
    if v, ok:= StringPointer(""); ok {
      s.activity_evaluation.EvaluationType = ((*String)(v))
      }
      }
      return s.activity_evaluation.EvaluationType
    }
  func (s *Activity_Evaluation) EvaluationType_IsNil() bool {
    return s.EvaluationType == nil || s.activity_evaluation.EvaluationType == nil
    }
  func (s *Activity_Evaluation) Description() *String {
    if s.activity_evaluation.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.activity_evaluation.Description = ((*String)(v))
      }
      }
      return s.activity_evaluation.Description
    }
  func (s *Activity_Evaluation) Description_IsNil() bool {
    return s.Description == nil || s.activity_evaluation.Description == nil
    }

func (n *ContactType) Unset(key string) *ContactType {
        switch key {
  case "Name":
   n.contacttype.Name = nil
  case "Address":
   n.contacttype.Address = nil
  case "PhoneNumber":
   n.contacttype.PhoneNumber = nil
  case "Email":
   n.contacttype.Email = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ContactType")
        }
        return n
}

func (n *ContactType) SetProperty(key string, value interface{}) *ContactType {
        if n == nil {
                n, _ = ContactTypePointer(ContactType{})
        }
        switch key {
    case "Name":
    if v, ok:= NameTypePointer(value); ok {
      n.contacttype.Name = v
      }
    case "Address":
    if v, ok:= AddressTypePointer(value); ok {
      n.contacttype.Address = v
      }
    case "PhoneNumber":
    if v, ok:= PhoneNumberTypePointer(value); ok {
      n.contacttype.PhoneNumber = v
      }
    case "Email":
    if v, ok:= EmailTypePointer(value); ok {
      n.contacttype.Email = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ContactType")
        }
        return n
}

  func (s *ContactType) Name() *NameType {
    if s.contacttype.Name == nil {
     if v, ok:= NameTypePointer(NameType{}); ok {
      s.contacttype.Name = v
      }
      }
      return s.contacttype.Name
    }
  func (s *ContactType) Name_IsNil() bool {
    return s.Name == nil || s.contacttype.Name == nil
    }
  func (s *ContactType) Address() *AddressType {
    if s.contacttype.Address == nil {
     if v, ok:= AddressTypePointer(AddressType{}); ok {
      s.contacttype.Address = v
      }
      }
      return s.contacttype.Address
    }
  func (s *ContactType) Address_IsNil() bool {
    return s.Address == nil || s.contacttype.Address == nil
    }
  func (s *ContactType) PhoneNumber() *PhoneNumberType {
    if s.contacttype.PhoneNumber == nil {
     if v, ok:= PhoneNumberTypePointer(PhoneNumberType{}); ok {
      s.contacttype.PhoneNumber = v
      }
      }
      return s.contacttype.PhoneNumber
    }
  func (s *ContactType) PhoneNumber_IsNil() bool {
    return s.PhoneNumber == nil || s.contacttype.PhoneNumber == nil
    }
  func (s *ContactType) Email() *EmailType {
    if s.contacttype.Email == nil {
     if v, ok:= EmailTypePointer(EmailType{}); ok {
      s.contacttype.Email = v
      }
      }
      return s.contacttype.Email
    }
  func (s *ContactType) Email_IsNil() bool {
    return s.Email == nil || s.contacttype.Email == nil
    }

func (n *RelationshipType) Unset(key string) *RelationshipType {
        switch key {
  case "OtherCodeList":
   n.relationshiptype.OtherCodeList = nil
  case "Code":
   n.relationshiptype.Code = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "RelationshipType")
        }
        return n
}

func (n *RelationshipType) SetProperty(key string, value interface{}) *RelationshipType {
        if n == nil {
                n, _ = RelationshipTypePointer(RelationshipType{})
        }
        switch key {
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.relationshiptype.OtherCodeList = v
      }
    case "Code":
        if !CodesetContains(AUCodeSetsRelationshipToStudentType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsRelationshipToStudentType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.relationshiptype.Code = ((*AUCodeSetsRelationshipToStudentType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "RelationshipType")
        }
        return n
}

  func (s *RelationshipType) OtherCodeList() *OtherCodeListType {
    if s.relationshiptype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.relationshiptype.OtherCodeList = v
      }
      }
      return s.relationshiptype.OtherCodeList
    }
  func (s *RelationshipType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.relationshiptype.OtherCodeList == nil
    }
  func (s *RelationshipType) Code() *AUCodeSetsRelationshipToStudentType {
    if s.relationshiptype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.relationshiptype.Code = ((*AUCodeSetsRelationshipToStudentType)(v))
      }
      }
      return s.relationshiptype.Code
    }
  func (s *RelationshipType) Code_IsNil() bool {
    return s.Code == nil || s.relationshiptype.Code == nil
    }

func (n *OtherNameType) Unset(key string) *OtherNameType {
        switch key {
  case "Type":
   n.othernametype.Type = nil
  case "PreferredGivenName":
   n.othernametype.PreferredGivenName = nil
  case "GivenName":
   n.othernametype.GivenName = nil
  case "FamilyName":
   n.othernametype.FamilyName = nil
  case "Title":
   n.othernametype.Title = nil
  case "FullName":
   n.othernametype.FullName = nil
  case "MiddleName":
   n.othernametype.MiddleName = nil
  case "PreferredFamilyName":
   n.othernametype.PreferredFamilyName = nil
  case "PreferredFamilyNameFirst":
   n.othernametype.PreferredFamilyNameFirst = nil
  case "FamilyNameFirst":
   n.othernametype.FamilyNameFirst = nil
  case "Suffix":
   n.othernametype.Suffix = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherNameType")
        }
        return n
}

func (n *OtherNameType) SetProperty(key string, value interface{}) *OtherNameType {
        if n == nil {
                n, _ = OtherNameTypePointer(OtherNameType{})
        }
        switch key {
    case "Type":
        if !CodesetContains(AUCodeSetsNameUsageTypeType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsNameUsageTypeType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.othernametype.Type = ((*AUCodeSetsNameUsageTypeType)(v))
      }
    case "PreferredGivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.othernametype.PreferredGivenName = ((*String)(v))
      }
    case "GivenName":
    
    if v, ok:= StringPointer(value); ok {
      n.othernametype.GivenName = ((*String)(v))
      }
    case "FamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.othernametype.FamilyName = ((*String)(v))
      }
    case "Title":
    
    if v, ok:= StringPointer(value); ok {
      n.othernametype.Title = ((*String)(v))
      }
    case "FullName":
    
    if v, ok:= StringPointer(value); ok {
      n.othernametype.FullName = ((*String)(v))
      }
    case "MiddleName":
    
    if v, ok:= StringPointer(value); ok {
      n.othernametype.MiddleName = ((*String)(v))
      }
    case "PreferredFamilyName":
    
    if v, ok:= StringPointer(value); ok {
      n.othernametype.PreferredFamilyName = ((*String)(v))
      }
    case "PreferredFamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.othernametype.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "FamilyNameFirst":
        if !CodesetContains(AUCodeSetsYesOrNoCategoryType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsYesOrNoCategoryType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.othernametype.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
    case "Suffix":
    
    if v, ok:= StringPointer(value); ok {
      n.othernametype.Suffix = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "OtherNameType")
        }
        return n
}

  func (s *OtherNameType) Type() *AUCodeSetsNameUsageTypeType {
    if s.othernametype.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.othernametype.Type = ((*AUCodeSetsNameUsageTypeType)(v))
      }
      }
      return s.othernametype.Type
    }
  func (s *OtherNameType) Type_IsNil() bool {
    return s.Type == nil || s.othernametype.Type == nil
    }
  func (s *OtherNameType) PreferredGivenName() *String {
    if s.othernametype.PreferredGivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.othernametype.PreferredGivenName = ((*String)(v))
      }
      }
      return s.othernametype.PreferredGivenName
    }
  func (s *OtherNameType) PreferredGivenName_IsNil() bool {
    return s.PreferredGivenName == nil || s.othernametype.PreferredGivenName == nil
    }
  func (s *OtherNameType) GivenName() *String {
    if s.othernametype.GivenName == nil {
    if v, ok:= StringPointer(""); ok {
      s.othernametype.GivenName = ((*String)(v))
      }
      }
      return s.othernametype.GivenName
    }
  func (s *OtherNameType) GivenName_IsNil() bool {
    return s.GivenName == nil || s.othernametype.GivenName == nil
    }
  func (s *OtherNameType) FamilyName() *String {
    if s.othernametype.FamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.othernametype.FamilyName = ((*String)(v))
      }
      }
      return s.othernametype.FamilyName
    }
  func (s *OtherNameType) FamilyName_IsNil() bool {
    return s.FamilyName == nil || s.othernametype.FamilyName == nil
    }
  func (s *OtherNameType) Title() *String {
    if s.othernametype.Title == nil {
    if v, ok:= StringPointer(""); ok {
      s.othernametype.Title = ((*String)(v))
      }
      }
      return s.othernametype.Title
    }
  func (s *OtherNameType) Title_IsNil() bool {
    return s.Title == nil || s.othernametype.Title == nil
    }
  func (s *OtherNameType) FullName() *String {
    if s.othernametype.FullName == nil {
    if v, ok:= StringPointer(""); ok {
      s.othernametype.FullName = ((*String)(v))
      }
      }
      return s.othernametype.FullName
    }
  func (s *OtherNameType) FullName_IsNil() bool {
    return s.FullName == nil || s.othernametype.FullName == nil
    }
  func (s *OtherNameType) MiddleName() *String {
    if s.othernametype.MiddleName == nil {
    if v, ok:= StringPointer(""); ok {
      s.othernametype.MiddleName = ((*String)(v))
      }
      }
      return s.othernametype.MiddleName
    }
  func (s *OtherNameType) MiddleName_IsNil() bool {
    return s.MiddleName == nil || s.othernametype.MiddleName == nil
    }
  func (s *OtherNameType) PreferredFamilyName() *String {
    if s.othernametype.PreferredFamilyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.othernametype.PreferredFamilyName = ((*String)(v))
      }
      }
      return s.othernametype.PreferredFamilyName
    }
  func (s *OtherNameType) PreferredFamilyName_IsNil() bool {
    return s.PreferredFamilyName == nil || s.othernametype.PreferredFamilyName == nil
    }
  func (s *OtherNameType) PreferredFamilyNameFirst() *AUCodeSetsYesOrNoCategoryType {
    if s.othernametype.PreferredFamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.othernametype.PreferredFamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.othernametype.PreferredFamilyNameFirst
    }
  func (s *OtherNameType) PreferredFamilyNameFirst_IsNil() bool {
    return s.PreferredFamilyNameFirst == nil || s.othernametype.PreferredFamilyNameFirst == nil
    }
  func (s *OtherNameType) FamilyNameFirst() *AUCodeSetsYesOrNoCategoryType {
    if s.othernametype.FamilyNameFirst == nil {
    if v, ok:= StringPointer(""); ok {
      s.othernametype.FamilyNameFirst = ((*AUCodeSetsYesOrNoCategoryType)(v))
      }
      }
      return s.othernametype.FamilyNameFirst
    }
  func (s *OtherNameType) FamilyNameFirst_IsNil() bool {
    return s.FamilyNameFirst == nil || s.othernametype.FamilyNameFirst == nil
    }
  func (s *OtherNameType) Suffix() *String {
    if s.othernametype.Suffix == nil {
    if v, ok:= StringPointer(""); ok {
      s.othernametype.Suffix = ((*String)(v))
      }
      }
      return s.othernametype.Suffix
    }
  func (s *OtherNameType) Suffix_IsNil() bool {
    return s.Suffix == nil || s.othernametype.Suffix == nil
    }

func (n *EquipmentInfo) Unset(key string) *EquipmentInfo {
        switch key {
  case "Name":
   n.equipmentinfo.Name = nil
  case "SIF_ExtendedElements":
   n.equipmentinfo.SIF_ExtendedElements = nil
  case "PurchaseOrderRefId":
   n.equipmentinfo.PurchaseOrderRefId = nil
  case "LocalCodeList":
   n.equipmentinfo.LocalCodeList = nil
  case "Description":
   n.equipmentinfo.Description = nil
  case "AssetNumber":
   n.equipmentinfo.AssetNumber = nil
  case "EquipmentType":
   n.equipmentinfo.EquipmentType = nil
  case "SIF_Metadata":
   n.equipmentinfo.SIF_Metadata = nil
  case "SIF_RefId":
   n.equipmentinfo.SIF_RefId = nil
  case "RefId":
   n.equipmentinfo.RefId = nil
  case "InvoiceRefId":
   n.equipmentinfo.InvoiceRefId = nil
  case "LocalId":
   n.equipmentinfo.LocalId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EquipmentInfo")
        }
        return n
}

func (n *EquipmentInfo) SetProperty(key string, value interface{}) *EquipmentInfo {
        if n == nil {
                n, _ = EquipmentInfoPointer(EquipmentInfo{})
        }
        switch key {
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.equipmentinfo.Name = ((*String)(v))
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.equipmentinfo.SIF_ExtendedElements = v
      }
    case "PurchaseOrderRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.equipmentinfo.PurchaseOrderRefId = ((*String)(v))
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.equipmentinfo.LocalCodeList = v
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.equipmentinfo.Description = ((*String)(v))
      }
    case "AssetNumber":
    
    if v, ok:= StringPointer(value); ok {
      n.equipmentinfo.AssetNumber = ((*LocalIdType)(v))
      }
    case "EquipmentType":
    
    if v, ok:= StringPointer(value); ok {
      n.equipmentinfo.EquipmentType = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.equipmentinfo.SIF_Metadata = v
      }
    case "SIF_RefId":
    if v, ok:= EquipmentInfo_SIF_RefIdPointer(value); ok {
      n.equipmentinfo.SIF_RefId = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.equipmentinfo.RefId = ((*RefIdType)(v))
      }
    case "InvoiceRefId":
    
    if v, ok:= StringPointer(value); ok {
      n.equipmentinfo.InvoiceRefId = ((*String)(v))
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.equipmentinfo.LocalId = ((*LocalIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EquipmentInfo")
        }
        return n
}

  func (s *EquipmentInfo) Name() *String {
    if s.equipmentinfo.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.equipmentinfo.Name = ((*String)(v))
      }
      }
      return s.equipmentinfo.Name
    }
  func (s *EquipmentInfo) Name_IsNil() bool {
    return s.Name == nil || s.equipmentinfo.Name == nil
    }
  func (s *EquipmentInfo) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.equipmentinfo.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.equipmentinfo.SIF_ExtendedElements = v
      }
      }
      return s.equipmentinfo.SIF_ExtendedElements
    }
  func (s *EquipmentInfo) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.equipmentinfo.SIF_ExtendedElements == nil
    }
  func (s *EquipmentInfo) PurchaseOrderRefId() *String {
    if s.equipmentinfo.PurchaseOrderRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.equipmentinfo.PurchaseOrderRefId = ((*String)(v))
      }
      }
      return s.equipmentinfo.PurchaseOrderRefId
    }
  func (s *EquipmentInfo) PurchaseOrderRefId_IsNil() bool {
    return s.PurchaseOrderRefId == nil || s.equipmentinfo.PurchaseOrderRefId == nil
    }
  func (s *EquipmentInfo) LocalCodeList() *LocalCodeListType {
    if s.equipmentinfo.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.equipmentinfo.LocalCodeList = v
      }
      }
      return s.equipmentinfo.LocalCodeList
    }
  func (s *EquipmentInfo) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.equipmentinfo.LocalCodeList == nil
    }
  func (s *EquipmentInfo) Description() *String {
    if s.equipmentinfo.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.equipmentinfo.Description = ((*String)(v))
      }
      }
      return s.equipmentinfo.Description
    }
  func (s *EquipmentInfo) Description_IsNil() bool {
    return s.Description == nil || s.equipmentinfo.Description == nil
    }
  func (s *EquipmentInfo) AssetNumber() *LocalIdType {
    if s.equipmentinfo.AssetNumber == nil {
    if v, ok:= StringPointer(""); ok {
      s.equipmentinfo.AssetNumber = ((*LocalIdType)(v))
      }
      }
      return s.equipmentinfo.AssetNumber
    }
  func (s *EquipmentInfo) AssetNumber_IsNil() bool {
    return s.AssetNumber == nil || s.equipmentinfo.AssetNumber == nil
    }
  func (s *EquipmentInfo) EquipmentType() *String {
    if s.equipmentinfo.EquipmentType == nil {
    if v, ok:= StringPointer(""); ok {
      s.equipmentinfo.EquipmentType = ((*String)(v))
      }
      }
      return s.equipmentinfo.EquipmentType
    }
  func (s *EquipmentInfo) EquipmentType_IsNil() bool {
    return s.EquipmentType == nil || s.equipmentinfo.EquipmentType == nil
    }
  func (s *EquipmentInfo) SIF_Metadata() *SIF_MetadataType {
    if s.equipmentinfo.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.equipmentinfo.SIF_Metadata = v
      }
      }
      return s.equipmentinfo.SIF_Metadata
    }
  func (s *EquipmentInfo) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.equipmentinfo.SIF_Metadata == nil
    }
  func (s *EquipmentInfo) SIF_RefId() *EquipmentInfo_SIF_RefId {
    if s.equipmentinfo.SIF_RefId == nil {
     if v, ok:= EquipmentInfo_SIF_RefIdPointer(EquipmentInfo_SIF_RefId{}); ok {
      s.equipmentinfo.SIF_RefId = v
      }
      }
      return s.equipmentinfo.SIF_RefId
    }
  func (s *EquipmentInfo) SIF_RefId_IsNil() bool {
    return s.SIF_RefId == nil || s.equipmentinfo.SIF_RefId == nil
    }
  func (s *EquipmentInfo) RefId() *RefIdType {
    if s.equipmentinfo.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.equipmentinfo.RefId = ((*RefIdType)(v))
      }
      }
      return s.equipmentinfo.RefId
    }
  func (s *EquipmentInfo) RefId_IsNil() bool {
    return s.RefId == nil || s.equipmentinfo.RefId == nil
    }
  func (s *EquipmentInfo) InvoiceRefId() *String {
    if s.equipmentinfo.InvoiceRefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.equipmentinfo.InvoiceRefId = ((*String)(v))
      }
      }
      return s.equipmentinfo.InvoiceRefId
    }
  func (s *EquipmentInfo) InvoiceRefId_IsNil() bool {
    return s.InvoiceRefId == nil || s.equipmentinfo.InvoiceRefId == nil
    }
  func (s *EquipmentInfo) LocalId() *LocalIdType {
    if s.equipmentinfo.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.equipmentinfo.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.equipmentinfo.LocalId
    }
  func (s *EquipmentInfo) LocalId_IsNil() bool {
    return s.LocalId == nil || s.equipmentinfo.LocalId == nil
    }

func (n *ComponentType) Unset(key string) *ComponentType {
        switch key {
  case "Description":
   n.componenttype.Description = nil
  case "Strategies":
   n.componenttype.Strategies = nil
  case "AssociatedObjects":
   n.componenttype.AssociatedObjects = nil
  case "Name":
   n.componenttype.Name = nil
  case "Reference":
   n.componenttype.Reference = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ComponentType")
        }
        return n
}

func (n *ComponentType) SetProperty(key string, value interface{}) *ComponentType {
        if n == nil {
                n, _ = ComponentTypePointer(ComponentType{})
        }
        switch key {
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.componenttype.Description = ((*String)(v))
      }
    case "Strategies":
    if v, ok:= StrategiesTypePointer(value); ok {
      n.componenttype.Strategies = v
      }
    case "AssociatedObjects":
    if v, ok:= AssociatedObjectsTypePointer(value); ok {
      n.componenttype.AssociatedObjects = v
      }
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.componenttype.Name = ((*String)(v))
      }
    case "Reference":
    
    if v, ok:= StringPointer(value); ok {
      n.componenttype.Reference = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "ComponentType")
        }
        return n
}

  func (s *ComponentType) Description() *String {
    if s.componenttype.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.componenttype.Description = ((*String)(v))
      }
      }
      return s.componenttype.Description
    }
  func (s *ComponentType) Description_IsNil() bool {
    return s.Description == nil || s.componenttype.Description == nil
    }
  func (s *ComponentType) Strategies() *StrategiesType {
    if s.componenttype.Strategies == nil {
     if v, ok:= StrategiesTypePointer(StrategiesType{}); ok {
      s.componenttype.Strategies = v
      }
      }
      return s.componenttype.Strategies
    }
  func (s *ComponentType) Strategies_IsNil() bool {
    return s.Strategies == nil || s.componenttype.Strategies == nil
    }
  func (s *ComponentType) AssociatedObjects() *AssociatedObjectsType {
    if s.componenttype.AssociatedObjects == nil {
     if v, ok:= AssociatedObjectsTypePointer(AssociatedObjectsType{}); ok {
      s.componenttype.AssociatedObjects = v
      }
      }
      return s.componenttype.AssociatedObjects
    }
  func (s *ComponentType) AssociatedObjects_IsNil() bool {
    return s.AssociatedObjects == nil || s.componenttype.AssociatedObjects == nil
    }
  func (s *ComponentType) Name() *String {
    if s.componenttype.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.componenttype.Name = ((*String)(v))
      }
      }
      return s.componenttype.Name
    }
  func (s *ComponentType) Name_IsNil() bool {
    return s.Name == nil || s.componenttype.Name == nil
    }
  func (s *ComponentType) Reference() *String {
    if s.componenttype.Reference == nil {
    if v, ok:= StringPointer(""); ok {
      s.componenttype.Reference = ((*String)(v))
      }
      }
      return s.componenttype.Reference
    }
  func (s *ComponentType) Reference_IsNil() bool {
    return s.Reference == nil || s.componenttype.Reference == nil
    }

func (n *LocationOfInstructionType) Unset(key string) *LocationOfInstructionType {
        switch key {
  case "Code":
   n.locationofinstructiontype.Code = nil
  case "OtherCodeList":
   n.locationofinstructiontype.OtherCodeList = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocationOfInstructionType")
        }
        return n
}

func (n *LocationOfInstructionType) SetProperty(key string, value interface{}) *LocationOfInstructionType {
        if n == nil {
                n, _ = LocationOfInstructionTypePointer(LocationOfInstructionType{})
        }
        switch key {
    case "Code":
        if !CodesetContains(AUCodeSetsReceivingLocationOfInstructionType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsReceivingLocationOfInstructionType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.locationofinstructiontype.Code = ((*AUCodeSetsReceivingLocationOfInstructionType)(v))
      }
    case "OtherCodeList":
    if v, ok:= OtherCodeListTypePointer(value); ok {
      n.locationofinstructiontype.OtherCodeList = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LocationOfInstructionType")
        }
        return n
}

  func (s *LocationOfInstructionType) Code() *AUCodeSetsReceivingLocationOfInstructionType {
    if s.locationofinstructiontype.Code == nil {
    if v, ok:= StringPointer(""); ok {
      s.locationofinstructiontype.Code = ((*AUCodeSetsReceivingLocationOfInstructionType)(v))
      }
      }
      return s.locationofinstructiontype.Code
    }
  func (s *LocationOfInstructionType) Code_IsNil() bool {
    return s.Code == nil || s.locationofinstructiontype.Code == nil
    }
  func (s *LocationOfInstructionType) OtherCodeList() *OtherCodeListType {
    if s.locationofinstructiontype.OtherCodeList == nil {
     if v, ok:= OtherCodeListTypePointer(OtherCodeListType{}); ok {
      s.locationofinstructiontype.OtherCodeList = v
      }
      }
      return s.locationofinstructiontype.OtherCodeList
    }
  func (s *LocationOfInstructionType) OtherCodeList_IsNil() bool {
    return s.OtherCodeList == nil || s.locationofinstructiontype.OtherCodeList == nil
    }

func (n *SchoolInfo_OtherLEA) Unset(key string) *SchoolInfo_OtherLEA {
        switch key {
  case "Value":
   n.schoolinfo_otherlea.Value = nil
  case "SIF_RefObject":
   n.schoolinfo_otherlea.SIF_RefObject = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolInfo_OtherLEA")
        }
        return n
}

func (n *SchoolInfo_OtherLEA) SetProperty(key string, value interface{}) *SchoolInfo_OtherLEA {
        if n == nil {
                n, _ = SchoolInfo_OtherLEAPointer(SchoolInfo_OtherLEA{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo_otherlea.Value = ((*RefIdType)(v))
      }
    case "SIF_RefObject":
    
    if v, ok:= StringPointer(value); ok {
      n.schoolinfo_otherlea.SIF_RefObject = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SchoolInfo_OtherLEA")
        }
        return n
}

  func (s *SchoolInfo_OtherLEA) Value() *RefIdType {
    if s.schoolinfo_otherlea.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo_otherlea.Value = ((*RefIdType)(v))
      }
      }
      return s.schoolinfo_otherlea.Value
    }
  func (s *SchoolInfo_OtherLEA) Value_IsNil() bool {
    return s.Value == nil || s.schoolinfo_otherlea.Value == nil
    }
  func (s *SchoolInfo_OtherLEA) SIF_RefObject() *String {
    if s.schoolinfo_otherlea.SIF_RefObject == nil {
    if v, ok:= StringPointer(""); ok {
      s.schoolinfo_otherlea.SIF_RefObject = ((*String)(v))
      }
      }
      return s.schoolinfo_otherlea.SIF_RefObject
    }
  func (s *SchoolInfo_OtherLEA) SIF_RefObject_IsNil() bool {
    return s.SIF_RefObject == nil || s.schoolinfo_otherlea.SIF_RefObject == nil
    }

func (n *PrincipalInfoType) Unset(key string) *PrincipalInfoType {
        switch key {
  case "EmailList":
   n.principalinfotype.EmailList = nil
  case "PhoneNumberList":
   n.principalinfotype.PhoneNumberList = nil
  case "ContactTitle":
   n.principalinfotype.ContactTitle = nil
  case "ContactName":
   n.principalinfotype.ContactName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PrincipalInfoType")
        }
        return n
}

func (n *PrincipalInfoType) SetProperty(key string, value interface{}) *PrincipalInfoType {
        if n == nil {
                n, _ = PrincipalInfoTypePointer(PrincipalInfoType{})
        }
        switch key {
    case "EmailList":
    if v, ok:= EmailListTypePointer(value); ok {
      n.principalinfotype.EmailList = v
      }
    case "PhoneNumberList":
    if v, ok:= PhoneNumberListTypePointer(value); ok {
      n.principalinfotype.PhoneNumberList = v
      }
    case "ContactTitle":
    
    if v, ok:= StringPointer(value); ok {
      n.principalinfotype.ContactTitle = ((*String)(v))
      }
    case "ContactName":
    if v, ok:= NameOfRecordTypePointer(value); ok {
      n.principalinfotype.ContactName = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PrincipalInfoType")
        }
        return n
}

  func (s *PrincipalInfoType) EmailList() *EmailListType {
    if s.principalinfotype.EmailList == nil {
     if v, ok:= EmailListTypePointer(EmailListType{}); ok {
      s.principalinfotype.EmailList = v
      }
      }
      return s.principalinfotype.EmailList
    }
  func (s *PrincipalInfoType) EmailList_IsNil() bool {
    return s.EmailList == nil || s.principalinfotype.EmailList == nil
    }
  func (s *PrincipalInfoType) PhoneNumberList() *PhoneNumberListType {
    if s.principalinfotype.PhoneNumberList == nil {
     if v, ok:= PhoneNumberListTypePointer(PhoneNumberListType{}); ok {
      s.principalinfotype.PhoneNumberList = v
      }
      }
      return s.principalinfotype.PhoneNumberList
    }
  func (s *PrincipalInfoType) PhoneNumberList_IsNil() bool {
    return s.PhoneNumberList == nil || s.principalinfotype.PhoneNumberList == nil
    }
  func (s *PrincipalInfoType) ContactTitle() *String {
    if s.principalinfotype.ContactTitle == nil {
    if v, ok:= StringPointer(""); ok {
      s.principalinfotype.ContactTitle = ((*String)(v))
      }
      }
      return s.principalinfotype.ContactTitle
    }
  func (s *PrincipalInfoType) ContactTitle_IsNil() bool {
    return s.ContactTitle == nil || s.principalinfotype.ContactTitle == nil
    }
  func (s *PrincipalInfoType) ContactName() *NameOfRecordType {
    if s.principalinfotype.ContactName == nil {
     if v, ok:= NameOfRecordTypePointer(NameOfRecordType{}); ok {
      s.principalinfotype.ContactName = v
      }
      }
      return s.principalinfotype.ContactName
    }
  func (s *PrincipalInfoType) ContactName_IsNil() bool {
    return s.ContactName == nil || s.principalinfotype.ContactName == nil
    }

func (n *DomainProficiencyContainerType) Unset(key string) *DomainProficiencyContainerType {
        switch key {
  case "Level4Lower":
   n.domainproficiencycontainertype.Level4Lower = nil
  case "Level4Upper":
   n.domainproficiencycontainertype.Level4Upper = nil
  case "Level2Lower":
   n.domainproficiencycontainertype.Level2Lower = nil
  case "Level2Upper":
   n.domainproficiencycontainertype.Level2Upper = nil
  case "Level1Lower":
   n.domainproficiencycontainertype.Level1Lower = nil
  case "Level3Upper":
   n.domainproficiencycontainertype.Level3Upper = nil
  case "Level1Upper":
   n.domainproficiencycontainertype.Level1Upper = nil
  case "Level3Lower":
   n.domainproficiencycontainertype.Level3Lower = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DomainProficiencyContainerType")
        }
        return n
}

func (n *DomainProficiencyContainerType) SetProperty(key string, value interface{}) *DomainProficiencyContainerType {
        if n == nil {
                n, _ = DomainProficiencyContainerTypePointer(DomainProficiencyContainerType{})
        }
        switch key {
    case "Level4Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainproficiencycontainertype.Level4Lower = ((*Float)(v))
      }
    case "Level4Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainproficiencycontainertype.Level4Upper = ((*Float)(v))
      }
    case "Level2Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainproficiencycontainertype.Level2Lower = ((*Float)(v))
      }
    case "Level2Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainproficiencycontainertype.Level2Upper = ((*Float)(v))
      }
    case "Level1Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainproficiencycontainertype.Level1Lower = ((*Float)(v))
      }
    case "Level3Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainproficiencycontainertype.Level3Upper = ((*Float)(v))
      }
    case "Level1Upper":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainproficiencycontainertype.Level1Upper = ((*Float)(v))
      }
    case "Level3Lower":
    
    if v, ok:= FloatPointer(value); ok {
      n.domainproficiencycontainertype.Level3Lower = ((*Float)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "DomainProficiencyContainerType")
        }
        return n
}

  func (s *DomainProficiencyContainerType) Level4Lower() *Float {
    if s.domainproficiencycontainertype.Level4Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainproficiencycontainertype.Level4Lower = ((*Float)(v))
      }
      }
      return s.domainproficiencycontainertype.Level4Lower
    }
  func (s *DomainProficiencyContainerType) Level4Lower_IsNil() bool {
    return s.Level4Lower == nil || s.domainproficiencycontainertype.Level4Lower == nil
    }
  func (s *DomainProficiencyContainerType) Level4Upper() *Float {
    if s.domainproficiencycontainertype.Level4Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainproficiencycontainertype.Level4Upper = ((*Float)(v))
      }
      }
      return s.domainproficiencycontainertype.Level4Upper
    }
  func (s *DomainProficiencyContainerType) Level4Upper_IsNil() bool {
    return s.Level4Upper == nil || s.domainproficiencycontainertype.Level4Upper == nil
    }
  func (s *DomainProficiencyContainerType) Level2Lower() *Float {
    if s.domainproficiencycontainertype.Level2Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainproficiencycontainertype.Level2Lower = ((*Float)(v))
      }
      }
      return s.domainproficiencycontainertype.Level2Lower
    }
  func (s *DomainProficiencyContainerType) Level2Lower_IsNil() bool {
    return s.Level2Lower == nil || s.domainproficiencycontainertype.Level2Lower == nil
    }
  func (s *DomainProficiencyContainerType) Level2Upper() *Float {
    if s.domainproficiencycontainertype.Level2Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainproficiencycontainertype.Level2Upper = ((*Float)(v))
      }
      }
      return s.domainproficiencycontainertype.Level2Upper
    }
  func (s *DomainProficiencyContainerType) Level2Upper_IsNil() bool {
    return s.Level2Upper == nil || s.domainproficiencycontainertype.Level2Upper == nil
    }
  func (s *DomainProficiencyContainerType) Level1Lower() *Float {
    if s.domainproficiencycontainertype.Level1Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainproficiencycontainertype.Level1Lower = ((*Float)(v))
      }
      }
      return s.domainproficiencycontainertype.Level1Lower
    }
  func (s *DomainProficiencyContainerType) Level1Lower_IsNil() bool {
    return s.Level1Lower == nil || s.domainproficiencycontainertype.Level1Lower == nil
    }
  func (s *DomainProficiencyContainerType) Level3Upper() *Float {
    if s.domainproficiencycontainertype.Level3Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainproficiencycontainertype.Level3Upper = ((*Float)(v))
      }
      }
      return s.domainproficiencycontainertype.Level3Upper
    }
  func (s *DomainProficiencyContainerType) Level3Upper_IsNil() bool {
    return s.Level3Upper == nil || s.domainproficiencycontainertype.Level3Upper == nil
    }
  func (s *DomainProficiencyContainerType) Level1Upper() *Float {
    if s.domainproficiencycontainertype.Level1Upper == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainproficiencycontainertype.Level1Upper = ((*Float)(v))
      }
      }
      return s.domainproficiencycontainertype.Level1Upper
    }
  func (s *DomainProficiencyContainerType) Level1Upper_IsNil() bool {
    return s.Level1Upper == nil || s.domainproficiencycontainertype.Level1Upper == nil
    }
  func (s *DomainProficiencyContainerType) Level3Lower() *Float {
    if s.domainproficiencycontainertype.Level3Lower == nil {
    if v, ok:= FloatPointer(0); ok {
      s.domainproficiencycontainertype.Level3Lower = ((*Float)(v))
      }
      }
      return s.domainproficiencycontainertype.Level3Lower
    }
  func (s *DomainProficiencyContainerType) Level3Lower_IsNil() bool {
    return s.Level3Lower == nil || s.domainproficiencycontainertype.Level3Lower == nil
    }

func (n *EvaluationType) Unset(key string) *EvaluationType {
        switch key {
  case "Date":
   n.evaluationtype.Date = nil
  case "Name":
   n.evaluationtype.Name = nil
  case "RefId":
   n.evaluationtype.RefId = nil
  case "Description":
   n.evaluationtype.Description = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EvaluationType")
        }
        return n
}

func (n *EvaluationType) SetProperty(key string, value interface{}) *EvaluationType {
        if n == nil {
                n, _ = EvaluationTypePointer(EvaluationType{})
        }
        switch key {
    case "Date":
    
    if v, ok:= StringPointer(value); ok {
      n.evaluationtype.Date = ((*String)(v))
      }
    case "Name":
    if v, ok:= NameTypePointer(value); ok {
      n.evaluationtype.Name = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.evaluationtype.RefId = ((*RefIdType)(v))
      }
    case "Description":
    
    if v, ok:= StringPointer(value); ok {
      n.evaluationtype.Description = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "EvaluationType")
        }
        return n
}

  func (s *EvaluationType) Date() *String {
    if s.evaluationtype.Date == nil {
    if v, ok:= StringPointer(""); ok {
      s.evaluationtype.Date = ((*String)(v))
      }
      }
      return s.evaluationtype.Date
    }
  func (s *EvaluationType) Date_IsNil() bool {
    return s.Date == nil || s.evaluationtype.Date == nil
    }
  func (s *EvaluationType) Name() *NameType {
    if s.evaluationtype.Name == nil {
     if v, ok:= NameTypePointer(NameType{}); ok {
      s.evaluationtype.Name = v
      }
      }
      return s.evaluationtype.Name
    }
  func (s *EvaluationType) Name_IsNil() bool {
    return s.Name == nil || s.evaluationtype.Name == nil
    }
  func (s *EvaluationType) RefId() *RefIdType {
    if s.evaluationtype.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.evaluationtype.RefId = ((*RefIdType)(v))
      }
      }
      return s.evaluationtype.RefId
    }
  func (s *EvaluationType) RefId_IsNil() bool {
    return s.RefId == nil || s.evaluationtype.RefId == nil
    }
  func (s *EvaluationType) Description() *String {
    if s.evaluationtype.Description == nil {
    if v, ok:= StringPointer(""); ok {
      s.evaluationtype.Description = ((*String)(v))
      }
      }
      return s.evaluationtype.Description
    }
  func (s *EvaluationType) Description_IsNil() bool {
    return s.Description == nil || s.evaluationtype.Description == nil
    }

func (n *SIF_ExtendedElementsType_SIF_ExtendedElement) Unset(key string) *SIF_ExtendedElementsType_SIF_ExtendedElement {
        switch key {
  case "Name":
   n.sif_extendedelementstype_sif_extendedelement.Name = nil
  case "Type":
   n.sif_extendedelementstype_sif_extendedelement.Type = nil
  case "SIF_Action":
   n.sif_extendedelementstype_sif_extendedelement.SIF_Action = nil
  case "Value":
   n.sif_extendedelementstype_sif_extendedelement.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SIF_ExtendedElementsType_SIF_ExtendedElement")
        }
        return n
}

func (n *SIF_ExtendedElementsType_SIF_ExtendedElement) SetProperty(key string, value interface{}) *SIF_ExtendedElementsType_SIF_ExtendedElement {
        if n == nil {
                n, _ = SIF_ExtendedElementsType_SIF_ExtendedElementPointer(SIF_ExtendedElementsType_SIF_ExtendedElement{})
        }
        switch key {
    case "Name":
    
    if v, ok:= StringPointer(value); ok {
      n.sif_extendedelementstype_sif_extendedelement.Name = ((*String)(v))
      }
    case "Type":
    
    if v, ok:= StringPointer(value); ok {
      n.sif_extendedelementstype_sif_extendedelement.Type = ((*String)(v))
      }
    case "SIF_Action":
    
    if v, ok:= StringPointer(value); ok {
      n.sif_extendedelementstype_sif_extendedelement.SIF_Action = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.sif_extendedelementstype_sif_extendedelement.Value = ((*ExtendedContentType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "SIF_ExtendedElementsType_SIF_ExtendedElement")
        }
        return n
}

  func (s *SIF_ExtendedElementsType_SIF_ExtendedElement) Name() *String {
    if s.sif_extendedelementstype_sif_extendedelement.Name == nil {
    if v, ok:= StringPointer(""); ok {
      s.sif_extendedelementstype_sif_extendedelement.Name = ((*String)(v))
      }
      }
      return s.sif_extendedelementstype_sif_extendedelement.Name
    }
  func (s *SIF_ExtendedElementsType_SIF_ExtendedElement) Name_IsNil() bool {
    return s.Name == nil || s.sif_extendedelementstype_sif_extendedelement.Name == nil
    }
  func (s *SIF_ExtendedElementsType_SIF_ExtendedElement) Type() *String {
    if s.sif_extendedelementstype_sif_extendedelement.Type == nil {
    if v, ok:= StringPointer(""); ok {
      s.sif_extendedelementstype_sif_extendedelement.Type = ((*String)(v))
      }
      }
      return s.sif_extendedelementstype_sif_extendedelement.Type
    }
  func (s *SIF_ExtendedElementsType_SIF_ExtendedElement) Type_IsNil() bool {
    return s.Type == nil || s.sif_extendedelementstype_sif_extendedelement.Type == nil
    }
  func (s *SIF_ExtendedElementsType_SIF_ExtendedElement) SIF_Action() *String {
    if s.sif_extendedelementstype_sif_extendedelement.SIF_Action == nil {
    if v, ok:= StringPointer(""); ok {
      s.sif_extendedelementstype_sif_extendedelement.SIF_Action = ((*String)(v))
      }
      }
      return s.sif_extendedelementstype_sif_extendedelement.SIF_Action
    }
  func (s *SIF_ExtendedElementsType_SIF_ExtendedElement) SIF_Action_IsNil() bool {
    return s.SIF_Action == nil || s.sif_extendedelementstype_sif_extendedelement.SIF_Action == nil
    }
  func (s *SIF_ExtendedElementsType_SIF_ExtendedElement) Value() *ExtendedContentType {
    if s.sif_extendedelementstype_sif_extendedelement.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.sif_extendedelementstype_sif_extendedelement.Value = ((*ExtendedContentType)(v))
      }
      }
      return s.sif_extendedelementstype_sif_extendedelement.Value
    }
  func (s *SIF_ExtendedElementsType_SIF_ExtendedElement) Value_IsNil() bool {
    return s.Value == nil || s.sif_extendedelementstype_sif_extendedelement.Value == nil
    }

func (n *StandardsSettingBodyType) Unset(key string) *StandardsSettingBodyType {
        switch key {
  case "Country":
   n.standardssettingbodytype.Country = nil
  case "StateProvince":
   n.standardssettingbodytype.StateProvince = nil
  case "SettingBodyName":
   n.standardssettingbodytype.SettingBodyName = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StandardsSettingBodyType")
        }
        return n
}

func (n *StandardsSettingBodyType) SetProperty(key string, value interface{}) *StandardsSettingBodyType {
        if n == nil {
                n, _ = StandardsSettingBodyTypePointer(StandardsSettingBodyType{})
        }
        switch key {
    case "Country":
        if !CodesetContains(AUCodeSetsStandardAustralianClassificationOfCountriesSACCType_map, value) {
      log.Fatalf("%s is not present in %s\n", value, "AUCodeSetsStandardAustralianClassificationOfCountriesSACCType_values")
      }

    if v, ok:= StringPointer(value); ok {
      n.standardssettingbodytype.Country = ((*CountryType)(v))
      }
    case "StateProvince":
    
    if v, ok:= StringPointer(value); ok {
      n.standardssettingbodytype.StateProvince = ((*StateProvinceType)(v))
      }
    case "SettingBodyName":
    
    if v, ok:= StringPointer(value); ok {
      n.standardssettingbodytype.SettingBodyName = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "StandardsSettingBodyType")
        }
        return n
}

  func (s *StandardsSettingBodyType) Country() *CountryType {
    if s.standardssettingbodytype.Country == nil {
    if v, ok:= StringPointer(""); ok {
      s.standardssettingbodytype.Country = ((*CountryType)(v))
      }
      }
      return s.standardssettingbodytype.Country
    }
  func (s *StandardsSettingBodyType) Country_IsNil() bool {
    return s.Country == nil || s.standardssettingbodytype.Country == nil
    }
  func (s *StandardsSettingBodyType) StateProvince() *StateProvinceType {
    if s.standardssettingbodytype.StateProvince == nil {
    if v, ok:= StringPointer(""); ok {
      s.standardssettingbodytype.StateProvince = ((*StateProvinceType)(v))
      }
      }
      return s.standardssettingbodytype.StateProvince
    }
  func (s *StandardsSettingBodyType) StateProvince_IsNil() bool {
    return s.StateProvince == nil || s.standardssettingbodytype.StateProvince == nil
    }
  func (s *StandardsSettingBodyType) SettingBodyName() *String {
    if s.standardssettingbodytype.SettingBodyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.standardssettingbodytype.SettingBodyName = ((*String)(v))
      }
      }
      return s.standardssettingbodytype.SettingBodyName
    }
  func (s *StandardsSettingBodyType) SettingBodyName_IsNil() bool {
    return s.SettingBodyName == nil || s.standardssettingbodytype.SettingBodyName == nil
    }

func (n *IdentityAssertionsType_IdentityAssertion) Unset(key string) *IdentityAssertionsType_IdentityAssertion {
        switch key {
  case "SchemaName":
   n.identityassertionstype_identityassertion.SchemaName = nil
  case "Value":
   n.identityassertionstype_identityassertion.Value = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "IdentityAssertionsType_IdentityAssertion")
        }
        return n
}

func (n *IdentityAssertionsType_IdentityAssertion) SetProperty(key string, value interface{}) *IdentityAssertionsType_IdentityAssertion {
        if n == nil {
                n, _ = IdentityAssertionsType_IdentityAssertionPointer(IdentityAssertionsType_IdentityAssertion{})
        }
        switch key {
    case "SchemaName":
    
    if v, ok:= StringPointer(value); ok {
      n.identityassertionstype_identityassertion.SchemaName = ((*String)(v))
      }
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.identityassertionstype_identityassertion.Value = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "IdentityAssertionsType_IdentityAssertion")
        }
        return n
}

  func (s *IdentityAssertionsType_IdentityAssertion) SchemaName() *String {
    if s.identityassertionstype_identityassertion.SchemaName == nil {
    if v, ok:= StringPointer(""); ok {
      s.identityassertionstype_identityassertion.SchemaName = ((*String)(v))
      }
      }
      return s.identityassertionstype_identityassertion.SchemaName
    }
  func (s *IdentityAssertionsType_IdentityAssertion) SchemaName_IsNil() bool {
    return s.SchemaName == nil || s.identityassertionstype_identityassertion.SchemaName == nil
    }
  func (s *IdentityAssertionsType_IdentityAssertion) Value() *String {
    if s.identityassertionstype_identityassertion.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.identityassertionstype_identityassertion.Value = ((*String)(v))
      }
      }
      return s.identityassertionstype_identityassertion.Value
    }
  func (s *IdentityAssertionsType_IdentityAssertion) Value_IsNil() bool {
    return s.Value == nil || s.identityassertionstype_identityassertion.Value == nil
    }

func (n *PasswordListType_Password) Unset(key string) *PasswordListType_Password {
        switch key {
  case "Value":
   n.passwordlisttype_password.Value = nil
  case "KeyName":
   n.passwordlisttype_password.KeyName = nil
  case "Algorithm":
   n.passwordlisttype_password.Algorithm = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PasswordListType_Password")
        }
        return n
}

func (n *PasswordListType_Password) SetProperty(key string, value interface{}) *PasswordListType_Password {
        if n == nil {
                n, _ = PasswordListType_PasswordPointer(PasswordListType_Password{})
        }
        switch key {
    case "Value":
    
    if v, ok:= StringPointer(value); ok {
      n.passwordlisttype_password.Value = ((*String)(v))
      }
    case "KeyName":
    
    if v, ok:= StringPointer(value); ok {
      n.passwordlisttype_password.KeyName = ((*String)(v))
      }
    case "Algorithm":
    
    if v, ok:= StringPointer(value); ok {
      n.passwordlisttype_password.Algorithm = ((*String)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "PasswordListType_Password")
        }
        return n
}

  func (s *PasswordListType_Password) Value() *String {
    if s.passwordlisttype_password.Value == nil {
    if v, ok:= StringPointer(""); ok {
      s.passwordlisttype_password.Value = ((*String)(v))
      }
      }
      return s.passwordlisttype_password.Value
    }
  func (s *PasswordListType_Password) Value_IsNil() bool {
    return s.Value == nil || s.passwordlisttype_password.Value == nil
    }
  func (s *PasswordListType_Password) KeyName() *String {
    if s.passwordlisttype_password.KeyName == nil {
    if v, ok:= StringPointer(""); ok {
      s.passwordlisttype_password.KeyName = ((*String)(v))
      }
      }
      return s.passwordlisttype_password.KeyName
    }
  func (s *PasswordListType_Password) KeyName_IsNil() bool {
    return s.KeyName == nil || s.passwordlisttype_password.KeyName == nil
    }
  func (s *PasswordListType_Password) Algorithm() *String {
    if s.passwordlisttype_password.Algorithm == nil {
    if v, ok:= StringPointer(""); ok {
      s.passwordlisttype_password.Algorithm = ((*String)(v))
      }
      }
      return s.passwordlisttype_password.Algorithm
    }
  func (s *PasswordListType_Password) Algorithm_IsNil() bool {
    return s.Algorithm == nil || s.passwordlisttype_password.Algorithm == nil
    }

func (n *LifeCycleType) Unset(key string) *LifeCycleType {
        switch key {
  case "TimeElements":
   n.lifecycletype.TimeElements = nil
  case "Created":
   n.lifecycletype.Created = nil
  case "ModificationHistory":
   n.lifecycletype.ModificationHistory = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType")
        }
        return n
}

func (n *LifeCycleType) SetProperty(key string, value interface{}) *LifeCycleType {
        if n == nil {
                n, _ = LifeCycleTypePointer(LifeCycleType{})
        }
        switch key {
    case "TimeElements":
    if v, ok:= LifeCycleType_TimeElementsPointer(value); ok {
      n.lifecycletype.TimeElements = v
      }
    case "Created":
    if v, ok:= LifeCycleType_CreatedPointer(value); ok {
      n.lifecycletype.Created = v
      }
    case "ModificationHistory":
    if v, ok:= LifeCycleType_ModificationHistoryPointer(value); ok {
      n.lifecycletype.ModificationHistory = v
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "LifeCycleType")
        }
        return n
}

  func (s *LifeCycleType) TimeElements() *LifeCycleType_TimeElements {
    if s.lifecycletype.TimeElements == nil {
     if v, ok:= LifeCycleType_TimeElementsPointer(LifeCycleType_TimeElements{}); ok {
      s.lifecycletype.TimeElements = v
      }
      }
      return s.lifecycletype.TimeElements
    }
  func (s *LifeCycleType) TimeElements_IsNil() bool {
    return s.TimeElements == nil || s.lifecycletype.TimeElements == nil
    }
  func (s *LifeCycleType) Created() *LifeCycleType_Created {
    if s.lifecycletype.Created == nil {
     if v, ok:= LifeCycleType_CreatedPointer(LifeCycleType_Created{}); ok {
      s.lifecycletype.Created = v
      }
      }
      return s.lifecycletype.Created
    }
  func (s *LifeCycleType) Created_IsNil() bool {
    return s.Created == nil || s.lifecycletype.Created == nil
    }
  func (s *LifeCycleType) ModificationHistory() *LifeCycleType_ModificationHistory {
    if s.lifecycletype.ModificationHistory == nil {
     if v, ok:= LifeCycleType_ModificationHistoryPointer(LifeCycleType_ModificationHistory{}); ok {
      s.lifecycletype.ModificationHistory = v
      }
      }
      return s.lifecycletype.ModificationHistory
    }
  func (s *LifeCycleType) ModificationHistory_IsNil() bool {
    return s.ModificationHistory == nil || s.lifecycletype.ModificationHistory == nil
    }

func (n *Debtor) Unset(key string) *Debtor {
        switch key {
  case "BillingName":
   n.debtor.BillingName = nil
  case "SIF_Metadata":
   n.debtor.SIF_Metadata = nil
  case "LocalCodeList":
   n.debtor.LocalCodeList = nil
  case "BilledEntity":
   n.debtor.BilledEntity = nil
  case "SIF_ExtendedElements":
   n.debtor.SIF_ExtendedElements = nil
  case "LocalId":
   n.debtor.LocalId = nil
  case "BillingNote":
   n.debtor.BillingNote = nil
  case "Discount":
   n.debtor.Discount = nil
  case "AddressList":
   n.debtor.AddressList = nil
  case "RefId":
   n.debtor.RefId = nil
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Debtor")
        }
        return n
}

func (n *Debtor) SetProperty(key string, value interface{}) *Debtor {
        if n == nil {
                n, _ = DebtorPointer(Debtor{})
        }
        switch key {
    case "BillingName":
    
    if v, ok:= StringPointer(value); ok {
      n.debtor.BillingName = ((*String)(v))
      }
    case "SIF_Metadata":
    if v, ok:= SIF_MetadataTypePointer(value); ok {
      n.debtor.SIF_Metadata = v
      }
    case "LocalCodeList":
    if v, ok:= LocalCodeListTypePointer(value); ok {
      n.debtor.LocalCodeList = v
      }
    case "BilledEntity":
    if v, ok:= Debtor_BilledEntityPointer(value); ok {
      n.debtor.BilledEntity = v
      }
    case "SIF_ExtendedElements":
    if v, ok:= SIF_ExtendedElementsTypePointer(value); ok {
      n.debtor.SIF_ExtendedElements = v
      }
    case "LocalId":
    
    if v, ok:= StringPointer(value); ok {
      n.debtor.LocalId = ((*LocalIdType)(v))
      }
    case "BillingNote":
    
    if v, ok:= StringPointer(value); ok {
      n.debtor.BillingNote = ((*String)(v))
      }
    case "Discount":
    
    if v, ok:= StringPointer(value); ok {
      n.debtor.Discount = ((*String)(v))
      }
    case "AddressList":
    if v, ok:= AddressListTypePointer(value); ok {
      n.debtor.AddressList = v
      }
    case "RefId":
    
    if v, ok:= StringPointer(value); ok {
      n.debtor.RefId = ((*RefIdType)(v))
      }
        default:
          log.Fatalf("%s is not a valid element name in %s\n", key, "Debtor")
        }
        return n
}

  func (s *Debtor) BillingName() *String {
    if s.debtor.BillingName == nil {
    if v, ok:= StringPointer(""); ok {
      s.debtor.BillingName = ((*String)(v))
      }
      }
      return s.debtor.BillingName
    }
  func (s *Debtor) BillingName_IsNil() bool {
    return s.BillingName == nil || s.debtor.BillingName == nil
    }
  func (s *Debtor) SIF_Metadata() *SIF_MetadataType {
    if s.debtor.SIF_Metadata == nil {
     if v, ok:= SIF_MetadataTypePointer(SIF_MetadataType{}); ok {
      s.debtor.SIF_Metadata = v
      }
      }
      return s.debtor.SIF_Metadata
    }
  func (s *Debtor) SIF_Metadata_IsNil() bool {
    return s.SIF_Metadata == nil || s.debtor.SIF_Metadata == nil
    }
  func (s *Debtor) LocalCodeList() *LocalCodeListType {
    if s.debtor.LocalCodeList == nil {
     if v, ok:= LocalCodeListTypePointer(LocalCodeListType{}); ok {
      s.debtor.LocalCodeList = v
      }
      }
      return s.debtor.LocalCodeList
    }
  func (s *Debtor) LocalCodeList_IsNil() bool {
    return s.LocalCodeList == nil || s.debtor.LocalCodeList == nil
    }
  func (s *Debtor) BilledEntity() *Debtor_BilledEntity {
    if s.debtor.BilledEntity == nil {
     if v, ok:= Debtor_BilledEntityPointer(Debtor_BilledEntity{}); ok {
      s.debtor.BilledEntity = v
      }
      }
      return s.debtor.BilledEntity
    }
  func (s *Debtor) BilledEntity_IsNil() bool {
    return s.BilledEntity == nil || s.debtor.BilledEntity == nil
    }
  func (s *Debtor) SIF_ExtendedElements() *SIF_ExtendedElementsType {
    if s.debtor.SIF_ExtendedElements == nil {
     if v, ok:= SIF_ExtendedElementsTypePointer(SIF_ExtendedElementsType{}); ok {
      s.debtor.SIF_ExtendedElements = v
      }
      }
      return s.debtor.SIF_ExtendedElements
    }
  func (s *Debtor) SIF_ExtendedElements_IsNil() bool {
    return s.SIF_ExtendedElements == nil || s.debtor.SIF_ExtendedElements == nil
    }
  func (s *Debtor) LocalId() *LocalIdType {
    if s.debtor.LocalId == nil {
    if v, ok:= StringPointer(""); ok {
      s.debtor.LocalId = ((*LocalIdType)(v))
      }
      }
      return s.debtor.LocalId
    }
  func (s *Debtor) LocalId_IsNil() bool {
    return s.LocalId == nil || s.debtor.LocalId == nil
    }
  func (s *Debtor) BillingNote() *String {
    if s.debtor.BillingNote == nil {
    if v, ok:= StringPointer(""); ok {
      s.debtor.BillingNote = ((*String)(v))
      }
      }
      return s.debtor.BillingNote
    }
  func (s *Debtor) BillingNote_IsNil() bool {
    return s.BillingNote == nil || s.debtor.BillingNote == nil
    }
  func (s *Debtor) Discount() *String {
    if s.debtor.Discount == nil {
    if v, ok:= StringPointer(""); ok {
      s.debtor.Discount = ((*String)(v))
      }
      }
      return s.debtor.Discount
    }
  func (s *Debtor) Discount_IsNil() bool {
    return s.Discount == nil || s.debtor.Discount == nil
    }
  func (s *Debtor) AddressList() *AddressListType {
    if s.debtor.AddressList == nil {
     if v, ok:= AddressListTypePointer(AddressListType{}); ok {
      s.debtor.AddressList = v
      }
      }
      return s.debtor.AddressList
    }
  func (s *Debtor) AddressList_IsNil() bool {
    return s.AddressList == nil || s.debtor.AddressList == nil
    }
  func (s *Debtor) RefId() *RefIdType {
    if s.debtor.RefId == nil {
    if v, ok:= StringPointer(""); ok {
      s.debtor.RefId = ((*RefIdType)(v))
      }
      }
      return s.debtor.RefId
    }
  func (s *Debtor) RefId_IsNil() bool {
    return s.RefId == nil || s.debtor.RefId == nil
    }
